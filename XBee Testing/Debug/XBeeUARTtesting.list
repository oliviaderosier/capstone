
XBeeUARTtesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001984  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001a90  08001a90  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001abc  08001abc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001abc  08001abc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001abc  08001abc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001abc  08001abc  00011abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ac0  08001ac0  00011ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000000c  08001ad0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08001ad0  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000565f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001300  00000000  00000000  00025694  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  00026998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  00026ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015e3e  00000000  00000000  000275a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005766  00000000  00000000  0003d3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007dc13  00000000  00000000  00042b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0757  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001868  00000000  00000000  000c07d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a78 	.word	0x08001a78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a78 	.word	0x08001a78

0800014c <processIO>:
	uint8_t temperature;

};

void processIO()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  return;
 8000150:	bf00      	nop
}
 8000152:	46bd      	mov	sp, r7
 8000154:	bc80      	pop	{r7}
 8000156:	4770      	bx	lr

08000158 <processTempRequest>:

void processTempRequest()
{
 8000158:	b480      	push	{r7}
 800015a:	af00      	add	r7, sp, #0
  return;
 800015c:	bf00      	nop
}
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr

08000164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b084      	sub	sp, #16
 8000168:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016a:	f000 f9a3 	bl	80004b4 <HAL_Init>
  struct sensorNode Red;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016e:	f000 f80f 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000172:	f000 f873 	bl	800025c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000176:	f000 f847 	bl	8000208 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 24);
 800017a:	2218      	movs	r2, #24
 800017c:	4902      	ldr	r1, [pc, #8]	; (8000188 <main+0x24>)
 800017e:	4803      	ldr	r0, [pc, #12]	; (800018c <main+0x28>)
 8000180:	f001 f941 	bl	8001406 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000184:	e7fe      	b.n	8000184 <main+0x20>
 8000186:	bf00      	nop
 8000188:	2000002c 	.word	0x2000002c
 800018c:	20000060 	.word	0x20000060

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	; 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	; 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f001 fc62 	bl	8001a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b2:	2302      	movs	r3, #2
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ba:	2310      	movs	r3, #16
 80001bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001be:	2300      	movs	r3, #0
 80001c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	4618      	mov	r0, r3
 80001c8:	f000 fcb4 	bl	8000b34 <HAL_RCC_OscConfig>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d001      	beq.n	80001d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001d2:	f000 f883 	bl	80002dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d6:	230f      	movs	r3, #15
 80001d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001da:	2300      	movs	r3, #0
 80001dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2100      	movs	r1, #0
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 ff20 	bl	8001034 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fa:	f000 f86f 	bl	80002dc <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800020c:	4b11      	ldr	r3, [pc, #68]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 800020e:	4a12      	ldr	r2, [pc, #72]	; (8000258 <MX_USART3_UART_Init+0x50>)
 8000210:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 8000214:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000218:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 800021c:	2200      	movs	r2, #0
 800021e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 8000228:	2200      	movs	r2, #0
 800022a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 800022e:	220c      	movs	r2, #12
 8000230:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 800023a:	2200      	movs	r2, #0
 800023c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <MX_USART3_UART_Init+0x4c>)
 8000240:	f001 f894 	bl	800136c <HAL_UART_Init>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800024a:	f000 f847 	bl	80002dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800024e:	bf00      	nop
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000060 	.word	0x20000060
 8000258:	40004800 	.word	0x40004800

0800025c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <MX_GPIO_Init+0x40>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a0d      	ldr	r2, [pc, #52]	; (800029c <MX_GPIO_Init+0x40>)
 8000268:	f043 0308 	orr.w	r3, r3, #8
 800026c:	6193      	str	r3, [r2, #24]
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <MX_GPIO_Init+0x40>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	f003 0308 	and.w	r3, r3, #8
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027a:	4b08      	ldr	r3, [pc, #32]	; (800029c <MX_GPIO_Init+0x40>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	4a07      	ldr	r2, [pc, #28]	; (800029c <MX_GPIO_Init+0x40>)
 8000280:	f043 0304 	orr.w	r3, r3, #4
 8000284:	6193      	str	r3, [r2, #24]
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <MX_GPIO_Init+0x40>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f003 0304 	and.w	r3, r3, #4
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]

}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000

080002a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 24);
 80002a8:	2218      	movs	r2, #24
 80002aa:	490a      	ldr	r1, [pc, #40]	; (80002d4 <HAL_UART_RxCpltCallback+0x34>)
 80002ac:	480a      	ldr	r0, [pc, #40]	; (80002d8 <HAL_UART_RxCpltCallback+0x38>)
 80002ae:	f001 f8aa 	bl	8001406 <HAL_UART_Receive_IT>
	switch (uartBufferRX[3])
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <HAL_UART_RxCpltCallback+0x34>)
 80002b4:	78db      	ldrb	r3, [r3, #3]
 80002b6:	2b87      	cmp	r3, #135	; 0x87
 80002b8:	d005      	beq.n	80002c6 <HAL_UART_RxCpltCallback+0x26>
 80002ba:	2b92      	cmp	r3, #146	; 0x92
 80002bc:	d000      	beq.n	80002c0 <HAL_UART_RxCpltCallback+0x20>
	case 0x87:
		processTempRequest();
		break;

	default:
		break;
 80002be:	e005      	b.n	80002cc <HAL_UART_RxCpltCallback+0x2c>
		processIO();
 80002c0:	f7ff ff44 	bl	800014c <processIO>
		break;
 80002c4:	e002      	b.n	80002cc <HAL_UART_RxCpltCallback+0x2c>
		processTempRequest();
 80002c6:	f7ff ff47 	bl	8000158 <processTempRequest>
		break;
 80002ca:	bf00      	nop
	}

	return;
 80002cc:	bf00      	nop
}
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	2000002c 	.word	0x2000002c
 80002d8:	20000060 	.word	0x20000060

080002dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bc80      	pop	{r7}
 80002e6:	4770      	bx	lr

080002e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ee:	4b15      	ldr	r3, [pc, #84]	; (8000344 <HAL_MspInit+0x5c>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <HAL_MspInit+0x5c>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b12      	ldr	r3, [pc, #72]	; (8000344 <HAL_MspInit+0x5c>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
 8000304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <HAL_MspInit+0x5c>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <HAL_MspInit+0x5c>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000310:	61d3      	str	r3, [r2, #28]
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <HAL_MspInit+0x5c>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <HAL_MspInit+0x60>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <HAL_MspInit+0x60>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000
 8000348:	40010000 	.word	0x40010000

0800034c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a20      	ldr	r2, [pc, #128]	; (80003e8 <HAL_UART_MspInit+0x9c>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d139      	bne.n	80003e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800036c:	4b1f      	ldr	r3, [pc, #124]	; (80003ec <HAL_UART_MspInit+0xa0>)
 800036e:	69db      	ldr	r3, [r3, #28]
 8000370:	4a1e      	ldr	r2, [pc, #120]	; (80003ec <HAL_UART_MspInit+0xa0>)
 8000372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000376:	61d3      	str	r3, [r2, #28]
 8000378:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <HAL_UART_MspInit+0xa0>)
 800037a:	69db      	ldr	r3, [r3, #28]
 800037c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000384:	4b19      	ldr	r3, [pc, #100]	; (80003ec <HAL_UART_MspInit+0xa0>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a18      	ldr	r2, [pc, #96]	; (80003ec <HAL_UART_MspInit+0xa0>)
 800038a:	f043 0308 	orr.w	r3, r3, #8
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b16      	ldr	r3, [pc, #88]	; (80003ec <HAL_UART_MspInit+0xa0>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0308 	and.w	r3, r3, #8
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800039c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003a2:	2302      	movs	r3, #2
 80003a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003a6:	2303      	movs	r3, #3
 80003a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	4619      	mov	r1, r3
 80003b0:	480f      	ldr	r0, [pc, #60]	; (80003f0 <HAL_UART_MspInit+0xa4>)
 80003b2:	f000 fa65 	bl	8000880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80003ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	4809      	ldr	r0, [pc, #36]	; (80003f0 <HAL_UART_MspInit+0xa4>)
 80003cc:	f000 fa58 	bl	8000880 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	2027      	movs	r0, #39	; 0x27
 80003d6:	f000 f9a6 	bl	8000726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80003da:	2027      	movs	r0, #39	; 0x27
 80003dc:	f000 f9bf 	bl	800075e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40004800 	.word	0x40004800
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010c00 	.word	0x40010c00

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <HardFault_Handler+0x4>

08000406 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <MemManage_Handler+0x4>

0800040c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <BusFault_Handler+0x4>

08000412 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <UsageFault_Handler+0x4>

08000418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000440:	f000 f87e 	bl	8000540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800044c:	4802      	ldr	r0, [pc, #8]	; (8000458 <USART3_IRQHandler+0x10>)
 800044e:	f001 f82f 	bl	80014b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000060 	.word	0x20000060

0800045c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000468:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800046a:	e003      	b.n	8000474 <LoopCopyDataInit>

0800046c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800046e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000470:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000472:	3104      	adds	r1, #4

08000474 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000474:	480a      	ldr	r0, [pc, #40]	; (80004a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000476:	4b0b      	ldr	r3, [pc, #44]	; (80004a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000478:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800047a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800047c:	d3f6      	bcc.n	800046c <CopyDataInit>
  ldr r2, =_sbss
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000480:	e002      	b.n	8000488 <LoopFillZerobss>

08000482 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000484:	f842 3b04 	str.w	r3, [r2], #4

08000488 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800048a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800048c:	d3f9      	bcc.n	8000482 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800048e:	f7ff ffe5 	bl	800045c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000492:	f001 fac5 	bl	8001a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fe65 	bl	8000164 <main>
  bx lr
 800049a:	4770      	bx	lr
  ldr r3, =_sidata
 800049c:	08001ac4 	.word	0x08001ac4
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80004a8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80004ac:	200000d8 	.word	0x200000d8

080004b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b0:	e7fe      	b.n	80004b0 <ADC1_2_IRQHandler>
	...

080004b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <HAL_Init+0x28>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a07      	ldr	r2, [pc, #28]	; (80004dc <HAL_Init+0x28>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004c4:	2003      	movs	r0, #3
 80004c6:	f000 f923 	bl	8000710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 f808 	bl	80004e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004d0:	f7ff ff0a 	bl	80002e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004d4:	2300      	movs	r3, #0
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40022000 	.word	0x40022000

080004e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <HAL_InitTick+0x54>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <HAL_InitTick+0x58>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4619      	mov	r1, r3
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f93b 	bl	800077a <HAL_SYSTICK_Config>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800050a:	2301      	movs	r3, #1
 800050c:	e00e      	b.n	800052c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b0f      	cmp	r3, #15
 8000512:	d80a      	bhi.n	800052a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000514:	2200      	movs	r2, #0
 8000516:	6879      	ldr	r1, [r7, #4]
 8000518:	f04f 30ff 	mov.w	r0, #4294967295
 800051c:	f000 f903 	bl	8000726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <HAL_InitTick+0x5c>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000526:	2300      	movs	r3, #0
 8000528:	e000      	b.n	800052c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800052a:	2301      	movs	r3, #1
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000000 	.word	0x20000000
 8000538:	20000008 	.word	0x20000008
 800053c:	20000004 	.word	0x20000004

08000540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <HAL_IncTick+0x1c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_IncTick+0x20>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4413      	add	r3, r2
 8000550:	4a03      	ldr	r2, [pc, #12]	; (8000560 <HAL_IncTick+0x20>)
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	20000008 	.word	0x20000008
 8000560:	200000d4 	.word	0x200000d4

08000564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return uwTick;
 8000568:	4b02      	ldr	r3, [pc, #8]	; (8000574 <HAL_GetTick+0x10>)
 800056a:	681b      	ldr	r3, [r3, #0]
}
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	200000d4 	.word	0x200000d4

08000578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <__NVIC_SetPriorityGrouping+0x44>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000594:	4013      	ands	r3, r2
 8000596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <__NVIC_SetPriorityGrouping+0x44>)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	60d3      	str	r3, [r2, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <__NVIC_GetPriorityGrouping+0x18>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	f003 0307 	and.w	r3, r3, #7
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	db0b      	blt.n	8000606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f003 021f 	and.w	r2, r3, #31
 80005f4:	4906      	ldr	r1, [pc, #24]	; (8000610 <__NVIC_EnableIRQ+0x34>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	095b      	lsrs	r3, r3, #5
 80005fc:	2001      	movs	r0, #1
 80005fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	e000e100 	.word	0xe000e100

08000614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db0a      	blt.n	800063e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2da      	uxtb	r2, r3
 800062c:	490c      	ldr	r1, [pc, #48]	; (8000660 <__NVIC_SetPriority+0x4c>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	0112      	lsls	r2, r2, #4
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	440b      	add	r3, r1
 8000638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800063c:	e00a      	b.n	8000654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4908      	ldr	r1, [pc, #32]	; (8000664 <__NVIC_SetPriority+0x50>)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	3b04      	subs	r3, #4
 800064c:	0112      	lsls	r2, r2, #4
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	440b      	add	r3, r1
 8000652:	761a      	strb	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000668:	b480      	push	{r7}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f1c3 0307 	rsb	r3, r3, #7
 8000682:	2b04      	cmp	r3, #4
 8000684:	bf28      	it	cs
 8000686:	2304      	movcs	r3, #4
 8000688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3304      	adds	r3, #4
 800068e:	2b06      	cmp	r3, #6
 8000690:	d902      	bls.n	8000698 <NVIC_EncodePriority+0x30>
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3b03      	subs	r3, #3
 8000696:	e000      	b.n	800069a <NVIC_EncodePriority+0x32>
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43da      	mvns	r2, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	401a      	ands	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43d9      	mvns	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	4313      	orrs	r3, r2
         );
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3724      	adds	r7, #36	; 0x24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006dc:	d301      	bcc.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e00f      	b.n	8000702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4a0a      	ldr	r2, [pc, #40]	; (800070c <SysTick_Config+0x40>)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	210f      	movs	r1, #15
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ff90 	bl	8000614 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <SysTick_Config+0x40>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fa:	4b04      	ldr	r3, [pc, #16]	; (800070c <SysTick_Config+0x40>)
 80006fc:	2207      	movs	r2, #7
 80006fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010

08000710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff2d 	bl	8000578 <__NVIC_SetPriorityGrouping>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	4603      	mov	r3, r0
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000738:	f7ff ff42 	bl	80005c0 <__NVIC_GetPriorityGrouping>
 800073c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	6978      	ldr	r0, [r7, #20]
 8000744:	f7ff ff90 	bl	8000668 <NVIC_EncodePriority>
 8000748:	4602      	mov	r2, r0
 800074a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff ff5f 	bl	8000614 <__NVIC_SetPriority>
}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	4603      	mov	r3, r0
 8000766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff35 	bl	80005dc <__NVIC_EnableIRQ>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ffa2 	bl	80006cc <SysTick_Config>
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d005      	beq.n	80007b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2204      	movs	r2, #4
 80007ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80007b0:	2301      	movs	r3, #1
 80007b2:	73fb      	strb	r3, [r7, #15]
 80007b4:	e051      	b.n	800085a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f022 020e 	bic.w	r2, r2, #14
 80007c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0201 	bic.w	r2, r2, #1
 80007d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <HAL_DMA_Abort_IT+0xd0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d029      	beq.n	8000834 <HAL_DMA_Abort_IT+0xa0>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a20      	ldr	r2, [pc, #128]	; (8000868 <HAL_DMA_Abort_IT+0xd4>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d022      	beq.n	8000830 <HAL_DMA_Abort_IT+0x9c>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <HAL_DMA_Abort_IT+0xd8>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d01a      	beq.n	800082a <HAL_DMA_Abort_IT+0x96>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a1d      	ldr	r2, [pc, #116]	; (8000870 <HAL_DMA_Abort_IT+0xdc>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d012      	beq.n	8000824 <HAL_DMA_Abort_IT+0x90>
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <HAL_DMA_Abort_IT+0xe0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d00a      	beq.n	800081e <HAL_DMA_Abort_IT+0x8a>
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a1a      	ldr	r2, [pc, #104]	; (8000878 <HAL_DMA_Abort_IT+0xe4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d102      	bne.n	8000818 <HAL_DMA_Abort_IT+0x84>
 8000812:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000816:	e00e      	b.n	8000836 <HAL_DMA_Abort_IT+0xa2>
 8000818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800081c:	e00b      	b.n	8000836 <HAL_DMA_Abort_IT+0xa2>
 800081e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000822:	e008      	b.n	8000836 <HAL_DMA_Abort_IT+0xa2>
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	e005      	b.n	8000836 <HAL_DMA_Abort_IT+0xa2>
 800082a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082e:	e002      	b.n	8000836 <HAL_DMA_Abort_IT+0xa2>
 8000830:	2310      	movs	r3, #16
 8000832:	e000      	b.n	8000836 <HAL_DMA_Abort_IT+0xa2>
 8000834:	2301      	movs	r3, #1
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_DMA_Abort_IT+0xe8>)
 8000838:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2201      	movs	r2, #1
 800083e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084e:	2b00      	cmp	r3, #0
 8000850:	d003      	beq.n	800085a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	4798      	blx	r3
    } 
  }
  return status;
 800085a:	7bfb      	ldrb	r3, [r7, #15]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40020008 	.word	0x40020008
 8000868:	4002001c 	.word	0x4002001c
 800086c:	40020030 	.word	0x40020030
 8000870:	40020044 	.word	0x40020044
 8000874:	40020058 	.word	0x40020058
 8000878:	4002006c 	.word	0x4002006c
 800087c:	40020000 	.word	0x40020000

08000880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000880:	b480      	push	{r7}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e127      	b.n	8000ae4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000894:	2201      	movs	r2, #1
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	69fa      	ldr	r2, [r7, #28]
 80008a4:	4013      	ands	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	f040 8116 	bne.w	8000ade <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d034      	beq.n	8000924 <HAL_GPIO_Init+0xa4>
 80008ba:	2b12      	cmp	r3, #18
 80008bc:	d80d      	bhi.n	80008da <HAL_GPIO_Init+0x5a>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d02b      	beq.n	800091a <HAL_GPIO_Init+0x9a>
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d804      	bhi.n	80008d0 <HAL_GPIO_Init+0x50>
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d031      	beq.n	800092e <HAL_GPIO_Init+0xae>
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d01c      	beq.n	8000908 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ce:	e048      	b.n	8000962 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d043      	beq.n	800095c <HAL_GPIO_Init+0xdc>
 80008d4:	2b11      	cmp	r3, #17
 80008d6:	d01b      	beq.n	8000910 <HAL_GPIO_Init+0x90>
          break;
 80008d8:	e043      	b.n	8000962 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008da:	4a89      	ldr	r2, [pc, #548]	; (8000b00 <HAL_GPIO_Init+0x280>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d026      	beq.n	800092e <HAL_GPIO_Init+0xae>
 80008e0:	4a87      	ldr	r2, [pc, #540]	; (8000b00 <HAL_GPIO_Init+0x280>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d806      	bhi.n	80008f4 <HAL_GPIO_Init+0x74>
 80008e6:	4a87      	ldr	r2, [pc, #540]	; (8000b04 <HAL_GPIO_Init+0x284>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d020      	beq.n	800092e <HAL_GPIO_Init+0xae>
 80008ec:	4a86      	ldr	r2, [pc, #536]	; (8000b08 <HAL_GPIO_Init+0x288>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d01d      	beq.n	800092e <HAL_GPIO_Init+0xae>
          break;
 80008f2:	e036      	b.n	8000962 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008f4:	4a85      	ldr	r2, [pc, #532]	; (8000b0c <HAL_GPIO_Init+0x28c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d019      	beq.n	800092e <HAL_GPIO_Init+0xae>
 80008fa:	4a85      	ldr	r2, [pc, #532]	; (8000b10 <HAL_GPIO_Init+0x290>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d016      	beq.n	800092e <HAL_GPIO_Init+0xae>
 8000900:	4a84      	ldr	r2, [pc, #528]	; (8000b14 <HAL_GPIO_Init+0x294>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d013      	beq.n	800092e <HAL_GPIO_Init+0xae>
          break;
 8000906:	e02c      	b.n	8000962 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	623b      	str	r3, [r7, #32]
          break;
 800090e:	e028      	b.n	8000962 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	3304      	adds	r3, #4
 8000916:	623b      	str	r3, [r7, #32]
          break;
 8000918:	e023      	b.n	8000962 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	3308      	adds	r3, #8
 8000920:	623b      	str	r3, [r7, #32]
          break;
 8000922:	e01e      	b.n	8000962 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	330c      	adds	r3, #12
 800092a:	623b      	str	r3, [r7, #32]
          break;
 800092c:	e019      	b.n	8000962 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d102      	bne.n	800093c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000936:	2304      	movs	r3, #4
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e012      	b.n	8000962 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d105      	bne.n	8000950 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000944:	2308      	movs	r3, #8
 8000946:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	611a      	str	r2, [r3, #16]
          break;
 800094e:	e008      	b.n	8000962 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000950:	2308      	movs	r3, #8
 8000952:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	69fa      	ldr	r2, [r7, #28]
 8000958:	615a      	str	r2, [r3, #20]
          break;
 800095a:	e002      	b.n	8000962 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
          break;
 8000960:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	2bff      	cmp	r3, #255	; 0xff
 8000966:	d801      	bhi.n	800096c <HAL_GPIO_Init+0xec>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	e001      	b.n	8000970 <HAL_GPIO_Init+0xf0>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3304      	adds	r3, #4
 8000970:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	2bff      	cmp	r3, #255	; 0xff
 8000976:	d802      	bhi.n	800097e <HAL_GPIO_Init+0xfe>
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	e002      	b.n	8000984 <HAL_GPIO_Init+0x104>
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	3b08      	subs	r3, #8
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	210f      	movs	r1, #15
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	401a      	ands	r2, r3
 8000996:	6a39      	ldr	r1, [r7, #32]
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	431a      	orrs	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f000 8096 	beq.w	8000ade <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b2:	4b59      	ldr	r3, [pc, #356]	; (8000b18 <HAL_GPIO_Init+0x298>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a58      	ldr	r2, [pc, #352]	; (8000b18 <HAL_GPIO_Init+0x298>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b56      	ldr	r3, [pc, #344]	; (8000b18 <HAL_GPIO_Init+0x298>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009ca:	4a54      	ldr	r2, [pc, #336]	; (8000b1c <HAL_GPIO_Init+0x29c>)
 80009cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	3302      	adds	r3, #2
 80009d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	f003 0303 	and.w	r3, r3, #3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	220f      	movs	r2, #15
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43db      	mvns	r3, r3
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4013      	ands	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4b      	ldr	r2, [pc, #300]	; (8000b20 <HAL_GPIO_Init+0x2a0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x19e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4a      	ldr	r2, [pc, #296]	; (8000b24 <HAL_GPIO_Init+0x2a4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x19a>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a49      	ldr	r2, [pc, #292]	; (8000b28 <HAL_GPIO_Init+0x2a8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x196>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a48      	ldr	r2, [pc, #288]	; (8000b2c <HAL_GPIO_Init+0x2ac>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x192>
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x1a0>
 8000a12:	2304      	movs	r3, #4
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x1a0>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x1a0>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x1a0>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a30:	493a      	ldr	r1, [pc, #232]	; (8000b1c <HAL_GPIO_Init+0x29c>)
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	4938      	ldr	r1, [pc, #224]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	600b      	str	r3, [r1, #0]
 8000a56:	e006      	b.n	8000a66 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	4933      	ldr	r1, [pc, #204]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a62:	4013      	ands	r3, r2
 8000a64:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d006      	beq.n	8000a80 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a72:	4b2f      	ldr	r3, [pc, #188]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	492e      	ldr	r1, [pc, #184]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	604b      	str	r3, [r1, #4]
 8000a7e:	e006      	b.n	8000a8e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	4929      	ldr	r1, [pc, #164]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d006      	beq.n	8000aa8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000a9c:	689a      	ldr	r2, [r3, #8]
 8000a9e:	4924      	ldr	r1, [pc, #144]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	608b      	str	r3, [r1, #8]
 8000aa6:	e006      	b.n	8000ab6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aa8:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	491f      	ldr	r1, [pc, #124]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	68da      	ldr	r2, [r3, #12]
 8000ac6:	491a      	ldr	r1, [pc, #104]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	60cb      	str	r3, [r1, #12]
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	4915      	ldr	r1, [pc, #84]	; (8000b30 <HAL_GPIO_Init+0x2b0>)
 8000ada:	4013      	ands	r3, r2
 8000adc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	fa22 f303 	lsr.w	r3, r2, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f47f aed0 	bne.w	8000894 <HAL_GPIO_Init+0x14>
  }
}
 8000af4:	bf00      	nop
 8000af6:	372c      	adds	r7, #44	; 0x2c
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	10210000 	.word	0x10210000
 8000b04:	10110000 	.word	0x10110000
 8000b08:	10120000 	.word	0x10120000
 8000b0c:	10310000 	.word	0x10310000
 8000b10:	10320000 	.word	0x10320000
 8000b14:	10220000 	.word	0x10220000
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40011400 	.word	0x40011400
 8000b30:	40010400 	.word	0x40010400

08000b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e26c      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	f000 8087 	beq.w	8000c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b54:	4b92      	ldr	r3, [pc, #584]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 030c 	and.w	r3, r3, #12
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	d00c      	beq.n	8000b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b60:	4b8f      	ldr	r3, [pc, #572]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	d112      	bne.n	8000b92 <HAL_RCC_OscConfig+0x5e>
 8000b6c:	4b8c      	ldr	r3, [pc, #560]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b78:	d10b      	bne.n	8000b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7a:	4b89      	ldr	r3, [pc, #548]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d06c      	beq.n	8000c60 <HAL_RCC_OscConfig+0x12c>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d168      	bne.n	8000c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e246      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9a:	d106      	bne.n	8000baa <HAL_RCC_OscConfig+0x76>
 8000b9c:	4b80      	ldr	r3, [pc, #512]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a7f      	ldr	r2, [pc, #508]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	e02e      	b.n	8000c08 <HAL_RCC_OscConfig+0xd4>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10c      	bne.n	8000bcc <HAL_RCC_OscConfig+0x98>
 8000bb2:	4b7b      	ldr	r3, [pc, #492]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a7a      	ldr	r2, [pc, #488]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	4b78      	ldr	r3, [pc, #480]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a77      	ldr	r2, [pc, #476]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e01d      	b.n	8000c08 <HAL_RCC_OscConfig+0xd4>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_RCC_OscConfig+0xbc>
 8000bd6:	4b72      	ldr	r3, [pc, #456]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a71      	ldr	r2, [pc, #452]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b6f      	ldr	r3, [pc, #444]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a6e      	ldr	r2, [pc, #440]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e00b      	b.n	8000c08 <HAL_RCC_OscConfig+0xd4>
 8000bf0:	4b6b      	ldr	r3, [pc, #428]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a6a      	ldr	r2, [pc, #424]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	4b68      	ldr	r3, [pc, #416]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a67      	ldr	r2, [pc, #412]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d013      	beq.n	8000c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c10:	f7ff fca8 	bl	8000564 <HAL_GetTick>
 8000c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c16:	e008      	b.n	8000c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c18:	f7ff fca4 	bl	8000564 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	2b64      	cmp	r3, #100	; 0x64
 8000c24:	d901      	bls.n	8000c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c26:	2303      	movs	r3, #3
 8000c28:	e1fa      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2a:	4b5d      	ldr	r3, [pc, #372]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f0      	beq.n	8000c18 <HAL_RCC_OscConfig+0xe4>
 8000c36:	e014      	b.n	8000c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fc94 	bl	8000564 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fc90 	bl	8000564 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e1e6      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c52:	4b53      	ldr	r3, [pc, #332]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x10c>
 8000c5e:	e000      	b.n	8000c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d063      	beq.n	8000d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c6e:	4b4c      	ldr	r3, [pc, #304]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00b      	beq.n	8000c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d11c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x18c>
 8000c86:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d116      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c92:	4b43      	ldr	r3, [pc, #268]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d005      	beq.n	8000caa <HAL_RCC_OscConfig+0x176>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d001      	beq.n	8000caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e1ba      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000caa:	4b3d      	ldr	r3, [pc, #244]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4939      	ldr	r1, [pc, #228]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cbe:	e03a      	b.n	8000d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d020      	beq.n	8000d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <HAL_RCC_OscConfig+0x270>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cce:	f7ff fc49 	bl	8000564 <HAL_GetTick>
 8000cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cd6:	f7ff fc45 	bl	8000564 <HAL_GetTick>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e19b      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0f0      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	4927      	ldr	r1, [pc, #156]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	4313      	orrs	r3, r2
 8000d06:	600b      	str	r3, [r1, #0]
 8000d08:	e015      	b.n	8000d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <HAL_RCC_OscConfig+0x270>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc28 	bl	8000564 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc24 	bl	8000564 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e17a      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d03a      	beq.n	8000db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d019      	beq.n	8000d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_RCC_OscConfig+0x274>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc08 	bl	8000564 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d58:	f7ff fc04 	bl	8000564 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e15a      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f0      	beq.n	8000d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 fada 	bl	8001330 <RCC_Delay>
 8000d7c:	e01c      	b.n	8000db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_RCC_OscConfig+0x274>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d84:	f7ff fbee 	bl	8000564 <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d8a:	e00f      	b.n	8000dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fbea 	bl	8000564 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d908      	bls.n	8000dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e140      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000
 8000da4:	42420000 	.word	0x42420000
 8000da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dac:	4b9e      	ldr	r3, [pc, #632]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1e9      	bne.n	8000d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80a6 	beq.w	8000f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dca:	4b97      	ldr	r3, [pc, #604]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10d      	bne.n	8000df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b94      	ldr	r3, [pc, #592]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a93      	ldr	r2, [pc, #588]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b91      	ldr	r3, [pc, #580]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dee:	2301      	movs	r3, #1
 8000df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df2:	4b8e      	ldr	r3, [pc, #568]	; (800102c <HAL_RCC_OscConfig+0x4f8>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d118      	bne.n	8000e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dfe:	4b8b      	ldr	r3, [pc, #556]	; (800102c <HAL_RCC_OscConfig+0x4f8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a8a      	ldr	r2, [pc, #552]	; (800102c <HAL_RCC_OscConfig+0x4f8>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fbab 	bl	8000564 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e12:	f7ff fba7 	bl	8000564 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b64      	cmp	r3, #100	; 0x64
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e0fd      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e24:	4b81      	ldr	r3, [pc, #516]	; (800102c <HAL_RCC_OscConfig+0x4f8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f0      	beq.n	8000e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d106      	bne.n	8000e46 <HAL_RCC_OscConfig+0x312>
 8000e38:	4b7b      	ldr	r3, [pc, #492]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	4a7a      	ldr	r2, [pc, #488]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6213      	str	r3, [r2, #32]
 8000e44:	e02d      	b.n	8000ea2 <HAL_RCC_OscConfig+0x36e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x334>
 8000e4e:	4b76      	ldr	r3, [pc, #472]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	6a1b      	ldr	r3, [r3, #32]
 8000e52:	4a75      	ldr	r2, [pc, #468]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	f023 0301 	bic.w	r3, r3, #1
 8000e58:	6213      	str	r3, [r2, #32]
 8000e5a:	4b73      	ldr	r3, [pc, #460]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e5c:	6a1b      	ldr	r3, [r3, #32]
 8000e5e:	4a72      	ldr	r2, [pc, #456]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	f023 0304 	bic.w	r3, r3, #4
 8000e64:	6213      	str	r3, [r2, #32]
 8000e66:	e01c      	b.n	8000ea2 <HAL_RCC_OscConfig+0x36e>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d10c      	bne.n	8000e8a <HAL_RCC_OscConfig+0x356>
 8000e70:	4b6d      	ldr	r3, [pc, #436]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e72:	6a1b      	ldr	r3, [r3, #32]
 8000e74:	4a6c      	ldr	r2, [pc, #432]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6213      	str	r3, [r2, #32]
 8000e7c:	4b6a      	ldr	r3, [pc, #424]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a69      	ldr	r2, [pc, #420]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6213      	str	r3, [r2, #32]
 8000e88:	e00b      	b.n	8000ea2 <HAL_RCC_OscConfig+0x36e>
 8000e8a:	4b67      	ldr	r3, [pc, #412]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	4a66      	ldr	r2, [pc, #408]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	6213      	str	r3, [r2, #32]
 8000e96:	4b64      	ldr	r3, [pc, #400]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	4a63      	ldr	r2, [pc, #396]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000e9c:	f023 0304 	bic.w	r3, r3, #4
 8000ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d015      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fb5b 	bl	8000564 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb0:	e00a      	b.n	8000ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fb57 	bl	8000564 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e0ab      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec8:	4b57      	ldr	r3, [pc, #348]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0ee      	beq.n	8000eb2 <HAL_RCC_OscConfig+0x37e>
 8000ed4:	e014      	b.n	8000f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fb45 	bl	8000564 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ede:	f7ff fb41 	bl	8000564 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e095      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef4:	4b4c      	ldr	r3, [pc, #304]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ee      	bne.n	8000ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f00:	7dfb      	ldrb	r3, [r7, #23]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d105      	bne.n	8000f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f06:	4b48      	ldr	r3, [pc, #288]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a47      	ldr	r2, [pc, #284]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 8081 	beq.w	800101e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f1c:	4b42      	ldr	r3, [pc, #264]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d061      	beq.n	8000fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d146      	bne.n	8000fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <HAL_RCC_OscConfig+0x4fc>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fb15 	bl	8000564 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f3e:	f7ff fb11 	bl	8000564 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e067      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f50:	4b35      	ldr	r3, [pc, #212]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f64:	d108      	bne.n	8000f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	492d      	ldr	r1, [pc, #180]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f78:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a19      	ldr	r1, [r3, #32]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	430b      	orrs	r3, r1
 8000f8a:	4927      	ldr	r1, [pc, #156]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <HAL_RCC_OscConfig+0x4fc>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f96:	f7ff fae5 	bl	8000564 <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fae1 	bl	8000564 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e037      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x46a>
 8000fbc:	e02f      	b.n	800101e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <HAL_RCC_OscConfig+0x4fc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff face 	bl	8000564 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fcc:	f7ff faca 	bl	8000564 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e020      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0x498>
 8000fea:	e018      	b.n	800101e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69db      	ldr	r3, [r3, #28]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d101      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e013      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_RCC_OscConfig+0x4f4>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	429a      	cmp	r2, r3
 800100a:	d106      	bne.n	800101a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001016:	429a      	cmp	r2, r3
 8001018:	d001      	beq.n	800101e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000
 800102c:	40007000 	.word	0x40007000
 8001030:	42420060 	.word	0x42420060

08001034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e0d0      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001048:	4b6a      	ldr	r3, [pc, #424]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d910      	bls.n	8001078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4b67      	ldr	r3, [pc, #412]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 0207 	bic.w	r2, r3, #7
 800105e:	4965      	ldr	r1, [pc, #404]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001066:	4b63      	ldr	r3, [pc, #396]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d001      	beq.n	8001078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e0b8      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d020      	beq.n	80010c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0304 	and.w	r3, r3, #4
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001090:	4b59      	ldr	r3, [pc, #356]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a58      	ldr	r2, [pc, #352]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800109a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d005      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a8:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a52      	ldr	r2, [pc, #328]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b4:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	494d      	ldr	r1, [pc, #308]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d040      	beq.n	8001154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d107      	bne.n	80010ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d115      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e07f      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d107      	bne.n	8001102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f2:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d109      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e073      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e06b      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f023 0203 	bic.w	r2, r3, #3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4936      	ldr	r1, [pc, #216]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	4313      	orrs	r3, r2
 8001122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001124:	f7ff fa1e 	bl	8000564 <HAL_GetTick>
 8001128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800112a:	e00a      	b.n	8001142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800112c:	f7ff fa1a 	bl	8000564 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	f241 3288 	movw	r2, #5000	; 0x1388
 800113a:	4293      	cmp	r3, r2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e053      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f003 020c 	and.w	r2, r3, #12
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	429a      	cmp	r2, r3
 8001152:	d1eb      	bne.n	800112c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d210      	bcs.n	8001184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 0207 	bic.w	r2, r3, #7
 800116a:	4922      	ldr	r1, [pc, #136]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	4313      	orrs	r3, r2
 8001170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	429a      	cmp	r2, r3
 800117e:	d001      	beq.n	8001184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e032      	b.n	80011ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	4916      	ldr	r1, [pc, #88]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	490e      	ldr	r1, [pc, #56]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011c2:	f000 f821 	bl	8001208 <HAL_RCC_GetSysClockFreq>
 80011c6:	4601      	mov	r1, r0
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_RCC_ClockConfig+0x1c4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <HAL_RCC_ClockConfig+0x1c8>)
 80011d4:	5cd3      	ldrb	r3, [r2, r3]
 80011d6:	fa21 f303 	lsr.w	r3, r1, r3
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <HAL_RCC_ClockConfig+0x1cc>)
 80011dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_RCC_ClockConfig+0x1d0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f97c 	bl	80004e0 <HAL_InitTick>

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000
 80011f8:	40021000 	.word	0x40021000
 80011fc:	08001aa4 	.word	0x08001aa4
 8001200:	20000000 	.word	0x20000000
 8001204:	20000004 	.word	0x20000004

08001208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001208:	b490      	push	{r4, r7}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800120e:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001210:	1d3c      	adds	r4, r7, #4
 8001212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001232:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b04      	cmp	r3, #4
 8001240:	d002      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x40>
 8001242:	2b08      	cmp	r3, #8
 8001244:	d003      	beq.n	800124e <HAL_RCC_GetSysClockFreq+0x46>
 8001246:	e02d      	b.n	80012a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800124a:	623b      	str	r3, [r7, #32]
      break;
 800124c:	e02d      	b.n	80012aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	0c9b      	lsrs	r3, r3, #18
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800125a:	4413      	add	r3, r2
 800125c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001260:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	0c5b      	lsrs	r3, r3, #17
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800127a:	4413      	add	r3, r2
 800127c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001286:	fb02 f203 	mul.w	r2, r2, r3
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	e004      	b.n	800129e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	623b      	str	r3, [r7, #32]
      break;
 80012a2:	e002      	b.n	80012aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012a6:	623b      	str	r3, [r7, #32]
      break;
 80012a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012aa:	6a3b      	ldr	r3, [r7, #32]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc90      	pop	{r4, r7}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	08001a90 	.word	0x08001a90
 80012bc:	08001aa0 	.word	0x08001aa0
 80012c0:	40021000 	.word	0x40021000
 80012c4:	007a1200 	.word	0x007a1200
 80012c8:	003d0900 	.word	0x003d0900

080012cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_RCC_GetHCLKFreq+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000000 	.word	0x20000000

080012e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012e4:	f7ff fff2 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 80012e8:	4601      	mov	r1, r0
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000
 8001304:	08001ab4 	.word	0x08001ab4

08001308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800130c:	f7ff ffde 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 8001310:	4601      	mov	r1, r0
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	0adb      	lsrs	r3, r3, #11
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_RCC_GetPCLK2Freq+0x24>)
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	08001ab4 	.word	0x08001ab4

08001330 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <RCC_Delay+0x34>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <RCC_Delay+0x38>)
 800133e:	fba2 2303 	umull	r2, r3, r2, r3
 8001342:	0a5b      	lsrs	r3, r3, #9
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	fb02 f303 	mul.w	r3, r2, r3
 800134a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800134c:	bf00      	nop
  }
  while (Delay --);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1e5a      	subs	r2, r3, #1
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f9      	bne.n	800134c <RCC_Delay+0x1c>
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000
 8001368:	10624dd3 	.word	0x10624dd3

0800136c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e03f      	b.n	80013fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7fe ffda 	bl	800034c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2224      	movs	r2, #36	; 0x24
 800139c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 faa7 	bl	8001904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2220      	movs	r2, #32
 80013f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2220      	movs	r2, #32
 80013f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	4613      	mov	r3, r2
 8001412:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b20      	cmp	r3, #32
 800141e:	d140      	bne.n	80014a2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <HAL_UART_Receive_IT+0x26>
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e039      	b.n	80014a4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001436:	2b01      	cmp	r3, #1
 8001438:	d101      	bne.n	800143e <HAL_UART_Receive_IT+0x38>
 800143a:	2302      	movs	r3, #2
 800143c:	e032      	b.n	80014a4 <HAL_UART_Receive_IT+0x9e>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2222      	movs	r2, #34	; 0x22
 8001462:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800147c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	695a      	ldr	r2, [r3, #20]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0220 	orr.w	r2, r2, #32
 800149c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80014a2:	2302      	movs	r3, #2
  }
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10d      	bne.n	8001502 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <HAL_UART_IRQHandler+0x52>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f982 	bl	8001804 <UART_Receive_IT>
      return;
 8001500:	e0d1      	b.n	80016a6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80b0 	beq.w	800166a <HAL_UART_IRQHandler+0x1ba>
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <HAL_UART_IRQHandler+0x70>
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80a5 	beq.w	800166a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00a      	beq.n	8001540 <HAL_UART_IRQHandler+0x90>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00a      	beq.n	8001560 <HAL_UART_IRQHandler+0xb0>
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001558:	f043 0202 	orr.w	r2, r3, #2
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <HAL_UART_IRQHandler+0xd0>
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	f043 0204 	orr.w	r2, r3, #4
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00f      	beq.n	80015aa <HAL_UART_IRQHandler+0xfa>
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f003 0320 	and.w	r3, r3, #32
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <HAL_UART_IRQHandler+0xee>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a2:	f043 0208 	orr.w	r2, r3, #8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d078      	beq.n	80016a4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f003 0320 	and.w	r3, r3, #32
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_UART_IRQHandler+0x11c>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f003 0320 	and.w	r3, r3, #32
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f91c 	bl	8001804 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bf14      	ite	ne
 80015da:	2301      	movne	r3, #1
 80015dc:	2300      	moveq	r3, #0
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_UART_IRQHandler+0x144>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d031      	beq.n	8001658 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f86d 	bl	80016d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001604:	2b00      	cmp	r3, #0
 8001606:	d023      	beq.n	8001650 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001616:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <HAL_UART_IRQHandler+0x1fc>)
 8001626:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f8b1 	bl	8000794 <HAL_DMA_Abort_IT>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d016      	beq.n	8001666 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001642:	4610      	mov	r0, r2
 8001644:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001646:	e00e      	b.n	8001666 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f83a 	bl	80016c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800164e:	e00a      	b.n	8001666 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 f836 	bl	80016c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001656:	e006      	b.n	8001666 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f832 	bl	80016c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001664:	e01e      	b.n	80016a4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001666:	bf00      	nop
    return;
 8001668:	e01c      	b.n	80016a4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_UART_IRQHandler+0x1d6>
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f859 	bl	8001736 <UART_Transmit_IT>
    return;
 8001684:	e00f      	b.n	80016a6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00a      	beq.n	80016a6 <HAL_UART_IRQHandler+0x1f6>
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f89a 	bl	80017d4 <UART_EndTransmit_IT>
    return;
 80016a0:	bf00      	nop
 80016a2:	e000      	b.n	80016a6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80016a4:	bf00      	nop
  }
}
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	0800170f 	.word	0x0800170f

080016b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr

080016c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80016ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2220      	movs	r2, #32
 8001700:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff ffca 	bl	80016c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b21      	cmp	r3, #33	; 0x21
 8001748:	d13e      	bne.n	80017c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001752:	d114      	bne.n	800177e <UART_Transmit_IT+0x48>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d110      	bne.n	800177e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001770:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	1c9a      	adds	r2, r3, #2
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	621a      	str	r2, [r3, #32]
 800177c:	e008      	b.n	8001790 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	6211      	str	r1, [r2, #32]
 8001788:	781a      	ldrb	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001794:	b29b      	uxth	r3, r3
 8001796:	3b01      	subs	r3, #1
 8001798:	b29b      	uxth	r3, r3
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	4619      	mov	r1, r3
 800179e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d10f      	bne.n	80017c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68da      	ldr	r2, [r3, #12]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	e000      	b.n	80017ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80017c8:	2302      	movs	r3, #2
  }
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ff5b 	bl	80016b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b22      	cmp	r3, #34	; 0x22
 8001816:	d170      	bne.n	80018fa <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001820:	d117      	bne.n	8001852 <UART_Receive_IT+0x4e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d113      	bne.n	8001852 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	b29b      	uxth	r3, r3
 800183c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001840:	b29a      	uxth	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	1c9a      	adds	r2, r3, #2
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
 8001850:	e026      	b.n	80018a0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001864:	d007      	beq.n	8001876 <UART_Receive_IT+0x72>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10a      	bne.n	8001884 <UART_Receive_IT+0x80>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e008      	b.n	8001896 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001890:	b2da      	uxtb	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4619      	mov	r1, r3
 80018ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d120      	bne.n	80018f6 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0220 	bic.w	r2, r2, #32
 80018c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7fe fcd7 	bl	80002a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e002      	b.n	80018fc <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800193e:	f023 030c 	bic.w	r3, r3, #12
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	68b9      	ldr	r1, [r7, #8]
 8001948:	430b      	orrs	r3, r1
 800194a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2c      	ldr	r2, [pc, #176]	; (8001a18 <UART_SetConfig+0x114>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d103      	bne.n	8001974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800196c:	f7ff fccc 	bl	8001308 <HAL_RCC_GetPCLK2Freq>
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	e002      	b.n	800197a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001974:	f7ff fcb4 	bl	80012e0 <HAL_RCC_GetPCLK1Freq>
 8001978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	009a      	lsls	r2, r3, #2
 8001984:	441a      	add	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <UART_SetConfig+0x118>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	0119      	lsls	r1, r3, #4
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	009a      	lsls	r2, r3, #2
 80019a4:	441a      	add	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <UART_SetConfig+0x118>)
 80019b2:	fba3 0302 	umull	r0, r3, r3, r2
 80019b6:	095b      	lsrs	r3, r3, #5
 80019b8:	2064      	movs	r0, #100	; 0x64
 80019ba:	fb00 f303 	mul.w	r3, r0, r3
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	3332      	adds	r3, #50	; 0x32
 80019c4:	4a15      	ldr	r2, [pc, #84]	; (8001a1c <UART_SetConfig+0x118>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d0:	4419      	add	r1, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	009a      	lsls	r2, r3, #2
 80019dc:	441a      	add	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <UART_SetConfig+0x118>)
 80019ea:	fba3 0302 	umull	r0, r3, r3, r2
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	2064      	movs	r0, #100	; 0x64
 80019f2:	fb00 f303 	mul.w	r3, r0, r3
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	011b      	lsls	r3, r3, #4
 80019fa:	3332      	adds	r3, #50	; 0x32
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <UART_SetConfig+0x118>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	095b      	lsrs	r3, r3, #5
 8001a04:	f003 020f 	and.w	r2, r3, #15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	440a      	add	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	51eb851f 	.word	0x51eb851f

08001a20 <__libc_init_array>:
 8001a20:	b570      	push	{r4, r5, r6, lr}
 8001a22:	2500      	movs	r5, #0
 8001a24:	4e0c      	ldr	r6, [pc, #48]	; (8001a58 <__libc_init_array+0x38>)
 8001a26:	4c0d      	ldr	r4, [pc, #52]	; (8001a5c <__libc_init_array+0x3c>)
 8001a28:	1ba4      	subs	r4, r4, r6
 8001a2a:	10a4      	asrs	r4, r4, #2
 8001a2c:	42a5      	cmp	r5, r4
 8001a2e:	d109      	bne.n	8001a44 <__libc_init_array+0x24>
 8001a30:	f000 f822 	bl	8001a78 <_init>
 8001a34:	2500      	movs	r5, #0
 8001a36:	4e0a      	ldr	r6, [pc, #40]	; (8001a60 <__libc_init_array+0x40>)
 8001a38:	4c0a      	ldr	r4, [pc, #40]	; (8001a64 <__libc_init_array+0x44>)
 8001a3a:	1ba4      	subs	r4, r4, r6
 8001a3c:	10a4      	asrs	r4, r4, #2
 8001a3e:	42a5      	cmp	r5, r4
 8001a40:	d105      	bne.n	8001a4e <__libc_init_array+0x2e>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a48:	4798      	blx	r3
 8001a4a:	3501      	adds	r5, #1
 8001a4c:	e7ee      	b.n	8001a2c <__libc_init_array+0xc>
 8001a4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a52:	4798      	blx	r3
 8001a54:	3501      	adds	r5, #1
 8001a56:	e7f2      	b.n	8001a3e <__libc_init_array+0x1e>
 8001a58:	08001abc 	.word	0x08001abc
 8001a5c:	08001abc 	.word	0x08001abc
 8001a60:	08001abc 	.word	0x08001abc
 8001a64:	08001ac0 	.word	0x08001ac0

08001a68 <memset>:
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4402      	add	r2, r0
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <memset+0xa>
 8001a70:	4770      	bx	lr
 8001a72:	f803 1b01 	strb.w	r1, [r3], #1
 8001a76:	e7f9      	b.n	8001a6c <memset+0x4>

08001a78 <_init>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	bf00      	nop
 8001a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7e:	bc08      	pop	{r3}
 8001a80:	469e      	mov	lr, r3
 8001a82:	4770      	bx	lr

08001a84 <_fini>:
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	bf00      	nop
 8001a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a8a:	bc08      	pop	{r3}
 8001a8c:	469e      	mov	lr, r3
 8001a8e:	4770      	bx	lr
