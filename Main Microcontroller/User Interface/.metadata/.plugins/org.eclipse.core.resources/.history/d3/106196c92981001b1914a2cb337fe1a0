/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "sensorObjects.h"
#include "Letters.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LCD_8B2L 0x38 // ; Enable 8 bit data, 2 display lines
#define LCD_DCB 0x0F // ; Enable Display, Cursor, Blink
#define LCD_MCR 0x06 // ; Set Move Cursor Right
#define LCD_CLR 0x01 // ; Home and clear LCD
#define LCD_LN1 0x80 // ;Set DDRAM to start of line 1
#define LCD_LN2 0xC0 // ; Set DDRAM to start of line 2
#define LCD_CM_ENA 0x00210002 //
#define LCD_CM_DIS 0x00230000 //
#define LCD_DM_ENA 0x00200003 //
#define LCD_DM_DIS 0x00220001 //
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* Definitions for XbeeTask */
osThreadId_t XbeeTaskHandle;
const osThreadAttr_t XbeeTask_attributes = {
  .name = "XbeeTask",
  .priority = (osPriority_t) osPriorityAboveNormal1,
  .stack_size = 128 * 4
};
/* Definitions for UserTask */
osThreadId_t UserTaskHandle;
const osThreadAttr_t UserTask_attributes = {
  .name = "UserTask",
  .priority = (osPriority_t) osPriorityAboveNormal2,
  .stack_size = 128 * 4
};
/* Definitions for SolenoidTask */
osThreadId_t SolenoidTaskHandle;
const osThreadAttr_t SolenoidTask_attributes = {
  .name = "SolenoidTask",
  .priority = (osPriority_t) osPriorityAboveNormal3,
  .stack_size = 128 * 4
};
/* Definitions for WeatherTask */
osThreadId_t WeatherTaskHandle;
const osThreadAttr_t WeatherTask_attributes = {
  .name = "WeatherTask",
  .priority = (osPriority_t) osPriorityAboveNormal4,
  .stack_size = 128 * 4
};
/* Definitions for FlowTask */
osThreadId_t FlowTaskHandle;
const osThreadAttr_t FlowTask_attributes = {
  .name = "FlowTask",
  .priority = (osPriority_t) osPriorityAboveNormal5,
  .stack_size = 128 * 4
};
/* Definitions for ProcessingTask */
osThreadId_t ProcessingTaskHandle;
const osThreadAttr_t ProcessingTask_attributes = {
  .name = "ProcessingTask",
  .priority = (osPriority_t) osPriorityAboveNormal6,
  .stack_size = 128 * 4
};
/* Definitions for FlowQueue */
osMessageQueueId_t FlowQueueHandle;
const osMessageQueueAttr_t FlowQueue_attributes = {
  .name = "FlowQueue"
};
/* Definitions for WeatherQueue */
osMessageQueueId_t WeatherQueueHandle;
const osMessageQueueAttr_t WeatherQueue_attributes = {
  .name = "WeatherQueue"
};
/* Definitions for XbeeQueue */
osMessageQueueId_t XbeeQueueHandle;
const osMessageQueueAttr_t XbeeQueue_attributes = {
  .name = "XbeeQueue"
};
/* Definitions for SolenoidQueue */
osMessageQueueId_t SolenoidQueueHandle;
const osMessageQueueAttr_t SolenoidQueue_attributes = {
  .name = "SolenoidQueue"
};
/* Definitions for UserQueue */
osMessageQueueId_t UserQueueHandle;
const osMessageQueueAttr_t UserQueue_attributes = {
  .name = "UserQueue"
};
/* USER CODE BEGIN PV */
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USART2_UART_Init(void);
void StartXbeeTask(void *argument);
void StartUserTask(void *argument);
void StartSolenoidTask(void *argument);
void StartWeatherTask(void *argument);
void StartFlowTask(void *argument);
void StartProcessingTask(void *argument);

/* USER CODE BEGIN PFP */
void commandToLCD(void);
void printPassword(void);
void printCol(void);
void line1(void);
void line2(void);
void clear(void);
void correct(void);
int getVal(void);
void wrongPass(void);
int green(void);
int timer(void);
int quit(void);
int onOffTime(void);
int onOff(void);
void error(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_USART3_UART_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);

  /* creation of XbeeQueue */
  XbeeQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &XbeeQueue_attributes);

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
	HAL_Delay(20);

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
	HAL_Delay(5);



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
	HAL_Delay(5);


	clear();


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
	HAL_Delay(5);

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
	{}
}
void printPassword(void)
{

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	letter('P');
	letter('a');
	letter('s');
	letter('s');
	letter('w');
	letter('o');
	letter('r');
	letter('d');
	letter(':');
}
void line1(void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
	HAL_Delay(5);
}
void line2(void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
	HAL_Delay(5);
}
void clear()
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
	HAL_Delay(5);
}
void correct()
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	letter('C');
	letter('o');
	letter('r');
	letter('r');
	letter('e');
	letter('c');
	letter('t');
	letter('!');
}
int getVal(void)
{
	int val;
	int count = 0;
	while(count < 1)
	{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
	  {
		  letter('1');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 1;
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
	  {
		  letter('2');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 2;
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
	  {
		  letter('3');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 3;
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
	  {
		  letter('4');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 4;
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
	  {
		  letter('5');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 5;
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
	  {
		  letter('6');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 6;
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
	  {
		  letter('7');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val= 7;
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
	  {
		  letter('8');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 8;
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
	  {
		  letter('9');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 9;
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
	  {
		  letter('*');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 10;
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
	  {
		  letter('0');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 0;
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
	  {
		  letter('#');

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
		  {}
		  HAL_Delay(100);
		  count =1;
		  val = 11;
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
	}
	return val;
}
void wrongPass(void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	letter('W');
	letter('r');
	letter('o');
	letter('n');
	letter('g');
	letter(' ');
	letter('P');
	letter('a');
	letter('s');
	letter('s');
	letter('w');
	letter('o');
	letter('r');
	letter('d');
}
int green(void)
{
	int grn;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	letter('G');
	letter('r');
	letter('e');
	letter('e');
	letter('n');
	letter(' ');
	letter('1');
	letter('-');
	letter('3');
	letter(':');

	grn = getVal();
	return grn;
}

int timer(void)
{
	int time;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low

	letter('T');
	letter('i');
	letter('m');
	letter('e');
	letter(' ');
	letter('0');
	letter('0');
	letter('-');
	letter('6');
	letter('0');
	letter('m');
	letter('i');
	letter('n');
	letter(':');

	time = (getVal()*10);
	time = time + getVal();
	return time;
}

int quit(void)
{
	int val;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low

	letter('Q');
	letter('u');
	letter('i');
	letter('t');
	letter('?');
	letter(' ');
	letter('y');
	letter('e');
	letter('s');
	letter('-');
	letter('1');
	letter(' ');
	letter('n');
	letter('o');
	letter('-');
	letter('0');

	line2();
	val = getVal();
return val;
}
int onOffTime(void)
{
	int choice;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	letter('0');
	letter('-');
	letter('O');
	letter('n');
	letter('/');
	letter('O');
	letter('f');
	letter('f');
	letter(' ');
	letter('1');
	letter('-');
	letter('T');
	letter('i');
	letter('m');
	letter('e');
	letter('r');

	line2();
	choice = getVal();
	return choice;
}
void onOff(void)
{
	int on;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	letter('0');
	letter('-');
	letter('O');
	letter('n');
	letter(' ');
	letter('1');
	letter('-');
	letter('O');
	letter('f');
	letter('f');
	letter(':');

	on = getVal();
	return on;
}
void error(void)
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low

	letter('E');
	letter('r');
	letter('r');
	letter('o');
	letter('r');
	letter(',');
	letter(' ');
	letter('I');
	letter('n');
	letter('v');
	letter('a');
	letter('l');
	letter('i');
	letter('d');

	line2();

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
	letter('N');
	letter('u');
	letter('m');
	letter('b');
	letter('e');
	letter('r');
}




/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartXbeeTask */
/**
  * @brief  Function implementing the XbeeTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
	HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);
  for(;;)
  {

    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartUserTask */
/**
* @brief Function implementing the UserTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
  /* USER CODE BEGIN StartUserTask */
  int indc;
  int val[6];
  while(1)
  {
	  val[6] = 0;
	  commandToLCD();
	  printPassword();
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
	  for (int i = 0; i<4; i++)
	  {
		  val[i] = getVal();
	  }
	  if(val[0] == 1)
	  {
		  if(val[1] == 2)
		  {
			  if(val[2] == 3)
			  {
				  if(val[3] == 4)
				  {
					  clear();
					  line1();
					  correct();
					  HAL_Delay(1500);
					  while(val[6] == 0)
					  {
						  commandToLCD();
						  val[0] = onOffTime();
						  while(val[0]< 0 || val[0] > 1)
						  {
							  commandToLCD();
							  error();
							  HAL_Delay(1500);
							  commandToLCD();
							  val[0] = onOffTime();
						  }
						  if(val[0] == 0)
						  {
							  commandToLCD();
							  val[0] = green();
							  while(val[0]< 1 || val[0] > 3)
							  {
								  commandToLCD();
								  error();
								  HAL_Delay(1500);
								  commandToLCD();
								  val[0] = green();
							  }
							  indc = val[0];///do something with val[0] aka green #
							  line2();
							  val[0] = onOff();
							  while(val[0]< 0 || val[0] > 1)
							  {
								  commandToLCD();
								  error();
								  HAL_Delay(1500);
								  commandToLCD();
								  val[0] = onOff();
							  }
							  val[1] = val[0];///do something with val[0]
							  val[0] = indc;

							  osMessageQueuePut(UserQueueHandle,&val[0],1U,0U);
							  osMessageQueuePut(UserQueueHandle,&val[1],1U,0U);

							  clear();
							  val[0] = quit();
							  while(val[0]< 0 || val[0] > 1)
							  {
								  commandToLCD();
								  error();
								  HAL_Delay(1500);
								  commandToLCD();
								  val[0] = quit();
							  }
						  }

						  else if(val[0] == 1)
						  {

								  commandToLCD();
								  val[0] = green();
								  while(val[0]< 1 || val[0] > 3)
								  {
									  commandToLCD();
									  error();
									  HAL_Delay(1500);
									  commandToLCD();
									  val[0] = green();
								  }
								  indc = val[0];///do something with val[0] aka green #
								  line2();
								  val[0] = timer();
								  while(val[0]< 0 || val[0] > 60)
								  {
									  commandToLCD();
									  error();
									  HAL_Delay(1500);
									  commandToLCD();
									  val[0] = timer();
								  }
								  val[1] = val[0];
								  val[0] = indc;
								  osMessageQueuePut(UserQueueHandle,&val[0],1U,0U);
								  osMessageQueuePut(UserQueueHandle,&val[1],1U,0U);
								  ///do something with val[0] and val[1]
								  clear();
								  val[0] = quit();
								  while(val[0]< 0 || val[0] > 1)
								  {
									  commandToLCD();
									  error();
									  HAL_Delay(1500);
									  commandToLCD();
									  val[0] = quit();
								  }
						  }
					  }
				  }
				  else
				  {
					  line2();
					  wrongPass();
					  HAL_Delay(2000);
				  }
			  }
			  else
			  {
				  line2();
				  wrongPass();
				  HAL_Delay(2000);
			  }
		  }
		  else
		  {
			  line2();
			  wrongPass();
			  HAL_Delay(2000);
		  }
	  }
	  else
	  {
		  line2();
		  wrongPass();
		  HAL_Delay(2000);
	  }

  }
  /* USER CODE END StartUserTask */
}

/* USER CODE BEGIN Header_StartSolenoidTask */
/**
* @brief Function implementing the SolenoidTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
  /* USER CODE BEGIN StartSolenoidTask */
	uint8_t val[15];
	uint8_t input, d;
  /* Infinite loop */
  for(;;)
  {
	    d = 0;
		while(osMessageQueueGet(SolenoidQueueHandle, &input, NULL, 0U) == osOK)
		{//while being recieved it gets stored in cliMessage array
			val[d] = input;
			d++;
		}
		if(val[0] == 1)
		{
			if(val[1] == 0)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
			}
			else if(val[1] == 1)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
			}
		}
		else if(val[0] == 2)
		{
			if(val[1] == 0)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
			}
			else if(val[1] == 1)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
			}
		}
		else if(val[0] == 3)
		{
			if(val[1] == 0)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
			}
			else if(val[1] == 1)
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
			}
		}
  }
  /* USER CODE END StartSolenoidTask */
}

/* USER CODE BEGIN Header_StartWeatherTask */
/**
* @brief Function implementing the WeatherTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
  /* USER CODE BEGIN StartWeatherTask */
  /* Infinite loop */
  for(;;)
  {
		uint32_t period;
		uint32_t tickstart;

		HAL_TIM_Base_Start(&htim2);
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
		{}
		tickstart = __HAL_TIM_GET_COUNTER(&htim2);
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1)
		{}
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
		{}
		period =  __HAL_TIM_GET_COUNTER(&htim2) - tickstart;
		osMessageQueuePut(WeatherQueueHandle,&period,1U,0U);
    osDelay(1);
  }
  /* USER CODE END StartWeatherTask */
}

/* USER CODE BEGIN Header_StartFlowTask */
/**
* @brief Function implementing the FlowTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
  /* USER CODE BEGIN StartFlowTask */
  /* Infinite loop */
  for(;;)
  {
		uint32_t tickstart = HAL_GetTick();
		uint32_t wait = 1000;
		uint32_t F1,F2,F3;

		uint32_t L[0] =0;
		L[1] =0;
		L[2] =0;
		uint32_t C[0]=0;
		C[1]=0;
		C[2]=0;
		/* Add a freq to guarantee minimum wait */
		if (wait < HAL_MAX_DELAY)
		{
		wait += (uint32_t)(uwTickFreq);
		}

		while ((HAL_GetTick() - tickstart) < wait)
		{
			F1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
			F2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
			F3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
			if(F1 == 1 && F1!=L[0])
			{
				C[0]++;
			}
			if(F2 == 1 && F2!=L[1])
			{
				C[1]++;
			}
			if(F3 == 1 && F3!=L[2])
			{
				C[2]++;
			}
			L[0]=F1;
			L[1]=F2;
			L[2]=F3;

		}
		  //osMessageQueuePut(FlowQueueHandle,&val[0],1U,0U);
    osDelay(1);
  }
  /* USER CODE END StartFlowTask */
}

/* USER CODE BEGIN Header_StartProcessingTask */
/**
* @brief Function implementing the ProcessingTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
  /* USER CODE BEGIN StartProcessingTask */
	uint8_t val[15];
	uint8_t input, d;
  /* Infinite loop */
	for(;;)
	{
		d = 0;
		val[2] =75;
		while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U) == osOK)
		{
			val[d] = input;
			d++;
		}
		if(val[2] != 75)
		{
			//timer
		}
		else
		{
			//on off
		}
	}
  /* USER CODE END StartProcessingTask */
}

 /**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM4 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
