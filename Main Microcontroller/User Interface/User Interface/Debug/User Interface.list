
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d84  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009148  08009148  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009148  08009148  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009148  08009148  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009148  08009148  00019148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800914c  0800914c  0001914c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000293c  20000010  08009160  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  08009160  0002294c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019346  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000327a  00000000  00000000  0003937f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001510  00000000  00000000  0003c600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d0e  00000000  00000000  0003eea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000117f1  00000000  00000000  00057bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097f6f  00000000  00000000  000693a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101316  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005774  00000000  00000000  00101394  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e7c 	.word	0x08008e7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08008e7c 	.word	0x08008e7c

08000150 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2b3a      	cmp	r3, #58	; 0x3a
 800015e:	d13b      	bne.n	80001d8 <letter+0x88>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48d5      	ldr	r0, [pc, #852]	; (80004bc <letter+0x36c>)
 8000168:	f004 fae7 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000172:	48d3      	ldr	r0, [pc, #844]	; (80004c0 <letter+0x370>)
 8000174:	f004 fae1 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017e:	48d0      	ldr	r0, [pc, #832]	; (80004c0 <letter+0x370>)
 8000180:	f004 fadb 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000184:	2200      	movs	r2, #0
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	48cd      	ldr	r0, [pc, #820]	; (80004c0 <letter+0x370>)
 800018a:	f004 fad6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800018e:	2201      	movs	r2, #1
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	48cb      	ldr	r0, [pc, #812]	; (80004c0 <letter+0x370>)
 8000194:	f004 fad1 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000198:	2201      	movs	r2, #1
 800019a:	2180      	movs	r1, #128	; 0x80
 800019c:	48c9      	ldr	r0, [pc, #804]	; (80004c4 <letter+0x374>)
 800019e:	f004 facc 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a8:	48c6      	ldr	r0, [pc, #792]	; (80004c4 <letter+0x374>)
 80001aa:	f004 fac6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b4:	48c3      	ldr	r0, [pc, #780]	; (80004c4 <letter+0x374>)
 80001b6:	f004 fac0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c0:	48c0      	ldr	r0, [pc, #768]	; (80004c4 <letter+0x374>)
 80001c2:	f004 faba 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	48bb      	ldr	r0, [pc, #748]	; (80004bc <letter+0x36c>)
 80001ce:	f004 fab4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80001d2:	2002      	movs	r0, #2
 80001d4:	f003 fc2e 	bl	8003a34 <HAL_Delay>
	}
	if(L == '-')
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b2d      	cmp	r3, #45	; 0x2d
 80001dc:	d13b      	bne.n	8000256 <letter+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e4:	48b5      	ldr	r0, [pc, #724]	; (80004bc <letter+0x36c>)
 80001e6:	f004 faa8 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f0:	48b3      	ldr	r0, [pc, #716]	; (80004c0 <letter+0x370>)
 80001f2:	f004 faa2 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	48b0      	ldr	r0, [pc, #704]	; (80004c0 <letter+0x370>)
 80001fe:	f004 fa9c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000202:	2201      	movs	r2, #1
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	48ae      	ldr	r0, [pc, #696]	; (80004c0 <letter+0x370>)
 8000208:	f004 fa97 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800020c:	2201      	movs	r2, #1
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	48ab      	ldr	r0, [pc, #684]	; (80004c0 <letter+0x370>)
 8000212:	f004 fa92 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000216:	2200      	movs	r2, #0
 8000218:	2180      	movs	r1, #128	; 0x80
 800021a:	48aa      	ldr	r0, [pc, #680]	; (80004c4 <letter+0x374>)
 800021c:	f004 fa8d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000226:	48a7      	ldr	r0, [pc, #668]	; (80004c4 <letter+0x374>)
 8000228:	f004 fa87 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000232:	48a4      	ldr	r0, [pc, #656]	; (80004c4 <letter+0x374>)
 8000234:	f004 fa81 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023e:	48a1      	ldr	r0, [pc, #644]	; (80004c4 <letter+0x374>)
 8000240:	f004 fa7b 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	489c      	ldr	r0, [pc, #624]	; (80004bc <letter+0x36c>)
 800024c:	f004 fa75 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000250:	2002      	movs	r0, #2
 8000252:	f003 fbef 	bl	8003a34 <HAL_Delay>
	}
	if(L == ' ')
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b20      	cmp	r3, #32
 800025a:	d13b      	bne.n	80002d4 <letter+0x184>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4896      	ldr	r0, [pc, #600]	; (80004bc <letter+0x36c>)
 8000264:	f004 fa69 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026e:	4894      	ldr	r0, [pc, #592]	; (80004c0 <letter+0x370>)
 8000270:	f004 fa63 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027a:	4891      	ldr	r0, [pc, #580]	; (80004c0 <letter+0x370>)
 800027c:	f004 fa5d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	488e      	ldr	r0, [pc, #568]	; (80004c0 <letter+0x370>)
 8000286:	f004 fa58 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800028a:	2200      	movs	r2, #0
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	488c      	ldr	r0, [pc, #560]	; (80004c0 <letter+0x370>)
 8000290:	f004 fa53 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000294:	2200      	movs	r2, #0
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	488a      	ldr	r0, [pc, #552]	; (80004c4 <letter+0x374>)
 800029a:	f004 fa4e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4887      	ldr	r0, [pc, #540]	; (80004c4 <letter+0x374>)
 80002a6:	f004 fa48 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4884      	ldr	r0, [pc, #528]	; (80004c4 <letter+0x374>)
 80002b2:	f004 fa42 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	4881      	ldr	r0, [pc, #516]	; (80004c4 <letter+0x374>)
 80002be:	f004 fa3c 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	487c      	ldr	r0, [pc, #496]	; (80004bc <letter+0x36c>)
 80002ca:	f004 fa36 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80002ce:	2002      	movs	r0, #2
 80002d0:	f003 fbb0 	bl	8003a34 <HAL_Delay>
	}
	if(L == '/')
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b2f      	cmp	r3, #47	; 0x2f
 80002d8:	d13b      	bne.n	8000352 <letter+0x202>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e0:	4876      	ldr	r0, [pc, #472]	; (80004bc <letter+0x36c>)
 80002e2:	f004 fa2a 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	4874      	ldr	r0, [pc, #464]	; (80004c0 <letter+0x370>)
 80002ee:	f004 fa24 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	4871      	ldr	r0, [pc, #452]	; (80004c0 <letter+0x370>)
 80002fa:	f004 fa1e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	486f      	ldr	r0, [pc, #444]	; (80004c0 <letter+0x370>)
 8000304:	f004 fa19 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000308:	2201      	movs	r2, #1
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	486c      	ldr	r0, [pc, #432]	; (80004c0 <letter+0x370>)
 800030e:	f004 fa14 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000312:	2200      	movs	r2, #0
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	486b      	ldr	r0, [pc, #428]	; (80004c4 <letter+0x374>)
 8000318:	f004 fa0f 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4868      	ldr	r0, [pc, #416]	; (80004c4 <letter+0x374>)
 8000324:	f004 fa09 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	4865      	ldr	r0, [pc, #404]	; (80004c4 <letter+0x374>)
 8000330:	f004 fa03 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033a:	4862      	ldr	r0, [pc, #392]	; (80004c4 <letter+0x374>)
 800033c:	f004 f9fd 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	485d      	ldr	r0, [pc, #372]	; (80004bc <letter+0x36c>)
 8000348:	f004 f9f7 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800034c:	2002      	movs	r0, #2
 800034e:	f003 fb71 	bl	8003a34 <HAL_Delay>
	}
	if(L == '!')
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b21      	cmp	r3, #33	; 0x21
 8000356:	d138      	bne.n	80003ca <letter+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4857      	ldr	r0, [pc, #348]	; (80004bc <letter+0x36c>)
 8000360:	f004 f9eb 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036a:	4855      	ldr	r0, [pc, #340]	; (80004c0 <letter+0x370>)
 800036c:	f004 f9e5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000376:	4852      	ldr	r0, [pc, #328]	; (80004c0 <letter+0x370>)
 8000378:	f004 f9df 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800037c:	2200      	movs	r2, #0
 800037e:	2140      	movs	r1, #64	; 0x40
 8000380:	484f      	ldr	r0, [pc, #316]	; (80004c0 <letter+0x370>)
 8000382:	f004 f9da 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000386:	2200      	movs	r2, #0
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	484d      	ldr	r0, [pc, #308]	; (80004c0 <letter+0x370>)
 800038c:	f004 f9d5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	484b      	ldr	r0, [pc, #300]	; (80004c4 <letter+0x374>)
 8000396:	f004 f9d0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4848      	ldr	r0, [pc, #288]	; (80004c4 <letter+0x374>)
 80003a2:	f004 f9ca 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4845      	ldr	r0, [pc, #276]	; (80004c4 <letter+0x374>)
 80003ae:	f004 f9c4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b8:	4842      	ldr	r0, [pc, #264]	; (80004c4 <letter+0x374>)
 80003ba:	f004 f9be 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c4:	483d      	ldr	r0, [pc, #244]	; (80004bc <letter+0x36c>)
 80003c6:	f004 f9b8 	bl	800473a <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b3f      	cmp	r3, #63	; 0x3f
 80003ce:	d13b      	bne.n	8000448 <letter+0x2f8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	4839      	ldr	r0, [pc, #228]	; (80004bc <letter+0x36c>)
 80003d8:	f004 f9af 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e2:	4837      	ldr	r0, [pc, #220]	; (80004c0 <letter+0x370>)
 80003e4:	f004 f9a9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4834      	ldr	r0, [pc, #208]	; (80004c0 <letter+0x370>)
 80003f0:	f004 f9a3 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80003f4:	2201      	movs	r2, #1
 80003f6:	2140      	movs	r1, #64	; 0x40
 80003f8:	4831      	ldr	r0, [pc, #196]	; (80004c0 <letter+0x370>)
 80003fa:	f004 f99e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80003fe:	2201      	movs	r2, #1
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <letter+0x370>)
 8000404:	f004 f999 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000408:	2201      	movs	r2, #1
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	482d      	ldr	r0, [pc, #180]	; (80004c4 <letter+0x374>)
 800040e:	f004 f994 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	482a      	ldr	r0, [pc, #168]	; (80004c4 <letter+0x374>)
 800041a:	f004 f98e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	4827      	ldr	r0, [pc, #156]	; (80004c4 <letter+0x374>)
 8000426:	f004 f988 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000430:	4824      	ldr	r0, [pc, #144]	; (80004c4 <letter+0x374>)
 8000432:	f004 f982 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	481f      	ldr	r0, [pc, #124]	; (80004bc <letter+0x36c>)
 800043e:	f004 f97c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000442:	2002      	movs	r0, #2
 8000444:	f003 faf6 	bl	8003a34 <HAL_Delay>
	}
	if(L == '*')
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b2a      	cmp	r3, #42	; 0x2a
 800044c:	d142      	bne.n	80004d4 <letter+0x384>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	4819      	ldr	r0, [pc, #100]	; (80004bc <letter+0x36c>)
 8000456:	f004 f970 	bl	800473a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4817      	ldr	r0, [pc, #92]	; (80004c0 <letter+0x370>)
 8000462:	f004 f96a 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <letter+0x370>)
 800046e:	f004 f964 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000472:	2200      	movs	r2, #0
 8000474:	2140      	movs	r1, #64	; 0x40
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <letter+0x370>)
 8000478:	f004 f95f 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800047c:	2201      	movs	r2, #1
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <letter+0x370>)
 8000482:	f004 f95a 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000486:	2200      	movs	r2, #0
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <letter+0x374>)
 800048c:	f004 f955 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <letter+0x374>)
 8000498:	f004 f94f 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <letter+0x374>)
 80004a4:	f004 f949 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <letter+0x374>)
 80004b0:	f004 f943 	bl	800473a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	e005      	b.n	80004c8 <letter+0x378>
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40010800 	.word	0x40010800
 80004c8:	48d5      	ldr	r0, [pc, #852]	; (8000820 <letter+0x6d0>)
 80004ca:	f004 f936 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f003 fab0 	bl	8003a34 <HAL_Delay>
	}
	if(L == '#')
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b23      	cmp	r3, #35	; 0x23
 80004d8:	d13b      	bne.n	8000552 <letter+0x402>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	48cf      	ldr	r0, [pc, #828]	; (8000820 <letter+0x6d0>)
 80004e2:	f004 f92a 	bl	800473a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	48cd      	ldr	r0, [pc, #820]	; (8000824 <letter+0x6d4>)
 80004ee:	f004 f924 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f8:	48ca      	ldr	r0, [pc, #808]	; (8000824 <letter+0x6d4>)
 80004fa:	f004 f91e 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	48c8      	ldr	r0, [pc, #800]	; (8000824 <letter+0x6d4>)
 8000504:	f004 f919 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	48c5      	ldr	r0, [pc, #788]	; (8000824 <letter+0x6d4>)
 800050e:	f004 f914 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000512:	2200      	movs	r2, #0
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	48c4      	ldr	r0, [pc, #784]	; (8000828 <letter+0x6d8>)
 8000518:	f004 f90f 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000522:	48c1      	ldr	r0, [pc, #772]	; (8000828 <letter+0x6d8>)
 8000524:	f004 f909 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	48be      	ldr	r0, [pc, #760]	; (8000828 <letter+0x6d8>)
 8000530:	f004 f903 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053a:	48bb      	ldr	r0, [pc, #748]	; (8000828 <letter+0x6d8>)
 800053c:	f004 f8fd 	bl	800473a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	48b6      	ldr	r0, [pc, #728]	; (8000820 <letter+0x6d0>)
 8000548:	f004 f8f7 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 800054c:	2002      	movs	r0, #2
 800054e:	f003 fa71 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'a')
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b61      	cmp	r3, #97	; 0x61
 8000556:	d13b      	bne.n	80005d0 <letter+0x480>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	48b0      	ldr	r0, [pc, #704]	; (8000820 <letter+0x6d0>)
 8000560:	f004 f8eb 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	48ae      	ldr	r0, [pc, #696]	; (8000824 <letter+0x6d4>)
 800056c:	f004 f8e5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	48ab      	ldr	r0, [pc, #684]	; (8000824 <letter+0x6d4>)
 8000578:	f004 f8df 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	48a8      	ldr	r0, [pc, #672]	; (8000824 <letter+0x6d4>)
 8000582:	f004 f8da 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	48a6      	ldr	r0, [pc, #664]	; (8000824 <letter+0x6d4>)
 800058c:	f004 f8d5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000590:	2200      	movs	r2, #0
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	48a4      	ldr	r0, [pc, #656]	; (8000828 <letter+0x6d8>)
 8000596:	f004 f8d0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	48a1      	ldr	r0, [pc, #644]	; (8000828 <letter+0x6d8>)
 80005a2:	f004 f8ca 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	489e      	ldr	r0, [pc, #632]	; (8000828 <letter+0x6d8>)
 80005ae:	f004 f8c4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	489b      	ldr	r0, [pc, #620]	; (8000828 <letter+0x6d8>)
 80005ba:	f004 f8be 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4896      	ldr	r0, [pc, #600]	; (8000820 <letter+0x6d0>)
 80005c6:	f004 f8b8 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80005ca:	2002      	movs	r0, #2
 80005cc:	f003 fa32 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'b')
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b62      	cmp	r3, #98	; 0x62
 80005d4:	d13b      	bne.n	800064e <letter+0x4fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4890      	ldr	r0, [pc, #576]	; (8000820 <letter+0x6d0>)
 80005de:	f004 f8ac 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e8:	488e      	ldr	r0, [pc, #568]	; (8000824 <letter+0x6d4>)
 80005ea:	f004 f8a6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	488b      	ldr	r0, [pc, #556]	; (8000824 <letter+0x6d4>)
 80005f6:	f004 f8a0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4889      	ldr	r0, [pc, #548]	; (8000824 <letter+0x6d4>)
 8000600:	f004 f89b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4886      	ldr	r0, [pc, #536]	; (8000824 <letter+0x6d4>)
 800060a:	f004 f896 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4885      	ldr	r0, [pc, #532]	; (8000828 <letter+0x6d8>)
 8000614:	f004 f891 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4882      	ldr	r0, [pc, #520]	; (8000828 <letter+0x6d8>)
 8000620:	f004 f88b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	487f      	ldr	r0, [pc, #508]	; (8000828 <letter+0x6d8>)
 800062c:	f004 f885 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000636:	487c      	ldr	r0, [pc, #496]	; (8000828 <letter+0x6d8>)
 8000638:	f004 f87f 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4877      	ldr	r0, [pc, #476]	; (8000820 <letter+0x6d0>)
 8000644:	f004 f879 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000648:	2002      	movs	r0, #2
 800064a:	f003 f9f3 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'C')
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b43      	cmp	r3, #67	; 0x43
 8000652:	d13b      	bne.n	80006cc <letter+0x57c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4871      	ldr	r0, [pc, #452]	; (8000820 <letter+0x6d0>)
 800065c:	f004 f86d 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	486f      	ldr	r0, [pc, #444]	; (8000824 <letter+0x6d4>)
 8000668:	f004 f867 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <letter+0x6d4>)
 8000674:	f004 f861 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000678:	2200      	movs	r2, #0
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4869      	ldr	r0, [pc, #420]	; (8000824 <letter+0x6d4>)
 800067e:	f004 f85c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000682:	2200      	movs	r2, #0
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4867      	ldr	r0, [pc, #412]	; (8000824 <letter+0x6d4>)
 8000688:	f004 f857 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800068c:	2200      	movs	r2, #0
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4865      	ldr	r0, [pc, #404]	; (8000828 <letter+0x6d8>)
 8000692:	f004 f852 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4862      	ldr	r0, [pc, #392]	; (8000828 <letter+0x6d8>)
 800069e:	f004 f84c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	485f      	ldr	r0, [pc, #380]	; (8000828 <letter+0x6d8>)
 80006aa:	f004 f846 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b4:	485c      	ldr	r0, [pc, #368]	; (8000828 <letter+0x6d8>)
 80006b6:	f004 f840 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	4857      	ldr	r0, [pc, #348]	; (8000820 <letter+0x6d0>)
 80006c2:	f004 f83a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f003 f9b4 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'c')
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b63      	cmp	r3, #99	; 0x63
 80006d0:	d13b      	bne.n	800074a <letter+0x5fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4851      	ldr	r0, [pc, #324]	; (8000820 <letter+0x6d0>)
 80006da:	f004 f82e 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e4:	484f      	ldr	r0, [pc, #316]	; (8000824 <letter+0x6d4>)
 80006e6:	f004 f828 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	484c      	ldr	r0, [pc, #304]	; (8000824 <letter+0x6d4>)
 80006f2:	f004 f822 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	484a      	ldr	r0, [pc, #296]	; (8000824 <letter+0x6d4>)
 80006fc:	f004 f81d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000700:	2200      	movs	r2, #0
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	4847      	ldr	r0, [pc, #284]	; (8000824 <letter+0x6d4>)
 8000706:	f004 f818 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4846      	ldr	r0, [pc, #280]	; (8000828 <letter+0x6d8>)
 8000710:	f004 f813 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	4843      	ldr	r0, [pc, #268]	; (8000828 <letter+0x6d8>)
 800071c:	f004 f80d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000726:	4840      	ldr	r0, [pc, #256]	; (8000828 <letter+0x6d8>)
 8000728:	f004 f807 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	483d      	ldr	r0, [pc, #244]	; (8000828 <letter+0x6d8>)
 8000734:	f004 f801 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4838      	ldr	r0, [pc, #224]	; (8000820 <letter+0x6d0>)
 8000740:	f003 fffb 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000744:	2002      	movs	r0, #2
 8000746:	f003 f975 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'd')
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b64      	cmp	r3, #100	; 0x64
 800074e:	d13b      	bne.n	80007c8 <letter+0x678>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <letter+0x6d0>)
 8000758:	f003 ffef 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000762:	4830      	ldr	r0, [pc, #192]	; (8000824 <letter+0x6d4>)
 8000764:	f003 ffe9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	482d      	ldr	r0, [pc, #180]	; (8000824 <letter+0x6d4>)
 8000770:	f003 ffe3 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	482a      	ldr	r0, [pc, #168]	; (8000824 <letter+0x6d4>)
 800077a:	f003 ffde 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <letter+0x6d4>)
 8000784:	f003 ffd9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <letter+0x6d8>)
 800078e:	f003 ffd4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <letter+0x6d8>)
 800079a:	f003 ffce 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <letter+0x6d8>)
 80007a6:	f003 ffc8 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b0:	481d      	ldr	r0, [pc, #116]	; (8000828 <letter+0x6d8>)
 80007b2:	f003 ffc2 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <letter+0x6d0>)
 80007be:	f003 ffbc 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f003 f936 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'E')
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b45      	cmp	r3, #69	; 0x45
 80007cc:	d143      	bne.n	8000856 <letter+0x706>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <letter+0x6d0>)
 80007d6:	f003 ffb0 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <letter+0x6d4>)
 80007e2:	f003 ffaa 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <letter+0x6d4>)
 80007ee:	f003 ffa4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80007f2:	2201      	movs	r2, #1
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <letter+0x6d4>)
 80007f8:	f003 ff9f 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <letter+0x6d4>)
 8000802:	f003 ff9a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <letter+0x6d8>)
 800080c:	f003 ff95 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <letter+0x6d8>)
 8000818:	f003 ff8f 	bl	800473a <HAL_GPIO_WritePin>
 800081c:	e006      	b.n	800082c <letter+0x6dc>
 800081e:	bf00      	nop
 8000820:	40010c00 	.word	0x40010c00
 8000824:	40011000 	.word	0x40011000
 8000828:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	48d4      	ldr	r0, [pc, #848]	; (8000b84 <letter+0xa34>)
 8000834:	f003 ff81 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083e:	48d1      	ldr	r0, [pc, #836]	; (8000b84 <letter+0xa34>)
 8000840:	f003 ff7b 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	48cf      	ldr	r0, [pc, #828]	; (8000b88 <letter+0xa38>)
 800084c:	f003 ff75 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000850:	2002      	movs	r0, #2
 8000852:	f003 f8ef 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'e')
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b65      	cmp	r3, #101	; 0x65
 800085a:	d13b      	bne.n	80008d4 <letter+0x784>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	48c9      	ldr	r0, [pc, #804]	; (8000b88 <letter+0xa38>)
 8000864:	f003 ff69 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	48c7      	ldr	r0, [pc, #796]	; (8000b8c <letter+0xa3c>)
 8000870:	f003 ff63 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	48c4      	ldr	r0, [pc, #784]	; (8000b8c <letter+0xa3c>)
 800087c:	f003 ff5d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	48c1      	ldr	r0, [pc, #772]	; (8000b8c <letter+0xa3c>)
 8000886:	f003 ff58 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800088a:	2200      	movs	r2, #0
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	48bf      	ldr	r0, [pc, #764]	; (8000b8c <letter+0xa3c>)
 8000890:	f003 ff53 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	48ba      	ldr	r0, [pc, #744]	; (8000b84 <letter+0xa34>)
 800089a:	f003 ff4e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	48b7      	ldr	r0, [pc, #732]	; (8000b84 <letter+0xa34>)
 80008a6:	f003 ff48 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	48b4      	ldr	r0, [pc, #720]	; (8000b84 <letter+0xa34>)
 80008b2:	f003 ff42 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008bc:	48b1      	ldr	r0, [pc, #708]	; (8000b84 <letter+0xa34>)
 80008be:	f003 ff3c 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	48af      	ldr	r0, [pc, #700]	; (8000b88 <letter+0xa38>)
 80008ca:	f003 ff36 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80008ce:	2002      	movs	r0, #2
 80008d0:	f003 f8b0 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'f')
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b66      	cmp	r3, #102	; 0x66
 80008d8:	d13b      	bne.n	8000952 <letter+0x802>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	48a9      	ldr	r0, [pc, #676]	; (8000b88 <letter+0xa38>)
 80008e2:	f003 ff2a 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	48a7      	ldr	r0, [pc, #668]	; (8000b8c <letter+0xa3c>)
 80008ee:	f003 ff24 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	48a4      	ldr	r0, [pc, #656]	; (8000b8c <letter+0xa3c>)
 80008fa:	f003 ff1e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80008fe:	2201      	movs	r2, #1
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	48a2      	ldr	r0, [pc, #648]	; (8000b8c <letter+0xa3c>)
 8000904:	f003 ff19 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	489f      	ldr	r0, [pc, #636]	; (8000b8c <letter+0xa3c>)
 800090e:	f003 ff14 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000912:	2200      	movs	r2, #0
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	489b      	ldr	r0, [pc, #620]	; (8000b84 <letter+0xa34>)
 8000918:	f003 ff0f 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	4898      	ldr	r0, [pc, #608]	; (8000b84 <letter+0xa34>)
 8000924:	f003 ff09 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092e:	4895      	ldr	r0, [pc, #596]	; (8000b84 <letter+0xa34>)
 8000930:	f003 ff03 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	4892      	ldr	r0, [pc, #584]	; (8000b84 <letter+0xa34>)
 800093c:	f003 fefd 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4890      	ldr	r0, [pc, #576]	; (8000b88 <letter+0xa38>)
 8000948:	f003 fef7 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800094c:	2002      	movs	r0, #2
 800094e:	f003 f871 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'G')
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b47      	cmp	r3, #71	; 0x47
 8000956:	d13b      	bne.n	80009d0 <letter+0x880>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	488a      	ldr	r0, [pc, #552]	; (8000b88 <letter+0xa38>)
 8000960:	f003 feeb 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096a:	4888      	ldr	r0, [pc, #544]	; (8000b8c <letter+0xa3c>)
 800096c:	f003 fee5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4885      	ldr	r0, [pc, #532]	; (8000b8c <letter+0xa3c>)
 8000978:	f003 fedf 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800097c:	2201      	movs	r2, #1
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	4882      	ldr	r0, [pc, #520]	; (8000b8c <letter+0xa3c>)
 8000982:	f003 feda 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4880      	ldr	r0, [pc, #512]	; (8000b8c <letter+0xa3c>)
 800098c:	f003 fed5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	; (8000b84 <letter+0xa34>)
 8000996:	f003 fed0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	4878      	ldr	r0, [pc, #480]	; (8000b84 <letter+0xa34>)
 80009a2:	f003 feca 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ac:	4875      	ldr	r0, [pc, #468]	; (8000b84 <letter+0xa34>)
 80009ae:	f003 fec4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b8:	4872      	ldr	r0, [pc, #456]	; (8000b84 <letter+0xa34>)
 80009ba:	f003 febe 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4870      	ldr	r0, [pc, #448]	; (8000b88 <letter+0xa38>)
 80009c6:	f003 feb8 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f003 f832 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'g')
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b67      	cmp	r3, #103	; 0x67
 80009d4:	d13b      	bne.n	8000a4e <letter+0x8fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	486a      	ldr	r0, [pc, #424]	; (8000b88 <letter+0xa38>)
 80009de:	f003 feac 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	4868      	ldr	r0, [pc, #416]	; (8000b8c <letter+0xa3c>)
 80009ea:	f003 fea6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4865      	ldr	r0, [pc, #404]	; (8000b8c <letter+0xa3c>)
 80009f6:	f003 fea0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4863      	ldr	r0, [pc, #396]	; (8000b8c <letter+0xa3c>)
 8000a00:	f003 fe9b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	4860      	ldr	r0, [pc, #384]	; (8000b8c <letter+0xa3c>)
 8000a0a:	f003 fe96 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	485c      	ldr	r0, [pc, #368]	; (8000b84 <letter+0xa34>)
 8000a14:	f003 fe91 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4859      	ldr	r0, [pc, #356]	; (8000b84 <letter+0xa34>)
 8000a20:	f003 fe8b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4856      	ldr	r0, [pc, #344]	; (8000b84 <letter+0xa34>)
 8000a2c:	f003 fe85 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a36:	4853      	ldr	r0, [pc, #332]	; (8000b84 <letter+0xa34>)
 8000a38:	f003 fe7f 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4851      	ldr	r0, [pc, #324]	; (8000b88 <letter+0xa38>)
 8000a44:	f003 fe79 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f002 fff3 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'I')
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b49      	cmp	r3, #73	; 0x49
 8000a52:	d13b      	bne.n	8000acc <letter+0x97c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	484b      	ldr	r0, [pc, #300]	; (8000b88 <letter+0xa38>)
 8000a5c:	f003 fe6d 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	4849      	ldr	r0, [pc, #292]	; (8000b8c <letter+0xa3c>)
 8000a68:	f003 fe67 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a72:	4846      	ldr	r0, [pc, #280]	; (8000b8c <letter+0xa3c>)
 8000a74:	f003 fe61 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4843      	ldr	r0, [pc, #268]	; (8000b8c <letter+0xa3c>)
 8000a7e:	f003 fe5c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000a82:	2201      	movs	r2, #1
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	4841      	ldr	r0, [pc, #260]	; (8000b8c <letter+0xa3c>)
 8000a88:	f003 fe57 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	483c      	ldr	r0, [pc, #240]	; (8000b84 <letter+0xa34>)
 8000a92:	f003 fe52 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4839      	ldr	r0, [pc, #228]	; (8000b84 <letter+0xa34>)
 8000a9e:	f003 fe4c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <letter+0xa34>)
 8000aaa:	f003 fe46 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <letter+0xa34>)
 8000ab6:	f003 fe40 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <letter+0xa38>)
 8000ac2:	f003 fe3a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f002 ffb4 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'i')
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b69      	cmp	r3, #105	; 0x69
 8000ad0:	d13b      	bne.n	8000b4a <letter+0x9fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	482b      	ldr	r0, [pc, #172]	; (8000b88 <letter+0xa38>)
 8000ada:	f003 fe2e 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	4829      	ldr	r0, [pc, #164]	; (8000b8c <letter+0xa3c>)
 8000ae6:	f003 fe28 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4826      	ldr	r0, [pc, #152]	; (8000b8c <letter+0xa3c>)
 8000af2:	f003 fe22 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000af6:	2200      	movs	r2, #0
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	4824      	ldr	r0, [pc, #144]	; (8000b8c <letter+0xa3c>)
 8000afc:	f003 fe1d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <letter+0xa3c>)
 8000b06:	f003 fe18 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <letter+0xa34>)
 8000b10:	f003 fe13 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	481a      	ldr	r0, [pc, #104]	; (8000b84 <letter+0xa34>)
 8000b1c:	f003 fe0d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <letter+0xa34>)
 8000b28:	f003 fe07 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <letter+0xa34>)
 8000b34:	f003 fe01 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <letter+0xa38>)
 8000b40:	f003 fdfb 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f002 ff75 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'l')
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b6c      	cmp	r3, #108	; 0x6c
 8000b4e:	d142      	bne.n	8000bd6 <letter+0xa86>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b56:	480c      	ldr	r0, [pc, #48]	; (8000b88 <letter+0xa38>)
 8000b58:	f003 fdef 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <letter+0xa3c>)
 8000b64:	f003 fde9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <letter+0xa3c>)
 8000b70:	f003 fde3 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <letter+0xa3c>)
 8000b7a:	f003 fdde 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	e005      	b.n	8000b90 <letter+0xa40>
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	48d4      	ldr	r0, [pc, #848]	; (8000ee4 <letter+0xd94>)
 8000b92:	f003 fdd2 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b96:	2200      	movs	r2, #0
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	48d3      	ldr	r0, [pc, #844]	; (8000ee8 <letter+0xd98>)
 8000b9c:	f003 fdcd 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	48d0      	ldr	r0, [pc, #832]	; (8000ee8 <letter+0xd98>)
 8000ba8:	f003 fdc7 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	48cd      	ldr	r0, [pc, #820]	; (8000ee8 <letter+0xd98>)
 8000bb4:	f003 fdc1 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	48ca      	ldr	r0, [pc, #808]	; (8000ee8 <letter+0xd98>)
 8000bc0:	f003 fdbb 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	48c8      	ldr	r0, [pc, #800]	; (8000eec <letter+0xd9c>)
 8000bcc:	f003 fdb5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f002 ff2f 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'm')
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b6d      	cmp	r3, #109	; 0x6d
 8000bda:	d13b      	bne.n	8000c54 <letter+0xb04>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be2:	48c2      	ldr	r0, [pc, #776]	; (8000eec <letter+0xd9c>)
 8000be4:	f003 fda9 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	48bd      	ldr	r0, [pc, #756]	; (8000ee4 <letter+0xd94>)
 8000bf0:	f003 fda3 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	48ba      	ldr	r0, [pc, #744]	; (8000ee4 <letter+0xd94>)
 8000bfc:	f003 fd9d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c00:	2201      	movs	r2, #1
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	48b7      	ldr	r0, [pc, #732]	; (8000ee4 <letter+0xd94>)
 8000c06:	f003 fd98 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	48b5      	ldr	r0, [pc, #724]	; (8000ee4 <letter+0xd94>)
 8000c10:	f003 fd93 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	48b3      	ldr	r0, [pc, #716]	; (8000ee8 <letter+0xd98>)
 8000c1a:	f003 fd8e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	48b0      	ldr	r0, [pc, #704]	; (8000ee8 <letter+0xd98>)
 8000c26:	f003 fd88 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	48ad      	ldr	r0, [pc, #692]	; (8000ee8 <letter+0xd98>)
 8000c32:	f003 fd82 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	48aa      	ldr	r0, [pc, #680]	; (8000ee8 <letter+0xd98>)
 8000c3e:	f003 fd7c 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	48a8      	ldr	r0, [pc, #672]	; (8000eec <letter+0xd9c>)
 8000c4a:	f003 fd76 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f002 fef0 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'N')
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b4e      	cmp	r3, #78	; 0x4e
 8000c58:	d13b      	bne.n	8000cd2 <letter+0xb82>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	48a2      	ldr	r0, [pc, #648]	; (8000eec <letter+0xd9c>)
 8000c62:	f003 fd6a 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	489d      	ldr	r0, [pc, #628]	; (8000ee4 <letter+0xd94>)
 8000c6e:	f003 fd64 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	489a      	ldr	r0, [pc, #616]	; (8000ee4 <letter+0xd94>)
 8000c7a:	f003 fd5e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4898      	ldr	r0, [pc, #608]	; (8000ee4 <letter+0xd94>)
 8000c84:	f003 fd59 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <letter+0xd94>)
 8000c8e:	f003 fd54 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c92:	2200      	movs	r2, #0
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4894      	ldr	r0, [pc, #592]	; (8000ee8 <letter+0xd98>)
 8000c98:	f003 fd4f 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca2:	4891      	ldr	r0, [pc, #580]	; (8000ee8 <letter+0xd98>)
 8000ca4:	f003 fd49 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	488e      	ldr	r0, [pc, #568]	; (8000ee8 <letter+0xd98>)
 8000cb0:	f003 fd43 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	488b      	ldr	r0, [pc, #556]	; (8000ee8 <letter+0xd98>)
 8000cbc:	f003 fd3d 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4889      	ldr	r0, [pc, #548]	; (8000eec <letter+0xd9c>)
 8000cc8:	f003 fd37 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f002 feb1 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'n')
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8000cd6:	d13b      	bne.n	8000d50 <letter+0xc00>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4883      	ldr	r0, [pc, #524]	; (8000eec <letter+0xd9c>)
 8000ce0:	f003 fd2b 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	487e      	ldr	r0, [pc, #504]	; (8000ee4 <letter+0xd94>)
 8000cec:	f003 fd25 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	487b      	ldr	r0, [pc, #492]	; (8000ee4 <letter+0xd94>)
 8000cf8:	f003 fd1f 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4878      	ldr	r0, [pc, #480]	; (8000ee4 <letter+0xd94>)
 8000d02:	f003 fd1a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d06:	2201      	movs	r2, #1
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4876      	ldr	r0, [pc, #472]	; (8000ee4 <letter+0xd94>)
 8000d0c:	f003 fd15 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d10:	2200      	movs	r2, #0
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4874      	ldr	r0, [pc, #464]	; (8000ee8 <letter+0xd98>)
 8000d16:	f003 fd10 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4871      	ldr	r0, [pc, #452]	; (8000ee8 <letter+0xd98>)
 8000d22:	f003 fd0a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	486e      	ldr	r0, [pc, #440]	; (8000ee8 <letter+0xd98>)
 8000d2e:	f003 fd04 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	486b      	ldr	r0, [pc, #428]	; (8000ee8 <letter+0xd98>)
 8000d3a:	f003 fcfe 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <letter+0xd9c>)
 8000d46:	f003 fcf8 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f002 fe72 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'O')
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b4f      	cmp	r3, #79	; 0x4f
 8000d54:	d13b      	bne.n	8000dce <letter+0xc7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5c:	4863      	ldr	r0, [pc, #396]	; (8000eec <letter+0xd9c>)
 8000d5e:	f003 fcec 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d68:	485e      	ldr	r0, [pc, #376]	; (8000ee4 <letter+0xd94>)
 8000d6a:	f003 fce6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <letter+0xd94>)
 8000d76:	f003 fce0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2140      	movs	r1, #64	; 0x40
 8000d7e:	4859      	ldr	r0, [pc, #356]	; (8000ee4 <letter+0xd94>)
 8000d80:	f003 fcdb 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4856      	ldr	r0, [pc, #344]	; (8000ee4 <letter+0xd94>)
 8000d8a:	f003 fcd6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4855      	ldr	r0, [pc, #340]	; (8000ee8 <letter+0xd98>)
 8000d94:	f003 fcd1 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4852      	ldr	r0, [pc, #328]	; (8000ee8 <letter+0xd98>)
 8000da0:	f003 fccb 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	484f      	ldr	r0, [pc, #316]	; (8000ee8 <letter+0xd98>)
 8000dac:	f003 fcc5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db6:	484c      	ldr	r0, [pc, #304]	; (8000ee8 <letter+0xd98>)
 8000db8:	f003 fcbf 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	484a      	ldr	r0, [pc, #296]	; (8000eec <letter+0xd9c>)
 8000dc4:	f003 fcb9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f002 fe33 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'o')
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b6f      	cmp	r3, #111	; 0x6f
 8000dd2:	d13b      	bne.n	8000e4c <letter+0xcfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4844      	ldr	r0, [pc, #272]	; (8000eec <letter+0xd9c>)
 8000ddc:	f003 fcad 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <letter+0xd94>)
 8000de8:	f003 fca7 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <letter+0xd94>)
 8000df4:	f003 fca1 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <letter+0xd94>)
 8000dfe:	f003 fc9c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000e02:	2201      	movs	r2, #1
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <letter+0xd94>)
 8000e08:	f003 fc97 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <letter+0xd98>)
 8000e12:	f003 fc92 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <letter+0xd98>)
 8000e1e:	f003 fc8c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <letter+0xd98>)
 8000e2a:	f003 fc86 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	482c      	ldr	r0, [pc, #176]	; (8000ee8 <letter+0xd98>)
 8000e36:	f003 fc80 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <letter+0xd9c>)
 8000e42:	f003 fc7a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f002 fdf4 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'P')
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b50      	cmp	r3, #80	; 0x50
 8000e50:	d13b      	bne.n	8000eca <letter+0xd7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4824      	ldr	r0, [pc, #144]	; (8000eec <letter+0xd9c>)
 8000e5a:	f003 fc6e 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <letter+0xd94>)
 8000e66:	f003 fc68 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <letter+0xd94>)
 8000e72:	f003 fc62 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000e76:	2200      	movs	r2, #0
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <letter+0xd94>)
 8000e7c:	f003 fc5d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <letter+0xd94>)
 8000e86:	f003 fc58 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <letter+0xd98>)
 8000e90:	f003 fc53 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9a:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <letter+0xd98>)
 8000e9c:	f003 fc4d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <letter+0xd98>)
 8000ea8:	f003 fc47 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <letter+0xd98>)
 8000eb4:	f003 fc41 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <letter+0xd9c>)
 8000ec0:	f003 fc3b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f002 fdb5 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'Q')
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b51      	cmp	r3, #81	; 0x51
 8000ece:	d142      	bne.n	8000f56 <letter+0xe06>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <letter+0xd9c>)
 8000ed8:	f003 fc2f 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	e005      	b.n	8000ef0 <letter+0xda0>
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	48d5      	ldr	r0, [pc, #852]	; (8001248 <letter+0x10f8>)
 8000ef2:	f003 fc22 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	48d2      	ldr	r0, [pc, #840]	; (8001248 <letter+0x10f8>)
 8000efe:	f003 fc1c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f02:	2200      	movs	r2, #0
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	48d0      	ldr	r0, [pc, #832]	; (8001248 <letter+0x10f8>)
 8000f08:	f003 fc17 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	48cd      	ldr	r0, [pc, #820]	; (8001248 <letter+0x10f8>)
 8000f12:	f003 fc12 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f16:	2201      	movs	r2, #1
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	48cc      	ldr	r0, [pc, #816]	; (800124c <letter+0x10fc>)
 8000f1c:	f003 fc0d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	48c9      	ldr	r0, [pc, #804]	; (800124c <letter+0x10fc>)
 8000f28:	f003 fc07 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	48c6      	ldr	r0, [pc, #792]	; (800124c <letter+0x10fc>)
 8000f34:	f003 fc01 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	48c3      	ldr	r0, [pc, #780]	; (800124c <letter+0x10fc>)
 8000f40:	f003 fbfb 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	48c1      	ldr	r0, [pc, #772]	; (8001250 <letter+0x1100>)
 8000f4c:	f003 fbf5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f002 fd6f 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'r')
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b72      	cmp	r3, #114	; 0x72
 8000f5a:	d13b      	bne.n	8000fd4 <letter+0xe84>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	48bb      	ldr	r0, [pc, #748]	; (8001250 <letter+0x1100>)
 8000f64:	f003 fbe9 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	48b6      	ldr	r0, [pc, #728]	; (8001248 <letter+0x10f8>)
 8000f70:	f003 fbe3 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	48b3      	ldr	r0, [pc, #716]	; (8001248 <letter+0x10f8>)
 8000f7c:	f003 fbdd 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	48b0      	ldr	r0, [pc, #704]	; (8001248 <letter+0x10f8>)
 8000f86:	f003 fbd8 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	48ae      	ldr	r0, [pc, #696]	; (8001248 <letter+0x10f8>)
 8000f90:	f003 fbd3 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f94:	2201      	movs	r2, #1
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	48ac      	ldr	r0, [pc, #688]	; (800124c <letter+0x10fc>)
 8000f9a:	f003 fbce 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	48a9      	ldr	r0, [pc, #676]	; (800124c <letter+0x10fc>)
 8000fa6:	f003 fbc8 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	48a6      	ldr	r0, [pc, #664]	; (800124c <letter+0x10fc>)
 8000fb2:	f003 fbc2 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	48a3      	ldr	r0, [pc, #652]	; (800124c <letter+0x10fc>)
 8000fbe:	f003 fbbc 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	48a1      	ldr	r0, [pc, #644]	; (8001250 <letter+0x1100>)
 8000fca:	f003 fbb6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f002 fd30 	bl	8003a34 <HAL_Delay>
	}
	if(L == 's')
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b73      	cmp	r3, #115	; 0x73
 8000fd8:	d13b      	bne.n	8001052 <letter+0xf02>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	489b      	ldr	r0, [pc, #620]	; (8001250 <letter+0x1100>)
 8000fe2:	f003 fbaa 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4896      	ldr	r0, [pc, #600]	; (8001248 <letter+0x10f8>)
 8000fee:	f003 fba4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4893      	ldr	r0, [pc, #588]	; (8001248 <letter+0x10f8>)
 8000ffa:	f003 fb9e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ffe:	2200      	movs	r2, #0
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	4891      	ldr	r0, [pc, #580]	; (8001248 <letter+0x10f8>)
 8001004:	f003 fb99 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001008:	2200      	movs	r2, #0
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	488e      	ldr	r0, [pc, #568]	; (8001248 <letter+0x10f8>)
 800100e:	f003 fb94 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	488d      	ldr	r0, [pc, #564]	; (800124c <letter+0x10fc>)
 8001018:	f003 fb8f 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	488a      	ldr	r0, [pc, #552]	; (800124c <letter+0x10fc>)
 8001024:	f003 fb89 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4887      	ldr	r0, [pc, #540]	; (800124c <letter+0x10fc>)
 8001030:	f003 fb83 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4884      	ldr	r0, [pc, #528]	; (800124c <letter+0x10fc>)
 800103c:	f003 fb7d 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	4882      	ldr	r0, [pc, #520]	; (8001250 <letter+0x1100>)
 8001048:	f003 fb77 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800104c:	2002      	movs	r0, #2
 800104e:	f002 fcf1 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'T')
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b54      	cmp	r3, #84	; 0x54
 8001056:	d13b      	bne.n	80010d0 <letter+0xf80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	487c      	ldr	r0, [pc, #496]	; (8001250 <letter+0x1100>)
 8001060:	f003 fb6b 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4877      	ldr	r0, [pc, #476]	; (8001248 <letter+0x10f8>)
 800106c:	f003 fb65 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4874      	ldr	r0, [pc, #464]	; (8001248 <letter+0x10f8>)
 8001078:	f003 fb5f 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800107c:	2201      	movs	r2, #1
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4871      	ldr	r0, [pc, #452]	; (8001248 <letter+0x10f8>)
 8001082:	f003 fb5a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	486f      	ldr	r0, [pc, #444]	; (8001248 <letter+0x10f8>)
 800108c:	f003 fb55 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	486d      	ldr	r0, [pc, #436]	; (800124c <letter+0x10fc>)
 8001096:	f003 fb50 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	486a      	ldr	r0, [pc, #424]	; (800124c <letter+0x10fc>)
 80010a2:	f003 fb4a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	4867      	ldr	r0, [pc, #412]	; (800124c <letter+0x10fc>)
 80010ae:	f003 fb44 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4864      	ldr	r0, [pc, #400]	; (800124c <letter+0x10fc>)
 80010ba:	f003 fb3e 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	4862      	ldr	r0, [pc, #392]	; (8001250 <letter+0x1100>)
 80010c6:	f003 fb38 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f002 fcb2 	bl	8003a34 <HAL_Delay>
	}
	if(L == 't')
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b74      	cmp	r3, #116	; 0x74
 80010d4:	d13b      	bne.n	800114e <letter+0xffe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010dc:	485c      	ldr	r0, [pc, #368]	; (8001250 <letter+0x1100>)
 80010de:	f003 fb2c 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4857      	ldr	r0, [pc, #348]	; (8001248 <letter+0x10f8>)
 80010ea:	f003 fb26 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4854      	ldr	r0, [pc, #336]	; (8001248 <letter+0x10f8>)
 80010f6:	f003 fb20 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80010fa:	2201      	movs	r2, #1
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4852      	ldr	r0, [pc, #328]	; (8001248 <letter+0x10f8>)
 8001100:	f003 fb1b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001104:	2200      	movs	r2, #0
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	484f      	ldr	r0, [pc, #316]	; (8001248 <letter+0x10f8>)
 800110a:	f003 fb16 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800110e:	2201      	movs	r2, #1
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	484e      	ldr	r0, [pc, #312]	; (800124c <letter+0x10fc>)
 8001114:	f003 fb11 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	484b      	ldr	r0, [pc, #300]	; (800124c <letter+0x10fc>)
 8001120:	f003 fb0b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	4848      	ldr	r0, [pc, #288]	; (800124c <letter+0x10fc>)
 800112c:	f003 fb05 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	4845      	ldr	r0, [pc, #276]	; (800124c <letter+0x10fc>)
 8001138:	f003 faff 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4843      	ldr	r0, [pc, #268]	; (8001250 <letter+0x1100>)
 8001144:	f003 faf9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001148:	2002      	movs	r0, #2
 800114a:	f002 fc73 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'u')
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b75      	cmp	r3, #117	; 0x75
 8001152:	d13b      	bne.n	80011cc <letter+0x107c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	483d      	ldr	r0, [pc, #244]	; (8001250 <letter+0x1100>)
 800115c:	f003 faed 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <letter+0x10f8>)
 8001168:	f003 fae7 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4835      	ldr	r0, [pc, #212]	; (8001248 <letter+0x10f8>)
 8001174:	f003 fae1 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001178:	2201      	movs	r2, #1
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	4832      	ldr	r0, [pc, #200]	; (8001248 <letter+0x10f8>)
 800117e:	f003 fadc 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001182:	2200      	movs	r2, #0
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4830      	ldr	r0, [pc, #192]	; (8001248 <letter+0x10f8>)
 8001188:	f003 fad7 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800118c:	2201      	movs	r2, #1
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <letter+0x10fc>)
 8001192:	f003 fad2 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	482b      	ldr	r0, [pc, #172]	; (800124c <letter+0x10fc>)
 800119e:	f003 facc 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <letter+0x10fc>)
 80011aa:	f003 fac6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4825      	ldr	r0, [pc, #148]	; (800124c <letter+0x10fc>)
 80011b6:	f003 fac0 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <letter+0x1100>)
 80011c2:	f003 faba 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80011c6:	2002      	movs	r0, #2
 80011c8:	f002 fc34 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'v')
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b76      	cmp	r3, #118	; 0x76
 80011d0:	d142      	bne.n	8001258 <letter+0x1108>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <letter+0x1100>)
 80011da:	f003 faae 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <letter+0x10f8>)
 80011e6:	f003 faa8 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f0:	4815      	ldr	r0, [pc, #84]	; (8001248 <letter+0x10f8>)
 80011f2:	f003 faa2 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80011f6:	2201      	movs	r2, #1
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <letter+0x10f8>)
 80011fc:	f003 fa9d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001200:	2200      	movs	r2, #0
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <letter+0x10f8>)
 8001206:	f003 fa98 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800120a:	2201      	movs	r2, #1
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <letter+0x10fc>)
 8001210:	f003 fa93 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <letter+0x10fc>)
 800121c:	f003 fa8d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <letter+0x10fc>)
 8001228:	f003 fa87 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <letter+0x10fc>)
 8001234:	f003 fa81 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <letter+0x1100>)
 8001240:	f003 fa7b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001244:	2002      	movs	r0, #2
 8001246:	e005      	b.n	8001254 <letter+0x1104>
 8001248:	40011000 	.word	0x40011000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	f002 fbee 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'W')
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b57      	cmp	r3, #87	; 0x57
 800125c:	d13b      	bne.n	80012d6 <letter+0x1186>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	48d5      	ldr	r0, [pc, #852]	; (80015bc <letter+0x146c>)
 8001266:	f003 fa68 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	48d3      	ldr	r0, [pc, #844]	; (80015c0 <letter+0x1470>)
 8001272:	f003 fa62 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	48d0      	ldr	r0, [pc, #832]	; (80015c0 <letter+0x1470>)
 800127e:	f003 fa5c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	48ce      	ldr	r0, [pc, #824]	; (80015c0 <letter+0x1470>)
 8001288:	f003 fa57 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800128c:	2200      	movs	r2, #0
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	48cb      	ldr	r0, [pc, #812]	; (80015c0 <letter+0x1470>)
 8001292:	f003 fa52 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	48ca      	ldr	r0, [pc, #808]	; (80015c4 <letter+0x1474>)
 800129c:	f003 fa4d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	48c7      	ldr	r0, [pc, #796]	; (80015c4 <letter+0x1474>)
 80012a8:	f003 fa47 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b2:	48c4      	ldr	r0, [pc, #784]	; (80015c4 <letter+0x1474>)
 80012b4:	f003 fa41 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	48c1      	ldr	r0, [pc, #772]	; (80015c4 <letter+0x1474>)
 80012c0:	f003 fa3b 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	48bc      	ldr	r0, [pc, #752]	; (80015bc <letter+0x146c>)
 80012cc:	f003 fa35 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f002 fbaf 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'w')
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b77      	cmp	r3, #119	; 0x77
 80012da:	d13b      	bne.n	8001354 <letter+0x1204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	48b6      	ldr	r0, [pc, #728]	; (80015bc <letter+0x146c>)
 80012e4:	f003 fa29 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	48b4      	ldr	r0, [pc, #720]	; (80015c0 <letter+0x1470>)
 80012f0:	f003 fa23 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	48b1      	ldr	r0, [pc, #708]	; (80015c0 <letter+0x1470>)
 80012fc:	f003 fa1d 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	48ae      	ldr	r0, [pc, #696]	; (80015c0 <letter+0x1470>)
 8001306:	f003 fa18 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	48ac      	ldr	r0, [pc, #688]	; (80015c0 <letter+0x1470>)
 8001310:	f003 fa13 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001314:	2201      	movs	r2, #1
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	48aa      	ldr	r0, [pc, #680]	; (80015c4 <letter+0x1474>)
 800131a:	f003 fa0e 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	48a7      	ldr	r0, [pc, #668]	; (80015c4 <letter+0x1474>)
 8001326:	f003 fa08 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	48a4      	ldr	r0, [pc, #656]	; (80015c4 <letter+0x1474>)
 8001332:	f003 fa02 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	48a1      	ldr	r0, [pc, #644]	; (80015c4 <letter+0x1474>)
 800133e:	f003 f9fc 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	489c      	ldr	r0, [pc, #624]	; (80015bc <letter+0x146c>)
 800134a:	f003 f9f6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800134e:	2002      	movs	r0, #2
 8001350:	f002 fb70 	bl	8003a34 <HAL_Delay>
	}
	if(L == 'y')
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b79      	cmp	r3, #121	; 0x79
 8001358:	d13b      	bne.n	80013d2 <letter+0x1282>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4896      	ldr	r0, [pc, #600]	; (80015bc <letter+0x146c>)
 8001362:	f003 f9ea 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	4894      	ldr	r0, [pc, #592]	; (80015c0 <letter+0x1470>)
 800136e:	f003 f9e4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	4891      	ldr	r0, [pc, #580]	; (80015c0 <letter+0x1470>)
 800137a:	f003 f9de 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	488f      	ldr	r0, [pc, #572]	; (80015c0 <letter+0x1470>)
 8001384:	f003 f9d9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001388:	2201      	movs	r2, #1
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	488c      	ldr	r0, [pc, #560]	; (80015c0 <letter+0x1470>)
 800138e:	f003 f9d4 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	488b      	ldr	r0, [pc, #556]	; (80015c4 <letter+0x1474>)
 8001398:	f003 f9cf 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4888      	ldr	r0, [pc, #544]	; (80015c4 <letter+0x1474>)
 80013a4:	f003 f9c9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	4885      	ldr	r0, [pc, #532]	; (80015c4 <letter+0x1474>)
 80013b0:	f003 f9c3 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ba:	4882      	ldr	r0, [pc, #520]	; (80015c4 <letter+0x1474>)
 80013bc:	f003 f9bd 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	487d      	ldr	r0, [pc, #500]	; (80015bc <letter+0x146c>)
 80013c8:	f003 f9b7 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f002 fb31 	bl	8003a34 <HAL_Delay>
	}
	if(L == '0')
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b30      	cmp	r3, #48	; 0x30
 80013d6:	d13b      	bne.n	8001450 <letter+0x1300>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4877      	ldr	r0, [pc, #476]	; (80015bc <letter+0x146c>)
 80013e0:	f003 f9ab 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	4875      	ldr	r0, [pc, #468]	; (80015c0 <letter+0x1470>)
 80013ec:	f003 f9a5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4872      	ldr	r0, [pc, #456]	; (80015c0 <letter+0x1470>)
 80013f8:	f003 f99f 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	486f      	ldr	r0, [pc, #444]	; (80015c0 <letter+0x1470>)
 8001402:	f003 f99a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001406:	2200      	movs	r2, #0
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	486d      	ldr	r0, [pc, #436]	; (80015c0 <letter+0x1470>)
 800140c:	f003 f995 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001410:	2201      	movs	r2, #1
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	486b      	ldr	r0, [pc, #428]	; (80015c4 <letter+0x1474>)
 8001416:	f003 f990 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001420:	4868      	ldr	r0, [pc, #416]	; (80015c4 <letter+0x1474>)
 8001422:	f003 f98a 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	4865      	ldr	r0, [pc, #404]	; (80015c4 <letter+0x1474>)
 800142e:	f003 f984 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001438:	4862      	ldr	r0, [pc, #392]	; (80015c4 <letter+0x1474>)
 800143a:	f003 f97e 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	485d      	ldr	r0, [pc, #372]	; (80015bc <letter+0x146c>)
 8001446:	f003 f978 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800144a:	2002      	movs	r0, #2
 800144c:	f002 faf2 	bl	8003a34 <HAL_Delay>
	}
	if(L == '1')
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b31      	cmp	r3, #49	; 0x31
 8001454:	d13b      	bne.n	80014ce <letter+0x137e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4857      	ldr	r0, [pc, #348]	; (80015bc <letter+0x146c>)
 800145e:	f003 f96c 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4855      	ldr	r0, [pc, #340]	; (80015c0 <letter+0x1470>)
 800146a:	f003 f966 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	4852      	ldr	r0, [pc, #328]	; (80015c0 <letter+0x1470>)
 8001476:	f003 f960 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800147a:	2200      	movs	r2, #0
 800147c:	2140      	movs	r1, #64	; 0x40
 800147e:	4850      	ldr	r0, [pc, #320]	; (80015c0 <letter+0x1470>)
 8001480:	f003 f95b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	484d      	ldr	r0, [pc, #308]	; (80015c0 <letter+0x1470>)
 800148a:	f003 f956 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800148e:	2201      	movs	r2, #1
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	484c      	ldr	r0, [pc, #304]	; (80015c4 <letter+0x1474>)
 8001494:	f003 f951 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4849      	ldr	r0, [pc, #292]	; (80015c4 <letter+0x1474>)
 80014a0:	f003 f94b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014aa:	4846      	ldr	r0, [pc, #280]	; (80015c4 <letter+0x1474>)
 80014ac:	f003 f945 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4843      	ldr	r0, [pc, #268]	; (80015c4 <letter+0x1474>)
 80014b8:	f003 f93f 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	483e      	ldr	r0, [pc, #248]	; (80015bc <letter+0x146c>)
 80014c4:	f003 f939 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f002 fab3 	bl	8003a34 <HAL_Delay>
	}
	if(L == '2')
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b32      	cmp	r3, #50	; 0x32
 80014d2:	d138      	bne.n	8001546 <letter+0x13f6>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	4838      	ldr	r0, [pc, #224]	; (80015bc <letter+0x146c>)
 80014dc:	f003 f92d 	bl	800473a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4836      	ldr	r0, [pc, #216]	; (80015c0 <letter+0x1470>)
 80014e8:	f003 f927 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f2:	4833      	ldr	r0, [pc, #204]	; (80015c0 <letter+0x1470>)
 80014f4:	f003 f921 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	4830      	ldr	r0, [pc, #192]	; (80015c0 <letter+0x1470>)
 80014fe:	f003 f91c 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	482e      	ldr	r0, [pc, #184]	; (80015c0 <letter+0x1470>)
 8001508:	f003 f917 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	482c      	ldr	r0, [pc, #176]	; (80015c4 <letter+0x1474>)
 8001512:	f003 f912 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4829      	ldr	r0, [pc, #164]	; (80015c4 <letter+0x1474>)
 800151e:	f003 f90c 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001528:	4826      	ldr	r0, [pc, #152]	; (80015c4 <letter+0x1474>)
 800152a:	f003 f906 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001534:	4823      	ldr	r0, [pc, #140]	; (80015c4 <letter+0x1474>)
 8001536:	f003 f900 	bl	800473a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	481e      	ldr	r0, [pc, #120]	; (80015bc <letter+0x146c>)
 8001542:	f003 f8fa 	bl	800473a <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b33      	cmp	r3, #51	; 0x33
 800154a:	d143      	bne.n	80015d4 <letter+0x1484>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	481a      	ldr	r0, [pc, #104]	; (80015bc <letter+0x146c>)
 8001554:	f003 f8f1 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <letter+0x1470>)
 8001560:	f003 f8eb 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	4815      	ldr	r0, [pc, #84]	; (80015c0 <letter+0x1470>)
 800156c:	f003 f8e5 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001570:	2200      	movs	r2, #0
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <letter+0x1470>)
 8001576:	f003 f8e0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <letter+0x1470>)
 8001580:	f003 f8db 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001584:	2201      	movs	r2, #1
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	480e      	ldr	r0, [pc, #56]	; (80015c4 <letter+0x1474>)
 800158a:	f003 f8d6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <letter+0x1474>)
 8001596:	f003 f8d0 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <letter+0x1474>)
 80015a2:	f003 f8ca 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <letter+0x1474>)
 80015ae:	f003 f8c4 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b8:	e006      	b.n	80015c8 <letter+0x1478>
 80015ba:	bf00      	nop
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40010800 	.word	0x40010800
 80015c8:	48c1      	ldr	r0, [pc, #772]	; (80018d0 <letter+0x1780>)
 80015ca:	f003 f8b6 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f002 fa30 	bl	8003a34 <HAL_Delay>
	}
	if(L == '4')
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b34      	cmp	r3, #52	; 0x34
 80015d8:	d13b      	bne.n	8001652 <letter+0x1502>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e0:	48bb      	ldr	r0, [pc, #748]	; (80018d0 <letter+0x1780>)
 80015e2:	f003 f8aa 	bl	800473a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	48b9      	ldr	r0, [pc, #740]	; (80018d4 <letter+0x1784>)
 80015ee:	f003 f8a4 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	48b6      	ldr	r0, [pc, #728]	; (80018d4 <letter+0x1784>)
 80015fa:	f003 f89e 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80015fe:	2201      	movs	r2, #1
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	48b4      	ldr	r0, [pc, #720]	; (80018d4 <letter+0x1784>)
 8001604:	f003 f899 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001608:	2200      	movs	r2, #0
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	48b1      	ldr	r0, [pc, #708]	; (80018d4 <letter+0x1784>)
 800160e:	f003 f894 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001612:	2201      	movs	r2, #1
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	48b0      	ldr	r0, [pc, #704]	; (80018d8 <letter+0x1788>)
 8001618:	f003 f88f 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	48ad      	ldr	r0, [pc, #692]	; (80018d8 <letter+0x1788>)
 8001624:	f003 f889 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	48aa      	ldr	r0, [pc, #680]	; (80018d8 <letter+0x1788>)
 8001630:	f003 f883 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163a:	48a7      	ldr	r0, [pc, #668]	; (80018d8 <letter+0x1788>)
 800163c:	f003 f87d 	bl	800473a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001646:	48a2      	ldr	r0, [pc, #648]	; (80018d0 <letter+0x1780>)
 8001648:	f003 f877 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800164c:	2002      	movs	r0, #2
 800164e:	f002 f9f1 	bl	8003a34 <HAL_Delay>
	}
	if(L == '5')
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b35      	cmp	r3, #53	; 0x35
 8001656:	d13b      	bne.n	80016d0 <letter+0x1580>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	489c      	ldr	r0, [pc, #624]	; (80018d0 <letter+0x1780>)
 8001660:	f003 f86b 	bl	800473a <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166a:	489a      	ldr	r0, [pc, #616]	; (80018d4 <letter+0x1784>)
 800166c:	f003 f865 	bl	800473a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	4897      	ldr	r0, [pc, #604]	; (80018d4 <letter+0x1784>)
 8001678:	f003 f85f 	bl	800473a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4894      	ldr	r0, [pc, #592]	; (80018d4 <letter+0x1784>)
 8001682:	f003 f85a 	bl	800473a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001686:	2200      	movs	r2, #0
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	4892      	ldr	r0, [pc, #584]	; (80018d4 <letter+0x1784>)
 800168c:	f003 f855 	bl	800473a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001690:	2201      	movs	r2, #1
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	4890      	ldr	r0, [pc, #576]	; (80018d8 <letter+0x1788>)
 8001696:	f003 f850 	bl	800473a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	488d      	ldr	r0, [pc, #564]	; (80018d8 <letter+0x1788>)
 80016a2:	f003 f84a 	bl	800473a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ac:	488a      	ldr	r0, [pc, #552]	; (80018d8 <letter+0x1788>)
 80016ae:	f003 f844 	bl	800473a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b8:	4887      	ldr	r0, [pc, #540]	; (80018d8 <letter+0x1788>)
 80016ba:	f003 f83e 	bl	800473a <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4882      	ldr	r0, [pc, #520]	; (80018d0 <letter+0x1780>)
 80016c6:	f003 f838 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f002 f9b2 	bl	8003a34 <HAL_Delay>
	}
	if(L == '6')
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b36      	cmp	r3, #54	; 0x36
 80016d4:	d13b      	bne.n	800174e <letter+0x15fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016dc:	487c      	ldr	r0, [pc, #496]	; (80018d0 <letter+0x1780>)
 80016de:	f003 f82c 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e8:	487a      	ldr	r0, [pc, #488]	; (80018d4 <letter+0x1784>)
 80016ea:	f003 f826 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4877      	ldr	r0, [pc, #476]	; (80018d4 <letter+0x1784>)
 80016f6:	f003 f820 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016fa:	2201      	movs	r2, #1
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4875      	ldr	r0, [pc, #468]	; (80018d4 <letter+0x1784>)
 8001700:	f003 f81b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4872      	ldr	r0, [pc, #456]	; (80018d4 <letter+0x1784>)
 800170a:	f003 f816 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800170e:	2201      	movs	r2, #1
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4871      	ldr	r0, [pc, #452]	; (80018d8 <letter+0x1788>)
 8001714:	f003 f811 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171e:	486e      	ldr	r0, [pc, #440]	; (80018d8 <letter+0x1788>)
 8001720:	f003 f80b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	486b      	ldr	r0, [pc, #428]	; (80018d8 <letter+0x1788>)
 800172c:	f003 f805 	bl	800473a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001736:	4868      	ldr	r0, [pc, #416]	; (80018d8 <letter+0x1788>)
 8001738:	f002 ffff 	bl	800473a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	4863      	ldr	r0, [pc, #396]	; (80018d0 <letter+0x1780>)
 8001744:	f002 fff9 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001748:	2002      	movs	r0, #2
 800174a:	f002 f973 	bl	8003a34 <HAL_Delay>
	}
	if(L == '7')
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b37      	cmp	r3, #55	; 0x37
 8001752:	d13b      	bne.n	80017cc <letter+0x167c>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	485d      	ldr	r0, [pc, #372]	; (80018d0 <letter+0x1780>)
 800175c:	f002 ffed 	bl	800473a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	485b      	ldr	r0, [pc, #364]	; (80018d4 <letter+0x1784>)
 8001768:	f002 ffe7 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001772:	4858      	ldr	r0, [pc, #352]	; (80018d4 <letter+0x1784>)
 8001774:	f002 ffe1 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001778:	2201      	movs	r2, #1
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	4855      	ldr	r0, [pc, #340]	; (80018d4 <letter+0x1784>)
 800177e:	f002 ffdc 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <letter+0x1784>)
 8001788:	f002 ffd7 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800178c:	2201      	movs	r2, #1
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4851      	ldr	r0, [pc, #324]	; (80018d8 <letter+0x1788>)
 8001792:	f002 ffd2 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	484e      	ldr	r0, [pc, #312]	; (80018d8 <letter+0x1788>)
 800179e:	f002 ffcc 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a8:	484b      	ldr	r0, [pc, #300]	; (80018d8 <letter+0x1788>)
 80017aa:	f002 ffc6 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	4848      	ldr	r0, [pc, #288]	; (80018d8 <letter+0x1788>)
 80017b6:	f002 ffc0 	bl	800473a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c0:	4843      	ldr	r0, [pc, #268]	; (80018d0 <letter+0x1780>)
 80017c2:	f002 ffba 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017c6:	2002      	movs	r0, #2
 80017c8:	f002 f934 	bl	8003a34 <HAL_Delay>
	}
	if(L == '8')
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b38      	cmp	r3, #56	; 0x38
 80017d0:	d13b      	bne.n	800184a <letter+0x16fa>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d8:	483d      	ldr	r0, [pc, #244]	; (80018d0 <letter+0x1780>)
 80017da:	f002 ffae 	bl	800473a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e4:	483b      	ldr	r0, [pc, #236]	; (80018d4 <letter+0x1784>)
 80017e6:	f002 ffa8 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4838      	ldr	r0, [pc, #224]	; (80018d4 <letter+0x1784>)
 80017f2:	f002 ffa2 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4836      	ldr	r0, [pc, #216]	; (80018d4 <letter+0x1784>)
 80017fc:	f002 ff9d 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001800:	2201      	movs	r2, #1
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	4833      	ldr	r0, [pc, #204]	; (80018d4 <letter+0x1784>)
 8001806:	f002 ff98 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800180a:	2201      	movs	r2, #1
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	4832      	ldr	r0, [pc, #200]	; (80018d8 <letter+0x1788>)
 8001810:	f002 ff93 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181a:	482f      	ldr	r0, [pc, #188]	; (80018d8 <letter+0x1788>)
 800181c:	f002 ff8d 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001826:	482c      	ldr	r0, [pc, #176]	; (80018d8 <letter+0x1788>)
 8001828:	f002 ff87 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001832:	4829      	ldr	r0, [pc, #164]	; (80018d8 <letter+0x1788>)
 8001834:	f002 ff81 	bl	800473a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <letter+0x1780>)
 8001840:	f002 ff7b 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001844:	2002      	movs	r0, #2
 8001846:	f002 f8f5 	bl	8003a34 <HAL_Delay>
	}
	if(L =='9')
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b39      	cmp	r3, #57	; 0x39
 800184e:	d13b      	bne.n	80018c8 <letter+0x1778>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	481e      	ldr	r0, [pc, #120]	; (80018d0 <letter+0x1780>)
 8001858:	f002 ff6f 	bl	800473a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <letter+0x1784>)
 8001864:	f002 ff69 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <letter+0x1784>)
 8001870:	f002 ff63 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001874:	2200      	movs	r2, #0
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <letter+0x1784>)
 800187a:	f002 ff5e 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800187e:	2201      	movs	r2, #1
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <letter+0x1784>)
 8001884:	f002 ff59 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001888:	2201      	movs	r2, #1
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <letter+0x1788>)
 800188e:	f002 ff54 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <letter+0x1788>)
 800189a:	f002 ff4e 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <letter+0x1788>)
 80018a6:	f002 ff48 	bl	800473a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <letter+0x1788>)
 80018b2:	f002 ff42 	bl	800473a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <letter+0x1780>)
 80018be:	f002 ff3c 	bl	800473a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f002 f8b6 	bl	8003a34 <HAL_Delay>
	}

}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010800 	.word	0x40010800

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e0:	f002 f876 	bl	80039d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e4:	f000 f8bc 	bl	8001a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e8:	f000 fa3e 	bl	8001d68 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018ec:	f000 f99c 	bl	8001c28 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80018f0:	f000 fa10 	bl	8001d14 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80018f4:	f000 f9e4 	bl	8001cc0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80018f8:	f000 f908 	bl	8001b0c <MX_ADC1_Init>
  MX_TIM1_Init();
 80018fc:	f000 f944 	bl	8001b88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001900:	f004 fbc8 	bl	8006094 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8001904:	4a35      	ldr	r2, [pc, #212]	; (80019dc <main+0x100>)
 8001906:	2102      	movs	r1, #2
 8001908:	2008      	movs	r0, #8
 800190a:	f004 fd01 	bl	8006310 <osMessageQueueNew>
 800190e:	4602      	mov	r2, r0
 8001910:	4b33      	ldr	r3, [pc, #204]	; (80019e0 <main+0x104>)
 8001912:	601a      	str	r2, [r3, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8001914:	4a33      	ldr	r2, [pc, #204]	; (80019e4 <main+0x108>)
 8001916:	2102      	movs	r1, #2
 8001918:	2008      	movs	r0, #8
 800191a:	f004 fcf9 	bl	8006310 <osMessageQueueNew>
 800191e:	4602      	mov	r2, r0
 8001920:	4b31      	ldr	r3, [pc, #196]	; (80019e8 <main+0x10c>)
 8001922:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <main+0x110>)
 8001926:	2102      	movs	r1, #2
 8001928:	2008      	movs	r0, #8
 800192a:	f004 fcf1 	bl	8006310 <osMessageQueueNew>
 800192e:	4602      	mov	r2, r0
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <main+0x114>)
 8001932:	601a      	str	r2, [r3, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8001934:	4a2f      	ldr	r2, [pc, #188]	; (80019f4 <main+0x118>)
 8001936:	2102      	movs	r1, #2
 8001938:	2008      	movs	r0, #8
 800193a:	f004 fce9 	bl	8006310 <osMessageQueueNew>
 800193e:	4602      	mov	r2, r0
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <main+0x11c>)
 8001942:	601a      	str	r2, [r3, #0]

  /* creation of WebsiteQueue */
  WebsiteQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WebsiteQueue_attributes);
 8001944:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <main+0x120>)
 8001946:	2102      	movs	r1, #2
 8001948:	2008      	movs	r0, #8
 800194a:	f004 fce1 	bl	8006310 <osMessageQueueNew>
 800194e:	4602      	mov	r2, r0
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <main+0x124>)
 8001952:	601a      	str	r2, [r3, #0]

  /* creation of Flow2Queue */
  Flow2QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Flow2Queue_attributes);
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <main+0x128>)
 8001956:	2102      	movs	r1, #2
 8001958:	2010      	movs	r0, #16
 800195a:	f004 fcd9 	bl	8006310 <osMessageQueueNew>
 800195e:	4602      	mov	r2, r0
 8001960:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <main+0x12c>)
 8001962:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 8001964:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <main+0x130>)
 8001966:	2100      	movs	r1, #0
 8001968:	4829      	ldr	r0, [pc, #164]	; (8001a10 <main+0x134>)
 800196a:	f004 fbf9 	bl	8006160 <osThreadNew>
 800196e:	4602      	mov	r2, r0
 8001970:	4b28      	ldr	r3, [pc, #160]	; (8001a14 <main+0x138>)
 8001972:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 8001974:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <main+0x13c>)
 8001976:	2100      	movs	r1, #0
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <main+0x140>)
 800197a:	f004 fbf1 	bl	8006160 <osThreadNew>
 800197e:	4602      	mov	r2, r0
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <main+0x144>)
 8001982:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 8001984:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <main+0x148>)
 8001986:	2100      	movs	r1, #0
 8001988:	4827      	ldr	r0, [pc, #156]	; (8001a28 <main+0x14c>)
 800198a:	f004 fbe9 	bl	8006160 <osThreadNew>
 800198e:	4602      	mov	r2, r0
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <main+0x150>)
 8001992:	601a      	str	r2, [r3, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <main+0x154>)
 8001996:	2100      	movs	r1, #0
 8001998:	4826      	ldr	r0, [pc, #152]	; (8001a34 <main+0x158>)
 800199a:	f004 fbe1 	bl	8006160 <osThreadNew>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <main+0x15c>)
 80019a2:	601a      	str	r2, [r3, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <main+0x160>)
 80019a6:	2100      	movs	r1, #0
 80019a8:	4825      	ldr	r0, [pc, #148]	; (8001a40 <main+0x164>)
 80019aa:	f004 fbd9 	bl	8006160 <osThreadNew>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <main+0x168>)
 80019b2:	601a      	str	r2, [r3, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <main+0x16c>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4824      	ldr	r0, [pc, #144]	; (8001a4c <main+0x170>)
 80019ba:	f004 fbd1 	bl	8006160 <osThreadNew>
 80019be:	4602      	mov	r2, r0
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <main+0x174>)
 80019c2:	601a      	str	r2, [r3, #0]

  /* creation of WebsiteTask */
  WebsiteTaskHandle = osThreadNew(StartWebsiteTask, NULL, &WebsiteTask_attributes);
 80019c4:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <main+0x178>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4823      	ldr	r0, [pc, #140]	; (8001a58 <main+0x17c>)
 80019ca:	f004 fbc9 	bl	8006160 <osThreadNew>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <main+0x180>)
 80019d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019d4:	f004 fb90 	bl	80060f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 80019d8:	e7fe      	b.n	80019d8 <main+0xfc>
 80019da:	bf00      	nop
 80019dc:	080090a0 	.word	0x080090a0
 80019e0:	2000255c 	.word	0x2000255c
 80019e4:	080090b8 	.word	0x080090b8
 80019e8:	20002838 	.word	0x20002838
 80019ec:	080090d0 	.word	0x080090d0
 80019f0:	20002558 	.word	0x20002558
 80019f4:	080090e8 	.word	0x080090e8
 80019f8:	20002564 	.word	0x20002564
 80019fc:	08009100 	.word	0x08009100
 8001a00:	200027e4 	.word	0x200027e4
 8001a04:	08009118 	.word	0x08009118
 8001a08:	200027ac 	.word	0x200027ac
 8001a0c:	08008fa4 	.word	0x08008fa4
 8001a10:	080029fd 	.word	0x080029fd
 8001a14:	20002560 	.word	0x20002560
 8001a18:	08008fc8 	.word	0x08008fc8
 8001a1c:	08002a25 	.word	0x08002a25
 8001a20:	200027e8 	.word	0x200027e8
 8001a24:	08008fec 	.word	0x08008fec
 8001a28:	08002d69 	.word	0x08002d69
 8001a2c:	20002888 	.word	0x20002888
 8001a30:	08009010 	.word	0x08009010
 8001a34:	08002d79 	.word	0x08002d79
 8001a38:	200027e0 	.word	0x200027e0
 8001a3c:	08009034 	.word	0x08009034
 8001a40:	08002f45 	.word	0x08002f45
 8001a44:	20002834 	.word	0x20002834
 8001a48:	08009058 	.word	0x08009058
 8001a4c:	0800341d 	.word	0x0800341d
 8001a50:	20002884 	.word	0x20002884
 8001a54:	0800907c 	.word	0x0800907c
 8001a58:	08003495 	.word	0x08003495
 8001a5c:	200027a8 	.word	0x200027a8

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	; 0x50
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6a:	2228      	movs	r2, #40	; 0x28
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 f9fb 	bl	8008e6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a94:	2301      	movs	r3, #1
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fe7f 	bl	80047b0 <HAL_RCC_OscConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001ab8:	f001 fd3a 	bl	8003530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abc:	230f      	movs	r3, #15
 8001abe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001acc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 f8e9 	bl	8004cb0 <HAL_RCC_ClockConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ae4:	f001 fd24 	bl	8003530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 faa8 	bl	8005048 <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001afe:	f001 fd17 	bl	8003530 <Error_Handler>
  }
}
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	; 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b1e:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <MX_ADC1_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b4a:	f001 ff95 	bl	8003a78 <HAL_ADC_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f001 fcec 	bl	8003530 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001b58:	230f      	movs	r3, #15
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b6a:	f002 fa11 	bl	8003f90 <HAL_ADC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001b74:	f001 fcdc 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200027b0 	.word	0x200027b0
 8001b84:	40012400 	.word	0x40012400

08001b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <MX_TIM1_Init+0x9c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd0:	4813      	ldr	r0, [pc, #76]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bd2:	f003 fbab 	bl	800532c <HAL_TIM_Base_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bdc:	f001 fca8 	bl	8003530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bee:	f003 fdb7 	bl	8005760 <HAL_TIM_ConfigClockSource>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bf8:	f001 fc9a 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001c0a:	f003 ff7d 	bl	8005b08 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c14:	f001 fc8c 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200027ec 	.word	0x200027ec
 8001c24:	40012c00 	.word	0x40012c00

08001c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c6e:	f003 fb5d 	bl	800532c <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c78:	f001 fc5a 	bl	8003530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c8a:	f003 fd69 	bl	8005760 <HAL_TIM_ConfigClockSource>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c94:	f001 fc4c 	bl	8003530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001ca6:	f003 ff2f 	bl	8005b08 <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cb0:	f001 fc3e 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000283c 	.word	0x2000283c

08001cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <MX_USART1_UART_Init+0x50>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cf8:	f003 ff76 	bl	8005be8 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d02:	f001 fc15 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200024e4 	.word	0x200024e4
 8001d10:	40013800 	.word	0x40013800

08001d14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_USART3_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d4c:	f003 ff4c 	bl	8005be8 <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f001 fbeb 	bl	8003530 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200024a4 	.word	0x200024a4
 8001d64:	40004800 	.word	0x40004800

08001d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7c:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a64      	ldr	r2, [pc, #400]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d94:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a5e      	ldr	r2, [pc, #376]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 8001de2:	484d      	ldr	r0, [pc, #308]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001de4:	f002 fca9 	bl	800473a <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001de8:	2200      	movs	r2, #0
 8001dea:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8001dee:	484b      	ldr	r0, [pc, #300]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001df0:	f002 fca3 	bl	800473a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001dfa:	4849      	ldr	r0, [pc, #292]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001dfc:	f002 fc9d 	bl	800473a <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2104      	movs	r1, #4
 8001e04:	4847      	ldr	r0, [pc, #284]	; (8001f24 <MX_GPIO_Init+0x1bc>)
 8001e06:	f002 fc98 	bl	800473a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <MX_GPIO_Init+0x1c0>)
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4840      	ldr	r0, [pc, #256]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001e20:	f002 fb1a 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e24:	2307      	movs	r3, #7
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4619      	mov	r1, r3
 8001e36:	483a      	ldr	r0, [pc, #232]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001e38:	f002 fb0e 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4832      	ldr	r0, [pc, #200]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001e50:	f002 fb02 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001e54:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8001e58:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482a      	ldr	r0, [pc, #168]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001e6e:	f002 faf3 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e72:	2307      	movs	r3, #7
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4825      	ldr	r0, [pc, #148]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001e86:	f002 fae7 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001e8a:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8001e8e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481e      	ldr	r0, [pc, #120]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001ea4:	f002 fad8 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ea8:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001eac:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4817      	ldr	r0, [pc, #92]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001ec2:	f002 fac9 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	4811      	ldr	r0, [pc, #68]	; (8001f24 <MX_GPIO_Init+0x1bc>)
 8001ede:	f002 fabb 	bl	8004458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001ef6:	f002 faaf 	bl	8004458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2105      	movs	r1, #5
 8001efe:	2028      	movs	r0, #40	; 0x28
 8001f00:	f002 fa7f 	bl	8004402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f04:	2028      	movs	r0, #40	; 0x28
 8001f06:	f002 fa98 	bl	800443a <HAL_NVIC_EnableIRQ>

}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010800 	.word	0x40010800
 8001f1c:	40010c00 	.word	0x40010c00
 8001f20:	40011000 	.word	0x40011000
 8001f24:	40011400 	.word	0x40011400
 8001f28:	10110000 	.word	0x10110000

08001f2c <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8001f30:	2014      	movs	r0, #20
 8001f32:	f001 fd7f 	bl	8003a34 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3c:	4867      	ldr	r0, [pc, #412]	; (80020dc <commandToLCD+0x1b0>)
 8001f3e:	f002 fbfc 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f48:	4864      	ldr	r0, [pc, #400]	; (80020dc <commandToLCD+0x1b0>)
 8001f4a:	f002 fbf6 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f54:	4861      	ldr	r0, [pc, #388]	; (80020dc <commandToLCD+0x1b0>)
 8001f56:	f002 fbf0 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f60:	485f      	ldr	r0, [pc, #380]	; (80020e0 <commandToLCD+0x1b4>)
 8001f62:	f002 fbea 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6c:	485c      	ldr	r0, [pc, #368]	; (80020e0 <commandToLCD+0x1b4>)
 8001f6e:	f002 fbe4 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8001f72:	2200      	movs	r2, #0
 8001f74:	2140      	movs	r1, #64	; 0x40
 8001f76:	485a      	ldr	r0, [pc, #360]	; (80020e0 <commandToLCD+0x1b4>)
 8001f78:	f002 fbdf 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	4857      	ldr	r0, [pc, #348]	; (80020e0 <commandToLCD+0x1b4>)
 8001f82:	f002 fbda 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8001f86:	2201      	movs	r2, #1
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	4856      	ldr	r0, [pc, #344]	; (80020e4 <commandToLCD+0x1b8>)
 8001f8c:	f002 fbd5 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f96:	4853      	ldr	r0, [pc, #332]	; (80020e4 <commandToLCD+0x1b8>)
 8001f98:	f002 fbcf 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa2:	4850      	ldr	r0, [pc, #320]	; (80020e4 <commandToLCD+0x1b8>)
 8001fa4:	f002 fbc9 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fae:	484d      	ldr	r0, [pc, #308]	; (80020e4 <commandToLCD+0x1b8>)
 8001fb0:	f002 fbc3 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fba:	4848      	ldr	r0, [pc, #288]	; (80020dc <commandToLCD+0x1b0>)
 8001fbc:	f002 fbbd 	bl	800473a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f001 fd37 	bl	8003a34 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fcc:	4843      	ldr	r0, [pc, #268]	; (80020dc <commandToLCD+0x1b0>)
 8001fce:	f002 fbb4 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd8:	4841      	ldr	r0, [pc, #260]	; (80020e0 <commandToLCD+0x1b4>)
 8001fda:	f002 fbae 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe4:	483e      	ldr	r0, [pc, #248]	; (80020e0 <commandToLCD+0x1b4>)
 8001fe6:	f002 fba8 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8001fea:	2201      	movs	r2, #1
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	483c      	ldr	r0, [pc, #240]	; (80020e0 <commandToLCD+0x1b4>)
 8001ff0:	f002 fba3 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	4839      	ldr	r0, [pc, #228]	; (80020e0 <commandToLCD+0x1b4>)
 8001ffa:	f002 fb9e 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001ffe:	2200      	movs	r2, #0
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	4838      	ldr	r0, [pc, #224]	; (80020e4 <commandToLCD+0x1b8>)
 8002004:	f002 fb99 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200e:	4835      	ldr	r0, [pc, #212]	; (80020e4 <commandToLCD+0x1b8>)
 8002010:	f002 fb93 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201a:	4832      	ldr	r0, [pc, #200]	; (80020e4 <commandToLCD+0x1b8>)
 800201c:	f002 fb8d 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002026:	482f      	ldr	r0, [pc, #188]	; (80020e4 <commandToLCD+0x1b8>)
 8002028:	f002 fb87 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002032:	482a      	ldr	r0, [pc, #168]	; (80020dc <commandToLCD+0x1b0>)
 8002034:	f002 fb81 	bl	800473a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002038:	2005      	movs	r0, #5
 800203a:	f001 fcfb 	bl	8003a34 <HAL_Delay>


	clear();
 800203e:	f000 f925 	bl	800228c <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002048:	4824      	ldr	r0, [pc, #144]	; (80020dc <commandToLCD+0x1b0>)
 800204a:	f002 fb76 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002054:	4822      	ldr	r0, [pc, #136]	; (80020e0 <commandToLCD+0x1b4>)
 8002056:	f002 fb70 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002060:	481f      	ldr	r0, [pc, #124]	; (80020e0 <commandToLCD+0x1b4>)
 8002062:	f002 fb6a 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8002066:	2201      	movs	r2, #1
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	481d      	ldr	r0, [pc, #116]	; (80020e0 <commandToLCD+0x1b4>)
 800206c:	f002 fb65 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002070:	2200      	movs	r2, #0
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	481a      	ldr	r0, [pc, #104]	; (80020e0 <commandToLCD+0x1b4>)
 8002076:	f002 fb60 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800207a:	2200      	movs	r2, #0
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	4819      	ldr	r0, [pc, #100]	; (80020e4 <commandToLCD+0x1b8>)
 8002080:	f002 fb5b 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208a:	4816      	ldr	r0, [pc, #88]	; (80020e4 <commandToLCD+0x1b8>)
 800208c:	f002 fb55 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002096:	4813      	ldr	r0, [pc, #76]	; (80020e4 <commandToLCD+0x1b8>)
 8002098:	f002 fb4f 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a2:	4810      	ldr	r0, [pc, #64]	; (80020e4 <commandToLCD+0x1b8>)
 80020a4:	f002 fb49 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ae:	480b      	ldr	r0, [pc, #44]	; (80020dc <commandToLCD+0x1b0>)
 80020b0:	f002 fb43 	bl	800473a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80020b4:	2005      	movs	r0, #5
 80020b6:	f001 fcbd 	bl	8003a34 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c0:	4806      	ldr	r0, [pc, #24]	; (80020dc <commandToLCD+0x1b0>)
 80020c2:	f002 fb3a 	bl	800473a <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 80020c6:	bf00      	nop
 80020c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020cc:	4805      	ldr	r0, [pc, #20]	; (80020e4 <commandToLCD+0x1b8>)
 80020ce:	f002 fb1d 	bl	800470c <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d0f7      	beq.n	80020c8 <commandToLCD+0x19c>
	{}
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40010c00 	.word	0x40010c00
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40010800 	.word	0x40010800

080020e8 <printPassword>:
void printPassword(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f2:	4813      	ldr	r0, [pc, #76]	; (8002140 <printPassword+0x58>)
 80020f4:	f002 fb21 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020fe:	4810      	ldr	r0, [pc, #64]	; (8002140 <printPassword+0x58>)
 8002100:	f002 fb1b 	bl	800473a <HAL_GPIO_WritePin>
	letter('P');
 8002104:	2050      	movs	r0, #80	; 0x50
 8002106:	f7fe f823 	bl	8000150 <letter>
	letter('a');
 800210a:	2061      	movs	r0, #97	; 0x61
 800210c:	f7fe f820 	bl	8000150 <letter>
	letter('s');
 8002110:	2073      	movs	r0, #115	; 0x73
 8002112:	f7fe f81d 	bl	8000150 <letter>
	letter('s');
 8002116:	2073      	movs	r0, #115	; 0x73
 8002118:	f7fe f81a 	bl	8000150 <letter>
	letter('w');
 800211c:	2077      	movs	r0, #119	; 0x77
 800211e:	f7fe f817 	bl	8000150 <letter>
	letter('o');
 8002122:	206f      	movs	r0, #111	; 0x6f
 8002124:	f7fe f814 	bl	8000150 <letter>
	letter('r');
 8002128:	2072      	movs	r0, #114	; 0x72
 800212a:	f7fe f811 	bl	8000150 <letter>
	letter('d');
 800212e:	2064      	movs	r0, #100	; 0x64
 8002130:	f7fe f80e 	bl	8000150 <letter>
	letter(':');
 8002134:	203a      	movs	r0, #58	; 0x3a
 8002136:	f7fe f80b 	bl	8000150 <letter>
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40010c00 	.word	0x40010c00

08002144 <line1>:
void line1(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800214e:	4823      	ldr	r0, [pc, #140]	; (80021dc <line1+0x98>)
 8002150:	f002 faf3 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002154:	2200      	movs	r2, #0
 8002156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215a:	4820      	ldr	r0, [pc, #128]	; (80021dc <line1+0x98>)
 800215c:	f002 faed 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002160:	2201      	movs	r2, #1
 8002162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002166:	481d      	ldr	r0, [pc, #116]	; (80021dc <line1+0x98>)
 8002168:	f002 fae7 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 800216c:	2200      	movs	r2, #0
 800216e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002172:	481b      	ldr	r0, [pc, #108]	; (80021e0 <line1+0x9c>)
 8002174:	f002 fae1 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217e:	4818      	ldr	r0, [pc, #96]	; (80021e0 <line1+0x9c>)
 8002180:	f002 fadb 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002184:	2200      	movs	r2, #0
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	4815      	ldr	r0, [pc, #84]	; (80021e0 <line1+0x9c>)
 800218a:	f002 fad6 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800218e:	2200      	movs	r2, #0
 8002190:	2180      	movs	r1, #128	; 0x80
 8002192:	4813      	ldr	r0, [pc, #76]	; (80021e0 <line1+0x9c>)
 8002194:	f002 fad1 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002198:	2200      	movs	r2, #0
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	4811      	ldr	r0, [pc, #68]	; (80021e4 <line1+0xa0>)
 800219e:	f002 facc 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a8:	480e      	ldr	r0, [pc, #56]	; (80021e4 <line1+0xa0>)
 80021aa:	f002 fac6 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80021ae:	2200      	movs	r2, #0
 80021b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b4:	480b      	ldr	r0, [pc, #44]	; (80021e4 <line1+0xa0>)
 80021b6:	f002 fac0 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 80021ba:	2201      	movs	r2, #1
 80021bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c0:	4808      	ldr	r0, [pc, #32]	; (80021e4 <line1+0xa0>)
 80021c2:	f002 faba 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 80021c6:	2200      	movs	r2, #0
 80021c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <line1+0x98>)
 80021ce:	f002 fab4 	bl	800473a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80021d2:	2005      	movs	r0, #5
 80021d4:	f001 fc2e 	bl	8003a34 <HAL_Delay>
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010c00 	.word	0x40010c00
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40010800 	.word	0x40010800

080021e8 <line2>:
void line2(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 80021ec:	2200      	movs	r2, #0
 80021ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f2:	4823      	ldr	r0, [pc, #140]	; (8002280 <line2+0x98>)
 80021f4:	f002 faa1 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80021f8:	2200      	movs	r2, #0
 80021fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021fe:	4820      	ldr	r0, [pc, #128]	; (8002280 <line2+0x98>)
 8002200:	f002 fa9b 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002204:	2201      	movs	r2, #1
 8002206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220a:	481d      	ldr	r0, [pc, #116]	; (8002280 <line2+0x98>)
 800220c:	f002 fa95 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 8002210:	2200      	movs	r2, #0
 8002212:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002216:	481b      	ldr	r0, [pc, #108]	; (8002284 <line2+0x9c>)
 8002218:	f002 fa8f 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002222:	4818      	ldr	r0, [pc, #96]	; (8002284 <line2+0x9c>)
 8002224:	f002 fa89 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002228:	2200      	movs	r2, #0
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	4815      	ldr	r0, [pc, #84]	; (8002284 <line2+0x9c>)
 800222e:	f002 fa84 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002232:	2200      	movs	r2, #0
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	4813      	ldr	r0, [pc, #76]	; (8002284 <line2+0x9c>)
 8002238:	f002 fa7f 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800223c:	2200      	movs	r2, #0
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	4811      	ldr	r0, [pc, #68]	; (8002288 <line2+0xa0>)
 8002242:	f002 fa7a 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800224c:	480e      	ldr	r0, [pc, #56]	; (8002288 <line2+0xa0>)
 800224e:	f002 fa74 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002258:	480b      	ldr	r0, [pc, #44]	; (8002288 <line2+0xa0>)
 800225a:	f002 fa6e 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4808      	ldr	r0, [pc, #32]	; (8002288 <line2+0xa0>)
 8002266:	f002 fa68 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800226a:	2200      	movs	r2, #0
 800226c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <line2+0x98>)
 8002272:	f002 fa62 	bl	800473a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002276:	2005      	movs	r0, #5
 8002278:	f001 fbdc 	bl	8003a34 <HAL_Delay>
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40010c00 	.word	0x40010c00
 8002284:	40011000 	.word	0x40011000
 8002288:	40010800 	.word	0x40010800

0800228c <clear>:
void clear()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002296:	4823      	ldr	r0, [pc, #140]	; (8002324 <clear+0x98>)
 8002298:	f002 fa4f 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800229c:	2200      	movs	r2, #0
 800229e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a2:	4820      	ldr	r0, [pc, #128]	; (8002324 <clear+0x98>)
 80022a4:	f002 fa49 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80022a8:	2201      	movs	r2, #1
 80022aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ae:	481d      	ldr	r0, [pc, #116]	; (8002324 <clear+0x98>)
 80022b0:	f002 fa43 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ba:	481b      	ldr	r0, [pc, #108]	; (8002328 <clear+0x9c>)
 80022bc:	f002 fa3d 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c6:	4818      	ldr	r0, [pc, #96]	; (8002328 <clear+0x9c>)
 80022c8:	f002 fa37 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80022cc:	2200      	movs	r2, #0
 80022ce:	2140      	movs	r1, #64	; 0x40
 80022d0:	4815      	ldr	r0, [pc, #84]	; (8002328 <clear+0x9c>)
 80022d2:	f002 fa32 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	4813      	ldr	r0, [pc, #76]	; (8002328 <clear+0x9c>)
 80022dc:	f002 fa2d 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80022e0:	2200      	movs	r2, #0
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	4811      	ldr	r0, [pc, #68]	; (800232c <clear+0xa0>)
 80022e6:	f002 fa28 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f0:	480e      	ldr	r0, [pc, #56]	; (800232c <clear+0xa0>)
 80022f2:	f002 fa22 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fc:	480b      	ldr	r0, [pc, #44]	; (800232c <clear+0xa0>)
 80022fe:	f002 fa1c 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002308:	4808      	ldr	r0, [pc, #32]	; (800232c <clear+0xa0>)
 800230a:	f002 fa16 	bl	800473a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002314:	4803      	ldr	r0, [pc, #12]	; (8002324 <clear+0x98>)
 8002316:	f002 fa10 	bl	800473a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800231a:	2005      	movs	r0, #5
 800231c:	f001 fb8a 	bl	8003a34 <HAL_Delay>
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40010c00 	.word	0x40010c00
 8002328:	40011000 	.word	0x40011000
 800232c:	40010800 	.word	0x40010800

08002330 <correct>:
void correct()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233a:	4811      	ldr	r0, [pc, #68]	; (8002380 <correct+0x50>)
 800233c:	f002 f9fd 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002346:	480e      	ldr	r0, [pc, #56]	; (8002380 <correct+0x50>)
 8002348:	f002 f9f7 	bl	800473a <HAL_GPIO_WritePin>
	letter('C');
 800234c:	2043      	movs	r0, #67	; 0x43
 800234e:	f7fd feff 	bl	8000150 <letter>
	letter('o');
 8002352:	206f      	movs	r0, #111	; 0x6f
 8002354:	f7fd fefc 	bl	8000150 <letter>
	letter('r');
 8002358:	2072      	movs	r0, #114	; 0x72
 800235a:	f7fd fef9 	bl	8000150 <letter>
	letter('r');
 800235e:	2072      	movs	r0, #114	; 0x72
 8002360:	f7fd fef6 	bl	8000150 <letter>
	letter('e');
 8002364:	2065      	movs	r0, #101	; 0x65
 8002366:	f7fd fef3 	bl	8000150 <letter>
	letter('c');
 800236a:	2063      	movs	r0, #99	; 0x63
 800236c:	f7fd fef0 	bl	8000150 <letter>
	letter('t');
 8002370:	2074      	movs	r0, #116	; 0x74
 8002372:	f7fd feed 	bl	8000150 <letter>
	letter('!');
 8002376:	2021      	movs	r0, #33	; 0x21
 8002378:	f7fd feea 	bl	8000150 <letter>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40010c00 	.word	0x40010c00

08002384 <getVal>:
int getVal(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
	int count = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
	int val=0;
 800238e:	2300      	movs	r3, #0
 8002390:	603b      	str	r3, [r7, #0]
	while(count<1)
 8002392:	e165      	b.n	8002660 <getVal+0x2dc>
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 8002394:	2201      	movs	r2, #1
 8002396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239a:	48b6      	ldr	r0, [pc, #728]	; (8002674 <getVal+0x2f0>)
 800239c:	f002 f9cd 	bl	800473a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80023a0:	2104      	movs	r1, #4
 80023a2:	48b5      	ldr	r0, [pc, #724]	; (8002678 <getVal+0x2f4>)
 80023a4:	f002 f9b2 	bl	800470c <HAL_GPIO_ReadPin>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d112      	bne.n	80023d4 <getVal+0x50>
	  {
		  letter('1');
 80023ae:	2031      	movs	r0, #49	; 0x31
 80023b0:	f7fd fece 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80023b4:	bf00      	nop
 80023b6:	2104      	movs	r1, #4
 80023b8:	48af      	ldr	r0, [pc, #700]	; (8002678 <getVal+0x2f4>)
 80023ba:	f002 f9a7 	bl	800470c <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d0f8      	beq.n	80023b6 <getVal+0x32>
		  {}
		  HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	f001 fb35 	bl	8003a34 <HAL_Delay>
		  val = 1;
 80023ca:	2301      	movs	r3, #1
 80023cc:	603b      	str	r3, [r7, #0]
		  count++;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3301      	adds	r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80023d4:	2102      	movs	r1, #2
 80023d6:	48a8      	ldr	r0, [pc, #672]	; (8002678 <getVal+0x2f4>)
 80023d8:	f002 f998 	bl	800470c <HAL_GPIO_ReadPin>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d112      	bne.n	8002408 <getVal+0x84>
	  {
		  letter('2');
 80023e2:	2032      	movs	r0, #50	; 0x32
 80023e4:	f7fd feb4 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80023e8:	bf00      	nop
 80023ea:	2102      	movs	r1, #2
 80023ec:	48a2      	ldr	r0, [pc, #648]	; (8002678 <getVal+0x2f4>)
 80023ee:	f002 f98d 	bl	800470c <HAL_GPIO_ReadPin>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d0f8      	beq.n	80023ea <getVal+0x66>
		  {}
		  HAL_Delay(100);
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	f001 fb1b 	bl	8003a34 <HAL_Delay>
		  val = 2;
 80023fe:	2302      	movs	r3, #2
 8002400:	603b      	str	r3, [r7, #0]
		  count++;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3301      	adds	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002408:	2101      	movs	r1, #1
 800240a:	489b      	ldr	r0, [pc, #620]	; (8002678 <getVal+0x2f4>)
 800240c:	f002 f97e 	bl	800470c <HAL_GPIO_ReadPin>
 8002410:	4603      	mov	r3, r0
 8002412:	2b01      	cmp	r3, #1
 8002414:	d112      	bne.n	800243c <getVal+0xb8>
	  {
		  letter('3');
 8002416:	2033      	movs	r0, #51	; 0x33
 8002418:	f7fd fe9a 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 800241c:	bf00      	nop
 800241e:	2101      	movs	r1, #1
 8002420:	4895      	ldr	r0, [pc, #596]	; (8002678 <getVal+0x2f4>)
 8002422:	f002 f973 	bl	800470c <HAL_GPIO_ReadPin>
 8002426:	4603      	mov	r3, r0
 8002428:	2b01      	cmp	r3, #1
 800242a:	d0f8      	beq.n	800241e <getVal+0x9a>
		  {}
		  HAL_Delay(100);
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	f001 fb01 	bl	8003a34 <HAL_Delay>
		  val = 3;
 8002432:	2303      	movs	r3, #3
 8002434:	603b      	str	r3, [r7, #0]
		  count++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3301      	adds	r3, #1
 800243a:	607b      	str	r3, [r7, #4]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002442:	488c      	ldr	r0, [pc, #560]	; (8002674 <getVal+0x2f0>)
 8002444:	f002 f979 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 8002448:	2201      	movs	r2, #1
 800244a:	2104      	movs	r1, #4
 800244c:	488b      	ldr	r0, [pc, #556]	; (800267c <getVal+0x2f8>)
 800244e:	f002 f974 	bl	800473a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002452:	2104      	movs	r1, #4
 8002454:	4888      	ldr	r0, [pc, #544]	; (8002678 <getVal+0x2f4>)
 8002456:	f002 f959 	bl	800470c <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d112      	bne.n	8002486 <getVal+0x102>
	  {
		  letter('4');
 8002460:	2034      	movs	r0, #52	; 0x34
 8002462:	f7fd fe75 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002466:	bf00      	nop
 8002468:	2104      	movs	r1, #4
 800246a:	4883      	ldr	r0, [pc, #524]	; (8002678 <getVal+0x2f4>)
 800246c:	f002 f94e 	bl	800470c <HAL_GPIO_ReadPin>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d0f8      	beq.n	8002468 <getVal+0xe4>
		  {}
		  HAL_Delay(100);
 8002476:	2064      	movs	r0, #100	; 0x64
 8002478:	f001 fadc 	bl	8003a34 <HAL_Delay>
		  val = 4;
 800247c:	2304      	movs	r3, #4
 800247e:	603b      	str	r3, [r7, #0]
		  count++;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3301      	adds	r3, #1
 8002484:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002486:	2102      	movs	r1, #2
 8002488:	487b      	ldr	r0, [pc, #492]	; (8002678 <getVal+0x2f4>)
 800248a:	f002 f93f 	bl	800470c <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d112      	bne.n	80024ba <getVal+0x136>
	  {
		  letter('5');
 8002494:	2035      	movs	r0, #53	; 0x35
 8002496:	f7fd fe5b 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800249a:	bf00      	nop
 800249c:	2102      	movs	r1, #2
 800249e:	4876      	ldr	r0, [pc, #472]	; (8002678 <getVal+0x2f4>)
 80024a0:	f002 f934 	bl	800470c <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d0f8      	beq.n	800249c <getVal+0x118>
		  {}
		  HAL_Delay(100);
 80024aa:	2064      	movs	r0, #100	; 0x64
 80024ac:	f001 fac2 	bl	8003a34 <HAL_Delay>
		  val = 5;
 80024b0:	2305      	movs	r3, #5
 80024b2:	603b      	str	r3, [r7, #0]
		  count++;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3301      	adds	r3, #1
 80024b8:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80024ba:	2101      	movs	r1, #1
 80024bc:	486e      	ldr	r0, [pc, #440]	; (8002678 <getVal+0x2f4>)
 80024be:	f002 f925 	bl	800470c <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d112      	bne.n	80024ee <getVal+0x16a>
	  {
		  letter('6');
 80024c8:	2036      	movs	r0, #54	; 0x36
 80024ca:	f7fd fe41 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80024ce:	bf00      	nop
 80024d0:	2101      	movs	r1, #1
 80024d2:	4869      	ldr	r0, [pc, #420]	; (8002678 <getVal+0x2f4>)
 80024d4:	f002 f91a 	bl	800470c <HAL_GPIO_ReadPin>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d0f8      	beq.n	80024d0 <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 80024de:	2064      	movs	r0, #100	; 0x64
 80024e0:	f001 faa8 	bl	8003a34 <HAL_Delay>
		  val = 6;
 80024e4:	2306      	movs	r3, #6
 80024e6:	603b      	str	r3, [r7, #0]
		  count++;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3301      	adds	r3, #1
 80024ec:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 80024ee:	2200      	movs	r2, #0
 80024f0:	2104      	movs	r1, #4
 80024f2:	4862      	ldr	r0, [pc, #392]	; (800267c <getVal+0x2f8>)
 80024f4:	f002 f921 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024fe:	485d      	ldr	r0, [pc, #372]	; (8002674 <getVal+0x2f0>)
 8002500:	f002 f91b 	bl	800473a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002504:	2104      	movs	r1, #4
 8002506:	485c      	ldr	r0, [pc, #368]	; (8002678 <getVal+0x2f4>)
 8002508:	f002 f900 	bl	800470c <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d112      	bne.n	8002538 <getVal+0x1b4>
	  {
		  letter('7');
 8002512:	2037      	movs	r0, #55	; 0x37
 8002514:	f7fd fe1c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002518:	bf00      	nop
 800251a:	2104      	movs	r1, #4
 800251c:	4856      	ldr	r0, [pc, #344]	; (8002678 <getVal+0x2f4>)
 800251e:	f002 f8f5 	bl	800470c <HAL_GPIO_ReadPin>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d0f8      	beq.n	800251a <getVal+0x196>
		  {}
		  HAL_Delay(100);
 8002528:	2064      	movs	r0, #100	; 0x64
 800252a:	f001 fa83 	bl	8003a34 <HAL_Delay>
		  val = 7;
 800252e:	2307      	movs	r3, #7
 8002530:	603b      	str	r3, [r7, #0]
		  count++;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3301      	adds	r3, #1
 8002536:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002538:	2102      	movs	r1, #2
 800253a:	484f      	ldr	r0, [pc, #316]	; (8002678 <getVal+0x2f4>)
 800253c:	f002 f8e6 	bl	800470c <HAL_GPIO_ReadPin>
 8002540:	4603      	mov	r3, r0
 8002542:	2b01      	cmp	r3, #1
 8002544:	d112      	bne.n	800256c <getVal+0x1e8>
	  {
		  letter('8');
 8002546:	2038      	movs	r0, #56	; 0x38
 8002548:	f7fd fe02 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800254c:	bf00      	nop
 800254e:	2102      	movs	r1, #2
 8002550:	4849      	ldr	r0, [pc, #292]	; (8002678 <getVal+0x2f4>)
 8002552:	f002 f8db 	bl	800470c <HAL_GPIO_ReadPin>
 8002556:	4603      	mov	r3, r0
 8002558:	2b01      	cmp	r3, #1
 800255a:	d0f8      	beq.n	800254e <getVal+0x1ca>
		  {}
		  HAL_Delay(100);
 800255c:	2064      	movs	r0, #100	; 0x64
 800255e:	f001 fa69 	bl	8003a34 <HAL_Delay>
		  val = 8;
 8002562:	2308      	movs	r3, #8
 8002564:	603b      	str	r3, [r7, #0]
		  count++;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3301      	adds	r3, #1
 800256a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800256c:	2101      	movs	r1, #1
 800256e:	4842      	ldr	r0, [pc, #264]	; (8002678 <getVal+0x2f4>)
 8002570:	f002 f8cc 	bl	800470c <HAL_GPIO_ReadPin>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	d112      	bne.n	80025a0 <getVal+0x21c>
	  {
		  letter('9');
 800257a:	2039      	movs	r0, #57	; 0x39
 800257c:	f7fd fde8 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002580:	bf00      	nop
 8002582:	2101      	movs	r1, #1
 8002584:	483c      	ldr	r0, [pc, #240]	; (8002678 <getVal+0x2f4>)
 8002586:	f002 f8c1 	bl	800470c <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d0f8      	beq.n	8002582 <getVal+0x1fe>
		  {}
		  HAL_Delay(100);
 8002590:	2064      	movs	r0, #100	; 0x64
 8002592:	f001 fa4f 	bl	8003a34 <HAL_Delay>
		  val = 9;
 8002596:	2309      	movs	r3, #9
 8002598:	603b      	str	r3, [r7, #0]
		  count++;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3301      	adds	r3, #1
 800259e:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025a6:	4833      	ldr	r0, [pc, #204]	; (8002674 <getVal+0x2f0>)
 80025a8:	f002 f8c7 	bl	800473a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 80025ac:	2201      	movs	r2, #1
 80025ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b2:	4830      	ldr	r0, [pc, #192]	; (8002674 <getVal+0x2f0>)
 80025b4:	f002 f8c1 	bl	800473a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80025b8:	2104      	movs	r1, #4
 80025ba:	482f      	ldr	r0, [pc, #188]	; (8002678 <getVal+0x2f4>)
 80025bc:	f002 f8a6 	bl	800470c <HAL_GPIO_ReadPin>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d112      	bne.n	80025ec <getVal+0x268>
	  {
		  letter('*');
 80025c6:	202a      	movs	r0, #42	; 0x2a
 80025c8:	f7fd fdc2 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80025cc:	bf00      	nop
 80025ce:	2104      	movs	r1, #4
 80025d0:	4829      	ldr	r0, [pc, #164]	; (8002678 <getVal+0x2f4>)
 80025d2:	f002 f89b 	bl	800470c <HAL_GPIO_ReadPin>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d0f8      	beq.n	80025ce <getVal+0x24a>
		  {}
		  HAL_Delay(100);
 80025dc:	2064      	movs	r0, #100	; 0x64
 80025de:	f001 fa29 	bl	8003a34 <HAL_Delay>
		  val = 10;
 80025e2:	230a      	movs	r3, #10
 80025e4:	603b      	str	r3, [r7, #0]
		  count++;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3301      	adds	r3, #1
 80025ea:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80025ec:	2102      	movs	r1, #2
 80025ee:	4822      	ldr	r0, [pc, #136]	; (8002678 <getVal+0x2f4>)
 80025f0:	f002 f88c 	bl	800470c <HAL_GPIO_ReadPin>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d112      	bne.n	8002620 <getVal+0x29c>
	  {
		  letter('0');
 80025fa:	2030      	movs	r0, #48	; 0x30
 80025fc:	f7fd fda8 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002600:	bf00      	nop
 8002602:	2102      	movs	r1, #2
 8002604:	481c      	ldr	r0, [pc, #112]	; (8002678 <getVal+0x2f4>)
 8002606:	f002 f881 	bl	800470c <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d0f8      	beq.n	8002602 <getVal+0x27e>
		  {}
		  HAL_Delay(100);
 8002610:	2064      	movs	r0, #100	; 0x64
 8002612:	f001 fa0f 	bl	8003a34 <HAL_Delay>
		  val = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
		  count++;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3301      	adds	r3, #1
 800261e:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002620:	2101      	movs	r1, #1
 8002622:	4815      	ldr	r0, [pc, #84]	; (8002678 <getVal+0x2f4>)
 8002624:	f002 f872 	bl	800470c <HAL_GPIO_ReadPin>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d112      	bne.n	8002654 <getVal+0x2d0>
	  {
		  letter('#');
 800262e:	2023      	movs	r0, #35	; 0x23
 8002630:	f7fd fd8e 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002634:	bf00      	nop
 8002636:	2101      	movs	r1, #1
 8002638:	480f      	ldr	r0, [pc, #60]	; (8002678 <getVal+0x2f4>)
 800263a:	f002 f867 	bl	800470c <HAL_GPIO_ReadPin>
 800263e:	4603      	mov	r3, r0
 8002640:	2b01      	cmp	r3, #1
 8002642:	d0f8      	beq.n	8002636 <getVal+0x2b2>
		  {}
		  HAL_Delay(100);
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	f001 f9f5 	bl	8003a34 <HAL_Delay>
		  val = 11;
 800264a:	230b      	movs	r3, #11
 800264c:	603b      	str	r3, [r7, #0]
		  count++;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3301      	adds	r3, #1
 8002652:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265a:	4806      	ldr	r0, [pc, #24]	; (8002674 <getVal+0x2f0>)
 800265c:	f002 f86d 	bl	800473a <HAL_GPIO_WritePin>
	while(count<1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f77f ae96 	ble.w	8002394 <getVal+0x10>
	}
	return val;
 8002668:	683b      	ldr	r3, [r7, #0]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40011000 	.word	0x40011000
 8002678:	40010c00 	.word	0x40010c00
 800267c:	40011400 	.word	0x40011400

08002680 <wrongPass>:
void wrongPass(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002684:	2201      	movs	r2, #1
 8002686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268a:	481a      	ldr	r0, [pc, #104]	; (80026f4 <wrongPass+0x74>)
 800268c:	f002 f855 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002696:	4817      	ldr	r0, [pc, #92]	; (80026f4 <wrongPass+0x74>)
 8002698:	f002 f84f 	bl	800473a <HAL_GPIO_WritePin>
	letter('W');
 800269c:	2057      	movs	r0, #87	; 0x57
 800269e:	f7fd fd57 	bl	8000150 <letter>
	letter('r');
 80026a2:	2072      	movs	r0, #114	; 0x72
 80026a4:	f7fd fd54 	bl	8000150 <letter>
	letter('o');
 80026a8:	206f      	movs	r0, #111	; 0x6f
 80026aa:	f7fd fd51 	bl	8000150 <letter>
	letter('n');
 80026ae:	206e      	movs	r0, #110	; 0x6e
 80026b0:	f7fd fd4e 	bl	8000150 <letter>
	letter('g');
 80026b4:	2067      	movs	r0, #103	; 0x67
 80026b6:	f7fd fd4b 	bl	8000150 <letter>
	letter(' ');
 80026ba:	2020      	movs	r0, #32
 80026bc:	f7fd fd48 	bl	8000150 <letter>
	letter('P');
 80026c0:	2050      	movs	r0, #80	; 0x50
 80026c2:	f7fd fd45 	bl	8000150 <letter>
	letter('a');
 80026c6:	2061      	movs	r0, #97	; 0x61
 80026c8:	f7fd fd42 	bl	8000150 <letter>
	letter('s');
 80026cc:	2073      	movs	r0, #115	; 0x73
 80026ce:	f7fd fd3f 	bl	8000150 <letter>
	letter('s');
 80026d2:	2073      	movs	r0, #115	; 0x73
 80026d4:	f7fd fd3c 	bl	8000150 <letter>
	letter('w');
 80026d8:	2077      	movs	r0, #119	; 0x77
 80026da:	f7fd fd39 	bl	8000150 <letter>
	letter('o');
 80026de:	206f      	movs	r0, #111	; 0x6f
 80026e0:	f7fd fd36 	bl	8000150 <letter>
	letter('r');
 80026e4:	2072      	movs	r0, #114	; 0x72
 80026e6:	f7fd fd33 	bl	8000150 <letter>
	letter('d');
 80026ea:	2064      	movs	r0, #100	; 0x64
 80026ec:	f7fd fd30 	bl	8000150 <letter>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40010c00 	.word	0x40010c00

080026f8 <green>:
void green(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80026fc:	2201      	movs	r2, #1
 80026fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002702:	4814      	ldr	r0, [pc, #80]	; (8002754 <green+0x5c>)
 8002704:	f002 f819 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002708:	2200      	movs	r2, #0
 800270a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800270e:	4811      	ldr	r0, [pc, #68]	; (8002754 <green+0x5c>)
 8002710:	f002 f813 	bl	800473a <HAL_GPIO_WritePin>
	letter('G');
 8002714:	2047      	movs	r0, #71	; 0x47
 8002716:	f7fd fd1b 	bl	8000150 <letter>
	letter('r');
 800271a:	2072      	movs	r0, #114	; 0x72
 800271c:	f7fd fd18 	bl	8000150 <letter>
	letter('e');
 8002720:	2065      	movs	r0, #101	; 0x65
 8002722:	f7fd fd15 	bl	8000150 <letter>
	letter('e');
 8002726:	2065      	movs	r0, #101	; 0x65
 8002728:	f7fd fd12 	bl	8000150 <letter>
	letter('n');
 800272c:	206e      	movs	r0, #110	; 0x6e
 800272e:	f7fd fd0f 	bl	8000150 <letter>
	letter(' ');
 8002732:	2020      	movs	r0, #32
 8002734:	f7fd fd0c 	bl	8000150 <letter>
	letter('1');
 8002738:	2031      	movs	r0, #49	; 0x31
 800273a:	f7fd fd09 	bl	8000150 <letter>
	letter('-');
 800273e:	202d      	movs	r0, #45	; 0x2d
 8002740:	f7fd fd06 	bl	8000150 <letter>
	letter('3');
 8002744:	2033      	movs	r0, #51	; 0x33
 8002746:	f7fd fd03 	bl	8000150 <letter>
	letter(':');
 800274a:	203a      	movs	r0, #58	; 0x3a
 800274c:	f7fd fd00 	bl	8000150 <letter>

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40010c00 	.word	0x40010c00

08002758 <timer>:

void timer(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800275c:	2201      	movs	r2, #1
 800275e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002762:	481a      	ldr	r0, [pc, #104]	; (80027cc <timer+0x74>)
 8002764:	f001 ffe9 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002768:	2200      	movs	r2, #0
 800276a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800276e:	4817      	ldr	r0, [pc, #92]	; (80027cc <timer+0x74>)
 8002770:	f001 ffe3 	bl	800473a <HAL_GPIO_WritePin>

	letter('T');
 8002774:	2054      	movs	r0, #84	; 0x54
 8002776:	f7fd fceb 	bl	8000150 <letter>
	letter('i');
 800277a:	2069      	movs	r0, #105	; 0x69
 800277c:	f7fd fce8 	bl	8000150 <letter>
	letter('m');
 8002780:	206d      	movs	r0, #109	; 0x6d
 8002782:	f7fd fce5 	bl	8000150 <letter>
	letter('e');
 8002786:	2065      	movs	r0, #101	; 0x65
 8002788:	f7fd fce2 	bl	8000150 <letter>
	letter(' ');
 800278c:	2020      	movs	r0, #32
 800278e:	f7fd fcdf 	bl	8000150 <letter>
	letter('0');
 8002792:	2030      	movs	r0, #48	; 0x30
 8002794:	f7fd fcdc 	bl	8000150 <letter>
	letter('0');
 8002798:	2030      	movs	r0, #48	; 0x30
 800279a:	f7fd fcd9 	bl	8000150 <letter>
	letter('-');
 800279e:	202d      	movs	r0, #45	; 0x2d
 80027a0:	f7fd fcd6 	bl	8000150 <letter>
	letter('6');
 80027a4:	2036      	movs	r0, #54	; 0x36
 80027a6:	f7fd fcd3 	bl	8000150 <letter>
	letter('0');
 80027aa:	2030      	movs	r0, #48	; 0x30
 80027ac:	f7fd fcd0 	bl	8000150 <letter>
	letter('m');
 80027b0:	206d      	movs	r0, #109	; 0x6d
 80027b2:	f7fd fccd 	bl	8000150 <letter>
	letter('i');
 80027b6:	2069      	movs	r0, #105	; 0x69
 80027b8:	f7fd fcca 	bl	8000150 <letter>
	letter('n');
 80027bc:	206e      	movs	r0, #110	; 0x6e
 80027be:	f7fd fcc7 	bl	8000150 <letter>
	letter(':');
 80027c2:	203a      	movs	r0, #58	; 0x3a
 80027c4:	f7fd fcc4 	bl	8000150 <letter>

}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40010c00 	.word	0x40010c00

080027d0 <quit>:

void quit(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80027d4:	2201      	movs	r2, #1
 80027d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027da:	481d      	ldr	r0, [pc, #116]	; (8002850 <quit+0x80>)
 80027dc:	f001 ffad 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80027e0:	2200      	movs	r2, #0
 80027e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e6:	481a      	ldr	r0, [pc, #104]	; (8002850 <quit+0x80>)
 80027e8:	f001 ffa7 	bl	800473a <HAL_GPIO_WritePin>

	letter('Q');
 80027ec:	2051      	movs	r0, #81	; 0x51
 80027ee:	f7fd fcaf 	bl	8000150 <letter>
	letter('u');
 80027f2:	2075      	movs	r0, #117	; 0x75
 80027f4:	f7fd fcac 	bl	8000150 <letter>
	letter('i');
 80027f8:	2069      	movs	r0, #105	; 0x69
 80027fa:	f7fd fca9 	bl	8000150 <letter>
	letter('t');
 80027fe:	2074      	movs	r0, #116	; 0x74
 8002800:	f7fd fca6 	bl	8000150 <letter>
	letter('?');
 8002804:	203f      	movs	r0, #63	; 0x3f
 8002806:	f7fd fca3 	bl	8000150 <letter>
	letter(' ');
 800280a:	2020      	movs	r0, #32
 800280c:	f7fd fca0 	bl	8000150 <letter>
	letter('y');
 8002810:	2079      	movs	r0, #121	; 0x79
 8002812:	f7fd fc9d 	bl	8000150 <letter>
	letter('e');
 8002816:	2065      	movs	r0, #101	; 0x65
 8002818:	f7fd fc9a 	bl	8000150 <letter>
	letter('s');
 800281c:	2073      	movs	r0, #115	; 0x73
 800281e:	f7fd fc97 	bl	8000150 <letter>
	letter('-');
 8002822:	202d      	movs	r0, #45	; 0x2d
 8002824:	f7fd fc94 	bl	8000150 <letter>
	letter('1');
 8002828:	2031      	movs	r0, #49	; 0x31
 800282a:	f7fd fc91 	bl	8000150 <letter>
	letter(' ');
 800282e:	2020      	movs	r0, #32
 8002830:	f7fd fc8e 	bl	8000150 <letter>
	letter('n');
 8002834:	206e      	movs	r0, #110	; 0x6e
 8002836:	f7fd fc8b 	bl	8000150 <letter>
	letter('o');
 800283a:	206f      	movs	r0, #111	; 0x6f
 800283c:	f7fd fc88 	bl	8000150 <letter>
	letter('-');
 8002840:	202d      	movs	r0, #45	; 0x2d
 8002842:	f7fd fc85 	bl	8000150 <letter>
	letter('0');
 8002846:	2030      	movs	r0, #48	; 0x30
 8002848:	f7fd fc82 	bl	8000150 <letter>
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40010c00 	.word	0x40010c00

08002854 <onOffTime>:
void onOffTime(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800285e:	481e      	ldr	r0, [pc, #120]	; (80028d8 <onOffTime+0x84>)
 8002860:	f001 ff6b 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002864:	2200      	movs	r2, #0
 8002866:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800286a:	481b      	ldr	r0, [pc, #108]	; (80028d8 <onOffTime+0x84>)
 800286c:	f001 ff65 	bl	800473a <HAL_GPIO_WritePin>
	letter('0');
 8002870:	2030      	movs	r0, #48	; 0x30
 8002872:	f7fd fc6d 	bl	8000150 <letter>
	letter('-');
 8002876:	202d      	movs	r0, #45	; 0x2d
 8002878:	f7fd fc6a 	bl	8000150 <letter>
	letter('O');
 800287c:	204f      	movs	r0, #79	; 0x4f
 800287e:	f7fd fc67 	bl	8000150 <letter>
	letter('n');
 8002882:	206e      	movs	r0, #110	; 0x6e
 8002884:	f7fd fc64 	bl	8000150 <letter>
	letter('/');
 8002888:	202f      	movs	r0, #47	; 0x2f
 800288a:	f7fd fc61 	bl	8000150 <letter>
	letter('O');
 800288e:	204f      	movs	r0, #79	; 0x4f
 8002890:	f7fd fc5e 	bl	8000150 <letter>
	letter('f');
 8002894:	2066      	movs	r0, #102	; 0x66
 8002896:	f7fd fc5b 	bl	8000150 <letter>
	letter('f');
 800289a:	2066      	movs	r0, #102	; 0x66
 800289c:	f7fd fc58 	bl	8000150 <letter>
	letter(' ');
 80028a0:	2020      	movs	r0, #32
 80028a2:	f7fd fc55 	bl	8000150 <letter>
	letter('1');
 80028a6:	2031      	movs	r0, #49	; 0x31
 80028a8:	f7fd fc52 	bl	8000150 <letter>
	letter('-');
 80028ac:	202d      	movs	r0, #45	; 0x2d
 80028ae:	f7fd fc4f 	bl	8000150 <letter>
	letter('T');
 80028b2:	2054      	movs	r0, #84	; 0x54
 80028b4:	f7fd fc4c 	bl	8000150 <letter>
	letter('i');
 80028b8:	2069      	movs	r0, #105	; 0x69
 80028ba:	f7fd fc49 	bl	8000150 <letter>
	letter('m');
 80028be:	206d      	movs	r0, #109	; 0x6d
 80028c0:	f7fd fc46 	bl	8000150 <letter>
	letter('e');
 80028c4:	2065      	movs	r0, #101	; 0x65
 80028c6:	f7fd fc43 	bl	8000150 <letter>
	letter('r');
 80028ca:	2072      	movs	r0, #114	; 0x72
 80028cc:	f7fd fc40 	bl	8000150 <letter>
	line2();
 80028d0:	f7ff fc8a 	bl	80021e8 <line2>
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40010c00 	.word	0x40010c00

080028dc <onOff>:
void onOff(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80028e0:	2201      	movs	r2, #1
 80028e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028e6:	4816      	ldr	r0, [pc, #88]	; (8002940 <onOff+0x64>)
 80028e8:	f001 ff27 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80028ec:	2200      	movs	r2, #0
 80028ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f2:	4813      	ldr	r0, [pc, #76]	; (8002940 <onOff+0x64>)
 80028f4:	f001 ff21 	bl	800473a <HAL_GPIO_WritePin>
	letter('0');
 80028f8:	2030      	movs	r0, #48	; 0x30
 80028fa:	f7fd fc29 	bl	8000150 <letter>
	letter('-');
 80028fe:	202d      	movs	r0, #45	; 0x2d
 8002900:	f7fd fc26 	bl	8000150 <letter>
	letter('O');
 8002904:	204f      	movs	r0, #79	; 0x4f
 8002906:	f7fd fc23 	bl	8000150 <letter>
	letter('n');
 800290a:	206e      	movs	r0, #110	; 0x6e
 800290c:	f7fd fc20 	bl	8000150 <letter>
	letter(' ');
 8002910:	2020      	movs	r0, #32
 8002912:	f7fd fc1d 	bl	8000150 <letter>
	letter('1');
 8002916:	2031      	movs	r0, #49	; 0x31
 8002918:	f7fd fc1a 	bl	8000150 <letter>
	letter('-');
 800291c:	202d      	movs	r0, #45	; 0x2d
 800291e:	f7fd fc17 	bl	8000150 <letter>
	letter('O');
 8002922:	204f      	movs	r0, #79	; 0x4f
 8002924:	f7fd fc14 	bl	8000150 <letter>
	letter('f');
 8002928:	2066      	movs	r0, #102	; 0x66
 800292a:	f7fd fc11 	bl	8000150 <letter>
	letter('f');
 800292e:	2066      	movs	r0, #102	; 0x66
 8002930:	f7fd fc0e 	bl	8000150 <letter>
	letter(':');
 8002934:	203a      	movs	r0, #58	; 0x3a
 8002936:	f7fd fc0b 	bl	8000150 <letter>

}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40010c00 	.word	0x40010c00

08002944 <error>:
void error(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002948:	2201      	movs	r2, #1
 800294a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800294e:	482a      	ldr	r0, [pc, #168]	; (80029f8 <error+0xb4>)
 8002950:	f001 fef3 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800295a:	4827      	ldr	r0, [pc, #156]	; (80029f8 <error+0xb4>)
 800295c:	f001 feed 	bl	800473a <HAL_GPIO_WritePin>

	letter('E');
 8002960:	2045      	movs	r0, #69	; 0x45
 8002962:	f7fd fbf5 	bl	8000150 <letter>
	letter('r');
 8002966:	2072      	movs	r0, #114	; 0x72
 8002968:	f7fd fbf2 	bl	8000150 <letter>
	letter('r');
 800296c:	2072      	movs	r0, #114	; 0x72
 800296e:	f7fd fbef 	bl	8000150 <letter>
	letter('o');
 8002972:	206f      	movs	r0, #111	; 0x6f
 8002974:	f7fd fbec 	bl	8000150 <letter>
	letter('r');
 8002978:	2072      	movs	r0, #114	; 0x72
 800297a:	f7fd fbe9 	bl	8000150 <letter>
	letter(',');
 800297e:	202c      	movs	r0, #44	; 0x2c
 8002980:	f7fd fbe6 	bl	8000150 <letter>
	letter(' ');
 8002984:	2020      	movs	r0, #32
 8002986:	f7fd fbe3 	bl	8000150 <letter>
	letter('I');
 800298a:	2049      	movs	r0, #73	; 0x49
 800298c:	f7fd fbe0 	bl	8000150 <letter>
	letter('n');
 8002990:	206e      	movs	r0, #110	; 0x6e
 8002992:	f7fd fbdd 	bl	8000150 <letter>
	letter('v');
 8002996:	2076      	movs	r0, #118	; 0x76
 8002998:	f7fd fbda 	bl	8000150 <letter>
	letter('a');
 800299c:	2061      	movs	r0, #97	; 0x61
 800299e:	f7fd fbd7 	bl	8000150 <letter>
	letter('l');
 80029a2:	206c      	movs	r0, #108	; 0x6c
 80029a4:	f7fd fbd4 	bl	8000150 <letter>
	letter('i');
 80029a8:	2069      	movs	r0, #105	; 0x69
 80029aa:	f7fd fbd1 	bl	8000150 <letter>
	letter('d');
 80029ae:	2064      	movs	r0, #100	; 0x64
 80029b0:	f7fd fbce 	bl	8000150 <letter>

	line2();
 80029b4:	f7ff fc18 	bl	80021e8 <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80029b8:	2201      	movs	r2, #1
 80029ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029be:	480e      	ldr	r0, [pc, #56]	; (80029f8 <error+0xb4>)
 80029c0:	f001 febb 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ca:	480b      	ldr	r0, [pc, #44]	; (80029f8 <error+0xb4>)
 80029cc:	f001 feb5 	bl	800473a <HAL_GPIO_WritePin>
	letter('N');
 80029d0:	204e      	movs	r0, #78	; 0x4e
 80029d2:	f7fd fbbd 	bl	8000150 <letter>
	letter('u');
 80029d6:	2075      	movs	r0, #117	; 0x75
 80029d8:	f7fd fbba 	bl	8000150 <letter>
	letter('m');
 80029dc:	206d      	movs	r0, #109	; 0x6d
 80029de:	f7fd fbb7 	bl	8000150 <letter>
	letter('b');
 80029e2:	2062      	movs	r0, #98	; 0x62
 80029e4:	f7fd fbb4 	bl	8000150 <letter>
	letter('e');
 80029e8:	2065      	movs	r0, #101	; 0x65
 80029ea:	f7fd fbb1 	bl	8000150 <letter>
	letter('r');
 80029ee:	2072      	movs	r0, #114	; 0x72
 80029f0:	f7fd fbae 	bl	8000150 <letter>
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40010c00 	.word	0x40010c00

080029fc <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 8002a04:	f000 fd98 	bl	8003538 <initializeNodes>
//	HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 10);
  for(;;)
  {

	  	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 100) == HAL_OK)
 8002a08:	2364      	movs	r3, #100	; 0x64
 8002a0a:	221a      	movs	r2, #26
 8002a0c:	4903      	ldr	r1, [pc, #12]	; (8002a1c <StartXbeeTask+0x20>)
 8002a0e:	4804      	ldr	r0, [pc, #16]	; (8002a20 <StartXbeeTask+0x24>)
 8002a10:	f003 f9c9 	bl	8005da6 <HAL_UART_Receive>
	  //						HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 1000);
	  //						break;
	  //					}
	  //				}
	    }
    osDelay(1);
 8002a14:	2001      	movs	r0, #1
 8002a16:	f003 fc4d 	bl	80062b4 <osDelay>
	  	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 100) == HAL_OK)
 8002a1a:	e7f5      	b.n	8002a08 <StartXbeeTask+0xc>
 8002a1c:	20002524 	.word	0x20002524
 8002a20:	200024a4 	.word	0x200024a4

08002a24 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	uint16_t indc, m;

  for(;;)
  {

	commandToLCD();
 8002a2c:	f7ff fa7e 	bl	8001f2c <commandToLCD>
	printPassword();
 8002a30:	f7ff fb5a 	bl	80020e8 <printPassword>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002a34:	2200      	movs	r2, #0
 8002a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a3a:	48c2      	ldr	r0, [pc, #776]	; (8002d44 <StartUserTask+0x320>)
 8002a3c:	f001 fe7d 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002a40:	2200      	movs	r2, #0
 8002a42:	2104      	movs	r1, #4
 8002a44:	48c0      	ldr	r0, [pc, #768]	; (8002d48 <StartUserTask+0x324>)
 8002a46:	f001 fe78 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a50:	48bc      	ldr	r0, [pc, #752]	; (8002d44 <StartUserTask+0x320>)
 8002a52:	f001 fe72 	bl	800473a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a5c:	48b9      	ldr	r0, [pc, #740]	; (8002d44 <StartUserTask+0x320>)
 8002a5e:	f001 fe6c 	bl	800473a <HAL_GPIO_WritePin>

	for(int i = 0; i < 4; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
 8002a66:	e00d      	b.n	8002a84 <StartUserTask+0x60>
	{
		num[i] = getVal();
 8002a68:	f7ff fc8c 	bl	8002384 <getVal>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	f107 0120 	add.w	r1, r7, #32
 8002a78:	440b      	add	r3, r1
 8002a7a:	f823 2c14 	strh.w	r2, [r3, #-20]
	for(int i = 0; i < 4; i++)
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	3301      	adds	r3, #1
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	ddee      	ble.n	8002a68 <StartUserTask+0x44>
	}
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8002a8a:	89bb      	ldrh	r3, [r7, #12]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f040 815f 	bne.w	8002d50 <StartUserTask+0x32c>
 8002a92:	89fb      	ldrh	r3, [r7, #14]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	f040 815b 	bne.w	8002d50 <StartUserTask+0x32c>
 8002a9a:	8a3b      	ldrh	r3, [r7, #16]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	f040 8157 	bne.w	8002d50 <StartUserTask+0x32c>
 8002aa2:	8a7b      	ldrh	r3, [r7, #18]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	f040 8153 	bne.w	8002d50 <StartUserTask+0x32c>
	{
		clear();
 8002aaa:	f7ff fbef 	bl	800228c <clear>
		line1();
 8002aae:	f7ff fb49 	bl	8002144 <line1>
		correct();
 8002ab2:	f7ff fc3d 	bl	8002330 <correct>
		HAL_Delay(1500);
 8002ab6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002aba:	f000 ffbb 	bl	8003a34 <HAL_Delay>
		num[6] = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	833b      	strh	r3, [r7, #24]
		while(num[6] == 0)
 8002ac2:	e13a      	b.n	8002d3a <StartUserTask+0x316>
		{
			commandToLCD();
 8002ac4:	f7ff fa32 	bl	8001f2c <commandToLCD>
			onOffTime();
 8002ac8:	f7ff fec4 	bl	8002854 <onOffTime>
			num[0] = getVal();
 8002acc:	f7ff fc5a 	bl	8002384 <getVal>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	81bb      	strh	r3, [r7, #12]
			while(num[0]< 0 || num[0] > 1)
 8002ad6:	e010      	b.n	8002afa <StartUserTask+0xd6>
			{
				commandToLCD();
 8002ad8:	f7ff fa28 	bl	8001f2c <commandToLCD>
				error();
 8002adc:	f7ff ff32 	bl	8002944 <error>
				HAL_Delay(1500);
 8002ae0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ae4:	f000 ffa6 	bl	8003a34 <HAL_Delay>
				commandToLCD();
 8002ae8:	f7ff fa20 	bl	8001f2c <commandToLCD>
				onOffTime();
 8002aec:	f7ff feb2 	bl	8002854 <onOffTime>
				num[0] = getVal();
 8002af0:	f7ff fc48 	bl	8002384 <getVal>
 8002af4:	4603      	mov	r3, r0
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	81bb      	strh	r3, [r7, #12]
			while(num[0]< 0 || num[0] > 1)
 8002afa:	89bb      	ldrh	r3, [r7, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d8eb      	bhi.n	8002ad8 <StartUserTask+0xb4>
			}
			if(num[0] == 0)
 8002b00:	89bb      	ldrh	r3, [r7, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d179      	bne.n	8002bfa <StartUserTask+0x1d6>
			{
				m = 1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	813b      	strh	r3, [r7, #8]
				commandToLCD();
 8002b0a:	f7ff fa0f 	bl	8001f2c <commandToLCD>
				green();
 8002b0e:	f7ff fdf3 	bl	80026f8 <green>
				num[0] = getVal();
 8002b12:	f7ff fc37 	bl	8002384 <getVal>
 8002b16:	4603      	mov	r3, r0
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002b1c:	e010      	b.n	8002b40 <StartUserTask+0x11c>
				{
					commandToLCD();
 8002b1e:	f7ff fa05 	bl	8001f2c <commandToLCD>
					error();
 8002b22:	f7ff ff0f 	bl	8002944 <error>
					HAL_Delay(1500);
 8002b26:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b2a:	f000 ff83 	bl	8003a34 <HAL_Delay>
					commandToLCD();
 8002b2e:	f7ff f9fd 	bl	8001f2c <commandToLCD>
					green();
 8002b32:	f7ff fde1 	bl	80026f8 <green>
					num[0] = getVal();
 8002b36:	f7ff fc25 	bl	8002384 <getVal>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002b40:	89bb      	ldrh	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0eb      	beq.n	8002b1e <StartUserTask+0xfa>
 8002b46:	89bb      	ldrh	r3, [r7, #12]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d8e8      	bhi.n	8002b1e <StartUserTask+0xfa>
				}
				indc = num[0];
 8002b4c:	89bb      	ldrh	r3, [r7, #12]
 8002b4e:	817b      	strh	r3, [r7, #10]
				line2();
 8002b50:	f7ff fb4a 	bl	80021e8 <line2>
				onOff();
 8002b54:	f7ff fec2 	bl	80028dc <onOff>
				num[0] = getVal();
 8002b58:	f7ff fc14 	bl	8002384 <getVal>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002b62:	e010      	b.n	8002b86 <StartUserTask+0x162>
				{
					commandToLCD();
 8002b64:	f7ff f9e2 	bl	8001f2c <commandToLCD>
					error();
 8002b68:	f7ff feec 	bl	8002944 <error>
					HAL_Delay(1500);
 8002b6c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b70:	f000 ff60 	bl	8003a34 <HAL_Delay>
					commandToLCD();
 8002b74:	f7ff f9da 	bl	8001f2c <commandToLCD>
					onOff();
 8002b78:	f7ff feb0 	bl	80028dc <onOff>
					num[0] = getVal();
 8002b7c:	f7ff fc02 	bl	8002384 <getVal>
 8002b80:	4603      	mov	r3, r0
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002b86:	89bb      	ldrh	r3, [r7, #12]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d8eb      	bhi.n	8002b64 <StartUserTask+0x140>
				}
				osMessageQueuePut(UserQueueHandle, &m, 1U, 0U);
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	; (8002d4c <StartUserTask+0x328>)
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	f107 0108 	add.w	r1, r7, #8
 8002b94:	2300      	movs	r3, #0
 8002b96:	2201      	movs	r2, #1
 8002b98:	f003 fc40 	bl	800641c <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &indc, 1U, 0U);//do something with green
 8002b9c:	4b6b      	ldr	r3, [pc, #428]	; (8002d4c <StartUserTask+0x328>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	f107 010a 	add.w	r1, r7, #10
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f003 fc38 	bl	800641c <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &num[0], 1U, 0U);//do something with state
 8002bac:	4b67      	ldr	r3, [pc, #412]	; (8002d4c <StartUserTask+0x328>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	f107 010c 	add.w	r1, r7, #12
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f003 fc30 	bl	800641c <osMessageQueuePut>
				clear();
 8002bbc:	f7ff fb66 	bl	800228c <clear>
				quit();
 8002bc0:	f7ff fe06 	bl	80027d0 <quit>
				num[5] = getVal();
 8002bc4:	f7ff fbde 	bl	8002384 <getVal>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002bce:	e010      	b.n	8002bf2 <StartUserTask+0x1ce>
				{
					commandToLCD();
 8002bd0:	f7ff f9ac 	bl	8001f2c <commandToLCD>
					error();
 8002bd4:	f7ff feb6 	bl	8002944 <error>
					HAL_Delay(1500);
 8002bd8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002bdc:	f000 ff2a 	bl	8003a34 <HAL_Delay>
					commandToLCD();
 8002be0:	f7ff f9a4 	bl	8001f2c <commandToLCD>
					quit();
 8002be4:	f7ff fdf4 	bl	80027d0 <quit>
					num[5] = getVal();
 8002be8:	f7ff fbcc 	bl	8002384 <getVal>
 8002bec:	4603      	mov	r3, r0
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002bf2:	8afb      	ldrh	r3, [r7, #22]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d8eb      	bhi.n	8002bd0 <StartUserTask+0x1ac>
 8002bf8:	e09a      	b.n	8002d30 <StartUserTask+0x30c>
				}
			}
			else if(num[0] == 1)
 8002bfa:	89bb      	ldrh	r3, [r7, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	f040 8097 	bne.w	8002d30 <StartUserTask+0x30c>
			{
				m = 2;
 8002c02:	2302      	movs	r3, #2
 8002c04:	813b      	strh	r3, [r7, #8]
				commandToLCD();
 8002c06:	f7ff f991 	bl	8001f2c <commandToLCD>
				green();
 8002c0a:	f7ff fd75 	bl	80026f8 <green>
				num[0] = getVal();
 8002c0e:	f7ff fbb9 	bl	8002384 <getVal>
 8002c12:	4603      	mov	r3, r0
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002c18:	e010      	b.n	8002c3c <StartUserTask+0x218>
				{
					commandToLCD();
 8002c1a:	f7ff f987 	bl	8001f2c <commandToLCD>
					error();
 8002c1e:	f7ff fe91 	bl	8002944 <error>
					HAL_Delay(1500);
 8002c22:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c26:	f000 ff05 	bl	8003a34 <HAL_Delay>
					commandToLCD();
 8002c2a:	f7ff f97f 	bl	8001f2c <commandToLCD>
					green();
 8002c2e:	f7ff fd63 	bl	80026f8 <green>
					num[0] = getVal();
 8002c32:	f7ff fba7 	bl	8002384 <getVal>
 8002c36:	4603      	mov	r3, r0
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002c3c:	89bb      	ldrh	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0eb      	beq.n	8002c1a <StartUserTask+0x1f6>
 8002c42:	89bb      	ldrh	r3, [r7, #12]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d8e8      	bhi.n	8002c1a <StartUserTask+0x1f6>
				}
				indc = num[0];
 8002c48:	89bb      	ldrh	r3, [r7, #12]
 8002c4a:	817b      	strh	r3, [r7, #10]
				line2();
 8002c4c:	f7ff facc 	bl	80021e8 <line2>
				timer();
 8002c50:	f7ff fd82 	bl	8002758 <timer>
				num[0] = getVal();
 8002c54:	f7ff fb96 	bl	8002384 <getVal>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	81bb      	strh	r3, [r7, #12]
				num[1] = getVal();
 8002c5e:	f7ff fb91 	bl	8002384 <getVal>
 8002c62:	4603      	mov	r3, r0
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	81fb      	strh	r3, [r7, #14]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8002c68:	e015      	b.n	8002c96 <StartUserTask+0x272>
				{
					commandToLCD();
 8002c6a:	f7ff f95f 	bl	8001f2c <commandToLCD>
					error();
 8002c6e:	f7ff fe69 	bl	8002944 <error>
					HAL_Delay(1500);
 8002c72:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c76:	f000 fedd 	bl	8003a34 <HAL_Delay>
					commandToLCD();
 8002c7a:	f7ff f957 	bl	8001f2c <commandToLCD>
					timer();
 8002c7e:	f7ff fd6b 	bl	8002758 <timer>
					num[0] = getVal();
 8002c82:	f7ff fb7f 	bl	8002384 <getVal>
 8002c86:	4603      	mov	r3, r0
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	81bb      	strh	r3, [r7, #12]
					num[1] = getVal();
 8002c8c:	f7ff fb7a 	bl	8002384 <getVal>
 8002c90:	4603      	mov	r3, r0
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	81fb      	strh	r3, [r7, #14]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8002c96:	89bb      	ldrh	r3, [r7, #12]
 8002c98:	2b06      	cmp	r3, #6
 8002c9a:	d8e6      	bhi.n	8002c6a <StartUserTask+0x246>
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
 8002c9e:	2b09      	cmp	r3, #9
 8002ca0:	d8e3      	bhi.n	8002c6a <StartUserTask+0x246>
 8002ca2:	89bb      	ldrh	r3, [r7, #12]
 8002ca4:	2b06      	cmp	r3, #6
 8002ca6:	d102      	bne.n	8002cae <StartUserTask+0x28a>
 8002ca8:	89fb      	ldrh	r3, [r7, #14]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1dd      	bne.n	8002c6a <StartUserTask+0x246>
				}
				osMessageQueuePut(UserQueueHandle, &m, 1U, 0U);
 8002cae:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <StartUserTask+0x328>)
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	f107 0108 	add.w	r1, r7, #8
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f003 fbaf 	bl	800641c <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &indc, 1U, 0U);//do something with green and time
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <StartUserTask+0x328>)
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	f107 010a 	add.w	r1, r7, #10
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f003 fba7 	bl	800641c <osMessageQueuePut>
				num[2] = num[1] + (num[0] * 10);
 8002cce:	89fa      	ldrh	r2, [r7, #14]
 8002cd0:	89bb      	ldrh	r3, [r7, #12]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	0089      	lsls	r1, r1, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	823b      	strh	r3, [r7, #16]
				osMessageQueuePut(UserQueueHandle, &num[2], 1U, 0U);
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <StartUserTask+0x328>)
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	1d19      	adds	r1, r3, #4
 8002cec:	2300      	movs	r3, #0
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f003 fb94 	bl	800641c <osMessageQueuePut>

				clear();
 8002cf4:	f7ff faca 	bl	800228c <clear>
				quit();
 8002cf8:	f7ff fd6a 	bl	80027d0 <quit>
				num[5] = getVal();
 8002cfc:	f7ff fb42 	bl	8002384 <getVal>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002d06:	e010      	b.n	8002d2a <StartUserTask+0x306>
				{
					commandToLCD();
 8002d08:	f7ff f910 	bl	8001f2c <commandToLCD>
					error();
 8002d0c:	f7ff fe1a 	bl	8002944 <error>
					HAL_Delay(1500);
 8002d10:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002d14:	f000 fe8e 	bl	8003a34 <HAL_Delay>
					commandToLCD();
 8002d18:	f7ff f908 	bl	8001f2c <commandToLCD>
					quit();
 8002d1c:	f7ff fd58 	bl	80027d0 <quit>
					num[5] = getVal();
 8002d20:	f7ff fb30 	bl	8002384 <getVal>
 8002d24:	4603      	mov	r3, r0
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002d2a:	8afb      	ldrh	r3, [r7, #22]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d8eb      	bhi.n	8002d08 <StartUserTask+0x2e4>
				}
			}
			if(num[5] == 1)
 8002d30:	8afb      	ldrh	r3, [r7, #22]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <StartUserTask+0x316>
			{
				num[6] = 5;
 8002d36:	2305      	movs	r3, #5
 8002d38:	833b      	strh	r3, [r7, #24]
		while(num[6] == 0)
 8002d3a:	8b3b      	ldrh	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f43f aec1 	beq.w	8002ac4 <StartUserTask+0xa0>
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8002d42:	e00d      	b.n	8002d60 <StartUserTask+0x33c>
 8002d44:	40011000 	.word	0x40011000
 8002d48:	40011400 	.word	0x40011400
 8002d4c:	20002564 	.word	0x20002564
			}
		}
	}
	else
	{
		line2();
 8002d50:	f7ff fa4a 	bl	80021e8 <line2>
		wrongPass();
 8002d54:	f7ff fc94 	bl	8002680 <wrongPass>
		HAL_Delay(2000);
 8002d58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d5c:	f000 fe6a 	bl	8003a34 <HAL_Delay>
	}
	osDelay(1);
 8002d60:	2001      	movs	r0, #1
 8002d62:	f003 faa7 	bl	80062b4 <osDelay>
	commandToLCD();
 8002d66:	e661      	b.n	8002a2c <StartUserTask+0x8>

08002d68 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
//	  		else if(state == 1)
//	  		{
//	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//	  		}
//	  	}
    osDelay(1);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f003 fa9f 	bl	80062b4 <osDelay>
 8002d76:	e7fb      	b.n	8002d70 <StartSolenoidTask+0x8>

08002d78 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b09c      	sub	sp, #112	; 0x70
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWeatherTask */
	uint16_t period[20], raw[20];
	uint16_t tickstart, tickend, totalP, totalT, a, b;
	uint16_t Pcount = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	HAL_TIM_Base_Start(&htim2);
 8002d86:	486a      	ldr	r0, [pc, #424]	; (8002f30 <StartWeatherTask+0x1b8>)
 8002d88:	f002 fb20 	bl	80053cc <HAL_TIM_Base_Start>

  /* Infinite loop */
  for(;;)
  {
		while(Pcount < 20)
 8002d8c:	e056      	b.n	8002e3c <StartWeatherTask+0xc4>
		{
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8002d8e:	bf00      	nop
 8002d90:	2101      	movs	r1, #1
 8002d92:	4868      	ldr	r0, [pc, #416]	; (8002f34 <StartWeatherTask+0x1bc>)
 8002d94:	f001 fcba 	bl	800470c <HAL_GPIO_ReadPin>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f8      	beq.n	8002d90 <StartWeatherTask+0x18>
			{}
			tickstart = __HAL_TIM_GET_COUNTER(&htim2);
 8002d9e:	4b64      	ldr	r3, [pc, #400]	; (8002f30 <StartWeatherTask+0x1b8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1)
 8002da8:	bf00      	nop
 8002daa:	2101      	movs	r1, #1
 8002dac:	4861      	ldr	r0, [pc, #388]	; (8002f34 <StartWeatherTask+0x1bc>)
 8002dae:	f001 fcad 	bl	800470c <HAL_GPIO_ReadPin>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d0f8      	beq.n	8002daa <StartWeatherTask+0x32>
			{}
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8002db8:	bf00      	nop
 8002dba:	2101      	movs	r1, #1
 8002dbc:	485d      	ldr	r0, [pc, #372]	; (8002f34 <StartWeatherTask+0x1bc>)
 8002dbe:	f001 fca5 	bl	800470c <HAL_GPIO_ReadPin>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f8      	beq.n	8002dba <StartWeatherTask+0x42>
			{}
			tickend = __HAL_TIM_GET_COUNTER(&htim2);
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <StartWeatherTask+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if(tickend > tickstart)
 8002dd2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002dd6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d90e      	bls.n	8002dfc <StartWeatherTask+0x84>
				period[Pcount] = tickend - tickstart;
 8002dde:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002de2:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8002de6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002dea:	1a8a      	subs	r2, r1, r2
 8002dec:	b292      	uxth	r2, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002df4:	440b      	add	r3, r1
 8002df6:	f823 2c3c 	strh.w	r2, [r3, #-60]
 8002dfa:	e00f      	b.n	8002e1c <StartWeatherTask+0xa4>
			else
				period[Pcount] = (65535 - tickstart) + tickend;
 8002dfc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002e00:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002e0c:	3a01      	subs	r2, #1
 8002e0e:	b292      	uxth	r2, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002e16:	440b      	add	r3, r1
 8002e18:	f823 2c3c 	strh.w	r2, [r3, #-60]

			if(period[Pcount]< 1000)
 8002e1c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002e26:	4413      	add	r3, r2
 8002e28:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8002e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e30:	d204      	bcs.n	8002e3c <StartWeatherTask+0xc4>
				Pcount++;
 8002e32:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002e36:	3301      	adds	r3, #1
 8002e38:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		while(Pcount < 20)
 8002e3c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002e40:	2b13      	cmp	r3, #19
 8002e42:	d9a4      	bls.n	8002d8e <StartWeatherTask+0x16>
		}

		for(int i = 0; i < 20; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	667b      	str	r3, [r7, #100]	; 0x64
 8002e48:	e016      	b.n	8002e78 <StartWeatherTask+0x100>
		{
			HAL_ADC_Start(&hadc1);
 8002e4a:	483b      	ldr	r0, [pc, #236]	; (8002f38 <StartWeatherTask+0x1c0>)
 8002e4c:	f000 feec 	bl	8003c28 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002e50:	f04f 31ff 	mov.w	r1, #4294967295
 8002e54:	4838      	ldr	r0, [pc, #224]	; (8002f38 <StartWeatherTask+0x1c0>)
 8002e56:	f000 ff95 	bl	8003d84 <HAL_ADC_PollForConversion>
			raw[i] = HAL_ADC_GetValue(&hadc1);
 8002e5a:	4837      	ldr	r0, [pc, #220]	; (8002f38 <StartWeatherTask+0x1c0>)
 8002e5c:	f001 f88c 	bl	8003f78 <HAL_ADC_GetValue>
 8002e60:	4603      	mov	r3, r0
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002e6c:	440b      	add	r3, r1
 8002e6e:	f823 2c64 	strh.w	r2, [r3, #-100]
		for(int i = 0; i < 20; i++)
 8002e72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e74:	3301      	adds	r3, #1
 8002e76:	667b      	str	r3, [r7, #100]	; 0x64
 8002e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7a:	2b13      	cmp	r3, #19
 8002e7c:	dde5      	ble.n	8002e4a <StartWeatherTask+0xd2>
		}

		Pcount = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		totalT = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	813b      	strh	r3, [r7, #8]
		totalP = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	817b      	strh	r3, [r7, #10]
		for(int i = 0; i < 20; i++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e90:	e018      	b.n	8002ec4 <StartWeatherTask+0x14c>
		{
			totalT = totalT +raw[i];
 8002e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f833 2c64 	ldrh.w	r2, [r3, #-100]
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	813b      	strh	r3, [r7, #8]
			totalP = totalP +period[i];
 8002ea8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	4413      	add	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	817b      	strh	r3, [r7, #10]
		for(int i = 0; i < 20; i++)
 8002ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec6:	2b13      	cmp	r3, #19
 8002ec8:	dde3      	ble.n	8002e92 <StartWeatherTask+0x11a>
		}
		totalT = totalT/20;
 8002eca:	893b      	ldrh	r3, [r7, #8]
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <StartWeatherTask+0x1c4>)
 8002ece:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	813b      	strh	r3, [r7, #8]
		totalP = totalP/20;
 8002ed8:	897b      	ldrh	r3, [r7, #10]
 8002eda:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <StartWeatherTask+0x1c4>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	817b      	strh	r3, [r7, #10]
		if(a != totalT || b != totalP)
 8002ee6:	893b      	ldrh	r3, [r7, #8]
 8002ee8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d104      	bne.n	8002efa <StartWeatherTask+0x182>
 8002ef0:	897b      	ldrh	r3, [r7, #10]
 8002ef2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d015      	beq.n	8002f26 <StartWeatherTask+0x1ae>
		{
			osMessageQueuePut(WeatherQueueHandle, &totalT, 1U, 0U);
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <StartWeatherTask+0x1c8>)
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	f107 0108 	add.w	r1, r7, #8
 8002f02:	2300      	movs	r3, #0
 8002f04:	2201      	movs	r2, #1
 8002f06:	f003 fa89 	bl	800641c <osMessageQueuePut>
			osMessageQueuePut(WeatherQueueHandle, &totalP, 1U, 0U);
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <StartWeatherTask+0x1c8>)
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	f107 010a 	add.w	r1, r7, #10
 8002f12:	2300      	movs	r3, #0
 8002f14:	2201      	movs	r2, #1
 8002f16:	f003 fa81 	bl	800641c <osMessageQueuePut>
			a = totalT;
 8002f1a:	893b      	ldrh	r3, [r7, #8]
 8002f1c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			b = totalP;
 8002f20:	897b      	ldrh	r3, [r7, #10]
 8002f22:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		}
    osDelay(30);
 8002f26:	201e      	movs	r0, #30
 8002f28:	f003 f9c4 	bl	80062b4 <osDelay>
		while(Pcount < 20)
 8002f2c:	e786      	b.n	8002e3c <StartWeatherTask+0xc4>
 8002f2e:	bf00      	nop
 8002f30:	2000283c 	.word	0x2000283c
 8002f34:	40011000 	.word	0x40011000
 8002f38:	200027b0 	.word	0x200027b0
 8002f3c:	cccccccd 	.word	0xcccccccd
 8002f40:	20002838 	.word	0x20002838

08002f44 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b09a      	sub	sp, #104	; 0x68
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlowTask */
  	uint16_t o[3] = {1,1,1};
 8002f4c:	4aa5      	ldr	r2, [pc, #660]	; (80031e4 <StartFlowTask+0x2a0>)
 8002f4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f56:	6018      	str	r0, [r3, #0]
 8002f58:	3304      	adds	r3, #4
 8002f5a:	8019      	strh	r1, [r3, #0]
  	uint16_t C[20];
  	uint16_t tickS, tickL, temp, f1, f2, f3, m;
  	uint16_t F = 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  	uint16_t L = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  	uint16_t total = 0;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	489d      	ldr	r0, [pc, #628]	; (80031e8 <StartFlowTask+0x2a4>)
 8002f72:	f001 fbcb 	bl	800470c <HAL_GPIO_ReadPin>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 80a8 	bne.w	80030ce <StartFlowTask+0x18a>
 8002f7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f040 80a4 	bne.w	80030ce <StartFlowTask+0x18a>
	  {
		  m = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f8e:	e066      	b.n	800305e <StartFlowTask+0x11a>
		  {
			  HAL_TIM_Base_Start(&htim1);
 8002f90:	4896      	ldr	r0, [pc, #600]	; (80031ec <StartFlowTask+0x2a8>)
 8002f92:	f002 fa1b 	bl	80053cc <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 8002f96:	4b95      	ldr	r3, [pc, #596]	; (80031ec <StartFlowTask+0x2a8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 8002fa0:	e04c      	b.n	800303c <StartFlowTask+0xf8>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b7
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	4892      	ldr	r0, [pc, #584]	; (80031f0 <StartFlowTask+0x2ac>)
 8002fa6:	f001 fbb1 	bl	800470c <HAL_GPIO_ReadPin>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 8002fb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d115      	bne.n	8002fe4 <StartFlowTask+0xa0>
 8002fb8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002fbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d00f      	beq.n	8002fe4 <StartFlowTask+0xa0>
				  {
					  C[j]++;
 8002fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002fcc:	4413      	add	r3, r2
 8002fce:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002fde:	440b      	add	r3, r1
 8002fe0:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 8002fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fe8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8002fec:	4b7f      	ldr	r3, [pc, #508]	; (80031ec <StartFlowTask+0x2a8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 8002ff6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002ffa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d20d      	bcs.n	800301e <StartFlowTask+0xda>
					  total = total + temp + (65535 - tickL);
 8003002:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003006:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800300a:	4413      	add	r3, r2
 800300c:	b29a      	uxth	r2, r3
 800300e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800301c:	e00a      	b.n	8003034 <StartFlowTask+0xf0>

				  else
					  total = total+ temp - tickL;
 800301e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003022:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003026:	4413      	add	r3, r2
 8003028:	b29a      	uxth	r2, r3
 800302a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 8003034:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003038:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 800303c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003040:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	4a6b      	ldr	r2, [pc, #428]	; (80031f4 <StartFlowTask+0x2b0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	ddaa      	ble.n	8002fa2 <StartFlowTask+0x5e>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 800304c:	4867      	ldr	r0, [pc, #412]	; (80031ec <StartFlowTask+0x2a8>)
 800304e:	f002 fa07 	bl	8005460 <HAL_TIM_Base_Stop>
			  total = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  for(int j =0; j < 20; j++)
 8003058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305a:	3301      	adds	r3, #1
 800305c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800305e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003060:	2b13      	cmp	r3, #19
 8003062:	dd95      	ble.n	8002f90 <StartFlowTask+0x4c>
		  }
		  for(int j =0; j < 20; j++)
 8003064:	2300      	movs	r3, #0
 8003066:	65bb      	str	r3, [r7, #88]	; 0x58
 8003068:	e015      	b.n	8003096 <StartFlowTask+0x152>
		  {
			  f1 = f1 + C[j];
 800306a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003072:	4413      	add	r3, r2
 8003074:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8003078:	8a7b      	ldrh	r3, [r7, #18]
 800307a:	4413      	add	r3, r2
 800307c:	b29b      	uxth	r3, r3
 800307e:	827b      	strh	r3, [r7, #18]
			  C[j] = 0;
 8003080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003088:	4413      	add	r3, r2
 800308a:	2200      	movs	r2, #0
 800308c:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 8003090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003092:	3301      	adds	r3, #1
 8003094:	65bb      	str	r3, [r7, #88]	; 0x58
 8003096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003098:	2b13      	cmp	r3, #19
 800309a:	dde6      	ble.n	800306a <StartFlowTask+0x126>
		  }
		  f1 = f1 / 100;
 800309c:	8a7b      	ldrh	r3, [r7, #18]
 800309e:	4a56      	ldr	r2, [pc, #344]	; (80031f8 <StartFlowTask+0x2b4>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	827b      	strh	r3, [r7, #18]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 80030aa:	4b54      	ldr	r3, [pc, #336]	; (80031fc <StartFlowTask+0x2b8>)
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	f107 010c 	add.w	r1, r7, #12
 80030b2:	2300      	movs	r3, #0
 80030b4:	2201      	movs	r2, #1
 80030b6:	f003 f9b1 	bl	800641c <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f1, 1U, 0U);
 80030ba:	4b50      	ldr	r3, [pc, #320]	; (80031fc <StartFlowTask+0x2b8>)
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	f107 0112 	add.w	r1, r7, #18
 80030c2:	2300      	movs	r3, #0
 80030c4:	2201      	movs	r2, #1
 80030c6:	f003 f9a9 	bl	800641c <osMessageQueuePut>
		  o[0] = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[0] == 0)
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	4845      	ldr	r0, [pc, #276]	; (80031e8 <StartFlowTask+0x2a4>)
 80030d2:	f001 fb1b 	bl	800470c <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <StartFlowTask+0x1a2>
 80030dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <StartFlowTask+0x1a2>
	  {
		  o[0] = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1 && o[1] == 1)
 80030e6:	2120      	movs	r1, #32
 80030e8:	483f      	ldr	r0, [pc, #252]	; (80031e8 <StartFlowTask+0x2a4>)
 80030ea:	f001 fb0f 	bl	800470c <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	f040 80b7 	bne.w	8003264 <StartFlowTask+0x320>
 80030f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	f040 80b3 	bne.w	8003264 <StartFlowTask+0x320>
	  {
		  m = 2;
 80030fe:	2302      	movs	r3, #2
 8003100:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 8003102:	2300      	movs	r3, #0
 8003104:	657b      	str	r3, [r7, #84]	; 0x54
 8003106:	e066      	b.n	80031d6 <StartFlowTask+0x292>
		  {
			  HAL_TIM_Base_Start(&htim1);
 8003108:	4838      	ldr	r0, [pc, #224]	; (80031ec <StartFlowTask+0x2a8>)
 800310a:	f002 f95f 	bl	80053cc <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 800310e:	4b37      	ldr	r3, [pc, #220]	; (80031ec <StartFlowTask+0x2a8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 8003118:	e04c      	b.n	80031b4 <StartFlowTask+0x270>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);//b5
 800311a:	2102      	movs	r1, #2
 800311c:	4834      	ldr	r0, [pc, #208]	; (80031f0 <StartFlowTask+0x2ac>)
 800311e:	f001 faf5 	bl	800470c <HAL_GPIO_ReadPin>
 8003122:	4603      	mov	r3, r0
 8003124:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 8003128:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800312c:	2b01      	cmp	r3, #1
 800312e:	d115      	bne.n	800315c <StartFlowTask+0x218>
 8003130:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003134:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003138:	429a      	cmp	r2, r3
 800313a:	d00f      	beq.n	800315c <StartFlowTask+0x218>
				  {
					  C[j]++;
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003144:	4413      	add	r3, r2
 8003146:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800314a:	3301      	adds	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003156:	440b      	add	r3, r1
 8003158:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 800315c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003160:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <StartFlowTask+0x2a8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 800316e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003172:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003176:	429a      	cmp	r2, r3
 8003178:	d20d      	bcs.n	8003196 <StartFlowTask+0x252>
					  total = total + temp + (65535 - tickL);
 800317a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800317e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003182:	4413      	add	r3, r2
 8003184:	b29a      	uxth	r2, r3
 8003186:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003194:	e00a      	b.n	80031ac <StartFlowTask+0x268>

				  else
					  total = total+ temp - tickL;
 8003196:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800319a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800319e:	4413      	add	r3, r2
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 80031ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80031b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 80031b4:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80031b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <StartFlowTask+0x2b0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	ddaa      	ble.n	800311a <StartFlowTask+0x1d6>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 80031c4:	4809      	ldr	r0, [pc, #36]	; (80031ec <StartFlowTask+0x2a8>)
 80031c6:	f002 f94b 	bl	8005460 <HAL_TIM_Base_Stop>
			  total = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  for(int j =0; j < 20; j++)
 80031d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d2:	3301      	adds	r3, #1
 80031d4:	657b      	str	r3, [r7, #84]	; 0x54
 80031d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d8:	2b13      	cmp	r3, #19
 80031da:	dd95      	ble.n	8003108 <StartFlowTask+0x1c4>
		  }
		  for(int j =0; j < 20; j++)
 80031dc:	2300      	movs	r3, #0
 80031de:	653b      	str	r3, [r7, #80]	; 0x50
 80031e0:	e024      	b.n	800322c <StartFlowTask+0x2e8>
 80031e2:	bf00      	nop
 80031e4:	08008f44 	.word	0x08008f44
 80031e8:	40010c00 	.word	0x40010c00
 80031ec:	200027ec 	.word	0x200027ec
 80031f0:	40011000 	.word	0x40011000
 80031f4:	0004fffa 	.word	0x0004fffa
 80031f8:	51eb851f 	.word	0x51eb851f
 80031fc:	2000255c 	.word	0x2000255c
		  {
			  f2 = f2 + C[j];
 8003200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003208:	4413      	add	r3, r2
 800320a:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 800320e:	8a3b      	ldrh	r3, [r7, #16]
 8003210:	4413      	add	r3, r2
 8003212:	b29b      	uxth	r3, r3
 8003214:	823b      	strh	r3, [r7, #16]
			  C[j] = 0;
 8003216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800321e:	4413      	add	r3, r2
 8003220:	2200      	movs	r2, #0
 8003222:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 8003226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003228:	3301      	adds	r3, #1
 800322a:	653b      	str	r3, [r7, #80]	; 0x50
 800322c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322e:	2b13      	cmp	r3, #19
 8003230:	dde6      	ble.n	8003200 <StartFlowTask+0x2bc>
		  }
		  f2 = f2 / 100;
 8003232:	8a3b      	ldrh	r3, [r7, #16]
 8003234:	4a73      	ldr	r2, [pc, #460]	; (8003404 <StartFlowTask+0x4c0>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	b29b      	uxth	r3, r3
 800323e:	823b      	strh	r3, [r7, #16]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 8003240:	4b71      	ldr	r3, [pc, #452]	; (8003408 <StartFlowTask+0x4c4>)
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	f107 010c 	add.w	r1, r7, #12
 8003248:	2300      	movs	r3, #0
 800324a:	2201      	movs	r2, #1
 800324c:	f003 f8e6 	bl	800641c <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f2, 1U, 0U);
 8003250:	4b6d      	ldr	r3, [pc, #436]	; (8003408 <StartFlowTask+0x4c4>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	f107 0110 	add.w	r1, r7, #16
 8003258:	2300      	movs	r3, #0
 800325a:	2201      	movs	r2, #1
 800325c:	f003 f8de 	bl	800641c <osMessageQueuePut>
		  o[1] = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0 && o[1] == 0)
 8003264:	2120      	movs	r1, #32
 8003266:	4869      	ldr	r0, [pc, #420]	; (800340c <StartFlowTask+0x4c8>)
 8003268:	f001 fa50 	bl	800470c <HAL_GPIO_ReadPin>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <StartFlowTask+0x338>
 8003272:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <StartFlowTask+0x338>
	  {
		  o[1] = 1;
 8003278:	2301      	movs	r3, #1
 800327a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[2] == 1)
 800327c:	2180      	movs	r1, #128	; 0x80
 800327e:	4863      	ldr	r0, [pc, #396]	; (800340c <StartFlowTask+0x4c8>)
 8003280:	f001 fa44 	bl	800470c <HAL_GPIO_ReadPin>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	f040 80aa 	bne.w	80033e0 <StartFlowTask+0x49c>
 800328c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003290:	2b01      	cmp	r3, #1
 8003292:	f040 80a5 	bne.w	80033e0 <StartFlowTask+0x49c>
	  {
		  m = 3;
 8003296:	2303      	movs	r3, #3
 8003298:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 800329a:	2300      	movs	r3, #0
 800329c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800329e:	e066      	b.n	800336e <StartFlowTask+0x42a>
		  {
			  HAL_TIM_Base_Start(&htim1);
 80032a0:	485b      	ldr	r0, [pc, #364]	; (8003410 <StartFlowTask+0x4cc>)
 80032a2:	f002 f893 	bl	80053cc <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 80032a6:	4b5a      	ldr	r3, [pc, #360]	; (8003410 <StartFlowTask+0x4cc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 80032b0:	e04c      	b.n	800334c <StartFlowTask+0x408>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b4
 80032b2:	2104      	movs	r1, #4
 80032b4:	4857      	ldr	r0, [pc, #348]	; (8003414 <StartFlowTask+0x4d0>)
 80032b6:	f001 fa29 	bl	800470c <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 80032c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d115      	bne.n	80032f4 <StartFlowTask+0x3b0>
 80032c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80032cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d00f      	beq.n	80032f4 <StartFlowTask+0x3b0>
				  {
					  C[j]++;
 80032d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80032dc:	4413      	add	r3, r2
 80032de:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80032e2:	3301      	adds	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80032ee:	440b      	add	r3, r1
 80032f0:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 80032f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 80032fc:	4b44      	ldr	r3, [pc, #272]	; (8003410 <StartFlowTask+0x4cc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 8003306:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800330a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800330e:	429a      	cmp	r2, r3
 8003310:	d20d      	bcs.n	800332e <StartFlowTask+0x3ea>
					  total = total + temp + (65535 - tickL);
 8003312:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003316:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800331a:	4413      	add	r3, r2
 800331c:	b29a      	uxth	r2, r3
 800331e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800332c:	e00a      	b.n	8003344 <StartFlowTask+0x400>

				  else
					  total = total+ temp - tickL;
 800332e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003336:	4413      	add	r3, r2
 8003338:	b29a      	uxth	r2, r3
 800333a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 8003344:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003348:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 800334c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003350:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	4a30      	ldr	r2, [pc, #192]	; (8003418 <StartFlowTask+0x4d4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	ddaa      	ble.n	80032b2 <StartFlowTask+0x36e>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 800335c:	482c      	ldr	r0, [pc, #176]	; (8003410 <StartFlowTask+0x4cc>)
 800335e:	f002 f87f 	bl	8005460 <HAL_TIM_Base_Stop>
			  total = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  for(int j =0; j < 20; j++)
 8003368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336a:	3301      	adds	r3, #1
 800336c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800336e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003370:	2b13      	cmp	r3, #19
 8003372:	dd95      	ble.n	80032a0 <StartFlowTask+0x35c>
		  }
		  for(int j =0; j < 20; j++)
 8003374:	2300      	movs	r3, #0
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48
 8003378:	e015      	b.n	80033a6 <StartFlowTask+0x462>
		  {
			  f1 = f1 + C[j];
 800337a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003382:	4413      	add	r3, r2
 8003384:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8003388:	8a7b      	ldrh	r3, [r7, #18]
 800338a:	4413      	add	r3, r2
 800338c:	b29b      	uxth	r3, r3
 800338e:	827b      	strh	r3, [r7, #18]
			  C[j] = 0;
 8003390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003398:	4413      	add	r3, r2
 800339a:	2200      	movs	r2, #0
 800339c:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 80033a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a2:	3301      	adds	r3, #1
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a8:	2b13      	cmp	r3, #19
 80033aa:	dde6      	ble.n	800337a <StartFlowTask+0x436>
		  }
		  f3 = f3 / 100;
 80033ac:	89fb      	ldrh	r3, [r7, #14]
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <StartFlowTask+0x4c0>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	81fb      	strh	r3, [r7, #14]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <StartFlowTask+0x4c4>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f107 010c 	add.w	r1, r7, #12
 80033c2:	2300      	movs	r3, #0
 80033c4:	2201      	movs	r2, #1
 80033c6:	f003 f829 	bl	800641c <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f3, 1U, 0U);
 80033ca:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <StartFlowTask+0x4c4>)
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	f107 010e 	add.w	r1, r7, #14
 80033d2:	2300      	movs	r3, #0
 80033d4:	2201      	movs	r2, #1
 80033d6:	f003 f821 	bl	800641c <osMessageQueuePut>
		  o[2] = 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[2] == 0)
 80033e0:	2180      	movs	r1, #128	; 0x80
 80033e2:	480a      	ldr	r0, [pc, #40]	; (800340c <StartFlowTask+0x4c8>)
 80033e4:	f001 f992 	bl	800470c <HAL_GPIO_ReadPin>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <StartFlowTask+0x4b8>
 80033ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <StartFlowTask+0x4b8>
	  {
		  o[2] = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  }

	  osDelay(1);
 80033fc:	2001      	movs	r0, #1
 80033fe:	f002 ff59 	bl	80062b4 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 8003402:	e5b4      	b.n	8002f6e <StartFlowTask+0x2a>
 8003404:	51eb851f 	.word	0x51eb851f
 8003408:	2000255c 	.word	0x2000255c
 800340c:	40010c00 	.word	0x40010c00
 8003410:	200027ec 	.word	0x200027ec
 8003414:	40011000 	.word	0x40011000
 8003418:	0004fffa 	.word	0x0004fffa

0800341c <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
	uint16_t userOverride[3];
	uint16_t input;
	uint16_t C =0;
 8003424:	2300      	movs	r3, #0
 8003426:	82fb      	strh	r3, [r7, #22]
  /* Infinite loop */
  for(;;)
  {
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 8003428:	e00a      	b.n	8003440 <StartProcessingTask+0x24>
	  {//when receiving data put it in this array
		  userOverride[C] = input;
 800342a:	8afb      	ldrh	r3, [r7, #22]
 800342c:	89fa      	ldrh	r2, [r7, #14]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	f107 0118 	add.w	r1, r7, #24
 8003434:	440b      	add	r3, r1
 8003436:	f823 2c08 	strh.w	r2, [r3, #-8]
		  C++;
 800343a:	8afb      	ldrh	r3, [r7, #22]
 800343c:	3301      	adds	r3, #1
 800343e:	82fb      	strh	r3, [r7, #22]
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <StartProcessingTask+0x70>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	f107 010e 	add.w	r1, r7, #14
 8003448:	2300      	movs	r3, #0
 800344a:	2200      	movs	r2, #0
 800344c:	f003 f85a 	bl	8006504 <osMessageQueueGet>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0e9      	beq.n	800342a <StartProcessingTask+0xe>
	  }
	  while(osMessageQueueGet(WeatherQueueHandle, &input, NULL, 0U ) == osOK)
 8003456:	e00a      	b.n	800346e <StartProcessingTask+0x52>
	  {//when receiving data put it in this array
		  userOverride[C] = input;
 8003458:	8afb      	ldrh	r3, [r7, #22]
 800345a:	89fa      	ldrh	r2, [r7, #14]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	f107 0118 	add.w	r1, r7, #24
 8003462:	440b      	add	r3, r1
 8003464:	f823 2c08 	strh.w	r2, [r3, #-8]
		  C++;
 8003468:	8afb      	ldrh	r3, [r7, #22]
 800346a:	3301      	adds	r3, #1
 800346c:	82fb      	strh	r3, [r7, #22]
	  while(osMessageQueueGet(WeatherQueueHandle, &input, NULL, 0U ) == osOK)
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <StartProcessingTask+0x74>)
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	f107 010e 	add.w	r1, r7, #14
 8003476:	2300      	movs	r3, #0
 8003478:	2200      	movs	r2, #0
 800347a:	f003 f843 	bl	8006504 <osMessageQueueGet>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0e9      	beq.n	8003458 <StartProcessingTask+0x3c>
	  }
    osDelay(1);
 8003484:	2001      	movs	r0, #1
 8003486:	f002 ff15 	bl	80062b4 <osDelay>
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 800348a:	e7d9      	b.n	8003440 <StartProcessingTask+0x24>
 800348c:	20002564 	.word	0x20002564
 8003490:	20002838 	.word	0x20002838

08003494 <StartWebsiteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebsiteTask */
void StartWebsiteTask(void *argument)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b09e      	sub	sp, #120	; 0x78
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	uint16_t water, input;
	uint8_t BufferRX[50], BufferTX[50];
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageQueueGet(SolenoidQueueHandle, &input, NULL, 0U ) == osOK)
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <StartWebsiteTask+0x6c>)
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80034a4:	2300      	movs	r3, #0
 80034a6:	2200      	movs	r2, #0
 80034a8:	f003 f82c 	bl	8006504 <osMessageQueueGet>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10f      	bne.n	80034d2 <StartWebsiteTask+0x3e>
	  {//when receiving data put it in this array
		  water = water + input;
 80034b2:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80034b6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80034ba:	4413      	add	r3, r2
 80034bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  HAL_UART_Transmit(&huart1, water, 13, 1000);//*********also send Colton's info************
 80034c0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80034c4:	4619      	mov	r1, r3
 80034c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034ca:	220d      	movs	r2, #13
 80034cc:	480d      	ldr	r0, [pc, #52]	; (8003504 <StartWebsiteTask+0x70>)
 80034ce:	f002 fbd8 	bl	8005c82 <HAL_UART_Transmit>
	  }
	  if(HAL_UART_Receive(&huart1, BufferRX, 5, 100) == HAL_OK)
 80034d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80034d6:	2364      	movs	r3, #100	; 0x64
 80034d8:	2205      	movs	r2, #5
 80034da:	480a      	ldr	r0, [pc, #40]	; (8003504 <StartWebsiteTask+0x70>)
 80034dc:	f002 fc63 	bl	8005da6 <HAL_UART_Receive>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d107      	bne.n	80034f6 <StartWebsiteTask+0x62>
  	  {
  		osMessageQueuePut(WebsiteQueueHandle, &BufferRX, 1U, 0U);
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <StartWebsiteTask+0x74>)
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80034ee:	2300      	movs	r3, #0
 80034f0:	2201      	movs	r2, #1
 80034f2:	f002 ff93 	bl	800641c <osMessageQueuePut>
  	  }
    osDelay(1);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f002 fedc 	bl	80062b4 <osDelay>
	  if(osMessageQueueGet(SolenoidQueueHandle, &input, NULL, 0U ) == osOK)
 80034fc:	e7ce      	b.n	800349c <StartWebsiteTask+0x8>
 80034fe:	bf00      	nop
 8003500:	20002558 	.word	0x20002558
 8003504:	200024e4 	.word	0x200024e4
 8003508:	200027e4 	.word	0x200027e4

0800350c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800351e:	f000 fa6d 	bl	80039fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40000800 	.word	0x40000800

08003530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003534:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003536:	e7fe      	b.n	8003536 <Error_Handler+0x6>

08003538 <initializeNodes>:
 */

#include "sensorObjects.h"

void initializeNodes()
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	; 0x24
 800353c:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 800353e:	4a34      	ldr	r2, [pc, #208]	; (8003610 <initializeNodes+0xd8>)
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003548:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 800354c:	4a31      	ldr	r2, [pc, #196]	; (8003614 <initializeNodes+0xdc>)
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003556:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 800355a:	4a2f      	ldr	r2, [pc, #188]	; (8003618 <initializeNodes+0xe0>)
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003562:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 800356a:	2300      	movs	r3, #0
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e01e      	b.n	80035ae <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	4a2a      	ldr	r2, [pc, #168]	; (800361c <initializeNodes+0xe4>)
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	4413      	add	r3, r2
 8003578:	330c      	adds	r3, #12
 800357a:	2200      	movs	r2, #0
 800357c:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 800357e:	7ffb      	ldrb	r3, [r7, #31]
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <initializeNodes+0xe4>)
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4413      	add	r3, r2
 8003586:	330a      	adds	r3, #10
 8003588:	2200      	movs	r2, #0
 800358a:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 800358c:	7ffb      	ldrb	r3, [r7, #31]
 800358e:	4a23      	ldr	r2, [pc, #140]	; (800361c <initializeNodes+0xe4>)
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	4413      	add	r3, r2
 8003594:	3308      	adds	r3, #8
 8003596:	2200      	movs	r2, #0
 8003598:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 800359a:	7ffb      	ldrb	r3, [r7, #31]
 800359c:	4a1f      	ldr	r2, [pc, #124]	; (800361c <initializeNodes+0xe4>)
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4413      	add	r3, r2
 80035a2:	330e      	adds	r3, #14
 80035a4:	2200      	movs	r2, #0
 80035a6:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	3301      	adds	r3, #1
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	2b1f      	cmp	r3, #31
 80035b2:	d9dd      	bls.n	8003570 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 80035b4:	2300      	movs	r3, #0
 80035b6:	77fb      	strb	r3, [r7, #31]
 80035b8:	e022      	b.n	8003600 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 80035ba:	7ffa      	ldrb	r2, [r7, #31]
 80035bc:	7ffb      	ldrb	r3, [r7, #31]
 80035be:	f107 0120 	add.w	r1, r7, #32
 80035c2:	440a      	add	r2, r1
 80035c4:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80035c8:	4a14      	ldr	r2, [pc, #80]	; (800361c <initializeNodes+0xe4>)
 80035ca:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 80035cc:	7ffa      	ldrb	r2, [r7, #31]
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	f107 0120 	add.w	r1, r7, #32
 80035d4:	440a      	add	r2, r1
 80035d6:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <initializeNodes+0xe4>)
 80035dc:	4413      	add	r3, r2
 80035de:	460a      	mov	r2, r1
 80035e0:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 80035e2:	7ffa      	ldrb	r2, [r7, #31]
 80035e4:	7ffb      	ldrb	r3, [r7, #31]
 80035e6:	f107 0120 	add.w	r1, r7, #32
 80035ea:	440a      	add	r2, r1
 80035ec:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <initializeNodes+0xe4>)
 80035f2:	4413      	add	r3, r2
 80035f4:	460a      	mov	r2, r1
 80035f6:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 80035fa:	7ffb      	ldrb	r3, [r7, #31]
 80035fc:	3301      	adds	r3, #1
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	7ffb      	ldrb	r3, [r7, #31]
 8003602:	2b07      	cmp	r3, #7
 8003604:	d9d9      	bls.n	80035ba <initializeNodes+0x82>
	}

	return;
 8003606:	bf00      	nop
}
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	08008f4c 	.word	0x08008f4c
 8003614:	08008f54 	.word	0x08008f54
 8003618:	08008f5c 	.word	0x08008f5c
 800361c:	20002568 	.word	0x20002568

08003620 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_MspInit+0x68>)
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_MspInit+0x68>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6193      	str	r3, [r2, #24]
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_MspInit+0x68>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <HAL_MspInit+0x68>)
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4a11      	ldr	r2, [pc, #68]	; (8003688 <HAL_MspInit+0x68>)
 8003644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003648:	61d3      	str	r3, [r2, #28]
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_MspInit+0x68>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	210f      	movs	r1, #15
 800365a:	f06f 0001 	mvn.w	r0, #1
 800365e:	f000 fed0 	bl	8004402 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <HAL_MspInit+0x6c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <HAL_MspInit+0x6c>)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	40010000 	.word	0x40010000

08003690 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	f107 0310 	add.w	r3, r7, #16
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a14      	ldr	r2, [pc, #80]	; (80036fc <HAL_ADC_MspInit+0x6c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d121      	bne.n	80036f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <HAL_ADC_MspInit+0x70>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	4a12      	ldr	r2, [pc, #72]	; (8003700 <HAL_ADC_MspInit+0x70>)
 80036b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036ba:	6193      	str	r3, [r2, #24]
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_ADC_MspInit+0x70>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_ADC_MspInit+0x70>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <HAL_ADC_MspInit+0x70>)
 80036ce:	f043 0310 	orr.w	r3, r3, #16
 80036d2:	6193      	str	r3, [r2, #24]
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_ADC_MspInit+0x70>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036e0:	2320      	movs	r3, #32
 80036e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036e4:	2303      	movs	r3, #3
 80036e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e8:	f107 0310 	add.w	r3, r7, #16
 80036ec:	4619      	mov	r1, r3
 80036ee:	4805      	ldr	r0, [pc, #20]	; (8003704 <HAL_ADC_MspInit+0x74>)
 80036f0:	f000 feb2 	bl	8004458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036f4:	bf00      	nop
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40012400 	.word	0x40012400
 8003700:	40021000 	.word	0x40021000
 8003704:	40011000 	.word	0x40011000

08003708 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a12      	ldr	r2, [pc, #72]	; (8003760 <HAL_TIM_Base_MspInit+0x58>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10c      	bne.n	8003734 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <HAL_TIM_Base_MspInit+0x5c>)
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4a11      	ldr	r2, [pc, #68]	; (8003764 <HAL_TIM_Base_MspInit+0x5c>)
 8003720:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003724:	6193      	str	r3, [r2, #24]
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <HAL_TIM_Base_MspInit+0x5c>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003732:	e010      	b.n	8003756 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373c:	d10b      	bne.n	8003756 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_TIM_Base_MspInit+0x5c>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4a08      	ldr	r2, [pc, #32]	; (8003764 <HAL_TIM_Base_MspInit+0x5c>)
 8003744:	f043 0301 	orr.w	r3, r3, #1
 8003748:	61d3      	str	r3, [r2, #28]
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_TIM_Base_MspInit+0x5c>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	68bb      	ldr	r3, [r7, #8]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	40012c00 	.word	0x40012c00
 8003764:	40021000 	.word	0x40021000

08003768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	f107 0318 	add.w	r3, r7, #24
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a38      	ldr	r2, [pc, #224]	; (8003864 <HAL_UART_MspInit+0xfc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d132      	bne.n	80037ee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003788:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_UART_MspInit+0x100>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	4a36      	ldr	r2, [pc, #216]	; (8003868 <HAL_UART_MspInit+0x100>)
 800378e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003792:	6193      	str	r3, [r2, #24]
 8003794:	4b34      	ldr	r3, [pc, #208]	; (8003868 <HAL_UART_MspInit+0x100>)
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a0:	4b31      	ldr	r3, [pc, #196]	; (8003868 <HAL_UART_MspInit+0x100>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	4a30      	ldr	r2, [pc, #192]	; (8003868 <HAL_UART_MspInit+0x100>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6193      	str	r3, [r2, #24]
 80037ac:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <HAL_UART_MspInit+0x100>)
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037c2:	2303      	movs	r3, #3
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037c6:	f107 0318 	add.w	r3, r7, #24
 80037ca:	4619      	mov	r1, r3
 80037cc:	4827      	ldr	r0, [pc, #156]	; (800386c <HAL_UART_MspInit+0x104>)
 80037ce:	f000 fe43 	bl	8004458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e0:	f107 0318 	add.w	r3, r7, #24
 80037e4:	4619      	mov	r1, r3
 80037e6:	4821      	ldr	r0, [pc, #132]	; (800386c <HAL_UART_MspInit+0x104>)
 80037e8:	f000 fe36 	bl	8004458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037ec:	e036      	b.n	800385c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <HAL_UART_MspInit+0x108>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d131      	bne.n	800385c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_UART_MspInit+0x100>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_UART_MspInit+0x100>)
 80037fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003802:	61d3      	str	r3, [r2, #28]
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <HAL_UART_MspInit+0x100>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003810:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_UART_MspInit+0x100>)
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	4a14      	ldr	r2, [pc, #80]	; (8003868 <HAL_UART_MspInit+0x100>)
 8003816:	f043 0308 	orr.w	r3, r3, #8
 800381a:	6193      	str	r3, [r2, #24]
 800381c:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_UART_MspInit+0x100>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800382c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003832:	2303      	movs	r3, #3
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003836:	f107 0318 	add.w	r3, r7, #24
 800383a:	4619      	mov	r1, r3
 800383c:	480d      	ldr	r0, [pc, #52]	; (8003874 <HAL_UART_MspInit+0x10c>)
 800383e:	f000 fe0b 	bl	8004458 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 0318 	add.w	r3, r7, #24
 8003854:	4619      	mov	r1, r3
 8003856:	4807      	ldr	r0, [pc, #28]	; (8003874 <HAL_UART_MspInit+0x10c>)
 8003858:	f000 fdfe 	bl	8004458 <HAL_GPIO_Init>
}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40013800 	.word	0x40013800
 8003868:	40021000 	.word	0x40021000
 800386c:	40010800 	.word	0x40010800
 8003870:	40004800 	.word	0x40004800
 8003874:	40010c00 	.word	0x40010c00

08003878 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8003888:	2200      	movs	r2, #0
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	201e      	movs	r0, #30
 800388e:	f000 fdb8 	bl	8004402 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003892:	201e      	movs	r0, #30
 8003894:	f000 fdd1 	bl	800443a <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <HAL_InitTick+0xa0>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4a1e      	ldr	r2, [pc, #120]	; (8003918 <HAL_InitTick+0xa0>)
 800389e:	f043 0304 	orr.w	r3, r3, #4
 80038a2:	61d3      	str	r3, [r2, #28]
 80038a4:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <HAL_InitTick+0xa0>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038b0:	f107 0210 	add.w	r2, r7, #16
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fb76 	bl	8004fac <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038c0:	f001 fb4c 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 80038c4:	4603      	mov	r3, r0
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	4a13      	ldr	r2, [pc, #76]	; (800391c <HAL_InitTick+0xa4>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0c9b      	lsrs	r3, r3, #18
 80038d4:	3b01      	subs	r3, #1
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_InitTick+0xa8>)
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <HAL_InitTick+0xac>)
 80038dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <HAL_InitTick+0xa8>)
 80038e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80038e6:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <HAL_InitTick+0xa8>)
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80038ec:	4b0c      	ldr	r3, [pc, #48]	; (8003920 <HAL_InitTick+0xa8>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_InitTick+0xa8>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80038f8:	4809      	ldr	r0, [pc, #36]	; (8003920 <HAL_InitTick+0xa8>)
 80038fa:	f001 fd17 	bl	800532c <HAL_TIM_Base_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003904:	4806      	ldr	r0, [pc, #24]	; (8003920 <HAL_InitTick+0xa8>)
 8003906:	f001 fdd1 	bl	80054ac <HAL_TIM_Base_Start_IT>
 800390a:	4603      	mov	r3, r0
 800390c:	e000      	b.n	8003910 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
}
 8003910:	4618      	mov	r0, r3
 8003912:	3730      	adds	r7, #48	; 0x30
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	431bde83 	.word	0x431bde83
 8003920:	200028c0 	.word	0x200028c0
 8003924:	40000800 	.word	0x40000800

08003928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800392c:	e7fe      	b.n	800392c <NMI_Handler+0x4>

0800392e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003932:	e7fe      	b.n	8003932 <HardFault_Handler+0x4>

08003934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <MemManage_Handler+0x4>

0800393a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800393e:	e7fe      	b.n	800393e <BusFault_Handler+0x4>

08003940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <UsageFault_Handler+0x4>

08003946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
	...

08003954 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <TIM4_IRQHandler+0x10>)
 800395a:	f001 fdf9 	bl	8005550 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	200028c0 	.word	0x200028c0

08003968 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800396c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003970:	f000 fefc 	bl	800476c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}

08003978 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003984:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003986:	e003      	b.n	8003990 <LoopCopyDataInit>

08003988 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800398a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800398c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800398e:	3104      	adds	r1, #4

08003990 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003990:	480a      	ldr	r0, [pc, #40]	; (80039bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003994:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003996:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003998:	d3f6      	bcc.n	8003988 <CopyDataInit>
  ldr r2, =_sbss
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800399c:	e002      	b.n	80039a4 <LoopFillZerobss>

0800399e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800399e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80039a0:	f842 3b04 	str.w	r3, [r2], #4

080039a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80039a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80039a8:	d3f9      	bcc.n	800399e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039aa:	f7ff ffe5 	bl	8003978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ae:	f005 fa2d 	bl	8008e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039b2:	f7fd ff93 	bl	80018dc <main>
  bx lr
 80039b6:	4770      	bx	lr
  ldr r3, =_sidata
 80039b8:	08009150 	.word	0x08009150
  ldr r0, =_sdata
 80039bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80039c0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80039c4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80039c8:	2000294c 	.word	0x2000294c

080039cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039cc:	e7fe      	b.n	80039cc <ADC1_2_IRQHandler>
	...

080039d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_Init+0x28>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_Init+0x28>)
 80039da:	f043 0310 	orr.w	r3, r3, #16
 80039de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e0:	2003      	movs	r0, #3
 80039e2:	f000 fd03 	bl	80043ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7ff ff46 	bl	8003878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ec:	f7ff fe18 	bl	8003620 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_IncTick+0x1c>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <HAL_IncTick+0x20>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a03      	ldr	r2, [pc, #12]	; (8003a1c <HAL_IncTick+0x20>)
 8003a0e:	6013      	str	r3, [r2, #0]
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	20000008 	.word	0x20000008
 8003a1c:	20002908 	.word	0x20002908

08003a20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return uwTick;
 8003a24:	4b02      	ldr	r3, [pc, #8]	; (8003a30 <HAL_GetTick+0x10>)
 8003a26:	681b      	ldr	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bc80      	pop	{r7}
 8003a2e:	4770      	bx	lr
 8003a30:	20002908 	.word	0x20002908

08003a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a3c:	f7ff fff0 	bl	8003a20 <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d005      	beq.n	8003a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a4e:	4b09      	ldr	r3, [pc, #36]	; (8003a74 <HAL_Delay+0x40>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a5a:	bf00      	nop
 8003a5c:	f7ff ffe0 	bl	8003a20 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d8f7      	bhi.n	8003a5c <HAL_Delay+0x28>
  {
  }
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000008 	.word	0x20000008

08003a78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0be      	b.n	8003c18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d109      	bne.n	8003abc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fdea 	bl	8003690 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fbb1 	bl	8004224 <ADC_ConversionStop_Disable>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 8099 	bne.w	8003c06 <HAL_ADC_Init+0x18e>
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 8095 	bne.w	8003c06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ae4:	f023 0302 	bic.w	r3, r3, #2
 8003ae8:	f043 0202 	orr.w	r2, r3, #2
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003af8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7b1b      	ldrb	r3, [r3, #12]
 8003afe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b10:	d003      	beq.n	8003b1a <HAL_ADC_Init+0xa2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d102      	bne.n	8003b20 <HAL_ADC_Init+0xa8>
 8003b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b1e:	e000      	b.n	8003b22 <HAL_ADC_Init+0xaa>
 8003b20:	2300      	movs	r3, #0
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7d1b      	ldrb	r3, [r3, #20]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d119      	bne.n	8003b64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	7b1b      	ldrb	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	035a      	lsls	r2, r3, #13
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	e00b      	b.n	8003b64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <HAL_ADC_Init+0x1a8>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b94:	d003      	beq.n	8003b9e <HAL_ADC_Init+0x126>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d104      	bne.n	8003ba8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	051b      	lsls	r3, r3, #20
 8003ba6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <HAL_ADC_Init+0x1ac>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d10b      	bne.n	8003be4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003be2:	e018      	b.n	8003c16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	f023 0312 	bic.w	r3, r3, #18
 8003bec:	f043 0210 	orr.w	r2, r3, #16
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f043 0201 	orr.w	r2, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c04:	e007      	b.n	8003c16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	f043 0210 	orr.w	r2, r3, #16
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	ffe1f7fd 	.word	0xffe1f7fd
 8003c24:	ff1f0efe 	.word	0xff1f0efe

08003c28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Start+0x1a>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e098      	b.n	8003d74 <HAL_ADC_Start+0x14c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa98 	bl	8004180 <ADC_Enable>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f040 8087 	bne.w	8003d6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a41      	ldr	r2, [pc, #260]	; (8003d7c <HAL_ADC_Start+0x154>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d105      	bne.n	8003c86 <HAL_ADC_Start+0x5e>
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_ADC_Start+0x158>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d115      	bne.n	8003cb2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d026      	beq.n	8003cee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cb0:	e01d      	b.n	8003cee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a2f      	ldr	r2, [pc, #188]	; (8003d80 <HAL_ADC_Start+0x158>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_ADC_Start+0xaa>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <HAL_ADC_Start+0x154>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10d      	bne.n	8003cee <HAL_ADC_Start+0xc6>
 8003cd2:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <HAL_ADC_Start+0x158>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ce6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f023 0206 	bic.w	r2, r3, #6
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d06:	e002      	b.n	8003d0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f06f 0202 	mvn.w	r2, #2
 8003d1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003d2a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003d2e:	d113      	bne.n	8003d58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d34:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <HAL_ADC_Start+0x154>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d105      	bne.n	8003d46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <HAL_ADC_Start+0x158>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d108      	bne.n	8003d58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003d54:	609a      	str	r2, [r3, #8]
 8003d56:	e00c      	b.n	8003d72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	e003      	b.n	8003d72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40012800 	.word	0x40012800
 8003d80:	40012400 	.word	0x40012400

08003d84 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d9a:	f7ff fe41 	bl	8003a20 <HAL_GetTick>
 8003d9e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	f043 0220 	orr.w	r2, r3, #32
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e0c8      	b.n	8003f58 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d12a      	bne.n	8003e2a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dda:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d123      	bne.n	8003e2a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003de2:	e01a      	b.n	8003e1a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d016      	beq.n	8003e1a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d007      	beq.n	8003e02 <HAL_ADC_PollForConversion+0x7e>
 8003df2:	f7ff fe15 	bl	8003a20 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d20b      	bcs.n	8003e1a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e09e      	b.n	8003f58 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0dd      	beq.n	8003de4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003e28:	e06c      	b.n	8003f04 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003e2a:	4b4d      	ldr	r3, [pc, #308]	; (8003f60 <HAL_ADC_PollForConversion+0x1dc>)
 8003e2c:	681c      	ldr	r4, [r3, #0]
 8003e2e:	2002      	movs	r0, #2
 8003e30:	f001 f9c0 	bl	80051b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e34:	4603      	mov	r3, r0
 8003e36:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6919      	ldr	r1, [r3, #16]
 8003e40:	4b48      	ldr	r3, [pc, #288]	; (8003f64 <HAL_ADC_PollForConversion+0x1e0>)
 8003e42:	400b      	ands	r3, r1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d118      	bne.n	8003e7a <HAL_ADC_PollForConversion+0xf6>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68d9      	ldr	r1, [r3, #12]
 8003e4e:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <HAL_ADC_PollForConversion+0x1e4>)
 8003e50:	400b      	ands	r3, r1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d111      	bne.n	8003e7a <HAL_ADC_PollForConversion+0xf6>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6919      	ldr	r1, [r3, #16]
 8003e5c:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_ADC_PollForConversion+0x1e8>)
 8003e5e:	400b      	ands	r3, r1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d108      	bne.n	8003e76 <HAL_ADC_PollForConversion+0xf2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68d9      	ldr	r1, [r3, #12]
 8003e6a:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_ADC_PollForConversion+0x1ec>)
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_PollForConversion+0xf2>
 8003e72:	2314      	movs	r3, #20
 8003e74:	e020      	b.n	8003eb8 <HAL_ADC_PollForConversion+0x134>
 8003e76:	2329      	movs	r3, #41	; 0x29
 8003e78:	e01e      	b.n	8003eb8 <HAL_ADC_PollForConversion+0x134>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6919      	ldr	r1, [r3, #16]
 8003e80:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <HAL_ADC_PollForConversion+0x1e8>)
 8003e82:	400b      	ands	r3, r1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <HAL_ADC_PollForConversion+0x112>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68d9      	ldr	r1, [r3, #12]
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_ADC_PollForConversion+0x1ec>)
 8003e90:	400b      	ands	r3, r1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <HAL_ADC_PollForConversion+0x12e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6919      	ldr	r1, [r3, #16]
 8003e9c:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <HAL_ADC_PollForConversion+0x1f0>)
 8003e9e:	400b      	ands	r3, r1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d108      	bne.n	8003eb6 <HAL_ADC_PollForConversion+0x132>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68d9      	ldr	r1, [r3, #12]
 8003eaa:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <HAL_ADC_PollForConversion+0x1f0>)
 8003eac:	400b      	ands	r3, r1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_ADC_PollForConversion+0x132>
 8003eb2:	2354      	movs	r3, #84	; 0x54
 8003eb4:	e000      	b.n	8003eb8 <HAL_ADC_PollForConversion+0x134>
 8003eb6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003ebe:	e01d      	b.n	8003efc <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec6:	d016      	beq.n	8003ef6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <HAL_ADC_PollForConversion+0x15a>
 8003ece:	f7ff fda7 	bl	8003a20 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d20b      	bcs.n	8003ef6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	f043 0204 	orr.w	r2, r3, #4
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e030      	b.n	8003f58 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d8dd      	bhi.n	8003ec0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0212 	mvn.w	r2, #18
 8003f0c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003f24:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003f28:	d115      	bne.n	8003f56 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d111      	bne.n	8003f56 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d105      	bne.n	8003f56 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	f043 0201 	orr.w	r2, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	371c      	adds	r7, #28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd90      	pop	{r4, r7, pc}
 8003f60:	20000000 	.word	0x20000000
 8003f64:	24924924 	.word	0x24924924
 8003f68:	00924924 	.word	0x00924924
 8003f6c:	12492492 	.word	0x12492492
 8003f70:	00492492 	.word	0x00492492
 8003f74:	00249249 	.word	0x00249249

08003f78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_ADC_ConfigChannel+0x20>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e0dc      	b.n	800416a <HAL_ADC_ConfigChannel+0x1da>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b06      	cmp	r3, #6
 8003fbe:	d81c      	bhi.n	8003ffa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	3b05      	subs	r3, #5
 8003fd2:	221f      	movs	r2, #31
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	4019      	ands	r1, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	3b05      	subs	r3, #5
 8003fec:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	635a      	str	r2, [r3, #52]	; 0x34
 8003ff8:	e03c      	b.n	8004074 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b0c      	cmp	r3, #12
 8004000:	d81c      	bhi.n	800403c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	3b23      	subs	r3, #35	; 0x23
 8004014:	221f      	movs	r2, #31
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	43db      	mvns	r3, r3
 800401c:	4019      	ands	r1, r3
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	3b23      	subs	r3, #35	; 0x23
 800402e:	fa00 f203 	lsl.w	r2, r0, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	631a      	str	r2, [r3, #48]	; 0x30
 800403a:	e01b      	b.n	8004074 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	3b41      	subs	r3, #65	; 0x41
 800404e:	221f      	movs	r2, #31
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	4019      	ands	r1, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	3b41      	subs	r3, #65	; 0x41
 8004068:	fa00 f203 	lsl.w	r2, r0, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b09      	cmp	r3, #9
 800407a:	d91c      	bls.n	80040b6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68d9      	ldr	r1, [r3, #12]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	3b1e      	subs	r3, #30
 800408e:	2207      	movs	r2, #7
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	4019      	ands	r1, r3
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6898      	ldr	r0, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	3b1e      	subs	r3, #30
 80040a8:	fa00 f203 	lsl.w	r2, r0, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	e019      	b.n	80040ea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6919      	ldr	r1, [r3, #16]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4413      	add	r3, r2
 80040c6:	2207      	movs	r2, #7
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	4019      	ands	r1, r3
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6898      	ldr	r0, [r3, #8]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	4413      	add	r3, r2
 80040de:	fa00 f203 	lsl.w	r2, r0, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b10      	cmp	r3, #16
 80040f0:	d003      	beq.n	80040fa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80040f6:	2b11      	cmp	r3, #17
 80040f8:	d132      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1d      	ldr	r2, [pc, #116]	; (8004174 <HAL_ADC_ConfigChannel+0x1e4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d125      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d126      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004120:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b10      	cmp	r3, #16
 8004128:	d11a      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_ADC_ConfigChannel+0x1e8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <HAL_ADC_ConfigChannel+0x1ec>)
 8004130:	fba2 2303 	umull	r2, r3, r2, r3
 8004134:	0c9a      	lsrs	r2, r3, #18
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004140:	e002      	b.n	8004148 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3b01      	subs	r3, #1
 8004146:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f9      	bne.n	8004142 <HAL_ADC_ConfigChannel+0x1b2>
 800414e:	e007      	b.n	8004160 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr
 8004174:	40012400 	.word	0x40012400
 8004178:	20000000 	.word	0x20000000
 800417c:	431bde83 	.word	0x431bde83

08004180 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800418c:	2300      	movs	r3, #0
 800418e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d039      	beq.n	8004212 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041ae:	4b1b      	ldr	r3, [pc, #108]	; (800421c <ADC_Enable+0x9c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <ADC_Enable+0xa0>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	0c9b      	lsrs	r3, r3, #18
 80041ba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80041bc:	e002      	b.n	80041c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f9      	bne.n	80041be <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80041ca:	f7ff fc29 	bl	8003a20 <HAL_GetTick>
 80041ce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80041d0:	e018      	b.n	8004204 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041d2:	f7ff fc25 	bl	8003a20 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d911      	bls.n	8004204 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	f043 0210 	orr.w	r2, r3, #16
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e007      	b.n	8004214 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b01      	cmp	r3, #1
 8004210:	d1df      	bne.n	80041d2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000000 	.word	0x20000000
 8004220:	431bde83 	.word	0x431bde83

08004224 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d127      	bne.n	800428e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800424e:	f7ff fbe7 	bl	8003a20 <HAL_GetTick>
 8004252:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004254:	e014      	b.n	8004280 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004256:	f7ff fbe3 	bl	8003a20 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d90d      	bls.n	8004280 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	f043 0210 	orr.w	r2, r3, #16
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004274:	f043 0201 	orr.w	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e007      	b.n	8004290 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d0e3      	beq.n	8004256 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042b4:	4013      	ands	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ca:	4a04      	ldr	r2, [pc, #16]	; (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	60d3      	str	r3, [r2, #12]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <__NVIC_GetPriorityGrouping+0x18>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 0307 	and.w	r3, r3, #7
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db0b      	blt.n	8004326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	4906      	ldr	r1, [pc, #24]	; (8004330 <__NVIC_EnableIRQ+0x34>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2001      	movs	r0, #1
 800431e:	fa00 f202 	lsl.w	r2, r0, r2
 8004322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	e000e100 	.word	0xe000e100

08004334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	6039      	str	r1, [r7, #0]
 800433e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004344:	2b00      	cmp	r3, #0
 8004346:	db0a      	blt.n	800435e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	b2da      	uxtb	r2, r3
 800434c:	490c      	ldr	r1, [pc, #48]	; (8004380 <__NVIC_SetPriority+0x4c>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	0112      	lsls	r2, r2, #4
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	440b      	add	r3, r1
 8004358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800435c:	e00a      	b.n	8004374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4908      	ldr	r1, [pc, #32]	; (8004384 <__NVIC_SetPriority+0x50>)
 8004364:	79fb      	ldrb	r3, [r7, #7]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	3b04      	subs	r3, #4
 800436c:	0112      	lsls	r2, r2, #4
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	440b      	add	r3, r1
 8004372:	761a      	strb	r2, [r3, #24]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000e100 	.word	0xe000e100
 8004384:	e000ed00 	.word	0xe000ed00

08004388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004388:	b480      	push	{r7}
 800438a:	b089      	sub	sp, #36	; 0x24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f1c3 0307 	rsb	r3, r3, #7
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	bf28      	it	cs
 80043a6:	2304      	movcs	r3, #4
 80043a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3304      	adds	r3, #4
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d902      	bls.n	80043b8 <NVIC_EncodePriority+0x30>
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3b03      	subs	r3, #3
 80043b6:	e000      	b.n	80043ba <NVIC_EncodePriority+0x32>
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043bc:	f04f 32ff 	mov.w	r2, #4294967295
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43da      	mvns	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	401a      	ands	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d0:	f04f 31ff 	mov.w	r1, #4294967295
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fa01 f303 	lsl.w	r3, r1, r3
 80043da:	43d9      	mvns	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e0:	4313      	orrs	r3, r2
         );
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3724      	adds	r7, #36	; 0x24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr

080043ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff ff4f 	bl	8004298 <__NVIC_SetPriorityGrouping>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004414:	f7ff ff64 	bl	80042e0 <__NVIC_GetPriorityGrouping>
 8004418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	6978      	ldr	r0, [r7, #20]
 8004420:	f7ff ffb2 	bl	8004388 <NVIC_EncodePriority>
 8004424:	4602      	mov	r2, r0
 8004426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800442a:	4611      	mov	r1, r2
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff81 	bl	8004334 <__NVIC_SetPriority>
}
 8004432:	bf00      	nop
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff57 	bl	80042fc <__NVIC_EnableIRQ>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004458:	b480      	push	{r7}
 800445a:	b08b      	sub	sp, #44	; 0x2c
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004462:	2300      	movs	r3, #0
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800446a:	e127      	b.n	80046bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800446c:	2201      	movs	r2, #1
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69fa      	ldr	r2, [r7, #28]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	f040 8116 	bne.w	80046b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b12      	cmp	r3, #18
 8004490:	d034      	beq.n	80044fc <HAL_GPIO_Init+0xa4>
 8004492:	2b12      	cmp	r3, #18
 8004494:	d80d      	bhi.n	80044b2 <HAL_GPIO_Init+0x5a>
 8004496:	2b02      	cmp	r3, #2
 8004498:	d02b      	beq.n	80044f2 <HAL_GPIO_Init+0x9a>
 800449a:	2b02      	cmp	r3, #2
 800449c:	d804      	bhi.n	80044a8 <HAL_GPIO_Init+0x50>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d031      	beq.n	8004506 <HAL_GPIO_Init+0xae>
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d01c      	beq.n	80044e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80044a6:	e048      	b.n	800453a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d043      	beq.n	8004534 <HAL_GPIO_Init+0xdc>
 80044ac:	2b11      	cmp	r3, #17
 80044ae:	d01b      	beq.n	80044e8 <HAL_GPIO_Init+0x90>
          break;
 80044b0:	e043      	b.n	800453a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044b2:	4a89      	ldr	r2, [pc, #548]	; (80046d8 <HAL_GPIO_Init+0x280>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d026      	beq.n	8004506 <HAL_GPIO_Init+0xae>
 80044b8:	4a87      	ldr	r2, [pc, #540]	; (80046d8 <HAL_GPIO_Init+0x280>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d806      	bhi.n	80044cc <HAL_GPIO_Init+0x74>
 80044be:	4a87      	ldr	r2, [pc, #540]	; (80046dc <HAL_GPIO_Init+0x284>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d020      	beq.n	8004506 <HAL_GPIO_Init+0xae>
 80044c4:	4a86      	ldr	r2, [pc, #536]	; (80046e0 <HAL_GPIO_Init+0x288>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01d      	beq.n	8004506 <HAL_GPIO_Init+0xae>
          break;
 80044ca:	e036      	b.n	800453a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80044cc:	4a85      	ldr	r2, [pc, #532]	; (80046e4 <HAL_GPIO_Init+0x28c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d019      	beq.n	8004506 <HAL_GPIO_Init+0xae>
 80044d2:	4a85      	ldr	r2, [pc, #532]	; (80046e8 <HAL_GPIO_Init+0x290>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d016      	beq.n	8004506 <HAL_GPIO_Init+0xae>
 80044d8:	4a84      	ldr	r2, [pc, #528]	; (80046ec <HAL_GPIO_Init+0x294>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_GPIO_Init+0xae>
          break;
 80044de:	e02c      	b.n	800453a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	623b      	str	r3, [r7, #32]
          break;
 80044e6:	e028      	b.n	800453a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	3304      	adds	r3, #4
 80044ee:	623b      	str	r3, [r7, #32]
          break;
 80044f0:	e023      	b.n	800453a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	3308      	adds	r3, #8
 80044f8:	623b      	str	r3, [r7, #32]
          break;
 80044fa:	e01e      	b.n	800453a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	330c      	adds	r3, #12
 8004502:	623b      	str	r3, [r7, #32]
          break;
 8004504:	e019      	b.n	800453a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d102      	bne.n	8004514 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800450e:	2304      	movs	r3, #4
 8004510:	623b      	str	r3, [r7, #32]
          break;
 8004512:	e012      	b.n	800453a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d105      	bne.n	8004528 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800451c:	2308      	movs	r3, #8
 800451e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	611a      	str	r2, [r3, #16]
          break;
 8004526:	e008      	b.n	800453a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004528:	2308      	movs	r3, #8
 800452a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	615a      	str	r2, [r3, #20]
          break;
 8004532:	e002      	b.n	800453a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
          break;
 8004538:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2bff      	cmp	r3, #255	; 0xff
 800453e:	d801      	bhi.n	8004544 <HAL_GPIO_Init+0xec>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	e001      	b.n	8004548 <HAL_GPIO_Init+0xf0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2bff      	cmp	r3, #255	; 0xff
 800454e:	d802      	bhi.n	8004556 <HAL_GPIO_Init+0xfe>
 8004550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	e002      	b.n	800455c <HAL_GPIO_Init+0x104>
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	3b08      	subs	r3, #8
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	210f      	movs	r1, #15
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	401a      	ands	r2, r3
 800456e:	6a39      	ldr	r1, [r7, #32]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	431a      	orrs	r2, r3
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8096 	beq.w	80046b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800458a:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_GPIO_Init+0x298>)
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	4a58      	ldr	r2, [pc, #352]	; (80046f0 <HAL_GPIO_Init+0x298>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6193      	str	r3, [r2, #24]
 8004596:	4b56      	ldr	r3, [pc, #344]	; (80046f0 <HAL_GPIO_Init+0x298>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80045a2:	4a54      	ldr	r2, [pc, #336]	; (80046f4 <HAL_GPIO_Init+0x29c>)
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	3302      	adds	r3, #2
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	220f      	movs	r2, #15
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4013      	ands	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a4b      	ldr	r2, [pc, #300]	; (80046f8 <HAL_GPIO_Init+0x2a0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_GPIO_Init+0x19e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a4a      	ldr	r2, [pc, #296]	; (80046fc <HAL_GPIO_Init+0x2a4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00d      	beq.n	80045f2 <HAL_GPIO_Init+0x19a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a49      	ldr	r2, [pc, #292]	; (8004700 <HAL_GPIO_Init+0x2a8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <HAL_GPIO_Init+0x196>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a48      	ldr	r2, [pc, #288]	; (8004704 <HAL_GPIO_Init+0x2ac>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d101      	bne.n	80045ea <HAL_GPIO_Init+0x192>
 80045e6:	2303      	movs	r3, #3
 80045e8:	e006      	b.n	80045f8 <HAL_GPIO_Init+0x1a0>
 80045ea:	2304      	movs	r3, #4
 80045ec:	e004      	b.n	80045f8 <HAL_GPIO_Init+0x1a0>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e002      	b.n	80045f8 <HAL_GPIO_Init+0x1a0>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <HAL_GPIO_Init+0x1a0>
 80045f6:	2300      	movs	r3, #0
 80045f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fa:	f002 0203 	and.w	r2, r2, #3
 80045fe:	0092      	lsls	r2, r2, #2
 8004600:	4093      	lsls	r3, r2
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004608:	493a      	ldr	r1, [pc, #232]	; (80046f4 <HAL_GPIO_Init+0x29c>)
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	3302      	adds	r3, #2
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d006      	beq.n	8004630 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004622:	4b39      	ldr	r3, [pc, #228]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	4938      	ldr	r1, [pc, #224]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]
 800462e:	e006      	b.n	800463e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004630:	4b35      	ldr	r3, [pc, #212]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	43db      	mvns	r3, r3
 8004638:	4933      	ldr	r1, [pc, #204]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 800463a:	4013      	ands	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800464a:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	492e      	ldr	r1, [pc, #184]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
 8004656:	e006      	b.n	8004666 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	43db      	mvns	r3, r3
 8004660:	4929      	ldr	r1, [pc, #164]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 8004662:	4013      	ands	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004672:	4b25      	ldr	r3, [pc, #148]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	4924      	ldr	r1, [pc, #144]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
 800467e:	e006      	b.n	800468e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004680:	4b21      	ldr	r3, [pc, #132]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	43db      	mvns	r3, r3
 8004688:	491f      	ldr	r1, [pc, #124]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 800468a:	4013      	ands	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	491a      	ldr	r1, [pc, #104]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60cb      	str	r3, [r1, #12]
 80046a6:	e006      	b.n	80046b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80046a8:	4b17      	ldr	r3, [pc, #92]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	4915      	ldr	r1, [pc, #84]	; (8004708 <HAL_GPIO_Init+0x2b0>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	3301      	adds	r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f47f aed0 	bne.w	800446c <HAL_GPIO_Init+0x14>
  }
}
 80046cc:	bf00      	nop
 80046ce:	372c      	adds	r7, #44	; 0x2c
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	10210000 	.word	0x10210000
 80046dc:	10110000 	.word	0x10110000
 80046e0:	10120000 	.word	0x10120000
 80046e4:	10310000 	.word	0x10310000
 80046e8:	10320000 	.word	0x10320000
 80046ec:	10220000 	.word	0x10220000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40010000 	.word	0x40010000
 80046f8:	40010800 	.word	0x40010800
 80046fc:	40010c00 	.word	0x40010c00
 8004700:	40011000 	.word	0x40011000
 8004704:	40011400 	.word	0x40011400
 8004708:	40010400 	.word	0x40010400

0800470c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004724:	2301      	movs	r3, #1
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e001      	b.n	800472e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800472e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	807b      	strh	r3, [r7, #2]
 8004746:	4613      	mov	r3, r2
 8004748:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800474a:	787b      	ldrb	r3, [r7, #1]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004750:	887a      	ldrh	r2, [r7, #2]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004756:	e003      	b.n	8004760 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004758:	887b      	ldrh	r3, [r7, #2]
 800475a:	041a      	lsls	r2, r3, #16
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	611a      	str	r2, [r3, #16]
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr
	...

0800476c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	4603      	mov	r3, r0
 8004774:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004776:	4b08      	ldr	r3, [pc, #32]	; (8004798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	88fb      	ldrh	r3, [r7, #6]
 800477c:	4013      	ands	r3, r2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d006      	beq.n	8004790 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004782:	4a05      	ldr	r2, [pc, #20]	; (8004798 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004788:	88fb      	ldrh	r3, [r7, #6]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f806 	bl	800479c <HAL_GPIO_EXTI_Callback>
  }
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	40010400 	.word	0x40010400

0800479c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e26c      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 8087 	beq.w	80048de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047d0:	4b92      	ldr	r3, [pc, #584]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f003 030c 	and.w	r3, r3, #12
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d00c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047dc:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d112      	bne.n	800480e <HAL_RCC_OscConfig+0x5e>
 80047e8:	4b8c      	ldr	r3, [pc, #560]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d10b      	bne.n	800480e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f6:	4b89      	ldr	r3, [pc, #548]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d06c      	beq.n	80048dc <HAL_RCC_OscConfig+0x12c>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d168      	bne.n	80048dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e246      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d106      	bne.n	8004826 <HAL_RCC_OscConfig+0x76>
 8004818:	4b80      	ldr	r3, [pc, #512]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7f      	ldr	r2, [pc, #508]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	e02e      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x98>
 800482e:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a7a      	ldr	r2, [pc, #488]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	4b78      	ldr	r3, [pc, #480]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a77      	ldr	r2, [pc, #476]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	e01d      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004850:	d10c      	bne.n	800486c <HAL_RCC_OscConfig+0xbc>
 8004852:	4b72      	ldr	r3, [pc, #456]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a71      	ldr	r2, [pc, #452]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	4b6f      	ldr	r3, [pc, #444]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a6e      	ldr	r2, [pc, #440]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	e00b      	b.n	8004884 <HAL_RCC_OscConfig+0xd4>
 800486c:	4b6b      	ldr	r3, [pc, #428]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a6a      	ldr	r2, [pc, #424]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	4b68      	ldr	r3, [pc, #416]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a67      	ldr	r2, [pc, #412]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 800487e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7ff f8c8 	bl	8003a20 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7ff f8c4 	bl	8003a20 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1fa      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a6:	4b5d      	ldr	r3, [pc, #372]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0xe4>
 80048b2:	e014      	b.n	80048de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b4:	f7ff f8b4 	bl	8003a20 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7ff f8b0 	bl	8003a20 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e1e6      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ce:	4b53      	ldr	r3, [pc, #332]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x10c>
 80048da:	e000      	b.n	80048de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d063      	beq.n	80049b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048ea:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00b      	beq.n	800490e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048f6:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d11c      	bne.n	800493c <HAL_RCC_OscConfig+0x18c>
 8004902:	4b46      	ldr	r3, [pc, #280]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d116      	bne.n	800493c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_RCC_OscConfig+0x176>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e1ba      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004926:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4939      	ldr	r1, [pc, #228]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493a:	e03a      	b.n	80049b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d020      	beq.n	8004986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004944:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7ff f869 	bl	8003a20 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004952:	f7ff f865 	bl	8003a20 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e19b      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004964:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004970:	4b2a      	ldr	r3, [pc, #168]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4927      	ldr	r1, [pc, #156]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
 8004984:	e015      	b.n	80049b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004986:	4b26      	ldr	r3, [pc, #152]	; (8004a20 <HAL_RCC_OscConfig+0x270>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7ff f848 	bl	8003a20 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7ff f844 	bl	8003a20 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e17a      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a6:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0308 	and.w	r3, r3, #8
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d03a      	beq.n	8004a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d019      	beq.n	80049fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c6:	4b17      	ldr	r3, [pc, #92]	; (8004a24 <HAL_RCC_OscConfig+0x274>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049cc:	f7ff f828 	bl	8003a20 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d4:	f7ff f824 	bl	8003a20 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e15a      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e6:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_RCC_OscConfig+0x26c>)
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049f2:	2001      	movs	r0, #1
 80049f4:	f000 fb0a 	bl	800500c <RCC_Delay>
 80049f8:	e01c      	b.n	8004a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <HAL_RCC_OscConfig+0x274>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a00:	f7ff f80e 	bl	8003a20 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a06:	e00f      	b.n	8004a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a08:	f7ff f80a 	bl	8003a20 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d908      	bls.n	8004a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e140      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	42420000 	.word	0x42420000
 8004a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a28:	4b9e      	ldr	r3, [pc, #632]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e9      	bne.n	8004a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a6 	beq.w	8004b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a42:	2300      	movs	r3, #0
 8004a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a46:	4b97      	ldr	r3, [pc, #604]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10d      	bne.n	8004a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a52:	4b94      	ldr	r3, [pc, #592]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4a93      	ldr	r2, [pc, #588]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	61d3      	str	r3, [r2, #28]
 8004a5e:	4b91      	ldr	r3, [pc, #580]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a6e:	4b8e      	ldr	r3, [pc, #568]	; (8004ca8 <HAL_RCC_OscConfig+0x4f8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d118      	bne.n	8004aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a7a:	4b8b      	ldr	r3, [pc, #556]	; (8004ca8 <HAL_RCC_OscConfig+0x4f8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a8a      	ldr	r2, [pc, #552]	; (8004ca8 <HAL_RCC_OscConfig+0x4f8>)
 8004a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a86:	f7fe ffcb 	bl	8003a20 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a8e:	f7fe ffc7 	bl	8003a20 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b64      	cmp	r3, #100	; 0x64
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e0fd      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa0:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <HAL_RCC_OscConfig+0x4f8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x312>
 8004ab4:	4b7b      	ldr	r3, [pc, #492]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	4a7a      	ldr	r2, [pc, #488]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004aba:	f043 0301 	orr.w	r3, r3, #1
 8004abe:	6213      	str	r3, [r2, #32]
 8004ac0:	e02d      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x334>
 8004aca:	4b76      	ldr	r3, [pc, #472]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	4a75      	ldr	r2, [pc, #468]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	6213      	str	r3, [r2, #32]
 8004ad6:	4b73      	ldr	r3, [pc, #460]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4a72      	ldr	r2, [pc, #456]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004adc:	f023 0304 	bic.w	r3, r3, #4
 8004ae0:	6213      	str	r3, [r2, #32]
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0x356>
 8004aec:	4b6d      	ldr	r3, [pc, #436]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	4a6c      	ldr	r2, [pc, #432]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	6213      	str	r3, [r2, #32]
 8004af8:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	4a69      	ldr	r2, [pc, #420]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6213      	str	r3, [r2, #32]
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0x36e>
 8004b06:	4b67      	ldr	r3, [pc, #412]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4a66      	ldr	r2, [pc, #408]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6213      	str	r3, [r2, #32]
 8004b12:	4b64      	ldr	r3, [pc, #400]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	4a63      	ldr	r2, [pc, #396]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d015      	beq.n	8004b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b26:	f7fe ff7b 	bl	8003a20 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fe ff77 	bl	8003a20 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0ab      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b57      	ldr	r3, [pc, #348]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCC_OscConfig+0x37e>
 8004b50:	e014      	b.n	8004b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7fe ff65 	bl	8003a20 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fe ff61 	bl	8003a20 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e095      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ee      	bne.n	8004b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4a47      	ldr	r2, [pc, #284]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8081 	beq.w	8004c9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b98:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d061      	beq.n	8004c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d146      	bne.n	8004c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <HAL_RCC_OscConfig+0x4fc>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7fe ff35 	bl	8003a20 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bba:	f7fe ff31 	bl	8003a20 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e067      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bcc:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be0:	d108      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004be2:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	492d      	ldr	r1, [pc, #180]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a19      	ldr	r1, [r3, #32]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	430b      	orrs	r3, r1
 8004c06:	4927      	ldr	r1, [pc, #156]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c0c:	4b27      	ldr	r3, [pc, #156]	; (8004cac <HAL_RCC_OscConfig+0x4fc>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c12:	f7fe ff05 	bl	8003a20 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7fe ff01 	bl	8003a20 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e037      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCC_OscConfig+0x46a>
 8004c38:	e02f      	b.n	8004c9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	; (8004cac <HAL_RCC_OscConfig+0x4fc>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe feee 	bl	8003a20 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c48:	f7fe feea 	bl	8003a20 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e020      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x498>
 8004c66:	e018      	b.n	8004c9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e013      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_OscConfig+0x4f4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	42420060 	.word	0x42420060

08004cb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e0d0      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d910      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b67      	ldr	r3, [pc, #412]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 0207 	bic.w	r2, r3, #7
 8004cda:	4965      	ldr	r1, [pc, #404]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b63      	ldr	r3, [pc, #396]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0b8      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d0c:	4b59      	ldr	r3, [pc, #356]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a58      	ldr	r2, [pc, #352]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d24:	4b53      	ldr	r3, [pc, #332]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a52      	ldr	r2, [pc, #328]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b50      	ldr	r3, [pc, #320]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	494d      	ldr	r1, [pc, #308]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d040      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d115      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d107      	bne.n	8004d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e073      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d7e:	4b3d      	ldr	r3, [pc, #244]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e06b      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d8e:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f023 0203 	bic.w	r2, r3, #3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	4936      	ldr	r1, [pc, #216]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da0:	f7fe fe3e 	bl	8003a20 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004da8:	f7fe fe3a 	bl	8003a20 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e053      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dbe:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 020c 	and.w	r2, r3, #12
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d1eb      	bne.n	8004da8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d210      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 0207 	bic.w	r2, r3, #7
 8004de6:	4922      	ldr	r1, [pc, #136]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e032      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b19      	ldr	r3, [pc, #100]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4916      	ldr	r1, [pc, #88]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	490e      	ldr	r1, [pc, #56]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e3e:	f000 f821 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e42:	4601      	mov	r1, r0
 8004e44:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <HAL_RCC_ClockConfig+0x1c4>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	5cd3      	ldrb	r3, [r2, r3]
 8004e52:	fa21 f303 	lsr.w	r3, r1, r3
 8004e56:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <HAL_RCC_ClockConfig+0x1cc>)
 8004e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <HAL_RCC_ClockConfig+0x1d0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fd0a 	bl	8003878 <HAL_InitTick>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40022000 	.word	0x40022000
 8004e74:	40021000 	.word	0x40021000
 8004e78:	08009130 	.word	0x08009130
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	20000004 	.word	0x20000004

08004e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b490      	push	{r4, r7}
 8004e86:	b08a      	sub	sp, #40	; 0x28
 8004e88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004e8a:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004e8c:	1d3c      	adds	r4, r7, #4
 8004e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004e94:	4b28      	ldr	r3, [pc, #160]	; (8004f38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e96:	881b      	ldrh	r3, [r3, #0]
 8004e98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004eae:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d002      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d003      	beq.n	8004eca <HAL_RCC_GetSysClockFreq+0x46>
 8004ec2:	e02d      	b.n	8004f20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ec4:	4b1e      	ldr	r3, [pc, #120]	; (8004f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ec6:	623b      	str	r3, [r7, #32]
      break;
 8004ec8:	e02d      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	0c9b      	lsrs	r3, r3, #18
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004edc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c5b      	lsrs	r3, r3, #17
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004efc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4a0f      	ldr	r2, [pc, #60]	; (8004f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f02:	fb02 f203 	mul.w	r2, r2, r3
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f0e:	e004      	b.n	8004f1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	4a0c      	ldr	r2, [pc, #48]	; (8004f44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	623b      	str	r3, [r7, #32]
      break;
 8004f1e:	e002      	b.n	8004f26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f22:	623b      	str	r3, [r7, #32]
      break;
 8004f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f26:	6a3b      	ldr	r3, [r7, #32]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3728      	adds	r7, #40	; 0x28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc90      	pop	{r4, r7}
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	08008f64 	.word	0x08008f64
 8004f38:	08008f74 	.word	0x08008f74
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	007a1200 	.word	0x007a1200
 8004f44:	003d0900 	.word	0x003d0900

08004f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f4c:	4b02      	ldr	r3, [pc, #8]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	20000000 	.word	0x20000000

08004f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f60:	f7ff fff2 	bl	8004f48 <HAL_RCC_GetHCLKFreq>
 8004f64:	4601      	mov	r1, r0
 8004f66:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	4a03      	ldr	r2, [pc, #12]	; (8004f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f72:	5cd3      	ldrb	r3, [r2, r3]
 8004f74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	08009140 	.word	0x08009140

08004f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f88:	f7ff ffde 	bl	8004f48 <HAL_RCC_GetHCLKFreq>
 8004f8c:	4601      	mov	r1, r0
 8004f8e:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	0adb      	lsrs	r3, r3, #11
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	4a03      	ldr	r2, [pc, #12]	; (8004fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f9a:	5cd3      	ldrb	r3, [r2, r3]
 8004f9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	08009140 	.word	0x08009140

08004fac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	220f      	movs	r2, #15
 8004fba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fbc:	4b11      	ldr	r3, [pc, #68]	; (8005004 <HAL_RCC_GetClockConfig+0x58>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0203 	and.w	r2, r3, #3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <HAL_RCC_GetClockConfig+0x58>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fd4:	4b0b      	ldr	r3, [pc, #44]	; (8005004 <HAL_RCC_GetClockConfig+0x58>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004fe0:	4b08      	ldr	r3, [pc, #32]	; (8005004 <HAL_RCC_GetClockConfig+0x58>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0207 	and.w	r2, r3, #7
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	40021000 	.word	0x40021000
 8005008:	40022000 	.word	0x40022000

0800500c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <RCC_Delay+0x34>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a0a      	ldr	r2, [pc, #40]	; (8005044 <RCC_Delay+0x38>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	0a5b      	lsrs	r3, r3, #9
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	fb02 f303 	mul.w	r3, r2, r3
 8005026:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005028:	bf00      	nop
  }
  while (Delay --);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1e5a      	subs	r2, r3, #1
 800502e:	60fa      	str	r2, [r7, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1f9      	bne.n	8005028 <RCC_Delay+0x1c>
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20000000 	.word	0x20000000
 8005044:	10624dd3 	.word	0x10624dd3

08005048 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d07d      	beq.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005064:	2300      	movs	r3, #0
 8005066:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005068:	4b4f      	ldr	r3, [pc, #316]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10d      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005074:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	4a4b      	ldr	r2, [pc, #300]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800507a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507e:	61d3      	str	r3, [r2, #28]
 8005080:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005088:	60bb      	str	r3, [r7, #8]
 800508a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800508c:	2301      	movs	r3, #1
 800508e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005090:	4b46      	ldr	r3, [pc, #280]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d118      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509c:	4b43      	ldr	r3, [pc, #268]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a42      	ldr	r2, [pc, #264]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a8:	f7fe fcba 	bl	8003a20 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ae:	e008      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b0:	f7fe fcb6 	bl	8003a20 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e06d      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c2:	4b3a      	ldr	r3, [pc, #232]	; (80051ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ce:	4b36      	ldr	r3, [pc, #216]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02e      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d027      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ec:	4b2e      	ldr	r3, [pc, #184]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050f6:	4b2e      	ldr	r3, [pc, #184]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050fc:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005102:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d014      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005112:	f7fe fc85 	bl	8003a20 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	e00a      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511a:	f7fe fc81 	bl	8003a20 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f241 3288 	movw	r2, #5000	; 0x1388
 8005128:	4293      	cmp	r3, r2
 800512a:	d901      	bls.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e036      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ee      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800513c:	4b1a      	ldr	r3, [pc, #104]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800513e:	6a1b      	ldr	r3, [r3, #32]
 8005140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4917      	ldr	r1, [pc, #92]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	4313      	orrs	r3, r2
 800514c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800514e:	7dfb      	ldrb	r3, [r7, #23]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d105      	bne.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800515a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800515e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800516c:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	490b      	ldr	r1, [pc, #44]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517a:	4313      	orrs	r3, r2
 800517c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0310 	and.w	r3, r3, #16
 8005186:	2b00      	cmp	r3, #0
 8005188:	d008      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	4904      	ldr	r1, [pc, #16]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005198:	4313      	orrs	r3, r2
 800519a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	40021000 	.word	0x40021000
 80051ac:	40007000 	.word	0x40007000
 80051b0:	42420440 	.word	0x42420440

080051b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80051b4:	b590      	push	{r4, r7, lr}
 80051b6:	b08d      	sub	sp, #52	; 0x34
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051bc:	4b55      	ldr	r3, [pc, #340]	; (8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80051be:	f107 040c 	add.w	r4, r7, #12
 80051c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051c8:	4b53      	ldr	r3, [pc, #332]	; (8005318 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24
 80051d2:	2300      	movs	r3, #0
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d6:	2300      	movs	r3, #0
 80051d8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	2300      	movs	r3, #0
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d07f      	beq.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80051e8:	2b10      	cmp	r3, #16
 80051ea:	d002      	beq.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d048      	beq.n	8005282 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80051f0:	e08b      	b.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80051f2:	4b4a      	ldr	r3, [pc, #296]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80051f8:	4b48      	ldr	r3, [pc, #288]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d07f      	beq.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	0c9b      	lsrs	r3, r3, #18
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005210:	4413      	add	r3, r2
 8005212:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005216:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d018      	beq.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005222:	4b3e      	ldr	r3, [pc, #248]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	0c5b      	lsrs	r3, r3, #17
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005230:	4413      	add	r3, r2
 8005232:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005236:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005242:	4a37      	ldr	r2, [pc, #220]	; (8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	fbb2 f2f3 	udiv	r2, r2, r3
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	fb02 f303 	mul.w	r3, r2, r3
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005252:	e004      	b.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	4a33      	ldr	r2, [pc, #204]	; (8005324 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005258:	fb02 f303 	mul.w	r3, r2, r3
 800525c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800525e:	4b2f      	ldr	r3, [pc, #188]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526a:	d102      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005270:	e048      	b.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4a2c      	ldr	r2, [pc, #176]	; (8005328 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8005278:	fba2 2303 	umull	r2, r3, r2, r3
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005280:	e040      	b.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8005282:	4b26      	ldr	r3, [pc, #152]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800528e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005292:	d108      	bne.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	e01f      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b0:	d109      	bne.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80052b2:	4b1a      	ldr	r3, [pc, #104]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80052be:	f649 4340 	movw	r3, #40000	; 0x9c40
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c4:	e00f      	b.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d0:	d11a      	bne.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80052d2:	4b12      	ldr	r3, [pc, #72]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d014      	beq.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80052de:	f24f 4324 	movw	r3, #62500	; 0xf424
 80052e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80052e4:	e010      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80052e6:	e00f      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80052e8:	f7ff fe4c 	bl	8004f84 <HAL_RCC_GetPCLK2Freq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b0b      	ldr	r3, [pc, #44]	; (800531c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	0b9b      	lsrs	r3, r3, #14
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	3301      	adds	r3, #1
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005302:	e002      	b.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8005308:	bf00      	nop
    }
  }
  return (frequency);
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800530c:	4618      	mov	r0, r3
 800530e:	3734      	adds	r7, #52	; 0x34
 8005310:	46bd      	mov	sp, r7
 8005312:	bd90      	pop	{r4, r7, pc}
 8005314:	08008f78 	.word	0x08008f78
 8005318:	08008f88 	.word	0x08008f88
 800531c:	40021000 	.word	0x40021000
 8005320:	007a1200 	.word	0x007a1200
 8005324:	003d0900 	.word	0x003d0900
 8005328:	aaaaaaab 	.word	0xaaaaaaab

0800532c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e041      	b.n	80053c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fe f9d8 	bl	8003708 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 fad4 	bl	8005918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d001      	beq.n	80053e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e032      	b.n	800544a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a18      	ldr	r2, [pc, #96]	; (8005454 <HAL_TIM_Base_Start+0x88>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00e      	beq.n	8005414 <HAL_TIM_Base_Start+0x48>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d009      	beq.n	8005414 <HAL_TIM_Base_Start+0x48>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a14      	ldr	r2, [pc, #80]	; (8005458 <HAL_TIM_Base_Start+0x8c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_TIM_Base_Start+0x48>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a13      	ldr	r2, [pc, #76]	; (800545c <HAL_TIM_Base_Start+0x90>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d111      	bne.n	8005438 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0307 	and.w	r3, r3, #7
 800541e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b06      	cmp	r3, #6
 8005424:	d010      	beq.n	8005448 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 0201 	orr.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005436:	e007      	b.n	8005448 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40000800 	.word	0x40000800

08005460 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005472:	4013      	ands	r3, r2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10f      	bne.n	8005498 <HAL_TIM_Base_Stop+0x38>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	f240 4344 	movw	r3, #1092	; 0x444
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d107      	bne.n	8005498 <HAL_TIM_Base_Stop+0x38>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0201 	bic.w	r2, r2, #1
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr

080054ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d001      	beq.n	80054c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e03a      	b.n	800553a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a18      	ldr	r2, [pc, #96]	; (8005544 <HAL_TIM_Base_Start_IT+0x98>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x58>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ee:	d009      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x58>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a14      	ldr	r2, [pc, #80]	; (8005548 <HAL_TIM_Base_Start_IT+0x9c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_TIM_Base_Start_IT+0x58>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a13      	ldr	r2, [pc, #76]	; (800554c <HAL_TIM_Base_Start_IT+0xa0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d111      	bne.n	8005528 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b06      	cmp	r3, #6
 8005514:	d010      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f042 0201 	orr.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005526:	e007      	b.n	8005538 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800

08005550 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b02      	cmp	r3, #2
 8005564:	d122      	bne.n	80055ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b02      	cmp	r3, #2
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0202 	mvn.w	r2, #2
 800557c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9a4 	bl	80058e0 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f997 	bl	80058ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f9a6 	bl	80058f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0204 	mvn.w	r2, #4
 80055d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2202      	movs	r2, #2
 80055d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f97a 	bl	80058e0 <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f96d 	bl	80058ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 f97c 	bl	80058f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b08      	cmp	r3, #8
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b08      	cmp	r3, #8
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0208 	mvn.w	r2, #8
 8005624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2204      	movs	r2, #4
 800562a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f950 	bl	80058e0 <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f943 	bl	80058ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f952 	bl	80058f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b10      	cmp	r3, #16
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b10      	cmp	r3, #16
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0210 	mvn.w	r2, #16
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2208      	movs	r2, #8
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f926 	bl	80058e0 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f919 	bl	80058ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f928 	bl	80058f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d10e      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d107      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0201 	mvn.w	r2, #1
 80056cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7fd ff1c 	bl	800350c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d10e      	bne.n	8005700 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ec:	2b80      	cmp	r3, #128	; 0x80
 80056ee:	d107      	bne.n	8005700 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa6b 	bl	8005bd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d10e      	bne.n	800572c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d107      	bne.n	800572c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f8ec 	bl	8005904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	d10e      	bne.n	8005758 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b20      	cmp	r3, #32
 8005746:	d107      	bne.n	8005758 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f06f 0220 	mvn.w	r2, #32
 8005750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fa36 	bl	8005bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIM_ConfigClockSource+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e0a6      	b.n	80058c6 <HAL_TIM_ConfigClockSource+0x166>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800579e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d067      	beq.n	8005880 <HAL_TIM_ConfigClockSource+0x120>
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d80b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x6c>
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d073      	beq.n	80058a0 <HAL_TIM_ConfigClockSource+0x140>
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d802      	bhi.n	80057c2 <HAL_TIM_ConfigClockSource+0x62>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d06f      	beq.n	80058a0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057c0:	e078      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	d06c      	beq.n	80058a0 <HAL_TIM_ConfigClockSource+0x140>
 80057c6:	2b30      	cmp	r3, #48	; 0x30
 80057c8:	d06a      	beq.n	80058a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80057ca:	e073      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057cc:	2b70      	cmp	r3, #112	; 0x70
 80057ce:	d00d      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x8c>
 80057d0:	2b70      	cmp	r3, #112	; 0x70
 80057d2:	d804      	bhi.n	80057de <HAL_TIM_ConfigClockSource+0x7e>
 80057d4:	2b50      	cmp	r3, #80	; 0x50
 80057d6:	d033      	beq.n	8005840 <HAL_TIM_ConfigClockSource+0xe0>
 80057d8:	2b60      	cmp	r3, #96	; 0x60
 80057da:	d041      	beq.n	8005860 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80057dc:	e06a      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e2:	d066      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0x152>
 80057e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e8:	d017      	beq.n	800581a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80057ea:	e063      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6899      	ldr	r1, [r3, #8]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f000 f965 	bl	8005aca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800580e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	609a      	str	r2, [r3, #8]
      break;
 8005818:	e04c      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	6899      	ldr	r1, [r3, #8]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f000 f94e 	bl	8005aca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583c:	609a      	str	r2, [r3, #8]
      break;
 800583e:	e039      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	461a      	mov	r2, r3
 800584e:	f000 f8c5 	bl	80059dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2150      	movs	r1, #80	; 0x50
 8005858:	4618      	mov	r0, r3
 800585a:	f000 f91c 	bl	8005a96 <TIM_ITRx_SetConfig>
      break;
 800585e:	e029      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6818      	ldr	r0, [r3, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6859      	ldr	r1, [r3, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	461a      	mov	r2, r3
 800586e:	f000 f8e3 	bl	8005a38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2160      	movs	r1, #96	; 0x60
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f90c 	bl	8005a96 <TIM_ITRx_SetConfig>
      break;
 800587e:	e019      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	6859      	ldr	r1, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	461a      	mov	r2, r3
 800588e:	f000 f8a5 	bl	80059dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2140      	movs	r1, #64	; 0x40
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f8fc 	bl	8005a96 <TIM_ITRx_SetConfig>
      break;
 800589e:	e009      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 f8f3 	bl	8005a96 <TIM_ITRx_SetConfig>
        break;
 80058b0:	e000      	b.n	80058b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80058b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
	...

08005918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a29      	ldr	r2, [pc, #164]	; (80059d0 <TIM_Base_SetConfig+0xb8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d00b      	beq.n	8005948 <TIM_Base_SetConfig+0x30>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005936:	d007      	beq.n	8005948 <TIM_Base_SetConfig+0x30>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a26      	ldr	r2, [pc, #152]	; (80059d4 <TIM_Base_SetConfig+0xbc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d003      	beq.n	8005948 <TIM_Base_SetConfig+0x30>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a25      	ldr	r2, [pc, #148]	; (80059d8 <TIM_Base_SetConfig+0xc0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d108      	bne.n	800595a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	4313      	orrs	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <TIM_Base_SetConfig+0xb8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00b      	beq.n	800597a <TIM_Base_SetConfig+0x62>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005968:	d007      	beq.n	800597a <TIM_Base_SetConfig+0x62>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <TIM_Base_SetConfig+0xbc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d003      	beq.n	800597a <TIM_Base_SetConfig+0x62>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a18      	ldr	r2, [pc, #96]	; (80059d8 <TIM_Base_SetConfig+0xc0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d108      	bne.n	800598c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <TIM_Base_SetConfig+0xb8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d103      	bne.n	80059c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	615a      	str	r2, [r3, #20]
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc80      	pop	{r7}
 80059ce:	4770      	bx	lr
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800

080059dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0201 	bic.w	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 030a 	bic.w	r3, r3, #10
 8005a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	621a      	str	r2, [r3, #32]
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f023 0210 	bic.w	r2, r3, #16
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	031b      	lsls	r3, r3, #12
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f043 0307 	orr.w	r3, r3, #7
 8005ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bc80      	pop	{r7}
 8005ac8:	4770      	bx	lr

08005aca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b087      	sub	sp, #28
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	021a      	lsls	r2, r3, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	431a      	orrs	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	609a      	str	r2, [r3, #8]
}
 8005afe:	bf00      	nop
 8005b00:	371c      	adds	r7, #28
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e046      	b.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6c:	d009      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a10      	ldr	r2, [pc, #64]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10c      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800

08005bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bc80      	pop	{r7}
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e03f      	b.n	8005c7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fd fdaa 	bl	8003768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2224      	movs	r2, #36	; 0x24
 8005c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9a3 	bl	8005f78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695a      	ldr	r2, [r3, #20]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b08a      	sub	sp, #40	; 0x28
 8005c86:	af02      	add	r7, sp, #8
 8005c88:	60f8      	str	r0, [r7, #12]
 8005c8a:	60b9      	str	r1, [r7, #8]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d17c      	bne.n	8005d9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_UART_Transmit+0x2c>
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e075      	b.n	8005d9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Transmit+0x3e>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e06e      	b.n	8005d9e <HAL_UART_Transmit+0x11c>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2221      	movs	r2, #33	; 0x21
 8005cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005cd6:	f7fd fea3 	bl	8003a20 <HAL_GetTick>
 8005cda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	88fa      	ldrh	r2, [r7, #6]
 8005ce0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf0:	d108      	bne.n	8005d04 <HAL_UART_Transmit+0x82>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e003      	b.n	8005d0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005d14:	e02a      	b.n	8005d6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f8df 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e036      	b.n	8005d9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10b      	bne.n	8005d4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	3302      	adds	r3, #2
 8005d4a:	61bb      	str	r3, [r7, #24]
 8005d4c:	e007      	b.n	8005d5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	781a      	ldrb	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1cf      	bne.n	8005d16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2140      	movs	r1, #64	; 0x40
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f8af 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e006      	b.n	8005d9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e000      	b.n	8005d9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005d9c:	2302      	movs	r3, #2
  }
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b08a      	sub	sp, #40	; 0x28
 8005daa:	af02      	add	r7, sp, #8
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	f040 8089 	bne.w	8005eda <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_UART_Receive+0x2e>
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e081      	b.n	8005edc <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_UART_Receive+0x40>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e07a      	b.n	8005edc <HAL_UART_Receive+0x136>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2222      	movs	r2, #34	; 0x22
 8005df8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005dfc:	f7fd fe10 	bl	8003a20 <HAL_GetTick>
 8005e00:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	88fa      	ldrh	r2, [r7, #6]
 8005e06:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	88fa      	ldrh	r2, [r7, #6]
 8005e0c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e16:	d108      	bne.n	8005e2a <HAL_UART_Receive+0x84>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d104      	bne.n	8005e2a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	e003      	b.n	8005e32 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005e3a:	e043      	b.n	8005ec4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2200      	movs	r2, #0
 8005e44:	2120      	movs	r1, #32
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f84c 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e042      	b.n	8005edc <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10c      	bne.n	8005e76 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	3302      	adds	r3, #2
 8005e72:	61bb      	str	r3, [r7, #24]
 8005e74:	e01f      	b.n	8005eb6 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	d007      	beq.n	8005e90 <HAL_UART_Receive+0xea>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <HAL_UART_Receive+0xf8>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d106      	bne.n	8005e9e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e008      	b.n	8005eb0 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1b6      	bne.n	8005e3c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e000      	b.n	8005edc <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005eda:	2302      	movs	r3, #2
  }
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef4:	e02c      	b.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d028      	beq.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d007      	beq.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f04:	f7fd fd8c 	bl	8003a20 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d21d      	bcs.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f22:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	695a      	ldr	r2, [r3, #20]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e00f      	b.n	8005f70 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d0c3      	beq.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005fb2:	f023 030c 	bic.w	r3, r3, #12
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2c      	ldr	r2, [pc, #176]	; (800608c <UART_SetConfig+0x114>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d103      	bne.n	8005fe8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005fe0:	f7fe ffd0 	bl	8004f84 <HAL_RCC_GetPCLK2Freq>
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	e002      	b.n	8005fee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005fe8:	f7fe ffb8 	bl	8004f5c <HAL_RCC_GetPCLK1Freq>
 8005fec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	009a      	lsls	r2, r3, #2
 8005ff8:	441a      	add	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	4a22      	ldr	r2, [pc, #136]	; (8006090 <UART_SetConfig+0x118>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	095b      	lsrs	r3, r3, #5
 800600c:	0119      	lsls	r1, r3, #4
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	009a      	lsls	r2, r3, #2
 8006018:	441a      	add	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	fbb2 f2f3 	udiv	r2, r2, r3
 8006024:	4b1a      	ldr	r3, [pc, #104]	; (8006090 <UART_SetConfig+0x118>)
 8006026:	fba3 0302 	umull	r0, r3, r3, r2
 800602a:	095b      	lsrs	r3, r3, #5
 800602c:	2064      	movs	r0, #100	; 0x64
 800602e:	fb00 f303 	mul.w	r3, r0, r3
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	3332      	adds	r3, #50	; 0x32
 8006038:	4a15      	ldr	r2, [pc, #84]	; (8006090 <UART_SetConfig+0x118>)
 800603a:	fba2 2303 	umull	r2, r3, r2, r3
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006044:	4419      	add	r1, r3
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	009a      	lsls	r2, r3, #2
 8006050:	441a      	add	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	fbb2 f2f3 	udiv	r2, r2, r3
 800605c:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <UART_SetConfig+0x118>)
 800605e:	fba3 0302 	umull	r0, r3, r3, r2
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	2064      	movs	r0, #100	; 0x64
 8006066:	fb00 f303 	mul.w	r3, r0, r3
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	3332      	adds	r3, #50	; 0x32
 8006070:	4a07      	ldr	r2, [pc, #28]	; (8006090 <UART_SetConfig+0x118>)
 8006072:	fba2 2303 	umull	r2, r3, r2, r3
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	440a      	add	r2, r1
 8006082:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40013800 	.word	0x40013800
 8006090:	51eb851f 	.word	0x51eb851f

08006094 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800609a:	f3ef 8305 	mrs	r3, IPSR
 800609e:	60bb      	str	r3, [r7, #8]
  return(result);
 80060a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a6:	f3ef 8310 	mrs	r3, PRIMASK
 80060aa:	607b      	str	r3, [r7, #4]
  return(result);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <osKernelInitialize+0x32>
 80060b2:	4b10      	ldr	r3, [pc, #64]	; (80060f4 <osKernelInitialize+0x60>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d109      	bne.n	80060ce <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060ba:	f3ef 8311 	mrs	r3, BASEPRI
 80060be:	603b      	str	r3, [r7, #0]
  return(result);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80060c6:	f06f 0305 	mvn.w	r3, #5
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	e00c      	b.n	80060e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <osKernelInitialize+0x60>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d105      	bne.n	80060e2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80060d6:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <osKernelInitialize+0x60>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060dc:	2300      	movs	r3, #0
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	e002      	b.n	80060e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80060e2:	f04f 33ff 	mov.w	r3, #4294967295
 80060e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80060e8:	68fb      	ldr	r3, [r7, #12]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bc80      	pop	{r7}
 80060f2:	4770      	bx	lr
 80060f4:	2000002c 	.word	0x2000002c

080060f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060fe:	f3ef 8305 	mrs	r3, IPSR
 8006102:	60bb      	str	r3, [r7, #8]
  return(result);
 8006104:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10f      	bne.n	800612a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800610a:	f3ef 8310 	mrs	r3, PRIMASK
 800610e:	607b      	str	r3, [r7, #4]
  return(result);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d109      	bne.n	800612a <osKernelStart+0x32>
 8006116:	4b11      	ldr	r3, [pc, #68]	; (800615c <osKernelStart+0x64>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b02      	cmp	r3, #2
 800611c:	d109      	bne.n	8006132 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800611e:	f3ef 8311 	mrs	r3, BASEPRI
 8006122:	603b      	str	r3, [r7, #0]
  return(result);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <osKernelStart+0x3a>
    stat = osErrorISR;
 800612a:	f06f 0305 	mvn.w	r3, #5
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e00e      	b.n	8006150 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <osKernelStart+0x64>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d107      	bne.n	800614a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800613a:	4b08      	ldr	r3, [pc, #32]	; (800615c <osKernelStart+0x64>)
 800613c:	2202      	movs	r2, #2
 800613e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006140:	f001 fa8a 	bl	8007658 <vTaskStartScheduler>
      stat = osOK;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	e002      	b.n	8006150 <osKernelStart+0x58>
    } else {
      stat = osError;
 800614a:	f04f 33ff 	mov.w	r3, #4294967295
 800614e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	2000002c 	.word	0x2000002c

08006160 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b092      	sub	sp, #72	; 0x48
 8006164:	af04      	add	r7, sp, #16
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006170:	f3ef 8305 	mrs	r3, IPSR
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006178:	2b00      	cmp	r3, #0
 800617a:	f040 8094 	bne.w	80062a6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617e:	f3ef 8310 	mrs	r3, PRIMASK
 8006182:	623b      	str	r3, [r7, #32]
  return(result);
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 808d 	bne.w	80062a6 <osThreadNew+0x146>
 800618c:	4b48      	ldr	r3, [pc, #288]	; (80062b0 <osThreadNew+0x150>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d106      	bne.n	80061a2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006194:	f3ef 8311 	mrs	r3, BASEPRI
 8006198:	61fb      	str	r3, [r7, #28]
  return(result);
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f040 8082 	bne.w	80062a6 <osThreadNew+0x146>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d07e      	beq.n	80062a6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80061ac:	2318      	movs	r3, #24
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80061b0:	2300      	movs	r3, #0
 80061b2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80061b4:	f107 031b 	add.w	r3, r7, #27
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80061ba:	f04f 33ff 	mov.w	r3, #4294967295
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d045      	beq.n	8006252 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <osThreadNew+0x74>
        name = attr->name;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d008      	beq.n	80061fa <osThreadNew+0x9a>
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	2b38      	cmp	r3, #56	; 0x38
 80061ec:	d805      	bhi.n	80061fa <osThreadNew+0x9a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <osThreadNew+0x9e>
        return (NULL);
 80061fa:	2300      	movs	r3, #0
 80061fc:	e054      	b.n	80062a8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <osThreadNew+0xd4>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	2b5b      	cmp	r3, #91	; 0x5b
 800621c:	d90a      	bls.n	8006234 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006222:	2b00      	cmp	r3, #0
 8006224:	d006      	beq.n	8006234 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <osThreadNew+0xd4>
        mem = 1;
 800622e:	2301      	movs	r3, #1
 8006230:	62bb      	str	r3, [r7, #40]	; 0x28
 8006232:	e010      	b.n	8006256 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10c      	bne.n	8006256 <osThreadNew+0xf6>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d108      	bne.n	8006256 <osThreadNew+0xf6>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <osThreadNew+0xf6>
          mem = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006250:	e001      	b.n	8006256 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006252:	2300      	movs	r3, #0
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	2b01      	cmp	r3, #1
 800625a:	d110      	bne.n	800627e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006264:	9202      	str	r2, [sp, #8]
 8006266:	9301      	str	r3, [sp, #4]
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006270:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f001 f828 	bl	80072c8 <xTaskCreateStatic>
 8006278:	4603      	mov	r3, r0
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	e013      	b.n	80062a6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	2b00      	cmp	r3, #0
 8006282:	d110      	bne.n	80062a6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	b29a      	uxth	r2, r3
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	9301      	str	r3, [sp, #4]
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f001 f86f 	bl	800737a <xTaskCreate>
 800629c:	4603      	mov	r3, r0
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d001      	beq.n	80062a6 <osThreadNew+0x146>
          hTask = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062a6:	697b      	ldr	r3, [r7, #20]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3738      	adds	r7, #56	; 0x38
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	2000002c 	.word	0x2000002c

080062b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062bc:	f3ef 8305 	mrs	r3, IPSR
 80062c0:	613b      	str	r3, [r7, #16]
  return(result);
 80062c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10f      	bne.n	80062e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062c8:	f3ef 8310 	mrs	r3, PRIMASK
 80062cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <osDelay+0x34>
 80062d4:	4b0d      	ldr	r3, [pc, #52]	; (800630c <osDelay+0x58>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d109      	bne.n	80062f0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062dc:	f3ef 8311 	mrs	r3, BASEPRI
 80062e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <osDelay+0x3c>
    stat = osErrorISR;
 80062e8:	f06f 0305 	mvn.w	r3, #5
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e007      	b.n	8006300 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <osDelay+0x4c>
      vTaskDelay(ticks);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 f978 	bl	80075f0 <vTaskDelay>
    }
  }

  return (stat);
 8006300:	697b      	ldr	r3, [r7, #20]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	2000002c 	.word	0x2000002c

08006310 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800631c:	2300      	movs	r3, #0
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006320:	f3ef 8305 	mrs	r3, IPSR
 8006324:	61bb      	str	r3, [r7, #24]
  return(result);
 8006326:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006328:	2b00      	cmp	r3, #0
 800632a:	d170      	bne.n	800640e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800632c:	f3ef 8310 	mrs	r3, PRIMASK
 8006330:	617b      	str	r3, [r7, #20]
  return(result);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d16a      	bne.n	800640e <osMessageQueueNew+0xfe>
 8006338:	4b37      	ldr	r3, [pc, #220]	; (8006418 <osMessageQueueNew+0x108>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b02      	cmp	r3, #2
 800633e:	d105      	bne.n	800634c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006340:	f3ef 8311 	mrs	r3, BASEPRI
 8006344:	613b      	str	r3, [r7, #16]
  return(result);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d160      	bne.n	800640e <osMessageQueueNew+0xfe>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d05d      	beq.n	800640e <osMessageQueueNew+0xfe>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d05a      	beq.n	800640e <osMessageQueueNew+0xfe>
    mem = -1;
 8006358:	f04f 33ff 	mov.w	r3, #4294967295
 800635c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d029      	beq.n	80063b8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d012      	beq.n	8006392 <osMessageQueueNew+0x82>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b4f      	cmp	r3, #79	; 0x4f
 8006372:	d90e      	bls.n	8006392 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <osMessageQueueNew+0x82>
        mem = 1;
 800638c:	2301      	movs	r3, #1
 800638e:	623b      	str	r3, [r7, #32]
 8006390:	e014      	b.n	80063bc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d110      	bne.n	80063bc <osMessageQueueNew+0xac>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10c      	bne.n	80063bc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d108      	bne.n	80063bc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d104      	bne.n	80063bc <osMessageQueueNew+0xac>
          mem = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	623b      	str	r3, [r7, #32]
 80063b6:	e001      	b.n	80063bc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d10c      	bne.n	80063dc <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6899      	ldr	r1, [r3, #8]
 80063ca:	2300      	movs	r3, #0
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	460b      	mov	r3, r1
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fa52 	bl	800687c <xQueueGenericCreateStatic>
 80063d8:	6278      	str	r0, [r7, #36]	; 0x24
 80063da:	e008      	b.n	80063ee <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80063e2:	2200      	movs	r2, #0
 80063e4:	68b9      	ldr	r1, [r7, #8]
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 faba 	bl	8006960 <xQueueGenericCreate>
 80063ec:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00c      	beq.n	800640e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <osMessageQueueNew+0xf2>
        name = attr->name;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	e001      	b.n	8006406 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006406:	69f9      	ldr	r1, [r7, #28]
 8006408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800640a:	f000 ff01 	bl	8007210 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006410:	4618      	mov	r0, r3
 8006412:	3728      	adds	r7, #40	; 0x28
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	2000002c 	.word	0x2000002c

0800641c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b08a      	sub	sp, #40	; 0x28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006430:	2300      	movs	r3, #0
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006434:	f3ef 8305 	mrs	r3, IPSR
 8006438:	61fb      	str	r3, [r7, #28]
  return(result);
 800643a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10f      	bne.n	8006460 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006440:	f3ef 8310 	mrs	r3, PRIMASK
 8006444:	61bb      	str	r3, [r7, #24]
  return(result);
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d109      	bne.n	8006460 <osMessageQueuePut+0x44>
 800644c:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <osMessageQueuePut+0xe0>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d12e      	bne.n	80064b2 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006454:	f3ef 8311 	mrs	r3, BASEPRI
 8006458:	617b      	str	r3, [r7, #20]
  return(result);
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d028      	beq.n	80064b2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d005      	beq.n	8006472 <osMessageQueuePut+0x56>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <osMessageQueuePut+0x56>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006472:	f06f 0303 	mvn.w	r3, #3
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006478:	e039      	b.n	80064ee <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800647a:	2300      	movs	r3, #0
 800647c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800647e:	f107 0210 	add.w	r2, r7, #16
 8006482:	2300      	movs	r3, #0
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	6a38      	ldr	r0, [r7, #32]
 8006488:	f000 fbc4 	bl	8006c14 <xQueueGenericSendFromISR>
 800648c:	4603      	mov	r3, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	d003      	beq.n	800649a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006492:	f06f 0302 	mvn.w	r3, #2
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006498:	e029      	b.n	80064ee <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d026      	beq.n	80064ee <osMessageQueuePut+0xd2>
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <osMessageQueuePut+0xe4>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064b0:	e01d      	b.n	80064ee <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <osMessageQueuePut+0xa2>
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d103      	bne.n	80064c6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80064be:	f06f 0303 	mvn.w	r3, #3
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
 80064c4:	e014      	b.n	80064f0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80064c6:	2300      	movs	r3, #0
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	6a38      	ldr	r0, [r7, #32]
 80064ce:	f000 faa7 	bl	8006a20 <xQueueGenericSend>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d00b      	beq.n	80064f0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80064de:	f06f 0301 	mvn.w	r3, #1
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
 80064e4:	e004      	b.n	80064f0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80064e6:	f06f 0302 	mvn.w	r3, #2
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
 80064ec:	e000      	b.n	80064f0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064ee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3728      	adds	r7, #40	; 0x28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	2000002c 	.word	0x2000002c
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006504:	b580      	push	{r7, lr}
 8006506:	b08a      	sub	sp, #40	; 0x28
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006516:	2300      	movs	r3, #0
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651a:	f3ef 8305 	mrs	r3, IPSR
 800651e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006520:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10f      	bne.n	8006546 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006526:	f3ef 8310 	mrs	r3, PRIMASK
 800652a:	61bb      	str	r3, [r7, #24]
  return(result);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <osMessageQueueGet+0x42>
 8006532:	4b2b      	ldr	r3, [pc, #172]	; (80065e0 <osMessageQueueGet+0xdc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d12e      	bne.n	8006598 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800653a:	f3ef 8311 	mrs	r3, BASEPRI
 800653e:	617b      	str	r3, [r7, #20]
  return(result);
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d028      	beq.n	8006598 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d005      	beq.n	8006558 <osMessageQueueGet+0x54>
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <osMessageQueueGet+0x54>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006558:	f06f 0303 	mvn.w	r3, #3
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800655e:	e038      	b.n	80065d2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006560:	2300      	movs	r3, #0
 8006562:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006564:	f107 0310 	add.w	r3, r7, #16
 8006568:	461a      	mov	r2, r3
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	6a38      	ldr	r0, [r7, #32]
 800656e:	f000 fcc1 	bl	8006ef4 <xQueueReceiveFromISR>
 8006572:	4603      	mov	r3, r0
 8006574:	2b01      	cmp	r3, #1
 8006576:	d003      	beq.n	8006580 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006578:	f06f 0302 	mvn.w	r3, #2
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800657e:	e028      	b.n	80065d2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d025      	beq.n	80065d2 <osMessageQueueGet+0xce>
 8006586:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <osMessageQueueGet+0xe0>)
 8006588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006596:	e01c      	b.n	80065d2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <osMessageQueueGet+0xa0>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d103      	bne.n	80065ac <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80065a4:	f06f 0303 	mvn.w	r3, #3
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
 80065aa:	e013      	b.n	80065d4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065ac:	683a      	ldr	r2, [r7, #0]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	6a38      	ldr	r0, [r7, #32]
 80065b2:	f000 fbc3 	bl	8006d3c <xQueueReceive>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d00b      	beq.n	80065d4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80065c2:	f06f 0301 	mvn.w	r3, #1
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
 80065c8:	e004      	b.n	80065d4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80065ca:	f06f 0302 	mvn.w	r3, #2
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	e000      	b.n	80065d4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065d2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3728      	adds	r7, #40	; 0x28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	2000002c 	.word	0x2000002c
 80065e4:	e000ed04 	.word	0xe000ed04

080065e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a06      	ldr	r2, [pc, #24]	; (8006610 <vApplicationGetIdleTaskMemory+0x28>)
 80065f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4a05      	ldr	r2, [pc, #20]	; (8006614 <vApplicationGetIdleTaskMemory+0x2c>)
 80065fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2280      	movs	r2, #128	; 0x80
 8006604:	601a      	str	r2, [r3, #0]
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr
 8006610:	20000030 	.word	0x20000030
 8006614:	2000008c 	.word	0x2000008c

08006618 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a07      	ldr	r2, [pc, #28]	; (8006644 <vApplicationGetTimerTaskMemory+0x2c>)
 8006628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	4a06      	ldr	r2, [pc, #24]	; (8006648 <vApplicationGetTimerTaskMemory+0x30>)
 800662e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006636:	601a      	str	r2, [r3, #0]
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	bc80      	pop	{r7}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	2000028c 	.word	0x2000028c
 8006648:	200002e8 	.word	0x200002e8

0800664c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f103 0208 	add.w	r2, r3, #8
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f04f 32ff 	mov.w	r2, #4294967295
 8006664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f103 0208 	add.w	r2, r3, #8
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f103 0208 	add.w	r2, r3, #8
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr

0800668a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr

080066a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066a2:	b480      	push	{r7}
 80066a4:	b085      	sub	sp, #20
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
}
 80066de:	bf00      	nop
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d103      	bne.n	8006708 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e00c      	b.n	8006722 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3308      	adds	r3, #8
 800670c:	60fb      	str	r3, [r7, #12]
 800670e:	e002      	b.n	8006716 <vListInsert+0x2e>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	429a      	cmp	r2, r3
 8006720:	d2f6      	bcs.n	8006710 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6892      	ldr	r2, [r2, #8]
 800676e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	6852      	ldr	r2, [r2, #4]
 8006778:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	429a      	cmp	r2, r3
 8006782:	d103      	bne.n	800678c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	1e5a      	subs	r2, r3, #1
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr
	...

080067ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d109      	bne.n	80067d4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	e7fe      	b.n	80067d2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80067d4:	f002 f850 	bl	8008878 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e0:	68f9      	ldr	r1, [r7, #12]
 80067e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	441a      	add	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006804:	3b01      	subs	r3, #1
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800680a:	fb01 f303 	mul.w	r3, r1, r3
 800680e:	441a      	add	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	22ff      	movs	r2, #255	; 0xff
 8006818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	22ff      	movs	r2, #255	; 0xff
 8006820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d114      	bne.n	8006854 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01a      	beq.n	8006868 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3310      	adds	r3, #16
 8006836:	4618      	mov	r0, r3
 8006838:	f001 f992 	bl	8007b60 <xTaskRemoveFromEventList>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d012      	beq.n	8006868 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006842:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <xQueueGenericReset+0xcc>)
 8006844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	e009      	b.n	8006868 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3310      	adds	r3, #16
 8006858:	4618      	mov	r0, r3
 800685a:	f7ff fef7 	bl	800664c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3324      	adds	r3, #36	; 0x24
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fef2 	bl	800664c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006868:	f002 f834 	bl	80088d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800686c:	2301      	movs	r3, #1
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	e000ed04 	.word	0xe000ed04

0800687c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08e      	sub	sp, #56	; 0x38
 8006880:	af02      	add	r7, sp, #8
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d109      	bne.n	80068a4 <xQueueGenericCreateStatic+0x28>
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a2:	e7fe      	b.n	80068a2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <xQueueGenericCreateStatic+0x42>
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
 80068bc:	e7fe      	b.n	80068bc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <xQueueGenericCreateStatic+0x4e>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <xQueueGenericCreateStatic+0x52>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <xQueueGenericCreateStatic+0x54>
 80068ce:	2300      	movs	r3, #0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <xQueueGenericCreateStatic+0x6c>
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	e7fe      	b.n	80068e6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d102      	bne.n	80068f4 <xQueueGenericCreateStatic+0x78>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <xQueueGenericCreateStatic+0x7c>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e000      	b.n	80068fa <xQueueGenericCreateStatic+0x7e>
 80068f8:	2300      	movs	r3, #0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <xQueueGenericCreateStatic+0x96>
 80068fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e7fe      	b.n	8006910 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006912:	2350      	movs	r3, #80	; 0x50
 8006914:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b50      	cmp	r3, #80	; 0x50
 800691a:	d009      	beq.n	8006930 <xQueueGenericCreateStatic+0xb4>
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	e7fe      	b.n	800692e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00d      	beq.n	8006956 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006942:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4613      	mov	r3, r2
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f842 	bl	80069da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006958:	4618      	mov	r0, r3
 800695a:	3730      	adds	r7, #48	; 0x30
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	; 0x28
 8006964:	af02      	add	r7, sp, #8
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	4613      	mov	r3, r2
 800696c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <xQueueGenericCreate+0x28>
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	e7fe      	b.n	8006986 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d102      	bne.n	8006994 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
 8006992:	e004      	b.n	800699e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	fb02 f303 	mul.w	r3, r2, r3
 800699c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3350      	adds	r3, #80	; 0x50
 80069a2:	4618      	mov	r0, r3
 80069a4:	f002 f85e 	bl	8008a64 <pvPortMalloc>
 80069a8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00f      	beq.n	80069d0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	3350      	adds	r3, #80	; 0x50
 80069b4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069be:	79fa      	ldrb	r2, [r7, #7]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 f805 	bl	80069da <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80069d0:	69bb      	ldr	r3, [r7, #24]
	}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3720      	adds	r7, #32
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b084      	sub	sp, #16
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
 80069e6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d103      	bne.n	80069f6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e002      	b.n	80069fc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a08:	2101      	movs	r1, #1
 8006a0a:	69b8      	ldr	r0, [r7, #24]
 8006a0c:	f7ff fece 	bl	80067ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a18:	bf00      	nop
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08e      	sub	sp, #56	; 0x38
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d109      	bne.n	8006a50 <xQueueGenericSend+0x30>
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a4e:	e7fe      	b.n	8006a4e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <xQueueGenericSend+0x3e>
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <xQueueGenericSend+0x42>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <xQueueGenericSend+0x44>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d109      	bne.n	8006a7c <xQueueGenericSend+0x5c>
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7a:	e7fe      	b.n	8006a7a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d103      	bne.n	8006a8a <xQueueGenericSend+0x6a>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <xQueueGenericSend+0x6e>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <xQueueGenericSend+0x70>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <xQueueGenericSend+0x88>
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	623b      	str	r3, [r7, #32]
 8006aa6:	e7fe      	b.n	8006aa6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006aa8:	f001 fa14 	bl	8007ed4 <xTaskGetSchedulerState>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d102      	bne.n	8006ab8 <xQueueGenericSend+0x98>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <xQueueGenericSend+0x9c>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e000      	b.n	8006abe <xQueueGenericSend+0x9e>
 8006abc:	2300      	movs	r3, #0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <xQueueGenericSend+0xb6>
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	61fb      	str	r3, [r7, #28]
 8006ad4:	e7fe      	b.n	8006ad4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ad6:	f001 fecf 	bl	8008878 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d302      	bcc.n	8006aec <xQueueGenericSend+0xcc>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d129      	bne.n	8006b40 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	68b9      	ldr	r1, [r7, #8]
 8006af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af2:	f000 fa7c 	bl	8006fee <prvCopyDataToQueue>
 8006af6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d010      	beq.n	8006b22 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	3324      	adds	r3, #36	; 0x24
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 f82b 	bl	8007b60 <xTaskRemoveFromEventList>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d013      	beq.n	8006b38 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b10:	4b3f      	ldr	r3, [pc, #252]	; (8006c10 <xQueueGenericSend+0x1f0>)
 8006b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	e00a      	b.n	8006b38 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d007      	beq.n	8006b38 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b28:	4b39      	ldr	r3, [pc, #228]	; (8006c10 <xQueueGenericSend+0x1f0>)
 8006b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b38:	f001 fecc 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e063      	b.n	8006c08 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b46:	f001 fec5 	bl	80088d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	e05c      	b.n	8006c08 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d106      	bne.n	8006b62 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b54:	f107 0314 	add.w	r3, r7, #20
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 f863 	bl	8007c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b62:	f001 feb7 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b66:	f000 fddb 	bl	8007720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b6a:	f001 fe85 	bl	8008878 <vPortEnterCritical>
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b74:	b25b      	sxtb	r3, r3
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d103      	bne.n	8006b84 <xQueueGenericSend+0x164>
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b8a:	b25b      	sxtb	r3, r3
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b90:	d103      	bne.n	8006b9a <xQueueGenericSend+0x17a>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b9a:	f001 fe9b 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b9e:	1d3a      	adds	r2, r7, #4
 8006ba0:	f107 0314 	add.w	r3, r7, #20
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f001 f852 	bl	8007c50 <xTaskCheckForTimeOut>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d124      	bne.n	8006bfc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb4:	f000 fb13 	bl	80071de <prvIsQueueFull>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d018      	beq.n	8006bf0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc0:	3310      	adds	r3, #16
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 ff7c 	bl	8007ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bce:	f000 fa9e 	bl	800710e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bd2:	f000 fdb3 	bl	800773c <xTaskResumeAll>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f47f af7c 	bne.w	8006ad6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <xQueueGenericSend+0x1f0>)
 8006be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	e772      	b.n	8006ad6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bf2:	f000 fa8c 	bl	800710e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bf6:	f000 fda1 	bl	800773c <xTaskResumeAll>
 8006bfa:	e76c      	b.n	8006ad6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfe:	f000 fa86 	bl	800710e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c02:	f000 fd9b 	bl	800773c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c06:	2300      	movs	r3, #0
		}
	}
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3738      	adds	r7, #56	; 0x38
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08e      	sub	sp, #56	; 0x38
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d109      	bne.n	8006c40 <xQueueGenericSendFromISR+0x2c>
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3e:	e7fe      	b.n	8006c3e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d103      	bne.n	8006c4e <xQueueGenericSendFromISR+0x3a>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <xQueueGenericSendFromISR+0x3e>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e000      	b.n	8006c54 <xQueueGenericSendFromISR+0x40>
 8006c52:	2300      	movs	r3, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d109      	bne.n	8006c6c <xQueueGenericSendFromISR+0x58>
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	623b      	str	r3, [r7, #32]
 8006c6a:	e7fe      	b.n	8006c6a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d103      	bne.n	8006c7a <xQueueGenericSendFromISR+0x66>
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <xQueueGenericSendFromISR+0x6a>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <xQueueGenericSendFromISR+0x6c>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d109      	bne.n	8006c98 <xQueueGenericSendFromISR+0x84>
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	e7fe      	b.n	8006c96 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c98:	f001 fea8 	bl	80089ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c9c:	f3ef 8211 	mrs	r2, BASEPRI
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	61ba      	str	r2, [r7, #24]
 8006cb2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d302      	bcc.n	8006cca <xQueueGenericSendFromISR+0xb6>
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d12c      	bne.n	8006d24 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cda:	f000 f988 	bl	8006fee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cde:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	d112      	bne.n	8006d0e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d016      	beq.n	8006d1e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	3324      	adds	r3, #36	; 0x24
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 ff33 	bl	8007b60 <xTaskRemoveFromEventList>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00b      	beq.n	8006d1e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	e007      	b.n	8006d1e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d12:	3301      	adds	r3, #1
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	b25a      	sxtb	r2, r3
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d22:	e001      	b.n	8006d28 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d24:	2300      	movs	r3, #0
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
 8006d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3738      	adds	r7, #56	; 0x38
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08c      	sub	sp, #48	; 0x30
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d109      	bne.n	8006d6a <xQueueReceive+0x2e>
	__asm volatile
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	e7fe      	b.n	8006d68 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d103      	bne.n	8006d78 <xQueueReceive+0x3c>
 8006d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <xQueueReceive+0x40>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <xQueueReceive+0x42>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d109      	bne.n	8006d96 <xQueueReceive+0x5a>
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	e7fe      	b.n	8006d94 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d96:	f001 f89d 	bl	8007ed4 <xTaskGetSchedulerState>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d102      	bne.n	8006da6 <xQueueReceive+0x6a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <xQueueReceive+0x6e>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <xQueueReceive+0x70>
 8006daa:	2300      	movs	r3, #0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d109      	bne.n	8006dc4 <xQueueReceive+0x88>
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	e7fe      	b.n	8006dc2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dc4:	f001 fd58 	bl	8008878 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01f      	beq.n	8006e14 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd8:	f000 f973 	bl	80070c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	1e5a      	subs	r2, r3, #1
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00f      	beq.n	8006e0c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dee:	3310      	adds	r3, #16
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 feb5 	bl	8007b60 <xTaskRemoveFromEventList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d007      	beq.n	8006e0c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dfc:	4b3c      	ldr	r3, [pc, #240]	; (8006ef0 <xQueueReceive+0x1b4>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e0c:	f001 fd62 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e069      	b.n	8006ee8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e1a:	f001 fd5b 	bl	80088d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	e062      	b.n	8006ee8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d106      	bne.n	8006e36 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e28:	f107 0310 	add.w	r3, r7, #16
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 fef9 	bl	8007c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e32:	2301      	movs	r3, #1
 8006e34:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e36:	f001 fd4d 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e3a:	f000 fc71 	bl	8007720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e3e:	f001 fd1b 	bl	8008878 <vPortEnterCritical>
 8006e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e48:	b25b      	sxtb	r3, r3
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d103      	bne.n	8006e58 <xQueueReceive+0x11c>
 8006e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e52:	2200      	movs	r2, #0
 8006e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e5e:	b25b      	sxtb	r3, r3
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e64:	d103      	bne.n	8006e6e <xQueueReceive+0x132>
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e6e:	f001 fd31 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e72:	1d3a      	adds	r2, r7, #4
 8006e74:	f107 0310 	add.w	r3, r7, #16
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fee8 	bl	8007c50 <xTaskCheckForTimeOut>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d123      	bne.n	8006ece <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e88:	f000 f993 	bl	80071b2 <prvIsQueueEmpty>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d017      	beq.n	8006ec2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e94:	3324      	adds	r3, #36	; 0x24
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	4611      	mov	r1, r2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fe12 	bl	8007ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ea0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea2:	f000 f934 	bl	800710e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ea6:	f000 fc49 	bl	800773c <xTaskResumeAll>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d189      	bne.n	8006dc4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <xQueueReceive+0x1b4>)
 8006eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	e780      	b.n	8006dc4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec4:	f000 f923 	bl	800710e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ec8:	f000 fc38 	bl	800773c <xTaskResumeAll>
 8006ecc:	e77a      	b.n	8006dc4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed0:	f000 f91d 	bl	800710e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ed4:	f000 fc32 	bl	800773c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eda:	f000 f96a 	bl	80071b2 <prvIsQueueEmpty>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f43f af6f 	beq.w	8006dc4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ee6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3730      	adds	r7, #48	; 0x30
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	e000ed04 	.word	0xe000ed04

08006ef4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08e      	sub	sp, #56	; 0x38
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <xQueueReceiveFromISR+0x2a>
 8006f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	623b      	str	r3, [r7, #32]
 8006f1c:	e7fe      	b.n	8006f1c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d103      	bne.n	8006f2c <xQueueReceiveFromISR+0x38>
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d101      	bne.n	8006f30 <xQueueReceiveFromISR+0x3c>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <xQueueReceiveFromISR+0x3e>
 8006f30:	2300      	movs	r3, #0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <xQueueReceiveFromISR+0x56>
 8006f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3a:	f383 8811 	msr	BASEPRI, r3
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	61fb      	str	r3, [r7, #28]
 8006f48:	e7fe      	b.n	8006f48 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f4a:	f001 fd4f 	bl	80089ec <vPortValidateInterruptPriority>
	__asm volatile
 8006f4e:	f3ef 8211 	mrs	r2, BASEPRI
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	61ba      	str	r2, [r7, #24]
 8006f64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d02f      	beq.n	8006fd6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f84:	f000 f89d 	bl	80070c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	1e5a      	subs	r2, r3, #1
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d112      	bne.n	8006fc0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d016      	beq.n	8006fd0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	3310      	adds	r3, #16
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fdda 	bl	8007b60 <xTaskRemoveFromEventList>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00e      	beq.n	8006fd0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e007      	b.n	8006fd0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	b25a      	sxtb	r2, r3
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd4:	e001      	b.n	8006fda <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3738      	adds	r7, #56	; 0x38
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b086      	sub	sp, #24
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	60f8      	str	r0, [r7, #12]
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10d      	bne.n	8007028 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d14d      	bne.n	80070b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	4618      	mov	r0, r3
 800701a:	f000 ff79 	bl	8007f10 <xTaskPriorityDisinherit>
 800701e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	e043      	b.n	80070b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d119      	bne.n	8007062 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6898      	ldr	r0, [r3, #8]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	461a      	mov	r2, r3
 8007038:	68b9      	ldr	r1, [r7, #8]
 800703a:	f001 ff0b 	bl	8008e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d32b      	bcc.n	80070b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	609a      	str	r2, [r3, #8]
 8007060:	e026      	b.n	80070b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	68d8      	ldr	r0, [r3, #12]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	461a      	mov	r2, r3
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	f001 fef1 	bl	8008e54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	425b      	negs	r3, r3
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	429a      	cmp	r2, r3
 800708c:	d207      	bcs.n	800709e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	425b      	negs	r3, r3
 8007098:	441a      	add	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d105      	bne.n	80070b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070b8:	697b      	ldr	r3, [r7, #20]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3718      	adds	r7, #24
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d018      	beq.n	8007106 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	441a      	add	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d303      	bcc.n	80070f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68d9      	ldr	r1, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fe:	461a      	mov	r2, r3
 8007100:	6838      	ldr	r0, [r7, #0]
 8007102:	f001 fea7 	bl	8008e54 <memcpy>
	}
}
 8007106:	bf00      	nop
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007116:	f001 fbaf 	bl	8008878 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007120:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007122:	e011      	b.n	8007148 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d012      	beq.n	8007152 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3324      	adds	r3, #36	; 0x24
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fd15 	bl	8007b60 <xTaskRemoveFromEventList>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800713c:	f000 fde8 	bl	8007d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	3b01      	subs	r3, #1
 8007144:	b2db      	uxtb	r3, r3
 8007146:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	dce9      	bgt.n	8007124 <prvUnlockQueue+0x16>
 8007150:	e000      	b.n	8007154 <prvUnlockQueue+0x46>
					break;
 8007152:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	22ff      	movs	r2, #255	; 0xff
 8007158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800715c:	f001 fbba 	bl	80088d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007160:	f001 fb8a 	bl	8008878 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800716a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800716c:	e011      	b.n	8007192 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d012      	beq.n	800719c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	3310      	adds	r3, #16
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fcf0 	bl	8007b60 <xTaskRemoveFromEventList>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007186:	f000 fdc3 	bl	8007d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	3b01      	subs	r3, #1
 800718e:	b2db      	uxtb	r3, r3
 8007190:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007196:	2b00      	cmp	r3, #0
 8007198:	dce9      	bgt.n	800716e <prvUnlockQueue+0x60>
 800719a:	e000      	b.n	800719e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800719c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	22ff      	movs	r2, #255	; 0xff
 80071a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071a6:	f001 fb95 	bl	80088d4 <vPortExitCritical>
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071ba:	f001 fb5d 	bl	8008878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071c6:	2301      	movs	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	e001      	b.n	80071d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071d0:	f001 fb80 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b084      	sub	sp, #16
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071e6:	f001 fb47 	bl	8008878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d102      	bne.n	80071fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071f6:	2301      	movs	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]
 80071fa:	e001      	b.n	8007200 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007200:	f001 fb68 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8007204:	68fb      	ldr	r3, [r7, #12]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	e014      	b.n	800724a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007220:	4a0e      	ldr	r2, [pc, #56]	; (800725c <vQueueAddToRegistry+0x4c>)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10b      	bne.n	8007244 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800722c:	490b      	ldr	r1, [pc, #44]	; (800725c <vQueueAddToRegistry+0x4c>)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007236:	4a09      	ldr	r2, [pc, #36]	; (800725c <vQueueAddToRegistry+0x4c>)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	4413      	add	r3, r2
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007242:	e005      	b.n	8007250 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b07      	cmp	r3, #7
 800724e:	d9e7      	bls.n	8007220 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007250:	bf00      	nop
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	2000290c 	.word	0x2000290c

08007260 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007270:	f001 fb02 	bl	8008878 <vPortEnterCritical>
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800727a:	b25b      	sxtb	r3, r3
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d103      	bne.n	800728a <vQueueWaitForMessageRestricted+0x2a>
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007290:	b25b      	sxtb	r3, r3
 8007292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007296:	d103      	bne.n	80072a0 <vQueueWaitForMessageRestricted+0x40>
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072a0:	f001 fb18 	bl	80088d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d106      	bne.n	80072ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3324      	adds	r3, #36	; 0x24
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fc29 	bl	8007b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072ba:	6978      	ldr	r0, [r7, #20]
 80072bc:	f7ff ff27 	bl	800710e <prvUnlockQueue>
	}
 80072c0:	bf00      	nop
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08e      	sub	sp, #56	; 0x38
 80072cc:	af04      	add	r7, sp, #16
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d109      	bne.n	80072f0 <xTaskCreateStatic+0x28>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	e7fe      	b.n	80072ee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80072f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <xTaskCreateStatic+0x42>
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	e7fe      	b.n	8007308 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800730a:	235c      	movs	r3, #92	; 0x5c
 800730c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2b5c      	cmp	r3, #92	; 0x5c
 8007312:	d009      	beq.n	8007328 <xTaskCreateStatic+0x60>
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e7fe      	b.n	8007326 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01e      	beq.n	800736c <xTaskCreateStatic+0xa4>
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01b      	beq.n	800736c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800733c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	2202      	movs	r2, #2
 8007342:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007346:	2300      	movs	r3, #0
 8007348:	9303      	str	r3, [sp, #12]
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	9302      	str	r3, [sp, #8]
 800734e:	f107 0314 	add.w	r3, r7, #20
 8007352:	9301      	str	r3, [sp, #4]
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 f850 	bl	8007404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007366:	f000 f8d3 	bl	8007510 <prvAddNewTaskToReadyList>
 800736a:	e001      	b.n	8007370 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007370:	697b      	ldr	r3, [r7, #20]
	}
 8007372:	4618      	mov	r0, r3
 8007374:	3728      	adds	r7, #40	; 0x28
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800737a:	b580      	push	{r7, lr}
 800737c:	b08c      	sub	sp, #48	; 0x30
 800737e:	af04      	add	r7, sp, #16
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	603b      	str	r3, [r7, #0]
 8007386:	4613      	mov	r3, r2
 8007388:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4618      	mov	r0, r3
 8007390:	f001 fb68 	bl	8008a64 <pvPortMalloc>
 8007394:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00e      	beq.n	80073ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800739c:	205c      	movs	r0, #92	; 0x5c
 800739e:	f001 fb61 	bl	8008a64 <pvPortMalloc>
 80073a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	631a      	str	r2, [r3, #48]	; 0x30
 80073b0:	e005      	b.n	80073be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073b2:	6978      	ldr	r0, [r7, #20]
 80073b4:	f001 fc18 	bl	8008be8 <vPortFree>
 80073b8:	e001      	b.n	80073be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d017      	beq.n	80073f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	2300      	movs	r3, #0
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	9302      	str	r3, [sp, #8]
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68b9      	ldr	r1, [r7, #8]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f80e 	bl	8007404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073e8:	69f8      	ldr	r0, [r7, #28]
 80073ea:	f000 f891 	bl	8007510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073ee:	2301      	movs	r3, #1
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	e002      	b.n	80073fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073f4:	f04f 33ff 	mov.w	r3, #4294967295
 80073f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073fa:	69bb      	ldr	r3, [r7, #24]
	}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	461a      	mov	r2, r3
 800741c:	21a5      	movs	r1, #165	; 0xa5
 800741e:	f001 fd24 	bl	8008e6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800742c:	3b01      	subs	r3, #1
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	2b00      	cmp	r3, #0
 8007444:	d009      	beq.n	800745a <prvInitialiseNewTask+0x56>
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	f383 8811 	msr	BASEPRI, r3
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f3bf 8f4f 	dsb	sy
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	e7fe      	b.n	8007458 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800745a:	2300      	movs	r3, #0
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	e012      	b.n	8007486 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	7819      	ldrb	r1, [r3, #0]
 8007468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	3334      	adds	r3, #52	; 0x34
 8007470:	460a      	mov	r2, r1
 8007472:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d006      	beq.n	800748e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	3301      	adds	r3, #1
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	2b0f      	cmp	r3, #15
 800748a:	d9e9      	bls.n	8007460 <prvInitialiseNewTask+0x5c>
 800748c:	e000      	b.n	8007490 <prvInitialiseNewTask+0x8c>
		{
			break;
 800748e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	2b37      	cmp	r3, #55	; 0x37
 800749c:	d901      	bls.n	80074a2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800749e:	2337      	movs	r3, #55	; 0x37
 80074a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	2200      	movs	r2, #0
 80074b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	3304      	adds	r3, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff f8e6 	bl	800668a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	3318      	adds	r3, #24
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff f8e1 	bl	800668a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	2200      	movs	r2, #0
 80074e2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	68f9      	ldr	r1, [r7, #12]
 80074f0:	69b8      	ldr	r0, [r7, #24]
 80074f2:	f001 f8d7 	bl	80086a4 <pxPortInitialiseStack>
 80074f6:	4602      	mov	r2, r0
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007506:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007508:	bf00      	nop
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007518:	f001 f9ae 	bl	8008878 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800751c:	4b2d      	ldr	r3, [pc, #180]	; (80075d4 <prvAddNewTaskToReadyList+0xc4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3301      	adds	r3, #1
 8007522:	4a2c      	ldr	r2, [pc, #176]	; (80075d4 <prvAddNewTaskToReadyList+0xc4>)
 8007524:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007526:	4b2c      	ldr	r3, [pc, #176]	; (80075d8 <prvAddNewTaskToReadyList+0xc8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800752e:	4a2a      	ldr	r2, [pc, #168]	; (80075d8 <prvAddNewTaskToReadyList+0xc8>)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007534:	4b27      	ldr	r3, [pc, #156]	; (80075d4 <prvAddNewTaskToReadyList+0xc4>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d110      	bne.n	800755e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800753c:	f000 fc0c 	bl	8007d58 <prvInitialiseTaskLists>
 8007540:	e00d      	b.n	800755e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007542:	4b26      	ldr	r3, [pc, #152]	; (80075dc <prvAddNewTaskToReadyList+0xcc>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800754a:	4b23      	ldr	r3, [pc, #140]	; (80075d8 <prvAddNewTaskToReadyList+0xc8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	429a      	cmp	r2, r3
 8007556:	d802      	bhi.n	800755e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007558:	4a1f      	ldr	r2, [pc, #124]	; (80075d8 <prvAddNewTaskToReadyList+0xc8>)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800755e:	4b20      	ldr	r3, [pc, #128]	; (80075e0 <prvAddNewTaskToReadyList+0xd0>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3301      	adds	r3, #1
 8007564:	4a1e      	ldr	r2, [pc, #120]	; (80075e0 <prvAddNewTaskToReadyList+0xd0>)
 8007566:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007568:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <prvAddNewTaskToReadyList+0xd0>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007574:	4b1b      	ldr	r3, [pc, #108]	; (80075e4 <prvAddNewTaskToReadyList+0xd4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	429a      	cmp	r2, r3
 800757a:	d903      	bls.n	8007584 <prvAddNewTaskToReadyList+0x74>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <prvAddNewTaskToReadyList+0xd4>)
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <prvAddNewTaskToReadyList+0xd8>)
 8007592:	441a      	add	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7ff f881 	bl	80066a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075a0:	f001 f998 	bl	80088d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075a4:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <prvAddNewTaskToReadyList+0xcc>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00e      	beq.n	80075ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <prvAddNewTaskToReadyList+0xc8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d207      	bcs.n	80075ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <prvAddNewTaskToReadyList+0xdc>)
 80075bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20000bbc 	.word	0x20000bbc
 80075d8:	200006e8 	.word	0x200006e8
 80075dc:	20000bc8 	.word	0x20000bc8
 80075e0:	20000bd8 	.word	0x20000bd8
 80075e4:	20000bc4 	.word	0x20000bc4
 80075e8:	200006ec 	.word	0x200006ec
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d016      	beq.n	8007630 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <vTaskDelay+0x60>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <vTaskDelay+0x2e>
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	60bb      	str	r3, [r7, #8]
 800761c:	e7fe      	b.n	800761c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800761e:	f000 f87f 	bl	8007720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007622:	2100      	movs	r1, #0
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fcdf 	bl	8007fe8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800762a:	f000 f887 	bl	800773c <xTaskResumeAll>
 800762e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d107      	bne.n	8007646 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007636:	4b07      	ldr	r3, [pc, #28]	; (8007654 <vTaskDelay+0x64>)
 8007638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000be4 	.word	0x20000be4
 8007654:	e000ed04 	.word	0xe000ed04

08007658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007666:	463a      	mov	r2, r7
 8007668:	1d39      	adds	r1, r7, #4
 800766a:	f107 0308 	add.w	r3, r7, #8
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe ffba 	bl	80065e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	9202      	str	r2, [sp, #8]
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	2300      	movs	r3, #0
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	2300      	movs	r3, #0
 8007684:	460a      	mov	r2, r1
 8007686:	4920      	ldr	r1, [pc, #128]	; (8007708 <vTaskStartScheduler+0xb0>)
 8007688:	4820      	ldr	r0, [pc, #128]	; (800770c <vTaskStartScheduler+0xb4>)
 800768a:	f7ff fe1d 	bl	80072c8 <xTaskCreateStatic>
 800768e:	4602      	mov	r2, r0
 8007690:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <vTaskStartScheduler+0xb8>)
 8007692:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007694:	4b1e      	ldr	r3, [pc, #120]	; (8007710 <vTaskStartScheduler+0xb8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800769c:	2301      	movs	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e001      	b.n	80076a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d102      	bne.n	80076b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076ac:	f000 fcf0 	bl	8008090 <xTimerCreateTimerTask>
 80076b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d115      	bne.n	80076e4 <vTaskStartScheduler+0x8c>
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <vTaskStartScheduler+0xbc>)
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <vTaskStartScheduler+0xc0>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80076d8:	4b10      	ldr	r3, [pc, #64]	; (800771c <vTaskStartScheduler+0xc4>)
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076de:	f001 f85b 	bl	8008798 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076e2:	e00d      	b.n	8007700 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	d109      	bne.n	8007700 <vTaskStartScheduler+0xa8>
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	e7fe      	b.n	80076fe <vTaskStartScheduler+0xa6>
}
 8007700:	bf00      	nop
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	08008f8c 	.word	0x08008f8c
 800770c:	08007d29 	.word	0x08007d29
 8007710:	20000be0 	.word	0x20000be0
 8007714:	20000bdc 	.word	0x20000bdc
 8007718:	20000bc8 	.word	0x20000bc8
 800771c:	20000bc0 	.word	0x20000bc0

08007720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007724:	4b04      	ldr	r3, [pc, #16]	; (8007738 <vTaskSuspendAll+0x18>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	4a03      	ldr	r2, [pc, #12]	; (8007738 <vTaskSuspendAll+0x18>)
 800772c:	6013      	str	r3, [r2, #0]
}
 800772e:	bf00      	nop
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	20000be4 	.word	0x20000be4

0800773c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800774a:	4b41      	ldr	r3, [pc, #260]	; (8007850 <xTaskResumeAll+0x114>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <xTaskResumeAll+0x2a>
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	e7fe      	b.n	8007764 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007766:	f001 f887 	bl	8008878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800776a:	4b39      	ldr	r3, [pc, #228]	; (8007850 <xTaskResumeAll+0x114>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3b01      	subs	r3, #1
 8007770:	4a37      	ldr	r2, [pc, #220]	; (8007850 <xTaskResumeAll+0x114>)
 8007772:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007774:	4b36      	ldr	r3, [pc, #216]	; (8007850 <xTaskResumeAll+0x114>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d162      	bne.n	8007842 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800777c:	4b35      	ldr	r3, [pc, #212]	; (8007854 <xTaskResumeAll+0x118>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d05e      	beq.n	8007842 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007784:	e02f      	b.n	80077e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007786:	4b34      	ldr	r3, [pc, #208]	; (8007858 <xTaskResumeAll+0x11c>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3318      	adds	r3, #24
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe ffe0 	bl	8006758 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3304      	adds	r3, #4
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe ffdb 	bl	8006758 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a6:	4b2d      	ldr	r3, [pc, #180]	; (800785c <xTaskResumeAll+0x120>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d903      	bls.n	80077b6 <xTaskResumeAll+0x7a>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	4a2a      	ldr	r2, [pc, #168]	; (800785c <xTaskResumeAll+0x120>)
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4a27      	ldr	r2, [pc, #156]	; (8007860 <xTaskResumeAll+0x124>)
 80077c4:	441a      	add	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3304      	adds	r3, #4
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f7fe ff68 	bl	80066a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	4b23      	ldr	r3, [pc, #140]	; (8007864 <xTaskResumeAll+0x128>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	429a      	cmp	r2, r3
 80077de:	d302      	bcc.n	80077e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80077e0:	4b21      	ldr	r3, [pc, #132]	; (8007868 <xTaskResumeAll+0x12c>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e6:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <xTaskResumeAll+0x11c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1cb      	bne.n	8007786 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077f4:	f000 fb4a 	bl	8007e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077f8:	4b1c      	ldr	r3, [pc, #112]	; (800786c <xTaskResumeAll+0x130>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d010      	beq.n	8007826 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007804:	f000 f844 	bl	8007890 <xTaskIncrementTick>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800780e:	4b16      	ldr	r3, [pc, #88]	; (8007868 <xTaskResumeAll+0x12c>)
 8007810:	2201      	movs	r2, #1
 8007812:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3b01      	subs	r3, #1
 8007818:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f1      	bne.n	8007804 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007820:	4b12      	ldr	r3, [pc, #72]	; (800786c <xTaskResumeAll+0x130>)
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007826:	4b10      	ldr	r3, [pc, #64]	; (8007868 <xTaskResumeAll+0x12c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTaskResumeAll+0x134>)
 8007834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007842:	f001 f847 	bl	80088d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007846:	68bb      	ldr	r3, [r7, #8]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000be4 	.word	0x20000be4
 8007854:	20000bbc 	.word	0x20000bbc
 8007858:	20000b7c 	.word	0x20000b7c
 800785c:	20000bc4 	.word	0x20000bc4
 8007860:	200006ec 	.word	0x200006ec
 8007864:	200006e8 	.word	0x200006e8
 8007868:	20000bd0 	.word	0x20000bd0
 800786c:	20000bcc 	.word	0x20000bcc
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <xTaskGetTickCount+0x18>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007880:	687b      	ldr	r3, [r7, #4]
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr
 800788c:	20000bc0 	.word	0x20000bc0

08007890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789a:	4b51      	ldr	r3, [pc, #324]	; (80079e0 <xTaskIncrementTick+0x150>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 808d 	bne.w	80079be <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a4:	4b4f      	ldr	r3, [pc, #316]	; (80079e4 <xTaskIncrementTick+0x154>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078ac:	4a4d      	ldr	r2, [pc, #308]	; (80079e4 <xTaskIncrementTick+0x154>)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11f      	bne.n	80078f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80078b8:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <xTaskIncrementTick+0x158>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <xTaskIncrementTick+0x46>
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	e7fe      	b.n	80078d4 <xTaskIncrementTick+0x44>
 80078d6:	4b44      	ldr	r3, [pc, #272]	; (80079e8 <xTaskIncrementTick+0x158>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	4b43      	ldr	r3, [pc, #268]	; (80079ec <xTaskIncrementTick+0x15c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a41      	ldr	r2, [pc, #260]	; (80079e8 <xTaskIncrementTick+0x158>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	4a41      	ldr	r2, [pc, #260]	; (80079ec <xTaskIncrementTick+0x15c>)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	4b41      	ldr	r3, [pc, #260]	; (80079f0 <xTaskIncrementTick+0x160>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3301      	adds	r3, #1
 80078f0:	4a3f      	ldr	r2, [pc, #252]	; (80079f0 <xTaskIncrementTick+0x160>)
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	f000 faca 	bl	8007e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078f8:	4b3e      	ldr	r3, [pc, #248]	; (80079f4 <xTaskIncrementTick+0x164>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d34e      	bcc.n	80079a0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007902:	4b39      	ldr	r3, [pc, #228]	; (80079e8 <xTaskIncrementTick+0x158>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <xTaskIncrementTick+0x80>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <xTaskIncrementTick+0x82>
 8007910:	2300      	movs	r3, #0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007916:	4b37      	ldr	r3, [pc, #220]	; (80079f4 <xTaskIncrementTick+0x164>)
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	601a      	str	r2, [r3, #0]
					break;
 800791e:	e03f      	b.n	80079a0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007920:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <xTaskIncrementTick+0x158>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d203      	bcs.n	8007940 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007938:	4a2e      	ldr	r2, [pc, #184]	; (80079f4 <xTaskIncrementTick+0x164>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6013      	str	r3, [r2, #0]
						break;
 800793e:	e02f      	b.n	80079a0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3304      	adds	r3, #4
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe ff07 	bl	8006758 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	3318      	adds	r3, #24
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fefe 	bl	8006758 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <xTaskIncrementTick+0x168>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d903      	bls.n	8007970 <xTaskIncrementTick+0xe0>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <xTaskIncrementTick+0x168>)
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4a1f      	ldr	r2, [pc, #124]	; (80079fc <xTaskIncrementTick+0x16c>)
 800797e:	441a      	add	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3304      	adds	r3, #4
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f7fe fe8b 	bl	80066a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <xTaskIncrementTick+0x170>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	429a      	cmp	r2, r3
 8007998:	d3b3      	bcc.n	8007902 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800799a:	2301      	movs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800799e:	e7b0      	b.n	8007902 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079a0:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <xTaskIncrementTick+0x170>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a6:	4915      	ldr	r1, [pc, #84]	; (80079fc <xTaskIncrementTick+0x16c>)
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d907      	bls.n	80079c8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	e004      	b.n	80079c8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079be:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <xTaskIncrementTick+0x174>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a0f      	ldr	r2, [pc, #60]	; (8007a04 <xTaskIncrementTick+0x174>)
 80079c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079c8:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <xTaskIncrementTick+0x178>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80079d0:	2301      	movs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079d4:	697b      	ldr	r3, [r7, #20]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20000be4 	.word	0x20000be4
 80079e4:	20000bc0 	.word	0x20000bc0
 80079e8:	20000b74 	.word	0x20000b74
 80079ec:	20000b78 	.word	0x20000b78
 80079f0:	20000bd4 	.word	0x20000bd4
 80079f4:	20000bdc 	.word	0x20000bdc
 80079f8:	20000bc4 	.word	0x20000bc4
 80079fc:	200006ec 	.word	0x200006ec
 8007a00:	200006e8 	.word	0x200006e8
 8007a04:	20000bcc 	.word	0x20000bcc
 8007a08:	20000bd0 	.word	0x20000bd0

08007a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a12:	4b27      	ldr	r3, [pc, #156]	; (8007ab0 <vTaskSwitchContext+0xa4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a1a:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <vTaskSwitchContext+0xa8>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a20:	e040      	b.n	8007aa4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007a22:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <vTaskSwitchContext+0xa8>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a28:	4b23      	ldr	r3, [pc, #140]	; (8007ab8 <vTaskSwitchContext+0xac>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	e00f      	b.n	8007a50 <vTaskSwitchContext+0x44>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d109      	bne.n	8007a4a <vTaskSwitchContext+0x3e>
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	607b      	str	r3, [r7, #4]
 8007a48:	e7fe      	b.n	8007a48 <vTaskSwitchContext+0x3c>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	491a      	ldr	r1, [pc, #104]	; (8007abc <vTaskSwitchContext+0xb0>)
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	440b      	add	r3, r1
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0e5      	beq.n	8007a30 <vTaskSwitchContext+0x24>
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4a13      	ldr	r2, [pc, #76]	; (8007abc <vTaskSwitchContext+0xb0>)
 8007a70:	4413      	add	r3, r2
 8007a72:	60bb      	str	r3, [r7, #8]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	605a      	str	r2, [r3, #4]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	3308      	adds	r3, #8
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d104      	bne.n	8007a94 <vTaskSwitchContext+0x88>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	605a      	str	r2, [r3, #4]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <vTaskSwitchContext+0xb4>)
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4a06      	ldr	r2, [pc, #24]	; (8007ab8 <vTaskSwitchContext+0xac>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6013      	str	r3, [r2, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20000be4 	.word	0x20000be4
 8007ab4:	20000bd0 	.word	0x20000bd0
 8007ab8:	20000bc4 	.word	0x20000bc4
 8007abc:	200006ec 	.word	0x200006ec
 8007ac0:	200006e8 	.word	0x200006e8

08007ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <vTaskPlaceOnEventList+0x24>
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	e7fe      	b.n	8007ae6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ae8:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <vTaskPlaceOnEventList+0x44>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3318      	adds	r3, #24
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fe fdf9 	bl	80066e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007af6:	2101      	movs	r1, #1
 8007af8:	6838      	ldr	r0, [r7, #0]
 8007afa:	f000 fa75 	bl	8007fe8 <prvAddCurrentTaskToDelayedList>
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	200006e8 	.word	0x200006e8

08007b0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <vTaskPlaceOnEventListRestricted+0x26>
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e7fe      	b.n	8007b30 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b32:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <vTaskPlaceOnEventListRestricted+0x50>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3318      	adds	r3, #24
 8007b38:	4619      	mov	r1, r3
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7fe fdb1 	bl	80066a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007b46:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	68b8      	ldr	r0, [r7, #8]
 8007b50:	f000 fa4a 	bl	8007fe8 <prvAddCurrentTaskToDelayedList>
	}
 8007b54:	bf00      	nop
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	200006e8 	.word	0x200006e8

08007b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <xTaskRemoveFromEventList+0x2a>
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	e7fe      	b.n	8007b88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	3318      	adds	r3, #24
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fde2 	bl	8006758 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b94:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <xTaskRemoveFromEventList+0xac>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11d      	bne.n	8007bd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe fdd9 	bl	8006758 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007baa:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <xTaskRemoveFromEventList+0xb0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d903      	bls.n	8007bba <xTaskRemoveFromEventList+0x5a>
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	4a16      	ldr	r2, [pc, #88]	; (8007c10 <xTaskRemoveFromEventList+0xb0>)
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <xTaskRemoveFromEventList+0xb4>)
 8007bc8:	441a      	add	r2, r3
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f7fe fd66 	bl	80066a2 <vListInsertEnd>
 8007bd6:	e005      	b.n	8007be4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	3318      	adds	r3, #24
 8007bdc:	4619      	mov	r1, r3
 8007bde:	480e      	ldr	r0, [pc, #56]	; (8007c18 <xTaskRemoveFromEventList+0xb8>)
 8007be0:	f7fe fd5f 	bl	80066a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <xTaskRemoveFromEventList+0xbc>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d905      	bls.n	8007bfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bf6:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <xTaskRemoveFromEventList+0xc0>)
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e001      	b.n	8007c02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c02:	697b      	ldr	r3, [r7, #20]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	20000be4 	.word	0x20000be4
 8007c10:	20000bc4 	.word	0x20000bc4
 8007c14:	200006ec 	.word	0x200006ec
 8007c18:	20000b7c 	.word	0x20000b7c
 8007c1c:	200006e8 	.word	0x200006e8
 8007c20:	20000bd0 	.word	0x20000bd0

08007c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <vTaskInternalSetTimeOutState+0x24>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <vTaskInternalSetTimeOutState+0x28>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	605a      	str	r2, [r3, #4]
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000bd4 	.word	0x20000bd4
 8007c4c:	20000bc0 	.word	0x20000bc0

08007c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <xTaskCheckForTimeOut+0x24>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	e7fe      	b.n	8007c72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <xTaskCheckForTimeOut+0x3e>
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e7fe      	b.n	8007c8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007c8e:	f000 fdf3 	bl	8008878 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c92:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <xTaskCheckForTimeOut+0xb8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007caa:	d102      	bne.n	8007cb2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	e023      	b.n	8007cfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b15      	ldr	r3, [pc, #84]	; (8007d0c <xTaskCheckForTimeOut+0xbc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d007      	beq.n	8007cce <xTaskCheckForTimeOut+0x7e>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d302      	bcc.n	8007cce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	e015      	b.n	8007cfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d20b      	bcs.n	8007cf0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff ff9d 	bl	8007c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	e004      	b.n	8007cfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cfa:	f000 fdeb 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20000bc0 	.word	0x20000bc0
 8007d0c:	20000bd4 	.word	0x20000bd4

08007d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d14:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <vTaskMissedYield+0x14>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20000bd0 	.word	0x20000bd0

08007d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d30:	f000 f852 	bl	8007dd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <prvIdleTask+0x28>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d9f9      	bls.n	8007d30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <prvIdleTask+0x2c>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d4c:	e7f0      	b.n	8007d30 <prvIdleTask+0x8>
 8007d4e:	bf00      	nop
 8007d50:	200006ec 	.word	0x200006ec
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d5e:	2300      	movs	r3, #0
 8007d60:	607b      	str	r3, [r7, #4]
 8007d62:	e00c      	b.n	8007d7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4a12      	ldr	r2, [pc, #72]	; (8007db8 <prvInitialiseTaskLists+0x60>)
 8007d70:	4413      	add	r3, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fc6a 	bl	800664c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	607b      	str	r3, [r7, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b37      	cmp	r3, #55	; 0x37
 8007d82:	d9ef      	bls.n	8007d64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d84:	480d      	ldr	r0, [pc, #52]	; (8007dbc <prvInitialiseTaskLists+0x64>)
 8007d86:	f7fe fc61 	bl	800664c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d8a:	480d      	ldr	r0, [pc, #52]	; (8007dc0 <prvInitialiseTaskLists+0x68>)
 8007d8c:	f7fe fc5e 	bl	800664c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d90:	480c      	ldr	r0, [pc, #48]	; (8007dc4 <prvInitialiseTaskLists+0x6c>)
 8007d92:	f7fe fc5b 	bl	800664c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d96:	480c      	ldr	r0, [pc, #48]	; (8007dc8 <prvInitialiseTaskLists+0x70>)
 8007d98:	f7fe fc58 	bl	800664c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d9c:	480b      	ldr	r0, [pc, #44]	; (8007dcc <prvInitialiseTaskLists+0x74>)
 8007d9e:	f7fe fc55 	bl	800664c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007da2:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <prvInitialiseTaskLists+0x78>)
 8007da4:	4a05      	ldr	r2, [pc, #20]	; (8007dbc <prvInitialiseTaskLists+0x64>)
 8007da6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <prvInitialiseTaskLists+0x7c>)
 8007daa:	4a05      	ldr	r2, [pc, #20]	; (8007dc0 <prvInitialiseTaskLists+0x68>)
 8007dac:	601a      	str	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	200006ec 	.word	0x200006ec
 8007dbc:	20000b4c 	.word	0x20000b4c
 8007dc0:	20000b60 	.word	0x20000b60
 8007dc4:	20000b7c 	.word	0x20000b7c
 8007dc8:	20000b90 	.word	0x20000b90
 8007dcc:	20000ba8 	.word	0x20000ba8
 8007dd0:	20000b74 	.word	0x20000b74
 8007dd4:	20000b78 	.word	0x20000b78

08007dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dde:	e019      	b.n	8007e14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007de0:	f000 fd4a 	bl	8008878 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <prvCheckTasksWaitingTermination+0x4c>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fcb1 	bl	8006758 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvCheckTasksWaitingTermination+0x50>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	4a0a      	ldr	r2, [pc, #40]	; (8007e28 <prvCheckTasksWaitingTermination+0x50>)
 8007dfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <prvCheckTasksWaitingTermination+0x54>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <prvCheckTasksWaitingTermination+0x54>)
 8007e08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e0a:	f000 fd63 	bl	80088d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f80e 	bl	8007e30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <prvCheckTasksWaitingTermination+0x54>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e1      	bne.n	8007de0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000b90 	.word	0x20000b90
 8007e28:	20000bbc 	.word	0x20000bbc
 8007e2c:	20000ba4 	.word	0x20000ba4

08007e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d108      	bne.n	8007e54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fece 	bl	8008be8 <vPortFree>
				vPortFree( pxTCB );
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fecb 	bl	8008be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e52:	e017      	b.n	8007e84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d103      	bne.n	8007e66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fec2 	bl	8008be8 <vPortFree>
	}
 8007e64:	e00e      	b.n	8007e84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d009      	beq.n	8007e84 <prvDeleteTCB+0x54>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	e7fe      	b.n	8007e82 <prvDeleteTCB+0x52>
	}
 8007e84:	bf00      	nop
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e92:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <prvResetNextTaskUnblockTime+0x40>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <prvResetNextTaskUnblockTime+0x14>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <prvResetNextTaskUnblockTime+0x16>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvResetNextTaskUnblockTime+0x44>)
 8007ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eae:	e008      	b.n	8007ec2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <prvResetNextTaskUnblockTime+0x40>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	4a04      	ldr	r2, [pc, #16]	; (8007ed0 <prvResetNextTaskUnblockTime+0x44>)
 8007ec0:	6013      	str	r3, [r2, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	20000b74 	.word	0x20000b74
 8007ed0:	20000bdc 	.word	0x20000bdc

08007ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <xTaskGetSchedulerState+0x34>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	e008      	b.n	8007efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee8:	4b08      	ldr	r3, [pc, #32]	; (8007f0c <xTaskGetSchedulerState+0x38>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	e001      	b.n	8007efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007efa:	687b      	ldr	r3, [r7, #4]
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000bc8 	.word	0x20000bc8
 8007f0c:	20000be4 	.word	0x20000be4

08007f10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d054      	beq.n	8007fd0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f26:	4b2d      	ldr	r3, [pc, #180]	; (8007fdc <xTaskPriorityDisinherit+0xcc>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d009      	beq.n	8007f44 <xTaskPriorityDisinherit+0x34>
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	e7fe      	b.n	8007f42 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <xTaskPriorityDisinherit+0x50>
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60bb      	str	r3, [r7, #8]
 8007f5e:	e7fe      	b.n	8007f5e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f64:	1e5a      	subs	r2, r3, #1
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d02c      	beq.n	8007fd0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d128      	bne.n	8007fd0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	3304      	adds	r3, #4
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fbe8 	bl	8006758 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <xTaskPriorityDisinherit+0xd0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d903      	bls.n	8007fb0 <xTaskPriorityDisinherit+0xa0>
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	4a0c      	ldr	r2, [pc, #48]	; (8007fe0 <xTaskPriorityDisinherit+0xd0>)
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4a09      	ldr	r2, [pc, #36]	; (8007fe4 <xTaskPriorityDisinherit+0xd4>)
 8007fbe:	441a      	add	r2, r3
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f7fe fb6b 	bl	80066a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fd0:	697b      	ldr	r3, [r7, #20]
	}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	200006e8 	.word	0x200006e8
 8007fe0:	20000bc4 	.word	0x20000bc4
 8007fe4:	200006ec 	.word	0x200006ec

08007fe8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ff2:	4b21      	ldr	r3, [pc, #132]	; (8008078 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ff8:	4b20      	ldr	r3, [pc, #128]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fbaa 	bl	8006758 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d10a      	bne.n	8008022 <prvAddCurrentTaskToDelayedList+0x3a>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008012:	4b1a      	ldr	r3, [pc, #104]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3304      	adds	r3, #4
 8008018:	4619      	mov	r1, r3
 800801a:	4819      	ldr	r0, [pc, #100]	; (8008080 <prvAddCurrentTaskToDelayedList+0x98>)
 800801c:	f7fe fb41 	bl	80066a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008020:	e026      	b.n	8008070 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4413      	add	r3, r2
 8008028:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800802a:	4b14      	ldr	r3, [pc, #80]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	429a      	cmp	r2, r3
 8008038:	d209      	bcs.n	800804e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <prvAddCurrentTaskToDelayedList+0x9c>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f7fe fb4e 	bl	80066e8 <vListInsert>
}
 800804c:	e010      	b.n	8008070 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800804e:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3304      	adds	r3, #4
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f7fe fb44 	bl	80066e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	429a      	cmp	r2, r3
 8008068:	d202      	bcs.n	8008070 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800806a:	4a08      	ldr	r2, [pc, #32]	; (800808c <prvAddCurrentTaskToDelayedList+0xa4>)
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6013      	str	r3, [r2, #0]
}
 8008070:	bf00      	nop
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20000bc0 	.word	0x20000bc0
 800807c:	200006e8 	.word	0x200006e8
 8008080:	20000ba8 	.word	0x20000ba8
 8008084:	20000b78 	.word	0x20000b78
 8008088:	20000b74 	.word	0x20000b74
 800808c:	20000bdc 	.word	0x20000bdc

08008090 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	; 0x28
 8008094:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800809a:	f000 fac3 	bl	8008624 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800809e:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <xTimerCreateTimerTask+0x80>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d021      	beq.n	80080ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080ae:	1d3a      	adds	r2, r7, #4
 80080b0:	f107 0108 	add.w	r1, r7, #8
 80080b4:	f107 030c 	add.w	r3, r7, #12
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe faad 	bl	8006618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	9202      	str	r2, [sp, #8]
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	2302      	movs	r3, #2
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	2300      	movs	r3, #0
 80080ce:	460a      	mov	r2, r1
 80080d0:	4910      	ldr	r1, [pc, #64]	; (8008114 <xTimerCreateTimerTask+0x84>)
 80080d2:	4811      	ldr	r0, [pc, #68]	; (8008118 <xTimerCreateTimerTask+0x88>)
 80080d4:	f7ff f8f8 	bl	80072c8 <xTaskCreateStatic>
 80080d8:	4602      	mov	r2, r0
 80080da:	4b10      	ldr	r3, [pc, #64]	; (800811c <xTimerCreateTimerTask+0x8c>)
 80080dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <xTimerCreateTimerTask+0x8c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080e6:	2301      	movs	r3, #1
 80080e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d109      	bne.n	8008104 <xTimerCreateTimerTask+0x74>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	e7fe      	b.n	8008102 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008104:	697b      	ldr	r3, [r7, #20]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000c18 	.word	0x20000c18
 8008114:	08008f94 	.word	0x08008f94
 8008118:	08008239 	.word	0x08008239
 800811c:	20000c1c 	.word	0x20000c1c

08008120 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800812e:	2300      	movs	r3, #0
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d109      	bne.n	800814c <xTimerGenericCommand+0x2c>
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	623b      	str	r3, [r7, #32]
 800814a:	e7fe      	b.n	800814a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800814c:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <xTimerGenericCommand+0x94>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d02a      	beq.n	80081aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b05      	cmp	r3, #5
 8008164:	dc18      	bgt.n	8008198 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008166:	f7ff feb5 	bl	8007ed4 <xTaskGetSchedulerState>
 800816a:	4603      	mov	r3, r0
 800816c:	2b02      	cmp	r3, #2
 800816e:	d109      	bne.n	8008184 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008170:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <xTimerGenericCommand+0x94>)
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	f107 0110 	add.w	r1, r7, #16
 8008178:	2300      	movs	r3, #0
 800817a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817c:	f7fe fc50 	bl	8006a20 <xQueueGenericSend>
 8008180:	6278      	str	r0, [r7, #36]	; 0x24
 8008182:	e012      	b.n	80081aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008184:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <xTimerGenericCommand+0x94>)
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	f107 0110 	add.w	r1, r7, #16
 800818c:	2300      	movs	r3, #0
 800818e:	2200      	movs	r2, #0
 8008190:	f7fe fc46 	bl	8006a20 <xQueueGenericSend>
 8008194:	6278      	str	r0, [r7, #36]	; 0x24
 8008196:	e008      	b.n	80081aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008198:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <xTimerGenericCommand+0x94>)
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	f107 0110 	add.w	r1, r7, #16
 80081a0:	2300      	movs	r3, #0
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	f7fe fd36 	bl	8006c14 <xQueueGenericSendFromISR>
 80081a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3728      	adds	r7, #40	; 0x28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000c18 	.word	0x20000c18

080081b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af02      	add	r7, sp, #8
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081c2:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <prvProcessExpiredTimer+0x7c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe fac1 	bl	8006758 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d121      	bne.n	8008222 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	18d1      	adds	r1, r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	6978      	ldr	r0, [r7, #20]
 80081ec:	f000 f8c8 	bl	8008380 <prvInsertTimerInActiveList>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d015      	beq.n	8008222 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081f6:	2300      	movs	r3, #0
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	2300      	movs	r3, #0
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	2100      	movs	r1, #0
 8008200:	6978      	ldr	r0, [r7, #20]
 8008202:	f7ff ff8d 	bl	8008120 <xTimerGenericCommand>
 8008206:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <prvProcessExpiredTimer+0x6a>
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e7fe      	b.n	8008220 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	6978      	ldr	r0, [r7, #20]
 8008228:	4798      	blx	r3
}
 800822a:	bf00      	nop
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000c10 	.word	0x20000c10

08008238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008240:	f107 0308 	add.w	r3, r7, #8
 8008244:	4618      	mov	r0, r3
 8008246:	f000 f857 	bl	80082f8 <prvGetNextExpireTime>
 800824a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	4619      	mov	r1, r3
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f803 	bl	800825c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008256:	f000 f8d5 	bl	8008404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800825a:	e7f1      	b.n	8008240 <prvTimerTask+0x8>

0800825c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008266:	f7ff fa5b 	bl	8007720 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f866 	bl	8008340 <prvSampleTimeNow>
 8008274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d130      	bne.n	80082de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <prvProcessTimerOrBlockTask+0x3c>
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	429a      	cmp	r2, r3
 8008288:	d806      	bhi.n	8008298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800828a:	f7ff fa57 	bl	800773c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff ff91 	bl	80081b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008296:	e024      	b.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d008      	beq.n	80082b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800829e:	4b13      	ldr	r3, [pc, #76]	; (80082ec <prvProcessTimerOrBlockTask+0x90>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bf0c      	ite	eq
 80082a8:	2301      	moveq	r3, #1
 80082aa:	2300      	movne	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082b0:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <prvProcessTimerOrBlockTask+0x94>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	4619      	mov	r1, r3
 80082be:	f7fe ffcf 	bl	8007260 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082c2:	f7ff fa3b 	bl	800773c <xTaskResumeAll>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <prvProcessTimerOrBlockTask+0x98>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	f3bf 8f6f 	isb	sy
}
 80082dc:	e001      	b.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082de:	f7ff fa2d 	bl	800773c <xTaskResumeAll>
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000c14 	.word	0x20000c14
 80082f0:	20000c18 	.word	0x20000c18
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008300:	4b0e      	ldr	r3, [pc, #56]	; (800833c <prvGetNextExpireTime+0x44>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bf0c      	ite	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	2300      	movne	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d105      	bne.n	800832a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800831e:	4b07      	ldr	r3, [pc, #28]	; (800833c <prvGetNextExpireTime+0x44>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e001      	b.n	800832e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800832e:	68fb      	ldr	r3, [r7, #12]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000c10 	.word	0x20000c10

08008340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008348:	f7ff fa94 	bl	8007874 <xTaskGetTickCount>
 800834c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <prvSampleTimeNow+0x3c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	429a      	cmp	r2, r3
 8008356:	d205      	bcs.n	8008364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008358:	f000 f904 	bl	8008564 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	e002      	b.n	800836a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800836a:	4a04      	ldr	r2, [pc, #16]	; (800837c <prvSampleTimeNow+0x3c>)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008370:	68fb      	ldr	r3, [r7, #12]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000c20 	.word	0x20000c20

08008380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d812      	bhi.n	80083cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d302      	bcc.n	80083ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80083b4:	2301      	movs	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	e01b      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083ba:	4b10      	ldr	r3, [pc, #64]	; (80083fc <prvInsertTimerInActiveList+0x7c>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3304      	adds	r3, #4
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f7fe f98f 	bl	80066e8 <vListInsert>
 80083ca:	e012      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d206      	bcs.n	80083e2 <prvInsertTimerInActiveList+0x62>
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d302      	bcc.n	80083e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	617b      	str	r3, [r7, #20]
 80083e0:	e007      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <prvInsertTimerInActiveList+0x80>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	4610      	mov	r0, r2
 80083ee:	f7fe f97b 	bl	80066e8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083f2:	697b      	ldr	r3, [r7, #20]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000c14 	.word	0x20000c14
 8008400:	20000c10 	.word	0x20000c10

08008404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800840a:	e099      	b.n	8008540 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	da17      	bge.n	8008442 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008412:	1d3b      	adds	r3, r7, #4
 8008414:	3304      	adds	r3, #4
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <prvProcessReceivedCommands+0x2e>
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e7fe      	b.n	8008430 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008438:	6850      	ldr	r0, [r2, #4]
 800843a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800843c:	6892      	ldr	r2, [r2, #8]
 800843e:	4611      	mov	r1, r2
 8008440:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	db7a      	blt.n	800853e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe f97d 	bl	8006758 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800845e:	463b      	mov	r3, r7
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff ff6d 	bl	8008340 <prvSampleTimeNow>
 8008466:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b09      	cmp	r3, #9
 800846c:	d868      	bhi.n	8008540 <prvProcessReceivedCommands+0x13c>
 800846e:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <prvProcessReceivedCommands+0x70>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	0800849d 	.word	0x0800849d
 8008478:	0800849d 	.word	0x0800849d
 800847c:	0800849d 	.word	0x0800849d
 8008480:	08008541 	.word	0x08008541
 8008484:	080084f7 	.word	0x080084f7
 8008488:	0800852d 	.word	0x0800852d
 800848c:	0800849d 	.word	0x0800849d
 8008490:	0800849d 	.word	0x0800849d
 8008494:	08008541 	.word	0x08008541
 8008498:	080084f7 	.word	0x080084f7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	18d1      	adds	r1, r2, r3
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084aa:	f7ff ff69 	bl	8008380 <prvInsertTimerInActiveList>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d045      	beq.n	8008540 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d13d      	bne.n	8008540 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	441a      	add	r2, r3
 80084cc:	2300      	movs	r3, #0
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	2300      	movs	r3, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d6:	f7ff fe23 	bl	8008120 <xTimerGenericCommand>
 80084da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12e      	bne.n	8008540 <prvProcessReceivedCommands+0x13c>
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	61bb      	str	r3, [r7, #24]
 80084f4:	e7fe      	b.n	80084f4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <prvProcessReceivedCommands+0x114>
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	e7fe      	b.n	8008516 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	18d1      	adds	r1, r2, r3
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008526:	f7ff ff2b 	bl	8008380 <prvInsertTimerInActiveList>
					break;
 800852a:	e009      	b.n	8008540 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008538:	f000 fb56 	bl	8008be8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800853c:	e000      	b.n	8008540 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800853e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <prvProcessReceivedCommands+0x15c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	1d39      	adds	r1, r7, #4
 8008546:	2200      	movs	r2, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fbf7 	bl	8006d3c <xQueueReceive>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	f47f af5b 	bne.w	800840c <prvProcessReceivedCommands+0x8>
	}
}
 8008556:	bf00      	nop
 8008558:	3730      	adds	r7, #48	; 0x30
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000c18 	.word	0x20000c18

08008564 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800856a:	e044      	b.n	80085f6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800856c:	4b2b      	ldr	r3, [pc, #172]	; (800861c <prvSwitchTimerLists+0xb8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008576:	4b29      	ldr	r3, [pc, #164]	; (800861c <prvSwitchTimerLists+0xb8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3304      	adds	r3, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe f8e7 	bl	8006758 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d12d      	bne.n	80085f6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4413      	add	r3, r2
 80085a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d90e      	bls.n	80085ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085b8:	4b18      	ldr	r3, [pc, #96]	; (800861c <prvSwitchTimerLists+0xb8>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3304      	adds	r3, #4
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f7fe f890 	bl	80066e8 <vListInsert>
 80085c8:	e015      	b.n	80085f6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085ca:	2300      	movs	r3, #0
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	2300      	movs	r3, #0
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	2100      	movs	r1, #0
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fda3 	bl	8008120 <xTimerGenericCommand>
 80085da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <prvSwitchTimerLists+0x92>
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	e7fe      	b.n	80085f4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <prvSwitchTimerLists+0xb8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1b5      	bne.n	800856c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <prvSwitchTimerLists+0xb8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008606:	4b06      	ldr	r3, [pc, #24]	; (8008620 <prvSwitchTimerLists+0xbc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a04      	ldr	r2, [pc, #16]	; (800861c <prvSwitchTimerLists+0xb8>)
 800860c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800860e:	4a04      	ldr	r2, [pc, #16]	; (8008620 <prvSwitchTimerLists+0xbc>)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	6013      	str	r3, [r2, #0]
}
 8008614:	bf00      	nop
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20000c10 	.word	0x20000c10
 8008620:	20000c14 	.word	0x20000c14

08008624 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800862a:	f000 f925 	bl	8008878 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800862e:	4b15      	ldr	r3, [pc, #84]	; (8008684 <prvCheckForValidListAndQueue+0x60>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d120      	bne.n	8008678 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008636:	4814      	ldr	r0, [pc, #80]	; (8008688 <prvCheckForValidListAndQueue+0x64>)
 8008638:	f7fe f808 	bl	800664c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800863c:	4813      	ldr	r0, [pc, #76]	; (800868c <prvCheckForValidListAndQueue+0x68>)
 800863e:	f7fe f805 	bl	800664c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008642:	4b13      	ldr	r3, [pc, #76]	; (8008690 <prvCheckForValidListAndQueue+0x6c>)
 8008644:	4a10      	ldr	r2, [pc, #64]	; (8008688 <prvCheckForValidListAndQueue+0x64>)
 8008646:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008648:	4b12      	ldr	r3, [pc, #72]	; (8008694 <prvCheckForValidListAndQueue+0x70>)
 800864a:	4a10      	ldr	r2, [pc, #64]	; (800868c <prvCheckForValidListAndQueue+0x68>)
 800864c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800864e:	2300      	movs	r3, #0
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	4b11      	ldr	r3, [pc, #68]	; (8008698 <prvCheckForValidListAndQueue+0x74>)
 8008654:	4a11      	ldr	r2, [pc, #68]	; (800869c <prvCheckForValidListAndQueue+0x78>)
 8008656:	2110      	movs	r1, #16
 8008658:	200a      	movs	r0, #10
 800865a:	f7fe f90f 	bl	800687c <xQueueGenericCreateStatic>
 800865e:	4602      	mov	r2, r0
 8008660:	4b08      	ldr	r3, [pc, #32]	; (8008684 <prvCheckForValidListAndQueue+0x60>)
 8008662:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008664:	4b07      	ldr	r3, [pc, #28]	; (8008684 <prvCheckForValidListAndQueue+0x60>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <prvCheckForValidListAndQueue+0x60>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	490b      	ldr	r1, [pc, #44]	; (80086a0 <prvCheckForValidListAndQueue+0x7c>)
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fdcc 	bl	8007210 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008678:	f000 f92c 	bl	80088d4 <vPortExitCritical>
}
 800867c:	bf00      	nop
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000c18 	.word	0x20000c18
 8008688:	20000be8 	.word	0x20000be8
 800868c:	20000bfc 	.word	0x20000bfc
 8008690:	20000c10 	.word	0x20000c10
 8008694:	20000c14 	.word	0x20000c14
 8008698:	20000cc4 	.word	0x20000cc4
 800869c:	20000c24 	.word	0x20000c24
 80086a0:	08008f9c 	.word	0x08008f9c

080086a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3b04      	subs	r3, #4
 80086b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3b04      	subs	r3, #4
 80086c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f023 0201 	bic.w	r2, r3, #1
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3b04      	subs	r3, #4
 80086d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086d4:	4a08      	ldr	r2, [pc, #32]	; (80086f8 <pxPortInitialiseStack+0x54>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b14      	subs	r3, #20
 80086de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b20      	subs	r3, #32
 80086ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086ec:	68fb      	ldr	r3, [r7, #12]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr
 80086f8:	080086fd 	.word	0x080086fd

080086fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008702:	2300      	movs	r3, #0
 8008704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008706:	4b10      	ldr	r3, [pc, #64]	; (8008748 <prvTaskExitError+0x4c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870e:	d009      	beq.n	8008724 <prvTaskExitError+0x28>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e7fe      	b.n	8008722 <prvTaskExitError+0x26>
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008736:	bf00      	nop
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0fc      	beq.n	8008738 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800873e:	bf00      	nop
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr
 8008748:	2000000c 	.word	0x2000000c
 800874c:	00000000 	.word	0x00000000

08008750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <pxCurrentTCBConst2>)
 8008752:	6819      	ldr	r1, [r3, #0]
 8008754:	6808      	ldr	r0, [r1, #0]
 8008756:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800875a:	f380 8809 	msr	PSP, r0
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8811 	msr	BASEPRI, r0
 800876a:	f04e 0e0d 	orr.w	lr, lr, #13
 800876e:	4770      	bx	lr

08008770 <pxCurrentTCBConst2>:
 8008770:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop

08008778 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008778:	4806      	ldr	r0, [pc, #24]	; (8008794 <prvPortStartFirstTask+0x1c>)
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	6800      	ldr	r0, [r0, #0]
 800877e:	f380 8808 	msr	MSP, r0
 8008782:	b662      	cpsie	i
 8008784:	b661      	cpsie	f
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	df00      	svc	0
 8008790:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008792:	bf00      	nop
 8008794:	e000ed08 	.word	0xe000ed08

08008798 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800879e:	4b31      	ldr	r3, [pc, #196]	; (8008864 <xPortStartScheduler+0xcc>)
 80087a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	22ff      	movs	r2, #255	; 0xff
 80087ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	4b29      	ldr	r3, [pc, #164]	; (8008868 <xPortStartScheduler+0xd0>)
 80087c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087c6:	4b29      	ldr	r3, [pc, #164]	; (800886c <xPortStartScheduler+0xd4>)
 80087c8:	2207      	movs	r2, #7
 80087ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087cc:	e009      	b.n	80087e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80087ce:	4b27      	ldr	r3, [pc, #156]	; (800886c <xPortStartScheduler+0xd4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	4a25      	ldr	r2, [pc, #148]	; (800886c <xPortStartScheduler+0xd4>)
 80087d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b80      	cmp	r3, #128	; 0x80
 80087ec:	d0ef      	beq.n	80087ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087ee:	4b1f      	ldr	r3, [pc, #124]	; (800886c <xPortStartScheduler+0xd4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f1c3 0307 	rsb	r3, r3, #7
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d009      	beq.n	800880e <xPortStartScheduler+0x76>
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60bb      	str	r3, [r7, #8]
 800880c:	e7fe      	b.n	800880c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800880e:	4b17      	ldr	r3, [pc, #92]	; (800886c <xPortStartScheduler+0xd4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	4a15      	ldr	r2, [pc, #84]	; (800886c <xPortStartScheduler+0xd4>)
 8008816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008818:	4b14      	ldr	r3, [pc, #80]	; (800886c <xPortStartScheduler+0xd4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008820:	4a12      	ldr	r2, [pc, #72]	; (800886c <xPortStartScheduler+0xd4>)
 8008822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <xPortStartScheduler+0xd8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <xPortStartScheduler+0xd8>)
 8008832:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008838:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <xPortStartScheduler+0xd8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a0c      	ldr	r2, [pc, #48]	; (8008870 <xPortStartScheduler+0xd8>)
 800883e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008844:	f000 f8b0 	bl	80089a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <xPortStartScheduler+0xdc>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800884e:	f7ff ff93 	bl	8008778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008852:	f7ff f8db 	bl	8007a0c <vTaskSwitchContext>
	prvTaskExitError();
 8008856:	f7ff ff51 	bl	80086fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	e000e400 	.word	0xe000e400
 8008868:	20000d14 	.word	0x20000d14
 800886c:	20000d18 	.word	0x20000d18
 8008870:	e000ed20 	.word	0xe000ed20
 8008874:	2000000c 	.word	0x2000000c

08008878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008890:	4b0e      	ldr	r3, [pc, #56]	; (80088cc <vPortEnterCritical+0x54>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <vPortEnterCritical+0x54>)
 8008898:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800889a:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <vPortEnterCritical+0x54>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d10e      	bne.n	80088c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088a2:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <vPortEnterCritical+0x58>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d009      	beq.n	80088c0 <vPortEnterCritical+0x48>
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	e7fe      	b.n	80088be <vPortEnterCritical+0x46>
	}
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	2000000c 	.word	0x2000000c
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <vPortExitCritical+0x48>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <vPortExitCritical+0x22>
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	607b      	str	r3, [r7, #4]
 80088f4:	e7fe      	b.n	80088f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80088f6:	4b09      	ldr	r3, [pc, #36]	; (800891c <vPortExitCritical+0x48>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a07      	ldr	r2, [pc, #28]	; (800891c <vPortExitCritical+0x48>)
 80088fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <vPortExitCritical+0x48>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d104      	bne.n	8008912 <vPortExitCritical+0x3e>
 8008908:	2300      	movs	r3, #0
 800890a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr
 800891c:	2000000c 	.word	0x2000000c

08008920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008920:	f3ef 8009 	mrs	r0, PSP
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	4b0d      	ldr	r3, [pc, #52]	; (8008960 <pxCurrentTCBConst>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008930:	6010      	str	r0, [r2, #0]
 8008932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800893a:	f380 8811 	msr	BASEPRI, r0
 800893e:	f7ff f865 	bl	8007a0c <vTaskSwitchContext>
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f380 8811 	msr	BASEPRI, r0
 800894a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	6808      	ldr	r0, [r1, #0]
 8008952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008956:	f380 8809 	msr	PSP, r0
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	4770      	bx	lr

08008960 <pxCurrentTCBConst>:
 8008960:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008980:	f7fe ff86 	bl	8007890 <xTaskIncrementTick>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <SysTick_Handler+0x3c>)
 800898c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	2300      	movs	r3, #0
 8008994:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <vPortSetupTimerInterrupt+0x30>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <vPortSetupTimerInterrupt+0x34>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <vPortSetupTimerInterrupt+0x38>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <vPortSetupTimerInterrupt+0x3c>)
 80089be:	fba2 2303 	umull	r2, r3, r2, r3
 80089c2:	099b      	lsrs	r3, r3, #6
 80089c4:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <vPortSetupTimerInterrupt+0x40>)
 80089c6:	3b01      	subs	r3, #1
 80089c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ca:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <vPortSetupTimerInterrupt+0x30>)
 80089cc:	2207      	movs	r2, #7
 80089ce:	601a      	str	r2, [r3, #0]
}
 80089d0:	bf00      	nop
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr
 80089d8:	e000e010 	.word	0xe000e010
 80089dc:	e000e018 	.word	0xe000e018
 80089e0:	20000000 	.word	0x20000000
 80089e4:	10624dd3 	.word	0x10624dd3
 80089e8:	e000e014 	.word	0xe000e014

080089ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089f2:	f3ef 8305 	mrs	r3, IPSR
 80089f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b0f      	cmp	r3, #15
 80089fc:	d913      	bls.n	8008a26 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089fe:	4a15      	ldr	r2, [pc, #84]	; (8008a54 <vPortValidateInterruptPriority+0x68>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a08:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <vPortValidateInterruptPriority+0x6c>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	7afa      	ldrb	r2, [r7, #11]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d209      	bcs.n	8008a26 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	607b      	str	r3, [r7, #4]
 8008a24:	e7fe      	b.n	8008a24 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a26:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <vPortValidateInterruptPriority+0x70>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a2e:	4b0c      	ldr	r3, [pc, #48]	; (8008a60 <vPortValidateInterruptPriority+0x74>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d909      	bls.n	8008a4a <vPortValidateInterruptPriority+0x5e>
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	e7fe      	b.n	8008a48 <vPortValidateInterruptPriority+0x5c>
	}
 8008a4a:	bf00      	nop
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bc80      	pop	{r7}
 8008a52:	4770      	bx	lr
 8008a54:	e000e3f0 	.word	0xe000e3f0
 8008a58:	20000d14 	.word	0x20000d14
 8008a5c:	e000ed0c 	.word	0xe000ed0c
 8008a60:	20000d18 	.word	0x20000d18

08008a64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	; 0x28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a70:	f7fe fe56 	bl	8007720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a74:	4b57      	ldr	r3, [pc, #348]	; (8008bd4 <pvPortMalloc+0x170>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a7c:	f000 f90c 	bl	8008c98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a80:	4b55      	ldr	r3, [pc, #340]	; (8008bd8 <pvPortMalloc+0x174>)
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f040 808c 	bne.w	8008ba6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01c      	beq.n	8008ace <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008a94:	2208      	movs	r2, #8
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4413      	add	r3, r2
 8008a9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d013      	beq.n	8008ace <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f023 0307 	bic.w	r3, r3, #7
 8008aac:	3308      	adds	r3, #8
 8008aae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <pvPortMalloc+0x6a>
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	e7fe      	b.n	8008acc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d068      	beq.n	8008ba6 <pvPortMalloc+0x142>
 8008ad4:	4b41      	ldr	r3, [pc, #260]	; (8008bdc <pvPortMalloc+0x178>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d863      	bhi.n	8008ba6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ade:	4b40      	ldr	r3, [pc, #256]	; (8008be0 <pvPortMalloc+0x17c>)
 8008ae0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ae2:	4b3f      	ldr	r3, [pc, #252]	; (8008be0 <pvPortMalloc+0x17c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ae8:	e004      	b.n	8008af4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d903      	bls.n	8008b06 <pvPortMalloc+0xa2>
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f1      	bne.n	8008aea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b06:	4b33      	ldr	r3, [pc, #204]	; (8008bd4 <pvPortMalloc+0x170>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d04a      	beq.n	8008ba6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2208      	movs	r2, #8
 8008b16:	4413      	add	r3, r2
 8008b18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	1ad2      	subs	r2, r2, r3
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d91e      	bls.n	8008b70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4413      	add	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d009      	beq.n	8008b58 <pvPortMalloc+0xf4>
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	e7fe      	b.n	8008b56 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b6a:	69b8      	ldr	r0, [r7, #24]
 8008b6c:	f000 f8f6 	bl	8008d5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b70:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <pvPortMalloc+0x178>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <pvPortMalloc+0x178>)
 8008b7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b7e:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <pvPortMalloc+0x178>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b18      	ldr	r3, [pc, #96]	; (8008be4 <pvPortMalloc+0x180>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d203      	bcs.n	8008b92 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b8a:	4b14      	ldr	r3, [pc, #80]	; (8008bdc <pvPortMalloc+0x178>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a15      	ldr	r2, [pc, #84]	; (8008be4 <pvPortMalloc+0x180>)
 8008b90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <pvPortMalloc+0x174>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ba6:	f7fe fdc9 	bl	800773c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <pvPortMalloc+0x164>
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	e7fe      	b.n	8008bc6 <pvPortMalloc+0x162>
	return pvReturn;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3728      	adds	r7, #40	; 0x28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20002494 	.word	0x20002494
 8008bd8:	200024a0 	.word	0x200024a0
 8008bdc:	20002498 	.word	0x20002498
 8008be0:	2000248c 	.word	0x2000248c
 8008be4:	2000249c 	.word	0x2000249c

08008be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d046      	beq.n	8008c88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	425b      	negs	r3, r3
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b20      	ldr	r3, [pc, #128]	; (8008c90 <vPortFree+0xa8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d109      	bne.n	8008c2a <vPortFree+0x42>
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	e7fe      	b.n	8008c28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <vPortFree+0x5e>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	60bb      	str	r3, [r7, #8]
 8008c44:	e7fe      	b.n	8008c44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <vPortFree+0xa8>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d019      	beq.n	8008c88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d115      	bne.n	8008c88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <vPortFree+0xa8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	43db      	mvns	r3, r3
 8008c66:	401a      	ands	r2, r3
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c6c:	f7fe fd58 	bl	8007720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	4b07      	ldr	r3, [pc, #28]	; (8008c94 <vPortFree+0xac>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4413      	add	r3, r2
 8008c7a:	4a06      	ldr	r2, [pc, #24]	; (8008c94 <vPortFree+0xac>)
 8008c7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	f000 f86c 	bl	8008d5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c84:	f7fe fd5a 	bl	800773c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c88:	bf00      	nop
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	200024a0 	.word	0x200024a0
 8008c94:	20002498 	.word	0x20002498

08008c98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c9e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008ca2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ca4:	4b27      	ldr	r3, [pc, #156]	; (8008d44 <prvHeapInit+0xac>)
 8008ca6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00c      	beq.n	8008ccc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3307      	adds	r3, #7
 8008cb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0307 	bic.w	r3, r3, #7
 8008cbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	4a1f      	ldr	r2, [pc, #124]	; (8008d44 <prvHeapInit+0xac>)
 8008cc8:	4413      	add	r3, r2
 8008cca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cd0:	4a1d      	ldr	r2, [pc, #116]	; (8008d48 <prvHeapInit+0xb0>)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cd6:	4b1c      	ldr	r3, [pc, #112]	; (8008d48 <prvHeapInit+0xb0>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0307 	bic.w	r3, r3, #7
 8008cf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <prvHeapInit+0xb4>)
 8008cf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cfa:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <prvHeapInit+0xb4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <prvHeapInit+0xb4>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	1ad2      	subs	r2, r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <prvHeapInit+0xb4>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	4a0a      	ldr	r2, [pc, #40]	; (8008d50 <prvHeapInit+0xb8>)
 8008d26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <prvHeapInit+0xbc>)
 8008d2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d30:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <prvHeapInit+0xc0>)
 8008d32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d36:	601a      	str	r2, [r3, #0]
}
 8008d38:	bf00      	nop
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20000d1c 	.word	0x20000d1c
 8008d48:	2000248c 	.word	0x2000248c
 8008d4c:	20002494 	.word	0x20002494
 8008d50:	2000249c 	.word	0x2000249c
 8008d54:	20002498 	.word	0x20002498
 8008d58:	200024a0 	.word	0x200024a0

08008d5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d64:	4b27      	ldr	r3, [pc, #156]	; (8008e04 <prvInsertBlockIntoFreeList+0xa8>)
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	e002      	b.n	8008d70 <prvInsertBlockIntoFreeList+0x14>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d8f7      	bhi.n	8008d6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4413      	add	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d108      	bne.n	8008d9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	441a      	add	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	441a      	add	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d118      	bne.n	8008de4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <prvInsertBlockIntoFreeList+0xac>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d00d      	beq.n	8008dda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	441a      	add	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e008      	b.n	8008dec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dda:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <prvInsertBlockIntoFreeList+0xac>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	e003      	b.n	8008dec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d002      	beq.n	8008dfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr
 8008e04:	2000248c 	.word	0x2000248c
 8008e08:	20002494 	.word	0x20002494

08008e0c <__libc_init_array>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	2500      	movs	r5, #0
 8008e10:	4e0c      	ldr	r6, [pc, #48]	; (8008e44 <__libc_init_array+0x38>)
 8008e12:	4c0d      	ldr	r4, [pc, #52]	; (8008e48 <__libc_init_array+0x3c>)
 8008e14:	1ba4      	subs	r4, r4, r6
 8008e16:	10a4      	asrs	r4, r4, #2
 8008e18:	42a5      	cmp	r5, r4
 8008e1a:	d109      	bne.n	8008e30 <__libc_init_array+0x24>
 8008e1c:	f000 f82e 	bl	8008e7c <_init>
 8008e20:	2500      	movs	r5, #0
 8008e22:	4e0a      	ldr	r6, [pc, #40]	; (8008e4c <__libc_init_array+0x40>)
 8008e24:	4c0a      	ldr	r4, [pc, #40]	; (8008e50 <__libc_init_array+0x44>)
 8008e26:	1ba4      	subs	r4, r4, r6
 8008e28:	10a4      	asrs	r4, r4, #2
 8008e2a:	42a5      	cmp	r5, r4
 8008e2c:	d105      	bne.n	8008e3a <__libc_init_array+0x2e>
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e34:	4798      	blx	r3
 8008e36:	3501      	adds	r5, #1
 8008e38:	e7ee      	b.n	8008e18 <__libc_init_array+0xc>
 8008e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e3e:	4798      	blx	r3
 8008e40:	3501      	adds	r5, #1
 8008e42:	e7f2      	b.n	8008e2a <__libc_init_array+0x1e>
 8008e44:	08009148 	.word	0x08009148
 8008e48:	08009148 	.word	0x08009148
 8008e4c:	08009148 	.word	0x08009148
 8008e50:	0800914c 	.word	0x0800914c

08008e54 <memcpy>:
 8008e54:	b510      	push	{r4, lr}
 8008e56:	1e43      	subs	r3, r0, #1
 8008e58:	440a      	add	r2, r1
 8008e5a:	4291      	cmp	r1, r2
 8008e5c:	d100      	bne.n	8008e60 <memcpy+0xc>
 8008e5e:	bd10      	pop	{r4, pc}
 8008e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e68:	e7f7      	b.n	8008e5a <memcpy+0x6>

08008e6a <memset>:
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	4402      	add	r2, r0
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d100      	bne.n	8008e74 <memset+0xa>
 8008e72:	4770      	bx	lr
 8008e74:	f803 1b01 	strb.w	r1, [r3], #1
 8008e78:	e7f9      	b.n	8008e6e <memset+0x4>
	...

08008e7c <_init>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr

08008e88 <_fini>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	bf00      	nop
 8008e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8e:	bc08      	pop	{r3}
 8008e90:	469e      	mov	lr, r3
 8008e92:	4770      	bx	lr
