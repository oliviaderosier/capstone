
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000058c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c38  08005c38  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005c38  08005c38  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c38  08005c38  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002530  20000010  08005c50  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002540  08005c50  00022540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e42  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031d6  00000000  00000000  00038e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  0003c058  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  0003d550  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d4a  00000000  00000000  0003e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001153a  00000000  00000000  0005761a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097ec6  00000000  00000000  00068b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100a1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005708  00000000  00000000  00100a98  2**2
                  CONTENTS, READONLY, DEBUGGING
=======
  1 .text         00007628  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08007738  08007738  00017738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007974  08007974  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007974  08007974  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007974  08007974  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007974  08007974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007978  08007978  00017978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800797c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024d4  20000010  0800798c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024e4  0800798c  000224e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001830d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ee  00000000  00000000  00038346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0003b638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ea  00000000  00000000  0003dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c7f  00000000  00000000  00055f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093211  00000000  00000000  0006abd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fddea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005230  00000000  00000000  000fde40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000130:	080059bc 	.word	0x080059bc
=======
 8000130:	08007720 	.word	0x08007720
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
<<<<<<< HEAD
 800014c:	080059bc 	.word	0x080059bc
=======
 800014c:	08007720 	.word	0x08007720
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

08000150 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2b3a      	cmp	r3, #58	; 0x3a
 800015e:	d13b      	bne.n	80001d8 <letter+0x88>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48d5      	ldr	r0, [pc, #852]	; (80004bc <letter+0x36c>)
 8000168:	f003 fa31 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000172:	48d3      	ldr	r0, [pc, #844]	; (80004c0 <letter+0x370>)
 8000174:	f003 fa2b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017e:	48d0      	ldr	r0, [pc, #832]	; (80004c0 <letter+0x370>)
 8000180:	f003 fa25 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000184:	2200      	movs	r2, #0
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	48cd      	ldr	r0, [pc, #820]	; (80004c0 <letter+0x370>)
 800018a:	f003 fa20 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800018e:	2201      	movs	r2, #1
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	48cb      	ldr	r0, [pc, #812]	; (80004c0 <letter+0x370>)
 8000194:	f003 fa1b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000198:	2201      	movs	r2, #1
 800019a:	2180      	movs	r1, #128	; 0x80
 800019c:	48c9      	ldr	r0, [pc, #804]	; (80004c4 <letter+0x374>)
 800019e:	f003 fa16 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a8:	48c6      	ldr	r0, [pc, #792]	; (80004c4 <letter+0x374>)
 80001aa:	f003 fa10 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b4:	48c3      	ldr	r0, [pc, #780]	; (80004c4 <letter+0x374>)
 80001b6:	f003 fa0a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c0:	48c0      	ldr	r0, [pc, #768]	; (80004c4 <letter+0x374>)
 80001c2:	f003 fa04 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	48bb      	ldr	r0, [pc, #748]	; (80004bc <letter+0x36c>)
 80001ce:	f003 f9fe 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80001d2:	2002      	movs	r0, #2
 80001d4:	f002 ff5c 	bl	8003090 <HAL_Delay>
	}
	if(L == '-')
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b2d      	cmp	r3, #45	; 0x2d
 80001dc:	d13b      	bne.n	8000256 <letter+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e4:	48b5      	ldr	r0, [pc, #724]	; (80004bc <letter+0x36c>)
 80001e6:	f003 f9f2 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f0:	48b3      	ldr	r0, [pc, #716]	; (80004c0 <letter+0x370>)
 80001f2:	f003 f9ec 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	48b0      	ldr	r0, [pc, #704]	; (80004c0 <letter+0x370>)
 80001fe:	f003 f9e6 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000202:	2201      	movs	r2, #1
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	48ae      	ldr	r0, [pc, #696]	; (80004c0 <letter+0x370>)
 8000208:	f003 f9e1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800020c:	2201      	movs	r2, #1
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	48ab      	ldr	r0, [pc, #684]	; (80004c0 <letter+0x370>)
 8000212:	f003 f9dc 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000216:	2200      	movs	r2, #0
 8000218:	2180      	movs	r1, #128	; 0x80
 800021a:	48aa      	ldr	r0, [pc, #680]	; (80004c4 <letter+0x374>)
 800021c:	f003 f9d7 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000226:	48a7      	ldr	r0, [pc, #668]	; (80004c4 <letter+0x374>)
 8000228:	f003 f9d1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000232:	48a4      	ldr	r0, [pc, #656]	; (80004c4 <letter+0x374>)
 8000234:	f003 f9cb 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023e:	48a1      	ldr	r0, [pc, #644]	; (80004c4 <letter+0x374>)
 8000240:	f003 f9c5 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	489c      	ldr	r0, [pc, #624]	; (80004bc <letter+0x36c>)
 800024c:	f003 f9bf 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000250:	2002      	movs	r0, #2
 8000252:	f002 ff1d 	bl	8003090 <HAL_Delay>
	}
	if(L == ' ')
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b20      	cmp	r3, #32
 800025a:	d13b      	bne.n	80002d4 <letter+0x184>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4896      	ldr	r0, [pc, #600]	; (80004bc <letter+0x36c>)
 8000264:	f003 f9b3 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026e:	4894      	ldr	r0, [pc, #592]	; (80004c0 <letter+0x370>)
 8000270:	f003 f9ad 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027a:	4891      	ldr	r0, [pc, #580]	; (80004c0 <letter+0x370>)
 800027c:	f003 f9a7 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	488e      	ldr	r0, [pc, #568]	; (80004c0 <letter+0x370>)
 8000286:	f003 f9a2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800028a:	2200      	movs	r2, #0
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	488c      	ldr	r0, [pc, #560]	; (80004c0 <letter+0x370>)
 8000290:	f003 f99d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000294:	2200      	movs	r2, #0
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	488a      	ldr	r0, [pc, #552]	; (80004c4 <letter+0x374>)
 800029a:	f003 f998 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4887      	ldr	r0, [pc, #540]	; (80004c4 <letter+0x374>)
 80002a6:	f003 f992 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4884      	ldr	r0, [pc, #528]	; (80004c4 <letter+0x374>)
 80002b2:	f003 f98c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	4881      	ldr	r0, [pc, #516]	; (80004c4 <letter+0x374>)
 80002be:	f003 f986 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	487c      	ldr	r0, [pc, #496]	; (80004bc <letter+0x36c>)
 80002ca:	f003 f980 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80002ce:	2002      	movs	r0, #2
 80002d0:	f002 fede 	bl	8003090 <HAL_Delay>
	}
	if(L == '/')
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b2f      	cmp	r3, #47	; 0x2f
 80002d8:	d13b      	bne.n	8000352 <letter+0x202>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e0:	4876      	ldr	r0, [pc, #472]	; (80004bc <letter+0x36c>)
 80002e2:	f003 f974 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	4874      	ldr	r0, [pc, #464]	; (80004c0 <letter+0x370>)
 80002ee:	f003 f96e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	4871      	ldr	r0, [pc, #452]	; (80004c0 <letter+0x370>)
 80002fa:	f003 f968 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	486f      	ldr	r0, [pc, #444]	; (80004c0 <letter+0x370>)
 8000304:	f003 f963 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000308:	2201      	movs	r2, #1
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	486c      	ldr	r0, [pc, #432]	; (80004c0 <letter+0x370>)
 800030e:	f003 f95e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000312:	2200      	movs	r2, #0
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	486b      	ldr	r0, [pc, #428]	; (80004c4 <letter+0x374>)
 8000318:	f003 f959 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4868      	ldr	r0, [pc, #416]	; (80004c4 <letter+0x374>)
 8000324:	f003 f953 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	4865      	ldr	r0, [pc, #404]	; (80004c4 <letter+0x374>)
 8000330:	f003 f94d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033a:	4862      	ldr	r0, [pc, #392]	; (80004c4 <letter+0x374>)
 800033c:	f003 f947 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	485d      	ldr	r0, [pc, #372]	; (80004bc <letter+0x36c>)
 8000348:	f003 f941 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800034c:	2002      	movs	r0, #2
 800034e:	f002 fe9f 	bl	8003090 <HAL_Delay>
	}
	if(L == '!')
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b21      	cmp	r3, #33	; 0x21
 8000356:	d138      	bne.n	80003ca <letter+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4857      	ldr	r0, [pc, #348]	; (80004bc <letter+0x36c>)
 8000360:	f003 f935 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036a:	4855      	ldr	r0, [pc, #340]	; (80004c0 <letter+0x370>)
 800036c:	f003 f92f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000376:	4852      	ldr	r0, [pc, #328]	; (80004c0 <letter+0x370>)
 8000378:	f003 f929 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800037c:	2200      	movs	r2, #0
 800037e:	2140      	movs	r1, #64	; 0x40
 8000380:	484f      	ldr	r0, [pc, #316]	; (80004c0 <letter+0x370>)
 8000382:	f003 f924 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000386:	2200      	movs	r2, #0
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	484d      	ldr	r0, [pc, #308]	; (80004c0 <letter+0x370>)
 800038c:	f003 f91f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	484b      	ldr	r0, [pc, #300]	; (80004c4 <letter+0x374>)
 8000396:	f003 f91a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4848      	ldr	r0, [pc, #288]	; (80004c4 <letter+0x374>)
 80003a2:	f003 f914 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4845      	ldr	r0, [pc, #276]	; (80004c4 <letter+0x374>)
 80003ae:	f003 f90e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b8:	4842      	ldr	r0, [pc, #264]	; (80004c4 <letter+0x374>)
 80003ba:	f003 f908 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c4:	483d      	ldr	r0, [pc, #244]	; (80004bc <letter+0x36c>)
 80003c6:	f003 f902 	bl	80035ce <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b3f      	cmp	r3, #63	; 0x3f
 80003ce:	d13b      	bne.n	8000448 <letter+0x2f8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	4839      	ldr	r0, [pc, #228]	; (80004bc <letter+0x36c>)
 80003d8:	f003 f8f9 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e2:	4837      	ldr	r0, [pc, #220]	; (80004c0 <letter+0x370>)
 80003e4:	f003 f8f3 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4834      	ldr	r0, [pc, #208]	; (80004c0 <letter+0x370>)
 80003f0:	f003 f8ed 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80003f4:	2201      	movs	r2, #1
 80003f6:	2140      	movs	r1, #64	; 0x40
 80003f8:	4831      	ldr	r0, [pc, #196]	; (80004c0 <letter+0x370>)
 80003fa:	f003 f8e8 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80003fe:	2201      	movs	r2, #1
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <letter+0x370>)
 8000404:	f003 f8e3 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000408:	2201      	movs	r2, #1
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	482d      	ldr	r0, [pc, #180]	; (80004c4 <letter+0x374>)
 800040e:	f003 f8de 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	482a      	ldr	r0, [pc, #168]	; (80004c4 <letter+0x374>)
 800041a:	f003 f8d8 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	4827      	ldr	r0, [pc, #156]	; (80004c4 <letter+0x374>)
 8000426:	f003 f8d2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000430:	4824      	ldr	r0, [pc, #144]	; (80004c4 <letter+0x374>)
 8000432:	f003 f8cc 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	481f      	ldr	r0, [pc, #124]	; (80004bc <letter+0x36c>)
 800043e:	f003 f8c6 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000442:	2002      	movs	r0, #2
 8000444:	f002 fe24 	bl	8003090 <HAL_Delay>
	}
	if(L == '*')
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b2a      	cmp	r3, #42	; 0x2a
 800044c:	d142      	bne.n	80004d4 <letter+0x384>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	4819      	ldr	r0, [pc, #100]	; (80004bc <letter+0x36c>)
 8000456:	f003 f8ba 	bl	80035ce <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4817      	ldr	r0, [pc, #92]	; (80004c0 <letter+0x370>)
 8000462:	f003 f8b4 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <letter+0x370>)
 800046e:	f003 f8ae 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000472:	2200      	movs	r2, #0
 8000474:	2140      	movs	r1, #64	; 0x40
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <letter+0x370>)
 8000478:	f003 f8a9 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800047c:	2201      	movs	r2, #1
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <letter+0x370>)
 8000482:	f003 f8a4 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000486:	2200      	movs	r2, #0
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <letter+0x374>)
 800048c:	f003 f89f 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <letter+0x374>)
 8000498:	f003 f899 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <letter+0x374>)
 80004a4:	f003 f893 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <letter+0x374>)
 80004b0:	f003 f88d 	bl	80035ce <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	e005      	b.n	80004c8 <letter+0x378>
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40010800 	.word	0x40010800
 80004c8:	48d5      	ldr	r0, [pc, #852]	; (8000820 <letter+0x6d0>)
 80004ca:	f003 f880 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f002 fdde 	bl	8003090 <HAL_Delay>
	}
	if(L == '#')
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b23      	cmp	r3, #35	; 0x23
 80004d8:	d13b      	bne.n	8000552 <letter+0x402>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	48cf      	ldr	r0, [pc, #828]	; (8000820 <letter+0x6d0>)
 80004e2:	f003 f874 	bl	80035ce <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	48cd      	ldr	r0, [pc, #820]	; (8000824 <letter+0x6d4>)
 80004ee:	f003 f86e 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f8:	48ca      	ldr	r0, [pc, #808]	; (8000824 <letter+0x6d4>)
 80004fa:	f003 f868 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	48c8      	ldr	r0, [pc, #800]	; (8000824 <letter+0x6d4>)
 8000504:	f003 f863 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	48c5      	ldr	r0, [pc, #788]	; (8000824 <letter+0x6d4>)
 800050e:	f003 f85e 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000512:	2200      	movs	r2, #0
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	48c4      	ldr	r0, [pc, #784]	; (8000828 <letter+0x6d8>)
 8000518:	f003 f859 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000522:	48c1      	ldr	r0, [pc, #772]	; (8000828 <letter+0x6d8>)
 8000524:	f003 f853 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	48be      	ldr	r0, [pc, #760]	; (8000828 <letter+0x6d8>)
 8000530:	f003 f84d 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053a:	48bb      	ldr	r0, [pc, #748]	; (8000828 <letter+0x6d8>)
 800053c:	f003 f847 	bl	80035ce <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	48b6      	ldr	r0, [pc, #728]	; (8000820 <letter+0x6d0>)
 8000548:	f003 f841 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 800054c:	2002      	movs	r0, #2
 800054e:	f002 fd9f 	bl	8003090 <HAL_Delay>
	}
	if(L == 'a')
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b61      	cmp	r3, #97	; 0x61
 8000556:	d13b      	bne.n	80005d0 <letter+0x480>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	48b0      	ldr	r0, [pc, #704]	; (8000820 <letter+0x6d0>)
 8000560:	f003 f835 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	48ae      	ldr	r0, [pc, #696]	; (8000824 <letter+0x6d4>)
 800056c:	f003 f82f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	48ab      	ldr	r0, [pc, #684]	; (8000824 <letter+0x6d4>)
 8000578:	f003 f829 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	48a8      	ldr	r0, [pc, #672]	; (8000824 <letter+0x6d4>)
 8000582:	f003 f824 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	48a6      	ldr	r0, [pc, #664]	; (8000824 <letter+0x6d4>)
 800058c:	f003 f81f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000590:	2200      	movs	r2, #0
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	48a4      	ldr	r0, [pc, #656]	; (8000828 <letter+0x6d8>)
 8000596:	f003 f81a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	48a1      	ldr	r0, [pc, #644]	; (8000828 <letter+0x6d8>)
 80005a2:	f003 f814 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	489e      	ldr	r0, [pc, #632]	; (8000828 <letter+0x6d8>)
 80005ae:	f003 f80e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	489b      	ldr	r0, [pc, #620]	; (8000828 <letter+0x6d8>)
 80005ba:	f003 f808 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4896      	ldr	r0, [pc, #600]	; (8000820 <letter+0x6d0>)
 80005c6:	f003 f802 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80005ca:	2002      	movs	r0, #2
 80005cc:	f002 fd60 	bl	8003090 <HAL_Delay>
	}
	if(L == 'b')
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b62      	cmp	r3, #98	; 0x62
 80005d4:	d13b      	bne.n	800064e <letter+0x4fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4890      	ldr	r0, [pc, #576]	; (8000820 <letter+0x6d0>)
 80005de:	f002 fff6 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e8:	488e      	ldr	r0, [pc, #568]	; (8000824 <letter+0x6d4>)
 80005ea:	f002 fff0 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	488b      	ldr	r0, [pc, #556]	; (8000824 <letter+0x6d4>)
 80005f6:	f002 ffea 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4889      	ldr	r0, [pc, #548]	; (8000824 <letter+0x6d4>)
 8000600:	f002 ffe5 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4886      	ldr	r0, [pc, #536]	; (8000824 <letter+0x6d4>)
 800060a:	f002 ffe0 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4885      	ldr	r0, [pc, #532]	; (8000828 <letter+0x6d8>)
 8000614:	f002 ffdb 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4882      	ldr	r0, [pc, #520]	; (8000828 <letter+0x6d8>)
 8000620:	f002 ffd5 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	487f      	ldr	r0, [pc, #508]	; (8000828 <letter+0x6d8>)
 800062c:	f002 ffcf 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000636:	487c      	ldr	r0, [pc, #496]	; (8000828 <letter+0x6d8>)
 8000638:	f002 ffc9 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4877      	ldr	r0, [pc, #476]	; (8000820 <letter+0x6d0>)
 8000644:	f002 ffc3 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000648:	2002      	movs	r0, #2
 800064a:	f002 fd21 	bl	8003090 <HAL_Delay>
	}
	if(L == 'C')
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b43      	cmp	r3, #67	; 0x43
 8000652:	d13b      	bne.n	80006cc <letter+0x57c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4871      	ldr	r0, [pc, #452]	; (8000820 <letter+0x6d0>)
 800065c:	f002 ffb7 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	486f      	ldr	r0, [pc, #444]	; (8000824 <letter+0x6d4>)
 8000668:	f002 ffb1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <letter+0x6d4>)
 8000674:	f002 ffab 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000678:	2200      	movs	r2, #0
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4869      	ldr	r0, [pc, #420]	; (8000824 <letter+0x6d4>)
 800067e:	f002 ffa6 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000682:	2200      	movs	r2, #0
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4867      	ldr	r0, [pc, #412]	; (8000824 <letter+0x6d4>)
 8000688:	f002 ffa1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800068c:	2200      	movs	r2, #0
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4865      	ldr	r0, [pc, #404]	; (8000828 <letter+0x6d8>)
 8000692:	f002 ff9c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4862      	ldr	r0, [pc, #392]	; (8000828 <letter+0x6d8>)
 800069e:	f002 ff96 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	485f      	ldr	r0, [pc, #380]	; (8000828 <letter+0x6d8>)
 80006aa:	f002 ff90 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b4:	485c      	ldr	r0, [pc, #368]	; (8000828 <letter+0x6d8>)
 80006b6:	f002 ff8a 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	4857      	ldr	r0, [pc, #348]	; (8000820 <letter+0x6d0>)
 80006c2:	f002 ff84 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f002 fce2 	bl	8003090 <HAL_Delay>
	}
	if(L == 'c')
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b63      	cmp	r3, #99	; 0x63
 80006d0:	d13b      	bne.n	800074a <letter+0x5fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4851      	ldr	r0, [pc, #324]	; (8000820 <letter+0x6d0>)
 80006da:	f002 ff78 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e4:	484f      	ldr	r0, [pc, #316]	; (8000824 <letter+0x6d4>)
 80006e6:	f002 ff72 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	484c      	ldr	r0, [pc, #304]	; (8000824 <letter+0x6d4>)
 80006f2:	f002 ff6c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	484a      	ldr	r0, [pc, #296]	; (8000824 <letter+0x6d4>)
 80006fc:	f002 ff67 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000700:	2200      	movs	r2, #0
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	4847      	ldr	r0, [pc, #284]	; (8000824 <letter+0x6d4>)
 8000706:	f002 ff62 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4846      	ldr	r0, [pc, #280]	; (8000828 <letter+0x6d8>)
 8000710:	f002 ff5d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	4843      	ldr	r0, [pc, #268]	; (8000828 <letter+0x6d8>)
 800071c:	f002 ff57 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000726:	4840      	ldr	r0, [pc, #256]	; (8000828 <letter+0x6d8>)
 8000728:	f002 ff51 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	483d      	ldr	r0, [pc, #244]	; (8000828 <letter+0x6d8>)
 8000734:	f002 ff4b 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4838      	ldr	r0, [pc, #224]	; (8000820 <letter+0x6d0>)
 8000740:	f002 ff45 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000744:	2002      	movs	r0, #2
 8000746:	f002 fca3 	bl	8003090 <HAL_Delay>
	}
	if(L == 'd')
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b64      	cmp	r3, #100	; 0x64
 800074e:	d13b      	bne.n	80007c8 <letter+0x678>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <letter+0x6d0>)
 8000758:	f002 ff39 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000762:	4830      	ldr	r0, [pc, #192]	; (8000824 <letter+0x6d4>)
 8000764:	f002 ff33 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	482d      	ldr	r0, [pc, #180]	; (8000824 <letter+0x6d4>)
 8000770:	f002 ff2d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	482a      	ldr	r0, [pc, #168]	; (8000824 <letter+0x6d4>)
 800077a:	f002 ff28 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <letter+0x6d4>)
 8000784:	f002 ff23 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <letter+0x6d8>)
 800078e:	f002 ff1e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <letter+0x6d8>)
 800079a:	f002 ff18 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <letter+0x6d8>)
 80007a6:	f002 ff12 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b0:	481d      	ldr	r0, [pc, #116]	; (8000828 <letter+0x6d8>)
 80007b2:	f002 ff0c 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <letter+0x6d0>)
 80007be:	f002 ff06 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f002 fc64 	bl	8003090 <HAL_Delay>
	}
	if(L == 'E')
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b45      	cmp	r3, #69	; 0x45
 80007cc:	d143      	bne.n	8000856 <letter+0x706>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <letter+0x6d0>)
 80007d6:	f002 fefa 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <letter+0x6d4>)
 80007e2:	f002 fef4 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <letter+0x6d4>)
 80007ee:	f002 feee 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80007f2:	2201      	movs	r2, #1
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <letter+0x6d4>)
 80007f8:	f002 fee9 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <letter+0x6d4>)
 8000802:	f002 fee4 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <letter+0x6d8>)
 800080c:	f002 fedf 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <letter+0x6d8>)
 8000818:	f002 fed9 	bl	80035ce <HAL_GPIO_WritePin>
 800081c:	e006      	b.n	800082c <letter+0x6dc>
 800081e:	bf00      	nop
 8000820:	40010c00 	.word	0x40010c00
 8000824:	40011000 	.word	0x40011000
 8000828:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	48d4      	ldr	r0, [pc, #848]	; (8000b84 <letter+0xa34>)
 8000834:	f002 fecb 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083e:	48d1      	ldr	r0, [pc, #836]	; (8000b84 <letter+0xa34>)
 8000840:	f002 fec5 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	48cf      	ldr	r0, [pc, #828]	; (8000b88 <letter+0xa38>)
 800084c:	f002 febf 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000850:	2002      	movs	r0, #2
 8000852:	f002 fc1d 	bl	8003090 <HAL_Delay>
	}
	if(L == 'e')
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b65      	cmp	r3, #101	; 0x65
 800085a:	d13b      	bne.n	80008d4 <letter+0x784>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	48c9      	ldr	r0, [pc, #804]	; (8000b88 <letter+0xa38>)
 8000864:	f002 feb3 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	48c7      	ldr	r0, [pc, #796]	; (8000b8c <letter+0xa3c>)
 8000870:	f002 fead 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	48c4      	ldr	r0, [pc, #784]	; (8000b8c <letter+0xa3c>)
 800087c:	f002 fea7 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	48c1      	ldr	r0, [pc, #772]	; (8000b8c <letter+0xa3c>)
 8000886:	f002 fea2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800088a:	2200      	movs	r2, #0
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	48bf      	ldr	r0, [pc, #764]	; (8000b8c <letter+0xa3c>)
 8000890:	f002 fe9d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	48ba      	ldr	r0, [pc, #744]	; (8000b84 <letter+0xa34>)
 800089a:	f002 fe98 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	48b7      	ldr	r0, [pc, #732]	; (8000b84 <letter+0xa34>)
 80008a6:	f002 fe92 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	48b4      	ldr	r0, [pc, #720]	; (8000b84 <letter+0xa34>)
 80008b2:	f002 fe8c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008bc:	48b1      	ldr	r0, [pc, #708]	; (8000b84 <letter+0xa34>)
 80008be:	f002 fe86 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	48af      	ldr	r0, [pc, #700]	; (8000b88 <letter+0xa38>)
 80008ca:	f002 fe80 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80008ce:	2002      	movs	r0, #2
 80008d0:	f002 fbde 	bl	8003090 <HAL_Delay>
	}
	if(L == 'f')
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b66      	cmp	r3, #102	; 0x66
 80008d8:	d13b      	bne.n	8000952 <letter+0x802>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	48a9      	ldr	r0, [pc, #676]	; (8000b88 <letter+0xa38>)
 80008e2:	f002 fe74 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	48a7      	ldr	r0, [pc, #668]	; (8000b8c <letter+0xa3c>)
 80008ee:	f002 fe6e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	48a4      	ldr	r0, [pc, #656]	; (8000b8c <letter+0xa3c>)
 80008fa:	f002 fe68 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80008fe:	2201      	movs	r2, #1
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	48a2      	ldr	r0, [pc, #648]	; (8000b8c <letter+0xa3c>)
 8000904:	f002 fe63 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	489f      	ldr	r0, [pc, #636]	; (8000b8c <letter+0xa3c>)
 800090e:	f002 fe5e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000912:	2200      	movs	r2, #0
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	489b      	ldr	r0, [pc, #620]	; (8000b84 <letter+0xa34>)
 8000918:	f002 fe59 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	4898      	ldr	r0, [pc, #608]	; (8000b84 <letter+0xa34>)
 8000924:	f002 fe53 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092e:	4895      	ldr	r0, [pc, #596]	; (8000b84 <letter+0xa34>)
 8000930:	f002 fe4d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	4892      	ldr	r0, [pc, #584]	; (8000b84 <letter+0xa34>)
 800093c:	f002 fe47 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4890      	ldr	r0, [pc, #576]	; (8000b88 <letter+0xa38>)
 8000948:	f002 fe41 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800094c:	2002      	movs	r0, #2
 800094e:	f002 fb9f 	bl	8003090 <HAL_Delay>
	}
	if(L == 'G')
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b47      	cmp	r3, #71	; 0x47
 8000956:	d13b      	bne.n	80009d0 <letter+0x880>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	488a      	ldr	r0, [pc, #552]	; (8000b88 <letter+0xa38>)
 8000960:	f002 fe35 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096a:	4888      	ldr	r0, [pc, #544]	; (8000b8c <letter+0xa3c>)
 800096c:	f002 fe2f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4885      	ldr	r0, [pc, #532]	; (8000b8c <letter+0xa3c>)
 8000978:	f002 fe29 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800097c:	2201      	movs	r2, #1
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	4882      	ldr	r0, [pc, #520]	; (8000b8c <letter+0xa3c>)
 8000982:	f002 fe24 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4880      	ldr	r0, [pc, #512]	; (8000b8c <letter+0xa3c>)
 800098c:	f002 fe1f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	; (8000b84 <letter+0xa34>)
 8000996:	f002 fe1a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	4878      	ldr	r0, [pc, #480]	; (8000b84 <letter+0xa34>)
 80009a2:	f002 fe14 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ac:	4875      	ldr	r0, [pc, #468]	; (8000b84 <letter+0xa34>)
 80009ae:	f002 fe0e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b8:	4872      	ldr	r0, [pc, #456]	; (8000b84 <letter+0xa34>)
 80009ba:	f002 fe08 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4870      	ldr	r0, [pc, #448]	; (8000b88 <letter+0xa38>)
 80009c6:	f002 fe02 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f002 fb60 	bl	8003090 <HAL_Delay>
	}
	if(L == 'g')
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b67      	cmp	r3, #103	; 0x67
 80009d4:	d13b      	bne.n	8000a4e <letter+0x8fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	486a      	ldr	r0, [pc, #424]	; (8000b88 <letter+0xa38>)
 80009de:	f002 fdf6 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	4868      	ldr	r0, [pc, #416]	; (8000b8c <letter+0xa3c>)
 80009ea:	f002 fdf0 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4865      	ldr	r0, [pc, #404]	; (8000b8c <letter+0xa3c>)
 80009f6:	f002 fdea 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4863      	ldr	r0, [pc, #396]	; (8000b8c <letter+0xa3c>)
 8000a00:	f002 fde5 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	4860      	ldr	r0, [pc, #384]	; (8000b8c <letter+0xa3c>)
 8000a0a:	f002 fde0 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	485c      	ldr	r0, [pc, #368]	; (8000b84 <letter+0xa34>)
 8000a14:	f002 fddb 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4859      	ldr	r0, [pc, #356]	; (8000b84 <letter+0xa34>)
 8000a20:	f002 fdd5 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4856      	ldr	r0, [pc, #344]	; (8000b84 <letter+0xa34>)
 8000a2c:	f002 fdcf 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a36:	4853      	ldr	r0, [pc, #332]	; (8000b84 <letter+0xa34>)
 8000a38:	f002 fdc9 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4851      	ldr	r0, [pc, #324]	; (8000b88 <letter+0xa38>)
 8000a44:	f002 fdc3 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f002 fb21 	bl	8003090 <HAL_Delay>
	}
	if(L == 'I')
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b49      	cmp	r3, #73	; 0x49
 8000a52:	d13b      	bne.n	8000acc <letter+0x97c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	484b      	ldr	r0, [pc, #300]	; (8000b88 <letter+0xa38>)
 8000a5c:	f002 fdb7 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	4849      	ldr	r0, [pc, #292]	; (8000b8c <letter+0xa3c>)
 8000a68:	f002 fdb1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a72:	4846      	ldr	r0, [pc, #280]	; (8000b8c <letter+0xa3c>)
 8000a74:	f002 fdab 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4843      	ldr	r0, [pc, #268]	; (8000b8c <letter+0xa3c>)
 8000a7e:	f002 fda6 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000a82:	2201      	movs	r2, #1
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	4841      	ldr	r0, [pc, #260]	; (8000b8c <letter+0xa3c>)
 8000a88:	f002 fda1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	483c      	ldr	r0, [pc, #240]	; (8000b84 <letter+0xa34>)
 8000a92:	f002 fd9c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4839      	ldr	r0, [pc, #228]	; (8000b84 <letter+0xa34>)
 8000a9e:	f002 fd96 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <letter+0xa34>)
 8000aaa:	f002 fd90 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <letter+0xa34>)
 8000ab6:	f002 fd8a 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <letter+0xa38>)
 8000ac2:	f002 fd84 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f002 fae2 	bl	8003090 <HAL_Delay>
	}
	if(L == 'i')
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b69      	cmp	r3, #105	; 0x69
 8000ad0:	d13b      	bne.n	8000b4a <letter+0x9fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	482b      	ldr	r0, [pc, #172]	; (8000b88 <letter+0xa38>)
 8000ada:	f002 fd78 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	4829      	ldr	r0, [pc, #164]	; (8000b8c <letter+0xa3c>)
 8000ae6:	f002 fd72 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4826      	ldr	r0, [pc, #152]	; (8000b8c <letter+0xa3c>)
 8000af2:	f002 fd6c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000af6:	2200      	movs	r2, #0
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	4824      	ldr	r0, [pc, #144]	; (8000b8c <letter+0xa3c>)
 8000afc:	f002 fd67 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <letter+0xa3c>)
 8000b06:	f002 fd62 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <letter+0xa34>)
 8000b10:	f002 fd5d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	481a      	ldr	r0, [pc, #104]	; (8000b84 <letter+0xa34>)
 8000b1c:	f002 fd57 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <letter+0xa34>)
 8000b28:	f002 fd51 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <letter+0xa34>)
 8000b34:	f002 fd4b 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <letter+0xa38>)
 8000b40:	f002 fd45 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f002 faa3 	bl	8003090 <HAL_Delay>
	}
	if(L == 'l')
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b6c      	cmp	r3, #108	; 0x6c
 8000b4e:	d142      	bne.n	8000bd6 <letter+0xa86>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b56:	480c      	ldr	r0, [pc, #48]	; (8000b88 <letter+0xa38>)
 8000b58:	f002 fd39 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <letter+0xa3c>)
 8000b64:	f002 fd33 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <letter+0xa3c>)
 8000b70:	f002 fd2d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <letter+0xa3c>)
 8000b7a:	f002 fd28 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	e005      	b.n	8000b90 <letter+0xa40>
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	48d4      	ldr	r0, [pc, #848]	; (8000ee4 <letter+0xd94>)
 8000b92:	f002 fd1c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b96:	2200      	movs	r2, #0
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	48d3      	ldr	r0, [pc, #844]	; (8000ee8 <letter+0xd98>)
 8000b9c:	f002 fd17 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	48d0      	ldr	r0, [pc, #832]	; (8000ee8 <letter+0xd98>)
 8000ba8:	f002 fd11 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	48cd      	ldr	r0, [pc, #820]	; (8000ee8 <letter+0xd98>)
 8000bb4:	f002 fd0b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	48ca      	ldr	r0, [pc, #808]	; (8000ee8 <letter+0xd98>)
 8000bc0:	f002 fd05 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	48c8      	ldr	r0, [pc, #800]	; (8000eec <letter+0xd9c>)
 8000bcc:	f002 fcff 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f002 fa5d 	bl	8003090 <HAL_Delay>
	}
	if(L == 'm')
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b6d      	cmp	r3, #109	; 0x6d
 8000bda:	d13b      	bne.n	8000c54 <letter+0xb04>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be2:	48c2      	ldr	r0, [pc, #776]	; (8000eec <letter+0xd9c>)
 8000be4:	f002 fcf3 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	48bd      	ldr	r0, [pc, #756]	; (8000ee4 <letter+0xd94>)
 8000bf0:	f002 fced 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	48ba      	ldr	r0, [pc, #744]	; (8000ee4 <letter+0xd94>)
 8000bfc:	f002 fce7 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c00:	2201      	movs	r2, #1
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	48b7      	ldr	r0, [pc, #732]	; (8000ee4 <letter+0xd94>)
 8000c06:	f002 fce2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	48b5      	ldr	r0, [pc, #724]	; (8000ee4 <letter+0xd94>)
 8000c10:	f002 fcdd 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	48b3      	ldr	r0, [pc, #716]	; (8000ee8 <letter+0xd98>)
 8000c1a:	f002 fcd8 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	48b0      	ldr	r0, [pc, #704]	; (8000ee8 <letter+0xd98>)
 8000c26:	f002 fcd2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	48ad      	ldr	r0, [pc, #692]	; (8000ee8 <letter+0xd98>)
 8000c32:	f002 fccc 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	48aa      	ldr	r0, [pc, #680]	; (8000ee8 <letter+0xd98>)
 8000c3e:	f002 fcc6 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	48a8      	ldr	r0, [pc, #672]	; (8000eec <letter+0xd9c>)
 8000c4a:	f002 fcc0 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f002 fa1e 	bl	8003090 <HAL_Delay>
	}
	if(L == 'N')
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b4e      	cmp	r3, #78	; 0x4e
 8000c58:	d13b      	bne.n	8000cd2 <letter+0xb82>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	48a2      	ldr	r0, [pc, #648]	; (8000eec <letter+0xd9c>)
 8000c62:	f002 fcb4 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	489d      	ldr	r0, [pc, #628]	; (8000ee4 <letter+0xd94>)
 8000c6e:	f002 fcae 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	489a      	ldr	r0, [pc, #616]	; (8000ee4 <letter+0xd94>)
 8000c7a:	f002 fca8 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4898      	ldr	r0, [pc, #608]	; (8000ee4 <letter+0xd94>)
 8000c84:	f002 fca3 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <letter+0xd94>)
 8000c8e:	f002 fc9e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c92:	2200      	movs	r2, #0
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4894      	ldr	r0, [pc, #592]	; (8000ee8 <letter+0xd98>)
 8000c98:	f002 fc99 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca2:	4891      	ldr	r0, [pc, #580]	; (8000ee8 <letter+0xd98>)
 8000ca4:	f002 fc93 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	488e      	ldr	r0, [pc, #568]	; (8000ee8 <letter+0xd98>)
 8000cb0:	f002 fc8d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	488b      	ldr	r0, [pc, #556]	; (8000ee8 <letter+0xd98>)
 8000cbc:	f002 fc87 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4889      	ldr	r0, [pc, #548]	; (8000eec <letter+0xd9c>)
 8000cc8:	f002 fc81 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f002 f9df 	bl	8003090 <HAL_Delay>
	}
	if(L == 'n')
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8000cd6:	d13b      	bne.n	8000d50 <letter+0xc00>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4883      	ldr	r0, [pc, #524]	; (8000eec <letter+0xd9c>)
 8000ce0:	f002 fc75 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	487e      	ldr	r0, [pc, #504]	; (8000ee4 <letter+0xd94>)
 8000cec:	f002 fc6f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	487b      	ldr	r0, [pc, #492]	; (8000ee4 <letter+0xd94>)
 8000cf8:	f002 fc69 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4878      	ldr	r0, [pc, #480]	; (8000ee4 <letter+0xd94>)
 8000d02:	f002 fc64 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d06:	2201      	movs	r2, #1
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4876      	ldr	r0, [pc, #472]	; (8000ee4 <letter+0xd94>)
 8000d0c:	f002 fc5f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d10:	2200      	movs	r2, #0
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4874      	ldr	r0, [pc, #464]	; (8000ee8 <letter+0xd98>)
 8000d16:	f002 fc5a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4871      	ldr	r0, [pc, #452]	; (8000ee8 <letter+0xd98>)
 8000d22:	f002 fc54 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	486e      	ldr	r0, [pc, #440]	; (8000ee8 <letter+0xd98>)
 8000d2e:	f002 fc4e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	486b      	ldr	r0, [pc, #428]	; (8000ee8 <letter+0xd98>)
 8000d3a:	f002 fc48 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <letter+0xd9c>)
 8000d46:	f002 fc42 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f002 f9a0 	bl	8003090 <HAL_Delay>
	}
	if(L == 'O')
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b4f      	cmp	r3, #79	; 0x4f
 8000d54:	d13b      	bne.n	8000dce <letter+0xc7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5c:	4863      	ldr	r0, [pc, #396]	; (8000eec <letter+0xd9c>)
 8000d5e:	f002 fc36 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d68:	485e      	ldr	r0, [pc, #376]	; (8000ee4 <letter+0xd94>)
 8000d6a:	f002 fc30 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <letter+0xd94>)
 8000d76:	f002 fc2a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2140      	movs	r1, #64	; 0x40
 8000d7e:	4859      	ldr	r0, [pc, #356]	; (8000ee4 <letter+0xd94>)
 8000d80:	f002 fc25 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4856      	ldr	r0, [pc, #344]	; (8000ee4 <letter+0xd94>)
 8000d8a:	f002 fc20 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4855      	ldr	r0, [pc, #340]	; (8000ee8 <letter+0xd98>)
 8000d94:	f002 fc1b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4852      	ldr	r0, [pc, #328]	; (8000ee8 <letter+0xd98>)
 8000da0:	f002 fc15 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	484f      	ldr	r0, [pc, #316]	; (8000ee8 <letter+0xd98>)
 8000dac:	f002 fc0f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db6:	484c      	ldr	r0, [pc, #304]	; (8000ee8 <letter+0xd98>)
 8000db8:	f002 fc09 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	484a      	ldr	r0, [pc, #296]	; (8000eec <letter+0xd9c>)
 8000dc4:	f002 fc03 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f002 f961 	bl	8003090 <HAL_Delay>
	}
	if(L == 'o')
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b6f      	cmp	r3, #111	; 0x6f
 8000dd2:	d13b      	bne.n	8000e4c <letter+0xcfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4844      	ldr	r0, [pc, #272]	; (8000eec <letter+0xd9c>)
 8000ddc:	f002 fbf7 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <letter+0xd94>)
 8000de8:	f002 fbf1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <letter+0xd94>)
 8000df4:	f002 fbeb 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <letter+0xd94>)
 8000dfe:	f002 fbe6 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000e02:	2201      	movs	r2, #1
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <letter+0xd94>)
 8000e08:	f002 fbe1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <letter+0xd98>)
 8000e12:	f002 fbdc 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <letter+0xd98>)
 8000e1e:	f002 fbd6 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <letter+0xd98>)
 8000e2a:	f002 fbd0 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	482c      	ldr	r0, [pc, #176]	; (8000ee8 <letter+0xd98>)
 8000e36:	f002 fbca 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <letter+0xd9c>)
 8000e42:	f002 fbc4 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f002 f922 	bl	8003090 <HAL_Delay>
	}
	if(L == 'P')
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b50      	cmp	r3, #80	; 0x50
 8000e50:	d13b      	bne.n	8000eca <letter+0xd7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4824      	ldr	r0, [pc, #144]	; (8000eec <letter+0xd9c>)
 8000e5a:	f002 fbb8 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <letter+0xd94>)
 8000e66:	f002 fbb2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <letter+0xd94>)
 8000e72:	f002 fbac 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000e76:	2200      	movs	r2, #0
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <letter+0xd94>)
 8000e7c:	f002 fba7 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <letter+0xd94>)
 8000e86:	f002 fba2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <letter+0xd98>)
 8000e90:	f002 fb9d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9a:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <letter+0xd98>)
 8000e9c:	f002 fb97 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <letter+0xd98>)
 8000ea8:	f002 fb91 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <letter+0xd98>)
 8000eb4:	f002 fb8b 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <letter+0xd9c>)
 8000ec0:	f002 fb85 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f002 f8e3 	bl	8003090 <HAL_Delay>
	}
	if(L == 'Q')
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b51      	cmp	r3, #81	; 0x51
 8000ece:	d142      	bne.n	8000f56 <letter+0xe06>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <letter+0xd9c>)
 8000ed8:	f002 fb79 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	e005      	b.n	8000ef0 <letter+0xda0>
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	48d5      	ldr	r0, [pc, #852]	; (8001248 <letter+0x10f8>)
 8000ef2:	f002 fb6c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	48d2      	ldr	r0, [pc, #840]	; (8001248 <letter+0x10f8>)
 8000efe:	f002 fb66 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f02:	2200      	movs	r2, #0
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	48d0      	ldr	r0, [pc, #832]	; (8001248 <letter+0x10f8>)
 8000f08:	f002 fb61 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	48cd      	ldr	r0, [pc, #820]	; (8001248 <letter+0x10f8>)
 8000f12:	f002 fb5c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f16:	2201      	movs	r2, #1
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	48cc      	ldr	r0, [pc, #816]	; (800124c <letter+0x10fc>)
 8000f1c:	f002 fb57 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	48c9      	ldr	r0, [pc, #804]	; (800124c <letter+0x10fc>)
 8000f28:	f002 fb51 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	48c6      	ldr	r0, [pc, #792]	; (800124c <letter+0x10fc>)
 8000f34:	f002 fb4b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	48c3      	ldr	r0, [pc, #780]	; (800124c <letter+0x10fc>)
 8000f40:	f002 fb45 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	48c1      	ldr	r0, [pc, #772]	; (8001250 <letter+0x1100>)
 8000f4c:	f002 fb3f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f002 f89d 	bl	8003090 <HAL_Delay>
	}
	if(L == 'r')
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b72      	cmp	r3, #114	; 0x72
 8000f5a:	d13b      	bne.n	8000fd4 <letter+0xe84>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	48bb      	ldr	r0, [pc, #748]	; (8001250 <letter+0x1100>)
 8000f64:	f002 fb33 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	48b6      	ldr	r0, [pc, #728]	; (8001248 <letter+0x10f8>)
 8000f70:	f002 fb2d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	48b3      	ldr	r0, [pc, #716]	; (8001248 <letter+0x10f8>)
 8000f7c:	f002 fb27 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	48b0      	ldr	r0, [pc, #704]	; (8001248 <letter+0x10f8>)
 8000f86:	f002 fb22 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	48ae      	ldr	r0, [pc, #696]	; (8001248 <letter+0x10f8>)
 8000f90:	f002 fb1d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f94:	2201      	movs	r2, #1
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	48ac      	ldr	r0, [pc, #688]	; (800124c <letter+0x10fc>)
 8000f9a:	f002 fb18 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	48a9      	ldr	r0, [pc, #676]	; (800124c <letter+0x10fc>)
 8000fa6:	f002 fb12 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	48a6      	ldr	r0, [pc, #664]	; (800124c <letter+0x10fc>)
 8000fb2:	f002 fb0c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	48a3      	ldr	r0, [pc, #652]	; (800124c <letter+0x10fc>)
 8000fbe:	f002 fb06 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	48a1      	ldr	r0, [pc, #644]	; (8001250 <letter+0x1100>)
 8000fca:	f002 fb00 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f002 f85e 	bl	8003090 <HAL_Delay>
	}
	if(L == 's')
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b73      	cmp	r3, #115	; 0x73
 8000fd8:	d13b      	bne.n	8001052 <letter+0xf02>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	489b      	ldr	r0, [pc, #620]	; (8001250 <letter+0x1100>)
 8000fe2:	f002 faf4 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4896      	ldr	r0, [pc, #600]	; (8001248 <letter+0x10f8>)
 8000fee:	f002 faee 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4893      	ldr	r0, [pc, #588]	; (8001248 <letter+0x10f8>)
 8000ffa:	f002 fae8 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ffe:	2200      	movs	r2, #0
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	4891      	ldr	r0, [pc, #580]	; (8001248 <letter+0x10f8>)
 8001004:	f002 fae3 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001008:	2200      	movs	r2, #0
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	488e      	ldr	r0, [pc, #568]	; (8001248 <letter+0x10f8>)
 800100e:	f002 fade 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	488d      	ldr	r0, [pc, #564]	; (800124c <letter+0x10fc>)
 8001018:	f002 fad9 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	488a      	ldr	r0, [pc, #552]	; (800124c <letter+0x10fc>)
 8001024:	f002 fad3 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4887      	ldr	r0, [pc, #540]	; (800124c <letter+0x10fc>)
 8001030:	f002 facd 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4884      	ldr	r0, [pc, #528]	; (800124c <letter+0x10fc>)
 800103c:	f002 fac7 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	4882      	ldr	r0, [pc, #520]	; (8001250 <letter+0x1100>)
 8001048:	f002 fac1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800104c:	2002      	movs	r0, #2
 800104e:	f002 f81f 	bl	8003090 <HAL_Delay>
	}
	if(L == 'T')
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b54      	cmp	r3, #84	; 0x54
 8001056:	d13b      	bne.n	80010d0 <letter+0xf80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	487c      	ldr	r0, [pc, #496]	; (8001250 <letter+0x1100>)
 8001060:	f002 fab5 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4877      	ldr	r0, [pc, #476]	; (8001248 <letter+0x10f8>)
 800106c:	f002 faaf 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4874      	ldr	r0, [pc, #464]	; (8001248 <letter+0x10f8>)
 8001078:	f002 faa9 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800107c:	2201      	movs	r2, #1
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4871      	ldr	r0, [pc, #452]	; (8001248 <letter+0x10f8>)
 8001082:	f002 faa4 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	486f      	ldr	r0, [pc, #444]	; (8001248 <letter+0x10f8>)
 800108c:	f002 fa9f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	486d      	ldr	r0, [pc, #436]	; (800124c <letter+0x10fc>)
 8001096:	f002 fa9a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	486a      	ldr	r0, [pc, #424]	; (800124c <letter+0x10fc>)
 80010a2:	f002 fa94 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	4867      	ldr	r0, [pc, #412]	; (800124c <letter+0x10fc>)
 80010ae:	f002 fa8e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4864      	ldr	r0, [pc, #400]	; (800124c <letter+0x10fc>)
 80010ba:	f002 fa88 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	4862      	ldr	r0, [pc, #392]	; (8001250 <letter+0x1100>)
 80010c6:	f002 fa82 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f001 ffe0 	bl	8003090 <HAL_Delay>
	}
	if(L == 't')
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b74      	cmp	r3, #116	; 0x74
 80010d4:	d13b      	bne.n	800114e <letter+0xffe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010dc:	485c      	ldr	r0, [pc, #368]	; (8001250 <letter+0x1100>)
 80010de:	f002 fa76 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4857      	ldr	r0, [pc, #348]	; (8001248 <letter+0x10f8>)
 80010ea:	f002 fa70 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4854      	ldr	r0, [pc, #336]	; (8001248 <letter+0x10f8>)
 80010f6:	f002 fa6a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80010fa:	2201      	movs	r2, #1
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4852      	ldr	r0, [pc, #328]	; (8001248 <letter+0x10f8>)
 8001100:	f002 fa65 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001104:	2200      	movs	r2, #0
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	484f      	ldr	r0, [pc, #316]	; (8001248 <letter+0x10f8>)
 800110a:	f002 fa60 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800110e:	2201      	movs	r2, #1
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	484e      	ldr	r0, [pc, #312]	; (800124c <letter+0x10fc>)
 8001114:	f002 fa5b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	484b      	ldr	r0, [pc, #300]	; (800124c <letter+0x10fc>)
 8001120:	f002 fa55 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	4848      	ldr	r0, [pc, #288]	; (800124c <letter+0x10fc>)
 800112c:	f002 fa4f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	4845      	ldr	r0, [pc, #276]	; (800124c <letter+0x10fc>)
 8001138:	f002 fa49 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4843      	ldr	r0, [pc, #268]	; (8001250 <letter+0x1100>)
 8001144:	f002 fa43 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001148:	2002      	movs	r0, #2
 800114a:	f001 ffa1 	bl	8003090 <HAL_Delay>
	}
	if(L == 'u')
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b75      	cmp	r3, #117	; 0x75
 8001152:	d13b      	bne.n	80011cc <letter+0x107c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	483d      	ldr	r0, [pc, #244]	; (8001250 <letter+0x1100>)
 800115c:	f002 fa37 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <letter+0x10f8>)
 8001168:	f002 fa31 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4835      	ldr	r0, [pc, #212]	; (8001248 <letter+0x10f8>)
 8001174:	f002 fa2b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001178:	2201      	movs	r2, #1
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	4832      	ldr	r0, [pc, #200]	; (8001248 <letter+0x10f8>)
 800117e:	f002 fa26 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001182:	2200      	movs	r2, #0
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4830      	ldr	r0, [pc, #192]	; (8001248 <letter+0x10f8>)
 8001188:	f002 fa21 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800118c:	2201      	movs	r2, #1
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <letter+0x10fc>)
 8001192:	f002 fa1c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	482b      	ldr	r0, [pc, #172]	; (800124c <letter+0x10fc>)
 800119e:	f002 fa16 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <letter+0x10fc>)
 80011aa:	f002 fa10 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4825      	ldr	r0, [pc, #148]	; (800124c <letter+0x10fc>)
 80011b6:	f002 fa0a 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <letter+0x1100>)
 80011c2:	f002 fa04 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80011c6:	2002      	movs	r0, #2
 80011c8:	f001 ff62 	bl	8003090 <HAL_Delay>
	}
	if(L == 'v')
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b76      	cmp	r3, #118	; 0x76
 80011d0:	d142      	bne.n	8001258 <letter+0x1108>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <letter+0x1100>)
 80011da:	f002 f9f8 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <letter+0x10f8>)
 80011e6:	f002 f9f2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f0:	4815      	ldr	r0, [pc, #84]	; (8001248 <letter+0x10f8>)
 80011f2:	f002 f9ec 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80011f6:	2201      	movs	r2, #1
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <letter+0x10f8>)
 80011fc:	f002 f9e7 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001200:	2200      	movs	r2, #0
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <letter+0x10f8>)
 8001206:	f002 f9e2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800120a:	2201      	movs	r2, #1
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <letter+0x10fc>)
 8001210:	f002 f9dd 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <letter+0x10fc>)
 800121c:	f002 f9d7 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <letter+0x10fc>)
 8001228:	f002 f9d1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <letter+0x10fc>)
 8001234:	f002 f9cb 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <letter+0x1100>)
 8001240:	f002 f9c5 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001244:	2002      	movs	r0, #2
 8001246:	e005      	b.n	8001254 <letter+0x1104>
 8001248:	40011000 	.word	0x40011000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	f001 ff1c 	bl	8003090 <HAL_Delay>
	}
	if(L == 'W')
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b57      	cmp	r3, #87	; 0x57
 800125c:	d13b      	bne.n	80012d6 <letter+0x1186>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	48d5      	ldr	r0, [pc, #852]	; (80015bc <letter+0x146c>)
 8001266:	f002 f9b2 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	48d3      	ldr	r0, [pc, #844]	; (80015c0 <letter+0x1470>)
 8001272:	f002 f9ac 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	48d0      	ldr	r0, [pc, #832]	; (80015c0 <letter+0x1470>)
 800127e:	f002 f9a6 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	48ce      	ldr	r0, [pc, #824]	; (80015c0 <letter+0x1470>)
 8001288:	f002 f9a1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800128c:	2200      	movs	r2, #0
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	48cb      	ldr	r0, [pc, #812]	; (80015c0 <letter+0x1470>)
 8001292:	f002 f99c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	48ca      	ldr	r0, [pc, #808]	; (80015c4 <letter+0x1474>)
 800129c:	f002 f997 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	48c7      	ldr	r0, [pc, #796]	; (80015c4 <letter+0x1474>)
 80012a8:	f002 f991 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b2:	48c4      	ldr	r0, [pc, #784]	; (80015c4 <letter+0x1474>)
 80012b4:	f002 f98b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	48c1      	ldr	r0, [pc, #772]	; (80015c4 <letter+0x1474>)
 80012c0:	f002 f985 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	48bc      	ldr	r0, [pc, #752]	; (80015bc <letter+0x146c>)
 80012cc:	f002 f97f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f001 fedd 	bl	8003090 <HAL_Delay>
	}
	if(L == 'w')
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b77      	cmp	r3, #119	; 0x77
 80012da:	d13b      	bne.n	8001354 <letter+0x1204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	48b6      	ldr	r0, [pc, #728]	; (80015bc <letter+0x146c>)
 80012e4:	f002 f973 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	48b4      	ldr	r0, [pc, #720]	; (80015c0 <letter+0x1470>)
 80012f0:	f002 f96d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	48b1      	ldr	r0, [pc, #708]	; (80015c0 <letter+0x1470>)
 80012fc:	f002 f967 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	48ae      	ldr	r0, [pc, #696]	; (80015c0 <letter+0x1470>)
 8001306:	f002 f962 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	48ac      	ldr	r0, [pc, #688]	; (80015c0 <letter+0x1470>)
 8001310:	f002 f95d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001314:	2201      	movs	r2, #1
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	48aa      	ldr	r0, [pc, #680]	; (80015c4 <letter+0x1474>)
 800131a:	f002 f958 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	48a7      	ldr	r0, [pc, #668]	; (80015c4 <letter+0x1474>)
 8001326:	f002 f952 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	48a4      	ldr	r0, [pc, #656]	; (80015c4 <letter+0x1474>)
 8001332:	f002 f94c 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	48a1      	ldr	r0, [pc, #644]	; (80015c4 <letter+0x1474>)
 800133e:	f002 f946 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	489c      	ldr	r0, [pc, #624]	; (80015bc <letter+0x146c>)
 800134a:	f002 f940 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800134e:	2002      	movs	r0, #2
 8001350:	f001 fe9e 	bl	8003090 <HAL_Delay>
	}
	if(L == 'y')
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b79      	cmp	r3, #121	; 0x79
 8001358:	d13b      	bne.n	80013d2 <letter+0x1282>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4896      	ldr	r0, [pc, #600]	; (80015bc <letter+0x146c>)
 8001362:	f002 f934 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	4894      	ldr	r0, [pc, #592]	; (80015c0 <letter+0x1470>)
 800136e:	f002 f92e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	4891      	ldr	r0, [pc, #580]	; (80015c0 <letter+0x1470>)
 800137a:	f002 f928 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	488f      	ldr	r0, [pc, #572]	; (80015c0 <letter+0x1470>)
 8001384:	f002 f923 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001388:	2201      	movs	r2, #1
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	488c      	ldr	r0, [pc, #560]	; (80015c0 <letter+0x1470>)
 800138e:	f002 f91e 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	488b      	ldr	r0, [pc, #556]	; (80015c4 <letter+0x1474>)
 8001398:	f002 f919 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4888      	ldr	r0, [pc, #544]	; (80015c4 <letter+0x1474>)
 80013a4:	f002 f913 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	4885      	ldr	r0, [pc, #532]	; (80015c4 <letter+0x1474>)
 80013b0:	f002 f90d 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ba:	4882      	ldr	r0, [pc, #520]	; (80015c4 <letter+0x1474>)
 80013bc:	f002 f907 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	487d      	ldr	r0, [pc, #500]	; (80015bc <letter+0x146c>)
 80013c8:	f002 f901 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f001 fe5f 	bl	8003090 <HAL_Delay>
	}
	if(L == '0')
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b30      	cmp	r3, #48	; 0x30
 80013d6:	d13b      	bne.n	8001450 <letter+0x1300>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4877      	ldr	r0, [pc, #476]	; (80015bc <letter+0x146c>)
 80013e0:	f002 f8f5 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	4875      	ldr	r0, [pc, #468]	; (80015c0 <letter+0x1470>)
 80013ec:	f002 f8ef 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4872      	ldr	r0, [pc, #456]	; (80015c0 <letter+0x1470>)
 80013f8:	f002 f8e9 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	486f      	ldr	r0, [pc, #444]	; (80015c0 <letter+0x1470>)
 8001402:	f002 f8e4 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001406:	2200      	movs	r2, #0
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	486d      	ldr	r0, [pc, #436]	; (80015c0 <letter+0x1470>)
 800140c:	f002 f8df 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001410:	2201      	movs	r2, #1
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	486b      	ldr	r0, [pc, #428]	; (80015c4 <letter+0x1474>)
 8001416:	f002 f8da 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001420:	4868      	ldr	r0, [pc, #416]	; (80015c4 <letter+0x1474>)
 8001422:	f002 f8d4 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	4865      	ldr	r0, [pc, #404]	; (80015c4 <letter+0x1474>)
 800142e:	f002 f8ce 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001438:	4862      	ldr	r0, [pc, #392]	; (80015c4 <letter+0x1474>)
 800143a:	f002 f8c8 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	485d      	ldr	r0, [pc, #372]	; (80015bc <letter+0x146c>)
 8001446:	f002 f8c2 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800144a:	2002      	movs	r0, #2
 800144c:	f001 fe20 	bl	8003090 <HAL_Delay>
	}
	if(L == '1')
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b31      	cmp	r3, #49	; 0x31
 8001454:	d13b      	bne.n	80014ce <letter+0x137e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4857      	ldr	r0, [pc, #348]	; (80015bc <letter+0x146c>)
 800145e:	f002 f8b6 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4855      	ldr	r0, [pc, #340]	; (80015c0 <letter+0x1470>)
 800146a:	f002 f8b0 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	4852      	ldr	r0, [pc, #328]	; (80015c0 <letter+0x1470>)
 8001476:	f002 f8aa 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800147a:	2200      	movs	r2, #0
 800147c:	2140      	movs	r1, #64	; 0x40
 800147e:	4850      	ldr	r0, [pc, #320]	; (80015c0 <letter+0x1470>)
 8001480:	f002 f8a5 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	484d      	ldr	r0, [pc, #308]	; (80015c0 <letter+0x1470>)
 800148a:	f002 f8a0 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800148e:	2201      	movs	r2, #1
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	484c      	ldr	r0, [pc, #304]	; (80015c4 <letter+0x1474>)
 8001494:	f002 f89b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4849      	ldr	r0, [pc, #292]	; (80015c4 <letter+0x1474>)
 80014a0:	f002 f895 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014aa:	4846      	ldr	r0, [pc, #280]	; (80015c4 <letter+0x1474>)
 80014ac:	f002 f88f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4843      	ldr	r0, [pc, #268]	; (80015c4 <letter+0x1474>)
 80014b8:	f002 f889 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	483e      	ldr	r0, [pc, #248]	; (80015bc <letter+0x146c>)
 80014c4:	f002 f883 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f001 fde1 	bl	8003090 <HAL_Delay>
	}
	if(L == '2')
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b32      	cmp	r3, #50	; 0x32
 80014d2:	d138      	bne.n	8001546 <letter+0x13f6>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	4838      	ldr	r0, [pc, #224]	; (80015bc <letter+0x146c>)
 80014dc:	f002 f877 	bl	80035ce <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4836      	ldr	r0, [pc, #216]	; (80015c0 <letter+0x1470>)
 80014e8:	f002 f871 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f2:	4833      	ldr	r0, [pc, #204]	; (80015c0 <letter+0x1470>)
 80014f4:	f002 f86b 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	4830      	ldr	r0, [pc, #192]	; (80015c0 <letter+0x1470>)
 80014fe:	f002 f866 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	482e      	ldr	r0, [pc, #184]	; (80015c0 <letter+0x1470>)
 8001508:	f002 f861 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	482c      	ldr	r0, [pc, #176]	; (80015c4 <letter+0x1474>)
 8001512:	f002 f85c 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4829      	ldr	r0, [pc, #164]	; (80015c4 <letter+0x1474>)
 800151e:	f002 f856 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001528:	4826      	ldr	r0, [pc, #152]	; (80015c4 <letter+0x1474>)
 800152a:	f002 f850 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001534:	4823      	ldr	r0, [pc, #140]	; (80015c4 <letter+0x1474>)
 8001536:	f002 f84a 	bl	80035ce <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	481e      	ldr	r0, [pc, #120]	; (80015bc <letter+0x146c>)
 8001542:	f002 f844 	bl	80035ce <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b33      	cmp	r3, #51	; 0x33
 800154a:	d143      	bne.n	80015d4 <letter+0x1484>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	481a      	ldr	r0, [pc, #104]	; (80015bc <letter+0x146c>)
 8001554:	f002 f83b 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <letter+0x1470>)
 8001560:	f002 f835 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	4815      	ldr	r0, [pc, #84]	; (80015c0 <letter+0x1470>)
 800156c:	f002 f82f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001570:	2200      	movs	r2, #0
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <letter+0x1470>)
 8001576:	f002 f82a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <letter+0x1470>)
 8001580:	f002 f825 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001584:	2201      	movs	r2, #1
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	480e      	ldr	r0, [pc, #56]	; (80015c4 <letter+0x1474>)
 800158a:	f002 f820 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <letter+0x1474>)
 8001596:	f002 f81a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <letter+0x1474>)
 80015a2:	f002 f814 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <letter+0x1474>)
 80015ae:	f002 f80e 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b8:	e006      	b.n	80015c8 <letter+0x1478>
 80015ba:	bf00      	nop
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40010800 	.word	0x40010800
 80015c8:	48c1      	ldr	r0, [pc, #772]	; (80018d0 <letter+0x1780>)
 80015ca:	f002 f800 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f001 fd5e 	bl	8003090 <HAL_Delay>
	}
	if(L == '4')
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b34      	cmp	r3, #52	; 0x34
 80015d8:	d13b      	bne.n	8001652 <letter+0x1502>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e0:	48bb      	ldr	r0, [pc, #748]	; (80018d0 <letter+0x1780>)
 80015e2:	f001 fff4 	bl	80035ce <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	48b9      	ldr	r0, [pc, #740]	; (80018d4 <letter+0x1784>)
 80015ee:	f001 ffee 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	48b6      	ldr	r0, [pc, #728]	; (80018d4 <letter+0x1784>)
 80015fa:	f001 ffe8 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80015fe:	2201      	movs	r2, #1
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	48b4      	ldr	r0, [pc, #720]	; (80018d4 <letter+0x1784>)
 8001604:	f001 ffe3 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001608:	2200      	movs	r2, #0
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	48b1      	ldr	r0, [pc, #708]	; (80018d4 <letter+0x1784>)
 800160e:	f001 ffde 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001612:	2201      	movs	r2, #1
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	48b0      	ldr	r0, [pc, #704]	; (80018d8 <letter+0x1788>)
 8001618:	f001 ffd9 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	48ad      	ldr	r0, [pc, #692]	; (80018d8 <letter+0x1788>)
 8001624:	f001 ffd3 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	48aa      	ldr	r0, [pc, #680]	; (80018d8 <letter+0x1788>)
 8001630:	f001 ffcd 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163a:	48a7      	ldr	r0, [pc, #668]	; (80018d8 <letter+0x1788>)
 800163c:	f001 ffc7 	bl	80035ce <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001646:	48a2      	ldr	r0, [pc, #648]	; (80018d0 <letter+0x1780>)
 8001648:	f001 ffc1 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800164c:	2002      	movs	r0, #2
 800164e:	f001 fd1f 	bl	8003090 <HAL_Delay>
	}
	if(L == '5')
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b35      	cmp	r3, #53	; 0x35
 8001656:	d13b      	bne.n	80016d0 <letter+0x1580>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	489c      	ldr	r0, [pc, #624]	; (80018d0 <letter+0x1780>)
 8001660:	f001 ffb5 	bl	80035ce <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166a:	489a      	ldr	r0, [pc, #616]	; (80018d4 <letter+0x1784>)
 800166c:	f001 ffaf 	bl	80035ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	4897      	ldr	r0, [pc, #604]	; (80018d4 <letter+0x1784>)
 8001678:	f001 ffa9 	bl	80035ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4894      	ldr	r0, [pc, #592]	; (80018d4 <letter+0x1784>)
 8001682:	f001 ffa4 	bl	80035ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001686:	2200      	movs	r2, #0
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	4892      	ldr	r0, [pc, #584]	; (80018d4 <letter+0x1784>)
 800168c:	f001 ff9f 	bl	80035ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001690:	2201      	movs	r2, #1
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	4890      	ldr	r0, [pc, #576]	; (80018d8 <letter+0x1788>)
 8001696:	f001 ff9a 	bl	80035ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	488d      	ldr	r0, [pc, #564]	; (80018d8 <letter+0x1788>)
 80016a2:	f001 ff94 	bl	80035ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ac:	488a      	ldr	r0, [pc, #552]	; (80018d8 <letter+0x1788>)
 80016ae:	f001 ff8e 	bl	80035ce <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b8:	4887      	ldr	r0, [pc, #540]	; (80018d8 <letter+0x1788>)
 80016ba:	f001 ff88 	bl	80035ce <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4882      	ldr	r0, [pc, #520]	; (80018d0 <letter+0x1780>)
 80016c6:	f001 ff82 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f001 fce0 	bl	8003090 <HAL_Delay>
	}
	if(L == '6')
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b36      	cmp	r3, #54	; 0x36
 80016d4:	d13b      	bne.n	800174e <letter+0x15fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016dc:	487c      	ldr	r0, [pc, #496]	; (80018d0 <letter+0x1780>)
 80016de:	f001 ff76 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e8:	487a      	ldr	r0, [pc, #488]	; (80018d4 <letter+0x1784>)
 80016ea:	f001 ff70 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4877      	ldr	r0, [pc, #476]	; (80018d4 <letter+0x1784>)
 80016f6:	f001 ff6a 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016fa:	2201      	movs	r2, #1
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4875      	ldr	r0, [pc, #468]	; (80018d4 <letter+0x1784>)
 8001700:	f001 ff65 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4872      	ldr	r0, [pc, #456]	; (80018d4 <letter+0x1784>)
 800170a:	f001 ff60 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800170e:	2201      	movs	r2, #1
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4871      	ldr	r0, [pc, #452]	; (80018d8 <letter+0x1788>)
 8001714:	f001 ff5b 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171e:	486e      	ldr	r0, [pc, #440]	; (80018d8 <letter+0x1788>)
 8001720:	f001 ff55 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	486b      	ldr	r0, [pc, #428]	; (80018d8 <letter+0x1788>)
 800172c:	f001 ff4f 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001736:	4868      	ldr	r0, [pc, #416]	; (80018d8 <letter+0x1788>)
 8001738:	f001 ff49 	bl	80035ce <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	4863      	ldr	r0, [pc, #396]	; (80018d0 <letter+0x1780>)
 8001744:	f001 ff43 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001748:	2002      	movs	r0, #2
 800174a:	f001 fca1 	bl	8003090 <HAL_Delay>
	}
	if(L == '7')
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b37      	cmp	r3, #55	; 0x37
 8001752:	d13b      	bne.n	80017cc <letter+0x167c>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	485d      	ldr	r0, [pc, #372]	; (80018d0 <letter+0x1780>)
 800175c:	f001 ff37 	bl	80035ce <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	485b      	ldr	r0, [pc, #364]	; (80018d4 <letter+0x1784>)
 8001768:	f001 ff31 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001772:	4858      	ldr	r0, [pc, #352]	; (80018d4 <letter+0x1784>)
 8001774:	f001 ff2b 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001778:	2201      	movs	r2, #1
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	4855      	ldr	r0, [pc, #340]	; (80018d4 <letter+0x1784>)
 800177e:	f001 ff26 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <letter+0x1784>)
 8001788:	f001 ff21 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800178c:	2201      	movs	r2, #1
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4851      	ldr	r0, [pc, #324]	; (80018d8 <letter+0x1788>)
 8001792:	f001 ff1c 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	484e      	ldr	r0, [pc, #312]	; (80018d8 <letter+0x1788>)
 800179e:	f001 ff16 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a8:	484b      	ldr	r0, [pc, #300]	; (80018d8 <letter+0x1788>)
 80017aa:	f001 ff10 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	4848      	ldr	r0, [pc, #288]	; (80018d8 <letter+0x1788>)
 80017b6:	f001 ff0a 	bl	80035ce <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c0:	4843      	ldr	r0, [pc, #268]	; (80018d0 <letter+0x1780>)
 80017c2:	f001 ff04 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017c6:	2002      	movs	r0, #2
 80017c8:	f001 fc62 	bl	8003090 <HAL_Delay>
	}
	if(L == '8')
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b38      	cmp	r3, #56	; 0x38
 80017d0:	d13b      	bne.n	800184a <letter+0x16fa>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d8:	483d      	ldr	r0, [pc, #244]	; (80018d0 <letter+0x1780>)
 80017da:	f001 fef8 	bl	80035ce <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e4:	483b      	ldr	r0, [pc, #236]	; (80018d4 <letter+0x1784>)
 80017e6:	f001 fef2 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4838      	ldr	r0, [pc, #224]	; (80018d4 <letter+0x1784>)
 80017f2:	f001 feec 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4836      	ldr	r0, [pc, #216]	; (80018d4 <letter+0x1784>)
 80017fc:	f001 fee7 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001800:	2201      	movs	r2, #1
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	4833      	ldr	r0, [pc, #204]	; (80018d4 <letter+0x1784>)
 8001806:	f001 fee2 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800180a:	2201      	movs	r2, #1
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	4832      	ldr	r0, [pc, #200]	; (80018d8 <letter+0x1788>)
 8001810:	f001 fedd 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181a:	482f      	ldr	r0, [pc, #188]	; (80018d8 <letter+0x1788>)
 800181c:	f001 fed7 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001826:	482c      	ldr	r0, [pc, #176]	; (80018d8 <letter+0x1788>)
 8001828:	f001 fed1 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001832:	4829      	ldr	r0, [pc, #164]	; (80018d8 <letter+0x1788>)
 8001834:	f001 fecb 	bl	80035ce <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <letter+0x1780>)
 8001840:	f001 fec5 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001844:	2002      	movs	r0, #2
 8001846:	f001 fc23 	bl	8003090 <HAL_Delay>
	}
	if(L =='9')
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b39      	cmp	r3, #57	; 0x39
 800184e:	d13b      	bne.n	80018c8 <letter+0x1778>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	481e      	ldr	r0, [pc, #120]	; (80018d0 <letter+0x1780>)
 8001858:	f001 feb9 	bl	80035ce <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <letter+0x1784>)
 8001864:	f001 feb3 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <letter+0x1784>)
 8001870:	f001 fead 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001874:	2200      	movs	r2, #0
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <letter+0x1784>)
 800187a:	f001 fea8 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800187e:	2201      	movs	r2, #1
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <letter+0x1784>)
 8001884:	f001 fea3 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001888:	2201      	movs	r2, #1
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <letter+0x1788>)
 800188e:	f001 fe9e 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <letter+0x1788>)
 800189a:	f001 fe98 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <letter+0x1788>)
 80018a6:	f001 fe92 	bl	80035ce <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <letter+0x1788>)
 80018b2:	f001 fe8c 	bl	80035ce <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <letter+0x1780>)
 80018be:	f001 fe86 	bl	80035ce <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f001 fbe4 	bl	8003090 <HAL_Delay>
	}

}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010800 	.word	0x40010800

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000154:	f000 fd62 	bl	8000c1c <HAL_Init>
=======
 80018e0:	f001 fba4 	bl	800302c <HAL_Init>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000158:	f000 f8a0 	bl	800029c <SystemClock_Config>
=======
 80018e4:	f000 f89e 	bl	8001a24 <SystemClock_Config>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800015c:	f000 f9d2 	bl	8000504 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000160:	f000 f930 	bl	80003c4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000164:	f000 f9a4 	bl	80004b0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f978 	bl	800045c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800016c:	f000 f8ec 	bl	8000348 <MX_ADC1_Init>
=======
 80018e8:	f000 f97e 	bl	8001be8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018ec:	f000 f8dc 	bl	8001aa8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80018f0:	f000 f950 	bl	8001b94 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80018f4:	f000 f924 	bl	8001b40 <MX_USART1_UART_Init>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
<<<<<<< HEAD
 8000170:	f002 fe92 	bl	8002e98 <osKernelInitialize>
=======
 80018f8:	f003 f93e 	bl	8004b78 <osKernelInitialize>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
<<<<<<< HEAD
 8000174:	4a2d      	ldr	r2, [pc, #180]	; (800022c <main+0xdc>)
 8000176:	2102      	movs	r1, #2
 8000178:	2008      	movs	r0, #8
 800017a:	f002 ffcb 	bl	8003114 <osMessageQueueNew>
 800017e:	4602      	mov	r2, r0
 8000180:	4b2b      	ldr	r3, [pc, #172]	; (8000230 <main+0xe0>)
 8000182:	601a      	str	r2, [r3, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8000184:	4a2b      	ldr	r2, [pc, #172]	; (8000234 <main+0xe4>)
 8000186:	2102      	movs	r1, #2
 8000188:	2008      	movs	r0, #8
 800018a:	f002 ffc3 	bl	8003114 <osMessageQueueNew>
 800018e:	4602      	mov	r2, r0
 8000190:	4b29      	ldr	r3, [pc, #164]	; (8000238 <main+0xe8>)
 8000192:	601a      	str	r2, [r3, #0]

  /* creation of XbeeQueue */
  XbeeQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &XbeeQueue_attributes);
 8000194:	4a29      	ldr	r2, [pc, #164]	; (800023c <main+0xec>)
 8000196:	2102      	movs	r1, #2
 8000198:	2008      	movs	r0, #8
 800019a:	f002 ffbb 	bl	8003114 <osMessageQueueNew>
 800019e:	4602      	mov	r2, r0
 80001a0:	4b27      	ldr	r3, [pc, #156]	; (8000240 <main+0xf0>)
 80001a2:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 80001a4:	4a27      	ldr	r2, [pc, #156]	; (8000244 <main+0xf4>)
 80001a6:	2102      	movs	r1, #2
 80001a8:	2008      	movs	r0, #8
 80001aa:	f002 ffb3 	bl	8003114 <osMessageQueueNew>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b25      	ldr	r3, [pc, #148]	; (8000248 <main+0xf8>)
 80001b2:	601a      	str	r2, [r3, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 80001b4:	4a25      	ldr	r2, [pc, #148]	; (800024c <main+0xfc>)
 80001b6:	2102      	movs	r1, #2
 80001b8:	2008      	movs	r0, #8
 80001ba:	f002 ffab 	bl	8003114 <osMessageQueueNew>
 80001be:	4602      	mov	r2, r0
 80001c0:	4b23      	ldr	r3, [pc, #140]	; (8000250 <main+0x100>)
 80001c2:	601a      	str	r2, [r3, #0]
=======
 80018fc:	4a2d      	ldr	r2, [pc, #180]	; (80019b4 <main+0xd8>)
 80018fe:	2102      	movs	r1, #2
 8001900:	2008      	movs	r0, #8
 8001902:	f003 fa77 	bl	8004df4 <osMessageQueueNew>
 8001906:	4603      	mov	r3, r0
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <main+0xdc>)
 800190a:	6013      	str	r3, [r2, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 800190c:	4a2b      	ldr	r2, [pc, #172]	; (80019bc <main+0xe0>)
 800190e:	2102      	movs	r1, #2
 8001910:	2008      	movs	r0, #8
 8001912:	f003 fa6f 	bl	8004df4 <osMessageQueueNew>
 8001916:	4603      	mov	r3, r0
 8001918:	4a29      	ldr	r2, [pc, #164]	; (80019c0 <main+0xe4>)
 800191a:	6013      	str	r3, [r2, #0]

  /* creation of XbeeQueue */
  XbeeQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &XbeeQueue_attributes);
 800191c:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <main+0xe8>)
 800191e:	2102      	movs	r1, #2
 8001920:	2008      	movs	r0, #8
 8001922:	f003 fa67 	bl	8004df4 <osMessageQueueNew>
 8001926:	4603      	mov	r3, r0
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <main+0xec>)
 800192a:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 800192c:	4a27      	ldr	r2, [pc, #156]	; (80019cc <main+0xf0>)
 800192e:	2102      	movs	r1, #2
 8001930:	2008      	movs	r0, #8
 8001932:	f003 fa5f 	bl	8004df4 <osMessageQueueNew>
 8001936:	4603      	mov	r3, r0
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <main+0xf4>)
 800193a:	6013      	str	r3, [r2, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 800193c:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <main+0xf8>)
 800193e:	2102      	movs	r1, #2
 8001940:	2008      	movs	r0, #8
 8001942:	f003 fa57 	bl	8004df4 <osMessageQueueNew>
 8001946:	4603      	mov	r3, r0
 8001948:	4a23      	ldr	r2, [pc, #140]	; (80019d8 <main+0xfc>)
 800194a:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
<<<<<<< HEAD
 80001c4:	4a23      	ldr	r2, [pc, #140]	; (8000254 <main+0x104>)
 80001c6:	2100      	movs	r1, #0
 80001c8:	4823      	ldr	r0, [pc, #140]	; (8000258 <main+0x108>)
 80001ca:	f002 fecb 	bl	8002f64 <osThreadNew>
 80001ce:	4602      	mov	r2, r0
 80001d0:	4b22      	ldr	r3, [pc, #136]	; (800025c <main+0x10c>)
 80001d2:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 80001d4:	4a22      	ldr	r2, [pc, #136]	; (8000260 <main+0x110>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4822      	ldr	r0, [pc, #136]	; (8000264 <main+0x114>)
 80001da:	f002 fec3 	bl	8002f64 <osThreadNew>
 80001de:	4602      	mov	r2, r0
 80001e0:	4b21      	ldr	r3, [pc, #132]	; (8000268 <main+0x118>)
 80001e2:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 80001e4:	4a21      	ldr	r2, [pc, #132]	; (800026c <main+0x11c>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4821      	ldr	r0, [pc, #132]	; (8000270 <main+0x120>)
 80001ea:	f002 febb 	bl	8002f64 <osThreadNew>
 80001ee:	4602      	mov	r2, r0
 80001f0:	4b20      	ldr	r3, [pc, #128]	; (8000274 <main+0x124>)
 80001f2:	601a      	str	r2, [r3, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 80001f4:	4a20      	ldr	r2, [pc, #128]	; (8000278 <main+0x128>)
 80001f6:	2100      	movs	r1, #0
 80001f8:	4820      	ldr	r0, [pc, #128]	; (800027c <main+0x12c>)
 80001fa:	f002 feb3 	bl	8002f64 <osThreadNew>
 80001fe:	4602      	mov	r2, r0
 8000200:	4b1f      	ldr	r3, [pc, #124]	; (8000280 <main+0x130>)
 8000202:	601a      	str	r2, [r3, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 8000204:	4a1f      	ldr	r2, [pc, #124]	; (8000284 <main+0x134>)
 8000206:	2100      	movs	r1, #0
 8000208:	481f      	ldr	r0, [pc, #124]	; (8000288 <main+0x138>)
 800020a:	f002 feab 	bl	8002f64 <osThreadNew>
 800020e:	4602      	mov	r2, r0
 8000210:	4b1e      	ldr	r3, [pc, #120]	; (800028c <main+0x13c>)
 8000212:	601a      	str	r2, [r3, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 8000214:	4a1e      	ldr	r2, [pc, #120]	; (8000290 <main+0x140>)
 8000216:	2100      	movs	r1, #0
 8000218:	481e      	ldr	r0, [pc, #120]	; (8000294 <main+0x144>)
 800021a:	f002 fea3 	bl	8002f64 <osThreadNew>
 800021e:	4602      	mov	r2, r0
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <main+0x148>)
 8000222:	601a      	str	r2, [r3, #0]
=======
 800194c:	4a23      	ldr	r2, [pc, #140]	; (80019dc <main+0x100>)
 800194e:	2100      	movs	r1, #0
 8001950:	4823      	ldr	r0, [pc, #140]	; (80019e0 <main+0x104>)
 8001952:	f003 f977 	bl	8004c44 <osThreadNew>
 8001956:	4603      	mov	r3, r0
 8001958:	4a22      	ldr	r2, [pc, #136]	; (80019e4 <main+0x108>)
 800195a:	6013      	str	r3, [r2, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 800195c:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <main+0x10c>)
 800195e:	2100      	movs	r1, #0
 8001960:	4822      	ldr	r0, [pc, #136]	; (80019ec <main+0x110>)
 8001962:	f003 f96f 	bl	8004c44 <osThreadNew>
 8001966:	4603      	mov	r3, r0
 8001968:	4a21      	ldr	r2, [pc, #132]	; (80019f0 <main+0x114>)
 800196a:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <main+0x118>)
 800196e:	2100      	movs	r1, #0
 8001970:	4821      	ldr	r0, [pc, #132]	; (80019f8 <main+0x11c>)
 8001972:	f003 f967 	bl	8004c44 <osThreadNew>
 8001976:	4603      	mov	r3, r0
 8001978:	4a20      	ldr	r2, [pc, #128]	; (80019fc <main+0x120>)
 800197a:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <main+0x124>)
 800197e:	2100      	movs	r1, #0
 8001980:	4820      	ldr	r0, [pc, #128]	; (8001a04 <main+0x128>)
 8001982:	f003 f95f 	bl	8004c44 <osThreadNew>
 8001986:	4603      	mov	r3, r0
 8001988:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <main+0x12c>)
 800198a:	6013      	str	r3, [r2, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 800198c:	4a1f      	ldr	r2, [pc, #124]	; (8001a0c <main+0x130>)
 800198e:	2100      	movs	r1, #0
 8001990:	481f      	ldr	r0, [pc, #124]	; (8001a10 <main+0x134>)
 8001992:	f003 f957 	bl	8004c44 <osThreadNew>
 8001996:	4603      	mov	r3, r0
 8001998:	4a1e      	ldr	r2, [pc, #120]	; (8001a14 <main+0x138>)
 800199a:	6013      	str	r3, [r2, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 800199c:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <main+0x13c>)
 800199e:	2100      	movs	r1, #0
 80019a0:	481e      	ldr	r0, [pc, #120]	; (8001a1c <main+0x140>)
 80019a2:	f003 f94f 	bl	8004c44 <osThreadNew>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <main+0x144>)
 80019aa:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
<<<<<<< HEAD
 8000224:	f002 fe6a 	bl	8002efc <osKernelStart>
=======
 80019ac:	f003 f916 	bl	8004bdc <osKernelStart>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
<<<<<<< HEAD
 8000228:	e7fe      	b.n	8000228 <main+0xd8>
 800022a:	bf00      	nop
 800022c:	08005ba8 	.word	0x08005ba8
 8000230:	20002160 	.word	0x20002160
 8000234:	08005bc0 	.word	0x08005bc0
 8000238:	20002444 	.word	0x20002444
 800023c:	08005bd8 	.word	0x08005bd8
 8000240:	2000243c 	.word	0x2000243c
 8000244:	08005bf0 	.word	0x08005bf0
 8000248:	2000215c 	.word	0x2000215c
 800024c:	08005c08 	.word	0x08005c08
 8000250:	20002168 	.word	0x20002168
 8000254:	08005ad0 	.word	0x08005ad0
 8000258:	080006c9 	.word	0x080006c9
 800025c:	20002164 	.word	0x20002164
 8000260:	08005af4 	.word	0x08005af4
 8000264:	080006dd 	.word	0x080006dd
 8000268:	20002438 	.word	0x20002438
 800026c:	08005b18 	.word	0x08005b18
 8000270:	08000741 	.word	0x08000741
 8000274:	20002494 	.word	0x20002494
 8000278:	08005b3c 	.word	0x08005b3c
 800027c:	08000751 	.word	0x08000751
 8000280:	200023dc 	.word	0x200023dc
 8000284:	08005b60 	.word	0x08005b60
 8000288:	08000761 	.word	0x08000761
 800028c:	20002440 	.word	0x20002440
 8000290:	08005b84 	.word	0x08005b84
 8000294:	08000771 	.word	0x08000771
 8000298:	20002490 	.word	0x20002490

0800029c <SystemClock_Config>:
=======
 80019b0:	e7fe      	b.n	80019b0 <main+0xd4>
 80019b2:	bf00      	nop
 80019b4:	080078e4 	.word	0x080078e4
 80019b8:	20002174 	.word	0x20002174
 80019bc:	080078fc 	.word	0x080078fc
 80019c0:	200023d0 	.word	0x200023d0
 80019c4:	08007914 	.word	0x08007914
 80019c8:	200023c8 	.word	0x200023c8
 80019cc:	0800792c 	.word	0x0800792c
 80019d0:	20002170 	.word	0x20002170
 80019d4:	08007944 	.word	0x08007944
 80019d8:	2000217c 	.word	0x2000217c
 80019dc:	0800780c 	.word	0x0800780c
 80019e0:	0800287d 	.word	0x0800287d
 80019e4:	20002178 	.word	0x20002178
 80019e8:	08007830 	.word	0x08007830
 80019ec:	080028e1 	.word	0x080028e1
 80019f0:	200023c4 	.word	0x200023c4
 80019f4:	08007854 	.word	0x08007854
 80019f8:	08002bc5 	.word	0x08002bc5
 80019fc:	20002420 	.word	0x20002420
 8001a00:	08007878 	.word	0x08007878
 8001a04:	08002bd5 	.word	0x08002bd5
 8001a08:	200023c0 	.word	0x200023c0
 8001a0c:	0800789c 	.word	0x0800789c
 8001a10:	08002be5 	.word	0x08002be5
 8001a14:	200023cc 	.word	0x200023cc
 8001a18:	080078c0 	.word	0x080078c0
 8001a1c:	08002bf5 	.word	0x08002bf5
 8001a20:	2000241c 	.word	0x2000241c

08001a24 <SystemClock_Config>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 800029c:	b580      	push	{r7, lr}
 800029e:	b094      	sub	sp, #80	; 0x50
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a6:	2228      	movs	r2, #40	; 0x28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f005 fb7d 	bl	80059aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
=======
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b090      	sub	sp, #64	; 0x40
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2228      	movs	r2, #40	; 0x28
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 fe6c 	bl	8007710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 80002cc:	2302      	movs	r3, #2
 80002ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d0:	2301      	movs	r3, #1
 80002d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d4:	2310      	movs	r3, #16
 80002d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d8:	2302      	movs	r3, #2
 80002da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002dc:	2300      	movs	r3, #0
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002e0:	2300      	movs	r3, #0
 80002e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fb4d 	bl	8001988 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002f4:	f000 fa56 	bl	80007a4 <Error_Handler>
=======
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4e:	2310      	movs	r3, #16
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a52:	2302      	movs	r3, #2
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a5a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fded 	bl	8003644 <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a70:	f001 f8da 	bl	8002c28 <Error_Handler>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80002f8:	230f      	movs	r3, #15
 80002fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2302      	movs	r3, #2
 80002fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000308:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fdb7 	bl	8001e88 <HAL_RCC_ClockConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000320:	f000 fa40 	bl	80007a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000324:	2302      	movs	r3, #2
 8000326:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032c:	1d3b      	adds	r3, r7, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f001 ff76 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800033a:	f000 fa33 	bl	80007a4 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3750      	adds	r7, #80	; 0x50
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
 8000354:	605a      	str	r2, [r3, #4]
 8000356:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_ADC1_Init+0x74>)
 800035a:	4a19      	ldr	r2, [pc, #100]	; (80003c0 <MX_ADC1_Init+0x78>)
 800035c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800035e:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_ADC1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000364:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_ADC1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_ADC1_Init+0x74>)
 800036c:	2200      	movs	r2, #0
 800036e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_ADC1_Init+0x74>)
 8000372:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000376:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000378:	4b10      	ldr	r3, [pc, #64]	; (80003bc <MX_ADC1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_ADC1_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000384:	480d      	ldr	r0, [pc, #52]	; (80003bc <MX_ADC1_Init+0x74>)
 8000386:	f000 fc7b 	bl	8000c80 <HAL_ADC_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000390:	f000 fa08 	bl	80007a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000394:	230f      	movs	r3, #15
 8000396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000398:	2301      	movs	r3, #1
 800039a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_ADC1_Init+0x74>)
 80003a6:	f000 fef7 	bl	8001198 <HAL_ADC_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003b0:	f000 f9f8 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200023ac 	.word	0x200023ac
 80003c0:	40012400 	.word	0x40012400

080003c4 <MX_TIM2_Init>:
=======
 8001a74:	230f      	movs	r3, #15
 8001a76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 f858 	bl	8003b44 <HAL_RCC_ClockConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a9a:	f001 f8c5 	bl	8002c28 <Error_Handler>
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3740      	adds	r7, #64	; 0x40
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <MX_TIM2_Init>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
=======
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	463b      	mov	r3, r7
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
=======
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abc:	463b      	mov	r3, r7
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_TIM2_Init+0x94>)
 80003e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_TIM2_Init+0x94>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ee:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_TIM2_Init+0x94>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_TIM2_Init+0x94>)
 80003f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fc:	4b16      	ldr	r3, [pc, #88]	; (8000458 <MX_TIM2_Init+0x94>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <MX_TIM2_Init+0x94>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000408:	4813      	ldr	r0, [pc, #76]	; (8000458 <MX_TIM2_Init+0x94>)
 800040a:	f002 f87b 	bl	8002504 <HAL_TIM_Base_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000414:	f000 f9c6 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800041c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800041e:	f107 0308 	add.w	r3, r7, #8
 8000422:	4619      	mov	r1, r3
 8000424:	480c      	ldr	r0, [pc, #48]	; (8000458 <MX_TIM2_Init+0x94>)
 8000426:	f002 fa17 	bl	8002858 <HAL_TIM_ConfigClockSource>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000430:	f000 f9b8 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000434:	2300      	movs	r3, #0
 8000436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000438:	2300      	movs	r3, #0
 800043a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800043c:	463b      	mov	r3, r7
 800043e:	4619      	mov	r1, r3
 8000440:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_TIM2_Init+0x94>)
 8000442:	f002 fbdd 	bl	8002c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800044c:	f000 f9aa 	bl	80007a4 <Error_Handler>
=======
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ade:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aec:	4813      	ldr	r0, [pc, #76]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001aee:	f002 f9f3 	bl	8003ed8 <HAL_TIM_Base_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001af8:	f001 f896 	bl	8002c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b02:	f107 0308 	add.w	r3, r7, #8
 8001b06:	4619      	mov	r1, r3
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001b0a:	f002 fb8f 	bl	800422c <HAL_TIM_ConfigClockSource>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b14:	f001 f888 	bl	8002c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b20:	463b      	mov	r3, r7
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001b26:	f002 fd61 	bl	80045ec <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b30:	f001 f87a 	bl	8002c28 <Error_Handler>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< HEAD
 8000450:	bf00      	nop
 8000452:	3718      	adds	r7, #24
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20002448 	.word	0x20002448

0800045c <MX_USART1_UART_Init>:
=======
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200023d4 	.word	0x200023d4

08001b40 <MX_USART1_UART_Init>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
=======
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <MX_USART1_UART_Init+0x50>)
 8000464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800046c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000480:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000482:	220c      	movs	r2, #12
 8000484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000492:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_USART1_UART_Init+0x4c>)
 8000494:	f002 fc24 	bl	8002ce0 <HAL_UART_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800049e:	f000 f981 	bl	80007a4 <Error_Handler>
=======
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <MX_USART1_UART_Init+0x50>)
 8001b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b66:	220c      	movs	r2, #12
 8001b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b70:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b76:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_USART1_UART_Init+0x4c>)
 8001b78:	f002 fda8 	bl	80046cc <HAL_UART_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b82:	f001 f851 	bl	8002c28 <Error_Handler>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200023f8 	.word	0x200023f8
 80004ac:	40013800 	.word	0x40013800

080004b0 <MX_USART3_UART_Init>:
=======
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200020fc 	.word	0x200020fc
 8001b90:	40013800 	.word	0x40013800

08001b94 <MX_USART3_UART_Init>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
=======
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< HEAD
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <MX_USART3_UART_Init+0x50>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b08      	ldr	r3, [pc, #32]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <MX_USART3_UART_Init+0x4c>)
 80004e8:	f002 fbfa 	bl	8002ce0 <HAL_UART_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004f2:	f000 f957 	bl	80007a4 <Error_Handler>
=======
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <MX_USART3_UART_Init+0x50>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001ba0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_USART3_UART_Init+0x4c>)
 8001bcc:	f002 fd7e 	bl	80046cc <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bd6:	f001 f827 	bl	8002c28 <Error_Handler>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< HEAD
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200020bc 	.word	0x200020bc
 8000500:	40004800 	.word	0x40004800

08000504 <MX_GPIO_Init>:
=======
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200020bc 	.word	0x200020bc
 8001be4:	40004800 	.word	0x40004800

08001be8 <MX_GPIO_Init>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	4b65      	ldr	r3, [pc, #404]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a64      	ldr	r2, [pc, #400]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b62      	ldr	r3, [pc, #392]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0310 	and.w	r3, r3, #16
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b5f      	ldr	r3, [pc, #380]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a5e      	ldr	r2, [pc, #376]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b5c      	ldr	r3, [pc, #368]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b59      	ldr	r3, [pc, #356]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a58      	ldr	r2, [pc, #352]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b56      	ldr	r3, [pc, #344]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b53      	ldr	r3, [pc, #332]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a52      	ldr	r2, [pc, #328]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b50      	ldr	r3, [pc, #320]	; (80006b0 <MX_GPIO_Init+0x1ac>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 800057e:	484d      	ldr	r0, [pc, #308]	; (80006b4 <MX_GPIO_Init+0x1b0>)
 8000580:	f001 f9c8 	bl	8001914 <HAL_GPIO_WritePin>
=======
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	f107 0310 	add.w	r3, r7, #16
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfc:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a64      	ldr	r2, [pc, #400]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c02:	f043 0310 	orr.w	r3, r3, #16
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b62      	ldr	r3, [pc, #392]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c14:	4b5f      	ldr	r3, [pc, #380]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a5e      	ldr	r2, [pc, #376]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c1a:	f043 0320 	orr.w	r3, r3, #32
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b5c      	ldr	r3, [pc, #368]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b59      	ldr	r3, [pc, #356]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a58      	ldr	r2, [pc, #352]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b56      	ldr	r3, [pc, #344]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a52      	ldr	r2, [pc, #328]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <MX_GPIO_Init+0x1ac>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 8001c62:	484d      	ldr	r0, [pc, #308]	; (8001d98 <MX_GPIO_Init+0x1b0>)
 8001c64:	f001 fcb3 	bl	80035ce <HAL_GPIO_WritePin>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
<<<<<<< HEAD
 8000584:	2200      	movs	r2, #0
 8000586:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 800058a:	484b      	ldr	r0, [pc, #300]	; (80006b8 <MX_GPIO_Init+0x1b4>)
 800058c:	f001 f9c2 	bl	8001914 <HAL_GPIO_WritePin>
=======
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8001c6e:	484b      	ldr	r0, [pc, #300]	; (8001d9c <MX_GPIO_Init+0x1b4>)
 8001c70:	f001 fcad 	bl	80035ce <HAL_GPIO_WritePin>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
<<<<<<< HEAD
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8000596:	4849      	ldr	r0, [pc, #292]	; (80006bc <MX_GPIO_Init+0x1b8>)
 8000598:	f001 f9bc 	bl	8001914 <HAL_GPIO_WritePin>
=======
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001c7a:	4849      	ldr	r0, [pc, #292]	; (8001da0 <MX_GPIO_Init+0x1b8>)
 8001c7c:	f001 fca7 	bl	80035ce <HAL_GPIO_WritePin>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
<<<<<<< HEAD
 800059c:	2200      	movs	r2, #0
 800059e:	2104      	movs	r1, #4
 80005a0:	4847      	ldr	r0, [pc, #284]	; (80006c0 <MX_GPIO_Init+0x1bc>)
 80005a2:	f001 f9b7 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <MX_GPIO_Init+0x1c0>)
 80005ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4619      	mov	r1, r3
 80005ba:	4840      	ldr	r0, [pc, #256]	; (80006bc <MX_GPIO_Init+0x1b8>)
 80005bc:	f001 f850 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80005c0:	2307      	movs	r3, #7
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	4619      	mov	r1, r3
 80005d2:	483a      	ldr	r0, [pc, #232]	; (80006bc <MX_GPIO_Init+0x1b8>)
 80005d4:	f001 f844 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005d8:	230c      	movs	r3, #12
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2302      	movs	r3, #2
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2302      	movs	r3, #2
 80005e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4832      	ldr	r0, [pc, #200]	; (80006b4 <MX_GPIO_Init+0x1b0>)
 80005ec:	f001 f838 	bl	8001660 <HAL_GPIO_Init>
=======
 8001c80:	2200      	movs	r2, #0
 8001c82:	2104      	movs	r1, #4
 8001c84:	4847      	ldr	r0, [pc, #284]	; (8001da4 <MX_GPIO_Init+0x1bc>)
 8001c86:	f001 fca2 	bl	80035ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c90:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <MX_GPIO_Init+0x1c0>)
 8001c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4840      	ldr	r0, [pc, #256]	; (8001da0 <MX_GPIO_Init+0x1b8>)
 8001ca0:	f001 fafa 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	483a      	ldr	r0, [pc, #232]	; (8001da0 <MX_GPIO_Init+0x1b8>)
 8001cb8:	f001 faee 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4832      	ldr	r0, [pc, #200]	; (8001d98 <MX_GPIO_Init+0x1b0>)
 8001cd0:	f001 fae2 	bl	8003298 <HAL_GPIO_Init>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
<<<<<<< HEAD
 80005f0:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 80005f4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2302      	movs	r3, #2
 8000600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4619      	mov	r1, r3
 8000608:	482a      	ldr	r0, [pc, #168]	; (80006b4 <MX_GPIO_Init+0x1b0>)
 800060a:	f001 f829 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800060e:	2307      	movs	r3, #7
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000616:	2302      	movs	r3, #2
 8000618:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4825      	ldr	r0, [pc, #148]	; (80006b8 <MX_GPIO_Init+0x1b4>)
 8000622:	f001 f81d 	bl	8001660 <HAL_GPIO_Init>
=======
 8001cd4:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8001cd8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0310 	add.w	r3, r7, #16
 8001cea:	4619      	mov	r1, r3
 8001cec:	482a      	ldr	r0, [pc, #168]	; (8001d98 <MX_GPIO_Init+0x1b0>)
 8001cee:	f001 fad3 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfe:	f107 0310 	add.w	r3, r7, #16
 8001d02:	4619      	mov	r1, r3
 8001d04:	4825      	ldr	r0, [pc, #148]	; (8001d9c <MX_GPIO_Init+0x1b4>)
 8001d06:	f001 fac7 	bl	8003298 <HAL_GPIO_Init>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
<<<<<<< HEAD
 8000626:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 800062a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062c:	2301      	movs	r3, #1
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4619      	mov	r1, r3
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <MX_GPIO_Init+0x1b4>)
 8000640:	f001 f80e 	bl	8001660 <HAL_GPIO_Init>
=======
 8001d0a:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8001d0e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	481e      	ldr	r0, [pc, #120]	; (8001d9c <MX_GPIO_Init+0x1b4>)
 8001d24:	f001 fab8 	bl	8003298 <HAL_GPIO_Init>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
<<<<<<< HEAD
 8000644:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000648:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2302      	movs	r3, #2
 8000654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	4619      	mov	r1, r3
 800065c:	4817      	ldr	r0, [pc, #92]	; (80006bc <MX_GPIO_Init+0x1b8>)
 800065e:	f000 ffff 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000662:	2304      	movs	r3, #4
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2302      	movs	r3, #2
 8000670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	4811      	ldr	r0, [pc, #68]	; (80006c0 <MX_GPIO_Init+0x1bc>)
 800067a:	f000 fff1 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	2300      	movs	r3, #0
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 0310 	add.w	r3, r7, #16
 800068e:	4619      	mov	r1, r3
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <MX_GPIO_Init+0x1b4>)
 8000692:	f000 ffe5 	bl	8001660 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2105      	movs	r1, #5
 800069a:	2028      	movs	r0, #40	; 0x28
 800069c:	f000 ffb5 	bl	800160a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006a0:	2028      	movs	r0, #40	; 0x28
 80006a2:	f000 ffce 	bl	8001642 <HAL_NVIC_EnableIRQ>

}
 80006a6:	bf00      	nop
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40010c00 	.word	0x40010c00
 80006bc:	40011000 	.word	0x40011000
 80006c0:	40011400 	.word	0x40011400
 80006c4:	10110000 	.word	0x10110000

080006c8 <StartXbeeTask>:
=======
 8001d28:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001d2c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4817      	ldr	r0, [pc, #92]	; (8001da0 <MX_GPIO_Init+0x1b8>)
 8001d42:	f001 faa9 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d46:	2304      	movs	r3, #4
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4811      	ldr	r0, [pc, #68]	; (8001da4 <MX_GPIO_Init+0x1bc>)
 8001d5e:	f001 fa9b 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d62:	2340      	movs	r3, #64	; 0x40
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4619      	mov	r1, r3
 8001d74:	4809      	ldr	r0, [pc, #36]	; (8001d9c <MX_GPIO_Init+0x1b4>)
 8001d76:	f001 fa8f 	bl	8003298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	2028      	movs	r0, #40	; 0x28
 8001d80:	f001 fa5f 	bl	8003242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d84:	2028      	movs	r0, #40	; 0x28
 8001d86:	f001 fa78 	bl	800327a <HAL_NVIC_EnableIRQ>

}
 8001d8a:	bf00      	nop
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010800 	.word	0x40010800
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	40011000 	.word	0x40011000
 8001da4:	40011400 	.word	0x40011400
 8001da8:	10110000 	.word	0x10110000

08001dac <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8001db0:	2014      	movs	r0, #20
 8001db2:	f001 f96d 	bl	8003090 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dbc:	4868      	ldr	r0, [pc, #416]	; (8001f60 <commandToLCD+0x1b4>)
 8001dbe:	f001 fc06 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dc8:	4865      	ldr	r0, [pc, #404]	; (8001f60 <commandToLCD+0x1b4>)
 8001dca:	f001 fc00 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd4:	4862      	ldr	r0, [pc, #392]	; (8001f60 <commandToLCD+0x1b4>)
 8001dd6:	f001 fbfa 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de0:	4860      	ldr	r0, [pc, #384]	; (8001f64 <commandToLCD+0x1b8>)
 8001de2:	f001 fbf4 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dec:	485d      	ldr	r0, [pc, #372]	; (8001f64 <commandToLCD+0x1b8>)
 8001dee:	f001 fbee 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8001df2:	2200      	movs	r2, #0
 8001df4:	2140      	movs	r1, #64	; 0x40
 8001df6:	485b      	ldr	r0, [pc, #364]	; (8001f64 <commandToLCD+0x1b8>)
 8001df8:	f001 fbe9 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	4858      	ldr	r0, [pc, #352]	; (8001f64 <commandToLCD+0x1b8>)
 8001e02:	f001 fbe4 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8001e06:	2201      	movs	r2, #1
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	4857      	ldr	r0, [pc, #348]	; (8001f68 <commandToLCD+0x1bc>)
 8001e0c:	f001 fbdf 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e16:	4854      	ldr	r0, [pc, #336]	; (8001f68 <commandToLCD+0x1bc>)
 8001e18:	f001 fbd9 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e22:	4851      	ldr	r0, [pc, #324]	; (8001f68 <commandToLCD+0x1bc>)
 8001e24:	f001 fbd3 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e2e:	484e      	ldr	r0, [pc, #312]	; (8001f68 <commandToLCD+0x1bc>)
 8001e30:	f001 fbcd 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e3a:	4849      	ldr	r0, [pc, #292]	; (8001f60 <commandToLCD+0x1b4>)
 8001e3c:	f001 fbc7 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001e40:	2005      	movs	r0, #5
 8001e42:	f001 f925 	bl	8003090 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e46:	2201      	movs	r2, #1
 8001e48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e4c:	4844      	ldr	r0, [pc, #272]	; (8001f60 <commandToLCD+0x1b4>)
 8001e4e:	f001 fbbe 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8001e52:	2201      	movs	r2, #1
 8001e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e58:	4842      	ldr	r0, [pc, #264]	; (8001f64 <commandToLCD+0x1b8>)
 8001e5a:	f001 fbb8 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e64:	483f      	ldr	r0, [pc, #252]	; (8001f64 <commandToLCD+0x1b8>)
 8001e66:	f001 fbb2 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	483d      	ldr	r0, [pc, #244]	; (8001f64 <commandToLCD+0x1b8>)
 8001e70:	f001 fbad 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001e74:	2201      	movs	r2, #1
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	483a      	ldr	r0, [pc, #232]	; (8001f64 <commandToLCD+0x1b8>)
 8001e7a:	f001 fba8 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	4839      	ldr	r0, [pc, #228]	; (8001f68 <commandToLCD+0x1bc>)
 8001e84:	f001 fba3 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e8e:	4836      	ldr	r0, [pc, #216]	; (8001f68 <commandToLCD+0x1bc>)
 8001e90:	f001 fb9d 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e9a:	4833      	ldr	r0, [pc, #204]	; (8001f68 <commandToLCD+0x1bc>)
 8001e9c:	f001 fb97 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ea6:	4830      	ldr	r0, [pc, #192]	; (8001f68 <commandToLCD+0x1bc>)
 8001ea8:	f001 fb91 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb2:	482b      	ldr	r0, [pc, #172]	; (8001f60 <commandToLCD+0x1b4>)
 8001eb4:	f001 fb8b 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001eb8:	2005      	movs	r0, #5
 8001eba:	f001 f8e9 	bl	8003090 <HAL_Delay>


	clear();
 8001ebe:	f000 f927 	bl	8002110 <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec8:	4825      	ldr	r0, [pc, #148]	; (8001f60 <commandToLCD+0x1b4>)
 8001eca:	f001 fb80 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed4:	4823      	ldr	r0, [pc, #140]	; (8001f64 <commandToLCD+0x1b8>)
 8001ed6:	f001 fb7a 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee0:	4820      	ldr	r0, [pc, #128]	; (8001f64 <commandToLCD+0x1b8>)
 8001ee2:	f001 fb74 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	2140      	movs	r1, #64	; 0x40
 8001eea:	481e      	ldr	r0, [pc, #120]	; (8001f64 <commandToLCD+0x1b8>)
 8001eec:	f001 fb6f 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	481b      	ldr	r0, [pc, #108]	; (8001f64 <commandToLCD+0x1b8>)
 8001ef6:	f001 fb6a 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001efa:	2200      	movs	r2, #0
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	481a      	ldr	r0, [pc, #104]	; (8001f68 <commandToLCD+0x1bc>)
 8001f00:	f001 fb65 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001f04:	2200      	movs	r2, #0
 8001f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f0a:	4817      	ldr	r0, [pc, #92]	; (8001f68 <commandToLCD+0x1bc>)
 8001f0c:	f001 fb5f 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f16:	4814      	ldr	r0, [pc, #80]	; (8001f68 <commandToLCD+0x1bc>)
 8001f18:	f001 fb59 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f22:	4811      	ldr	r0, [pc, #68]	; (8001f68 <commandToLCD+0x1bc>)
 8001f24:	f001 fb53 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f2e:	480c      	ldr	r0, [pc, #48]	; (8001f60 <commandToLCD+0x1b4>)
 8001f30:	f001 fb4d 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001f34:	2005      	movs	r0, #5
 8001f36:	f001 f8ab 	bl	8003090 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f40:	4807      	ldr	r0, [pc, #28]	; (8001f60 <commandToLCD+0x1b4>)
 8001f42:	f001 fb44 	bl	80035ce <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 8001f46:	bf00      	nop
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4806      	ldr	r0, [pc, #24]	; (8001f68 <commandToLCD+0x1bc>)
 8001f4e:	f001 fb27 	bl	80035a0 <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d0f7      	beq.n	8001f48 <commandToLCD+0x19c>
	{}
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40010c00 	.word	0x40010c00
 8001f64:	40011000 	.word	0x40011000
 8001f68:	40010800 	.word	0x40010800

08001f6c <printPassword>:
void printPassword(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8001f70:	2201      	movs	r2, #1
 8001f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f76:	4813      	ldr	r0, [pc, #76]	; (8001fc4 <printPassword+0x58>)
 8001f78:	f001 fb29 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f82:	4810      	ldr	r0, [pc, #64]	; (8001fc4 <printPassword+0x58>)
 8001f84:	f001 fb23 	bl	80035ce <HAL_GPIO_WritePin>
	letter('P');
 8001f88:	2050      	movs	r0, #80	; 0x50
 8001f8a:	f7fe f8e1 	bl	8000150 <letter>
	letter('a');
 8001f8e:	2061      	movs	r0, #97	; 0x61
 8001f90:	f7fe f8de 	bl	8000150 <letter>
	letter('s');
 8001f94:	2073      	movs	r0, #115	; 0x73
 8001f96:	f7fe f8db 	bl	8000150 <letter>
	letter('s');
 8001f9a:	2073      	movs	r0, #115	; 0x73
 8001f9c:	f7fe f8d8 	bl	8000150 <letter>
	letter('w');
 8001fa0:	2077      	movs	r0, #119	; 0x77
 8001fa2:	f7fe f8d5 	bl	8000150 <letter>
	letter('o');
 8001fa6:	206f      	movs	r0, #111	; 0x6f
 8001fa8:	f7fe f8d2 	bl	8000150 <letter>
	letter('r');
 8001fac:	2072      	movs	r0, #114	; 0x72
 8001fae:	f7fe f8cf 	bl	8000150 <letter>
	letter('d');
 8001fb2:	2064      	movs	r0, #100	; 0x64
 8001fb4:	f7fe f8cc 	bl	8000150 <letter>
	letter(':');
 8001fb8:	203a      	movs	r0, #58	; 0x3a
 8001fba:	f7fe f8c9 	bl	8000150 <letter>
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40010c00 	.word	0x40010c00

08001fc8 <line1>:
void line1(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd2:	4823      	ldr	r0, [pc, #140]	; (8002060 <line1+0x98>)
 8001fd4:	f001 fafb 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fde:	4820      	ldr	r0, [pc, #128]	; (8002060 <line1+0x98>)
 8001fe0:	f001 faf5 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	481d      	ldr	r0, [pc, #116]	; (8002060 <line1+0x98>)
 8001fec:	f001 faef 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff6:	481b      	ldr	r0, [pc, #108]	; (8002064 <line1+0x9c>)
 8001ff8:	f001 fae9 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002002:	4818      	ldr	r0, [pc, #96]	; (8002064 <line1+0x9c>)
 8002004:	f001 fae3 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002008:	2200      	movs	r2, #0
 800200a:	2140      	movs	r1, #64	; 0x40
 800200c:	4815      	ldr	r0, [pc, #84]	; (8002064 <line1+0x9c>)
 800200e:	f001 fade 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002012:	2200      	movs	r2, #0
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	4813      	ldr	r0, [pc, #76]	; (8002064 <line1+0x9c>)
 8002018:	f001 fad9 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800201c:	2200      	movs	r2, #0
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	4811      	ldr	r0, [pc, #68]	; (8002068 <line1+0xa0>)
 8002022:	f001 fad4 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202c:	480e      	ldr	r0, [pc, #56]	; (8002068 <line1+0xa0>)
 800202e:	f001 face 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	480b      	ldr	r0, [pc, #44]	; (8002068 <line1+0xa0>)
 800203a:	f001 fac8 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	4808      	ldr	r0, [pc, #32]	; (8002068 <line1+0xa0>)
 8002046:	f001 fac2 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <line1+0x98>)
 8002052:	f001 fabc 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002056:	2005      	movs	r0, #5
 8002058:	f001 f81a 	bl	8003090 <HAL_Delay>
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40010c00 	.word	0x40010c00
 8002064:	40011000 	.word	0x40011000
 8002068:	40010800 	.word	0x40010800

0800206c <line2>:
void line2(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002070:	2200      	movs	r2, #0
 8002072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002076:	4823      	ldr	r0, [pc, #140]	; (8002104 <line2+0x98>)
 8002078:	f001 faa9 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002082:	4820      	ldr	r0, [pc, #128]	; (8002104 <line2+0x98>)
 8002084:	f001 faa3 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208e:	481d      	ldr	r0, [pc, #116]	; (8002104 <line2+0x98>)
 8002090:	f001 fa9d 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209a:	481b      	ldr	r0, [pc, #108]	; (8002108 <line2+0x9c>)
 800209c:	f001 fa97 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a6:	4818      	ldr	r0, [pc, #96]	; (8002108 <line2+0x9c>)
 80020a8:	f001 fa91 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80020ac:	2200      	movs	r2, #0
 80020ae:	2140      	movs	r1, #64	; 0x40
 80020b0:	4815      	ldr	r0, [pc, #84]	; (8002108 <line2+0x9c>)
 80020b2:	f001 fa8c 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80020b6:	2200      	movs	r2, #0
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	4813      	ldr	r0, [pc, #76]	; (8002108 <line2+0x9c>)
 80020bc:	f001 fa87 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80020c0:	2200      	movs	r2, #0
 80020c2:	2180      	movs	r1, #128	; 0x80
 80020c4:	4811      	ldr	r0, [pc, #68]	; (800210c <line2+0xa0>)
 80020c6:	f001 fa82 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d0:	480e      	ldr	r0, [pc, #56]	; (800210c <line2+0xa0>)
 80020d2:	f001 fa7c 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80020d6:	2201      	movs	r2, #1
 80020d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020dc:	480b      	ldr	r0, [pc, #44]	; (800210c <line2+0xa0>)
 80020de:	f001 fa76 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 80020e2:	2201      	movs	r2, #1
 80020e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e8:	4808      	ldr	r0, [pc, #32]	; (800210c <line2+0xa0>)
 80020ea:	f001 fa70 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020f4:	4803      	ldr	r0, [pc, #12]	; (8002104 <line2+0x98>)
 80020f6:	f001 fa6a 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80020fa:	2005      	movs	r0, #5
 80020fc:	f000 ffc8 	bl	8003090 <HAL_Delay>
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40010c00 	.word	0x40010c00
 8002108:	40011000 	.word	0x40011000
 800210c:	40010800 	.word	0x40010800

08002110 <clear>:
void clear()
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002114:	2200      	movs	r2, #0
 8002116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800211a:	4823      	ldr	r0, [pc, #140]	; (80021a8 <clear+0x98>)
 800211c:	f001 fa57 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002120:	2200      	movs	r2, #0
 8002122:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002126:	4820      	ldr	r0, [pc, #128]	; (80021a8 <clear+0x98>)
 8002128:	f001 fa51 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800212c:	2201      	movs	r2, #1
 800212e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002132:	481d      	ldr	r0, [pc, #116]	; (80021a8 <clear+0x98>)
 8002134:	f001 fa4b 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 8002138:	2201      	movs	r2, #1
 800213a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800213e:	481b      	ldr	r0, [pc, #108]	; (80021ac <clear+0x9c>)
 8002140:	f001 fa45 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214a:	4818      	ldr	r0, [pc, #96]	; (80021ac <clear+0x9c>)
 800214c:	f001 fa3f 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002150:	2200      	movs	r2, #0
 8002152:	2140      	movs	r1, #64	; 0x40
 8002154:	4815      	ldr	r0, [pc, #84]	; (80021ac <clear+0x9c>)
 8002156:	f001 fa3a 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800215a:	2200      	movs	r2, #0
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	4813      	ldr	r0, [pc, #76]	; (80021ac <clear+0x9c>)
 8002160:	f001 fa35 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002164:	2200      	movs	r2, #0
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	4811      	ldr	r0, [pc, #68]	; (80021b0 <clear+0xa0>)
 800216a:	f001 fa30 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800216e:	2200      	movs	r2, #0
 8002170:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002174:	480e      	ldr	r0, [pc, #56]	; (80021b0 <clear+0xa0>)
 8002176:	f001 fa2a 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800217a:	2200      	movs	r2, #0
 800217c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <clear+0xa0>)
 8002182:	f001 fa24 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800218c:	4808      	ldr	r0, [pc, #32]	; (80021b0 <clear+0xa0>)
 800218e:	f001 fa1e 	bl	80035ce <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002192:	2200      	movs	r2, #0
 8002194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002198:	4803      	ldr	r0, [pc, #12]	; (80021a8 <clear+0x98>)
 800219a:	f001 fa18 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800219e:	2005      	movs	r0, #5
 80021a0:	f000 ff76 	bl	8003090 <HAL_Delay>
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40010c00 	.word	0x40010c00
 80021ac:	40011000 	.word	0x40011000
 80021b0:	40010800 	.word	0x40010800

080021b4 <correct>:
void correct()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80021b8:	2201      	movs	r2, #1
 80021ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021be:	4811      	ldr	r0, [pc, #68]	; (8002204 <correct+0x50>)
 80021c0:	f001 fa05 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80021c4:	2200      	movs	r2, #0
 80021c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ca:	480e      	ldr	r0, [pc, #56]	; (8002204 <correct+0x50>)
 80021cc:	f001 f9ff 	bl	80035ce <HAL_GPIO_WritePin>
	letter('C');
 80021d0:	2043      	movs	r0, #67	; 0x43
 80021d2:	f7fd ffbd 	bl	8000150 <letter>
	letter('o');
 80021d6:	206f      	movs	r0, #111	; 0x6f
 80021d8:	f7fd ffba 	bl	8000150 <letter>
	letter('r');
 80021dc:	2072      	movs	r0, #114	; 0x72
 80021de:	f7fd ffb7 	bl	8000150 <letter>
	letter('r');
 80021e2:	2072      	movs	r0, #114	; 0x72
 80021e4:	f7fd ffb4 	bl	8000150 <letter>
	letter('e');
 80021e8:	2065      	movs	r0, #101	; 0x65
 80021ea:	f7fd ffb1 	bl	8000150 <letter>
	letter('c');
 80021ee:	2063      	movs	r0, #99	; 0x63
 80021f0:	f7fd ffae 	bl	8000150 <letter>
	letter('t');
 80021f4:	2074      	movs	r0, #116	; 0x74
 80021f6:	f7fd ffab 	bl	8000150 <letter>
	letter('!');
 80021fa:	2021      	movs	r0, #33	; 0x21
 80021fc:	f7fd ffa8 	bl	8000150 <letter>
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40010c00 	.word	0x40010c00

08002208 <getVal>:
int getVal(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
	int count = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
	int val=0;
 8002212:	2300      	movs	r3, #0
 8002214:	603b      	str	r3, [r7, #0]
	while(count<1)
 8002216:	e165      	b.n	80024e4 <getVal+0x2dc>
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 8002218:	2201      	movs	r2, #1
 800221a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221e:	48b6      	ldr	r0, [pc, #728]	; (80024f8 <getVal+0x2f0>)
 8002220:	f001 f9d5 	bl	80035ce <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002224:	2104      	movs	r1, #4
 8002226:	48b5      	ldr	r0, [pc, #724]	; (80024fc <getVal+0x2f4>)
 8002228:	f001 f9ba 	bl	80035a0 <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	2b01      	cmp	r3, #1
 8002230:	d112      	bne.n	8002258 <getVal+0x50>
	  {
		  letter('1');
 8002232:	2031      	movs	r0, #49	; 0x31
 8002234:	f7fd ff8c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002238:	bf00      	nop
 800223a:	2104      	movs	r1, #4
 800223c:	48af      	ldr	r0, [pc, #700]	; (80024fc <getVal+0x2f4>)
 800223e:	f001 f9af 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b01      	cmp	r3, #1
 8002246:	d0f8      	beq.n	800223a <getVal+0x32>
		  {}
		  HAL_Delay(100);
 8002248:	2064      	movs	r0, #100	; 0x64
 800224a:	f000 ff21 	bl	8003090 <HAL_Delay>
		  val = 1;
 800224e:	2301      	movs	r3, #1
 8002250:	603b      	str	r3, [r7, #0]
		  count++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3301      	adds	r3, #1
 8002256:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002258:	2102      	movs	r1, #2
 800225a:	48a8      	ldr	r0, [pc, #672]	; (80024fc <getVal+0x2f4>)
 800225c:	f001 f9a0 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002260:	4603      	mov	r3, r0
 8002262:	2b01      	cmp	r3, #1
 8002264:	d112      	bne.n	800228c <getVal+0x84>
	  {
		  letter('2');
 8002266:	2032      	movs	r0, #50	; 0x32
 8002268:	f7fd ff72 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800226c:	bf00      	nop
 800226e:	2102      	movs	r1, #2
 8002270:	48a2      	ldr	r0, [pc, #648]	; (80024fc <getVal+0x2f4>)
 8002272:	f001 f995 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	d0f8      	beq.n	800226e <getVal+0x66>
		  {}
		  HAL_Delay(100);
 800227c:	2064      	movs	r0, #100	; 0x64
 800227e:	f000 ff07 	bl	8003090 <HAL_Delay>
		  val = 2;
 8002282:	2302      	movs	r3, #2
 8002284:	603b      	str	r3, [r7, #0]
		  count++;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3301      	adds	r3, #1
 800228a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800228c:	2101      	movs	r1, #1
 800228e:	489b      	ldr	r0, [pc, #620]	; (80024fc <getVal+0x2f4>)
 8002290:	f001 f986 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002294:	4603      	mov	r3, r0
 8002296:	2b01      	cmp	r3, #1
 8002298:	d112      	bne.n	80022c0 <getVal+0xb8>
	  {
		  letter('3');
 800229a:	2033      	movs	r0, #51	; 0x33
 800229c:	f7fd ff58 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80022a0:	bf00      	nop
 80022a2:	2101      	movs	r1, #1
 80022a4:	4895      	ldr	r0, [pc, #596]	; (80024fc <getVal+0x2f4>)
 80022a6:	f001 f97b 	bl	80035a0 <HAL_GPIO_ReadPin>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d0f8      	beq.n	80022a2 <getVal+0x9a>
		  {}
		  HAL_Delay(100);
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	f000 feed 	bl	8003090 <HAL_Delay>
		  val = 3;
 80022b6:	2303      	movs	r3, #3
 80022b8:	603b      	str	r3, [r7, #0]
		  count++;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3301      	adds	r3, #1
 80022be:	607b      	str	r3, [r7, #4]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c6:	488c      	ldr	r0, [pc, #560]	; (80024f8 <getVal+0x2f0>)
 80022c8:	f001 f981 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 80022cc:	2201      	movs	r2, #1
 80022ce:	2104      	movs	r1, #4
 80022d0:	488b      	ldr	r0, [pc, #556]	; (8002500 <getVal+0x2f8>)
 80022d2:	f001 f97c 	bl	80035ce <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80022d6:	2104      	movs	r1, #4
 80022d8:	4888      	ldr	r0, [pc, #544]	; (80024fc <getVal+0x2f4>)
 80022da:	f001 f961 	bl	80035a0 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d112      	bne.n	800230a <getVal+0x102>
	  {
		  letter('4');
 80022e4:	2034      	movs	r0, #52	; 0x34
 80022e6:	f7fd ff33 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80022ea:	bf00      	nop
 80022ec:	2104      	movs	r1, #4
 80022ee:	4883      	ldr	r0, [pc, #524]	; (80024fc <getVal+0x2f4>)
 80022f0:	f001 f956 	bl	80035a0 <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d0f8      	beq.n	80022ec <getVal+0xe4>
		  {}
		  HAL_Delay(100);
 80022fa:	2064      	movs	r0, #100	; 0x64
 80022fc:	f000 fec8 	bl	8003090 <HAL_Delay>
		  val = 4;
 8002300:	2304      	movs	r3, #4
 8002302:	603b      	str	r3, [r7, #0]
		  count++;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3301      	adds	r3, #1
 8002308:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800230a:	2102      	movs	r1, #2
 800230c:	487b      	ldr	r0, [pc, #492]	; (80024fc <getVal+0x2f4>)
 800230e:	f001 f947 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	2b01      	cmp	r3, #1
 8002316:	d112      	bne.n	800233e <getVal+0x136>
	  {
		  letter('5');
 8002318:	2035      	movs	r0, #53	; 0x35
 800231a:	f7fd ff19 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800231e:	bf00      	nop
 8002320:	2102      	movs	r1, #2
 8002322:	4876      	ldr	r0, [pc, #472]	; (80024fc <getVal+0x2f4>)
 8002324:	f001 f93c 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d0f8      	beq.n	8002320 <getVal+0x118>
		  {}
		  HAL_Delay(100);
 800232e:	2064      	movs	r0, #100	; 0x64
 8002330:	f000 feae 	bl	8003090 <HAL_Delay>
		  val = 5;
 8002334:	2305      	movs	r3, #5
 8002336:	603b      	str	r3, [r7, #0]
		  count++;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3301      	adds	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800233e:	2101      	movs	r1, #1
 8002340:	486e      	ldr	r0, [pc, #440]	; (80024fc <getVal+0x2f4>)
 8002342:	f001 f92d 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b01      	cmp	r3, #1
 800234a:	d112      	bne.n	8002372 <getVal+0x16a>
	  {
		  letter('6');
 800234c:	2036      	movs	r0, #54	; 0x36
 800234e:	f7fd feff 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002352:	bf00      	nop
 8002354:	2101      	movs	r1, #1
 8002356:	4869      	ldr	r0, [pc, #420]	; (80024fc <getVal+0x2f4>)
 8002358:	f001 f922 	bl	80035a0 <HAL_GPIO_ReadPin>
 800235c:	4603      	mov	r3, r0
 800235e:	2b01      	cmp	r3, #1
 8002360:	d0f8      	beq.n	8002354 <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 8002362:	2064      	movs	r0, #100	; 0x64
 8002364:	f000 fe94 	bl	8003090 <HAL_Delay>
		  val = 6;
 8002368:	2306      	movs	r3, #6
 800236a:	603b      	str	r3, [r7, #0]
		  count++;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3301      	adds	r3, #1
 8002370:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002372:	2200      	movs	r2, #0
 8002374:	2104      	movs	r1, #4
 8002376:	4862      	ldr	r0, [pc, #392]	; (8002500 <getVal+0x2f8>)
 8002378:	f001 f929 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002382:	485d      	ldr	r0, [pc, #372]	; (80024f8 <getVal+0x2f0>)
 8002384:	f001 f923 	bl	80035ce <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002388:	2104      	movs	r1, #4
 800238a:	485c      	ldr	r0, [pc, #368]	; (80024fc <getVal+0x2f4>)
 800238c:	f001 f908 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002390:	4603      	mov	r3, r0
 8002392:	2b01      	cmp	r3, #1
 8002394:	d112      	bne.n	80023bc <getVal+0x1b4>
	  {
		  letter('7');
 8002396:	2037      	movs	r0, #55	; 0x37
 8002398:	f7fd feda 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800239c:	bf00      	nop
 800239e:	2104      	movs	r1, #4
 80023a0:	4856      	ldr	r0, [pc, #344]	; (80024fc <getVal+0x2f4>)
 80023a2:	f001 f8fd 	bl	80035a0 <HAL_GPIO_ReadPin>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d0f8      	beq.n	800239e <getVal+0x196>
		  {}
		  HAL_Delay(100);
 80023ac:	2064      	movs	r0, #100	; 0x64
 80023ae:	f000 fe6f 	bl	8003090 <HAL_Delay>
		  val = 7;
 80023b2:	2307      	movs	r3, #7
 80023b4:	603b      	str	r3, [r7, #0]
		  count++;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3301      	adds	r3, #1
 80023ba:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80023bc:	2102      	movs	r1, #2
 80023be:	484f      	ldr	r0, [pc, #316]	; (80024fc <getVal+0x2f4>)
 80023c0:	f001 f8ee 	bl	80035a0 <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d112      	bne.n	80023f0 <getVal+0x1e8>
	  {
		  letter('8');
 80023ca:	2038      	movs	r0, #56	; 0x38
 80023cc:	f7fd fec0 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80023d0:	bf00      	nop
 80023d2:	2102      	movs	r1, #2
 80023d4:	4849      	ldr	r0, [pc, #292]	; (80024fc <getVal+0x2f4>)
 80023d6:	f001 f8e3 	bl	80035a0 <HAL_GPIO_ReadPin>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d0f8      	beq.n	80023d2 <getVal+0x1ca>
		  {}
		  HAL_Delay(100);
 80023e0:	2064      	movs	r0, #100	; 0x64
 80023e2:	f000 fe55 	bl	8003090 <HAL_Delay>
		  val = 8;
 80023e6:	2308      	movs	r3, #8
 80023e8:	603b      	str	r3, [r7, #0]
		  count++;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3301      	adds	r3, #1
 80023ee:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80023f0:	2101      	movs	r1, #1
 80023f2:	4842      	ldr	r0, [pc, #264]	; (80024fc <getVal+0x2f4>)
 80023f4:	f001 f8d4 	bl	80035a0 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d112      	bne.n	8002424 <getVal+0x21c>
	  {
		  letter('9');
 80023fe:	2039      	movs	r0, #57	; 0x39
 8002400:	f7fd fea6 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002404:	bf00      	nop
 8002406:	2101      	movs	r1, #1
 8002408:	483c      	ldr	r0, [pc, #240]	; (80024fc <getVal+0x2f4>)
 800240a:	f001 f8c9 	bl	80035a0 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d0f8      	beq.n	8002406 <getVal+0x1fe>
		  {}
		  HAL_Delay(100);
 8002414:	2064      	movs	r0, #100	; 0x64
 8002416:	f000 fe3b 	bl	8003090 <HAL_Delay>
		  val = 9;
 800241a:	2309      	movs	r3, #9
 800241c:	603b      	str	r3, [r7, #0]
		  count++;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3301      	adds	r3, #1
 8002422:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800242a:	4833      	ldr	r0, [pc, #204]	; (80024f8 <getVal+0x2f0>)
 800242c:	f001 f8cf 	bl	80035ce <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 8002430:	2201      	movs	r2, #1
 8002432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002436:	4830      	ldr	r0, [pc, #192]	; (80024f8 <getVal+0x2f0>)
 8002438:	f001 f8c9 	bl	80035ce <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 800243c:	2104      	movs	r1, #4
 800243e:	482f      	ldr	r0, [pc, #188]	; (80024fc <getVal+0x2f4>)
 8002440:	f001 f8ae 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002444:	4603      	mov	r3, r0
 8002446:	2b01      	cmp	r3, #1
 8002448:	d112      	bne.n	8002470 <getVal+0x268>
	  {
		  letter('*');
 800244a:	202a      	movs	r0, #42	; 0x2a
 800244c:	f7fd fe80 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002450:	bf00      	nop
 8002452:	2104      	movs	r1, #4
 8002454:	4829      	ldr	r0, [pc, #164]	; (80024fc <getVal+0x2f4>)
 8002456:	f001 f8a3 	bl	80035a0 <HAL_GPIO_ReadPin>
 800245a:	4603      	mov	r3, r0
 800245c:	2b01      	cmp	r3, #1
 800245e:	d0f8      	beq.n	8002452 <getVal+0x24a>
		  {}
		  HAL_Delay(100);
 8002460:	2064      	movs	r0, #100	; 0x64
 8002462:	f000 fe15 	bl	8003090 <HAL_Delay>
		  val = 10;
 8002466:	230a      	movs	r3, #10
 8002468:	603b      	str	r3, [r7, #0]
		  count++;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3301      	adds	r3, #1
 800246e:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002470:	2102      	movs	r1, #2
 8002472:	4822      	ldr	r0, [pc, #136]	; (80024fc <getVal+0x2f4>)
 8002474:	f001 f894 	bl	80035a0 <HAL_GPIO_ReadPin>
 8002478:	4603      	mov	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d112      	bne.n	80024a4 <getVal+0x29c>
	  {
		  letter('0');
 800247e:	2030      	movs	r0, #48	; 0x30
 8002480:	f7fd fe66 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002484:	bf00      	nop
 8002486:	2102      	movs	r1, #2
 8002488:	481c      	ldr	r0, [pc, #112]	; (80024fc <getVal+0x2f4>)
 800248a:	f001 f889 	bl	80035a0 <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d0f8      	beq.n	8002486 <getVal+0x27e>
		  {}
		  HAL_Delay(100);
 8002494:	2064      	movs	r0, #100	; 0x64
 8002496:	f000 fdfb 	bl	8003090 <HAL_Delay>
		  val = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
		  count++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3301      	adds	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80024a4:	2101      	movs	r1, #1
 80024a6:	4815      	ldr	r0, [pc, #84]	; (80024fc <getVal+0x2f4>)
 80024a8:	f001 f87a 	bl	80035a0 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d112      	bne.n	80024d8 <getVal+0x2d0>
	  {
		  letter('#');
 80024b2:	2023      	movs	r0, #35	; 0x23
 80024b4:	f7fd fe4c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80024b8:	bf00      	nop
 80024ba:	2101      	movs	r1, #1
 80024bc:	480f      	ldr	r0, [pc, #60]	; (80024fc <getVal+0x2f4>)
 80024be:	f001 f86f 	bl	80035a0 <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d0f8      	beq.n	80024ba <getVal+0x2b2>
		  {}
		  HAL_Delay(100);
 80024c8:	2064      	movs	r0, #100	; 0x64
 80024ca:	f000 fde1 	bl	8003090 <HAL_Delay>
		  val = 11;
 80024ce:	230b      	movs	r3, #11
 80024d0:	603b      	str	r3, [r7, #0]
		  count++;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3301      	adds	r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 80024d8:	2200      	movs	r2, #0
 80024da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <getVal+0x2f0>)
 80024e0:	f001 f875 	bl	80035ce <HAL_GPIO_WritePin>
	while(count<1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f77f ae96 	ble.w	8002218 <getVal+0x10>
	}
	return val;
 80024ec:	683b      	ldr	r3, [r7, #0]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40011000 	.word	0x40011000
 80024fc:	40010c00 	.word	0x40010c00
 8002500:	40011400 	.word	0x40011400

08002504 <wrongPass>:
void wrongPass(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002508:	2201      	movs	r2, #1
 800250a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800250e:	481a      	ldr	r0, [pc, #104]	; (8002578 <wrongPass+0x74>)
 8002510:	f001 f85d 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002514:	2200      	movs	r2, #0
 8002516:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800251a:	4817      	ldr	r0, [pc, #92]	; (8002578 <wrongPass+0x74>)
 800251c:	f001 f857 	bl	80035ce <HAL_GPIO_WritePin>
	letter('W');
 8002520:	2057      	movs	r0, #87	; 0x57
 8002522:	f7fd fe15 	bl	8000150 <letter>
	letter('r');
 8002526:	2072      	movs	r0, #114	; 0x72
 8002528:	f7fd fe12 	bl	8000150 <letter>
	letter('o');
 800252c:	206f      	movs	r0, #111	; 0x6f
 800252e:	f7fd fe0f 	bl	8000150 <letter>
	letter('n');
 8002532:	206e      	movs	r0, #110	; 0x6e
 8002534:	f7fd fe0c 	bl	8000150 <letter>
	letter('g');
 8002538:	2067      	movs	r0, #103	; 0x67
 800253a:	f7fd fe09 	bl	8000150 <letter>
	letter(' ');
 800253e:	2020      	movs	r0, #32
 8002540:	f7fd fe06 	bl	8000150 <letter>
	letter('P');
 8002544:	2050      	movs	r0, #80	; 0x50
 8002546:	f7fd fe03 	bl	8000150 <letter>
	letter('a');
 800254a:	2061      	movs	r0, #97	; 0x61
 800254c:	f7fd fe00 	bl	8000150 <letter>
	letter('s');
 8002550:	2073      	movs	r0, #115	; 0x73
 8002552:	f7fd fdfd 	bl	8000150 <letter>
	letter('s');
 8002556:	2073      	movs	r0, #115	; 0x73
 8002558:	f7fd fdfa 	bl	8000150 <letter>
	letter('w');
 800255c:	2077      	movs	r0, #119	; 0x77
 800255e:	f7fd fdf7 	bl	8000150 <letter>
	letter('o');
 8002562:	206f      	movs	r0, #111	; 0x6f
 8002564:	f7fd fdf4 	bl	8000150 <letter>
	letter('r');
 8002568:	2072      	movs	r0, #114	; 0x72
 800256a:	f7fd fdf1 	bl	8000150 <letter>
	letter('d');
 800256e:	2064      	movs	r0, #100	; 0x64
 8002570:	f7fd fdee 	bl	8000150 <letter>
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40010c00 	.word	0x40010c00

0800257c <green>:
void green(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002580:	2201      	movs	r2, #1
 8002582:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <green+0x5c>)
 8002588:	f001 f821 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002592:	4811      	ldr	r0, [pc, #68]	; (80025d8 <green+0x5c>)
 8002594:	f001 f81b 	bl	80035ce <HAL_GPIO_WritePin>
	letter('G');
 8002598:	2047      	movs	r0, #71	; 0x47
 800259a:	f7fd fdd9 	bl	8000150 <letter>
	letter('r');
 800259e:	2072      	movs	r0, #114	; 0x72
 80025a0:	f7fd fdd6 	bl	8000150 <letter>
	letter('e');
 80025a4:	2065      	movs	r0, #101	; 0x65
 80025a6:	f7fd fdd3 	bl	8000150 <letter>
	letter('e');
 80025aa:	2065      	movs	r0, #101	; 0x65
 80025ac:	f7fd fdd0 	bl	8000150 <letter>
	letter('n');
 80025b0:	206e      	movs	r0, #110	; 0x6e
 80025b2:	f7fd fdcd 	bl	8000150 <letter>
	letter(' ');
 80025b6:	2020      	movs	r0, #32
 80025b8:	f7fd fdca 	bl	8000150 <letter>
	letter('1');
 80025bc:	2031      	movs	r0, #49	; 0x31
 80025be:	f7fd fdc7 	bl	8000150 <letter>
	letter('-');
 80025c2:	202d      	movs	r0, #45	; 0x2d
 80025c4:	f7fd fdc4 	bl	8000150 <letter>
	letter('3');
 80025c8:	2033      	movs	r0, #51	; 0x33
 80025ca:	f7fd fdc1 	bl	8000150 <letter>
	letter(':');
 80025ce:	203a      	movs	r0, #58	; 0x3a
 80025d0:	f7fd fdbe 	bl	8000150 <letter>

}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40010c00 	.word	0x40010c00

080025dc <timer>:

void timer(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80025e0:	2201      	movs	r2, #1
 80025e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e6:	481a      	ldr	r0, [pc, #104]	; (8002650 <timer+0x74>)
 80025e8:	f000 fff1 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80025ec:	2200      	movs	r2, #0
 80025ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f2:	4817      	ldr	r0, [pc, #92]	; (8002650 <timer+0x74>)
 80025f4:	f000 ffeb 	bl	80035ce <HAL_GPIO_WritePin>

	letter('T');
 80025f8:	2054      	movs	r0, #84	; 0x54
 80025fa:	f7fd fda9 	bl	8000150 <letter>
	letter('i');
 80025fe:	2069      	movs	r0, #105	; 0x69
 8002600:	f7fd fda6 	bl	8000150 <letter>
	letter('m');
 8002604:	206d      	movs	r0, #109	; 0x6d
 8002606:	f7fd fda3 	bl	8000150 <letter>
	letter('e');
 800260a:	2065      	movs	r0, #101	; 0x65
 800260c:	f7fd fda0 	bl	8000150 <letter>
	letter(' ');
 8002610:	2020      	movs	r0, #32
 8002612:	f7fd fd9d 	bl	8000150 <letter>
	letter('0');
 8002616:	2030      	movs	r0, #48	; 0x30
 8002618:	f7fd fd9a 	bl	8000150 <letter>
	letter('0');
 800261c:	2030      	movs	r0, #48	; 0x30
 800261e:	f7fd fd97 	bl	8000150 <letter>
	letter('-');
 8002622:	202d      	movs	r0, #45	; 0x2d
 8002624:	f7fd fd94 	bl	8000150 <letter>
	letter('6');
 8002628:	2036      	movs	r0, #54	; 0x36
 800262a:	f7fd fd91 	bl	8000150 <letter>
	letter('0');
 800262e:	2030      	movs	r0, #48	; 0x30
 8002630:	f7fd fd8e 	bl	8000150 <letter>
	letter('m');
 8002634:	206d      	movs	r0, #109	; 0x6d
 8002636:	f7fd fd8b 	bl	8000150 <letter>
	letter('i');
 800263a:	2069      	movs	r0, #105	; 0x69
 800263c:	f7fd fd88 	bl	8000150 <letter>
	letter('n');
 8002640:	206e      	movs	r0, #110	; 0x6e
 8002642:	f7fd fd85 	bl	8000150 <letter>
	letter(':');
 8002646:	203a      	movs	r0, #58	; 0x3a
 8002648:	f7fd fd82 	bl	8000150 <letter>

}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40010c00 	.word	0x40010c00

08002654 <quit>:

void quit(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265e:	481d      	ldr	r0, [pc, #116]	; (80026d4 <quit+0x80>)
 8002660:	f000 ffb5 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002664:	2200      	movs	r2, #0
 8002666:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800266a:	481a      	ldr	r0, [pc, #104]	; (80026d4 <quit+0x80>)
 800266c:	f000 ffaf 	bl	80035ce <HAL_GPIO_WritePin>

	letter('Q');
 8002670:	2051      	movs	r0, #81	; 0x51
 8002672:	f7fd fd6d 	bl	8000150 <letter>
	letter('u');
 8002676:	2075      	movs	r0, #117	; 0x75
 8002678:	f7fd fd6a 	bl	8000150 <letter>
	letter('i');
 800267c:	2069      	movs	r0, #105	; 0x69
 800267e:	f7fd fd67 	bl	8000150 <letter>
	letter('t');
 8002682:	2074      	movs	r0, #116	; 0x74
 8002684:	f7fd fd64 	bl	8000150 <letter>
	letter('?');
 8002688:	203f      	movs	r0, #63	; 0x3f
 800268a:	f7fd fd61 	bl	8000150 <letter>
	letter(' ');
 800268e:	2020      	movs	r0, #32
 8002690:	f7fd fd5e 	bl	8000150 <letter>
	letter('y');
 8002694:	2079      	movs	r0, #121	; 0x79
 8002696:	f7fd fd5b 	bl	8000150 <letter>
	letter('e');
 800269a:	2065      	movs	r0, #101	; 0x65
 800269c:	f7fd fd58 	bl	8000150 <letter>
	letter('s');
 80026a0:	2073      	movs	r0, #115	; 0x73
 80026a2:	f7fd fd55 	bl	8000150 <letter>
	letter('-');
 80026a6:	202d      	movs	r0, #45	; 0x2d
 80026a8:	f7fd fd52 	bl	8000150 <letter>
	letter('1');
 80026ac:	2031      	movs	r0, #49	; 0x31
 80026ae:	f7fd fd4f 	bl	8000150 <letter>
	letter(' ');
 80026b2:	2020      	movs	r0, #32
 80026b4:	f7fd fd4c 	bl	8000150 <letter>
	letter('n');
 80026b8:	206e      	movs	r0, #110	; 0x6e
 80026ba:	f7fd fd49 	bl	8000150 <letter>
	letter('o');
 80026be:	206f      	movs	r0, #111	; 0x6f
 80026c0:	f7fd fd46 	bl	8000150 <letter>
	letter('-');
 80026c4:	202d      	movs	r0, #45	; 0x2d
 80026c6:	f7fd fd43 	bl	8000150 <letter>
	letter('0');
 80026ca:	2030      	movs	r0, #48	; 0x30
 80026cc:	f7fd fd40 	bl	8000150 <letter>
}
 80026d0:	bf00      	nop
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40010c00 	.word	0x40010c00

080026d8 <onOffTime>:
void onOffTime(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80026dc:	2201      	movs	r2, #1
 80026de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026e2:	481d      	ldr	r0, [pc, #116]	; (8002758 <onOffTime+0x80>)
 80026e4:	f000 ff73 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80026e8:	2200      	movs	r2, #0
 80026ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026ee:	481a      	ldr	r0, [pc, #104]	; (8002758 <onOffTime+0x80>)
 80026f0:	f000 ff6d 	bl	80035ce <HAL_GPIO_WritePin>
	letter('0');
 80026f4:	2030      	movs	r0, #48	; 0x30
 80026f6:	f7fd fd2b 	bl	8000150 <letter>
	letter('-');
 80026fa:	202d      	movs	r0, #45	; 0x2d
 80026fc:	f7fd fd28 	bl	8000150 <letter>
	letter('O');
 8002700:	204f      	movs	r0, #79	; 0x4f
 8002702:	f7fd fd25 	bl	8000150 <letter>
	letter('n');
 8002706:	206e      	movs	r0, #110	; 0x6e
 8002708:	f7fd fd22 	bl	8000150 <letter>
	letter('/');
 800270c:	202f      	movs	r0, #47	; 0x2f
 800270e:	f7fd fd1f 	bl	8000150 <letter>
	letter('O');
 8002712:	204f      	movs	r0, #79	; 0x4f
 8002714:	f7fd fd1c 	bl	8000150 <letter>
	letter('f');
 8002718:	2066      	movs	r0, #102	; 0x66
 800271a:	f7fd fd19 	bl	8000150 <letter>
	letter('f');
 800271e:	2066      	movs	r0, #102	; 0x66
 8002720:	f7fd fd16 	bl	8000150 <letter>
	letter(' ');
 8002724:	2020      	movs	r0, #32
 8002726:	f7fd fd13 	bl	8000150 <letter>
	letter('1');
 800272a:	2031      	movs	r0, #49	; 0x31
 800272c:	f7fd fd10 	bl	8000150 <letter>
	letter('-');
 8002730:	202d      	movs	r0, #45	; 0x2d
 8002732:	f7fd fd0d 	bl	8000150 <letter>
	letter('T');
 8002736:	2054      	movs	r0, #84	; 0x54
 8002738:	f7fd fd0a 	bl	8000150 <letter>
	letter('i');
 800273c:	2069      	movs	r0, #105	; 0x69
 800273e:	f7fd fd07 	bl	8000150 <letter>
	letter('m');
 8002742:	206d      	movs	r0, #109	; 0x6d
 8002744:	f7fd fd04 	bl	8000150 <letter>
	letter('e');
 8002748:	2065      	movs	r0, #101	; 0x65
 800274a:	f7fd fd01 	bl	8000150 <letter>
	letter('r');
 800274e:	2072      	movs	r0, #114	; 0x72
 8002750:	f7fd fcfe 	bl	8000150 <letter>

}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40010c00 	.word	0x40010c00

0800275c <onOff>:
void onOff(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002760:	2201      	movs	r2, #1
 8002762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002766:	4816      	ldr	r0, [pc, #88]	; (80027c0 <onOff+0x64>)
 8002768:	f000 ff31 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002772:	4813      	ldr	r0, [pc, #76]	; (80027c0 <onOff+0x64>)
 8002774:	f000 ff2b 	bl	80035ce <HAL_GPIO_WritePin>
	letter('0');
 8002778:	2030      	movs	r0, #48	; 0x30
 800277a:	f7fd fce9 	bl	8000150 <letter>
	letter('-');
 800277e:	202d      	movs	r0, #45	; 0x2d
 8002780:	f7fd fce6 	bl	8000150 <letter>
	letter('O');
 8002784:	204f      	movs	r0, #79	; 0x4f
 8002786:	f7fd fce3 	bl	8000150 <letter>
	letter('n');
 800278a:	206e      	movs	r0, #110	; 0x6e
 800278c:	f7fd fce0 	bl	8000150 <letter>
	letter(' ');
 8002790:	2020      	movs	r0, #32
 8002792:	f7fd fcdd 	bl	8000150 <letter>
	letter('1');
 8002796:	2031      	movs	r0, #49	; 0x31
 8002798:	f7fd fcda 	bl	8000150 <letter>
	letter('-');
 800279c:	202d      	movs	r0, #45	; 0x2d
 800279e:	f7fd fcd7 	bl	8000150 <letter>
	letter('O');
 80027a2:	204f      	movs	r0, #79	; 0x4f
 80027a4:	f7fd fcd4 	bl	8000150 <letter>
	letter('f');
 80027a8:	2066      	movs	r0, #102	; 0x66
 80027aa:	f7fd fcd1 	bl	8000150 <letter>
	letter('f');
 80027ae:	2066      	movs	r0, #102	; 0x66
 80027b0:	f7fd fcce 	bl	8000150 <letter>
	letter(':');
 80027b4:	203a      	movs	r0, #58	; 0x3a
 80027b6:	f7fd fccb 	bl	8000150 <letter>

}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40010c00 	.word	0x40010c00

080027c4 <error>:
void error(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80027c8:	2201      	movs	r2, #1
 80027ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027ce:	482a      	ldr	r0, [pc, #168]	; (8002878 <error+0xb4>)
 80027d0:	f000 fefd 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80027d4:	2200      	movs	r2, #0
 80027d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027da:	4827      	ldr	r0, [pc, #156]	; (8002878 <error+0xb4>)
 80027dc:	f000 fef7 	bl	80035ce <HAL_GPIO_WritePin>

	letter('E');
 80027e0:	2045      	movs	r0, #69	; 0x45
 80027e2:	f7fd fcb5 	bl	8000150 <letter>
	letter('r');
 80027e6:	2072      	movs	r0, #114	; 0x72
 80027e8:	f7fd fcb2 	bl	8000150 <letter>
	letter('r');
 80027ec:	2072      	movs	r0, #114	; 0x72
 80027ee:	f7fd fcaf 	bl	8000150 <letter>
	letter('o');
 80027f2:	206f      	movs	r0, #111	; 0x6f
 80027f4:	f7fd fcac 	bl	8000150 <letter>
	letter('r');
 80027f8:	2072      	movs	r0, #114	; 0x72
 80027fa:	f7fd fca9 	bl	8000150 <letter>
	letter(',');
 80027fe:	202c      	movs	r0, #44	; 0x2c
 8002800:	f7fd fca6 	bl	8000150 <letter>
	letter(' ');
 8002804:	2020      	movs	r0, #32
 8002806:	f7fd fca3 	bl	8000150 <letter>
	letter('I');
 800280a:	2049      	movs	r0, #73	; 0x49
 800280c:	f7fd fca0 	bl	8000150 <letter>
	letter('n');
 8002810:	206e      	movs	r0, #110	; 0x6e
 8002812:	f7fd fc9d 	bl	8000150 <letter>
	letter('v');
 8002816:	2076      	movs	r0, #118	; 0x76
 8002818:	f7fd fc9a 	bl	8000150 <letter>
	letter('a');
 800281c:	2061      	movs	r0, #97	; 0x61
 800281e:	f7fd fc97 	bl	8000150 <letter>
	letter('l');
 8002822:	206c      	movs	r0, #108	; 0x6c
 8002824:	f7fd fc94 	bl	8000150 <letter>
	letter('i');
 8002828:	2069      	movs	r0, #105	; 0x69
 800282a:	f7fd fc91 	bl	8000150 <letter>
	letter('d');
 800282e:	2064      	movs	r0, #100	; 0x64
 8002830:	f7fd fc8e 	bl	8000150 <letter>

	line2();
 8002834:	f7ff fc1a 	bl	800206c <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002838:	2201      	movs	r2, #1
 800283a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800283e:	480e      	ldr	r0, [pc, #56]	; (8002878 <error+0xb4>)
 8002840:	f000 fec5 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002844:	2200      	movs	r2, #0
 8002846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800284a:	480b      	ldr	r0, [pc, #44]	; (8002878 <error+0xb4>)
 800284c:	f000 febf 	bl	80035ce <HAL_GPIO_WritePin>
	letter('N');
 8002850:	204e      	movs	r0, #78	; 0x4e
 8002852:	f7fd fc7d 	bl	8000150 <letter>
	letter('u');
 8002856:	2075      	movs	r0, #117	; 0x75
 8002858:	f7fd fc7a 	bl	8000150 <letter>
	letter('m');
 800285c:	206d      	movs	r0, #109	; 0x6d
 800285e:	f7fd fc77 	bl	8000150 <letter>
	letter('b');
 8002862:	2062      	movs	r0, #98	; 0x62
 8002864:	f7fd fc74 	bl	8000150 <letter>
	letter('e');
 8002868:	2065      	movs	r0, #101	; 0x65
 800286a:	f7fd fc71 	bl	8000150 <letter>
	letter('r');
 800286e:	2072      	movs	r0, #114	; 0x72
 8002870:	f7fd fc6e 	bl	8000150 <letter>
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40010c00 	.word	0x40010c00

0800287c <StartXbeeTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
<<<<<<< HEAD
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 80006d0:	f000 f86c 	bl	80007ac <initializeNodes>
=======
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 8002884:	f000 f9d6 	bl	8002c34 <initializeNodes>
//	HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 10);
  for(;;)
  {
	  	  if(HAL_UART_Receive(&huart1, uartBufferRX, 3, 100) == HAL_OK)
 8002888:	2364      	movs	r3, #100	; 0x64
 800288a:	2203      	movs	r2, #3
 800288c:	4910      	ldr	r1, [pc, #64]	; (80028d0 <StartXbeeTask+0x54>)
 800288e:	4811      	ldr	r0, [pc, #68]	; (80028d4 <StartXbeeTask+0x58>)
 8002890:	f001 fffb 	bl	800488a <HAL_UART_Receive>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <StartXbeeTask+0x2c>
	  	  {
	  		  HAL_UART_Transmit(&huart1, uartBufferTX, 13, 1000);
 800289a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800289e:	220d      	movs	r2, #13
 80028a0:	490d      	ldr	r1, [pc, #52]	; (80028d8 <StartXbeeTask+0x5c>)
 80028a2:	480c      	ldr	r0, [pc, #48]	; (80028d4 <StartXbeeTask+0x58>)
 80028a4:	f001 ff5f 	bl	8004766 <HAL_UART_Transmit>
	  	  }
	  	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 100) == HAL_OK)
 80028a8:	2364      	movs	r3, #100	; 0x64
 80028aa:	221a      	movs	r2, #26
 80028ac:	4908      	ldr	r1, [pc, #32]	; (80028d0 <StartXbeeTask+0x54>)
 80028ae:	480b      	ldr	r0, [pc, #44]	; (80028dc <StartXbeeTask+0x60>)
 80028b0:	f001 ffeb 	bl	800488a <HAL_UART_Receive>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <StartXbeeTask+0x4c>
	  		  {
	  		  HAL_UART_Transmit(&huart1, uartBufferTX, 13, 1000);
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	220d      	movs	r2, #13
 80028c0:	4905      	ldr	r1, [pc, #20]	; (80028d8 <StartXbeeTask+0x5c>)
 80028c2:	4804      	ldr	r0, [pc, #16]	; (80028d4 <StartXbeeTask+0x58>)
 80028c4:	f001 ff4f 	bl	8004766 <HAL_UART_Transmit>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
//					HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);
//					break;
//				}
//			}
//	  }
    osDelay(1);
<<<<<<< HEAD
 80006d4:	2001      	movs	r0, #1
 80006d6:	f002 fcef 	bl	80030b8 <osDelay>
 80006da:	e7fb      	b.n	80006d4 <StartXbeeTask+0xc>

080006dc <StartUserTask>:
=======
 80028c8:	2001      	movs	r0, #1
 80028ca:	f002 fa65 	bl	8004d98 <osDelay>
	  	  if(HAL_UART_Receive(&huart1, uartBufferRX, 3, 100) == HAL_OK)
 80028ce:	e7db      	b.n	8002888 <StartXbeeTask+0xc>
 80028d0:	2000213c 	.word	0x2000213c
 80028d4:	200020fc 	.word	0x200020fc
 80028d8:	20002424 	.word	0x20002424
 80028dc:	200020bc 	.word	0x200020bc

080028e0 <StartUserTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
<<<<<<< HEAD
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */
	initializeNodes();
 80006e4:	f000 f862 	bl	80007ac <initializeNodes>
	uint16_t raw;
	uint8_t uartBufferTX[] = {0x30, 0x32, 0x32, 0x33, 0x34, 0x35, 0x31, 0x32, 0x36, 0x37, 0x31, 0x35, 0x31};
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <StartUserTask+0x58>)
 80006ea:	f107 0408 	add.w	r4, r7, #8
 80006ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f0:	c407      	stmia	r4!, {r0, r1, r2}
 80006f2:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	2110      	movs	r1, #16
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <StartUserTask+0x5c>)
 80006fa:	f001 f90b 	bl	8001914 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	2120      	movs	r1, #32
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <StartUserTask+0x5c>)
 8000704:	f001 f906 	bl	8001914 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	2180      	movs	r1, #128	; 0x80
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <StartUserTask+0x5c>)
 800070e:	f001 f901 	bl	8001914 <HAL_GPIO_WritePin>
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000712:	480a      	ldr	r0, [pc, #40]	; (800073c <StartUserTask+0x60>)
 8000714:	f000 fb8c 	bl	8000e30 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <StartUserTask+0x60>)
 800071e:	f000 fc35 	bl	8000f8c <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <StartUserTask+0x60>)
 8000724:	f000 fd2c 	bl	8001180 <HAL_ADC_GetValue>
 8000728:	4603      	mov	r3, r0
 800072a:	82fb      	strh	r3, [r7, #22]
//	  {
//		  line2();
//		  wrongPass();
//		  HAL_Delay(2000);
//	  }
	    osDelay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f002 fcc3 	bl	80030b8 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000732:	e7ee      	b.n	8000712 <StartUserTask+0x36>
 8000734:	08005a68 	.word	0x08005a68
 8000738:	40010c00 	.word	0x40010c00
 800073c:	200023ac 	.word	0x200023ac

08000740 <StartSolenoidTask>:
=======
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */

	uint16_t num[6];
	uint16_t indc;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80028e8:	2201      	movs	r2, #1
 80028ea:	2110      	movs	r1, #16
 80028ec:	48b2      	ldr	r0, [pc, #712]	; (8002bb8 <StartUserTask+0x2d8>)
 80028ee:	f000 fe6e 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80028f2:	2201      	movs	r2, #1
 80028f4:	2120      	movs	r1, #32
 80028f6:	48b0      	ldr	r0, [pc, #704]	; (8002bb8 <StartUserTask+0x2d8>)
 80028f8:	f000 fe69 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	48ad      	ldr	r0, [pc, #692]	; (8002bb8 <StartUserTask+0x2d8>)
 8002902:	f000 fe64 	bl	80035ce <HAL_GPIO_WritePin>
  for(;;)
  {
	num[6] = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	833b      	strh	r3, [r7, #24]
	commandToLCD();
 800290a:	f7ff fa4f 	bl	8001dac <commandToLCD>
	printPassword();
 800290e:	f7ff fb2d 	bl	8001f6c <printPassword>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002918:	48a8      	ldr	r0, [pc, #672]	; (8002bbc <StartUserTask+0x2dc>)
 800291a:	f000 fe58 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 800291e:	2200      	movs	r2, #0
 8002920:	2104      	movs	r1, #4
 8002922:	48a7      	ldr	r0, [pc, #668]	; (8002bc0 <StartUserTask+0x2e0>)
 8002924:	f000 fe53 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800292e:	48a3      	ldr	r0, [pc, #652]	; (8002bbc <StartUserTask+0x2dc>)
 8002930:	f000 fe4d 	bl	80035ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8002934:	2200      	movs	r2, #0
 8002936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800293a:	48a0      	ldr	r0, [pc, #640]	; (8002bbc <StartUserTask+0x2dc>)
 800293c:	f000 fe47 	bl	80035ce <HAL_GPIO_WritePin>

	for(int i = 0; i < 4; i++)
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e00d      	b.n	8002962 <StartUserTask+0x82>
	{
		num[i] = getVal();
 8002946:	f7ff fc5f 	bl	8002208 <getVal>
 800294a:	4603      	mov	r3, r0
 800294c:	b29a      	uxth	r2, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	f107 0120 	add.w	r1, r7, #32
 8002956:	440b      	add	r3, r1
 8002958:	f823 2c14 	strh.w	r2, [r3, #-20]
	for(int i = 0; i < 4; i++)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3301      	adds	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	2b03      	cmp	r3, #3
 8002966:	ddee      	ble.n	8002946 <StartUserTask+0x66>
	}
	if(num[0] == 1 && num[1] == 2 && num[2] == 3 && num[3] == 4)
 8002968:	89bb      	ldrh	r3, [r7, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	f040 8117 	bne.w	8002b9e <StartUserTask+0x2be>
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	2b02      	cmp	r3, #2
 8002974:	f040 8113 	bne.w	8002b9e <StartUserTask+0x2be>
 8002978:	8a3b      	ldrh	r3, [r7, #16]
 800297a:	2b03      	cmp	r3, #3
 800297c:	f040 810f 	bne.w	8002b9e <StartUserTask+0x2be>
 8002980:	8a7b      	ldrh	r3, [r7, #18]
 8002982:	2b04      	cmp	r3, #4
 8002984:	f040 810b 	bne.w	8002b9e <StartUserTask+0x2be>
	{
		clear();
 8002988:	f7ff fbc2 	bl	8002110 <clear>
		line1();
 800298c:	f7ff fb1c 	bl	8001fc8 <line1>
		correct();
 8002990:	f7ff fc10 	bl	80021b4 <correct>
		HAL_Delay(1500);
 8002994:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002998:	f000 fb7a 	bl	8003090 <HAL_Delay>
		while(num[6] == 0)
 800299c:	e0fa      	b.n	8002b94 <StartUserTask+0x2b4>
		{
			commandToLCD();
 800299e:	f7ff fa05 	bl	8001dac <commandToLCD>
			onOffTime();
 80029a2:	f7ff fe99 	bl	80026d8 <onOffTime>
			num[0] = getVal();
 80029a6:	f7ff fc2f 	bl	8002208 <getVal>
 80029aa:	4603      	mov	r3, r0
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	81bb      	strh	r3, [r7, #12]
			while(num[0]< 0 || num[0] > 1)
 80029b0:	e010      	b.n	80029d4 <StartUserTask+0xf4>
			{
				commandToLCD();
 80029b2:	f7ff f9fb 	bl	8001dac <commandToLCD>
				error();
 80029b6:	f7ff ff05 	bl	80027c4 <error>
				HAL_Delay(1500);
 80029ba:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80029be:	f000 fb67 	bl	8003090 <HAL_Delay>
				commandToLCD();
 80029c2:	f7ff f9f3 	bl	8001dac <commandToLCD>
				onOffTime();
 80029c6:	f7ff fe87 	bl	80026d8 <onOffTime>
				num[0] = getVal();
 80029ca:	f7ff fc1d 	bl	8002208 <getVal>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	81bb      	strh	r3, [r7, #12]
			while(num[0]< 0 || num[0] > 1)
 80029d4:	89bb      	ldrh	r3, [r7, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d8eb      	bhi.n	80029b2 <StartUserTask+0xd2>
			}
			if(num[0] == 0)
 80029da:	89bb      	ldrh	r3, [r7, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d15f      	bne.n	8002aa0 <StartUserTask+0x1c0>
			{
				commandToLCD();
 80029e0:	f7ff f9e4 	bl	8001dac <commandToLCD>
				green();
 80029e4:	f7ff fdca 	bl	800257c <green>
				num[0] = getVal();
 80029e8:	f7ff fc0e 	bl	8002208 <getVal>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 80029f2:	e010      	b.n	8002a16 <StartUserTask+0x136>
				{
					commandToLCD();
 80029f4:	f7ff f9da 	bl	8001dac <commandToLCD>
					error();
 80029f8:	f7ff fee4 	bl	80027c4 <error>
					HAL_Delay(1500);
 80029fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a00:	f000 fb46 	bl	8003090 <HAL_Delay>
					commandToLCD();
 8002a04:	f7ff f9d2 	bl	8001dac <commandToLCD>
					green();
 8002a08:	f7ff fdb8 	bl	800257c <green>
					num[0] = getVal();
 8002a0c:	f7ff fbfc 	bl	8002208 <getVal>
 8002a10:	4603      	mov	r3, r0
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002a16:	89bb      	ldrh	r3, [r7, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0eb      	beq.n	80029f4 <StartUserTask+0x114>
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d8e8      	bhi.n	80029f4 <StartUserTask+0x114>
				}
				indc = num[0];///do something with val[0] aka green #
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	837b      	strh	r3, [r7, #26]
				line2();
 8002a26:	f7ff fb21 	bl	800206c <line2>
				onOff();
 8002a2a:	f7ff fe97 	bl	800275c <onOff>
				num[0] = getVal();
 8002a2e:	f7ff fbeb 	bl	8002208 <getVal>
 8002a32:	4603      	mov	r3, r0
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002a38:	e010      	b.n	8002a5c <StartUserTask+0x17c>
				{
					commandToLCD();
 8002a3a:	f7ff f9b7 	bl	8001dac <commandToLCD>
					error();
 8002a3e:	f7ff fec1 	bl	80027c4 <error>
					HAL_Delay(1500);
 8002a42:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a46:	f000 fb23 	bl	8003090 <HAL_Delay>
					commandToLCD();
 8002a4a:	f7ff f9af 	bl	8001dac <commandToLCD>
					onOff();
 8002a4e:	f7ff fe85 	bl	800275c <onOff>
					num[0] = getVal();
 8002a52:	f7ff fbd9 	bl	8002208 <getVal>
 8002a56:	4603      	mov	r3, r0
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002a5c:	89bb      	ldrh	r3, [r7, #12]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d8eb      	bhi.n	8002a3a <StartUserTask+0x15a>
				}
				 ///do something with val[0]
				clear();
 8002a62:	f7ff fb55 	bl	8002110 <clear>
				quit();
 8002a66:	f7ff fdf5 	bl	8002654 <quit>
				num[0] = getVal();
 8002a6a:	f7ff fbcd 	bl	8002208 <getVal>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002a74:	e010      	b.n	8002a98 <StartUserTask+0x1b8>
				{
					commandToLCD();
 8002a76:	f7ff f999 	bl	8001dac <commandToLCD>
					error();
 8002a7a:	f7ff fea3 	bl	80027c4 <error>
					HAL_Delay(1500);
 8002a7e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a82:	f000 fb05 	bl	8003090 <HAL_Delay>
					commandToLCD();
 8002a86:	f7ff f991 	bl	8001dac <commandToLCD>
					quit();
 8002a8a:	f7ff fde3 	bl	8002654 <quit>
					num[0] = getVal();
 8002a8e:	f7ff fbbb 	bl	8002208 <getVal>
 8002a92:	4603      	mov	r3, r0
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002a98:	89bb      	ldrh	r3, [r7, #12]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d8eb      	bhi.n	8002a76 <StartUserTask+0x196>
 8002a9e:	e074      	b.n	8002b8a <StartUserTask+0x2aa>
				}
			}
			else if(num[0] == 1)
 8002aa0:	89bb      	ldrh	r3, [r7, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d171      	bne.n	8002b8a <StartUserTask+0x2aa>
			{
				commandToLCD();
 8002aa6:	f7ff f981 	bl	8001dac <commandToLCD>
				green();
 8002aaa:	f7ff fd67 	bl	800257c <green>
				num[0] = getVal();
 8002aae:	f7ff fbab 	bl	8002208 <getVal>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002ab8:	e010      	b.n	8002adc <StartUserTask+0x1fc>
				{
					commandToLCD();
 8002aba:	f7ff f977 	bl	8001dac <commandToLCD>
					error();
 8002abe:	f7ff fe81 	bl	80027c4 <error>
					HAL_Delay(1500);
 8002ac2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ac6:	f000 fae3 	bl	8003090 <HAL_Delay>
					commandToLCD();
 8002aca:	f7ff f96f 	bl	8001dac <commandToLCD>
					green();
 8002ace:	f7ff fd55 	bl	800257c <green>
					num[0] = getVal();
 8002ad2:	f7ff fb99 	bl	8002208 <getVal>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002adc:	89bb      	ldrh	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0eb      	beq.n	8002aba <StartUserTask+0x1da>
 8002ae2:	89bb      	ldrh	r3, [r7, #12]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d8e8      	bhi.n	8002aba <StartUserTask+0x1da>
				}
				indc = num[0];///do something with val[0] aka green #
 8002ae8:	89bb      	ldrh	r3, [r7, #12]
 8002aea:	837b      	strh	r3, [r7, #26]
				line2();
 8002aec:	f7ff fabe 	bl	800206c <line2>
				timer();
 8002af0:	f7ff fd74 	bl	80025dc <timer>
				num[0] = getVal();
 8002af4:	f7ff fb88 	bl	8002208 <getVal>
 8002af8:	4603      	mov	r3, r0
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	81bb      	strh	r3, [r7, #12]
				num[1] = getVal();
 8002afe:	f7ff fb83 	bl	8002208 <getVal>
 8002b02:	4603      	mov	r3, r0
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	81fb      	strh	r3, [r7, #14]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8002b08:	e015      	b.n	8002b36 <StartUserTask+0x256>
				{
					commandToLCD();
 8002b0a:	f7ff f94f 	bl	8001dac <commandToLCD>
					error();
 8002b0e:	f7ff fe59 	bl	80027c4 <error>
					HAL_Delay(1500);
 8002b12:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b16:	f000 fabb 	bl	8003090 <HAL_Delay>
					commandToLCD();
 8002b1a:	f7ff f947 	bl	8001dac <commandToLCD>
					timer();
 8002b1e:	f7ff fd5d 	bl	80025dc <timer>
					num[0] = getVal();
 8002b22:	f7ff fb71 	bl	8002208 <getVal>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	81bb      	strh	r3, [r7, #12]
					num[1] = getVal();
 8002b2c:	f7ff fb6c 	bl	8002208 <getVal>
 8002b30:	4603      	mov	r3, r0
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	81fb      	strh	r3, [r7, #14]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8002b36:	89bb      	ldrh	r3, [r7, #12]
 8002b38:	2b06      	cmp	r3, #6
 8002b3a:	d8e6      	bhi.n	8002b0a <StartUserTask+0x22a>
 8002b3c:	89fb      	ldrh	r3, [r7, #14]
 8002b3e:	2b09      	cmp	r3, #9
 8002b40:	d8e3      	bhi.n	8002b0a <StartUserTask+0x22a>
 8002b42:	89bb      	ldrh	r3, [r7, #12]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d102      	bne.n	8002b4e <StartUserTask+0x26e>
 8002b48:	89fb      	ldrh	r3, [r7, #14]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1dd      	bne.n	8002b0a <StartUserTask+0x22a>
				}
					  ///do something with val[0] and val[1]
				clear();
 8002b4e:	f7ff fadf 	bl	8002110 <clear>
				quit();
 8002b52:	f7ff fd7f 	bl	8002654 <quit>
				num[0] = getVal();
 8002b56:	f7ff fb57 	bl	8002208 <getVal>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002b60:	e010      	b.n	8002b84 <StartUserTask+0x2a4>
				{
					commandToLCD();
 8002b62:	f7ff f923 	bl	8001dac <commandToLCD>
					error();
 8002b66:	f7ff fe2d 	bl	80027c4 <error>
					HAL_Delay(1500);
 8002b6a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b6e:	f000 fa8f 	bl	8003090 <HAL_Delay>
					commandToLCD();
 8002b72:	f7ff f91b 	bl	8001dac <commandToLCD>
					quit();
 8002b76:	f7ff fd6d 	bl	8002654 <quit>
					num[0] = getVal();
 8002b7a:	f7ff fb45 	bl	8002208 <getVal>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002b84:	89bb      	ldrh	r3, [r7, #12]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d8eb      	bhi.n	8002b62 <StartUserTask+0x282>
				}
			}
			if(num[0] == 1)
 8002b8a:	89bb      	ldrh	r3, [r7, #12]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <StartUserTask+0x2b4>
			{
				num[6] = 5;
 8002b90:	2305      	movs	r3, #5
 8002b92:	833b      	strh	r3, [r7, #24]
		while(num[6] == 0)
 8002b94:	8b3b      	ldrh	r3, [r7, #24]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f43f af01 	beq.w	800299e <StartUserTask+0xbe>
	if(num[0] == 1 && num[1] == 2 && num[2] == 3 && num[3] == 4)
 8002b9c:	e007      	b.n	8002bae <StartUserTask+0x2ce>
			}
		}
	}
	else
	{
		line2();
 8002b9e:	f7ff fa65 	bl	800206c <line2>
		wrongPass();
 8002ba2:	f7ff fcaf 	bl	8002504 <wrongPass>
		HAL_Delay(2000);
 8002ba6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002baa:	f000 fa71 	bl	8003090 <HAL_Delay>
	}
	osDelay(1);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f002 f8f2 	bl	8004d98 <osDelay>
	num[6] = 0;
 8002bb4:	e6a7      	b.n	8002906 <StartUserTask+0x26>
 8002bb6:	bf00      	nop
 8002bb8:	40010c00 	.word	0x40010c00
 8002bbc:	40011000 	.word	0x40011000
 8002bc0:	40011400 	.word	0x40011400

08002bc4 <StartSolenoidTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
<<<<<<< HEAD
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
=======
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
//	  		else if(state == 1)
//	  		{
//	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//	  		}
//	  	}
    osDelay(1);
<<<<<<< HEAD
 8000748:	2001      	movs	r0, #1
 800074a:	f002 fcb5 	bl	80030b8 <osDelay>
 800074e:	e7fb      	b.n	8000748 <StartSolenoidTask+0x8>

08000750 <StartWeatherTask>:
=======
 8002bcc:	2001      	movs	r0, #1
 8002bce:	f002 f8e3 	bl	8004d98 <osDelay>
 8002bd2:	e7fb      	b.n	8002bcc <StartSolenoidTask+0x8>

08002bd4 <StartWeatherTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
<<<<<<< HEAD
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
=======
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
//		{}
//		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
//		{}
//		period =  __HAL_TIM_GET_COUNTER(&htim2) - tickstart;

    osDelay(1);
<<<<<<< HEAD
 8000758:	2001      	movs	r0, #1
 800075a:	f002 fcad 	bl	80030b8 <osDelay>
 800075e:	e7fb      	b.n	8000758 <StartWeatherTask+0x8>

08000760 <StartFlowTask>:
=======
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f002 f8db 	bl	8004d98 <osDelay>
 8002be2:	e7fb      	b.n	8002bdc <StartWeatherTask+0x8>

08002be4 <StartFlowTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
<<<<<<< HEAD
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
=======
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
//	  		L2=F2;
//	  		L3=F3;
//
//	  	}

    osDelay(1);
<<<<<<< HEAD
 8000768:	2001      	movs	r0, #1
 800076a:	f002 fca5 	bl	80030b8 <osDelay>
 800076e:	e7fb      	b.n	8000768 <StartFlowTask+0x8>

08000770 <StartProcessingTask>:
=======
 8002bec:	2001      	movs	r0, #1
 8002bee:	f002 f8d3 	bl	8004d98 <osDelay>
 8002bf2:	e7fb      	b.n	8002bec <StartFlowTask+0x8>

08002bf4 <StartProcessingTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
<<<<<<< HEAD
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
=======
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN StartProcessingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
<<<<<<< HEAD
 8000778:	2001      	movs	r0, #1
 800077a:	f002 fc9d 	bl	80030b8 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartProcessingTask+0x8>

08000780 <HAL_TIM_PeriodElapsedCallback>:
=======
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f002 f8cb 	bl	8004d98 <osDelay>
 8002c02:	e7fb      	b.n	8002bfc <StartProcessingTask+0x8>

08002c04 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
=======
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
<<<<<<< HEAD
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d101      	bne.n	8000796 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000792:	f000 fa59 	bl	8000c48 <HAL_IncTick>
=======
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c16:	f000 fa1f 	bl	8003058 <HAL_IncTick>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40000800 	.word	0x40000800

080007a4 <Error_Handler>:
=======
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40000800 	.word	0x40000800

08002c28 <Error_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
=======
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80007a8:	b672      	cpsid	i
=======
 8002c2c:	b672      	cpsid	i
}
 8002c2e:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80007aa:	e7fe      	b.n	80007aa <Error_Handler+0x6>

080007ac <initializeNodes>:
 *      Author: Colton Moore
=======
 8002c30:	e7fe      	b.n	8002c30 <Error_Handler+0x8>
	...

08002c34 <initializeNodes>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
 */

#include "sensorObjects.h"

void initializeNodes()
{
<<<<<<< HEAD
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 80007b2:	4a34      	ldr	r2, [pc, #208]	; (8000884 <initializeNodes+0xd8>)
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007bc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 80007c0:	4a31      	ldr	r2, [pc, #196]	; (8000888 <initializeNodes+0xdc>)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ca:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <initializeNodes+0xe0>)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d6:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	77fb      	strb	r3, [r7, #31]
 80007e2:	e01e      	b.n	8000822 <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 80007e4:	7ffb      	ldrb	r3, [r7, #31]
 80007e6:	4a2a      	ldr	r2, [pc, #168]	; (8000890 <initializeNodes+0xe4>)
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	330c      	adds	r3, #12
 80007ee:	2200      	movs	r2, #0
 80007f0:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 80007f2:	7ffb      	ldrb	r3, [r7, #31]
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <initializeNodes+0xe4>)
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	4413      	add	r3, r2
 80007fa:	330a      	adds	r3, #10
 80007fc:	2200      	movs	r2, #0
 80007fe:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8000800:	7ffb      	ldrb	r3, [r7, #31]
 8000802:	4a23      	ldr	r2, [pc, #140]	; (8000890 <initializeNodes+0xe4>)
 8000804:	011b      	lsls	r3, r3, #4
 8000806:	4413      	add	r3, r2
 8000808:	3308      	adds	r3, #8
 800080a:	2200      	movs	r2, #0
 800080c:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 800080e:	7ffb      	ldrb	r3, [r7, #31]
 8000810:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <initializeNodes+0xe4>)
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	4413      	add	r3, r2
 8000816:	330e      	adds	r3, #14
 8000818:	2200      	movs	r2, #0
 800081a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 800081c:	7ffb      	ldrb	r3, [r7, #31]
 800081e:	3301      	adds	r3, #1
 8000820:	77fb      	strb	r3, [r7, #31]
 8000822:	7ffb      	ldrb	r3, [r7, #31]
 8000824:	2b1f      	cmp	r3, #31
 8000826:	d9dd      	bls.n	80007e4 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8000828:	2300      	movs	r3, #0
 800082a:	77fb      	strb	r3, [r7, #31]
 800082c:	e022      	b.n	8000874 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 800082e:	7ffa      	ldrb	r2, [r7, #31]
 8000830:	7ffb      	ldrb	r3, [r7, #31]
 8000832:	f107 0120 	add.w	r1, r7, #32
 8000836:	440a      	add	r2, r1
 8000838:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <initializeNodes+0xe4>)
 800083e:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8000840:	7ffa      	ldrb	r2, [r7, #31]
 8000842:	7ffb      	ldrb	r3, [r7, #31]
 8000844:	f107 0120 	add.w	r1, r7, #32
 8000848:	440a      	add	r2, r1
 800084a:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <initializeNodes+0xe4>)
 8000850:	4413      	add	r3, r2
 8000852:	460a      	mov	r2, r1
 8000854:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 8000856:	7ffa      	ldrb	r2, [r7, #31]
 8000858:	7ffb      	ldrb	r3, [r7, #31]
 800085a:	f107 0120 	add.w	r1, r7, #32
 800085e:	440a      	add	r2, r1
 8000860:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <initializeNodes+0xe4>)
 8000866:	4413      	add	r3, r2
 8000868:	460a      	mov	r2, r1
 800086a:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 800086e:	7ffb      	ldrb	r3, [r7, #31]
 8000870:	3301      	adds	r3, #1
 8000872:	77fb      	strb	r3, [r7, #31]
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	2b07      	cmp	r3, #7
 8000878:	d9d9      	bls.n	800082e <initializeNodes+0x82>
	}

	return;
 800087a:	bf00      	nop
}
 800087c:	3724      	adds	r7, #36	; 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	08005a78 	.word	0x08005a78
 8000888:	08005a80 	.word	0x08005a80
 800088c:	08005a88 	.word	0x08005a88
 8000890:	2000216c 	.word	0x2000216c

08000894 <HAL_MspInit>:
=======
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 8002c3a:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <initializeNodes+0xd8>)
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c44:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 8002c48:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <initializeNodes+0xdc>)
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c52:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 8002c56:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <initializeNodes+0xe0>)
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c5e:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	e01e      	b.n	8002caa <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 8002c6c:	7ffb      	ldrb	r3, [r7, #31]
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <initializeNodes+0xe4>)
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	330c      	adds	r3, #12
 8002c76:	2200      	movs	r2, #0
 8002c78:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 8002c7a:	7ffb      	ldrb	r3, [r7, #31]
 8002c7c:	4a26      	ldr	r2, [pc, #152]	; (8002d18 <initializeNodes+0xe4>)
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	4413      	add	r3, r2
 8002c82:	330a      	adds	r3, #10
 8002c84:	2200      	movs	r2, #0
 8002c86:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8002c88:	7ffb      	ldrb	r3, [r7, #31]
 8002c8a:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <initializeNodes+0xe4>)
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	4413      	add	r3, r2
 8002c90:	3308      	adds	r3, #8
 8002c92:	2200      	movs	r2, #0
 8002c94:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 8002c96:	7ffb      	ldrb	r3, [r7, #31]
 8002c98:	4a1f      	ldr	r2, [pc, #124]	; (8002d18 <initializeNodes+0xe4>)
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	330e      	adds	r3, #14
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 8002ca4:	7ffb      	ldrb	r3, [r7, #31]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	7ffb      	ldrb	r3, [r7, #31]
 8002cac:	2b1f      	cmp	r3, #31
 8002cae:	d9dd      	bls.n	8002c6c <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e022      	b.n	8002cfc <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 8002cb6:	7ffa      	ldrb	r2, [r7, #31]
 8002cb8:	7ffb      	ldrb	r3, [r7, #31]
 8002cba:	f107 0120 	add.w	r1, r7, #32
 8002cbe:	440a      	add	r2, r1
 8002cc0:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <initializeNodes+0xe4>)
 8002cc6:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8002cc8:	7ffa      	ldrb	r2, [r7, #31]
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
 8002ccc:	f107 0120 	add.w	r1, r7, #32
 8002cd0:	440a      	add	r2, r1
 8002cd2:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <initializeNodes+0xe4>)
 8002cd8:	4413      	add	r3, r2
 8002cda:	460a      	mov	r2, r1
 8002cdc:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 8002cde:	7ffa      	ldrb	r2, [r7, #31]
 8002ce0:	7ffb      	ldrb	r3, [r7, #31]
 8002ce2:	f107 0120 	add.w	r1, r7, #32
 8002ce6:	440a      	add	r2, r1
 8002ce8:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <initializeNodes+0xe4>)
 8002cee:	4413      	add	r3, r2
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 8002cf6:	7ffb      	ldrb	r3, [r7, #31]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d9d9      	bls.n	8002cb6 <initializeNodes+0x82>
	}

	return;
 8002d02:	bf00      	nop
}
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	080077cc 	.word	0x080077cc
 8002d10:	080077d4 	.word	0x080077d4
 8002d14:	080077dc 	.word	0x080077dc
 8002d18:	20002180 	.word	0x20002180

08002d1c <HAL_MspInit>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
=======
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_MspInit+0x68>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <HAL_MspInit+0x68>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <HAL_MspInit+0x68>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_MspInit+0x68>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_MspInit+0x68>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x68>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
=======
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_MspInit+0x68>)
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_MspInit+0x68>)
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	6193      	str	r3, [r2, #24]
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_MspInit+0x68>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_MspInit+0x68>)
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <HAL_MspInit+0x68>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	61d3      	str	r3, [r2, #28]
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_MspInit+0x68>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 80008ca:	2200      	movs	r2, #0
 80008cc:	210f      	movs	r1, #15
 80008ce:	f06f 0001 	mvn.w	r0, #1
 80008d2:	f000 fe9a 	bl	800160a <HAL_NVIC_SetPriority>
=======
 8002d52:	2200      	movs	r2, #0
 8002d54:	210f      	movs	r1, #15
 8002d56:	f06f 0001 	mvn.w	r0, #1
 8002d5a:	f000 fa72 	bl	8003242 <HAL_NVIC_SetPriority>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_MspInit+0x6c>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_MspInit+0x6c>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6053      	str	r3, [r2, #4]
=======
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_MspInit+0x6c>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_MspInit+0x6c>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6053      	str	r3, [r2, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a14      	ldr	r2, [pc, #80]	; (8000970 <HAL_ADC_MspInit+0x6c>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d121      	bne.n	8000968 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a0c      	ldr	r2, [pc, #48]	; (8000974 <HAL_ADC_MspInit+0x70>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_ADC_MspInit+0x70>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0310 	and.w	r3, r3, #16
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000954:	2320      	movs	r3, #32
 8000956:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000958:	2303      	movs	r3, #3
 800095a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_ADC_MspInit+0x74>)
 8000964:	f000 fe7c 	bl	8001660 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40012400 	.word	0x40012400
 8000974:	40021000 	.word	0x40021000
 8000978:	40011000 	.word	0x40011000

0800097c <HAL_TIM_Base_MspInit>:
=======
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010000 	.word	0x40010000

08002d8c <HAL_TIM_Base_MspInit>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800098c:	d10b      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x2a>
=======
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d10b      	bne.n	8002db6 <HAL_TIM_Base_MspInit+0x2a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< HEAD
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_TIM_Base_MspInit+0x34>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <HAL_TIM_Base_MspInit+0x34>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_TIM_Base_MspInit+0x34>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
=======
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_TIM_Base_MspInit+0x34>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <HAL_TIM_Base_MspInit+0x34>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	61d3      	str	r3, [r2, #28]
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_TIM_Base_MspInit+0x34>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
<<<<<<< HEAD
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_UART_MspInit>:
=======
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <HAL_UART_MspInit>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0318 	add.w	r3, r7, #24
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <HAL_UART_MspInit+0xfc>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d132      	bne.n	8000a3a <HAL_UART_MspInit+0x86>
=======
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 0318 	add.w	r3, r7, #24
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_UART_MspInit+0xfc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d132      	bne.n	8002e4a <HAL_UART_MspInit+0x86>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 80009d4:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a36      	ldr	r2, [pc, #216]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a30      	ldr	r2, [pc, #192]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
=======
 8002de4:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a36      	ldr	r2, [pc, #216]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002dea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfc:	4b31      	ldr	r3, [pc, #196]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	4a30      	ldr	r2, [pc, #192]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	6193      	str	r3, [r2, #24]
 8002e08:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693b      	ldr	r3, [r7, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
<<<<<<< HEAD
 8000a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0318 	add.w	r3, r7, #24
 8000a16:	4619      	mov	r1, r3
 8000a18:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <HAL_UART_MspInit+0x104>)
 8000a1a:	f000 fe21 	bl	8001660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0318 	add.w	r3, r7, #24
 8000a30:	4619      	mov	r1, r3
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <HAL_UART_MspInit+0x104>)
 8000a34:	f000 fe14 	bl	8001660 <HAL_GPIO_Init>
=======
 8002e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e22:	f107 0318 	add.w	r3, r7, #24
 8002e26:	4619      	mov	r1, r3
 8002e28:	4827      	ldr	r0, [pc, #156]	; (8002ec8 <HAL_UART_MspInit+0x104>)
 8002e2a:	f000 fa35 	bl	8003298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3c:	f107 0318 	add.w	r3, r7, #24
 8002e40:	4619      	mov	r1, r3
 8002e42:	4821      	ldr	r0, [pc, #132]	; (8002ec8 <HAL_UART_MspInit+0x104>)
 8002e44:	f000 fa28 	bl	8003298 <HAL_GPIO_Init>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000a38:	e036      	b.n	8000aa8 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <HAL_UART_MspInit+0x108>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d131      	bne.n	8000aa8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	4a1a      	ldr	r2, [pc, #104]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4e:	61d3      	str	r3, [r2, #28]
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a52:	69db      	ldr	r3, [r3, #28]
 8000a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_UART_MspInit+0x100>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0308 	and.w	r3, r3, #8
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	4619      	mov	r1, r3
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <HAL_UART_MspInit+0x10c>)
 8000a8a:	f000 fde9 	bl	8001660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <HAL_UART_MspInit+0x10c>)
 8000aa4:	f000 fddc 	bl	8001660 <HAL_GPIO_Init>
}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40004800 	.word	0x40004800
 8000ac0:	40010c00 	.word	0x40010c00

08000ac4 <HAL_InitTick>:
=======
 8002e48:	e036      	b.n	8002eb8 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_UART_MspInit+0x108>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d131      	bne.n	8002eb8 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	4a1a      	ldr	r2, [pc, #104]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e5e:	61d3      	str	r3, [r2, #28]
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002e72:	f043 0308 	orr.w	r3, r3, #8
 8002e76:	6193      	str	r3, [r2, #24]
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_UART_MspInit+0x100>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f003 0308 	and.w	r3, r3, #8
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e92:	f107 0318 	add.w	r3, r7, #24
 8002e96:	4619      	mov	r1, r3
 8002e98:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <HAL_UART_MspInit+0x10c>)
 8002e9a:	f000 f9fd 	bl	8003298 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4807      	ldr	r0, [pc, #28]	; (8002ed0 <HAL_UART_MspInit+0x10c>)
 8002eb4:	f000 f9f0 	bl	8003298 <HAL_GPIO_Init>
}
 8002eb8:	bf00      	nop
 8002eba:	3728      	adds	r7, #40	; 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	40010800 	.word	0x40010800
 8002ecc:	40004800 	.word	0x40004800
 8002ed0:	40010c00 	.word	0x40010c00

08002ed4 <HAL_InitTick>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	201e      	movs	r0, #30
 8000ada:	f000 fd96 	bl	800160a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ade:	201e      	movs	r0, #30
 8000ae0:	f000 fdaf 	bl	8001642 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <HAL_InitTick+0xa0>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <HAL_InitTick+0xa0>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	61d3      	str	r3, [r2, #28]
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_InitTick+0xa0>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fb3c 	bl	8002184 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b0c:	f001 fb12 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8000b10:	4603      	mov	r3, r0
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b18:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <HAL_InitTick+0xa4>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9b      	lsrs	r3, r3, #18
 8000b20:	3b01      	subs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <HAL_InitTick+0xac>)
 8000b28:	601a      	str	r2, [r3, #0]
=======
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b08c      	sub	sp, #48	; 0x30
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	201e      	movs	r0, #30
 8002eea:	f000 f9aa 	bl	8003242 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002eee:	201e      	movs	r0, #30
 8002ef0:	f000 f9c3 	bl	800327a <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002ef4:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <HAL_InitTick+0xa0>)
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	; (8002f74 <HAL_InitTick+0xa0>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	61d3      	str	r3, [r2, #28]
 8002f00:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_InitTick+0xa0>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f0c:	f107 0210 	add.w	r2, r7, #16
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 ff90 	bl	8003e3c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002f1c:	f000 ff66 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8002f20:	4603      	mov	r3, r0
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <HAL_InitTick+0xa4>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	0c9b      	lsrs	r3, r3, #18
 8002f30:	3b01      	subs	r3, #1
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_InitTick+0xa8>)
 8002f36:	4a12      	ldr	r2, [pc, #72]	; (8002f80 <HAL_InitTick+0xac>)
 8002f38:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b30:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b36:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b46:	f001 fcdd 	bl	8002504 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d104      	bne.n	8000b5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b52:	f001 fd27 	bl	80025a4 <HAL_TIM_Base_Start_IT>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e000      	b.n	8000b5c <HAL_InitTick+0x98>
=======
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_InitTick+0xa8>)
 8002f3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f40:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <HAL_InitTick+0xa8>)
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <HAL_InitTick+0xa8>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f4e:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <HAL_InitTick+0xa8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002f54:	4809      	ldr	r0, [pc, #36]	; (8002f7c <HAL_InitTick+0xa8>)
 8002f56:	f000 ffbf 	bl	8003ed8 <HAL_TIM_Base_Init>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002f60:	4806      	ldr	r0, [pc, #24]	; (8002f7c <HAL_InitTick+0xa8>)
 8002f62:	f001 f809 	bl	8003f78 <HAL_TIM_Base_Start_IT>
 8002f66:	4603      	mov	r3, r0
 8002f68:	e000      	b.n	8002f6c <HAL_InitTick+0x98>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /* Return function status */
  return HAL_ERROR;
<<<<<<< HEAD
 8000b5a:	2301      	movs	r3, #1
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3730      	adds	r7, #48	; 0x30
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40021000 	.word	0x40021000
 8000b68:	431bde83 	.word	0x431bde83
 8000b6c:	200024b4 	.word	0x200024b4
 8000b70:	40000800 	.word	0x40000800

08000b74 <NMI_Handler>:
=======
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	431bde83 	.word	0x431bde83
 8002f7c:	20002458 	.word	0x20002458
 8002f80:	40000800 	.word	0x40000800

08002f84 <NMI_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
=======
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:
=======
 8002f88:	e7fe      	b.n	8002f88 <NMI_Handler+0x4>

08002f8a <HardFault_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
=======
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:
=======
 8002f8e:	e7fe      	b.n	8002f8e <HardFault_Handler+0x4>

08002f90 <MemManage_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
=======
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:
=======
 8002f94:	e7fe      	b.n	8002f94 <MemManage_Handler+0x4>

08002f96 <BusFault_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
=======
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:
=======
 8002f9a:	e7fe      	b.n	8002f9a <BusFault_Handler+0x4>

08002f9c <UsageFault_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
=======
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <DebugMon_Handler>:
=======
 8002fa0:	e7fe      	b.n	8002fa0 <UsageFault_Handler+0x4>

08002fa2 <DebugMon_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
=======
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
	...

08000ba0 <TIM4_IRQHandler>:
=======
 8002fa6:	bf00      	nop
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
	...

08002fb0 <TIM4_IRQHandler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< HEAD
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
=======
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< HEAD
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <TIM4_IRQHandler+0x10>)
 8000ba6:	f001 fd4f 	bl	8002648 <HAL_TIM_IRQHandler>
=======
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <TIM4_IRQHandler+0x10>)
 8002fb6:	f001 f831 	bl	800401c <HAL_TIM_IRQHandler>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< HEAD
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200024b4 	.word	0x200024b4

08000bb4 <EXTI15_10_IRQHandler>:
=======
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20002458 	.word	0x20002458

08002fc4 <EXTI15_10_IRQHandler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
<<<<<<< HEAD
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
=======
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
<<<<<<< HEAD
 8000bb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bbc:	f000 fec2 	bl	8001944 <HAL_GPIO_EXTI_IRQHandler>
=======
 8002fc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fcc:	f000 fb18 	bl	8003600 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
<<<<<<< HEAD
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SystemInit>:
=======
 8002fd0:	bf00      	nop
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <SystemInit>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
=======
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <Reset_Handler>:
=======
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <Reset_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
<<<<<<< HEAD
 8000bd0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bd2:	e003      	b.n	8000bdc <LoopCopyDataInit>

08000bd4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bd6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bd8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bda:	3104      	adds	r1, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000be0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000be2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000be4:	d3f6      	bcc.n	8000bd4 <CopyDataInit>
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000be8:	e002      	b.n	8000bf0 <LoopFillZerobss>

08000bea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bec:	f842 3b04 	str.w	r3, [r2], #4

08000bf0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bf2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bf4:	d3f9      	bcc.n	8000bea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bf6:	f7ff ffe5 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f004 fea7 	bl	800594c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bfe:	f7ff faa7 	bl	8000150 <main>
  bx lr
 8000c02:	4770      	bx	lr
  ldr r3, =_sidata
 8000c04:	08005c40 	.word	0x08005c40
  ldr r0, =_sdata
 8000c08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c0c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000c10:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000c14:	20002540 	.word	0x20002540

08000c18 <ADC1_2_IRQHandler>:
=======
 8002fe0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fe2:	e003      	b.n	8002fec <LoopCopyDataInit>

08002fe4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002fe6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fe8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fea:	3104      	adds	r1, #4

08002fec <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fec:	480a      	ldr	r0, [pc, #40]	; (8003018 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ff0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ff2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ff4:	d3f6      	bcc.n	8002fe4 <CopyDataInit>
  ldr r2, =_sbss
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ff8:	e002      	b.n	8003000 <LoopFillZerobss>

08002ffa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ffa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ffc:	f842 3b04 	str.w	r3, [r2], #4

08003000 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003002:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003004:	d3f9      	bcc.n	8002ffa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003006:	f7ff ffe5 	bl	8002fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800300a:	f004 fb4f 	bl	80076ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800300e:	f7fe fc65 	bl	80018dc <main>
  bx lr
 8003012:	4770      	bx	lr
  ldr r3, =_sidata
 8003014:	0800797c 	.word	0x0800797c
  ldr r0, =_sdata
 8003018:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800301c:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003020:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003024:	200024e4 	.word	0x200024e4

08003028 <ADC1_2_IRQHandler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8000c18:	e7fe      	b.n	8000c18 <ADC1_2_IRQHandler>
	...

08000c1c <HAL_Init>:
=======
 8003028:	e7fe      	b.n	8003028 <ADC1_2_IRQHandler>
	...

0800302c <HAL_Init>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
=======
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <HAL_Init+0x28>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_Init+0x28>)
 8000c26:	f043 0310 	orr.w	r3, r3, #16
 8000c2a:	6013      	str	r3, [r2, #0]
=======
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_Init+0x28>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a07      	ldr	r2, [pc, #28]	; (8003054 <HAL_Init+0x28>)
 8003036:	f043 0310 	orr.w	r3, r3, #16
 800303a:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	f000 fce1 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff ff46 	bl	8000ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c38:	f7ff fe2c 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40022000 	.word	0x40022000

08000c48 <HAL_IncTick>:
=======
 800303c:	2003      	movs	r0, #3
 800303e:	f000 f8f5 	bl	800322c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003042:	2000      	movs	r0, #0
 8003044:	f7ff ff46 	bl	8002ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003048:	f7ff fe68 	bl	8002d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40022000 	.word	0x40022000

08003058 <HAL_IncTick>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <HAL_IncTick+0x1c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_IncTick+0x20>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_IncTick+0x20>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	20000008 	.word	0x20000008
 8000c68:	200024fc 	.word	0x200024fc

08000c6c <HAL_GetTick>:
=======
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_IncTick+0x1c>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_IncTick+0x20>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4413      	add	r3, r2
 8003068:	4a03      	ldr	r2, [pc, #12]	; (8003078 <HAL_IncTick+0x20>)
 800306a:	6013      	str	r3, [r2, #0]
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	20000008 	.word	0x20000008
 8003078:	200024a0 	.word	0x200024a0

0800307c <HAL_GetTick>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <HAL_GetTick+0x10>)
 8000c72:	681b      	ldr	r3, [r3, #0]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	200024fc 	.word	0x200024fc

08000c80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e0be      	b.n	8000e20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d109      	bne.n	8000cc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fe20 	bl	8000904 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 fbb1 	bl	800142c <ADC_ConversionStop_Disable>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8099 	bne.w	8000e0e <HAL_ADC_Init+0x18e>
 8000cdc:	7dfb      	ldrb	r3, [r7, #23]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 8095 	bne.w	8000e0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000cec:	f023 0302 	bic.w	r3, r3, #2
 8000cf0:	f043 0202 	orr.w	r2, r3, #2
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7b1b      	ldrb	r3, [r3, #12]
 8000d06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	689b      	ldr	r3, [r3, #8]
 8000d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d18:	d003      	beq.n	8000d22 <HAL_ADC_Init+0xa2>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d102      	bne.n	8000d28 <HAL_ADC_Init+0xa8>
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	e000      	b.n	8000d2a <HAL_ADC_Init+0xaa>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7d1b      	ldrb	r3, [r3, #20]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d119      	bne.n	8000d6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7b1b      	ldrb	r3, [r3, #12]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d109      	bne.n	8000d54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	035a      	lsls	r2, r3, #13
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	e00b      	b.n	8000d6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f043 0220 	orr.w	r2, r3, #32
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	f043 0201 	orr.w	r2, r3, #1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	4b28      	ldr	r3, [pc, #160]	; (8000e28 <HAL_ADC_Init+0x1a8>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	6812      	ldr	r2, [r2, #0]
 8000d8e:	68b9      	ldr	r1, [r7, #8]
 8000d90:	430b      	orrs	r3, r1
 8000d92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d9c:	d003      	beq.n	8000da6 <HAL_ADC_Init+0x126>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d104      	bne.n	8000db0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	051b      	lsls	r3, r3, #20
 8000dae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_ADC_Init+0x1ac>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d10b      	bne.n	8000dec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	f023 0303 	bic.w	r3, r3, #3
 8000de2:	f043 0201 	orr.w	r2, r3, #1
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000dea:	e018      	b.n	8000e1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f023 0312 	bic.w	r3, r3, #18
 8000df4:	f043 0210 	orr.w	r2, r3, #16
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	f043 0201 	orr.w	r2, r3, #1
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e0c:	e007      	b.n	8000e1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f043 0210 	orr.w	r2, r3, #16
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	ffe1f7fd 	.word	0xffe1f7fd
 8000e2c:	ff1f0efe 	.word	0xff1f0efe

08000e30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d101      	bne.n	8000e4a <HAL_ADC_Start+0x1a>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e098      	b.n	8000f7c <HAL_ADC_Start+0x14c>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fa98 	bl	8001388 <ADC_Enable>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8087 	bne.w	8000f72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a41      	ldr	r2, [pc, #260]	; (8000f84 <HAL_ADC_Start+0x154>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d105      	bne.n	8000e8e <HAL_ADC_Start+0x5e>
 8000e82:	4b41      	ldr	r3, [pc, #260]	; (8000f88 <HAL_ADC_Start+0x158>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d115      	bne.n	8000eba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d026      	beq.n	8000ef6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eb8:	e01d      	b.n	8000ef6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a2f      	ldr	r2, [pc, #188]	; (8000f88 <HAL_ADC_Start+0x158>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d004      	beq.n	8000eda <HAL_ADC_Start+0xaa>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a2b      	ldr	r2, [pc, #172]	; (8000f84 <HAL_ADC_Start+0x154>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_ADC_Start+0xc6>
 8000eda:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <HAL_ADC_Start+0x158>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000eee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d006      	beq.n	8000f10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	f023 0206 	bic.w	r2, r3, #6
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f0e:	e002      	b.n	8000f16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f06f 0202 	mvn.w	r2, #2
 8000f26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f36:	d113      	bne.n	8000f60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f3c:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_ADC_Start+0x154>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d105      	bne.n	8000f4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <HAL_ADC_Start+0x158>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d108      	bne.n	8000f60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	e00c      	b.n	8000f7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689a      	ldr	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	e003      	b.n	8000f7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40012800 	.word	0x40012800
 8000f88:	40012400 	.word	0x40012400

08000f8c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000fa2:	f7ff fe63 	bl	8000c6c <HAL_GetTick>
 8000fa6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f043 0220 	orr.w	r2, r3, #32
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e0c8      	b.n	8001160 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d12a      	bne.n	8001032 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d123      	bne.n	8001032 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fea:	e01a      	b.n	8001022 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff2:	d016      	beq.n	8001022 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d007      	beq.n	800100a <HAL_ADC_PollForConversion+0x7e>
 8000ffa:	f7ff fe37 	bl	8000c6c <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	d20b      	bcs.n	8001022 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	f043 0204 	orr.w	r2, r3, #4
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e09e      	b.n	8001160 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0dd      	beq.n	8000fec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001030:	e06c      	b.n	800110c <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001032:	4b4d      	ldr	r3, [pc, #308]	; (8001168 <HAL_ADC_PollForConversion+0x1dc>)
 8001034:	681c      	ldr	r4, [r3, #0]
 8001036:	2002      	movs	r0, #2
 8001038:	f001 f9a8 	bl	800238c <HAL_RCCEx_GetPeriphCLKFreq>
 800103c:	4603      	mov	r3, r0
 800103e:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6919      	ldr	r1, [r3, #16]
 8001048:	4b48      	ldr	r3, [pc, #288]	; (800116c <HAL_ADC_PollForConversion+0x1e0>)
 800104a:	400b      	ands	r3, r1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <HAL_ADC_PollForConversion+0xf6>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68d9      	ldr	r1, [r3, #12]
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <HAL_ADC_PollForConversion+0x1e4>)
 8001058:	400b      	ands	r3, r1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d111      	bne.n	8001082 <HAL_ADC_PollForConversion+0xf6>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6919      	ldr	r1, [r3, #16]
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <HAL_ADC_PollForConversion+0x1e8>)
 8001066:	400b      	ands	r3, r1
 8001068:	2b00      	cmp	r3, #0
 800106a:	d108      	bne.n	800107e <HAL_ADC_PollForConversion+0xf2>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68d9      	ldr	r1, [r3, #12]
 8001072:	4b41      	ldr	r3, [pc, #260]	; (8001178 <HAL_ADC_PollForConversion+0x1ec>)
 8001074:	400b      	ands	r3, r1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_ADC_PollForConversion+0xf2>
 800107a:	2314      	movs	r3, #20
 800107c:	e020      	b.n	80010c0 <HAL_ADC_PollForConversion+0x134>
 800107e:	2329      	movs	r3, #41	; 0x29
 8001080:	e01e      	b.n	80010c0 <HAL_ADC_PollForConversion+0x134>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6919      	ldr	r1, [r3, #16]
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <HAL_ADC_PollForConversion+0x1e8>)
 800108a:	400b      	ands	r3, r1
 800108c:	2b00      	cmp	r3, #0
 800108e:	d106      	bne.n	800109e <HAL_ADC_PollForConversion+0x112>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68d9      	ldr	r1, [r3, #12]
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <HAL_ADC_PollForConversion+0x1ec>)
 8001098:	400b      	ands	r3, r1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00d      	beq.n	80010ba <HAL_ADC_PollForConversion+0x12e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6919      	ldr	r1, [r3, #16]
 80010a4:	4b35      	ldr	r3, [pc, #212]	; (800117c <HAL_ADC_PollForConversion+0x1f0>)
 80010a6:	400b      	ands	r3, r1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d108      	bne.n	80010be <HAL_ADC_PollForConversion+0x132>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68d9      	ldr	r1, [r3, #12]
 80010b2:	4b32      	ldr	r3, [pc, #200]	; (800117c <HAL_ADC_PollForConversion+0x1f0>)
 80010b4:	400b      	ands	r3, r1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_PollForConversion+0x132>
 80010ba:	2354      	movs	r3, #84	; 0x54
 80010bc:	e000      	b.n	80010c0 <HAL_ADC_PollForConversion+0x134>
 80010be:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010c6:	e01d      	b.n	8001104 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ce:	d016      	beq.n	80010fe <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d007      	beq.n	80010e6 <HAL_ADC_PollForConversion+0x15a>
 80010d6:	f7ff fdc9 	bl	8000c6c <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	683a      	ldr	r2, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d20b      	bcs.n	80010fe <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	f043 0204 	orr.w	r2, r3, #4
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e030      	b.n	8001160 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8dd      	bhi.n	80010c8 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f06f 0212 	mvn.w	r2, #18
 8001114:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800112c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001130:	d115      	bne.n	800115e <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001136:	2b00      	cmp	r3, #0
 8001138:	d111      	bne.n	800115e <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	24924924 	.word	0x24924924
 8001170:	00924924 	.word	0x00924924
 8001174:	12492492 	.word	0x12492492
 8001178:	00492492 	.word	0x00492492
 800117c:	00249249 	.word	0x00249249

08001180 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d101      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x20>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e0dc      	b.n	8001372 <HAL_ADC_ConfigChannel+0x1da>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b06      	cmp	r3, #6
 80011c6:	d81c      	bhi.n	8001202 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	3b05      	subs	r3, #5
 80011da:	221f      	movs	r2, #31
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4019      	ands	r1, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	3b05      	subs	r3, #5
 80011f4:	fa00 f203 	lsl.w	r2, r0, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001200:	e03c      	b.n	800127c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b0c      	cmp	r3, #12
 8001208:	d81c      	bhi.n	8001244 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b23      	subs	r3, #35	; 0x23
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	4019      	ands	r1, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4613      	mov	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	3b23      	subs	r3, #35	; 0x23
 8001236:	fa00 f203 	lsl.w	r2, r0, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
 8001242:	e01b      	b.n	800127c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b41      	subs	r3, #65	; 0x41
 8001256:	221f      	movs	r2, #31
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4019      	ands	r1, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b41      	subs	r3, #65	; 0x41
 8001270:	fa00 f203 	lsl.w	r2, r0, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b09      	cmp	r3, #9
 8001282:	d91c      	bls.n	80012be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68d9      	ldr	r1, [r3, #12]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	3b1e      	subs	r3, #30
 8001296:	2207      	movs	r2, #7
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4019      	ands	r1, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	6898      	ldr	r0, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4613      	mov	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	4413      	add	r3, r2
 80012ae:	3b1e      	subs	r3, #30
 80012b0:	fa00 f203 	lsl.w	r2, r0, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	e019      	b.n	80012f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6919      	ldr	r1, [r3, #16]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	2207      	movs	r2, #7
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	4019      	ands	r1, r3
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6898      	ldr	r0, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d003      	beq.n	8001302 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012fe:	2b11      	cmp	r3, #17
 8001300:	d132      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_ADC_ConfigChannel+0x1e4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d125      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d126      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001328:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d11a      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <HAL_ADC_ConfigChannel+0x1e8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a13      	ldr	r2, [pc, #76]	; (8001384 <HAL_ADC_ConfigChannel+0x1ec>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0c9a      	lsrs	r2, r3, #18
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001348:	e002      	b.n	8001350 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3b01      	subs	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_ConfigChannel+0x1b2>
 8001356:	e007      	b.n	8001368 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f043 0220 	orr.w	r2, r3, #32
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr
 800137c:	40012400 	.word	0x40012400
 8001380:	20000000 	.word	0x20000000
 8001384:	431bde83 	.word	0x431bde83

08001388 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d039      	beq.n	800141a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f042 0201 	orr.w	r2, r2, #1
 80013b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <ADC_Enable+0x9c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <ADC_Enable+0xa0>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9b      	lsrs	r3, r3, #18
 80013c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013c4:	e002      	b.n	80013cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f9      	bne.n	80013c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013d2:	f7ff fc4b 	bl	8000c6c <HAL_GetTick>
 80013d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013d8:	e018      	b.n	800140c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013da:	f7ff fc47 	bl	8000c6c <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d911      	bls.n	800140c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	f043 0210 	orr.w	r2, r3, #16
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f043 0201 	orr.w	r2, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e007      	b.n	800141c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d1df      	bne.n	80013da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b01      	cmp	r3, #1
 8001444:	d127      	bne.n	8001496 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0201 	bic.w	r2, r2, #1
 8001454:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001456:	f7ff fc09 	bl	8000c6c <HAL_GetTick>
 800145a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800145c:	e014      	b.n	8001488 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800145e:	f7ff fc05 	bl	8000c6c <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d90d      	bls.n	8001488 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f043 0210 	orr.w	r2, r3, #16
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	f043 0201 	orr.w	r2, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e007      	b.n	8001498 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d0e3      	beq.n	800145e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <__NVIC_SetPriorityGrouping>:
=======
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return uwTick;
 8003080:	4b02      	ldr	r3, [pc, #8]	; (800308c <HAL_GetTick+0x10>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr
 800308c:	200024a0 	.word	0x200024a0

08003090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff fff0 	bl	800307c <HAL_GetTick>
 800309c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d005      	beq.n	80030b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_Delay+0x44>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030b6:	bf00      	nop
 80030b8:	f7ff ffe0 	bl	800307c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d8f7      	bhi.n	80030b8 <HAL_Delay+0x28>
  {
  }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000008 	.word	0x20000008

080030d8 <__NVIC_SetPriorityGrouping>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
=======
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f4:	4013      	ands	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60d3      	str	r3, [r2, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_GetPriorityGrouping>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
=======
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <__NVIC_GetPriorityGrouping+0x18>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 0307 	and.w	r3, r3, #7
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_EnableIRQ>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4906      	ldr	r1, [pc, #24]	; (8001538 <__NVIC_EnableIRQ+0x34>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
=======
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	2b00      	cmp	r3, #0
 800314c:	db0b      	blt.n	8003166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	4906      	ldr	r1, [pc, #24]	; (8003170 <__NVIC_EnableIRQ+0x34>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2001      	movs	r0, #1
 800315e:	fa00 f202 	lsl.w	r2, r0, r2
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	e000e100 	.word	0xe000e100

08003174 <__NVIC_SetPriority>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	6039      	str	r1, [r7, #0]
 800317e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	2b00      	cmp	r3, #0
 8003186:	db0a      	blt.n	800319e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	490c      	ldr	r1, [pc, #48]	; (80031c0 <__NVIC_SetPriority+0x4c>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	440b      	add	r3, r1
 8003198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
=======
 800319c:	e00a      	b.n	80031b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <__NVIC_SetPriority+0x50>)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3b04      	subs	r3, #4
 80031ac:	0112      	lsls	r2, r2, #4
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	440b      	add	r3, r1
 80031b2:	761a      	strb	r2, [r3, #24]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000e100 	.word	0xe000e100
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <NVIC_EncodePriority>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
=======
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	; 0x24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	61fb      	str	r3, [r7, #28]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <HAL_NVIC_SetPriorityGrouping>:
=======
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f1c3 0307 	rsb	r3, r3, #7
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	bf28      	it	cs
 80031e6:	2304      	movcs	r3, #4
 80031e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d902      	bls.n	80031f8 <NVIC_EncodePriority+0x30>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3b03      	subs	r3, #3
 80031f6:	e000      	b.n	80031fa <NVIC_EncodePriority+0x32>
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	401a      	ands	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003210:	f04f 31ff 	mov.w	r1, #4294967295
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	43d9      	mvns	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	4313      	orrs	r3, r2
         );
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
=======
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff4f 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_SetPriority>:
=======
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff ff4f 	bl	80030d8 <__NVIC_SetPriorityGrouping>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_SetPriority>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800160a:	b580      	push	{r7, lr}
 800160c:	b086      	sub	sp, #24
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
=======
 8003242:	b580      	push	{r7, lr}
 8003244:	b086      	sub	sp, #24
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 800161c:	f7ff ff64 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	6978      	ldr	r0, [r7, #20]
 8001628:	f7ff ffb2 	bl	8001590 <NVIC_EncodePriority>
 800162c:	4602      	mov	r2, r0
 800162e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff81 	bl	800153c <__NVIC_SetPriority>
}
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_EnableIRQ>:
=======
 8003254:	f7ff ff64 	bl	8003120 <__NVIC_GetPriorityGrouping>
 8003258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	6978      	ldr	r0, [r7, #20]
 8003260:	f7ff ffb2 	bl	80031c8 <NVIC_EncodePriority>
 8003264:	4602      	mov	r2, r0
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	4611      	mov	r1, r2
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff81 	bl	8003174 <__NVIC_SetPriority>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_EnableIRQ>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
=======
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	71fb      	strb	r3, [r7, #7]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff57 	bl	8001504 <__NVIC_EnableIRQ>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_GPIO_Init>:
=======
 8003284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff ff57 	bl	800313c <__NVIC_EnableIRQ>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_GPIO_Init>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8003298:	b480      	push	{r7}
 800329a:	b08b      	sub	sp, #44	; 0x2c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
=======
 80032a6:	2300      	movs	r3, #0
 80032a8:	623b      	str	r3, [r7, #32]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8001672:	e127      	b.n	80018c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001674:	2201      	movs	r2, #1
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8116 	bne.w	80018be <HAL_GPIO_Init+0x25e>
=======
 80032aa:	e169      	b.n	8003580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032ac:	2201      	movs	r2, #1
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f040 8158 	bne.w	800357a <HAL_GPIO_Init+0x2e2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b12      	cmp	r3, #18
 8001698:	d034      	beq.n	8001704 <HAL_GPIO_Init+0xa4>
 800169a:	2b12      	cmp	r3, #18
 800169c:	d80d      	bhi.n	80016ba <HAL_GPIO_Init+0x5a>
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x9a>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d804      	bhi.n	80016b0 <HAL_GPIO_Init+0x50>
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d031      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d01c      	beq.n	80016e8 <HAL_GPIO_Init+0x88>
=======
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4a9a      	ldr	r2, [pc, #616]	; (8003538 <HAL_GPIO_Init+0x2a0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d05e      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 80032d4:	4a98      	ldr	r2, [pc, #608]	; (8003538 <HAL_GPIO_Init+0x2a0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d875      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 80032da:	4a98      	ldr	r2, [pc, #608]	; (800353c <HAL_GPIO_Init+0x2a4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d058      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 80032e0:	4a96      	ldr	r2, [pc, #600]	; (800353c <HAL_GPIO_Init+0x2a4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d86f      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 80032e6:	4a96      	ldr	r2, [pc, #600]	; (8003540 <HAL_GPIO_Init+0x2a8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d052      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 80032ec:	4a94      	ldr	r2, [pc, #592]	; (8003540 <HAL_GPIO_Init+0x2a8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d869      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 80032f2:	4a94      	ldr	r2, [pc, #592]	; (8003544 <HAL_GPIO_Init+0x2ac>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04c      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 80032f8:	4a92      	ldr	r2, [pc, #584]	; (8003544 <HAL_GPIO_Init+0x2ac>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d863      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 80032fe:	4a92      	ldr	r2, [pc, #584]	; (8003548 <HAL_GPIO_Init+0x2b0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d046      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
 8003304:	4a90      	ldr	r2, [pc, #576]	; (8003548 <HAL_GPIO_Init+0x2b0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d85d      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 800330a:	2b12      	cmp	r3, #18
 800330c:	d82a      	bhi.n	8003364 <HAL_GPIO_Init+0xcc>
 800330e:	2b12      	cmp	r3, #18
 8003310:	d859      	bhi.n	80033c6 <HAL_GPIO_Init+0x12e>
 8003312:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <HAL_GPIO_Init+0x80>)
 8003314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003318:	08003393 	.word	0x08003393
 800331c:	0800336d 	.word	0x0800336d
 8003320:	0800337f 	.word	0x0800337f
 8003324:	080033c1 	.word	0x080033c1
 8003328:	080033c7 	.word	0x080033c7
 800332c:	080033c7 	.word	0x080033c7
 8003330:	080033c7 	.word	0x080033c7
 8003334:	080033c7 	.word	0x080033c7
 8003338:	080033c7 	.word	0x080033c7
 800333c:	080033c7 	.word	0x080033c7
 8003340:	080033c7 	.word	0x080033c7
 8003344:	080033c7 	.word	0x080033c7
 8003348:	080033c7 	.word	0x080033c7
 800334c:	080033c7 	.word	0x080033c7
 8003350:	080033c7 	.word	0x080033c7
 8003354:	080033c7 	.word	0x080033c7
 8003358:	080033c7 	.word	0x080033c7
 800335c:	08003375 	.word	0x08003375
 8003360:	08003389 	.word	0x08003389
 8003364:	4a79      	ldr	r2, [pc, #484]	; (800354c <HAL_GPIO_Init+0x2b4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_GPIO_Init+0xfa>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 80016ae:	e048      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d043      	beq.n	800173c <HAL_GPIO_Init+0xdc>
 80016b4:	2b11      	cmp	r3, #17
 80016b6:	d01b      	beq.n	80016f0 <HAL_GPIO_Init+0x90>
          break;
 80016b8:	e043      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016ba:	4a89      	ldr	r2, [pc, #548]	; (80018e0 <HAL_GPIO_Init+0x280>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d026      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016c0:	4a87      	ldr	r2, [pc, #540]	; (80018e0 <HAL_GPIO_Init+0x280>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d806      	bhi.n	80016d4 <HAL_GPIO_Init+0x74>
 80016c6:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <HAL_GPIO_Init+0x284>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d020      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016cc:	4a86      	ldr	r2, [pc, #536]	; (80018e8 <HAL_GPIO_Init+0x288>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01d      	beq.n	800170e <HAL_GPIO_Init+0xae>
          break;
 80016d2:	e036      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016d4:	4a85      	ldr	r2, [pc, #532]	; (80018ec <HAL_GPIO_Init+0x28c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016da:	4a85      	ldr	r2, [pc, #532]	; (80018f0 <HAL_GPIO_Init+0x290>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d016      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016e0:	4a84      	ldr	r2, [pc, #528]	; (80018f4 <HAL_GPIO_Init+0x294>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0xae>
          break;
 80016e6:	e02c      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e028      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	3304      	adds	r3, #4
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e023      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e01e      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	330c      	adds	r3, #12
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e019      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001716:	2304      	movs	r3, #4
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e012      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	611a      	str	r2, [r3, #16]
          break;
 800172e:	e008      	b.n	8001742 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	615a      	str	r2, [r3, #20]
          break;
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	bf00      	nop
=======
 800336a:	e02c      	b.n	80033c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	623b      	str	r3, [r7, #32]
          break;
 8003372:	e029      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	3304      	adds	r3, #4
 800337a:	623b      	str	r3, [r7, #32]
          break;
 800337c:	e024      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	3308      	adds	r3, #8
 8003384:	623b      	str	r3, [r7, #32]
          break;
 8003386:	e01f      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	330c      	adds	r3, #12
 800338e:	623b      	str	r3, [r7, #32]
          break;
 8003390:	e01a      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800339a:	2304      	movs	r3, #4
 800339c:	623b      	str	r3, [r7, #32]
          break;
 800339e:	e013      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033a8:	2308      	movs	r3, #8
 80033aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	611a      	str	r2, [r3, #16]
          break;
 80033b2:	e009      	b.n	80033c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033b4:	2308      	movs	r3, #8
 80033b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	615a      	str	r2, [r3, #20]
          break;
 80033be:	e003      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033c0:	2300      	movs	r3, #0
 80033c2:	623b      	str	r3, [r7, #32]
          break;
 80033c4:	e000      	b.n	80033c8 <HAL_GPIO_Init+0x130>
          break;
 80033c6:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2bff      	cmp	r3, #255	; 0xff
 8001746:	d801      	bhi.n	800174c <HAL_GPIO_Init+0xec>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	e001      	b.n	8001750 <HAL_GPIO_Init+0xf0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3304      	adds	r3, #4
 8001750:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2bff      	cmp	r3, #255	; 0xff
 8001756:	d802      	bhi.n	800175e <HAL_GPIO_Init+0xfe>
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x104>
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	3b08      	subs	r3, #8
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	210f      	movs	r1, #15
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	401a      	ands	r2, r3
 8001776:	6a39      	ldr	r1, [r7, #32]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]
=======
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2bff      	cmp	r3, #255	; 0xff
 80033cc:	d801      	bhi.n	80033d2 <HAL_GPIO_Init+0x13a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	e001      	b.n	80033d6 <HAL_GPIO_Init+0x13e>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3304      	adds	r3, #4
 80033d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2bff      	cmp	r3, #255	; 0xff
 80033dc:	d802      	bhi.n	80033e4 <HAL_GPIO_Init+0x14c>
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	e002      	b.n	80033ea <HAL_GPIO_Init+0x152>
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	3b08      	subs	r3, #8
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	210f      	movs	r1, #15
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	401a      	ands	r2, r3
 80033fc:	6a39      	ldr	r1, [r7, #32]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8096 	beq.w	80018be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001792:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_GPIO_Init+0x298>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_GPIO_Init+0x298>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x298>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017aa:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_GPIO_Init+0x29c>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_GPIO_Init+0x2a0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x19e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_GPIO_Init+0x2a4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x19a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a49      	ldr	r2, [pc, #292]	; (8001908 <HAL_GPIO_Init+0x2a8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x196>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a48      	ldr	r2, [pc, #288]	; (800190c <HAL_GPIO_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x192>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017fe:	2300      	movs	r3, #0
 8001800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001810:	493a      	ldr	r1, [pc, #232]	; (80018fc <HAL_GPIO_Init+0x29c>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80b1 	beq.w	800357a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003418:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <HAL_GPIO_Init+0x2b8>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4a4c      	ldr	r2, [pc, #304]	; (8003550 <HAL_GPIO_Init+0x2b8>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	6193      	str	r3, [r2, #24]
 8003424:	4b4a      	ldr	r3, [pc, #296]	; (8003550 <HAL_GPIO_Init+0x2b8>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003430:	4a48      	ldr	r2, [pc, #288]	; (8003554 <HAL_GPIO_Init+0x2bc>)
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	089b      	lsrs	r3, r3, #2
 8003436:	3302      	adds	r3, #2
 8003438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800343c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a40      	ldr	r2, [pc, #256]	; (8003558 <HAL_GPIO_Init+0x2c0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <HAL_GPIO_Init+0x1ec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a3f      	ldr	r2, [pc, #252]	; (800355c <HAL_GPIO_Init+0x2c4>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00d      	beq.n	8003480 <HAL_GPIO_Init+0x1e8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a3e      	ldr	r2, [pc, #248]	; (8003560 <HAL_GPIO_Init+0x2c8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <HAL_GPIO_Init+0x1e4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a3d      	ldr	r2, [pc, #244]	; (8003564 <HAL_GPIO_Init+0x2cc>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_GPIO_Init+0x1e0>
 8003474:	2303      	movs	r3, #3
 8003476:	e006      	b.n	8003486 <HAL_GPIO_Init+0x1ee>
 8003478:	2304      	movs	r3, #4
 800347a:	e004      	b.n	8003486 <HAL_GPIO_Init+0x1ee>
 800347c:	2302      	movs	r3, #2
 800347e:	e002      	b.n	8003486 <HAL_GPIO_Init+0x1ee>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_GPIO_Init+0x1ee>
 8003484:	2300      	movs	r3, #0
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	f002 0203 	and.w	r2, r2, #3
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4093      	lsls	r3, r2
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003496:	492f      	ldr	r1, [pc, #188]	; (8003554 <HAL_GPIO_Init+0x2bc>)
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4938      	ldr	r1, [pc, #224]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x1e6>
=======
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	492c      	ldr	r1, [pc, #176]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x234>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	43db      	mvns	r3, r3
 8001840:	4933      	ldr	r1, [pc, #204]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001842:	4013      	ands	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
=======
 80034be:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	4928      	ldr	r1, [pc, #160]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	492e      	ldr	r1, [pc, #184]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x20e>
=======
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d006      	beq.n	80034e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034d8:	4b23      	ldr	r3, [pc, #140]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4922      	ldr	r1, [pc, #136]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x25c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	43db      	mvns	r3, r3
 8001868:	4929      	ldr	r1, [pc, #164]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800186a:	4013      	ands	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
=======
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	43db      	mvns	r3, r3
 80034ee:	491e      	ldr	r1, [pc, #120]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	4924      	ldr	r1, [pc, #144]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x236>
=======
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	4918      	ldr	r1, [pc, #96]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]
 800350c:	e006      	b.n	800351c <HAL_GPIO_Init+0x284>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	491f      	ldr	r1, [pc, #124]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001892:	4013      	ands	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
=======
 800350e:	4b16      	ldr	r3, [pc, #88]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	43db      	mvns	r3, r3
 8003516:	4914      	ldr	r1, [pc, #80]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 8003518:	4013      	ands	r3, r2
 800351a:	608b      	str	r3, [r1, #8]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	491a      	ldr	r1, [pc, #104]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x25e>
=======
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d021      	beq.n	800356c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	490e      	ldr	r1, [pc, #56]	; (8003568 <HAL_GPIO_Init+0x2d0>)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	60cb      	str	r3, [r1, #12]
 8003534:	e021      	b.n	800357a <HAL_GPIO_Init+0x2e2>
 8003536:	bf00      	nop
 8003538:	10320000 	.word	0x10320000
 800353c:	10310000 	.word	0x10310000
 8003540:	10220000 	.word	0x10220000
 8003544:	10210000 	.word	0x10210000
 8003548:	10120000 	.word	0x10120000
 800354c:	10110000 	.word	0x10110000
 8003550:	40021000 	.word	0x40021000
 8003554:	40010000 	.word	0x40010000
 8003558:	40010800 	.word	0x40010800
 800355c:	40010c00 	.word	0x40010c00
 8003560:	40011000 	.word	0x40011000
 8003564:	40011400 	.word	0x40011400
 8003568:	40010400 	.word	0x40010400
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4915      	ldr	r1, [pc, #84]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
=======
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <HAL_GPIO_Init+0x304>)
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	43db      	mvns	r3, r3
 8003574:	4909      	ldr	r1, [pc, #36]	; (800359c <HAL_GPIO_Init+0x304>)
 8003576:	4013      	ands	r3, r2
 8003578:	60cb      	str	r3, [r1, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }

	position++;
<<<<<<< HEAD
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f47f aed0 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 80018d4:	bf00      	nop
 80018d6:	372c      	adds	r7, #44	; 0x2c
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	10210000 	.word	0x10210000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	10120000 	.word	0x10120000
 80018ec:	10310000 	.word	0x10310000
 80018f0:	10320000 	.word	0x10320000
 80018f4:	10220000 	.word	0x10220000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	40010800 	.word	0x40010800
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40011000 	.word	0x40011000
 800190c:	40011400 	.word	0x40011400
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_WritePin>:
=======
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	3301      	adds	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	f47f ae8e 	bne.w	80032ac <HAL_GPIO_Init+0x14>
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	372c      	adds	r7, #44	; 0x2c
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	40010400 	.word	0x40010400

080035a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e001      	b.n	80035c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <HAL_GPIO_WritePin>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
=======
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	807b      	strh	r3, [r7, #2]
 80035da:	4613      	mov	r3, r2
 80035dc:	707b      	strb	r3, [r7, #1]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	611a      	str	r2, [r3, #16]
=======
 80035de:	787b      	ldrb	r3, [r7, #1]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035e4:	887a      	ldrh	r2, [r7, #2]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_GPIO_EXTI_IRQHandler>:
=======
 80035ea:	e003      	b.n	80035f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035ec:	887b      	ldrh	r3, [r7, #2]
 80035ee:	041a      	lsls	r2, r3, #16
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	611a      	str	r2, [r3, #16]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
	...

08003600 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800195c:	88fb      	ldrh	r3, [r7, #6]
 800195e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 f806 	bl	8001974 <HAL_GPIO_EXTI_Callback>
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40010400 	.word	0x40010400

08001974 <HAL_GPIO_EXTI_Callback>:
=======
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003616:	4a05      	ldr	r2, [pc, #20]	; (800362c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f806 	bl	8003630 <HAL_GPIO_EXTI_Callback>
  }
}
 8003624:	bf00      	nop
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40010400 	.word	0x40010400

08003630 <HAL_GPIO_EXTI_Callback>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
=======
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	80fb      	strh	r3, [r7, #6]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_RCC_OscConfig>:
=======
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <HAL_RCC_OscConfig>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
=======
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e26c      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
=======
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e26c      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8087 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x12e>
=======
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8087 	beq.w	8003772 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 80019a8:	4b92      	ldr	r3, [pc, #584]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d00c      	beq.n	80019ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019b4:	4b8f      	ldr	r3, [pc, #572]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d10b      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ce:	4b89      	ldr	r3, [pc, #548]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d06c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d168      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e246      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
=======
 8003664:	4b92      	ldr	r3, [pc, #584]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b04      	cmp	r3, #4
 800366e:	d00c      	beq.n	800368a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003670:	4b8f      	ldr	r3, [pc, #572]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 030c 	and.w	r3, r3, #12
 8003678:	2b08      	cmp	r3, #8
 800367a:	d112      	bne.n	80036a2 <HAL_RCC_OscConfig+0x5e>
 800367c:	4b8c      	ldr	r3, [pc, #560]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d10b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368a:	4b89      	ldr	r3, [pc, #548]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d06c      	beq.n	8003770 <HAL_RCC_OscConfig+0x12c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d168      	bne.n	8003770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e246      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x76>
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a7f      	ldr	r2, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e02e      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x98>
 8001a06:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a7a      	ldr	r2, [pc, #488]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0xbc>
 8001a2a:	4b72      	ldr	r3, [pc, #456]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a71      	ldr	r2, [pc, #452]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b6f      	ldr	r3, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a6e      	ldr	r2, [pc, #440]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xd4>
 8001a44:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a6a      	ldr	r2, [pc, #424]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a67      	ldr	r2, [pc, #412]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]
=======
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x76>
 80036ac:	4b80      	ldr	r3, [pc, #512]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7f      	ldr	r2, [pc, #508]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e02e      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x98>
 80036c2:	4b7b      	ldr	r3, [pc, #492]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7a      	ldr	r2, [pc, #488]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b78      	ldr	r3, [pc, #480]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a77      	ldr	r2, [pc, #476]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e01d      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0xbc>
 80036e6:	4b72      	ldr	r3, [pc, #456]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a71      	ldr	r2, [pc, #452]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b6f      	ldr	r3, [pc, #444]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6e      	ldr	r2, [pc, #440]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 8003700:	4b6b      	ldr	r3, [pc, #428]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6a      	ldr	r2, [pc, #424]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4b68      	ldr	r3, [pc, #416]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a67      	ldr	r2, [pc, #412]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003716:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f902 	bl	8000c6c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f8fe 	bl	8000c6c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1fa      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xe4>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
=======
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7ff fcac 	bl	800307c <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7ff fca8 	bl	800307c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	; 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e1fa      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0xe4>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x12e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001a8c:	f7ff f8ee 	bl	8000c6c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f8ea 	bl	8000c6c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1e6      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x10c>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
=======
 8003748:	f7ff fc98 	bl	800307c <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7ff fc94 	bl	800307c <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1e6      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x10c>
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d063      	beq.n	8001b8a <HAL_RCC_OscConfig+0x202>
=======
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d063      	beq.n	8003846 <HAL_RCC_OscConfig+0x202>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8001ac2:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ace:	4b49      	ldr	r3, [pc, #292]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
 8001ada:	4b46      	ldr	r3, [pc, #280]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1ba      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
=======
 800377e:	4b4c      	ldr	r3, [pc, #304]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800378a:	4b49      	ldr	r3, [pc, #292]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b08      	cmp	r3, #8
 8003794:	d11c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x18c>
 8003796:	4b46      	ldr	r3, [pc, #280]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	4b43      	ldr	r3, [pc, #268]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x176>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e1ba      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4939      	ldr	r1, [pc, #228]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
=======
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4939      	ldr	r1, [pc, #228]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	e03a      	b.n	8003846 <HAL_RCC_OscConfig+0x202>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f8a3 	bl	8000c6c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff f89f 	bl	8000c6c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e19b      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1a2>
=======
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <HAL_RCC_OscConfig+0x270>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7ff fc4d 	bl	800307c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e6:	f7ff fc49 	bl	800307c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e19b      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4927      	ldr	r1, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x202>
=======
 8003804:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4927      	ldr	r1, [pc, #156]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x202>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x270>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f882 	bl	8000c6c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f87e 	bl	8000c6c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e17a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1e4>
=======
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <HAL_RCC_OscConfig+0x270>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7ff fc2c 	bl	800307c <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003828:	f7ff fc28 	bl	800307c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e17a      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	4b1d      	ldr	r3, [pc, #116]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d03a      	beq.n	8001c0c <HAL_RCC_OscConfig+0x284>
=======
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03a      	beq.n	80038c8 <HAL_RCC_OscConfig+0x284>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f862 	bl	8000c6c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f85e 	bl	8000c6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e15a      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x224>
=======
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d019      	beq.n	800388e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b17      	ldr	r3, [pc, #92]	; (80038b8 <HAL_RCC_OscConfig+0x274>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003860:	f7ff fc0c 	bl	800307c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003868:	f7ff fc08 	bl	800307c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e15a      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x224>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 fb0a 	bl	80021e4 <RCC_Delay>
 8001bd0:	e01c      	b.n	8001c0c <HAL_RCC_OscConfig+0x284>
=======
 8003886:	2001      	movs	r0, #1
 8003888:	f000 fb08 	bl	8003e9c <RCC_Delay>
 800388c:	e01c      	b.n	80038c8 <HAL_RCC_OscConfig+0x284>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f848 	bl	8000c6c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bde:	e00f      	b.n	8001c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff f844 	bl	8000c6c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e140      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	42420000 	.word	0x42420000
 8001bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b9e      	ldr	r3, [pc, #632]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1e9      	bne.n	8001be0 <HAL_RCC_OscConfig+0x258>
=======
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_RCC_OscConfig+0x274>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7ff fbf2 	bl	800307c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389a:	e00f      	b.n	80038bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389c:	f7ff fbee 	bl	800307c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d908      	bls.n	80038bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e140      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	42420000 	.word	0x42420000
 80038b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	4b9e      	ldr	r3, [pc, #632]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e9      	bne.n	800389c <HAL_RCC_OscConfig+0x258>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a6 	beq.w	8001d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	75fb      	strb	r3, [r7, #23]
=======
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a6 	beq.w	8003a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8001c1e:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10d      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a93      	ldr	r2, [pc, #588]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b91      	ldr	r3, [pc, #580]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c46:	4b8e      	ldr	r3, [pc, #568]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c52:	4b8b      	ldr	r3, [pc, #556]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a8a      	ldr	r2, [pc, #552]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5e:	f7ff f805 	bl	8000c6c <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff f801 	bl	8000c6c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b64      	cmp	r3, #100	; 0x64
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0fd      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c78:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <HAL_RCC_OscConfig+0x4f8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x2de>
=======
 80038da:	4b97      	ldr	r3, [pc, #604]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	4b94      	ldr	r3, [pc, #592]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4a93      	ldr	r2, [pc, #588]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f0:	61d3      	str	r3, [r2, #28]
 80038f2:	4b91      	ldr	r3, [pc, #580]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b8e      	ldr	r3, [pc, #568]	; (8003b3c <HAL_RCC_OscConfig+0x4f8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <HAL_RCC_OscConfig+0x4f8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a8a      	ldr	r2, [pc, #552]	; (8003b3c <HAL_RCC_OscConfig+0x4f8>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7ff fbaf 	bl	800307c <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7ff fbab 	bl	800307c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b64      	cmp	r3, #100	; 0x64
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0fd      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4b81      	ldr	r3, [pc, #516]	; (8003b3c <HAL_RCC_OscConfig+0x4f8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x2de>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <HAL_RCC_OscConfig+0x312>
 8001c8c:	4b7b      	ldr	r3, [pc, #492]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a7a      	ldr	r2, [pc, #488]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e02d      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x334>
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	f023 0301 	bic.w	r3, r3, #1
 8001cac:	6213      	str	r3, [r2, #32]
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0304 	bic.w	r3, r3, #4
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	e01c      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d10c      	bne.n	8001cde <HAL_RCC_OscConfig+0x356>
 8001cc4:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a6c      	ldr	r2, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	4b6a      	ldr	r3, [pc, #424]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	4a69      	ldr	r2, [pc, #420]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	6213      	str	r3, [r2, #32]
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x36e>
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a66      	ldr	r2, [pc, #408]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b64      	ldr	r3, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a63      	ldr	r2, [pc, #396]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7fe ffb5 	bl	8000c6c <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d06:	f7fe ffb1 	bl	8000c6c <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e0ab      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	4b57      	ldr	r3, [pc, #348]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0ee      	beq.n	8001d06 <HAL_RCC_OscConfig+0x37e>
 8001d28:	e014      	b.n	8001d54 <HAL_RCC_OscConfig+0x3cc>
=======
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x312>
 8003948:	4b7b      	ldr	r3, [pc, #492]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4a7a      	ldr	r2, [pc, #488]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	e02d      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x334>
 800395e:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	4a75      	ldr	r2, [pc, #468]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	6213      	str	r3, [r2, #32]
 800396a:	4b73      	ldr	r3, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4a72      	ldr	r2, [pc, #456]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	6213      	str	r3, [r2, #32]
 8003976:	e01c      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d10c      	bne.n	800399a <HAL_RCC_OscConfig+0x356>
 8003980:	4b6d      	ldr	r3, [pc, #436]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4a6c      	ldr	r2, [pc, #432]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6213      	str	r3, [r2, #32]
 800398c:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4a69      	ldr	r2, [pc, #420]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6213      	str	r3, [r2, #32]
 8003998:	e00b      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 800399a:	4b67      	ldr	r3, [pc, #412]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4a66      	ldr	r2, [pc, #408]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6213      	str	r3, [r2, #32]
 80039a6:	4b64      	ldr	r3, [pc, #400]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a63      	ldr	r2, [pc, #396]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7ff fb5f 	bl	800307c <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7ff fb5b 	bl	800307c <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0ab      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ee      	beq.n	80039c2 <HAL_RCC_OscConfig+0x37e>
 80039e4:	e014      	b.n	8003a10 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001d2a:	f7fe ff9f 	bl	8000c6c <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d30:	e00a      	b.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d32:	f7fe ff9b 	bl	8000c6c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e095      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1ee      	bne.n	8001d32 <HAL_RCC_OscConfig+0x3aa>
=======
 80039e6:	f7ff fb49 	bl	800307c <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7ff fb45 	bl	800307c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e095      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	4b4c      	ldr	r3, [pc, #304]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ee      	bne.n	80039ee <HAL_RCC_OscConfig+0x3aa>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a47      	ldr	r2, [pc, #284]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
=======
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b48      	ldr	r3, [pc, #288]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4a47      	ldr	r2, [pc, #284]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	61d3      	str	r3, [r2, #28]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 8081 	beq.w	8001e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d70:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 030c 	and.w	r3, r3, #12
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d061      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d146      	bne.n	8001e12 <HAL_RCC_OscConfig+0x48a>
=======
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8081 	beq.w	8003b2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2c:	4b42      	ldr	r3, [pc, #264]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d061      	beq.n	8003afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d146      	bne.n	8003ace <HAL_RCC_OscConfig+0x48a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7fe ff6f 	bl	8000c6c <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d92:	f7fe ff6b 	bl	8000c6c <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e067      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x40a>
=======
 8003a40:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_RCC_OscConfig+0x4fc>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7ff fb19 	bl	800307c <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7ff fb15 	bl	800307c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e067      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a60:	4b35      	ldr	r3, [pc, #212]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x40a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x444>
=======
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d108      	bne.n	8003a88 <HAL_RCC_OscConfig+0x444>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	492d      	ldr	r1, [pc, #180]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
=======
 8003a76:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	492d      	ldr	r1, [pc, #180]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8001dcc:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a19      	ldr	r1, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	4927      	ldr	r1, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7fe ff3f 	bl	8000c6c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7fe ff3b 	bl	8000c6c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e037      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x46a>
 8001e10:	e02f      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
=======
 8003a88:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a19      	ldr	r1, [r3, #32]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	4927      	ldr	r1, [pc, #156]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_OscConfig+0x4fc>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7ff fae9 	bl	800307c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aae:	f7ff fae5 	bl	800307c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e037      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x46a>
 8003acc:	e02f      	b.n	8003b2e <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCC_OscConfig+0x4fc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7fe ff28 	bl	8000c6c <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe ff24 	bl	8000c6c <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e020      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e32:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x498>
 8001e3e:	e018      	b.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
=======
 8003ace:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <HAL_RCC_OscConfig+0x4fc>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7ff fad2 	bl	800307c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7ff face 	bl	800307c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e020      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x498>
 8003afa:	e018      	b.n	8003b2e <HAL_RCC_OscConfig+0x4ea>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e013      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
=======
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e013      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x4ec>
=======
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_OscConfig+0x4f4>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	42420060 	.word	0x42420060

08001e88 <HAL_RCC_ClockConfig>:
=======
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	42420060 	.word	0x42420060

08003b44 <HAL_RCC_ClockConfig>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
=======
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d0      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
=======
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0d0      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0307 	and.w	r3, r3, #7
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 0207 	bic.w	r2, r3, #7
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
=======
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d910      	bls.n	8003b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 0207 	bic.w	r2, r3, #7
 8003b6e:	4965      	ldr	r1, [pc, #404]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
=======
 8003b76:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0b8      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x92>
=======
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d020      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x92>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f06:	6053      	str	r3, [r2, #4]
=======
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a58      	ldr	r2, [pc, #352]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003baa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb8:	4b53      	ldr	r3, [pc, #332]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a52      	ldr	r2, [pc, #328]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bc2:	6053      	str	r3, [r2, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
=======
 8003bc4:	4b50      	ldr	r3, [pc, #320]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	494d      	ldr	r1, [pc, #308]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	604b      	str	r3, [r1, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d040      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x120>
=======
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d040      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d115      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
=======
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bea:	4b47      	ldr	r3, [pc, #284]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d115      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e07f      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	4b41      	ldr	r3, [pc, #260]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e073      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
=======
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d107      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c02:	4b41      	ldr	r3, [pc, #260]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e073      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06b      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4936      	ldr	r1, [pc, #216]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fe78 	bl	8000c6c <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7fe fe74 	bl	8000c6c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e053      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xf8>
=======
 8003c12:	4b3d      	ldr	r3, [pc, #244]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e06b      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c22:	4b39      	ldr	r3, [pc, #228]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f023 0203 	bic.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4936      	ldr	r1, [pc, #216]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c34:	f7ff fa22 	bl	800307c <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c3c:	f7ff fa1e 	bl	800307c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e053      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 020c 	and.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1eb      	bne.n	8003c3c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d210      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4922      	ldr	r1, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
=======
 8003c64:	4b27      	ldr	r3, [pc, #156]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d210      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 0207 	bic.w	r2, r3, #7
 8003c7a:	4922      	ldr	r1, [pc, #136]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1b6>
=======
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e032      	b.n	8003cfa <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
=======
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca0:	4b19      	ldr	r3, [pc, #100]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4916      	ldr	r1, [pc, #88]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]
=======
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	490e      	ldr	r1, [pc, #56]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8002016:	f000 f821 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800201a:	4601      	mov	r1, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
 800202a:	fa21 f303 	lsr.w	r3, r1, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fd44 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40022000 	.word	0x40022000
 800204c:	40021000 	.word	0x40021000
 8002050:	08005c20 	.word	0x08005c20
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
=======
 8003cd2:	f000 f821 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	490a      	ldr	r1, [pc, #40]	; (8003d0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce4:	5ccb      	ldrb	r3, [r1, r3]
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1cc>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_ClockConfig+0x1d0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff f8ee 	bl	8002ed4 <HAL_InitTick>

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40022000 	.word	0x40022000
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	0800795c 	.word	0x0800795c
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800205c:	b490      	push	{r4, r7}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
=======
 8003d18:	b490      	push	{r4, r7}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002064:	1d3c      	adds	r4, r7, #4
 8002066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d20:	1d3c      	adds	r4, r7, #4
 8003d22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 800206c:	4b28      	ldr	r3, [pc, #160]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb4>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	803b      	strh	r3, [r7, #0]
=======
 8003d28:	f240 2301 	movw	r3, #513	; 0x201
 8003d2c:	803b      	strh	r3, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
=======
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
 8003d32:	2300      	movs	r3, #0
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	2300      	movs	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	623b      	str	r3, [r7, #32]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b04      	cmp	r3, #4
 8002094:	d002      	beq.n	800209c <HAL_RCC_GetSysClockFreq+0x40>
 8002096:	2b08      	cmp	r3, #8
 8002098:	d003      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x46>
 800209a:	e02d      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d002      	beq.n	8003d58 <HAL_RCC_GetSysClockFreq+0x40>
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_GetSysClockFreq+0x46>
 8003d56:	e02d      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 800209e:	623b      	str	r3, [r7, #32]
      break;
 80020a0:	e02d      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8003d58:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d5a:	623b      	str	r3, [r7, #32]
      break;
 8003d5c:	e02d      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x8c>
=======
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	0c9b      	lsrs	r3, r3, #18
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c5b      	lsrs	r3, r3, #17
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ce:	4413      	add	r3, r2
 80020d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020d4:	61bb      	str	r3, [r7, #24]
=======
 8003d7c:	4b13      	ldr	r3, [pc, #76]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0c5b      	lsrs	r3, r3, #17
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d90:	61bb      	str	r3, [r7, #24]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020da:	fb02 f203 	mul.w	r2, r2, r3
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	e004      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0x96>
=======
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d96:	fb02 f203 	mul.w	r2, r2, r3
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	627b      	str	r3, [r7, #36]	; 0x24
 8003da2:	e004      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	623b      	str	r3, [r7, #32]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	623b      	str	r3, [r7, #32]
      break;
 8003db2:	e002      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fa:	623b      	str	r3, [r7, #32]
      break;
 80020fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bc90      	pop	{r4, r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	08005a90 	.word	0x08005a90
 8002110:	08005aa0 	.word	0x08005aa0
 8002114:	40021000 	.word	0x40021000
 8002118:	007a1200 	.word	0x007a1200
 800211c:	003d0900 	.word	0x003d0900

08002120 <HAL_RCC_GetHCLKFreq>:
=======
 8003db4:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003db6:	623b      	str	r3, [r7, #32]
      break;
 8003db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dba:	6a3b      	ldr	r3, [r7, #32]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3728      	adds	r7, #40	; 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc90      	pop	{r4, r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	080077e4 	.word	0x080077e4
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	007a1200 	.word	0x007a1200
 8003dd4:	003d0900 	.word	0x003d0900

08003dd8 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <HAL_RCC_GetHCLKFreq+0x10>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr
 8002130:	20000000 	.word	0x20000000

08002134 <HAL_RCC_GetPCLK1Freq>:
=======
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	20000000 	.word	0x20000000

08003dec <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002138:	f7ff fff2 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800213c:	4601      	mov	r1, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4a03      	ldr	r2, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x24>)
 800214a:	5cd3      	ldrb	r3, [r2, r3]
 800214c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	08005c30 	.word	0x08005c30

0800215c <HAL_RCC_GetPCLK2Freq>:
=======
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff2 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	0800796c 	.word	0x0800796c

08003e14 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002160:	f7ff ffde 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002164:	4601      	mov	r1, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	0adb      	lsrs	r3, r3, #11
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08005c30 	.word	0x08005c30

08002184 <HAL_RCC_GetClockConfig>:
=======
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffde 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	0adb      	lsrs	r3, r3, #11
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	0800796c 	.word	0x0800796c

08003e3c <HAL_RCC_GetClockConfig>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
=======
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
<<<<<<< HEAD
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	220f      	movs	r2, #15
 8002192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCC_GetClockConfig+0x58>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	08db      	lsrs	r3, r3, #3
 80021be:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	611a      	str	r2, [r3, #16]
=======
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	220f      	movs	r2, #15
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <HAL_RCC_GetClockConfig+0x58>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f003 0203 	and.w	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <HAL_RCC_GetClockConfig+0x58>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e64:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <HAL_RCC_GetClockConfig+0x58>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_RCC_GetClockConfig+0x58>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	08db      	lsrs	r3, r3, #3
 8003e76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
<<<<<<< HEAD
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetClockConfig+0x5c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0207 	and.w	r2, r3, #7
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	601a      	str	r2, [r3, #0]
=======
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0207 	and.w	r2, r3, #7
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
<<<<<<< HEAD
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40022000 	.word	0x40022000

080021e4 <RCC_Delay>:
=======
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40022000 	.word	0x40022000

08003e9c <RCC_Delay>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <RCC_Delay+0x34>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <RCC_Delay+0x38>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	0a5b      	lsrs	r3, r3, #9
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002200:	bf00      	nop
  }
  while (Delay --);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1e5a      	subs	r2, r3, #1
 8002206:	60fa      	str	r2, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <RCC_Delay+0x1c>
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000000 	.word	0x20000000
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d07d      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	61d3      	str	r3, [r2, #28]
 8002258:	4b49      	ldr	r3, [pc, #292]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002264:	2301      	movs	r3, #1
 8002266:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002270:	2b00      	cmp	r3, #0
 8002272:	d118      	bne.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800227e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002280:	f7fe fcf4 	bl	8000c6c <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	e008      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002288:	f7fe fcf0 	bl	8000c6c <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e06d      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0f0      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022a6:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02e      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d027      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022c4:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ea:	f7fe fcbf 	bl	8000c6c <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fcbb 	bl	8000c6c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e036      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4917      	ldr	r1, [pc, #92]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	4313      	orrs	r3, r2
 8002324:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	490b      	ldr	r1, [pc, #44]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002362:	4b07      	ldr	r3, [pc, #28]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4904      	ldr	r1, [pc, #16]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	40007000 	.word	0x40007000
 8002388:	42420440 	.word	0x42420440

0800238c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b08d      	sub	sp, #52	; 0x34
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002394:	4b55      	ldr	r3, [pc, #340]	; (80024ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002396:	f107 040c 	add.w	r4, r7, #12
 800239a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800239c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023a0:	4b53      	ldr	r3, [pc, #332]	; (80024f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d07f      	beq.n	80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80023c0:	2b10      	cmp	r3, #16
 80023c2:	d002      	beq.n	80023ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d048      	beq.n	800245a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023c8:	e08b      	b.n	80024e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80023ca:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023d0:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d07f      	beq.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	0c9b      	lsrs	r3, r3, #18
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80023e8:	4413      	add	r3, r2
 80023ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023ee:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d018      	beq.n	800242c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0c5b      	lsrs	r3, r3, #17
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002408:	4413      	add	r3, r2
 800240a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00d      	beq.n	8002436 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800241a:	4a37      	ldr	r2, [pc, #220]	; (80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242a:	e004      	b.n	8002436 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	4a33      	ldr	r2, [pc, #204]	; (80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002430:	fb02 f303 	mul.w	r3, r2, r3
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002442:	d102      	bne.n	800244a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002448:	e048      	b.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4a2c      	ldr	r2, [pc, #176]	; (8002500 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002458:	e040      	b.n	80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800245a:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800246a:	d108      	bne.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
 800247c:	e01f      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002488:	d109      	bne.n	800249e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002496:	f649 4340 	movw	r3, #40000	; 0x9c40
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
 800249c:	e00f      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024a8:	d11a      	bne.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d014      	beq.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80024b6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024bc:	e010      	b.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80024be:	e00f      	b.n	80024e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024c0:	f7ff fe4c 	bl	800215c <HAL_RCC_GetPCLK2Freq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	0b9b      	lsrs	r3, r3, #14
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	3301      	adds	r3, #1
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80024dc:	bf00      	nop
 80024de:	e000      	b.n	80024e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80024e0:	bf00      	nop
    }
  }
  return (frequency);
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3734      	adds	r7, #52	; 0x34
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	08005aa4 	.word	0x08005aa4
 80024f0:	08005ab4 	.word	0x08005ab4
 80024f4:	40021000 	.word	0x40021000
 80024f8:	007a1200 	.word	0x007a1200
 80024fc:	003d0900 	.word	0x003d0900
 8002500:	aaaaaaab 	.word	0xaaaaaaab

08002504 <HAL_TIM_Base_Init>:
=======
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <RCC_Delay+0x34>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <RCC_Delay+0x38>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0a5b      	lsrs	r3, r3, #9
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eb8:	bf00      	nop
  }
  while (Delay --);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	60fa      	str	r2, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f9      	bne.n	8003eb8 <RCC_Delay+0x1c>
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	10624dd3 	.word	0x10624dd3

08003ed8 <HAL_TIM_Base_Init>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e041      	b.n	800259a <HAL_TIM_Base_Init+0x96>
=======
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e041      	b.n	8003f6e <HAL_TIM_Base_Init+0x96>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fa26 	bl	800097c <HAL_TIM_Base_MspInit>
=======
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fe ff44 	bl	8002d8c <HAL_TIM_Base_MspInit>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f000 fa64 	bl	8002a10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_TIM_Base_Start_IT>:
=======
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3304      	adds	r3, #4
 8003f14:	4619      	mov	r1, r3
 8003f16:	4610      	mov	r0, r2
 8003f18:	f000 fa70 	bl	80043fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <HAL_TIM_Base_Start_IT>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
=======
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d001      	beq.n	80025bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e03a      	b.n	8002632 <HAL_TIM_Base_Start_IT+0x8e>
=======
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e03a      	b.n	8004006 <HAL_TIM_Base_Start_IT+0x8e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_TIM_Base_Start_IT+0x98>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00e      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e6:	d009      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <HAL_TIM_Base_Start_IT+0x9c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_TIM_Base_Start_IT+0x58>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_TIM_Base_Start_IT+0xa0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d111      	bne.n	8002620 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b06      	cmp	r3, #6
 800260c:	d010      	beq.n	8002630 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0201 	orr.w	r2, r2, #1
 800261c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261e:	e007      	b.n	8002630 <HAL_TIM_Base_Start_IT+0x8c>
=======
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a18      	ldr	r2, [pc, #96]	; (8004010 <HAL_TIM_Base_Start_IT+0x98>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00e      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fba:	d009      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <HAL_TIM_Base_Start_IT+0x9c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x58>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a13      	ldr	r2, [pc, #76]	; (8004018 <HAL_TIM_Base_Start_IT+0xa0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d111      	bne.n	8003ff4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d010      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0201 	orr.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ff2:	e007      	b.n	8004004 <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
=======
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	bc80      	pop	{r7}
 800263a:	4770      	bx	lr
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800

08002648 <HAL_TIM_IRQHandler>:
=======
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800

0800401c <HAL_TIM_IRQHandler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b02      	cmp	r3, #2
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0202 	mvn.w	r2, #2
 8002674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x4a>
=======
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d122      	bne.n	8004078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b02      	cmp	r3, #2
 800403e:	d11b      	bne.n	8004078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0202 	mvn.w	r2, #2
 8004048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9a4 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x56>
=======
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f9b1 	bl	80043c6 <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0x56>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f997 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f9a6 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
=======
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f9a4 	bl	80043b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f9b3 	bl	80043d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0204 	mvn.w	r2, #4
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x9e>
=======
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b04      	cmp	r3, #4
 8004084:	d122      	bne.n	80040cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b04      	cmp	r3, #4
 8004092:	d11b      	bne.n	80040cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0204 	mvn.w	r2, #4
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f97a 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0xaa>
=======
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f987 	bl	80043c6 <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f96d 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f97c 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
=======
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f97a 	bl	80043b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f989 	bl	80043d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b08      	cmp	r3, #8
 8002704:	d122      	bne.n	800274c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b08      	cmp	r3, #8
 8002712:	d11b      	bne.n	800274c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0208 	mvn.w	r2, #8
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2204      	movs	r2, #4
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0xf2>
=======
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d122      	bne.n	8004120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d11b      	bne.n	8004120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f06f 0208 	mvn.w	r2, #8
 80040f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2204      	movs	r2, #4
 80040f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_TIM_IRQHandler+0xf2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f950 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0xfe>
=======
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f95d 	bl	80043c6 <HAL_TIM_IC_CaptureCallback>
 800410c:	e005      	b.n	800411a <HAL_TIM_IRQHandler+0xfe>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f943 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f952 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
=======
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f950 	bl	80043b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f95f 	bl	80043d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	771a      	strb	r2, [r3, #28]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b10      	cmp	r3, #16
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0310 	and.w	r3, r3, #16
 8002764:	2b10      	cmp	r3, #16
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0210 	mvn.w	r2, #16
 8002770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2208      	movs	r2, #8
 8002776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x146>
=======
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	2b10      	cmp	r3, #16
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b10      	cmp	r3, #16
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0210 	mvn.w	r2, #16
 8004144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2208      	movs	r2, #8
 800414a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x146>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f926 	bl	80029d8 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0x152>
=======
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f933 	bl	80043c6 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x152>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f919 	bl	80029c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f928 	bl	80029ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
=======
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f926 	bl	80043b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f935 	bl	80043d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10e      	bne.n	80027cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d107      	bne.n	80027cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0201 	mvn.w	r2, #1
 80027c4:	611a      	str	r2, [r3, #16]
=======
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b01      	cmp	r3, #1
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0201 	mvn.w	r2, #1
 8004198:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fd ffda 	bl	8000780 <HAL_TIM_PeriodElapsedCallback>
=======
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fd32 	bl	8002c04 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	2b80      	cmp	r3, #128	; 0x80
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027f0:	611a      	str	r2, [r3, #16]
=======
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b80      	cmp	r3, #128	; 0x80
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d107      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041c4:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa6b 	bl	8002cce <HAL_TIMEx_BreakCallback>
=======
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa77 	bl	80046ba <HAL_TIMEx_BreakCallback>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800281c:	611a      	str	r2, [r3, #16]
=======
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b40      	cmp	r3, #64	; 0x40
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041f0:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8ec 	bl	80029fc <HAL_TIM_TriggerCallback>
=======
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8f9 	bl	80043ea <HAL_TIM_TriggerCallback>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b20      	cmp	r3, #32
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b20      	cmp	r3, #32
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0220 	mvn.w	r2, #32
 8002848:	611a      	str	r2, [r3, #16]
=======
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b20      	cmp	r3, #32
 8004204:	d10e      	bne.n	8004224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b20      	cmp	r3, #32
 8004212:	d107      	bne.n	8004224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0220 	mvn.w	r2, #32
 800421c:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa36 	bl	8002cbc <HAL_TIMEx_CommutCallback>
=======
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 fa42 	bl	80046a8 <HAL_TIMEx_CommutCallback>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_TIM_ConfigClockSource>:
=======
 8004224:	bf00      	nop
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_ConfigClockSource>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
=======
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIM_ConfigClockSource+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e0a6      	b.n	80029be <HAL_TIM_ConfigClockSource+0x166>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2202      	movs	r2, #2
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIM_ConfigClockSource+0x18>
 8004240:	2302      	movs	r3, #2
 8004242:	e0b3      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x180>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800288e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002896:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b40      	cmp	r3, #64	; 0x40
 80028a6:	d067      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x120>
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d80b      	bhi.n	80028c4 <HAL_TIM_ConfigClockSource+0x6c>
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d073      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d802      	bhi.n	80028ba <HAL_TIM_ConfigClockSource+0x62>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d06f      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
=======
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427c:	d03e      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0xd0>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	f200 8087 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x168>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	f000 8085 	beq.w	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004292:	d87f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 8004294:	2b70      	cmp	r3, #112	; 0x70
 8004296:	d01a      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0xa2>
 8004298:	2b70      	cmp	r3, #112	; 0x70
 800429a:	d87b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 800429c:	2b60      	cmp	r3, #96	; 0x60
 800429e:	d050      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x116>
 80042a0:	2b60      	cmp	r3, #96	; 0x60
 80042a2:	d877      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042a4:	2b50      	cmp	r3, #80	; 0x50
 80042a6:	d03c      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0xf6>
 80042a8:	2b50      	cmp	r3, #80	; 0x50
 80042aa:	d873      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	d058      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x136>
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d86f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042b4:	2b30      	cmp	r3, #48	; 0x30
 80042b6:	d064      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x156>
 80042b8:	2b30      	cmp	r3, #48	; 0x30
 80042ba:	d86b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d060      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x156>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d867      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05c      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x156>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d05a      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x156>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
<<<<<<< HEAD
 80028b8:	e078      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d06c      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
 80028be:	2b30      	cmp	r3, #48	; 0x30
 80028c0:	d06a      	beq.n	8002998 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80028c2:	e073      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028c4:	2b70      	cmp	r3, #112	; 0x70
 80028c6:	d00d      	beq.n	80028e4 <HAL_TIM_ConfigClockSource+0x8c>
 80028c8:	2b70      	cmp	r3, #112	; 0x70
 80028ca:	d804      	bhi.n	80028d6 <HAL_TIM_ConfigClockSource+0x7e>
 80028cc:	2b50      	cmp	r3, #80	; 0x50
 80028ce:	d033      	beq.n	8002938 <HAL_TIM_ConfigClockSource+0xe0>
 80028d0:	2b60      	cmp	r3, #96	; 0x60
 80028d2:	d041      	beq.n	8002958 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028d4:	e06a      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028da:	d066      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x152>
 80028dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e0:	d017      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028e2:	e063      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f000 f965 	bl	8002bc2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002906:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	609a      	str	r2, [r3, #8]
      break;
 8002910:	e04c      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f000 f94e 	bl	8002bc2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002934:	609a      	str	r2, [r3, #8]
      break;
 8002936:	e039      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	461a      	mov	r2, r3
 8002946:	f000 f8c5 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2150      	movs	r1, #80	; 0x50
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f91c 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002956:	e029      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	461a      	mov	r2, r3
 8002966:	f000 f8e3 	bl	8002b30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2160      	movs	r1, #96	; 0x60
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f90c 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002976:	e019      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	461a      	mov	r2, r3
 8002986:	f000 f8a5 	bl	8002ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2140      	movs	r1, #64	; 0x40
 8002990:	4618      	mov	r0, r3
 8002992:	f000 f8fc 	bl	8002b8e <TIM_ITRx_SetConfig>
      break;
 8002996:	e009      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 f8f3 	bl	8002b8e <TIM_ITRx_SetConfig>
        break;
 80029a8:	e000      	b.n	80029ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80029aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80042cc:	e062      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f000 f966 	bl	80045ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	609a      	str	r2, [r3, #8]
      break;
 80042fa:	e04e      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f000 f94f 	bl	80045ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431e:	609a      	str	r2, [r3, #8]
      break;
 8004320:	e03b      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	461a      	mov	r2, r3
 8004330:	f000 f8c6 	bl	80044c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2150      	movs	r1, #80	; 0x50
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f91d 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8004340:	e02b      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	461a      	mov	r2, r3
 8004350:	f000 f8e4 	bl	800451c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2160      	movs	r1, #96	; 0x60
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f90d 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8004360:	e01b      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	461a      	mov	r2, r3
 8004370:	f000 f8a6 	bl	80044c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2140      	movs	r1, #64	; 0x40
 800437a:	4618      	mov	r0, r3
 800437c:	f000 f8fd 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8004380:	e00b      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f000 f8f4 	bl	800457a <TIM_ITRx_SetConfig>
        break;
 8004392:	e002      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
=======
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_IC_CaptureCallback>:
=======
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
=======
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
=======
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <HAL_TIM_TriggerCallback>:
=======
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <HAL_TIM_TriggerCallback>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
=======
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr
	...

08002a10 <TIM_Base_SetConfig>:
=======
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bc80      	pop	{r7}
 80043fa:	4770      	bx	lr

080043fc <TIM_Base_SetConfig>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a29      	ldr	r2, [pc, #164]	; (8002ac8 <TIM_Base_SetConfig+0xb8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00b      	beq.n	8002a40 <TIM_Base_SetConfig+0x30>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d007      	beq.n	8002a40 <TIM_Base_SetConfig+0x30>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <TIM_Base_SetConfig+0xbc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d003      	beq.n	8002a40 <TIM_Base_SetConfig+0x30>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <TIM_Base_SetConfig+0xc0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d108      	bne.n	8002a52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <TIM_Base_SetConfig+0xb8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <TIM_Base_SetConfig+0x62>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a60:	d007      	beq.n	8002a72 <TIM_Base_SetConfig+0x62>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <TIM_Base_SetConfig+0xbc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_Base_SetConfig+0x62>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <TIM_Base_SetConfig+0xc0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
=======
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <TIM_Base_SetConfig+0xb8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_Base_SetConfig+0x30>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0x30>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a26      	ldr	r2, [pc, #152]	; (80044b8 <TIM_Base_SetConfig+0xbc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0x30>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a25      	ldr	r2, [pc, #148]	; (80044bc <TIM_Base_SetConfig+0xc0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <TIM_Base_SetConfig+0xb8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00b      	beq.n	800445e <TIM_Base_SetConfig+0x62>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444c:	d007      	beq.n	800445e <TIM_Base_SetConfig+0x62>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <TIM_Base_SetConfig+0xbc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d003      	beq.n	800445e <TIM_Base_SetConfig+0x62>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a18      	ldr	r2, [pc, #96]	; (80044bc <TIM_Base_SetConfig+0xc0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d108      	bne.n	8004470 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <TIM_Base_SetConfig+0xb8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d103      	bne.n	8002ab8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <TIM_Base_SetConfig+0xb8>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d103      	bne.n	80044a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	615a      	str	r2, [r3, #20]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800

08002ad4 <TIM_TI1_ConfigInputStage>:
=======
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	615a      	str	r2, [r3, #20]
}
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	40012c00 	.word	0x40012c00
 80044b8:	40000400 	.word	0x40000400
 80044bc:	40000800 	.word	0x40000800

080044c0 <TIM_TI1_ConfigInputStage>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
=======
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f023 0201 	bic.w	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 030a 	bic.w	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <TIM_TI2_ConfigInputStage>:
=======
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0201 	bic.w	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f023 030a 	bic.w	r3, r3, #10
 80044fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <TIM_TI2_ConfigInputStage>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
=======
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	f023 0210 	bic.w	r2, r3, #16
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	031b      	lsls	r3, r3, #12
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	621a      	str	r2, [r3, #32]
}
 8002b84:	bf00      	nop
 8002b86:	371c      	adds	r7, #28
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <TIM_ITRx_SetConfig>:
=======
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f023 0210 	bic.w	r2, r3, #16
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004546:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	031b      	lsls	r3, r3, #12
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004558:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <TIM_ITRx_SetConfig>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	6039      	str	r1, [r7, #0]
=======
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f043 0307 	orr.w	r3, r3, #7
 8002bb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	609a      	str	r2, [r3, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <TIM_ETR_SetConfig>:
=======
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	f043 0307 	orr.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bc80      	pop	{r7}
 80045ac:	4770      	bx	lr

080045ae <TIM_ETR_SetConfig>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8002bc2:	b480      	push	{r7}
 8002bc4:	b087      	sub	sp, #28
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	021a      	lsls	r2, r3, #8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	609a      	str	r2, [r3, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80045ae:	b480      	push	{r7}
 80045b0:	b087      	sub	sp, #28
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	021a      	lsls	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	609a      	str	r2, [r3, #8]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
=======
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e046      	b.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00e      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c64:	d009      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a12      	ldr	r2, [pc, #72]	; (8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d004      	beq.n	8002c7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a10      	ldr	r2, [pc, #64]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d10c      	bne.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	609a      	str	r2, [r3, #8]
=======
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d101      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004600:	2302      	movs	r3, #2
 8004602:	e046      	b.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a16      	ldr	r2, [pc, #88]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00e      	beq.n	8004666 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d009      	beq.n	8004666 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d004      	beq.n	8004666 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a10      	ldr	r2, [pc, #64]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d10c      	bne.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800466c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	4313      	orrs	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	609a      	str	r2, [r3, #8]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40000400 	.word	0x40000400
 8002cb8:	40000800 	.word	0x40000800

08002cbc <HAL_TIMEx_CommutCallback>:
=======
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	40012c00 	.word	0x40012c00
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000800 	.word	0x40000800

080046a8 <HAL_TIMEx_CommutCallback>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
=======
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIMEx_BreakCallback>:
=======
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr

080046ba <HAL_TIMEx_BreakCallback>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
=======
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_UART_Init>:
=======
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr

080046cc <HAL_UART_Init>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e03f      	b.n	8002d72 <HAL_UART_Init+0x92>
=======
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e03f      	b.n	800475e <HAL_UART_Init+0x92>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd fe54 	bl	80009b4 <HAL_UART_MspInit>
=======
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fe fb66 	bl	8002dc4 <HAL_UART_MspInit>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f829 	bl	8002d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <UART_SetConfig>:
=======
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2224      	movs	r2, #36	; 0x24
 80046fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800470e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f9a3 	bl	8004a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004724:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004734:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68da      	ldr	r2, [r3, #12]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004744:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b08a      	sub	sp, #40	; 0x28
 800476a:	af02      	add	r7, sp, #8
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b20      	cmp	r3, #32
 8004784:	d17c      	bne.n	8004880 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_UART_Transmit+0x2c>
 800478c:	88fb      	ldrh	r3, [r7, #6]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e075      	b.n	8004882 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_UART_Transmit+0x3e>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e06e      	b.n	8004882 <HAL_UART_Transmit+0x11c>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2221      	movs	r2, #33	; 0x21
 80047b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80047ba:	f7fe fc5f 	bl	800307c <HAL_GetTick>
 80047be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	88fa      	ldrh	r2, [r7, #6]
 80047c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d108      	bne.n	80047e8 <HAL_UART_Transmit+0x82>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d104      	bne.n	80047e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e003      	b.n	80047f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80047f8:	e02a      	b.n	8004850 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2200      	movs	r2, #0
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f8df 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e036      	b.n	8004882 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004828:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	3302      	adds	r3, #2
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	e007      	b.n	8004842 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1cf      	bne.n	80047fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2200      	movs	r2, #0
 8004862:	2140      	movs	r1, #64	; 0x40
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f8af 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e006      	b.n	8004882 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b08a      	sub	sp, #40	; 0x28
 800488e:	af02      	add	r7, sp, #8
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	4613      	mov	r3, r2
 8004898:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	f040 8089 	bne.w	80049be <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_UART_Receive+0x2e>
 80048b2:	88fb      	ldrh	r3, [r7, #6]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e081      	b.n	80049c0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_UART_Receive+0x40>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e07a      	b.n	80049c0 <HAL_UART_Receive+0x136>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2222      	movs	r2, #34	; 0x22
 80048dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80048e0:	f7fe fbcc 	bl	800307c <HAL_GetTick>
 80048e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	88fa      	ldrh	r2, [r7, #6]
 80048ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	88fa      	ldrh	r2, [r7, #6]
 80048f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fa:	d108      	bne.n	800490e <HAL_UART_Receive+0x84>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	e003      	b.n	8004916 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800491e:	e043      	b.n	80049a8 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	2200      	movs	r2, #0
 8004928:	2120      	movs	r1, #32
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 f84c 	bl	80049c8 <UART_WaitOnFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e042      	b.n	80049c0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10c      	bne.n	800495a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800494c:	b29a      	uxth	r2, r3
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	3302      	adds	r3, #2
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e01f      	b.n	800499a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004962:	d007      	beq.n	8004974 <HAL_UART_Receive+0xea>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <HAL_UART_Receive+0xf8>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	e008      	b.n	8004994 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800498e:	b2da      	uxtb	r2, r3
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	3301      	adds	r3, #1
 8004998:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1b6      	bne.n	8004920 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e000      	b.n	80049c0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80049be:	2302      	movs	r3, #2
  }
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3720      	adds	r7, #32
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d8:	e02c      	b.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d028      	beq.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80049e8:	f7fe fb48 	bl	800307c <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d21d      	bcs.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68da      	ldr	r2, [r3, #12]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a06:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e00f      	b.n	8004a54 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	bf0c      	ite	eq
 8004a44:	2301      	moveq	r3, #1
 8004a46:	2300      	movne	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d0c3      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_SetConfig>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
=======
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	611a      	str	r2, [r3, #16]
=======
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002db6:	f023 030c 	bic.w	r3, r3, #12
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	60d3      	str	r3, [r2, #12]
=======
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a96:	f023 030c 	bic.w	r3, r3, #12
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6812      	ldr	r2, [r2, #0]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	430b      	orrs	r3, r1
 8004aa2:	60d3      	str	r3, [r2, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <UART_SetConfig+0x114>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d103      	bne.n	8002dec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002de4:	f7ff f9ba 	bl	800215c <HAL_RCC_GetPCLK2Freq>
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	e002      	b.n	8002df2 <UART_SetConfig+0x76>
=======
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a2c      	ldr	r2, [pc, #176]	; (8004b70 <UART_SetConfig+0x114>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d103      	bne.n	8004acc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7ff f9a6 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	e002      	b.n	8004ad2 <UART_SetConfig+0x76>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8002dec:	f7ff f9a2 	bl	8002134 <HAL_RCC_GetPCLK1Freq>
 8002df0:	60f8      	str	r0, [r7, #12]
=======
 8004acc:	f7ff f98e 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 8004ad0:	60f8      	str	r0, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	009a      	lsls	r2, r3, #2
 8002dfc:	441a      	add	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	4a22      	ldr	r2, [pc, #136]	; (8002e94 <UART_SetConfig+0x118>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	0119      	lsls	r1, r3, #4
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009a      	lsls	r2, r3, #2
 8002e1c:	441a      	add	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <UART_SetConfig+0x118>)
 8002e2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2064      	movs	r0, #100	; 0x64
 8002e32:	fb00 f303 	mul.w	r3, r0, r3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	3332      	adds	r3, #50	; 0x32
 8002e3c:	4a15      	ldr	r2, [pc, #84]	; (8002e94 <UART_SetConfig+0x118>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e48:	4419      	add	r1, r3
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	009a      	lsls	r2, r3, #2
 8002e54:	441a      	add	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <UART_SetConfig+0x118>)
 8002e62:	fba3 0302 	umull	r0, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2064      	movs	r0, #100	; 0x64
 8002e6a:	fb00 f303 	mul.w	r3, r0, r3
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	3332      	adds	r3, #50	; 0x32
 8002e74:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <UART_SetConfig+0x118>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	f003 020f 	and.w	r2, r3, #15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	440a      	add	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40013800 	.word	0x40013800
 8002e94:	51eb851f 	.word	0x51eb851f

08002e98 <osKernelInitialize>:
=======
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	009a      	lsls	r2, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <UART_SetConfig+0x118>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	095b      	lsrs	r3, r3, #5
 8004af0:	0119      	lsls	r1, r3, #4
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	441a      	add	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <UART_SetConfig+0x118>)
 8004b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2064      	movs	r0, #100	; 0x64
 8004b12:	fb00 f303 	mul.w	r3, r0, r3
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	3332      	adds	r3, #50	; 0x32
 8004b1c:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <UART_SetConfig+0x118>)
 8004b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b28:	4419      	add	r1, r3
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	009a      	lsls	r2, r3, #2
 8004b34:	441a      	add	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b40:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <UART_SetConfig+0x118>)
 8004b42:	fba3 0302 	umull	r0, r3, r3, r2
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2064      	movs	r0, #100	; 0x64
 8004b4a:	fb00 f303 	mul.w	r3, r0, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	3332      	adds	r3, #50	; 0x32
 8004b54:	4a07      	ldr	r2, [pc, #28]	; (8004b74 <UART_SetConfig+0x118>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	440a      	add	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40013800 	.word	0x40013800
 8004b74:	51eb851f 	.word	0x51eb851f

08004b78 <osKernelInitialize>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
<<<<<<< HEAD
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
=======
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
<<<<<<< HEAD
 8002e9e:	f3ef 8305 	mrs	r3, IPSR
 8002ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10f      	bne.n	8002eca <osKernelInitialize+0x32>
=======
 8004b7e:	f3ef 8305 	mrs	r3, IPSR
 8004b82:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10f      	bne.n	8004baa <osKernelInitialize+0x32>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
<<<<<<< HEAD
 8002eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8002eae:	607b      	str	r3, [r7, #4]
  return(result);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <osKernelInitialize+0x32>
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <osKernelInitialize+0x60>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d109      	bne.n	8002ed2 <osKernelInitialize+0x3a>
=======
 8004b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8e:	607b      	str	r3, [r7, #4]
  return(result);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <osKernelInitialize+0x32>
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <osKernelInitialize+0x60>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d109      	bne.n	8004bb2 <osKernelInitialize+0x3a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
<<<<<<< HEAD
 8002ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8002ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002eca:	f06f 0305 	mvn.w	r3, #5
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e00c      	b.n	8002eec <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <osKernelInitialize+0x60>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <osKernelInitialize+0x4e>
=======
 8004b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004baa:	f06f 0305 	mvn.w	r3, #5
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	e00c      	b.n	8004bcc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <osKernelInitialize+0x60>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <osKernelInitialize+0x4e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
<<<<<<< HEAD
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <osKernelInitialize+0x60>)
 8002edc:	2201      	movs	r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e002      	b.n	8002eec <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	60fb      	str	r3, [r7, #12]
=======
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <osKernelInitialize+0x60>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	e002      	b.n	8004bcc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	60fb      	str	r3, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
  }

  return (stat);
<<<<<<< HEAD
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr
 8002ef8:	2000002c 	.word	0x2000002c

08002efc <osKernelStart>:
=======
 8004bcc:	68fb      	ldr	r3, [r7, #12]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	2000002c 	.word	0x2000002c

08004bdc <osKernelStart>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  }

  return (state);
}

osStatus_t osKernelStart (void) {
<<<<<<< HEAD
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f02:	f3ef 8305 	mrs	r3, IPSR
 8002f06:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10f      	bne.n	8002f2e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f12:	607b      	str	r3, [r7, #4]
  return(result);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <osKernelStart+0x32>
 8002f1a:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <osKernelStart+0x64>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d109      	bne.n	8002f36 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f22:	f3ef 8311 	mrs	r3, BASEPRI
 8002f26:	603b      	str	r3, [r7, #0]
  return(result);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002f2e:	f06f 0305 	mvn.w	r3, #5
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e00e      	b.n	8002f54 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <osKernelStart+0x64>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d107      	bne.n	8002f4e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <osKernelStart+0x64>)
 8002f40:	2202      	movs	r2, #2
 8002f42:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002f44:	f001 f926 	bl	8004194 <vTaskStartScheduler>
      stat = osOK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e002      	b.n	8002f54 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	60fb      	str	r3, [r7, #12]
=======
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004be2:	f3ef 8305 	mrs	r3, IPSR
 8004be6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004be8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10f      	bne.n	8004c0e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bee:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf2:	607b      	str	r3, [r7, #4]
  return(result);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <osKernelStart+0x32>
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <osKernelStart+0x64>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d109      	bne.n	8004c16 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c02:	f3ef 8311 	mrs	r3, BASEPRI
 8004c06:	603b      	str	r3, [r7, #0]
  return(result);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004c0e:	f06f 0305 	mvn.w	r3, #5
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e00e      	b.n	8004c34 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <osKernelStart+0x64>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <osKernelStart+0x64>)
 8004c20:	2202      	movs	r2, #2
 8004c22:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004c24:	f001 f93c 	bl	8005ea0 <vTaskStartScheduler>
      stat = osOK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e002      	b.n	8004c34 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	60fb      	str	r3, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
  }

  return (stat);
<<<<<<< HEAD
 8002f54:	68fb      	ldr	r3, [r7, #12]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2000002c 	.word	0x2000002c

08002f64 <osThreadNew>:
=======
 8004c34:	68fb      	ldr	r3, [r7, #12]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	2000002c 	.word	0x2000002c

08004c44 <osThreadNew>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
<<<<<<< HEAD
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b092      	sub	sp, #72	; 0x48
 8002f68:	af04      	add	r7, sp, #16
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
=======
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b092      	sub	sp, #72	; 0x48
 8004c48:	af04      	add	r7, sp, #16
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
<<<<<<< HEAD
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f74:	f3ef 8305 	mrs	r3, IPSR
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 8094 	bne.w	80030aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f82:	f3ef 8310 	mrs	r3, PRIMASK
 8002f86:	623b      	str	r3, [r7, #32]
  return(result);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 808d 	bne.w	80030aa <osThreadNew+0x146>
 8002f90:	4b48      	ldr	r3, [pc, #288]	; (80030b4 <osThreadNew+0x150>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d106      	bne.n	8002fa6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f98:	f3ef 8311 	mrs	r3, BASEPRI
 8002f9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 8082 	bne.w	80030aa <osThreadNew+0x146>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d07e      	beq.n	80030aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002fb0:	2318      	movs	r3, #24
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002fb8:	f107 031b 	add.w	r3, r7, #27
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d045      	beq.n	8003056 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <osThreadNew+0x74>
        name = attr->name;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <osThreadNew+0x9a>
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b38      	cmp	r3, #56	; 0x38
 8002ff0:	d805      	bhi.n	8002ffe <osThreadNew+0x9a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <osThreadNew+0x9e>
        return (NULL);
 8002ffe:	2300      	movs	r3, #0
 8003000:	e054      	b.n	80030ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00e      	beq.n	8003038 <osThreadNew+0xd4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b5b      	cmp	r3, #91	; 0x5b
 8003020:	d90a      	bls.n	8003038 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <osThreadNew+0xd4>
        mem = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
 8003036:	e010      	b.n	800305a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10c      	bne.n	800305a <osThreadNew+0xf6>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d108      	bne.n	800305a <osThreadNew+0xf6>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <osThreadNew+0xf6>
          mem = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
 8003054:	e001      	b.n	800305a <osThreadNew+0xf6>
=======
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c54:	f3ef 8305 	mrs	r3, IPSR
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f040 8094 	bne.w	8004d8a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c62:	f3ef 8310 	mrs	r3, PRIMASK
 8004c66:	623b      	str	r3, [r7, #32]
  return(result);
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 808d 	bne.w	8004d8a <osThreadNew+0x146>
 8004c70:	4b48      	ldr	r3, [pc, #288]	; (8004d94 <osThreadNew+0x150>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d106      	bne.n	8004c86 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c78:	f3ef 8311 	mrs	r3, BASEPRI
 8004c7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 8082 	bne.w	8004d8a <osThreadNew+0x146>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d07e      	beq.n	8004d8a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004c8c:	2380      	movs	r3, #128	; 0x80
 8004c8e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004c90:	2318      	movs	r3, #24
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004c94:	2300      	movs	r3, #0
 8004c96:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004c98:	f107 031b 	add.w	r3, r7, #27
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d045      	beq.n	8004d36 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <osThreadNew+0x74>
        name = attr->name;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <osThreadNew+0x9a>
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	2b38      	cmp	r3, #56	; 0x38
 8004cd0:	d805      	bhi.n	8004cde <osThreadNew+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <osThreadNew+0x9e>
        return (NULL);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e054      	b.n	8004d8c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00e      	beq.n	8004d18 <osThreadNew+0xd4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	2b5b      	cmp	r3, #91	; 0x5b
 8004d00:	d90a      	bls.n	8004d18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <osThreadNew+0xd4>
        mem = 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d16:	e010      	b.n	8004d3a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10c      	bne.n	8004d3a <osThreadNew+0xf6>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <osThreadNew+0xf6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <osThreadNew+0xf6>
          mem = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d34:	e001      	b.n	8004d3a <osThreadNew+0xf6>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 8003056:	2300      	movs	r3, #0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2b01      	cmp	r3, #1
 800305e:	d110      	bne.n	8003082 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003068:	9202      	str	r2, [sp, #8]
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003074:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 fec4 	bl	8003e04 <xTaskCreateStatic>
 800307c:	4603      	mov	r3, r0
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e013      	b.n	80030aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	d110      	bne.n	80030aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	b29a      	uxth	r2, r3
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 ff0b 	bl	8003eb6 <xTaskCreate>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d001      	beq.n	80030aa <osThreadNew+0x146>
          hTask = NULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
=======
 8004d36:	2300      	movs	r3, #0
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d110      	bne.n	8004d62 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d48:	9202      	str	r2, [sp, #8]
 8004d4a:	9301      	str	r3, [sp, #4]
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fed6 	bl	8005b08 <xTaskCreateStatic>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e013      	b.n	8004d8a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d110      	bne.n	8004d8a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 ff20 	bl	8005bc0 <xTaskCreate>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d001      	beq.n	8004d8a <osThreadNew+0x146>
          hTask = NULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
<<<<<<< HEAD
 80030aa:	697b      	ldr	r3, [r7, #20]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3738      	adds	r7, #56	; 0x38
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	2000002c 	.word	0x2000002c

080030b8 <osDelay>:
=======
 8004d8a:	697b      	ldr	r3, [r7, #20]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3738      	adds	r7, #56	; 0x38
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	2000002c 	.word	0x2000002c

08004d98 <osDelay>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
<<<<<<< HEAD
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c0:	f3ef 8305 	mrs	r3, IPSR
 80030c4:	613b      	str	r3, [r7, #16]
  return(result);
 80030c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10f      	bne.n	80030ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030cc:	f3ef 8310 	mrs	r3, PRIMASK
 80030d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <osDelay+0x34>
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <osDelay+0x58>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d109      	bne.n	80030f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030e0:	f3ef 8311 	mrs	r3, BASEPRI
 80030e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <osDelay+0x3c>
    stat = osErrorISR;
 80030ec:	f06f 0305 	mvn.w	r3, #5
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	e007      	b.n	8003104 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <osDelay+0x4c>
      vTaskDelay(ticks);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f001 f814 	bl	800412c <vTaskDelay>
=======
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004da0:	f3ef 8305 	mrs	r3, IPSR
 8004da4:	613b      	str	r3, [r7, #16]
  return(result);
 8004da6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10f      	bne.n	8004dcc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <osDelay+0x34>
 8004db8:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <osDelay+0x58>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d109      	bne.n	8004dd4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dc0:	f3ef 8311 	mrs	r3, BASEPRI
 8004dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <osDelay+0x3c>
    stat = osErrorISR;
 8004dcc:	f06f 0305 	mvn.w	r3, #5
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	e007      	b.n	8004de4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f001 f82a 	bl	8005e38 <vTaskDelay>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
  }

  return (stat);
<<<<<<< HEAD
 8003104:	697b      	ldr	r3, [r7, #20]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000002c 	.word	0x2000002c

08003114 <osMessageQueueNew>:
=======
 8004de4:	697b      	ldr	r3, [r7, #20]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	2000002c 	.word	0x2000002c

08004df4 <osMessageQueueNew>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
<<<<<<< HEAD
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
=======
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08c      	sub	sp, #48	; 0x30
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
<<<<<<< HEAD
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003124:	f3ef 8305 	mrs	r3, IPSR
 8003128:	61bb      	str	r3, [r7, #24]
  return(result);
 800312a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800312c:	2b00      	cmp	r3, #0
 800312e:	d170      	bne.n	8003212 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003130:	f3ef 8310 	mrs	r3, PRIMASK
 8003134:	617b      	str	r3, [r7, #20]
  return(result);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d16a      	bne.n	8003212 <osMessageQueueNew+0xfe>
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <osMessageQueueNew+0x108>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d105      	bne.n	8003150 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003144:	f3ef 8311 	mrs	r3, BASEPRI
 8003148:	613b      	str	r3, [r7, #16]
  return(result);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d160      	bne.n	8003212 <osMessageQueueNew+0xfe>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d05d      	beq.n	8003212 <osMessageQueueNew+0xfe>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05a      	beq.n	8003212 <osMessageQueueNew+0xfe>
    mem = -1;
 800315c:	f04f 33ff 	mov.w	r3, #4294967295
 8003160:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d029      	beq.n	80031bc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <osMessageQueueNew+0x82>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b4f      	cmp	r3, #79	; 0x4f
 8003176:	d90e      	bls.n	8003196 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	429a      	cmp	r2, r3
 800318e:	d302      	bcc.n	8003196 <osMessageQueueNew+0x82>
        mem = 1;
 8003190:	2301      	movs	r3, #1
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	e014      	b.n	80031c0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d110      	bne.n	80031c0 <osMessageQueueNew+0xac>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10c      	bne.n	80031c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <osMessageQueueNew+0xac>
          mem = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	e001      	b.n	80031c0 <osMessageQueueNew+0xac>
=======
 8004e00:	2300      	movs	r3, #0
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e04:	f3ef 8305 	mrs	r3, IPSR
 8004e08:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e0a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d16f      	bne.n	8004ef0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e10:	f3ef 8310 	mrs	r3, PRIMASK
 8004e14:	617b      	str	r3, [r7, #20]
  return(result);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d169      	bne.n	8004ef0 <osMessageQueueNew+0xfc>
 8004e1c:	4b37      	ldr	r3, [pc, #220]	; (8004efc <osMessageQueueNew+0x108>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d105      	bne.n	8004e30 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e24:	f3ef 8311 	mrs	r3, BASEPRI
 8004e28:	613b      	str	r3, [r7, #16]
  return(result);
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d15f      	bne.n	8004ef0 <osMessageQueueNew+0xfc>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d05c      	beq.n	8004ef0 <osMessageQueueNew+0xfc>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d059      	beq.n	8004ef0 <osMessageQueueNew+0xfc>
    mem = -1;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d029      	beq.n	8004e9c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d012      	beq.n	8004e76 <osMessageQueueNew+0x82>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	2b4f      	cmp	r3, #79	; 0x4f
 8004e56:	d90e      	bls.n	8004e76 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d302      	bcc.n	8004e76 <osMessageQueueNew+0x82>
        mem = 1;
 8004e70:	2301      	movs	r3, #1
 8004e72:	623b      	str	r3, [r7, #32]
 8004e74:	e014      	b.n	8004ea0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d110      	bne.n	8004ea0 <osMessageQueueNew+0xac>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d108      	bne.n	8004ea0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <osMessageQueueNew+0xac>
          mem = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	e001      	b.n	8004ea0 <osMessageQueueNew+0xac>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
        }
      }
    }
    else {
      mem = 0;
<<<<<<< HEAD
 80031bc:	2300      	movs	r3, #0
 80031be:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d10c      	bne.n	80031e0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	2300      	movs	r3, #0
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	460b      	mov	r3, r1
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f96c 	bl	80034b4 <xQueueGenericCreateStatic>
 80031dc:	6278      	str	r0, [r7, #36]	; 0x24
 80031de:	e008      	b.n	80031f2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80031e6:	2200      	movs	r2, #0
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f9d4 	bl	8003598 <xQueueGenericCreate>
 80031f0:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10b      	bne.n	8004ebe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	9100      	str	r1, [sp, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f96d 	bl	8005194 <xQueueGenericCreateStatic>
 8004eba:	6278      	str	r0, [r7, #36]	; 0x24
 8004ebc:	e008      	b.n	8004ed0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d105      	bne.n	8004ed0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 f9da 	bl	8005282 <xQueueGenericCreate>
 8004ece:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
<<<<<<< HEAD
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <osMessageQueueNew+0xf2>
        name = attr->name;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61fb      	str	r3, [r7, #28]
 8003204:	e001      	b.n	800320a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800320a:	69f9      	ldr	r1, [r7, #28]
 800320c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800320e:	f000 fd9d 	bl	8003d4c <vQueueAddToRegistry>
=======
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e001      	b.n	8004ee8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004ee8:	69f9      	ldr	r1, [r7, #28]
 8004eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eec:	f000 fdb0 	bl	8005a50 <vQueueAddToRegistry>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
<<<<<<< HEAD
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003214:	4618      	mov	r0, r3
 8003216:	3728      	adds	r7, #40	; 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	2000002c 	.word	0x2000002c

08003220 <vApplicationGetIdleTaskMemory>:
=======
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3728      	adds	r7, #40	; 0x28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	2000002c 	.word	0x2000002c

08004f00 <vApplicationGetIdleTaskMemory>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
<<<<<<< HEAD
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a06      	ldr	r2, [pc, #24]	; (8003248 <vApplicationGetIdleTaskMemory+0x28>)
 8003230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4a05      	ldr	r2, [pc, #20]	; (800324c <vApplicationGetIdleTaskMemory+0x2c>)
 8003236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2280      	movs	r2, #128	; 0x80
 800323c:	601a      	str	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	20000030 	.word	0x20000030
 800324c:	2000008c 	.word	0x2000008c

08003250 <vApplicationGetTimerTaskMemory>:
=======
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	4a06      	ldr	r2, [pc, #24]	; (8004f28 <vApplicationGetIdleTaskMemory+0x28>)
 8004f10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a05      	ldr	r2, [pc, #20]	; (8004f2c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2280      	movs	r2, #128	; 0x80
 8004f1c:	601a      	str	r2, [r3, #0]
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr
 8004f28:	20000030 	.word	0x20000030
 8004f2c:	2000008c 	.word	0x2000008c

08004f30 <vApplicationGetTimerTaskMemory>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
<<<<<<< HEAD
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a07      	ldr	r2, [pc, #28]	; (800327c <vApplicationGetTimerTaskMemory+0x2c>)
 8003260:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a06      	ldr	r2, [pc, #24]	; (8003280 <vApplicationGetTimerTaskMemory+0x30>)
 8003266:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	2000028c 	.word	0x2000028c
 8003280:	200002e8 	.word	0x200002e8

08003284 <vListInitialise>:
=======
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4a07      	ldr	r2, [pc, #28]	; (8004f5c <vApplicationGetTimerTaskMemory+0x2c>)
 8004f40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a06      	ldr	r2, [pc, #24]	; (8004f60 <vApplicationGetTimerTaskMemory+0x30>)
 8004f46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f4e:	601a      	str	r2, [r3, #0]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	2000028c 	.word	0x2000028c
 8004f60:	200002e8 	.word	0x200002e8

08004f64 <vListInitialise>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
=======
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f103 0208 	add.w	r2, r3, #8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	605a      	str	r2, [r3, #4]
=======
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f103 0208 	add.w	r2, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	605a      	str	r2, [r3, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f04f 32ff 	mov.w	r2, #4294967295
 800329c:	609a      	str	r2, [r3, #8]
=======
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7c:	609a      	str	r2, [r3, #8]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f103 0208 	add.w	r2, r3, #8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f103 0208 	add.w	r2, r3, #8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
=======
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f103 0208 	add.w	r2, r3, #8
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f103 0208 	add.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <vListInitialiseItem>:
=======
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <vListInitialiseItem>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	611a      	str	r2, [r3, #16]
=======
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	611a      	str	r2, [r3, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <vListInsertEnd>:
=======
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <vListInsertEnd>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	60fb      	str	r3, [r7, #12]
=======
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	609a      	str	r2, [r3, #8]
=======
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	609a      	str	r2, [r3, #8]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <vListInsert>:
=======
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	601a      	str	r2, [r3, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr

08005000 <vListInsert>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60bb      	str	r3, [r7, #8]
=======
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60bb      	str	r3, [r7, #8]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d103      	bne.n	8003340 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e00c      	b.n	800335a <vListInsert+0x3a>
=======
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d103      	bne.n	8005020 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	60fb      	str	r3, [r7, #12]
 800501e:	e00c      	b.n	800503a <vListInsert+0x3a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3308      	adds	r3, #8
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e002      	b.n	800334e <vListInsert+0x2e>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	d2f6      	bcs.n	8003348 <vListInsert+0x28>
=======
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3308      	adds	r3, #8
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	e002      	b.n	800502e <vListInsert+0x2e>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	429a      	cmp	r2, r3
 8005038:	d2f6      	bcs.n	8005028 <vListInsert+0x28>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	605a      	str	r2, [r3, #4]
=======
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	605a      	str	r2, [r3, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
<<<<<<< HEAD
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <uxListRemove>:
=======
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr

08005070 <uxListRemove>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6892      	ldr	r2, [r2, #8]
 80033a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6852      	ldr	r2, [r2, #4]
 80033b0:	605a      	str	r2, [r3, #4]
=======
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6892      	ldr	r2, [r2, #8]
 8005086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6852      	ldr	r2, [r2, #4]
 8005090:	605a      	str	r2, [r3, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d103      	bne.n	80033c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
=======
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d103      	bne.n	80050a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	605a      	str	r2, [r3, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
<<<<<<< HEAD
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	1e5a      	subs	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
	...

080033e4 <xQueueGenericReset>:
=======
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
	...

080050c4 <xQueueGenericReset>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <xQueueGenericReset+0x28>
=======
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xQueueGenericReset+0x2a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	e7fe      	b.n	800340a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800340c:	f001 ffd4 	bl	80053b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	68f9      	ldr	r1, [r7, #12]
 800341a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	441a      	add	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343c:	3b01      	subs	r3, #1
 800343e:	68f9      	ldr	r1, [r7, #12]
 8003440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	441a      	add	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	22ff      	movs	r2, #255	; 0xff
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	22ff      	movs	r2, #255	; 0xff
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d114      	bne.n	800348c <xQueueGenericReset+0xa8>
=======
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80050ee:	f002 f805 	bl	80070fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050fe:	fb01 f303 	mul.w	r3, r1, r3
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	3b01      	subs	r3, #1
 8005120:	68f9      	ldr	r1, [r7, #12]
 8005122:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005124:	fb01 f303 	mul.w	r3, r1, r3
 8005128:	441a      	add	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	22ff      	movs	r2, #255	; 0xff
 8005132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	22ff      	movs	r2, #255	; 0xff
 800513a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d114      	bne.n	800516e <xQueueGenericReset+0xaa>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d01a      	beq.n	80034a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3310      	adds	r3, #16
 800346e:	4618      	mov	r0, r3
 8003470:	f001 f914 	bl	800469c <xTaskRemoveFromEventList>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d012      	beq.n	80034a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800347a:	4b0d      	ldr	r3, [pc, #52]	; (80034b0 <xQueueGenericReset+0xcc>)
 800347c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	e009      	b.n	80034a0 <xQueueGenericReset+0xbc>
=======
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01a      	beq.n	8005182 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3310      	adds	r3, #16
 8005150:	4618      	mov	r0, r3
 8005152:	f001 f92f 	bl	80063b4 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d012      	beq.n	8005182 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800515c:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <xQueueGenericReset+0xcc>)
 800515e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	f3bf 8f6f 	isb	sy
 800516c:	e009      	b.n	8005182 <xQueueGenericReset+0xbe>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3310      	adds	r3, #16
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fef7 	bl	8003284 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3324      	adds	r3, #36	; 0x24
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fef2 	bl	8003284 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034a0:	f001 ffb8 	bl	8005414 <vPortExitCritical>
=======
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3310      	adds	r3, #16
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fef6 	bl	8004f64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3324      	adds	r3, #36	; 0x24
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fef1 	bl	8004f64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005182:	f001 ffeb 	bl	800715c <vPortExitCritical>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 80034a4:	2301      	movs	r3, #1
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <xQueueGenericCreateStatic>:
=======
 8005186:	2301      	movs	r3, #1
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <xQueueGenericCreateStatic>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <xQueueGenericCreateStatic+0x28>
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034da:	e7fe      	b.n	80034da <xQueueGenericCreateStatic+0x26>
=======
 8005194:	b580      	push	{r7, lr}
 8005196:	b08e      	sub	sp, #56	; 0x38
 8005198:	af02      	add	r7, sp, #8
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueGenericCreateStatic+0x28>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <xQueueGenericCreateStatic+0x42>
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	e7fe      	b.n	80034f4 <xQueueGenericCreateStatic+0x40>
=======
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xQueueGenericCreateStatic+0x44>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <xQueueGenericCreateStatic+0x4e>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <xQueueGenericCreateStatic+0x52>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <xQueueGenericCreateStatic+0x54>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <xQueueGenericCreateStatic+0x6c>
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	e7fe      	b.n	800351e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <xQueueGenericCreateStatic+0x78>
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <xQueueGenericCreateStatic+0x7c>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <xQueueGenericCreateStatic+0x7e>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <xQueueGenericCreateStatic+0x96>
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e7fe      	b.n	8003548 <xQueueGenericCreateStatic+0x94>
=======
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <xQueueGenericCreateStatic+0x52>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <xQueueGenericCreateStatic+0x56>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <xQueueGenericCreateStatic+0x58>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10a      	bne.n	8005206 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	623b      	str	r3, [r7, #32]
}
 8005202:	bf00      	nop
 8005204:	e7fe      	b.n	8005204 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d102      	bne.n	8005212 <xQueueGenericCreateStatic+0x7e>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <xQueueGenericCreateStatic+0x82>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <xQueueGenericCreateStatic+0x84>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	61fb      	str	r3, [r7, #28]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xQueueGenericCreateStatic+0x9c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 800354a:	2350      	movs	r3, #80	; 0x50
 800354c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d009      	beq.n	8003568 <xQueueGenericCreateStatic+0xb4>
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	e7fe      	b.n	8003566 <xQueueGenericCreateStatic+0xb2>
=======
 8005232:	2350      	movs	r3, #80	; 0x50
 8005234:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b50      	cmp	r3, #80	; 0x50
 800523a:	d00a      	beq.n	8005252 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	61bb      	str	r3, [r7, #24]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericCreateStatic+0xbc>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00d      	beq.n	800358e <xQueueGenericCreateStatic+0xda>
=======
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00d      	beq.n	8005278 <xQueueGenericCreateStatic+0xe4>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 8003572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800357a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f842 	bl	8003612 <prvInitialiseNewQueue>
=======
 8005264:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f843 	bl	80052fe <prvInitialiseNewQueue>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
<<<<<<< HEAD
 800358e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003590:	4618      	mov	r0, r3
 8003592:	3730      	adds	r7, #48	; 0x30
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <xQueueGenericCreate>:
=======
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800527a:	4618      	mov	r0, r3
 800527c:	3730      	adds	r7, #48	; 0x30
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <xQueueGenericCreate>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af02      	add	r7, sp, #8
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	71fb      	strb	r3, [r7, #7]
=======
 8005282:	b580      	push	{r7, lr}
 8005284:	b08a      	sub	sp, #40	; 0x28
 8005286:	af02      	add	r7, sp, #8
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	4613      	mov	r3, r2
 800528e:	71fb      	strb	r3, [r7, #7]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <xQueueGenericCreate+0x28>
 80035ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	e7fe      	b.n	80035be <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e004      	b.n	80035d6 <xQueueGenericCreate+0x3e>
=======
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <xQueueGenericCreate+0x2a>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	613b      	str	r3, [r7, #16]
}
 80052a8:	bf00      	nop
 80052aa:	e7fe      	b.n	80052aa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	e004      	b.n	80052c2 <xQueueGenericCreate+0x40>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3350      	adds	r3, #80	; 0x50
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 ffe2 	bl	80055a4 <pvPortMalloc>
 80035e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00f      	beq.n	8003608 <xQueueGenericCreate+0x70>
=======
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	fb02 f303 	mul.w	r3, r2, r3
 80052c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3350      	adds	r3, #80	; 0x50
 80052c6:	4618      	mov	r0, r3
 80052c8:	f002 f818 	bl	80072fc <pvPortMalloc>
 80052cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00f      	beq.n	80052f4 <xQueueGenericCreate+0x72>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
<<<<<<< HEAD
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	3350      	adds	r3, #80	; 0x50
 80035ec:	617b      	str	r3, [r7, #20]
=======
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	3350      	adds	r3, #80	; 0x50
 80052d8:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 80035f6:	79fa      	ldrb	r2, [r7, #7]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	4613      	mov	r3, r2
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f805 	bl	8003612 <prvInitialiseNewQueue>
=======
 80052e2:	79fa      	ldrb	r2, [r7, #7]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	68b9      	ldr	r1, [r7, #8]
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f805 	bl	80052fe <prvInitialiseNewQueue>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
<<<<<<< HEAD
 8003608:	69bb      	ldr	r3, [r7, #24]
	}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <prvInitialiseNewQueue>:
=======
 80052f4:	69bb      	ldr	r3, [r7, #24]
	}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <prvInitialiseNewQueue>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 8003612:	b580      	push	{r7, lr}
 8003614:	b084      	sub	sp, #16
 8003616:	af00      	add	r7, sp, #0
 8003618:	60f8      	str	r0, [r7, #12]
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	70fb      	strb	r3, [r7, #3]
=======
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	70fb      	strb	r3, [r7, #3]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <prvInitialiseNewQueue+0x1c>
=======
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d103      	bne.n	800531a <prvInitialiseNewQueue+0x1c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	e002      	b.n	8003634 <prvInitialiseNewQueue+0x22>
=======
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e002      	b.n	8005320 <prvInitialiseNewQueue+0x22>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	601a      	str	r2, [r3, #0]
=======
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003640:	2101      	movs	r1, #1
 8003642:	69b8      	ldr	r0, [r7, #24]
 8003644:	f7ff fece 	bl	80033e4 <xQueueGenericReset>
=======
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800532c:	2101      	movs	r1, #1
 800532e:	69b8      	ldr	r0, [r7, #24]
 8005330:	f7ff fec8 	bl	80050c4 <xQueueGenericReset>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
<<<<<<< HEAD
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
=======
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 8003650:	bf00      	nop
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <xQueueGenericSend>:
=======
 800533c:	bf00      	nop
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <xQueueGenericSend>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 8003658:	b580      	push	{r7, lr}
 800365a:	b08e      	sub	sp, #56	; 0x38
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003666:	2300      	movs	r3, #0
 8003668:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <xQueueGenericSend+0x30>
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
 8003686:	e7fe      	b.n	8003686 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <xQueueGenericSend+0x3e>
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <xQueueGenericSend+0x42>
 8003696:	2301      	movs	r3, #1
 8003698:	e000      	b.n	800369c <xQueueGenericSend+0x44>
 800369a:	2300      	movs	r3, #0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <xQueueGenericSend+0x5c>
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
 80036b2:	e7fe      	b.n	80036b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d103      	bne.n	80036c2 <xQueueGenericSend+0x6a>
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <xQueueGenericSend+0x6e>
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <xQueueGenericSend+0x70>
 80036c6:	2300      	movs	r3, #0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <xQueueGenericSend+0x88>
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	e7fe      	b.n	80036de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036e0:	f001 f996 	bl	8004a10 <xTaskGetSchedulerState>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d102      	bne.n	80036f0 <xQueueGenericSend+0x98>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <xQueueGenericSend+0x9c>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <xQueueGenericSend+0x9e>
 80036f4:	2300      	movs	r3, #0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <xQueueGenericSend+0xb6>
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	e7fe      	b.n	800370c <xQueueGenericSend+0xb4>
=======
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005352:	2300      	movs	r3, #0
 8005354:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xQueueGenericSend+0x32>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <xQueueGenericSend+0x40>
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <xQueueGenericSend+0x44>
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <xQueueGenericSend+0x46>
 8005388:	2300      	movs	r3, #0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <xQueueGenericSend+0x60>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d103      	bne.n	80053b2 <xQueueGenericSend+0x6e>
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <xQueueGenericSend+0x72>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <xQueueGenericSend+0x74>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <xQueueGenericSend+0x8e>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	623b      	str	r3, [r7, #32]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053d2:	f001 f9b1 	bl	8006738 <xTaskGetSchedulerState>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d102      	bne.n	80053e2 <xQueueGenericSend+0x9e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <xQueueGenericSend+0xa2>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <xQueueGenericSend+0xa4>
 80053e6:	2300      	movs	r3, #0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <xQueueGenericSend+0xbe>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	61fb      	str	r3, [r7, #28]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xQueueGenericSend+0xbc>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 800370e:	f001 fe53 	bl	80053b8 <vPortEnterCritical>
=======
 8005402:	f001 fe7b 	bl	80070fc <vPortEnterCritical>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
<<<<<<< HEAD
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <xQueueGenericSend+0xcc>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d129      	bne.n	8003778 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372a:	f000 f9ff 	bl	8003b2c <prvCopyDataToQueue>
 800372e:	62f8      	str	r0, [r7, #44]	; 0x2c
=======
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800540a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <xQueueGenericSend+0xd4>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d129      	bne.n	800546c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541e:	f000 fa07 	bl	8005830 <prvCopyDataToQueue>
 8005422:	62f8      	str	r0, [r7, #44]	; 0x2c
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	3324      	adds	r3, #36	; 0x24
 800373c:	4618      	mov	r0, r3
 800373e:	f000 ffad 	bl	800469c <xTaskRemoveFromEventList>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <xQueueGenericSend+0x118>
=======
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	2b00      	cmp	r3, #0
 800542a:	d010      	beq.n	800544e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	3324      	adds	r3, #36	; 0x24
 8005430:	4618      	mov	r0, r3
 8005432:	f000 ffbf 	bl	80063b4 <xTaskRemoveFromEventList>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d013      	beq.n	8005464 <xQueueGenericSend+0x120>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8003748:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <xQueueGenericSend+0x1f0>)
 800374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	e00a      	b.n	8003770 <xQueueGenericSend+0x118>
=======
 800543c:	4b3f      	ldr	r3, [pc, #252]	; (800553c <xQueueGenericSend+0x1f8>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	e00a      	b.n	8005464 <xQueueGenericSend+0x120>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
<<<<<<< HEAD
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <xQueueGenericSend+0x118>
=======
 800544e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <xQueueGenericSend+0x120>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
<<<<<<< HEAD
 8003760:	4b39      	ldr	r3, [pc, #228]	; (8003848 <xQueueGenericSend+0x1f0>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
=======
 8005454:	4b39      	ldr	r3, [pc, #228]	; (800553c <xQueueGenericSend+0x1f8>)
 8005456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	f3bf 8f6f 	isb	sy
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8003770:	f001 fe50 	bl	8005414 <vPortExitCritical>
				return pdPASS;
 8003774:	2301      	movs	r3, #1
 8003776:	e063      	b.n	8003840 <xQueueGenericSend+0x1e8>
=======
 8005464:	f001 fe7a 	bl	800715c <vPortExitCritical>
				return pdPASS;
 8005468:	2301      	movs	r3, #1
 800546a:	e063      	b.n	8005534 <xQueueGenericSend+0x1f0>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <xQueueGenericSend+0x12e>
=======
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <xQueueGenericSend+0x136>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 800377e:	f001 fe49 	bl	8005414 <vPortExitCritical>
=======
 8005472:	f001 fe73 	bl	800715c <vPortExitCritical>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
<<<<<<< HEAD
 8003782:	2300      	movs	r3, #0
 8003784:	e05c      	b.n	8003840 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	2b00      	cmp	r3, #0
 800378a:	d106      	bne.n	800379a <xQueueGenericSend+0x142>
=======
 8005476:	2300      	movs	r3, #0
 8005478:	e05c      	b.n	8005534 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800547a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <xQueueGenericSend+0x14a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 800378c:	f107 0314 	add.w	r3, r7, #20
 8003790:	4618      	mov	r0, r3
 8003792:	f000 ffe5 	bl	8004760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003796:	2301      	movs	r3, #1
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
=======
 8005480:	f107 0314 	add.w	r3, r7, #20
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fff9 	bl	800647c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800548a:	2301      	movs	r3, #1
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 800379a:	f001 fe3b 	bl	8005414 <vPortExitCritical>
=======
 800548e:	f001 fe65 	bl	800715c <vPortExitCritical>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 800379e:	f000 fd5d 	bl	800425c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037a2:	f001 fe09 	bl	80053b8 <vPortEnterCritical>
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d103      	bne.n	80037bc <xQueueGenericSend+0x164>
 80037b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d103      	bne.n	80037d2 <xQueueGenericSend+0x17a>
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d2:	f001 fe1f 	bl	8005414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d6:	1d3a      	adds	r2, r7, #4
 80037d8:	f107 0314 	add.w	r3, r7, #20
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 ffd4 	bl	800478c <xTaskCheckForTimeOut>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d124      	bne.n	8003834 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ec:	f000 fa96 	bl	8003d1c <prvIsQueueFull>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	3310      	adds	r3, #16
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4611      	mov	r1, r2
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fefe 	bl	8004600 <vTaskPlaceOnEventList>
=======
 8005492:	f000 fd6b 	bl	8005f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005496:	f001 fe31 	bl	80070fc <vPortEnterCritical>
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054a0:	b25b      	sxtb	r3, r3
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d103      	bne.n	80054b0 <xQueueGenericSend+0x16c>
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d103      	bne.n	80054c6 <xQueueGenericSend+0x182>
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c6:	f001 fe49 	bl	800715c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054ca:	1d3a      	adds	r2, r7, #4
 80054cc:	f107 0314 	add.w	r3, r7, #20
 80054d0:	4611      	mov	r1, r2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 ffe8 	bl	80064a8 <xTaskCheckForTimeOut>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d124      	bne.n	8005528 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e0:	f000 fa9e 	bl	8005a20 <prvIsQueueFull>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d018      	beq.n	800551c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	3310      	adds	r3, #16
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4611      	mov	r1, r2
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 ff0e 	bl	8006314 <vTaskPlaceOnEventList>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8003804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003806:	f000 fa21 	bl	8003c4c <prvUnlockQueue>
=======
 80054f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054fa:	f000 fa29 	bl	8005950 <prvUnlockQueue>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
<<<<<<< HEAD
 800380a:	f000 fd35 	bl	8004278 <xTaskResumeAll>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f47f af7c 	bne.w	800370e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <xQueueGenericSend+0x1f0>)
 8003818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	e772      	b.n	800370e <xQueueGenericSend+0xb6>
=======
 80054fe:	f000 fd43 	bl	8005f88 <xTaskResumeAll>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	f47f af7c 	bne.w	8005402 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800550a:	4b0c      	ldr	r3, [pc, #48]	; (800553c <xQueueGenericSend+0x1f8>)
 800550c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	e772      	b.n	8005402 <xQueueGenericSend+0xbe>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8003828:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800382a:	f000 fa0f 	bl	8003c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800382e:	f000 fd23 	bl	8004278 <xTaskResumeAll>
 8003832:	e76c      	b.n	800370e <xQueueGenericSend+0xb6>
=======
 800551c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551e:	f000 fa17 	bl	8005950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005522:	f000 fd31 	bl	8005f88 <xTaskResumeAll>
 8005526:	e76c      	b.n	8005402 <xQueueGenericSend+0xbe>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8003834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003836:	f000 fa09 	bl	8003c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800383a:	f000 fd1d 	bl	8004278 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800383e:	2300      	movs	r3, #0
		}
	}
}
 8003840:	4618      	mov	r0, r3
 8003842:	3738      	adds	r7, #56	; 0x38
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	e000ed04 	.word	0xe000ed04

0800384c <xQueueGenericSendFromISR>:
=======
 8005528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800552a:	f000 fa11 	bl	8005950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800552e:	f000 fd2b 	bl	8005f88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005532:	2300      	movs	r3, #0
		}
	}
}
 8005534:	4618      	mov	r0, r3
 8005536:	3738      	adds	r7, #56	; 0x38
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <xQueueGenericSendFromISR>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
<<<<<<< HEAD
 800384c:	b580      	push	{r7, lr}
 800384e:	b08e      	sub	sp, #56	; 0x38
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <xQueueGenericSendFromISR+0x2c>
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
 8003876:	e7fe      	b.n	8003876 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <xQueueGenericSendFromISR+0x3a>
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <xQueueGenericSendFromISR+0x3e>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <xQueueGenericSendFromISR+0x40>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <xQueueGenericSendFromISR+0x58>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	e7fe      	b.n	80038a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d103      	bne.n	80038b2 <xQueueGenericSendFromISR+0x66>
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <xQueueGenericSendFromISR+0x6a>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <xQueueGenericSendFromISR+0x6c>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d109      	bne.n	80038d0 <xQueueGenericSendFromISR+0x84>
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	e7fe      	b.n	80038ce <xQueueGenericSendFromISR+0x82>
=======
 8005540:	b580      	push	{r7, lr}
 8005542:	b08e      	sub	sp, #56	; 0x38
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d103      	bne.n	800557c <xQueueGenericSendFromISR+0x3c>
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <xQueueGenericSendFromISR+0x40>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <xQueueGenericSendFromISR+0x42>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	623b      	str	r3, [r7, #32]
}
 8005598:	bf00      	nop
 800559a:	e7fe      	b.n	800559a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d103      	bne.n	80055aa <xQueueGenericSendFromISR+0x6a>
 80055a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d101      	bne.n	80055ae <xQueueGenericSendFromISR+0x6e>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e000      	b.n	80055b0 <xQueueGenericSendFromISR+0x70>
 80055ae:	2300      	movs	r3, #0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	61fb      	str	r3, [r7, #28]
}
 80055c6:	bf00      	nop
 80055c8:	e7fe      	b.n	80055c8 <xQueueGenericSendFromISR+0x88>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
<<<<<<< HEAD
 80038d0:	f001 fe2c 	bl	800552c <vPortValidateInterruptPriority>
=======
 80055ca:	f001 fe59 	bl	8007280 <vPortValidateInterruptPriority>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 80038d4:	f3ef 8211 	mrs	r2, BASEPRI
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	61ba      	str	r2, [r7, #24]
 80038ea:	617b      	str	r3, [r7, #20]
=======
 80055ce:	f3ef 8211 	mrs	r2, BASEPRI
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	61ba      	str	r2, [r7, #24]
 80055e4:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 80038ec:	69bb      	ldr	r3, [r7, #24]
=======
 80055e6:	69bb      	ldr	r3, [r7, #24]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
 80038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <xQueueGenericSendFromISR+0xb6>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d12c      	bne.n	800395c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003908:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d302      	bcc.n	80055fc <xQueueGenericSendFromISR+0xbc>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d12c      	bne.n	8005656 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
<<<<<<< HEAD
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003912:	f000 f90b 	bl	8003b2c <prvCopyDataToQueue>
=======
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800560c:	f000 f910 	bl	8005830 <prvCopyDataToQueue>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
<<<<<<< HEAD
 8003916:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d112      	bne.n	8003946 <xQueueGenericSendFromISR+0xfa>
=======
 8005610:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d112      	bne.n	8005640 <xQueueGenericSendFromISR+0x100>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	2b00      	cmp	r3, #0
 8003926:	d016      	beq.n	8003956 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	3324      	adds	r3, #36	; 0x24
 800392c:	4618      	mov	r0, r3
 800392e:	f000 feb5 	bl	800469c <xTaskRemoveFromEventList>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00e      	beq.n	8003956 <xQueueGenericSendFromISR+0x10a>
=======
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	3324      	adds	r3, #36	; 0x24
 8005626:	4618      	mov	r0, r3
 8005628:	f000 fec4 	bl	80063b4 <xTaskRemoveFromEventList>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <xQueueGenericSendFromISR+0x110>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e007      	b.n	8003956 <xQueueGenericSendFromISR+0x10a>
=======
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00b      	beq.n	8005650 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	e007      	b.n	8005650 <xQueueGenericSendFromISR+0x110>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
<<<<<<< HEAD
 8003946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800394a:	3301      	adds	r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	b25a      	sxtb	r2, r3
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003956:	2301      	movs	r3, #1
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800395a:	e001      	b.n	8003960 <xQueueGenericSendFromISR+0x114>
=======
 8005640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005644:	3301      	adds	r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	b25a      	sxtb	r2, r3
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005654:	e001      	b.n	800565a <xQueueGenericSendFromISR+0x11a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
<<<<<<< HEAD
 800395c:	2300      	movs	r3, #0
 800395e:	637b      	str	r3, [r7, #52]	; 0x34
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	613b      	str	r3, [r7, #16]
=======
 8005656:	2300      	movs	r3, #0
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	613b      	str	r3, [r7, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f383 8811 	msr	BASEPRI, r3
=======
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005664:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
<<<<<<< HEAD
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800396c:	4618      	mov	r0, r3
 800396e:	3738      	adds	r7, #56	; 0x38
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <xQueueReceive>:
=======
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005668:	4618      	mov	r0, r3
 800566a:	3738      	adds	r7, #56	; 0x38
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <xQueueReceive>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8003974:	b580      	push	{r7, lr}
 8003976:	b08c      	sub	sp, #48	; 0x30
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003980:	2300      	movs	r3, #0
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <xQueueReceive+0x2e>
	__asm volatile
 800398e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003992:	f383 8811 	msr	BASEPRI, r3
 8003996:	f3bf 8f6f 	isb	sy
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	e7fe      	b.n	80039a0 <xQueueReceive+0x2c>
=======
 8005670:	b580      	push	{r7, lr}
 8005672:	b08c      	sub	sp, #48	; 0x30
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <xQueueReceive+0x30>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	623b      	str	r3, [r7, #32]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xQueueReceive+0x2e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
<<<<<<< HEAD
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d103      	bne.n	80039b0 <xQueueReceive+0x3c>
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d101      	bne.n	80039b4 <xQueueReceive+0x40>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <xQueueReceive+0x42>
 80039b4:	2300      	movs	r3, #0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <xQueueReceive+0x5a>
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	e7fe      	b.n	80039cc <xQueueReceive+0x58>
=======
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d103      	bne.n	80056ae <xQueueReceive+0x3e>
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <xQueueReceive+0x42>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <xQueueReceive+0x44>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xQueueReceive+0x5e>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	61fb      	str	r3, [r7, #28]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueReceive+0x5c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
<<<<<<< HEAD
 80039ce:	f001 f81f 	bl	8004a10 <xTaskGetSchedulerState>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <xQueueReceive+0x6a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <xQueueReceive+0x6e>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <xQueueReceive+0x70>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <xQueueReceive+0x88>
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e7fe      	b.n	80039fa <xQueueReceive+0x86>
=======
 80056ce:	f001 f833 	bl	8006738 <xTaskGetSchedulerState>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d102      	bne.n	80056de <xQueueReceive+0x6e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <xQueueReceive+0x72>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueReceive+0x74>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueReceive+0x8e>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	61bb      	str	r3, [r7, #24]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueReceive+0x8c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
<<<<<<< HEAD
 80039fc:	f001 fcdc 	bl	80053b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80056fe:	f001 fcfd 	bl	80070fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01f      	beq.n	8003a4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a10:	f000 f8f6 	bl	8003c00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	1e5a      	subs	r2, r3, #1
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01f      	beq.n	800574e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005712:	f000 f8f7 	bl	8005904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	1e5a      	subs	r2, r3, #1
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00f      	beq.n	8003a44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	3310      	adds	r3, #16
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fe37 	bl	800469c <xTaskRemoveFromEventList>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d007      	beq.n	8003a44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a34:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <xQueueReceive+0x1b4>)
 8003a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	f3bf 8f6f 	isb	sy
=======
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00f      	beq.n	8005746 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	3310      	adds	r3, #16
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fe42 	bl	80063b4 <xTaskRemoveFromEventList>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005736:	4b3d      	ldr	r3, [pc, #244]	; (800582c <xQueueReceive+0x1bc>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
<<<<<<< HEAD
 8003a44:	f001 fce6 	bl	8005414 <vPortExitCritical>
				return pdPASS;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e069      	b.n	8003b20 <xQueueReceive+0x1ac>
=======
 8005746:	f001 fd09 	bl	800715c <vPortExitCritical>
				return pdPASS;
 800574a:	2301      	movs	r3, #1
 800574c:	e069      	b.n	8005822 <xQueueReceive+0x1b2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
<<<<<<< HEAD
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <xQueueReceive+0xe6>
=======
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d103      	bne.n	800575c <xQueueReceive+0xec>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
<<<<<<< HEAD
 8003a52:	f001 fcdf 	bl	8005414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e062      	b.n	8003b20 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <xQueueReceive+0xfa>
=======
 8005754:	f001 fd02 	bl	800715c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005758:	2300      	movs	r3, #0
 800575a:	e062      	b.n	8005822 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800575c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <xQueueReceive+0x100>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
<<<<<<< HEAD
 8003a60:	f107 0310 	add.w	r3, r7, #16
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fe7b 	bl	8004760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8005762:	f107 0310 	add.w	r3, r7, #16
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fe88 	bl	800647c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
<<<<<<< HEAD
 8003a6e:	f001 fcd1 	bl	8005414 <vPortExitCritical>
=======
 8005770:	f001 fcf4 	bl	800715c <vPortExitCritical>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
<<<<<<< HEAD
 8003a72:	f000 fbf3 	bl	800425c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a76:	f001 fc9f 	bl	80053b8 <vPortEnterCritical>
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d103      	bne.n	8003a90 <xQueueReceive+0x11c>
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a96:	b25b      	sxtb	r3, r3
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d103      	bne.n	8003aa6 <xQueueReceive+0x132>
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa6:	f001 fcb5 	bl	8005414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003aaa:	1d3a      	adds	r2, r7, #4
 8003aac:	f107 0310 	add.w	r3, r7, #16
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fe6a 	bl	800478c <xTaskCheckForTimeOut>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d123      	bne.n	8003b06 <xQueueReceive+0x192>
=======
 8005774:	f000 fbfa 	bl	8005f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005778:	f001 fcc0 	bl	80070fc <vPortEnterCritical>
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005782:	b25b      	sxtb	r3, r3
 8005784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005788:	d103      	bne.n	8005792 <xQueueReceive+0x122>
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005798:	b25b      	sxtb	r3, r3
 800579a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579e:	d103      	bne.n	80057a8 <xQueueReceive+0x138>
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a8:	f001 fcd8 	bl	800715c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057ac:	1d3a      	adds	r2, r7, #4
 80057ae:	f107 0310 	add.w	r3, r7, #16
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 fe77 	bl	80064a8 <xTaskCheckForTimeOut>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d123      	bne.n	8005808 <xQueueReceive+0x198>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
<<<<<<< HEAD
 8003abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac0:	f000 f916 	bl	8003cf0 <prvIsQueueEmpty>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	3324      	adds	r3, #36	; 0x24
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 fd94 	bl	8004600 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ada:	f000 f8b7 	bl	8003c4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ade:	f000 fbcb 	bl	8004278 <xTaskResumeAll>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d189      	bne.n	80039fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <xQueueReceive+0x1b4>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	e780      	b.n	80039fc <xQueueReceive+0x88>
=======
 80057c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c2:	f000 f917 	bl	80059f4 <prvIsQueueEmpty>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d017      	beq.n	80057fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	3324      	adds	r3, #36	; 0x24
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	4611      	mov	r1, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fd9d 	bl	8006314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057dc:	f000 f8b8 	bl	8005950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057e0:	f000 fbd2 	bl	8005f88 <xTaskResumeAll>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d189      	bne.n	80056fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057ea:	4b10      	ldr	r3, [pc, #64]	; (800582c <xQueueReceive+0x1bc>)
 80057ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	e780      	b.n	80056fe <xQueueReceive+0x8e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8003afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afc:	f000 f8a6 	bl	8003c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b00:	f000 fbba 	bl	8004278 <xTaskResumeAll>
 8003b04:	e77a      	b.n	80039fc <xQueueReceive+0x88>
=======
 80057fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fe:	f000 f8a7 	bl	8005950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005802:	f000 fbc1 	bl	8005f88 <xTaskResumeAll>
 8005806:	e77a      	b.n	80056fe <xQueueReceive+0x8e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8003b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b08:	f000 f8a0 	bl	8003c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b0c:	f000 fbb4 	bl	8004278 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b12:	f000 f8ed 	bl	8003cf0 <prvIsQueueEmpty>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f43f af6f 	beq.w	80039fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b1e:	2300      	movs	r3, #0
=======
 8005808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580a:	f000 f8a1 	bl	8005950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800580e:	f000 fbbb 	bl	8005f88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005814:	f000 f8ee 	bl	80059f4 <prvIsQueueEmpty>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	f43f af6f 	beq.w	80056fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005820:	2300      	movs	r3, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
<<<<<<< HEAD
 8003b20:	4618      	mov	r0, r3
 8003b22:	3730      	adds	r7, #48	; 0x30
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	e000ed04 	.word	0xe000ed04

08003b2c <prvCopyDataToQueue>:
=======
 8005822:	4618      	mov	r0, r3
 8005824:	3730      	adds	r7, #48	; 0x30
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	e000ed04 	.word	0xe000ed04

08005830 <prvCopyDataToQueue>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
<<<<<<< HEAD
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
=======
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
<<<<<<< HEAD
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10d      	bne.n	8003b66 <prvCopyDataToQueue+0x3a>
=======
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <prvCopyDataToQueue+0x3a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
<<<<<<< HEAD
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d14d      	bne.n	8003bee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 ff78 	bl	8004a4c <xTaskPriorityDisinherit>
 8003b5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	e043      	b.n	8003bee <prvCopyDataToQueue+0xc2>
=======
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d14d      	bne.n	80058f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	f000 ff8a 	bl	8006774 <xTaskPriorityDisinherit>
 8005860:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e043      	b.n	80058f2 <prvCopyDataToQueue+0xc2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
<<<<<<< HEAD
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d119      	bne.n	8003ba0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6898      	ldr	r0, [r3, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	461a      	mov	r2, r3
 8003b76:	68b9      	ldr	r1, [r7, #8]
 8003b78:	f001 ff0c 	bl	8005994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	441a      	add	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d32b      	bcc.n	8003bee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	e026      	b.n	8003bee <prvCopyDataToQueue+0xc2>
=======
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d119      	bne.n	80058a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6898      	ldr	r0, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	461a      	mov	r2, r3
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	f001 ff3a 	bl	80076f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	441a      	add	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d32b      	bcc.n	80058f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	609a      	str	r2, [r3, #8]
 80058a2:	e026      	b.n	80058f2 <prvCopyDataToQueue+0xc2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68d8      	ldr	r0, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	f001 fef2 	bl	8005994 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68da      	ldr	r2, [r3, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	425b      	negs	r3, r3
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d207      	bcs.n	8003bdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	425b      	negs	r3, r3
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	60da      	str	r2, [r3, #12]
=======
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	68d8      	ldr	r0, [r3, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	461a      	mov	r2, r3
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	f001 ff20 	bl	80076f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	425b      	negs	r3, r3
 80058be:	441a      	add	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d207      	bcs.n	80058e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	425b      	negs	r3, r3
 80058da:	441a      	add	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	60da      	str	r2, [r3, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
<<<<<<< HEAD
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d105      	bne.n	8003bee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <prvCopyDataToQueue+0xc2>
=======
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d105      	bne.n	80058f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <prvCopyDataToQueue+0xc2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
<<<<<<< HEAD
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
=======
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	613b      	str	r3, [r7, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
<<<<<<< HEAD
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003bf6:	697b      	ldr	r3, [r7, #20]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3718      	adds	r7, #24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvCopyDataFromQueue>:
=======
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058fa:	697b      	ldr	r3, [r7, #20]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvCopyDataFromQueue>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
<<<<<<< HEAD
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d018      	beq.n	8003c44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	441a      	add	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d303      	bcc.n	8003c34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]
=======
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	441a      	add	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	429a      	cmp	r2, r3
 800592e:	d303      	bcc.n	8005938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	60da      	str	r2, [r3, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
<<<<<<< HEAD
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68d9      	ldr	r1, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6838      	ldr	r0, [r7, #0]
 8003c40:	f001 fea8 	bl	8005994 <memcpy>
	}
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <prvUnlockQueue>:
=======
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68d9      	ldr	r1, [r3, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	461a      	mov	r2, r3
 8005942:	6838      	ldr	r0, [r7, #0]
 8005944:	f001 fed6 	bl	80076f4 <memcpy>
	}
}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <prvUnlockQueue>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
<<<<<<< HEAD
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
=======
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8003c54:	f001 fbb0 	bl	80053b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c60:	e011      	b.n	8003c86 <prvUnlockQueue+0x3a>
=======
 8005958:	f001 fbd0 	bl	80070fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005964:	e011      	b.n	800598a <prvUnlockQueue+0x3a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
<<<<<<< HEAD
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d012      	beq.n	8003c90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3324      	adds	r3, #36	; 0x24
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fd14 	bl	800469c <xTaskRemoveFromEventList>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <prvUnlockQueue+0x32>
=======
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d012      	beq.n	8005994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3324      	adds	r3, #36	; 0x24
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fd1e 	bl	80063b4 <xTaskRemoveFromEventList>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <prvUnlockQueue+0x32>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
<<<<<<< HEAD
 8003c7a:	f000 fde7 	bl	800484c <vTaskMissedYield>
=======
 800597e:	f000 fdf5 	bl	800656c <vTaskMissedYield>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
<<<<<<< HEAD
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	dce9      	bgt.n	8003c62 <prvUnlockQueue+0x16>
 8003c8e:	e000      	b.n	8003c92 <prvUnlockQueue+0x46>
					break;
 8003c90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c9a:	f001 fbbb 	bl	8005414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c9e:	f001 fb8b 	bl	80053b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ca8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003caa:	e011      	b.n	8003cd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3310      	adds	r3, #16
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fcef 	bl	800469c <xTaskRemoveFromEventList>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cc4:	f000 fdc2 	bl	800484c <vTaskMissedYield>
=======
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	3b01      	subs	r3, #1
 8005986:	b2db      	uxtb	r3, r3
 8005988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800598a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800598e:	2b00      	cmp	r3, #0
 8005990:	dce9      	bgt.n	8005966 <prvUnlockQueue+0x16>
 8005992:	e000      	b.n	8005996 <prvUnlockQueue+0x46>
					break;
 8005994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	22ff      	movs	r2, #255	; 0xff
 800599a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800599e:	f001 fbdd 	bl	800715c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80059a2:	f001 fbab 	bl	80070fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ae:	e011      	b.n	80059d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d012      	beq.n	80059de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3310      	adds	r3, #16
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fcf9 	bl	80063b4 <xTaskRemoveFromEventList>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059c8:	f000 fdd0 	bl	800656c <vTaskMissedYield>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
<<<<<<< HEAD
 8003cc8:	7bbb      	ldrb	r3, [r7, #14]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	dce9      	bgt.n	8003cac <prvUnlockQueue+0x60>
 8003cd8:	e000      	b.n	8003cdc <prvUnlockQueue+0x90>
=======
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	dce9      	bgt.n	80059b0 <prvUnlockQueue+0x60>
 80059dc:	e000      	b.n	80059e0 <prvUnlockQueue+0x90>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
			{
				break;
<<<<<<< HEAD
 8003cda:	bf00      	nop
=======
 80059de:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
<<<<<<< HEAD
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	22ff      	movs	r2, #255	; 0xff
 8003ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ce4:	f001 fb96 	bl	8005414 <vPortExitCritical>
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <prvIsQueueEmpty>:
=======
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	22ff      	movs	r2, #255	; 0xff
 80059e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059e8:	f001 fbb8 	bl	800715c <vPortExitCritical>
}
 80059ec:	bf00      	nop
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <prvIsQueueEmpty>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cf8:	f001 fb5e 	bl	80053b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e001      	b.n	8003d0e <prvIsQueueEmpty+0x1e>
=======
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059fc:	f001 fb7e 	bl	80070fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e001      	b.n	8005a12 <prvIsQueueEmpty+0x1e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d0e:	f001 fb81 	bl	8005414 <vPortExitCritical>

	return xReturn;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <prvIsQueueFull>:
=======
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a12:	f001 fba3 	bl	800715c <vPortExitCritical>

	return xReturn;
 8005a16:	68fb      	ldr	r3, [r7, #12]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <prvIsQueueFull>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
<<<<<<< HEAD
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d24:	f001 fb48 	bl	80053b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d102      	bne.n	8003d3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e001      	b.n	8003d3e <prvIsQueueFull+0x22>
=======
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a28:	f001 fb68 	bl	80070fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d102      	bne.n	8005a3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	e001      	b.n	8005a42 <prvIsQueueFull+0x22>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			xReturn = pdFALSE;
<<<<<<< HEAD
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d3e:	f001 fb69 	bl	8005414 <vPortExitCritical>

	return xReturn;
 8003d42:	68fb      	ldr	r3, [r7, #12]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <vQueueAddToRegistry>:
=======
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a42:	f001 fb8b 	bl	800715c <vPortExitCritical>

	return xReturn;
 8005a46:	68fb      	ldr	r3, [r7, #12]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <vQueueAddToRegistry>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
<<<<<<< HEAD
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
=======
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
<<<<<<< HEAD
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	e014      	b.n	8003d86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d5c:	4a0e      	ldr	r2, [pc, #56]	; (8003d98 <vQueueAddToRegistry+0x4c>)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10b      	bne.n	8003d80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d68:	490b      	ldr	r1, [pc, #44]	; (8003d98 <vQueueAddToRegistry+0x4c>)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <vQueueAddToRegistry+0x4c>)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d7e:	e005      	b.n	8003d8c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3301      	adds	r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b07      	cmp	r3, #7
 8003d8a:	d9e7      	bls.n	8003d5c <vQueueAddToRegistry+0x10>
=======
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e014      	b.n	8005a8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a60:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <vQueueAddToRegistry+0x4c>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10b      	bne.n	8005a84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a6c:	490b      	ldr	r1, [pc, #44]	; (8005a9c <vQueueAddToRegistry+0x4c>)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a76:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <vQueueAddToRegistry+0x4c>)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	4413      	add	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a82:	e006      	b.n	8005a92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b07      	cmp	r3, #7
 8005a8e:	d9e7      	bls.n	8005a60 <vQueueAddToRegistry+0x10>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
<<<<<<< HEAD
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20002500 	.word	0x20002500

08003d9c <vQueueWaitForMessageRestricted>:
=======
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bc80      	pop	{r7}
 8005a9a:	4770      	bx	lr
 8005a9c:	200024a4 	.word	0x200024a4

08005aa0 <vQueueWaitForMessageRestricted>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	617b      	str	r3, [r7, #20]
=======
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
<<<<<<< HEAD
 8003dac:	f001 fb04 	bl	80053b8 <vPortEnterCritical>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003db6:	b25b      	sxtb	r3, r3
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d103      	bne.n	8003dc6 <vQueueWaitForMessageRestricted+0x2a>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dcc:	b25b      	sxtb	r3, r3
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d103      	bne.n	8003ddc <vQueueWaitForMessageRestricted+0x40>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ddc:	f001 fb1a 	bl	8005414 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3324      	adds	r3, #36	; 0x24
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	68b9      	ldr	r1, [r7, #8]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fc29 	bl	8004648 <vTaskPlaceOnEventListRestricted>
=======
 8005ab0:	f001 fb24 	bl	80070fc <vPortEnterCritical>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aba:	b25b      	sxtb	r3, r3
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d103      	bne.n	8005aca <vQueueWaitForMessageRestricted+0x2a>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad0:	b25b      	sxtb	r3, r3
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d103      	bne.n	8005ae0 <vQueueWaitForMessageRestricted+0x40>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ae0:	f001 fb3c 	bl	800715c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3324      	adds	r3, #36	; 0x24
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fc31 	bl	800635c <vTaskPlaceOnEventListRestricted>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
<<<<<<< HEAD
 8003df6:	6978      	ldr	r0, [r7, #20]
 8003df8:	f7ff ff28 	bl	8003c4c <prvUnlockQueue>
	}
 8003dfc:	bf00      	nop
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <xTaskCreateStatic>:
=======
 8005afa:	6978      	ldr	r0, [r7, #20]
 8005afc:	f7ff ff28 	bl	8005950 <prvUnlockQueue>
	}
 8005b00:	bf00      	nop
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <xTaskCreateStatic>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08e      	sub	sp, #56	; 0x38
 8003e08:	af04      	add	r7, sp, #16
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
=======
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af04      	add	r7, sp, #16
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 8003e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <xTaskCreateStatic+0x28>
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	623b      	str	r3, [r7, #32]
 8003e2a:	e7fe      	b.n	8003e2a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d109      	bne.n	8003e46 <xTaskCreateStatic+0x42>
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	e7fe      	b.n	8003e44 <xTaskCreateStatic+0x40>
=======
 8005b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	623b      	str	r3, [r7, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <xTaskCreateStatic+0x46>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	61fb      	str	r3, [r7, #28]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xTaskCreateStatic+0x44>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 8003e46:	235c      	movs	r3, #92	; 0x5c
 8003e48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	2b5c      	cmp	r3, #92	; 0x5c
 8003e4e:	d009      	beq.n	8003e64 <xTaskCreateStatic+0x60>
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	e7fe      	b.n	8003e62 <xTaskCreateStatic+0x5e>
=======
 8005b4e:	235c      	movs	r3, #92	; 0x5c
 8005b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b5c      	cmp	r3, #92	; 0x5c
 8005b56:	d00a      	beq.n	8005b6e <xTaskCreateStatic+0x66>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61bb      	str	r3, [r7, #24]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xTaskCreateStatic+0x64>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01e      	beq.n	8003ea8 <xTaskCreateStatic+0xa4>
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01b      	beq.n	8003ea8 <xTaskCreateStatic+0xa4>
=======
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01e      	beq.n	8005bb2 <xTaskCreateStatic+0xaa>
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01b      	beq.n	8005bb2 <xTaskCreateStatic+0xaa>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
=======
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 8003e82:	2300      	movs	r3, #0
 8003e84:	9303      	str	r3, [sp, #12]
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	9302      	str	r3, [sp, #8]
 8003e8a:	f107 0314 	add.w	r3, r7, #20
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f850 	bl	8003f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ea2:	f000 f8d3 	bl	800404c <prvAddNewTaskToReadyList>
 8003ea6:	e001      	b.n	8003eac <xTaskCreateStatic+0xa8>
=======
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9303      	str	r3, [sp, #12]
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	9302      	str	r3, [sp, #8]
 8005b94:	f107 0314 	add.w	r3, r7, #20
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f850 	bl	8005c4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005baa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bac:	f000 f8d4 	bl	8005d58 <prvAddNewTaskToReadyList>
 8005bb0:	e001      	b.n	8005bb6 <xTaskCreateStatic+0xae>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003eac:	697b      	ldr	r3, [r7, #20]
	}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3728      	adds	r7, #40	; 0x28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <xTaskCreate>:
=======
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bb6:	697b      	ldr	r3, [r7, #20]
	}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <xTaskCreate>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b08c      	sub	sp, #48	; 0x30
 8003eba:	af04      	add	r7, sp, #16
 8003ebc:	60f8      	str	r0, [r7, #12]
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	603b      	str	r3, [r7, #0]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
=======
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af04      	add	r7, sp, #16
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	80fb      	strh	r3, [r7, #6]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 fb6a 	bl	80055a4 <pvPortMalloc>
 8003ed0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ed8:	205c      	movs	r0, #92	; 0x5c
 8003eda:	f001 fb63 	bl	80055a4 <pvPortMalloc>
 8003ede:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
 8003eec:	e005      	b.n	8003efa <xTaskCreate+0x44>
=======
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fb91 	bl	80072fc <pvPortMalloc>
 8005bda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00e      	beq.n	8005c00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005be2:	205c      	movs	r0, #92	; 0x5c
 8005be4:	f001 fb8a 	bl	80072fc <pvPortMalloc>
 8005be8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8005bf6:	e005      	b.n	8005c04 <xTaskCreate+0x44>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 8003eee:	6978      	ldr	r0, [r7, #20]
 8003ef0:	f001 fc1a 	bl	8005728 <vPortFree>
 8003ef4:	e001      	b.n	8003efa <xTaskCreate+0x44>
=======
 8005bf8:	6978      	ldr	r0, [r7, #20]
 8005bfa:	f001 fc43 	bl	8007484 <vPortFree>
 8005bfe:	e001      	b.n	8005c04 <xTaskCreate+0x44>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61fb      	str	r3, [r7, #28]
=======
 8005c00:	2300      	movs	r3, #0
 8005c02:	61fb      	str	r3, [r7, #28]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d017      	beq.n	8003f30 <xTaskCreate+0x7a>
=======
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d017      	beq.n	8005c3a <xTaskCreate+0x7a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
=======
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 8003f08:	88fa      	ldrh	r2, [r7, #6]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	9303      	str	r3, [sp, #12]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	9302      	str	r3, [sp, #8]
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f80e 	bl	8003f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f24:	69f8      	ldr	r0, [r7, #28]
 8003f26:	f000 f891 	bl	800404c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e002      	b.n	8003f36 <xTaskCreate+0x80>
=======
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	2300      	movs	r3, #0
 8005c16:	9303      	str	r3, [sp, #12]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	9302      	str	r3, [sp, #8]
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f80e 	bl	8005c4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c2e:	69f8      	ldr	r0, [r7, #28]
 8005c30:	f000 f892 	bl	8005d58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c34:	2301      	movs	r3, #1
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e002      	b.n	8005c40 <xTaskCreate+0x80>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 8003f30:	f04f 33ff 	mov.w	r3, #4294967295
 8003f34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f36:	69bb      	ldr	r3, [r7, #24]
	}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <prvInitialiseNewTask>:
=======
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c40:	69bb      	ldr	r3, [r7, #24]
	}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <prvInitialiseNewTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
=======
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b088      	sub	sp, #32
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	603b      	str	r3, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
<<<<<<< HEAD
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	461a      	mov	r2, r3
 8003f58:	21a5      	movs	r1, #165	; 0xa5
 8003f5a:	f001 fd26 	bl	80059aa <memset>
=======
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	461a      	mov	r2, r3
 8005c62:	21a5      	movs	r1, #165	; 0xa5
 8005c64:	f001 fd54 	bl	8007710 <memset>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
<<<<<<< HEAD
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f023 0307 	bic.w	r3, r3, #7
 8003f76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <prvInitialiseNewTask+0x56>
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	e7fe      	b.n	8003f94 <prvInitialiseNewTask+0x54>
=======
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c72:	3b01      	subs	r3, #1
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	617b      	str	r3, [r7, #20]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <prvInitialiseNewTask+0x56>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	e012      	b.n	8003fc2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	7819      	ldrb	r1, [r3, #0]
 8003fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	4413      	add	r3, r2
 8003faa:	3334      	adds	r3, #52	; 0x34
 8003fac:	460a      	mov	r2, r1
 8003fae:	701a      	strb	r2, [r3, #0]
=======
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	e012      	b.n	8005cce <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	7819      	ldrb	r1, [r3, #0]
 8005cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3334      	adds	r3, #52	; 0x34
 8005cb8:	460a      	mov	r2, r1
 8005cba:	701a      	strb	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
<<<<<<< HEAD
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d006      	beq.n	8003fca <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	2b0f      	cmp	r3, #15
 8003fc6:	d9e9      	bls.n	8003f9c <prvInitialiseNewTask+0x5c>
 8003fc8:	e000      	b.n	8003fcc <prvInitialiseNewTask+0x8c>
		{
			break;
 8003fca:	bf00      	nop
=======
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b0f      	cmp	r3, #15
 8005cd2:	d9e9      	bls.n	8005ca8 <prvInitialiseNewTask+0x5e>
 8005cd4:	e000      	b.n	8005cd8 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005cd6:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
=======
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	2b37      	cmp	r3, #55	; 0x37
 8003fd8:	d901      	bls.n	8003fde <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003fda:	2337      	movs	r3, #55	; 0x37
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	2b37      	cmp	r3, #55	; 0x37
 8005ce4:	d901      	bls.n	8005cea <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ce6:	2337      	movs	r3, #55	; 0x37
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fe8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	2200      	movs	r2, #0
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 8003ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff f964 	bl	80032c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffc:	3318      	adds	r3, #24
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff f95f 	bl	80032c2 <vListInitialiseItem>
=======
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff f94e 	bl	8004fa2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	3318      	adds	r3, #24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff f949 	bl	8004fa2 <vListInitialiseItem>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004008:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004018:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 800401a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401c:	2200      	movs	r2, #0
 800401e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
=======
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2200      	movs	r2, #0
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	69b8      	ldr	r0, [r7, #24]
 800402e:	f001 f8d7 	bl	80051e0 <pxPortInitialiseStack>
 8004032:	4602      	mov	r2, r0
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	601a      	str	r2, [r3, #0]
=======
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	69b8      	ldr	r0, [r7, #24]
 8005d3a:	f001 f8ef 	bl	8006f1c <pxPortInitialiseStack>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
<<<<<<< HEAD
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <prvInitialiseNewTask+0x104>
=======
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <prvInitialiseNewTask+0x106>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004042:	601a      	str	r2, [r3, #0]
=======
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4e:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8004044:	bf00      	nop
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <prvAddNewTaskToReadyList>:
=======
 8005d50:	bf00      	nop
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvAddNewTaskToReadyList>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004054:	f001 f9b0 	bl	80053b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <prvAddNewTaskToReadyList+0xc4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	3301      	adds	r3, #1
 800405e:	4a2c      	ldr	r2, [pc, #176]	; (8004110 <prvAddNewTaskToReadyList+0xc4>)
 8004060:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004062:	4b2c      	ldr	r3, [pc, #176]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <prvAddNewTaskToReadyList+0x32>
=======
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d60:	f001 f9cc 	bl	80070fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d64:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <prvAddNewTaskToReadyList+0xc4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <prvAddNewTaskToReadyList+0xc4>)
 8005d6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d6e:	4b2c      	ldr	r3, [pc, #176]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x32>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <prvAddNewTaskToReadyList+0xc4>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d110      	bne.n	800409a <prvAddNewTaskToReadyList+0x4e>
=======
 8005d76:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d7c:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <prvAddNewTaskToReadyList+0xc4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d110      	bne.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 8004078:	f000 fc0c 	bl	8004894 <prvInitialiseTaskLists>
 800407c:	e00d      	b.n	800409a <prvAddNewTaskToReadyList+0x4e>
=======
 8005d84:	f000 fc16 	bl	80065b4 <prvInitialiseTaskLists>
 8005d88:	e00d      	b.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 800407e:	4b26      	ldr	r3, [pc, #152]	; (8004118 <prvAddNewTaskToReadyList+0xcc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004086:	4b23      	ldr	r3, [pc, #140]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	429a      	cmp	r2, r3
 8004092:	d802      	bhi.n	800409a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004094:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6013      	str	r3, [r2, #0]
=======
 8005d8a:	4b26      	ldr	r3, [pc, #152]	; (8005e24 <prvAddNewTaskToReadyList+0xcc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d92:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d802      	bhi.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005da0:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800409a:	4b20      	ldr	r3, [pc, #128]	; (800411c <prvAddNewTaskToReadyList+0xd0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	4a1e      	ldr	r2, [pc, #120]	; (800411c <prvAddNewTaskToReadyList+0xd0>)
 80040a2:	6013      	str	r3, [r2, #0]
=======
 8005da6:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <prvAddNewTaskToReadyList+0xd0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <prvAddNewTaskToReadyList+0xd0>)
 8005dae:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
<<<<<<< HEAD
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <prvAddNewTaskToReadyList+0xd0>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <prvAddNewTaskToReadyList+0xd0>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <prvAddNewTaskToReadyList+0xd4>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d903      	bls.n	80040c0 <prvAddNewTaskToReadyList+0x74>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	4a18      	ldr	r2, [pc, #96]	; (8004120 <prvAddNewTaskToReadyList+0xd4>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <prvAddNewTaskToReadyList+0xd8>)
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7ff f8ff 	bl	80032da <vListInsertEnd>
=======
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <prvAddNewTaskToReadyList+0xd4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d903      	bls.n	8005dcc <prvAddNewTaskToReadyList+0x74>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <prvAddNewTaskToReadyList+0xd4>)
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <prvAddNewTaskToReadyList+0xd8>)
 8005dda:	441a      	add	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f7ff f8e9 	bl	8004fba <vListInsertEnd>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80040dc:	f001 f99a 	bl	8005414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <prvAddNewTaskToReadyList+0xcc>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <prvAddNewTaskToReadyList+0xba>
=======
 8005de8:	f001 f9b8 	bl	800715c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <prvAddNewTaskToReadyList+0xcc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <prvAddNewTaskToReadyList+0xba>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <prvAddNewTaskToReadyList+0xc8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d207      	bcs.n	8004106 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040f6:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <prvAddNewTaskToReadyList+0xdc>)
 80040f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
=======
 8005df4:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d207      	bcs.n	8005e12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e02:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <prvAddNewTaskToReadyList+0xdc>)
 8005e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	f3bf 8f6f 	isb	sy
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000bbc 	.word	0x20000bbc
 8004114:	200006e8 	.word	0x200006e8
 8004118:	20000bc8 	.word	0x20000bc8
 800411c:	20000bd8 	.word	0x20000bd8
 8004120:	20000bc4 	.word	0x20000bc4
 8004124:	200006ec 	.word	0x200006ec
 8004128:	e000ed04 	.word	0xe000ed04

0800412c <vTaskDelay>:
=======
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000bbc 	.word	0x20000bbc
 8005e20:	200006e8 	.word	0x200006e8
 8005e24:	20000bc8 	.word	0x20000bc8
 8005e28:	20000bd8 	.word	0x20000bd8
 8005e2c:	20000bc4 	.word	0x20000bc4
 8005e30:	200006ec 	.word	0x200006ec
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <vTaskDelay>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
<<<<<<< HEAD
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800413e:	4b13      	ldr	r3, [pc, #76]	; (800418c <vTaskDelay+0x60>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d009      	beq.n	800415a <vTaskDelay+0x2e>
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	e7fe      	b.n	8004158 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800415a:	f000 f87f 	bl	800425c <vTaskSuspendAll>
=======
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <vTaskDelay+0x60>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <vTaskDelay+0x30>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
 8005e66:	e7fe      	b.n	8005e66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e68:	f000 f880 	bl	8005f6c <vTaskSuspendAll>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
<<<<<<< HEAD
 800415e:	2100      	movs	r1, #0
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fcdf 	bl	8004b24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004166:	f000 f887 	bl	8004278 <xTaskResumeAll>
 800416a:	60f8      	str	r0, [r7, #12]
=======
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fcee 	bl	8006850 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e74:	f000 f888 	bl	8005f88 <xTaskResumeAll>
 8005e78:	60f8      	str	r0, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <vTaskDelay+0x64>)
 8004174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	f3bf 8f6f 	isb	sy
=======
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d107      	bne.n	8005e90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e80:	4b06      	ldr	r3, [pc, #24]	; (8005e9c <vTaskDelay+0x64>)
 8005e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000be4 	.word	0x20000be4
 8004190:	e000ed04 	.word	0xe000ed04

08004194 <vTaskStartScheduler>:
=======
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20000be4 	.word	0x20000be4
 8005e9c:	e000ed04 	.word	0xe000ed04

08005ea0 <vTaskStartScheduler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af04      	add	r7, sp, #16
=======
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b08a      	sub	sp, #40	; 0x28
 8005ea4:	af04      	add	r7, sp, #16
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800419a:	2300      	movs	r3, #0
 800419c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]
=======
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	607b      	str	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 80041a2:	463a      	mov	r2, r7
 80041a4:	1d39      	adds	r1, r7, #4
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f838 	bl	8003220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041b0:	6839      	ldr	r1, [r7, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	9202      	str	r2, [sp, #8]
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	2300      	movs	r3, #0
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	460a      	mov	r2, r1
 80041c2:	4920      	ldr	r1, [pc, #128]	; (8004244 <vTaskStartScheduler+0xb0>)
 80041c4:	4820      	ldr	r0, [pc, #128]	; (8004248 <vTaskStartScheduler+0xb4>)
 80041c6:	f7ff fe1d 	bl	8003e04 <xTaskCreateStatic>
 80041ca:	4602      	mov	r2, r0
 80041cc:	4b1f      	ldr	r3, [pc, #124]	; (800424c <vTaskStartScheduler+0xb8>)
 80041ce:	601a      	str	r2, [r3, #0]
=======
 8005eae:	463a      	mov	r2, r7
 8005eb0:	1d39      	adds	r1, r7, #4
 8005eb2:	f107 0308 	add.w	r3, r7, #8
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff f822 	bl	8004f00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	9202      	str	r2, [sp, #8]
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	2300      	movs	r3, #0
 8005ecc:	460a      	mov	r2, r1
 8005ece:	4921      	ldr	r1, [pc, #132]	; (8005f54 <vTaskStartScheduler+0xb4>)
 8005ed0:	4821      	ldr	r0, [pc, #132]	; (8005f58 <vTaskStartScheduler+0xb8>)
 8005ed2:	f7ff fe19 	bl	8005b08 <xTaskCreateStatic>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	4a20      	ldr	r2, [pc, #128]	; (8005f5c <vTaskStartScheduler+0xbc>)
 8005eda:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <vTaskStartScheduler+0xb8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d002      	beq.n	80041de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041d8:	2301      	movs	r3, #1
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e001      	b.n	80041e2 <vTaskStartScheduler+0x4e>
=======
 8005edc:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <vTaskStartScheduler+0xbc>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e001      	b.n	8005eee <vTaskStartScheduler+0x4e>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 80041de:	2300      	movs	r3, #0
 80041e0:	617b      	str	r3, [r7, #20]
=======
 8005eea:	2300      	movs	r3, #0
 8005eec:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
<<<<<<< HEAD
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d102      	bne.n	80041ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041e8:	f000 fcf0 	bl	8004bcc <xTimerCreateTimerTask>
 80041ec:	6178      	str	r0, [r7, #20]
=======
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d102      	bne.n	8005efa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ef4:	f000 fd00 	bl	80068f8 <xTimerCreateTimerTask>
 8005ef8:	6178      	str	r0, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d115      	bne.n	8004220 <vTaskStartScheduler+0x8c>
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	613b      	str	r3, [r7, #16]
=======
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d116      	bne.n	8005f2e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	613b      	str	r3, [r7, #16]
}
 8005f12:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <vTaskStartScheduler+0xbc>)
 8004208:	f04f 32ff 	mov.w	r2, #4294967295
 800420c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <vTaskStartScheduler+0xc0>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004214:	4b10      	ldr	r3, [pc, #64]	; (8004258 <vTaskStartScheduler+0xc4>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
=======
 8005f14:	4b12      	ldr	r3, [pc, #72]	; (8005f60 <vTaskStartScheduler+0xc0>)
 8005f16:	f04f 32ff 	mov.w	r2, #4294967295
 8005f1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <vTaskStartScheduler+0xc4>)
 8005f1e:	2201      	movs	r2, #1
 8005f20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f22:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <vTaskStartScheduler+0xc8>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 800421a:	f001 f85d 	bl	80052d8 <xPortStartScheduler>
=======
 8005f28:	f001 f876 	bl	8007018 <xPortStartScheduler>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 800421e:	e00d      	b.n	800423c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d109      	bne.n	800423c <vTaskStartScheduler+0xa8>
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e7fe      	b.n	800423a <vTaskStartScheduler+0xa6>
}
 800423c:	bf00      	nop
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	08005ab8 	.word	0x08005ab8
 8004248:	08004865 	.word	0x08004865
 800424c:	20000be0 	.word	0x20000be0
 8004250:	20000bdc 	.word	0x20000bdc
 8004254:	20000bc8 	.word	0x20000bc8
 8004258:	20000bc0 	.word	0x20000bc0

0800425c <vTaskSuspendAll>:
=======
 8005f2c:	e00e      	b.n	8005f4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d10a      	bne.n	8005f4c <vTaskStartScheduler+0xac>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	60fb      	str	r3, [r7, #12]
}
 8005f48:	bf00      	nop
 8005f4a:	e7fe      	b.n	8005f4a <vTaskStartScheduler+0xaa>
}
 8005f4c:	bf00      	nop
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	080077f4 	.word	0x080077f4
 8005f58:	08006585 	.word	0x08006585
 8005f5c:	20000be0 	.word	0x20000be0
 8005f60:	20000bdc 	.word	0x20000bdc
 8005f64:	20000bc8 	.word	0x20000bc8
 8005f68:	20000bc0 	.word	0x20000bc0

08005f6c <vTaskSuspendAll>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
=======
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <vTaskSuspendAll+0x18>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3301      	adds	r3, #1
 8004266:	4a03      	ldr	r2, [pc, #12]	; (8004274 <vTaskSuspendAll+0x18>)
 8004268:	6013      	str	r3, [r2, #0]
}
 800426a:	bf00      	nop
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000be4 	.word	0x20000be4

08004278 <xTaskResumeAll>:
=======
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <vTaskSuspendAll+0x18>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a03      	ldr	r2, [pc, #12]	; (8005f84 <vTaskSuspendAll+0x18>)
 8005f78:	6013      	str	r3, [r2, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000be4 	.word	0x20000be4

08005f88 <xTaskResumeAll>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	60bb      	str	r3, [r7, #8]
=======
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 8004286:	4b41      	ldr	r3, [pc, #260]	; (800438c <xTaskResumeAll+0x114>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <xTaskResumeAll+0x2a>
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	e7fe      	b.n	80042a0 <xTaskResumeAll+0x28>
=======
 8005f96:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <xTaskResumeAll+0x118>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	603b      	str	r3, [r7, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xTaskResumeAll+0x2a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 80042a2:	f001 f889 	bl	80053b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042a6:	4b39      	ldr	r3, [pc, #228]	; (800438c <xTaskResumeAll+0x114>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	4a37      	ldr	r2, [pc, #220]	; (800438c <xTaskResumeAll+0x114>)
 80042ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <xTaskResumeAll+0x114>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d162      	bne.n	800437e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042b8:	4b35      	ldr	r3, [pc, #212]	; (8004390 <xTaskResumeAll+0x118>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05e      	beq.n	800437e <xTaskResumeAll+0x106>
=======
 8005fb4:	f001 f8a2 	bl	80070fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fb8:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <xTaskResumeAll+0x118>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3b01      	subs	r3, #1
 8005fbe:	4a38      	ldr	r2, [pc, #224]	; (80060a0 <xTaskResumeAll+0x118>)
 8005fc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc2:	4b37      	ldr	r3, [pc, #220]	; (80060a0 <xTaskResumeAll+0x118>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d162      	bne.n	8006090 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fca:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <xTaskResumeAll+0x11c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d05e      	beq.n	8006090 <xTaskResumeAll+0x108>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 80042c0:	e02f      	b.n	8004322 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80042c2:	4b34      	ldr	r3, [pc, #208]	; (8004394 <xTaskResumeAll+0x11c>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	3318      	adds	r3, #24
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff f85e 	bl	8003390 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff f859 	bl	8003390 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	4b2d      	ldr	r3, [pc, #180]	; (8004398 <xTaskResumeAll+0x120>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d903      	bls.n	80042f2 <xTaskResumeAll+0x7a>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <xTaskResumeAll+0x120>)
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4a27      	ldr	r2, [pc, #156]	; (800439c <xTaskResumeAll+0x124>)
 8004300:	441a      	add	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3304      	adds	r3, #4
 8004306:	4619      	mov	r1, r3
 8004308:	4610      	mov	r0, r2
 800430a:	f7fe ffe6 	bl	80032da <vListInsertEnd>
=======
 8005fd2:	e02f      	b.n	8006034 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005fd4:	4b34      	ldr	r3, [pc, #208]	; (80060a8 <xTaskResumeAll+0x120>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3318      	adds	r3, #24
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff f845 	bl	8005070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7ff f840 	bl	8005070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4b2d      	ldr	r3, [pc, #180]	; (80060ac <xTaskResumeAll+0x124>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d903      	bls.n	8006004 <xTaskResumeAll+0x7c>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <xTaskResumeAll+0x124>)
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4a27      	ldr	r2, [pc, #156]	; (80060b0 <xTaskResumeAll+0x128>)
 8006012:	441a      	add	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3304      	adds	r3, #4
 8006018:	4619      	mov	r1, r3
 800601a:	4610      	mov	r0, r2
 800601c:	f7fe ffcd 	bl	8004fba <vListInsertEnd>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <xTaskResumeAll+0x128>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d302      	bcc.n	8004322 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <xTaskResumeAll+0x12c>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <xTaskResumeAll+0x11c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1cb      	bne.n	80042c2 <xTaskResumeAll+0x4a>
=======
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006024:	4b23      	ldr	r3, [pc, #140]	; (80060b4 <xTaskResumeAll+0x12c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800602e:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <xTaskResumeAll+0x130>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006034:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <xTaskResumeAll+0x120>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1cb      	bne.n	8005fd4 <xTaskResumeAll+0x4c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <xTaskResumeAll+0xbc>
=======
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <xTaskResumeAll+0xbe>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 8004330:	f000 fb4a 	bl	80049c8 <prvResetNextTaskUnblockTime>
=======
 8006042:	f000 fb55 	bl	80066f0 <prvResetNextTaskUnblockTime>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <xTaskResumeAll+0x130>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <xTaskResumeAll+0xea>
=======
 8006046:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <xTaskResumeAll+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d010      	beq.n	8006074 <xTaskResumeAll+0xec>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 8004340:	f000 f844 	bl	80043cc <xTaskIncrementTick>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <xTaskResumeAll+0x12c>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]
=======
 8006052:	f000 f845 	bl	80060e0 <xTaskIncrementTick>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800605c:	4b16      	ldr	r3, [pc, #88]	; (80060b8 <xTaskResumeAll+0x130>)
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
<<<<<<< HEAD
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f1      	bne.n	8004340 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800435c:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <xTaskResumeAll+0x130>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]
=======
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3b01      	subs	r3, #1
 8006066:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1f1      	bne.n	8006052 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800606e:	4b13      	ldr	r3, [pc, #76]	; (80060bc <xTaskResumeAll+0x134>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <xTaskResumeAll+0x12c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <xTaskResumeAll+0x106>
=======
 8006074:	4b10      	ldr	r3, [pc, #64]	; (80060b8 <xTaskResumeAll+0x130>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <xTaskResumeAll+0x108>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800436a:	2301      	movs	r3, #1
 800436c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800436e:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <xTaskResumeAll+0x134>)
 8004370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	f3bf 8f4f 	dsb	sy
 800437a:	f3bf 8f6f 	isb	sy
=======
 800607c:	2301      	movs	r3, #1
 800607e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006080:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <xTaskResumeAll+0x138>)
 8006082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	f3bf 8f6f 	isb	sy
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800437e:	f001 f849 	bl	8005414 <vPortExitCritical>

	return xAlreadyYielded;
 8004382:	68bb      	ldr	r3, [r7, #8]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20000be4 	.word	0x20000be4
 8004390:	20000bbc 	.word	0x20000bbc
 8004394:	20000b7c 	.word	0x20000b7c
 8004398:	20000bc4 	.word	0x20000bc4
 800439c:	200006ec 	.word	0x200006ec
 80043a0:	200006e8 	.word	0x200006e8
 80043a4:	20000bd0 	.word	0x20000bd0
 80043a8:	20000bcc 	.word	0x20000bcc
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <xTaskGetTickCount>:
=======
 8006090:	f001 f864 	bl	800715c <vPortExitCritical>

	return xAlreadyYielded;
 8006094:	68bb      	ldr	r3, [r7, #8]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20000be4 	.word	0x20000be4
 80060a4:	20000bbc 	.word	0x20000bbc
 80060a8:	20000b7c 	.word	0x20000b7c
 80060ac:	20000bc4 	.word	0x20000bc4
 80060b0:	200006ec 	.word	0x200006ec
 80060b4:	200006e8 	.word	0x200006e8
 80060b8:	20000bd0 	.word	0x20000bd0
 80060bc:	20000bcc 	.word	0x20000bcc
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <xTaskGetTickCount>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
=======
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <xTaskGetTickCount+0x18>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	607b      	str	r3, [r7, #4]
=======
 80060ca:	4b04      	ldr	r3, [pc, #16]	; (80060dc <xTaskGetTickCount+0x18>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	607b      	str	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 80043bc:	687b      	ldr	r3, [r7, #4]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr
 80043c8:	20000bc0 	.word	0x20000bc0

080043cc <xTaskIncrementTick>:
=======
 80060d0:	687b      	ldr	r3, [r7, #4]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr
 80060dc:	20000bc0 	.word	0x20000bc0

080060e0 <xTaskIncrementTick>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
=======
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 80043d6:	4b51      	ldr	r3, [pc, #324]	; (800451c <xTaskIncrementTick+0x150>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 808d 	bne.w	80044fa <xTaskIncrementTick+0x12e>
=======
 80060ea:	4b51      	ldr	r3, [pc, #324]	; (8006230 <xTaskIncrementTick+0x150>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 808e 	bne.w	8006210 <xTaskIncrementTick+0x130>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 80043e0:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <xTaskIncrementTick+0x154>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]
=======
 80060f4:	4b4f      	ldr	r3, [pc, #316]	; (8006234 <xTaskIncrementTick+0x154>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 80043e8:	4a4d      	ldr	r2, [pc, #308]	; (8004520 <xTaskIncrementTick+0x154>)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11f      	bne.n	8004434 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80043f4:	4b4b      	ldr	r3, [pc, #300]	; (8004524 <xTaskIncrementTick+0x158>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <xTaskIncrementTick+0x46>
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	e7fe      	b.n	8004410 <xTaskIncrementTick+0x44>
 8004412:	4b44      	ldr	r3, [pc, #272]	; (8004524 <xTaskIncrementTick+0x158>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	4b43      	ldr	r3, [pc, #268]	; (8004528 <xTaskIncrementTick+0x15c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a41      	ldr	r2, [pc, #260]	; (8004524 <xTaskIncrementTick+0x158>)
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4a41      	ldr	r2, [pc, #260]	; (8004528 <xTaskIncrementTick+0x15c>)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <xTaskIncrementTick+0x160>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a3f      	ldr	r2, [pc, #252]	; (800452c <xTaskIncrementTick+0x160>)
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	f000 faca 	bl	80049c8 <prvResetNextTaskUnblockTime>
=======
 80060fc:	4a4d      	ldr	r2, [pc, #308]	; (8006234 <xTaskIncrementTick+0x154>)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d120      	bne.n	800614a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006108:	4b4b      	ldr	r3, [pc, #300]	; (8006238 <xTaskIncrementTick+0x158>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00a      	beq.n	8006128 <xTaskIncrementTick+0x48>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	603b      	str	r3, [r7, #0]
}
 8006124:	bf00      	nop
 8006126:	e7fe      	b.n	8006126 <xTaskIncrementTick+0x46>
 8006128:	4b43      	ldr	r3, [pc, #268]	; (8006238 <xTaskIncrementTick+0x158>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	4b43      	ldr	r3, [pc, #268]	; (800623c <xTaskIncrementTick+0x15c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a41      	ldr	r2, [pc, #260]	; (8006238 <xTaskIncrementTick+0x158>)
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4a41      	ldr	r2, [pc, #260]	; (800623c <xTaskIncrementTick+0x15c>)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	4b40      	ldr	r3, [pc, #256]	; (8006240 <xTaskIncrementTick+0x160>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3301      	adds	r3, #1
 8006142:	4a3f      	ldr	r2, [pc, #252]	; (8006240 <xTaskIncrementTick+0x160>)
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	f000 fad3 	bl	80066f0 <prvResetNextTaskUnblockTime>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 8004434:	4b3e      	ldr	r3, [pc, #248]	; (8004530 <xTaskIncrementTick+0x164>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d34e      	bcc.n	80044dc <xTaskIncrementTick+0x110>
=======
 800614a:	4b3e      	ldr	r3, [pc, #248]	; (8006244 <xTaskIncrementTick+0x164>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	429a      	cmp	r2, r3
 8006152:	d34e      	bcc.n	80061f2 <xTaskIncrementTick+0x112>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 800443e:	4b39      	ldr	r3, [pc, #228]	; (8004524 <xTaskIncrementTick+0x158>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <xTaskIncrementTick+0x80>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <xTaskIncrementTick+0x82>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <xTaskIncrementTick+0x90>
=======
 8006154:	4b38      	ldr	r3, [pc, #224]	; (8006238 <xTaskIncrementTick+0x158>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <xTaskIncrementTick+0x82>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <xTaskIncrementTick+0x84>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <xTaskIncrementTick+0x92>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8004452:	4b37      	ldr	r3, [pc, #220]	; (8004530 <xTaskIncrementTick+0x164>)
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	601a      	str	r2, [r3, #0]
					break;
 800445a:	e03f      	b.n	80044dc <xTaskIncrementTick+0x110>
=======
 8006168:	4b36      	ldr	r3, [pc, #216]	; (8006244 <xTaskIncrementTick+0x164>)
 800616a:	f04f 32ff 	mov.w	r2, #4294967295
 800616e:	601a      	str	r2, [r3, #0]
					break;
 8006170:	e03f      	b.n	80061f2 <xTaskIncrementTick+0x112>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
<<<<<<< HEAD
 800445c:	4b31      	ldr	r3, [pc, #196]	; (8004524 <xTaskIncrementTick+0x158>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d203      	bcs.n	800447c <xTaskIncrementTick+0xb0>
=======
 8006172:	4b31      	ldr	r3, [pc, #196]	; (8006238 <xTaskIncrementTick+0x158>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	429a      	cmp	r2, r3
 8006188:	d203      	bcs.n	8006192 <xTaskIncrementTick+0xb2>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 8004474:	4a2e      	ldr	r2, [pc, #184]	; (8004530 <xTaskIncrementTick+0x164>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6013      	str	r3, [r2, #0]
						break;
 800447a:	e02f      	b.n	80044dc <xTaskIncrementTick+0x110>
=======
 800618a:	4a2e      	ldr	r2, [pc, #184]	; (8006244 <xTaskIncrementTick+0x164>)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6013      	str	r3, [r2, #0]
						break;
 8006190:	e02f      	b.n	80061f2 <xTaskIncrementTick+0x112>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe ff85 	bl	8003390 <uxListRemove>
=======
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3304      	adds	r3, #4
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe ff6a 	bl	8005070 <uxListRemove>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	3318      	adds	r3, #24
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe ff7c 	bl	8003390 <uxListRemove>
=======
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	3318      	adds	r3, #24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe ff61 	bl	8005070 <uxListRemove>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <xTaskIncrementTick+0x168>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d903      	bls.n	80044ac <xTaskIncrementTick+0xe0>
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4a22      	ldr	r2, [pc, #136]	; (8004534 <xTaskIncrementTick+0x168>)
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4a1f      	ldr	r2, [pc, #124]	; (8004538 <xTaskIncrementTick+0x16c>)
 80044ba:	441a      	add	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f7fe ff09 	bl	80032da <vListInsertEnd>
=======
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b2:	4b25      	ldr	r3, [pc, #148]	; (8006248 <xTaskIncrementTick+0x168>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d903      	bls.n	80061c2 <xTaskIncrementTick+0xe2>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	4a22      	ldr	r2, [pc, #136]	; (8006248 <xTaskIncrementTick+0x168>)
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c6:	4613      	mov	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4a1f      	ldr	r2, [pc, #124]	; (800624c <xTaskIncrementTick+0x16c>)
 80061d0:	441a      	add	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4619      	mov	r1, r3
 80061d8:	4610      	mov	r0, r2
 80061da:	f7fe feee 	bl	8004fba <vListInsertEnd>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044cc:	4b1b      	ldr	r3, [pc, #108]	; (800453c <xTaskIncrementTick+0x170>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d3b3      	bcc.n	800443e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044da:	e7b0      	b.n	800443e <xTaskIncrementTick+0x72>
=======
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e2:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <xTaskIncrementTick+0x170>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d3b3      	bcc.n	8006154 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061f0:	e7b0      	b.n	8006154 <xTaskIncrementTick+0x74>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 80044dc:	4b17      	ldr	r3, [pc, #92]	; (800453c <xTaskIncrementTick+0x170>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e2:	4915      	ldr	r1, [pc, #84]	; (8004538 <xTaskIncrementTick+0x16c>)
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d907      	bls.n	8004504 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e004      	b.n	8004504 <xTaskIncrementTick+0x138>
=======
 80061f2:	4b17      	ldr	r3, [pc, #92]	; (8006250 <xTaskIncrementTick+0x170>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f8:	4914      	ldr	r1, [pc, #80]	; (800624c <xTaskIncrementTick+0x16c>)
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d907      	bls.n	800621a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800620a:	2301      	movs	r3, #1
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e004      	b.n	800621a <xTaskIncrementTick+0x13a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
<<<<<<< HEAD
 80044fa:	4b11      	ldr	r3, [pc, #68]	; (8004540 <xTaskIncrementTick+0x174>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	4a0f      	ldr	r2, [pc, #60]	; (8004540 <xTaskIncrementTick+0x174>)
 8004502:	6013      	str	r3, [r2, #0]
=======
 8006210:	4b10      	ldr	r3, [pc, #64]	; (8006254 <xTaskIncrementTick+0x174>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	4a0f      	ldr	r2, [pc, #60]	; (8006254 <xTaskIncrementTick+0x174>)
 8006218:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <xTaskIncrementTick+0x178>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
=======
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <xTaskIncrementTick+0x178>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006222:	2301      	movs	r3, #1
 8006224:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
<<<<<<< HEAD
 8004510:	697b      	ldr	r3, [r7, #20]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000be4 	.word	0x20000be4
 8004520:	20000bc0 	.word	0x20000bc0
 8004524:	20000b74 	.word	0x20000b74
 8004528:	20000b78 	.word	0x20000b78
 800452c:	20000bd4 	.word	0x20000bd4
 8004530:	20000bdc 	.word	0x20000bdc
 8004534:	20000bc4 	.word	0x20000bc4
 8004538:	200006ec 	.word	0x200006ec
 800453c:	200006e8 	.word	0x200006e8
 8004540:	20000bcc 	.word	0x20000bcc
 8004544:	20000bd0 	.word	0x20000bd0

08004548 <vTaskSwitchContext>:
=======
 8006226:	697b      	ldr	r3, [r7, #20]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000be4 	.word	0x20000be4
 8006234:	20000bc0 	.word	0x20000bc0
 8006238:	20000b74 	.word	0x20000b74
 800623c:	20000b78 	.word	0x20000b78
 8006240:	20000bd4 	.word	0x20000bd4
 8006244:	20000bdc 	.word	0x20000bdc
 8006248:	20000bc4 	.word	0x20000bc4
 800624c:	200006ec 	.word	0x200006ec
 8006250:	200006e8 	.word	0x200006e8
 8006254:	20000bcc 	.word	0x20000bcc
 8006258:	20000bd0 	.word	0x20000bd0

0800625c <vTaskSwitchContext>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800454e:	4b27      	ldr	r3, [pc, #156]	; (80045ec <vTaskSwitchContext+0xa4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <vTaskSwitchContext+0x16>
=======
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006262:	4b27      	ldr	r3, [pc, #156]	; (8006300 <vTaskSwitchContext+0xa4>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <vTaskSwitchContext+0x16>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8004556:	4b26      	ldr	r3, [pc, #152]	; (80045f0 <vTaskSwitchContext+0xa8>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
=======
 800626a:	4b26      	ldr	r3, [pc, #152]	; (8006304 <vTaskSwitchContext+0xa8>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 800455c:	e040      	b.n	80045e0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800455e:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <vTaskSwitchContext+0xa8>)
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <vTaskSwitchContext+0xac>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e00f      	b.n	800458c <vTaskSwitchContext+0x44>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <vTaskSwitchContext+0x3e>
 8004572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	e7fe      	b.n	8004584 <vTaskSwitchContext+0x3c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b01      	subs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	491a      	ldr	r1, [pc, #104]	; (80045f8 <vTaskSwitchContext+0xb0>)
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0e5      	beq.n	800456c <vTaskSwitchContext+0x24>
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <vTaskSwitchContext+0xb0>)
 80045ac:	4413      	add	r3, r2
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	3308      	adds	r3, #8
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d104      	bne.n	80045d0 <vTaskSwitchContext+0x88>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <vTaskSwitchContext+0xb4>)
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <vTaskSwitchContext+0xac>)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20000be4 	.word	0x20000be4
 80045f0:	20000bd0 	.word	0x20000bd0
 80045f4:	20000bc4 	.word	0x20000bc4
 80045f8:	200006ec 	.word	0x200006ec
 80045fc:	200006e8 	.word	0x200006e8

08004600 <vTaskPlaceOnEventList>:
=======
 8006270:	e041      	b.n	80062f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006272:	4b24      	ldr	r3, [pc, #144]	; (8006304 <vTaskSwitchContext+0xa8>)
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006278:	4b23      	ldr	r3, [pc, #140]	; (8006308 <vTaskSwitchContext+0xac>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	e010      	b.n	80062a2 <vTaskSwitchContext+0x46>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <vTaskSwitchContext+0x40>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	607b      	str	r3, [r7, #4]
}
 8006298:	bf00      	nop
 800629a:	e7fe      	b.n	800629a <vTaskSwitchContext+0x3e>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b01      	subs	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	491a      	ldr	r1, [pc, #104]	; (800630c <vTaskSwitchContext+0xb0>)
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4613      	mov	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	440b      	add	r3, r1
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0e4      	beq.n	8006280 <vTaskSwitchContext+0x24>
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4a12      	ldr	r2, [pc, #72]	; (800630c <vTaskSwitchContext+0xb0>)
 80062c2:	4413      	add	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	605a      	str	r2, [r3, #4]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	3308      	adds	r3, #8
 80062d8:	429a      	cmp	r2, r3
 80062da:	d104      	bne.n	80062e6 <vTaskSwitchContext+0x8a>
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	605a      	str	r2, [r3, #4]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <vTaskSwitchContext+0xb4>)
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	4a05      	ldr	r2, [pc, #20]	; (8006308 <vTaskSwitchContext+0xac>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6013      	str	r3, [r2, #0]
}
 80062f6:	bf00      	nop
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr
 8006300:	20000be4 	.word	0x20000be4
 8006304:	20000bd0 	.word	0x20000bd0
 8006308:	20000bc4 	.word	0x20000bc4
 800630c:	200006ec 	.word	0x200006ec
 8006310:	200006e8 	.word	0x200006e8

08006314 <vTaskPlaceOnEventList>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <vTaskPlaceOnEventList+0x24>
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	e7fe      	b.n	8004622 <vTaskPlaceOnEventList+0x22>
=======
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60fb      	str	r3, [r7, #12]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <vTaskPlaceOnEventList+0x24>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <vTaskPlaceOnEventList+0x44>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3318      	adds	r3, #24
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fe fe77 	bl	8003320 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004632:	2101      	movs	r1, #1
 8004634:	6838      	ldr	r0, [r7, #0]
 8004636:	f000 fa75 	bl	8004b24 <prvAddCurrentTaskToDelayedList>
}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200006e8 	.word	0x200006e8

08004648 <vTaskPlaceOnEventListRestricted>:
=======
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <vTaskPlaceOnEventList+0x44>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3318      	adds	r3, #24
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fe fe5c 	bl	8005000 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006348:	2101      	movs	r1, #1
 800634a:	6838      	ldr	r0, [r7, #0]
 800634c:	f000 fa80 	bl	8006850 <prvAddCurrentTaskToDelayedList>
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	200006e8 	.word	0x200006e8

0800635c <vTaskPlaceOnEventListRestricted>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
<<<<<<< HEAD
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <vTaskPlaceOnEventListRestricted+0x26>
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e7fe      	b.n	800466c <vTaskPlaceOnEventListRestricted+0x24>
=======
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	617b      	str	r3, [r7, #20]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <vTaskPlaceOnEventListRestricted+0x26>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
<<<<<<< HEAD
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <vTaskPlaceOnEventListRestricted+0x50>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3318      	adds	r3, #24
 8004674:	4619      	mov	r1, r3
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7fe fe2f 	bl	80032da <vListInsertEnd>
=======
 8006384:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3318      	adds	r3, #24
 800638a:	4619      	mov	r1, r3
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7fe fe14 	bl	8004fba <vListInsertEnd>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
<<<<<<< HEAD
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	60bb      	str	r3, [r7, #8]
=======
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006398:	f04f 33ff 	mov.w	r3, #4294967295
 800639c:	60bb      	str	r3, [r7, #8]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
<<<<<<< HEAD
 8004688:	6879      	ldr	r1, [r7, #4]
 800468a:	68b8      	ldr	r0, [r7, #8]
 800468c:	f000 fa4a 	bl	8004b24 <prvAddCurrentTaskToDelayedList>
	}
 8004690:	bf00      	nop
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	200006e8 	.word	0x200006e8

0800469c <xTaskRemoveFromEventList>:
=======
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	68b8      	ldr	r0, [r7, #8]
 80063a2:	f000 fa55 	bl	8006850 <prvAddCurrentTaskToDelayedList>
	}
 80063a6:	bf00      	nop
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	200006e8 	.word	0x200006e8

080063b4 <xTaskRemoveFromEventList>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
=======
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
<<<<<<< HEAD
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <xTaskRemoveFromEventList+0x2a>
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	e7fe      	b.n	80046c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	3318      	adds	r3, #24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe fe60 	bl	8003390 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046d0:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <xTaskRemoveFromEventList+0xac>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11d      	bne.n	8004714 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	3304      	adds	r3, #4
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fe fe57 	bl	8003390 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	4b19      	ldr	r3, [pc, #100]	; (800474c <xTaskRemoveFromEventList+0xb0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d903      	bls.n	80046f6 <xTaskRemoveFromEventList+0x5a>
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	4a16      	ldr	r2, [pc, #88]	; (800474c <xTaskRemoveFromEventList+0xb0>)
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4a13      	ldr	r2, [pc, #76]	; (8004750 <xTaskRemoveFromEventList+0xb4>)
 8004704:	441a      	add	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f7fe fde4 	bl	80032da <vListInsertEnd>
 8004712:	e005      	b.n	8004720 <xTaskRemoveFromEventList+0x84>
=======
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	60fb      	str	r3, [r7, #12]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	3318      	adds	r3, #24
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fe43 	bl	8005070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ea:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <xTaskRemoveFromEventList+0xb0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d11d      	bne.n	800642e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fe3a 	bl	8005070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	4b19      	ldr	r3, [pc, #100]	; (8006468 <xTaskRemoveFromEventList+0xb4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d903      	bls.n	8006410 <xTaskRemoveFromEventList+0x5c>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4a16      	ldr	r2, [pc, #88]	; (8006468 <xTaskRemoveFromEventList+0xb4>)
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4a13      	ldr	r2, [pc, #76]	; (800646c <xTaskRemoveFromEventList+0xb8>)
 800641e:	441a      	add	r2, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f7fe fdc7 	bl	8004fba <vListInsertEnd>
 800642c:	e005      	b.n	800643a <xTaskRemoveFromEventList+0x86>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	3318      	adds	r3, #24
 8004718:	4619      	mov	r1, r3
 800471a:	480e      	ldr	r0, [pc, #56]	; (8004754 <xTaskRemoveFromEventList+0xb8>)
 800471c:	f7fe fddd 	bl	80032da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <xTaskRemoveFromEventList+0xbc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	429a      	cmp	r2, r3
 800472c:	d905      	bls.n	800473a <xTaskRemoveFromEventList+0x9e>
=======
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3318      	adds	r3, #24
 8006432:	4619      	mov	r1, r3
 8006434:	480e      	ldr	r0, [pc, #56]	; (8006470 <xTaskRemoveFromEventList+0xbc>)
 8006436:	f7fe fdc0 	bl	8004fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <xTaskRemoveFromEventList+0xc0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	429a      	cmp	r2, r3
 8006446:	d905      	bls.n	8006454 <xTaskRemoveFromEventList+0xa0>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 800472e:	2301      	movs	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
=======
 8006448:	2301      	movs	r3, #1
 800644a:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <xTaskRemoveFromEventList+0xc0>)
 8004734:	2201      	movs	r2, #1
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	e001      	b.n	800473e <xTaskRemoveFromEventList+0xa2>
=======
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <xTaskRemoveFromEventList+0xc4>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e001      	b.n	8006458 <xTaskRemoveFromEventList+0xa4>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
=======
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
<<<<<<< HEAD
 800473e:	697b      	ldr	r3, [r7, #20]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000be4 	.word	0x20000be4
 800474c:	20000bc4 	.word	0x20000bc4
 8004750:	200006ec 	.word	0x200006ec
 8004754:	20000b7c 	.word	0x20000b7c
 8004758:	200006e8 	.word	0x200006e8
 800475c:	20000bd0 	.word	0x20000bd0

08004760 <vTaskInternalSetTimeOutState>:
=======
 8006458:	697b      	ldr	r3, [r7, #20]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000be4 	.word	0x20000be4
 8006468:	20000bc4 	.word	0x20000bc4
 800646c:	200006ec 	.word	0x200006ec
 8006470:	20000b7c 	.word	0x20000b7c
 8006474:	200006e8 	.word	0x200006e8
 8006478:	20000bd0 	.word	0x20000bd0

0800647c <vTaskInternalSetTimeOutState>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
<<<<<<< HEAD
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <vTaskInternalSetTimeOutState+0x24>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <vTaskInternalSetTimeOutState+0x28>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000bd4 	.word	0x20000bd4
 8004788:	20000bc0 	.word	0x20000bc0

0800478c <xTaskCheckForTimeOut>:
=======
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <vTaskInternalSetTimeOutState+0x24>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <vTaskInternalSetTimeOutState+0x28>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000bd4 	.word	0x20000bd4
 80064a4:	20000bc0 	.word	0x20000bc0

080064a8 <xTaskCheckForTimeOut>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
<<<<<<< HEAD
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <xTaskCheckForTimeOut+0x24>
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e7fe      	b.n	80047ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <xTaskCheckForTimeOut+0x3e>
 80047b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e7fe      	b.n	80047c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80047ca:	f000 fdf5 	bl	80053b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047ce:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <xTaskCheckForTimeOut+0xb8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
=======
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	613b      	str	r3, [r7, #16]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	60fb      	str	r3, [r7, #12]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064ea:	f000 fe07 	bl	80070fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <xTaskCheckForTimeOut+0xbc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
<<<<<<< HEAD
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d102      	bne.n	80047ee <xTaskCheckForTimeOut+0x62>
=======
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d102      	bne.n	800650e <xTaskCheckForTimeOut+0x66>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
<<<<<<< HEAD
 80047e8:	2300      	movs	r3, #0
 80047ea:	61fb      	str	r3, [r7, #28]
 80047ec:	e023      	b.n	8004836 <xTaskCheckForTimeOut+0xaa>
=======
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e023      	b.n	8006556 <xTaskCheckForTimeOut+0xae>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
<<<<<<< HEAD
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <xTaskCheckForTimeOut+0xbc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d007      	beq.n	800480a <xTaskCheckForTimeOut+0x7e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <xTaskCheckForTimeOut+0x7e>
=======
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <xTaskCheckForTimeOut+0xc0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d007      	beq.n	800652a <xTaskCheckForTimeOut+0x82>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	429a      	cmp	r2, r3
 8006522:	d302      	bcc.n	800652a <xTaskCheckForTimeOut+0x82>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
<<<<<<< HEAD
 8004804:	2301      	movs	r3, #1
 8004806:	61fb      	str	r3, [r7, #28]
 8004808:	e015      	b.n	8004836 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	429a      	cmp	r2, r3
 8004812:	d20b      	bcs.n	800482c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad2      	subs	r2, r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff9d 	bl	8004760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e004      	b.n	8004836 <xTaskCheckForTimeOut+0xaa>
=======
 8006524:	2301      	movs	r3, #1
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e015      	b.n	8006556 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	429a      	cmp	r2, r3
 8006532:	d20b      	bcs.n	800654c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff9b 	bl	800647c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006546:	2300      	movs	r3, #0
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	e004      	b.n	8006556 <xTaskCheckForTimeOut+0xae>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			*pxTicksToWait = 0;
<<<<<<< HEAD
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004836:	f000 fded 	bl	8005414 <vPortExitCritical>

	return xReturn;
 800483a:	69fb      	ldr	r3, [r7, #28]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000bc0 	.word	0x20000bc0
 8004848:	20000bd4 	.word	0x20000bd4

0800484c <vTaskMissedYield>:
=======
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006552:	2301      	movs	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006556:	f000 fe01 	bl	800715c <vPortExitCritical>

	return xReturn;
 800655a:	69fb      	ldr	r3, [r7, #28]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000bc0 	.word	0x20000bc0
 8006568:	20000bd4 	.word	0x20000bd4

0800656c <vTaskMissedYield>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
<<<<<<< HEAD
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004850:	4b03      	ldr	r3, [pc, #12]	; (8004860 <vTaskMissedYield+0x14>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
}
 8004856:	bf00      	nop
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000bd0 	.word	0x20000bd0

08004864 <prvIdleTask>:
=======
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <vTaskMissedYield+0x14>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	bf00      	nop
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000bd0 	.word	0x20000bd0

08006584 <prvIdleTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
=======
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 800486c:	f000 f852 	bl	8004914 <prvCheckTasksWaitingTermination>
=======
 800658c:	f000 f852 	bl	8006634 <prvCheckTasksWaitingTermination>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <prvIdleTask+0x28>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d9f9      	bls.n	800486c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <prvIdleTask+0x2c>)
 800487a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004888:	e7f0      	b.n	800486c <prvIdleTask+0x8>
 800488a:	bf00      	nop
 800488c:	200006ec 	.word	0x200006ec
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <prvInitialiseTaskLists>:
=======
 8006590:	4b06      	ldr	r3, [pc, #24]	; (80065ac <prvIdleTask+0x28>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d9f9      	bls.n	800658c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <prvIdleTask+0x2c>)
 800659a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065a8:	e7f0      	b.n	800658c <prvIdleTask+0x8>
 80065aa:	bf00      	nop
 80065ac:	200006ec 	.word	0x200006ec
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <prvInitialiseTaskLists>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
 800489e:	e00c      	b.n	80048ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <prvInitialiseTaskLists+0x60>)
 80048ac:	4413      	add	r3, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fe fce8 	bl	8003284 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3301      	adds	r3, #1
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b37      	cmp	r3, #55	; 0x37
 80048be:	d9ef      	bls.n	80048a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048c0:	480d      	ldr	r0, [pc, #52]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048c2:	f7fe fcdf 	bl	8003284 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048c6:	480d      	ldr	r0, [pc, #52]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048c8:	f7fe fcdc 	bl	8003284 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048cc:	480c      	ldr	r0, [pc, #48]	; (8004900 <prvInitialiseTaskLists+0x6c>)
 80048ce:	f7fe fcd9 	bl	8003284 <vListInitialise>
=======
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	e00c      	b.n	80065da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4a12      	ldr	r2, [pc, #72]	; (8006614 <prvInitialiseTaskLists+0x60>)
 80065cc:	4413      	add	r3, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fcc8 	bl	8004f64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3301      	adds	r3, #1
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b37      	cmp	r3, #55	; 0x37
 80065de:	d9ef      	bls.n	80065c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065e0:	480d      	ldr	r0, [pc, #52]	; (8006618 <prvInitialiseTaskLists+0x64>)
 80065e2:	f7fe fcbf 	bl	8004f64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065e6:	480d      	ldr	r0, [pc, #52]	; (800661c <prvInitialiseTaskLists+0x68>)
 80065e8:	f7fe fcbc 	bl	8004f64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065ec:	480c      	ldr	r0, [pc, #48]	; (8006620 <prvInitialiseTaskLists+0x6c>)
 80065ee:	f7fe fcb9 	bl	8004f64 <vListInitialise>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 80048d2:	480c      	ldr	r0, [pc, #48]	; (8004904 <prvInitialiseTaskLists+0x70>)
 80048d4:	f7fe fcd6 	bl	8003284 <vListInitialise>
=======
 80065f2:	480c      	ldr	r0, [pc, #48]	; (8006624 <prvInitialiseTaskLists+0x70>)
 80065f4:	f7fe fcb6 	bl	8004f64 <vListInitialise>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 80048d8:	480b      	ldr	r0, [pc, #44]	; (8004908 <prvInitialiseTaskLists+0x74>)
 80048da:	f7fe fcd3 	bl	8003284 <vListInitialise>
=======
 80065f8:	480b      	ldr	r0, [pc, #44]	; (8006628 <prvInitialiseTaskLists+0x74>)
 80065fa:	f7fe fcb3 	bl	8004f64 <vListInitialise>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <prvInitialiseTaskLists+0x78>)
 80048e0:	4a05      	ldr	r2, [pc, #20]	; (80048f8 <prvInitialiseTaskLists+0x64>)
 80048e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <prvInitialiseTaskLists+0x7c>)
 80048e6:	4a05      	ldr	r2, [pc, #20]	; (80048fc <prvInitialiseTaskLists+0x68>)
 80048e8:	601a      	str	r2, [r3, #0]
}
 80048ea:	bf00      	nop
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	200006ec 	.word	0x200006ec
 80048f8:	20000b4c 	.word	0x20000b4c
 80048fc:	20000b60 	.word	0x20000b60
 8004900:	20000b7c 	.word	0x20000b7c
 8004904:	20000b90 	.word	0x20000b90
 8004908:	20000ba8 	.word	0x20000ba8
 800490c:	20000b74 	.word	0x20000b74
 8004910:	20000b78 	.word	0x20000b78

08004914 <prvCheckTasksWaitingTermination>:
=======
 80065fe:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvInitialiseTaskLists+0x78>)
 8006600:	4a05      	ldr	r2, [pc, #20]	; (8006618 <prvInitialiseTaskLists+0x64>)
 8006602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <prvInitialiseTaskLists+0x7c>)
 8006606:	4a05      	ldr	r2, [pc, #20]	; (800661c <prvInitialiseTaskLists+0x68>)
 8006608:	601a      	str	r2, [r3, #0]
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	200006ec 	.word	0x200006ec
 8006618:	20000b4c 	.word	0x20000b4c
 800661c:	20000b60 	.word	0x20000b60
 8006620:	20000b7c 	.word	0x20000b7c
 8006624:	20000b90 	.word	0x20000b90
 8006628:	20000ba8 	.word	0x20000ba8
 800662c:	20000b74 	.word	0x20000b74
 8006630:	20000b78 	.word	0x20000b78

08006634 <prvCheckTasksWaitingTermination>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
=======
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 800491a:	e019      	b.n	8004950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800491c:	f000 fd4c 	bl	80053b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <prvCheckTasksWaitingTermination+0x4c>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe fd2f 	bl	8003390 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004932:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <prvCheckTasksWaitingTermination+0x50>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <prvCheckTasksWaitingTermination+0x50>)
 800493a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3b01      	subs	r3, #1
 8004942:	4a09      	ldr	r2, [pc, #36]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 8004944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004946:	f000 fd65 	bl	8005414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f80e 	bl	800496c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <prvCheckTasksWaitingTermination+0x54>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e1      	bne.n	800491c <prvCheckTasksWaitingTermination+0x8>
=======
 800663a:	e019      	b.n	8006670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800663c:	f000 fd5e 	bl	80070fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006640:	4b10      	ldr	r3, [pc, #64]	; (8006684 <prvCheckTasksWaitingTermination+0x50>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3304      	adds	r3, #4
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fd0f 	bl	8005070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <prvCheckTasksWaitingTermination+0x54>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3b01      	subs	r3, #1
 8006658:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <prvCheckTasksWaitingTermination+0x54>)
 800665a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <prvCheckTasksWaitingTermination+0x58>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3b01      	subs	r3, #1
 8006662:	4a0a      	ldr	r2, [pc, #40]	; (800668c <prvCheckTasksWaitingTermination+0x58>)
 8006664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006666:	f000 fd79 	bl	800715c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f810 	bl	8006690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <prvCheckTasksWaitingTermination+0x58>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e1      	bne.n	800663c <prvCheckTasksWaitingTermination+0x8>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000b90 	.word	0x20000b90
 8004964:	20000bbc 	.word	0x20000bbc
 8004968:	20000ba4 	.word	0x20000ba4

0800496c <prvDeleteTCB>:
=======
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000b90 	.word	0x20000b90
 8006688:	20000bbc 	.word	0x20000bbc
 800668c:	20000ba4 	.word	0x20000ba4

08006690 <prvDeleteTCB>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
=======
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <prvDeleteTCB+0x24>
=======
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d108      	bne.n	80066b4 <prvDeleteTCB+0x24>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fed0 	bl	8005728 <vPortFree>
				vPortFree( pxTCB );
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fecd 	bl	8005728 <vPortFree>
=======
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 feec 	bl	8007484 <vPortFree>
				vPortFree( pxTCB );
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fee9 	bl	8007484 <vPortFree>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 800498e:	e017      	b.n	80049c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004996:	2b01      	cmp	r3, #1
 8004998:	d103      	bne.n	80049a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fec4 	bl	8005728 <vPortFree>
	}
 80049a0:	e00e      	b.n	80049c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d009      	beq.n	80049c0 <prvDeleteTCB+0x54>
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	e7fe      	b.n	80049be <prvDeleteTCB+0x52>
	}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <prvResetNextTaskUnblockTime>:
=======
 80066b2:	e018      	b.n	80066e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d103      	bne.n	80066c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fee0 	bl	8007484 <vPortFree>
	}
 80066c4:	e00f      	b.n	80066e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d00a      	beq.n	80066e6 <prvDeleteTCB+0x56>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <prvDeleteTCB+0x54>
	}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <prvResetNextTaskUnblockTime>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049ce:	4b0e      	ldr	r3, [pc, #56]	; (8004a08 <prvResetNextTaskUnblockTime+0x40>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <prvResetNextTaskUnblockTime+0x14>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <prvResetNextTaskUnblockTime+0x16>
 80049dc:	2300      	movs	r3, #0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d004      	beq.n	80049ec <prvResetNextTaskUnblockTime+0x24>
=======
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066f6:	4b0e      	ldr	r3, [pc, #56]	; (8006730 <prvResetNextTaskUnblockTime+0x40>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <prvResetNextTaskUnblockTime+0x14>
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <prvResetNextTaskUnblockTime+0x16>
 8006704:	2300      	movs	r3, #0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <prvResetNextTaskUnblockTime+0x24>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <prvResetNextTaskUnblockTime+0x44>)
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295
 80049e8:	601a      	str	r2, [r3, #0]
=======
 800670a:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <prvResetNextTaskUnblockTime+0x44>)
 800670c:	f04f 32ff 	mov.w	r2, #4294967295
 8006710:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 80049ea:	e008      	b.n	80049fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <prvResetNextTaskUnblockTime+0x40>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <prvResetNextTaskUnblockTime+0x44>)
 80049fc:	6013      	str	r3, [r2, #0]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	20000b74 	.word	0x20000b74
 8004a0c:	20000bdc 	.word	0x20000bdc

08004a10 <xTaskGetSchedulerState>:
=======
 8006712:	e008      	b.n	8006726 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006714:	4b06      	ldr	r3, [pc, #24]	; (8006730 <prvResetNextTaskUnblockTime+0x40>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	4a04      	ldr	r2, [pc, #16]	; (8006734 <prvResetNextTaskUnblockTime+0x44>)
 8006724:	6013      	str	r3, [r2, #0]
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	bc80      	pop	{r7}
 800672e:	4770      	bx	lr
 8006730:	20000b74 	.word	0x20000b74
 8006734:	20000bdc 	.word	0x20000bdc

08006738 <xTaskGetSchedulerState>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
<<<<<<< HEAD
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <xTaskGetSchedulerState+0x34>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	e008      	b.n	8004a36 <xTaskGetSchedulerState+0x26>
=======
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <xTaskGetSchedulerState+0x34>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006746:	2301      	movs	r3, #1
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	e008      	b.n	800675e <xTaskGetSchedulerState+0x26>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <xTaskGetSchedulerState+0x38>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	607b      	str	r3, [r7, #4]
 8004a30:	e001      	b.n	8004a36 <xTaskGetSchedulerState+0x26>
=======
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <xTaskGetSchedulerState+0x38>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006754:	2302      	movs	r3, #2
 8006756:	607b      	str	r3, [r7, #4]
 8006758:	e001      	b.n	800675e <xTaskGetSchedulerState+0x26>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
<<<<<<< HEAD
 8004a32:	2300      	movs	r3, #0
 8004a34:	607b      	str	r3, [r7, #4]
=======
 800675a:	2300      	movs	r3, #0
 800675c:	607b      	str	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
		}

		return xReturn;
<<<<<<< HEAD
 8004a36:	687b      	ldr	r3, [r7, #4]
	}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bc80      	pop	{r7}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000bc8 	.word	0x20000bc8
 8004a48:	20000be4 	.word	0x20000be4

08004a4c <xTaskPriorityDisinherit>:
=======
 800675e:	687b      	ldr	r3, [r7, #4]
	}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000bc8 	.word	0x20000bc8
 8006770:	20000be4 	.word	0x20000be4

08006774 <xTaskPriorityDisinherit>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
<<<<<<< HEAD
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d054      	beq.n	8004b0c <xTaskPriorityDisinherit+0xc0>
=======
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d056      	beq.n	8006838 <xTaskPriorityDisinherit+0xc4>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
<<<<<<< HEAD
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <xTaskPriorityDisinherit+0xcc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d009      	beq.n	8004a80 <xTaskPriorityDisinherit+0x34>
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e7fe      	b.n	8004a7e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <xTaskPriorityDisinherit+0x50>
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	e7fe      	b.n	8004a9a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800678a:	4b2e      	ldr	r3, [pc, #184]	; (8006844 <xTaskPriorityDisinherit+0xd0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	429a      	cmp	r2, r3
 8006792:	d00a      	beq.n	80067aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	60fb      	str	r3, [r7, #12]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60bb      	str	r3, [r7, #8]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	1e5a      	subs	r2, r3, #1
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
<<<<<<< HEAD
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d02c      	beq.n	8004b0c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d128      	bne.n	8004b0c <xTaskPriorityDisinherit+0xc0>
=======
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067da:	429a      	cmp	r2, r3
 80067dc:	d02c      	beq.n	8006838 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d128      	bne.n	8006838 <xTaskPriorityDisinherit+0xc4>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fc66 	bl	8003390 <uxListRemove>
=======
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3304      	adds	r3, #4
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7fe fc40 	bl	8005070 <uxListRemove>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
<<<<<<< HEAD
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <xTaskPriorityDisinherit+0xd0>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d903      	bls.n	8004aec <xTaskPriorityDisinherit+0xa0>
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a0c      	ldr	r2, [pc, #48]	; (8004b1c <xTaskPriorityDisinherit+0xd0>)
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <xTaskPriorityDisinherit+0xd4>)
 8004afa:	441a      	add	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	3304      	adds	r3, #4
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f7fe fbe9 	bl	80032da <vListInsertEnd>
=======
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006808:	4b0f      	ldr	r3, [pc, #60]	; (8006848 <xTaskPriorityDisinherit+0xd4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d903      	bls.n	8006818 <xTaskPriorityDisinherit+0xa4>
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006814:	4a0c      	ldr	r2, [pc, #48]	; (8006848 <xTaskPriorityDisinherit+0xd4>)
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4613      	mov	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4a09      	ldr	r2, [pc, #36]	; (800684c <xTaskPriorityDisinherit+0xd8>)
 8006826:	441a      	add	r2, r3
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	3304      	adds	r3, #4
 800682c:	4619      	mov	r1, r3
 800682e:	4610      	mov	r0, r2
 8006830:	f7fe fbc3 	bl	8004fba <vListInsertEnd>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
<<<<<<< HEAD
 8004b08:	2301      	movs	r3, #1
 8004b0a:	617b      	str	r3, [r7, #20]
=======
 8006834:	2301      	movs	r3, #1
 8006836:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
<<<<<<< HEAD
 8004b0c:	697b      	ldr	r3, [r7, #20]
	}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200006e8 	.word	0x200006e8
 8004b1c:	20000bc4 	.word	0x20000bc4
 8004b20:	200006ec 	.word	0x200006ec

08004b24 <prvAddCurrentTaskToDelayedList>:
=======
 8006838:	697b      	ldr	r3, [r7, #20]
	}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200006e8 	.word	0x200006e8
 8006848:	20000bc4 	.word	0x20000bc4
 800684c:	200006ec 	.word	0x200006ec

08006850 <prvAddCurrentTaskToDelayedList>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b2e:	4b21      	ldr	r3, [pc, #132]	; (8004bb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]
=======
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800685a:	4b21      	ldr	r3, [pc, #132]	; (80068e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	60fb      	str	r3, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 8004b34:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fc28 	bl	8003390 <uxListRemove>
=======
 8006860:	4b20      	ldr	r3, [pc, #128]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3304      	adds	r3, #4
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe fc02 	bl	8005070 <uxListRemove>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d10a      	bne.n	8004b5e <prvAddCurrentTaskToDelayedList+0x3a>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d10a      	bne.n	800688a <prvAddCurrentTaskToDelayedList+0x3a>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 8004b4e:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4819      	ldr	r0, [pc, #100]	; (8004bbc <prvAddCurrentTaskToDelayedList+0x98>)
 8004b58:	f7fe fbbf 	bl	80032da <vListInsertEnd>
=======
 800687a:	4b1a      	ldr	r3, [pc, #104]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4819      	ldr	r0, [pc, #100]	; (80068e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006884:	f7fe fb99 	bl	8004fba <vListInsertEnd>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 8004b5c:	e026      	b.n	8004bac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b66:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d209      	bcs.n	8004b8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f7fe fbcc 	bl	8003320 <vListInsert>
}
 8004b88:	e010      	b.n	8004bac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b8a:	4b0e      	ldr	r3, [pc, #56]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f7fe fbc2 	bl	8003320 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d202      	bcs.n	8004bac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ba6:	4a08      	ldr	r2, [pc, #32]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6013      	str	r3, [r2, #0]
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000bc0 	.word	0x20000bc0
 8004bb8:	200006e8 	.word	0x200006e8
 8004bbc:	20000ba8 	.word	0x20000ba8
 8004bc0:	20000b78 	.word	0x20000b78
 8004bc4:	20000b74 	.word	0x20000b74
 8004bc8:	20000bdc 	.word	0x20000bdc

08004bcc <xTimerCreateTimerTask>:
=======
 8006888:	e026      	b.n	80068d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4413      	add	r3, r2
 8006890:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006892:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d209      	bcs.n	80068b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a2:	4b12      	ldr	r3, [pc, #72]	; (80068ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3304      	adds	r3, #4
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7fe fba6 	bl	8005000 <vListInsert>
}
 80068b4:	e010      	b.n	80068d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068b6:	4b0e      	ldr	r3, [pc, #56]	; (80068f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4b0a      	ldr	r3, [pc, #40]	; (80068e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f7fe fb9c 	bl	8005000 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068c8:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d202      	bcs.n	80068d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068d2:	4a08      	ldr	r2, [pc, #32]	; (80068f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6013      	str	r3, [r2, #0]
}
 80068d8:	bf00      	nop
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	20000bc0 	.word	0x20000bc0
 80068e4:	200006e8 	.word	0x200006e8
 80068e8:	20000ba8 	.word	0x20000ba8
 80068ec:	20000b78 	.word	0x20000b78
 80068f0:	20000b74 	.word	0x20000b74
 80068f4:	20000bdc 	.word	0x20000bdc

080068f8 <xTimerCreateTimerTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
<<<<<<< HEAD
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
=======
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068fe:	2300      	movs	r3, #0
 8006900:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
<<<<<<< HEAD
 8004bd6:	f000 fac3 	bl	8005160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004bda:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <xTimerCreateTimerTask+0x80>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d021      	beq.n	8004c26 <xTimerCreateTimerTask+0x5a>
=======
 8006902:	f000 facb 	bl	8006e9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006906:	4b1c      	ldr	r3, [pc, #112]	; (8006978 <xTimerCreateTimerTask+0x80>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d021      	beq.n	8006952 <xTimerCreateTimerTask+0x5a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
<<<<<<< HEAD
 8004be2:	2300      	movs	r3, #0
 8004be4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004bea:	1d3a      	adds	r2, r7, #4
 8004bec:	f107 0108 	add.w	r1, r7, #8
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fb2b 	bl	8003250 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	9202      	str	r2, [sp, #8]
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	2302      	movs	r3, #2
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	460a      	mov	r2, r1
 8004c0c:	4910      	ldr	r1, [pc, #64]	; (8004c50 <xTimerCreateTimerTask+0x84>)
 8004c0e:	4811      	ldr	r0, [pc, #68]	; (8004c54 <xTimerCreateTimerTask+0x88>)
 8004c10:	f7ff f8f8 	bl	8003e04 <xTaskCreateStatic>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b10      	ldr	r3, [pc, #64]	; (8004c58 <xTimerCreateTimerTask+0x8c>)
 8004c18:	601a      	str	r2, [r3, #0]
=======
 800690e:	2300      	movs	r3, #0
 8006910:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006916:	1d3a      	adds	r2, r7, #4
 8006918:	f107 0108 	add.w	r1, r7, #8
 800691c:	f107 030c 	add.w	r3, r7, #12
 8006920:	4618      	mov	r0, r3
 8006922:	f7fe fb05 	bl	8004f30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	9202      	str	r2, [sp, #8]
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	2302      	movs	r3, #2
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	460a      	mov	r2, r1
 8006938:	4910      	ldr	r1, [pc, #64]	; (800697c <xTimerCreateTimerTask+0x84>)
 800693a:	4811      	ldr	r0, [pc, #68]	; (8006980 <xTimerCreateTimerTask+0x88>)
 800693c:	f7ff f8e4 	bl	8005b08 <xTaskCreateStatic>
 8006940:	4603      	mov	r3, r0
 8006942:	4a10      	ldr	r2, [pc, #64]	; (8006984 <xTimerCreateTimerTask+0x8c>)
 8006944:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
<<<<<<< HEAD
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <xTimerCreateTimerTask+0x8c>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c22:	2301      	movs	r3, #1
 8004c24:	617b      	str	r3, [r7, #20]
=======
 8006946:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <xTimerCreateTimerTask+0x8c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800694e:	2301      	movs	r3, #1
 8006950:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
<<<<<<< HEAD
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d109      	bne.n	8004c40 <xTimerCreateTimerTask+0x74>
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	e7fe      	b.n	8004c3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004c40:	697b      	ldr	r3, [r7, #20]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000c18 	.word	0x20000c18
 8004c50:	08005ac0 	.word	0x08005ac0
 8004c54:	08004d75 	.word	0x08004d75
 8004c58:	20000c1c 	.word	0x20000c1c

08004c5c <xTimerGenericCommand>:
=======
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	613b      	str	r3, [r7, #16]
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800696e:	697b      	ldr	r3, [r7, #20]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000c18 	.word	0x20000c18
 800697c:	080077fc 	.word	0x080077fc
 8006980:	08006aa5 	.word	0x08006aa5
 8006984:	20000c1c 	.word	0x20000c1c

08006988 <xTimerGenericCommand>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
<<<<<<< HEAD
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
 8004c68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <xTimerGenericCommand+0x2c>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	623b      	str	r3, [r7, #32]
 8004c86:	e7fe      	b.n	8004c86 <xTimerGenericCommand+0x2a>
=======
 8006988:	b580      	push	{r7, lr}
 800698a:	b08a      	sub	sp, #40	; 0x28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006996:	2300      	movs	r3, #0
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	623b      	str	r3, [r7, #32]
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xTimerGenericCommand+0x2c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
<<<<<<< HEAD
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <xTimerGenericCommand+0x94>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d02a      	beq.n	8004ce6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	dc18      	bgt.n	8004cd4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ca2:	f7ff feb5 	bl	8004a10 <xTaskGetSchedulerState>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d109      	bne.n	8004cc0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cac:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <xTimerGenericCommand+0x94>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	f107 0110 	add.w	r1, r7, #16
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb8:	f7fe fcce 	bl	8003658 <xQueueGenericSend>
 8004cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8004cbe:	e012      	b.n	8004ce6 <xTimerGenericCommand+0x8a>
=======
 80069b6:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <xTimerGenericCommand+0x98>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d02a      	beq.n	8006a14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b05      	cmp	r3, #5
 80069ce:	dc18      	bgt.n	8006a02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069d0:	f7ff feb2 	bl	8006738 <xTaskGetSchedulerState>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d109      	bne.n	80069ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069da:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <xTimerGenericCommand+0x98>)
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	f107 0110 	add.w	r1, r7, #16
 80069e2:	2300      	movs	r3, #0
 80069e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e6:	f7fe fcad 	bl	8005344 <xQueueGenericSend>
 80069ea:	6278      	str	r0, [r7, #36]	; 0x24
 80069ec:	e012      	b.n	8006a14 <xTimerGenericCommand+0x8c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
<<<<<<< HEAD
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <xTimerGenericCommand+0x94>)
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	f107 0110 	add.w	r1, r7, #16
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f7fe fcc4 	bl	8003658 <xQueueGenericSend>
 8004cd0:	6278      	str	r0, [r7, #36]	; 0x24
 8004cd2:	e008      	b.n	8004ce6 <xTimerGenericCommand+0x8a>
=======
 80069ee:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <xTimerGenericCommand+0x98>)
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	f107 0110 	add.w	r1, r7, #16
 80069f6:	2300      	movs	r3, #0
 80069f8:	2200      	movs	r2, #0
 80069fa:	f7fe fca3 	bl	8005344 <xQueueGenericSend>
 80069fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006a00:	e008      	b.n	8006a14 <xTimerGenericCommand+0x8c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
<<<<<<< HEAD
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <xTimerGenericCommand+0x94>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	f107 0110 	add.w	r1, r7, #16
 8004cdc:	2300      	movs	r3, #0
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	f7fe fdb4 	bl	800384c <xQueueGenericSendFromISR>
 8004ce4:	6278      	str	r0, [r7, #36]	; 0x24
=======
 8006a02:	4b07      	ldr	r3, [pc, #28]	; (8006a20 <xTimerGenericCommand+0x98>)
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	f107 0110 	add.w	r1, r7, #16
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	f7fe fd97 	bl	8005540 <xQueueGenericSendFromISR>
 8006a12:	6278      	str	r0, [r7, #36]	; 0x24
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
<<<<<<< HEAD
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3728      	adds	r7, #40	; 0x28
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000c18 	.word	0x20000c18

08004cf4 <prvProcessExpiredTimer>:
=======
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3728      	adds	r7, #40	; 0x28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000c18 	.word	0x20000c18

08006a24 <prvProcessExpiredTimer>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
<<<<<<< HEAD
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cfe:	4b1c      	ldr	r3, [pc, #112]	; (8004d70 <prvProcessExpiredTimer+0x7c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	617b      	str	r3, [r7, #20]
=======
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a2e:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <prvProcessExpiredTimer+0x7c>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	617b      	str	r3, [r7, #20]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe fb3f 	bl	8003390 <uxListRemove>
=======
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fe fb17 	bl	8005070 <uxListRemove>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
<<<<<<< HEAD
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d121      	bne.n	8004d5e <prvProcessExpiredTimer+0x6a>
=======
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d122      	bne.n	8006a90 <prvProcessExpiredTimer+0x6c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
<<<<<<< HEAD
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	18d1      	adds	r1, r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	6978      	ldr	r0, [r7, #20]
 8004d28:	f000 f8c8 	bl	8004ebc <prvInsertTimerInActiveList>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d015      	beq.n	8004d5e <prvProcessExpiredTimer+0x6a>
=======
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	699a      	ldr	r2, [r3, #24]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	18d1      	adds	r1, r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	6978      	ldr	r0, [r7, #20]
 8006a58:	f000 f8c8 	bl	8006bec <prvInsertTimerInActiveList>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d016      	beq.n	8006a90 <prvProcessExpiredTimer+0x6c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 8004d32:	2300      	movs	r3, #0
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	2300      	movs	r3, #0
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	6978      	ldr	r0, [r7, #20]
 8004d3e:	f7ff ff8d 	bl	8004c5c <xTimerGenericCommand>
 8004d42:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <prvProcessExpiredTimer+0x6a>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e7fe      	b.n	8004d5c <prvProcessExpiredTimer+0x68>
=======
 8006a62:	2300      	movs	r3, #0
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	2300      	movs	r3, #0
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	6978      	ldr	r0, [r7, #20]
 8006a6e:	f7ff ff8b 	bl	8006988 <xTimerGenericCommand>
 8006a72:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10a      	bne.n	8006a90 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	60fb      	str	r3, [r7, #12]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <prvProcessExpiredTimer+0x6a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	4798      	blx	r3
}
 8004d66:	bf00      	nop
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000c10 	.word	0x20000c10

08004d74 <prvTimerTask>:
=======
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	6978      	ldr	r0, [r7, #20]
 8006a96:	4798      	blx	r3
}
 8006a98:	bf00      	nop
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000c10 	.word	0x20000c10

08006aa4 <prvTimerTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
<<<<<<< HEAD
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
=======
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
<<<<<<< HEAD
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 f857 	bl	8004e34 <prvGetNextExpireTime>
 8004d86:	60f8      	str	r0, [r7, #12]
=======
 8006aac:	f107 0308 	add.w	r3, r7, #8
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 f857 	bl	8006b64 <prvGetNextExpireTime>
 8006ab6:	60f8      	str	r0, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
<<<<<<< HEAD
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f000 f803 	bl	8004d98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d92:	f000 f8d5 	bl	8004f40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d96:	e7f1      	b.n	8004d7c <prvTimerTask+0x8>

08004d98 <prvProcessTimerOrBlockTask>:
=======
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4619      	mov	r1, r3
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f803 	bl	8006ac8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ac2:	f000 f8d5 	bl	8006c70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ac6:	e7f1      	b.n	8006aac <prvTimerTask+0x8>

08006ac8 <prvProcessTimerOrBlockTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
<<<<<<< HEAD
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
=======
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
<<<<<<< HEAD
 8004da2:	f7ff fa5b 	bl	800425c <vTaskSuspendAll>
=======
 8006ad2:	f7ff fa4b 	bl	8005f6c <vTaskSuspendAll>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f866 	bl	8004e7c <prvSampleTimeNow>
 8004db0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d130      	bne.n	8004e1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <prvProcessTimerOrBlockTask+0x3c>
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d806      	bhi.n	8004dd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004dc6:	f7ff fa57 	bl	8004278 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7ff ff91 	bl	8004cf4 <prvProcessExpiredTimer>
=======
 8006ad6:	f107 0308 	add.w	r3, r7, #8
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 f866 	bl	8006bac <prvSampleTimeNow>
 8006ae0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d130      	bne.n	8006b4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <prvProcessTimerOrBlockTask+0x3c>
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d806      	bhi.n	8006b04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006af6:	f7ff fa47 	bl	8005f88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7ff ff91 	bl	8006a24 <prvProcessExpiredTimer>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
<<<<<<< HEAD
 8004dd2:	e024      	b.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <prvProcessTimerOrBlockTask+0x90>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <prvProcessTimerOrBlockTask+0x94>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	f7fe ffcf 	bl	8003d9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004dfe:	f7ff fa3b 	bl	8004278 <xTaskResumeAll>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e08:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <prvProcessTimerOrBlockTask+0x98>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
}
 8004e18:	e001      	b.n	8004e1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e1a:	f7ff fa2d 	bl	8004278 <xTaskResumeAll>
}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000c14 	.word	0x20000c14
 8004e2c:	20000c18 	.word	0x20000c18
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <prvGetNextExpireTime>:
=======
 8006b02:	e024      	b.n	8006b4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b0a:	4b13      	ldr	r3, [pc, #76]	; (8006b58 <prvProcessTimerOrBlockTask+0x90>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b1c:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <prvProcessTimerOrBlockTask+0x94>)
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	f7fe ffb9 	bl	8005aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b2e:	f7ff fa2b 	bl	8005f88 <xTaskResumeAll>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10a      	bne.n	8006b4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b38:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <prvProcessTimerOrBlockTask+0x98>)
 8006b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	f3bf 8f6f 	isb	sy
}
 8006b48:	e001      	b.n	8006b4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b4a:	f7ff fa1d 	bl	8005f88 <xTaskResumeAll>
}
 8006b4e:	bf00      	nop
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	20000c14 	.word	0x20000c14
 8006b5c:	20000c18 	.word	0x20000c18
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <prvGetNextExpireTime>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
<<<<<<< HEAD
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
=======
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
<<<<<<< HEAD
 8004e3c:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <prvGetNextExpireTime+0x44>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d105      	bne.n	8004e66 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <prvGetNextExpireTime+0x44>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e001      	b.n	8004e6a <prvGetNextExpireTime+0x36>
=======
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <prvGetNextExpireTime+0x44>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	bf0c      	ite	eq
 8006b76:	2301      	moveq	r3, #1
 8006b78:	2300      	movne	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <prvGetNextExpireTime+0x44>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	e001      	b.n	8006b9a <prvGetNextExpireTime+0x36>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
<<<<<<< HEAD
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	20000c10 	.word	0x20000c10

08004e7c <prvSampleTimeNow>:
=======
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	20000c10 	.word	0x20000c10

08006bac <prvSampleTimeNow>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
<<<<<<< HEAD
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
=======
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
<<<<<<< HEAD
 8004e84:	f7ff fa94 	bl	80043b0 <xTaskGetTickCount>
 8004e88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <prvSampleTimeNow+0x3c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d205      	bcs.n	8004ea0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e94:	f000 f904 	bl	80050a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e002      	b.n	8004ea6 <prvSampleTimeNow+0x2a>
=======
 8006bb4:	f7ff fa86 	bl	80060c4 <xTaskGetTickCount>
 8006bb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006bba:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <prvSampleTimeNow+0x3c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d205      	bcs.n	8006bd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bc4:	f000 f908 	bl	8006dd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <prvSampleTimeNow+0x2a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
<<<<<<< HEAD
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ea6:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <prvSampleTimeNow+0x3c>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000c20 	.word	0x20000c20

08004ebc <prvInsertTimerInActiveList>:
=======
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006bd6:	4a04      	ldr	r2, [pc, #16]	; (8006be8 <prvSampleTimeNow+0x3c>)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000c20 	.word	0x20000c20

08006bec <prvInsertTimerInActiveList>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
<<<<<<< HEAD
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d812      	bhi.n	8004f08 <prvInsertTimerInActiveList+0x4c>
=======
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d812      	bhi.n	8006c38 <prvInsertTimerInActiveList+0x4c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	1ad2      	subs	r2, r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d302      	bcc.n	8004ef6 <prvInsertTimerInActiveList+0x3a>
=======
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d302      	bcc.n	8006c26 <prvInsertTimerInActiveList+0x3a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	e01b      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
=======
 8006c20:	2301      	movs	r3, #1
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e01b      	b.n	8006c5e <prvInsertTimerInActiveList+0x72>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <prvInsertTimerInActiveList+0x7c>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7fe fa0d 	bl	8003320 <vListInsert>
 8004f06:	e012      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
=======
 8006c26:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <prvInsertTimerInActiveList+0x7c>)
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4610      	mov	r0, r2
 8006c32:	f7fe f9e5 	bl	8005000 <vListInsert>
 8006c36:	e012      	b.n	8006c5e <prvInsertTimerInActiveList+0x72>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
<<<<<<< HEAD
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d206      	bcs.n	8004f1e <prvInsertTimerInActiveList+0x62>
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d302      	bcc.n	8004f1e <prvInsertTimerInActiveList+0x62>
=======
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d206      	bcs.n	8006c4e <prvInsertTimerInActiveList+0x62>
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d302      	bcc.n	8006c4e <prvInsertTimerInActiveList+0x62>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
<<<<<<< HEAD
 8004f18:	2301      	movs	r3, #1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e007      	b.n	8004f2e <prvInsertTimerInActiveList+0x72>
=======
 8006c48:	2301      	movs	r3, #1
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e007      	b.n	8006c5e <prvInsertTimerInActiveList+0x72>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
<<<<<<< HEAD
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <prvInsertTimerInActiveList+0x80>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3304      	adds	r3, #4
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f7fe f9f9 	bl	8003320 <vListInsert>
=======
 8006c4e:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <prvInsertTimerInActiveList+0x80>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fe f9d1 	bl	8005000 <vListInsert>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
	}

	return xProcessTimerNow;
<<<<<<< HEAD
 8004f2e:	697b      	ldr	r3, [r7, #20]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000c14 	.word	0x20000c14
 8004f3c:	20000c10 	.word	0x20000c10

08004f40 <prvProcessReceivedCommands>:
=======
 8006c5e:	697b      	ldr	r3, [r7, #20]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3718      	adds	r7, #24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000c14 	.word	0x20000c14
 8006c6c:	20000c10 	.word	0x20000c10

08006c70 <prvProcessReceivedCommands>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
<<<<<<< HEAD
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	; 0x38
 8004f44:	af02      	add	r7, sp, #8
=======
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08e      	sub	sp, #56	; 0x38
 8006c74:	af02      	add	r7, sp, #8
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
<<<<<<< HEAD
 8004f46:	e099      	b.n	800507c <prvProcessReceivedCommands+0x13c>
=======
 8006c76:	e09d      	b.n	8006db4 <prvProcessReceivedCommands+0x144>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
<<<<<<< HEAD
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	da17      	bge.n	8004f7e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004f4e:	1d3b      	adds	r3, r7, #4
 8004f50:	3304      	adds	r3, #4
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da18      	bge.n	8006cb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c7e:	1d3b      	adds	r3, r7, #4
 8006c80:	3304      	adds	r3, #4
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
<<<<<<< HEAD
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <prvProcessReceivedCommands+0x2e>
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e7fe      	b.n	8004f6c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	6850      	ldr	r0, [r2, #4]
 8004f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f78:	6892      	ldr	r2, [r2, #8]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4798      	blx	r3
=======
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	61fb      	str	r3, [r7, #28]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca6:	6850      	ldr	r0, [r2, #4]
 8006ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006caa:	6892      	ldr	r2, [r2, #8]
 8006cac:	4611      	mov	r1, r2
 8006cae:	4798      	blx	r3
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
<<<<<<< HEAD
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	db7a      	blt.n	800507a <prvProcessReceivedCommands+0x13a>
=======
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	db7d      	blt.n	8006db2 <prvProcessReceivedCommands+0x142>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
<<<<<<< HEAD
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d004      	beq.n	8004f9a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	3304      	adds	r3, #4
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe f9fb 	bl	8003390 <uxListRemove>
=======
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	3304      	adds	r3, #4
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe f9d2 	bl	8005070 <uxListRemove>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
<<<<<<< HEAD
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff6d 	bl	8004e7c <prvSampleTimeNow>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d868      	bhi.n	800507c <prvProcessReceivedCommands+0x13c>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <prvProcessReceivedCommands+0x70>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fd9 	.word	0x08004fd9
 8004fbc:	0800507d 	.word	0x0800507d
 8004fc0:	08005033 	.word	0x08005033
 8004fc4:	08005069 	.word	0x08005069
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004fd9 	.word	0x08004fd9
 8004fd0:	0800507d 	.word	0x0800507d
 8004fd4:	08005033 	.word	0x08005033
=======
 8006ccc:	463b      	mov	r3, r7
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff ff6c 	bl	8006bac <prvSampleTimeNow>
 8006cd4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b09      	cmp	r3, #9
 8006cda:	d86b      	bhi.n	8006db4 <prvProcessReceivedCommands+0x144>
 8006cdc:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <prvProcessReceivedCommands+0x74>)
 8006cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce2:	bf00      	nop
 8006ce4:	08006d0d 	.word	0x08006d0d
 8006ce8:	08006d0d 	.word	0x08006d0d
 8006cec:	08006d0d 	.word	0x08006d0d
 8006cf0:	08006db5 	.word	0x08006db5
 8006cf4:	08006d69 	.word	0x08006d69
 8006cf8:	08006da1 	.word	0x08006da1
 8006cfc:	08006d0d 	.word	0x08006d0d
 8006d00:	08006d0d 	.word	0x08006d0d
 8006d04:	08006db5 	.word	0x08006db5
 8006d08:	08006d69 	.word	0x08006d69
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
<<<<<<< HEAD
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	18d1      	adds	r1, r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe6:	f7ff ff69 	bl	8004ebc <prvInsertTimerInActiveList>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d045      	beq.n	800507c <prvProcessReceivedCommands+0x13c>
=======
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	18d1      	adds	r1, r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1a:	f7ff ff67 	bl	8006bec <prvInsertTimerInActiveList>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d047      	beq.n	8006db4 <prvProcessReceivedCommands+0x144>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ff6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d13d      	bne.n	800507c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	441a      	add	r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	2100      	movs	r1, #0
 8005010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005012:	f7ff fe23 	bl	8004c5c <xTimerGenericCommand>
 8005016:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d12e      	bne.n	800507c <prvProcessReceivedCommands+0x13c>
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e7fe      	b.n	8005030 <prvProcessReceivedCommands+0xf0>
=======
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d13f      	bne.n	8006db4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	441a      	add	r2, r3
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2300      	movs	r3, #0
 8006d42:	2100      	movs	r1, #0
 8006d44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d46:	f7ff fe1f 	bl	8006988 <xTimerGenericCommand>
 8006d4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d130      	bne.n	8006db4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	61bb      	str	r3, [r7, #24]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <prvProcessReceivedCommands+0xf6>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
<<<<<<< HEAD
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <prvProcessReceivedCommands+0x114>
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e7fe      	b.n	8005052 <prvProcessReceivedCommands+0x112>
=======
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	617b      	str	r3, [r7, #20]
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <prvProcessReceivedCommands+0x11a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
<<<<<<< HEAD
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	699a      	ldr	r2, [r3, #24]
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	18d1      	adds	r1, r2, r3
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005062:	f7ff ff2b 	bl	8004ebc <prvInsertTimerInActiveList>
					break;
 8005066:	e009      	b.n	800507c <prvProcessReceivedCommands+0x13c>
=======
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	18d1      	adds	r1, r2, r3
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d9a:	f7ff ff27 	bl	8006bec <prvInsertTimerInActiveList>
					break;
 8006d9e:	e009      	b.n	8006db4 <prvProcessReceivedCommands+0x144>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
<<<<<<< HEAD
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005074:	f000 fb58 	bl	8005728 <vPortFree>
=======
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d104      	bne.n	8006db4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dac:	f000 fb6a 	bl	8007484 <vPortFree>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
<<<<<<< HEAD
 8005078:	e000      	b.n	800507c <prvProcessReceivedCommands+0x13c>
=======
 8006db0:	e000      	b.n	8006db4 <prvProcessReceivedCommands+0x144>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
<<<<<<< HEAD
 800507a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <prvProcessReceivedCommands+0x15c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	1d39      	adds	r1, r7, #4
 8005082:	2200      	movs	r2, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe fc75 	bl	8003974 <xQueueReceive>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	f47f af5b 	bne.w	8004f48 <prvProcessReceivedCommands+0x8>
	}
}
 8005092:	bf00      	nop
 8005094:	3730      	adds	r7, #48	; 0x30
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000c18 	.word	0x20000c18

080050a0 <prvSwitchTimerLists>:
=======
 8006db2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006db4:	4b07      	ldr	r3, [pc, #28]	; (8006dd4 <prvProcessReceivedCommands+0x164>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	1d39      	adds	r1, r7, #4
 8006dba:	2200      	movs	r2, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7fe fc57 	bl	8005670 <xQueueReceive>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f47f af57 	bne.w	8006c78 <prvProcessReceivedCommands+0x8>
	}
}
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	3730      	adds	r7, #48	; 0x30
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	20000c18 	.word	0x20000c18

08006dd8 <prvSwitchTimerLists>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
<<<<<<< HEAD
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b088      	sub	sp, #32
 80050a4:	af02      	add	r7, sp, #8
=======
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af02      	add	r7, sp, #8
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
<<<<<<< HEAD
 80050a6:	e044      	b.n	8005132 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050a8:	4b2b      	ldr	r3, [pc, #172]	; (8005158 <prvSwitchTimerLists+0xb8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <prvSwitchTimerLists+0xb8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3304      	adds	r3, #4
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe f965 	bl	8003390 <uxListRemove>
=======
 8006dde:	e045      	b.n	8006e6c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006de0:	4b2c      	ldr	r3, [pc, #176]	; (8006e94 <prvSwitchTimerLists+0xbc>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dea:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <prvSwitchTimerLists+0xbc>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe f939 	bl	8005070 <uxListRemove>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
<<<<<<< HEAD
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d12d      	bne.n	8005132 <prvSwitchTimerLists+0x92>
=======
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d12e      	bne.n	8006e6c <prvSwitchTimerLists+0x94>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
<<<<<<< HEAD
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4413      	add	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d90e      	bls.n	8005106 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050f4:	4b18      	ldr	r3, [pc, #96]	; (8005158 <prvSwitchTimerLists+0xb8>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3304      	adds	r3, #4
 80050fc:	4619      	mov	r1, r3
 80050fe:	4610      	mov	r0, r2
 8005100:	f7fe f90e 	bl	8003320 <vListInsert>
 8005104:	e015      	b.n	8005132 <prvSwitchTimerLists+0x92>
=======
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4413      	add	r3, r2
 8006e16:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d90e      	bls.n	8006e3e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e2c:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <prvSwitchTimerLists+0xbc>)
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3304      	adds	r3, #4
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	f7fe f8e2 	bl	8005000 <vListInsert>
 8006e3c:	e016      	b.n	8006e6c <prvSwitchTimerLists+0x94>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
<<<<<<< HEAD
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	2100      	movs	r1, #0
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7ff fda3 	bl	8004c5c <xTimerGenericCommand>
 8005116:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d109      	bne.n	8005132 <prvSwitchTimerLists+0x92>
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	e7fe      	b.n	8005130 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <prvSwitchTimerLists+0xb8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1b5      	bne.n	80050a8 <prvSwitchTimerLists+0x8>
=======
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	2300      	movs	r3, #0
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff fd9d 	bl	8006988 <xTimerGenericCommand>
 8006e4e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	603b      	str	r3, [r7, #0]
}
 8006e68:	bf00      	nop
 8006e6a:	e7fe      	b.n	8006e6a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e6c:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <prvSwitchTimerLists+0xbc>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1b4      	bne.n	8006de0 <prvSwitchTimerLists+0x8>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
<<<<<<< HEAD
 800513c:	4b06      	ldr	r3, [pc, #24]	; (8005158 <prvSwitchTimerLists+0xb8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005142:	4b06      	ldr	r3, [pc, #24]	; (800515c <prvSwitchTimerLists+0xbc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <prvSwitchTimerLists+0xb8>)
 8005148:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800514a:	4a04      	ldr	r2, [pc, #16]	; (800515c <prvSwitchTimerLists+0xbc>)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000c10 	.word	0x20000c10
 800515c:	20000c14 	.word	0x20000c14

08005160 <prvCheckForValidListAndQueue>:
=======
 8006e76:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <prvSwitchTimerLists+0xbc>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e7c:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <prvSwitchTimerLists+0xc0>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a04      	ldr	r2, [pc, #16]	; (8006e94 <prvSwitchTimerLists+0xbc>)
 8006e82:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e84:	4a04      	ldr	r2, [pc, #16]	; (8006e98 <prvSwitchTimerLists+0xc0>)
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	6013      	str	r3, [r2, #0]
}
 8006e8a:	bf00      	nop
 8006e8c:	3718      	adds	r7, #24
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000c10 	.word	0x20000c10
 8006e98:	20000c14 	.word	0x20000c14

08006e9c <prvCheckForValidListAndQueue>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
<<<<<<< HEAD
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af02      	add	r7, sp, #8
=======
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af02      	add	r7, sp, #8
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 8005166:	f000 f927 	bl	80053b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d120      	bne.n	80051b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005172:	4814      	ldr	r0, [pc, #80]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005174:	f7fe f886 	bl	8003284 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005178:	4813      	ldr	r0, [pc, #76]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 800517a:	f7fe f883 	bl	8003284 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <prvCheckForValidListAndQueue+0x6c>)
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <prvCheckForValidListAndQueue+0x64>)
 8005182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <prvCheckForValidListAndQueue+0x70>)
 8005186:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <prvCheckForValidListAndQueue+0x68>)
 8005188:	601a      	str	r2, [r3, #0]
=======
 8006ea2:	f000 f92b 	bl	80070fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ea6:	4b15      	ldr	r3, [pc, #84]	; (8006efc <prvCheckForValidListAndQueue+0x60>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d120      	bne.n	8006ef0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006eae:	4814      	ldr	r0, [pc, #80]	; (8006f00 <prvCheckForValidListAndQueue+0x64>)
 8006eb0:	f7fe f858 	bl	8004f64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006eb4:	4813      	ldr	r0, [pc, #76]	; (8006f04 <prvCheckForValidListAndQueue+0x68>)
 8006eb6:	f7fe f855 	bl	8004f64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eba:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <prvCheckForValidListAndQueue+0x6c>)
 8006ebc:	4a10      	ldr	r2, [pc, #64]	; (8006f00 <prvCheckForValidListAndQueue+0x64>)
 8006ebe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ec0:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <prvCheckForValidListAndQueue+0x70>)
 8006ec2:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <prvCheckForValidListAndQueue+0x68>)
 8006ec4:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
<<<<<<< HEAD
 800518a:	2300      	movs	r3, #0
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <prvCheckForValidListAndQueue+0x74>)
 8005190:	4a11      	ldr	r2, [pc, #68]	; (80051d8 <prvCheckForValidListAndQueue+0x78>)
 8005192:	2110      	movs	r1, #16
 8005194:	200a      	movs	r0, #10
 8005196:	f7fe f98d 	bl	80034b4 <xQueueGenericCreateStatic>
 800519a:	4602      	mov	r2, r0
 800519c:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 800519e:	601a      	str	r2, [r3, #0]
=======
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	4b11      	ldr	r3, [pc, #68]	; (8006f10 <prvCheckForValidListAndQueue+0x74>)
 8006ecc:	4a11      	ldr	r2, [pc, #68]	; (8006f14 <prvCheckForValidListAndQueue+0x78>)
 8006ece:	2110      	movs	r1, #16
 8006ed0:	200a      	movs	r0, #10
 8006ed2:	f7fe f95f 	bl	8005194 <xQueueGenericCreateStatic>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4a08      	ldr	r2, [pc, #32]	; (8006efc <prvCheckForValidListAndQueue+0x60>)
 8006eda:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
<<<<<<< HEAD
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <prvCheckForValidListAndQueue+0x60>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	490b      	ldr	r1, [pc, #44]	; (80051dc <prvCheckForValidListAndQueue+0x7c>)
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe fdcc 	bl	8003d4c <vQueueAddToRegistry>
=======
 8006edc:	4b07      	ldr	r3, [pc, #28]	; (8006efc <prvCheckForValidListAndQueue+0x60>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ee4:	4b05      	ldr	r3, [pc, #20]	; (8006efc <prvCheckForValidListAndQueue+0x60>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	490b      	ldr	r1, [pc, #44]	; (8006f18 <prvCheckForValidListAndQueue+0x7c>)
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fdb0 	bl	8005a50 <vQueueAddToRegistry>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 80051b4:	f000 f92e 	bl	8005414 <vPortExitCritical>
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000c18 	.word	0x20000c18
 80051c4:	20000be8 	.word	0x20000be8
 80051c8:	20000bfc 	.word	0x20000bfc
 80051cc:	20000c10 	.word	0x20000c10
 80051d0:	20000c14 	.word	0x20000c14
 80051d4:	20000cc4 	.word	0x20000cc4
 80051d8:	20000c24 	.word	0x20000c24
 80051dc:	08005ac8 	.word	0x08005ac8

080051e0 <pxPortInitialiseStack>:
=======
 8006ef0:	f000 f934 	bl	800715c <vPortExitCritical>
}
 8006ef4:	bf00      	nop
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20000c18 	.word	0x20000c18
 8006f00:	20000be8 	.word	0x20000be8
 8006f04:	20000bfc 	.word	0x20000bfc
 8006f08:	20000c10 	.word	0x20000c10
 8006f0c:	20000c14 	.word	0x20000c14
 8006f10:	20000cc4 	.word	0x20000cc4
 8006f14:	20000c24 	.word	0x20000c24
 8006f18:	08007804 	.word	0x08007804

08006f1c <pxPortInitialiseStack>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3b04      	subs	r3, #4
 80051f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3b04      	subs	r3, #4
 80051fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f023 0201 	bic.w	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b04      	subs	r3, #4
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005210:	4a08      	ldr	r2, [pc, #32]	; (8005234 <pxPortInitialiseStack+0x54>)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b14      	subs	r3, #20
 800521a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3b20      	subs	r3, #32
 8005226:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005228:	68fb      	ldr	r3, [r7, #12]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr
 8005234:	08005239 	.word	0x08005239

08005238 <prvTaskExitError>:
=======
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3b04      	subs	r3, #4
 8006f2c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3b04      	subs	r3, #4
 8006f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f023 0201 	bic.w	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3b04      	subs	r3, #4
 8006f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f4c:	4a08      	ldr	r2, [pc, #32]	; (8006f70 <pxPortInitialiseStack+0x54>)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3b14      	subs	r3, #20
 8006f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	3b20      	subs	r3, #32
 8006f62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f64:	68fb      	ldr	r3, [r7, #12]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bc80      	pop	{r7}
 8006f6e:	4770      	bx	lr
 8006f70:	08006f75 	.word	0x08006f75

08006f74 <prvTaskExitError>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
=======
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	607b      	str	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 8005242:	4b10      	ldr	r3, [pc, #64]	; (8005284 <prvTaskExitError+0x4c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524a:	d009      	beq.n	8005260 <prvTaskExitError+0x28>
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60fb      	str	r3, [r7, #12]
 800525e:	e7fe      	b.n	800525e <prvTaskExitError+0x26>
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005272:	bf00      	nop
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0fc      	beq.n	8005274 <prvTaskExitError+0x3c>
=======
 8006f7e:	4b12      	ldr	r3, [pc, #72]	; (8006fc8 <prvTaskExitError+0x54>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f86:	d00a      	beq.n	8006f9e <prvTaskExitError+0x2a>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	60fb      	str	r3, [r7, #12]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <prvTaskExitError+0x28>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	60bb      	str	r3, [r7, #8]
}
 8006fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fb2:	bf00      	nop
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0fc      	beq.n	8006fb4 <prvTaskExitError+0x40>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr
 8005284:	2000000c 	.word	0x2000000c
	...

08005290 <SVC_Handler>:
=======
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	2000000c 	.word	0x2000000c
 8006fcc:	00000000 	.word	0x00000000

08006fd0 <SVC_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <pxCurrentTCBConst2>)
 8005292:	6819      	ldr	r1, [r3, #0]
 8005294:	6808      	ldr	r0, [r1, #0]
 8005296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800529a:	f380 8809 	msr	PSP, r0
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f04f 0000 	mov.w	r0, #0
 80052a6:	f380 8811 	msr	BASEPRI, r0
 80052aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80052ae:	4770      	bx	lr

080052b0 <pxCurrentTCBConst2>:
 80052b0:	200006e8 	.word	0x200006e8
=======
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <pxCurrentTCBConst2>)
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	6808      	ldr	r0, [r1, #0]
 8006fd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006fda:	f380 8809 	msr	PSP, r0
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	f380 8811 	msr	BASEPRI, r0
 8006fea:	f04e 0e0d 	orr.w	lr, lr, #13
 8006fee:	4770      	bx	lr

08006ff0 <pxCurrentTCBConst2>:
 8006ff0:	200006e8 	.word	0x200006e8
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <prvPortStartFirstTask>:
=======
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <prvPortStartFirstTask>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
<<<<<<< HEAD
 80052b8:	4806      	ldr	r0, [pc, #24]	; (80052d4 <prvPortStartFirstTask+0x1c>)
 80052ba:	6800      	ldr	r0, [r0, #0]
 80052bc:	6800      	ldr	r0, [r0, #0]
 80052be:	f380 8808 	msr	MSP, r0
 80052c2:	b662      	cpsie	i
 80052c4:	b661      	cpsie	f
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	df00      	svc	0
 80052d0:	bf00      	nop
=======
 8006ff8:	4806      	ldr	r0, [pc, #24]	; (8007014 <prvPortStartFirstTask+0x1c>)
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	6800      	ldr	r0, [r0, #0]
 8006ffe:	f380 8808 	msr	MSP, r0
 8007002:	b662      	cpsie	i
 8007004:	b661      	cpsie	f
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	df00      	svc	0
 8007010:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 80052d2:	bf00      	nop
 80052d4:	e000ed08 	.word	0xe000ed08

080052d8 <xPortStartScheduler>:
=======
 8007012:	bf00      	nop
 8007014:	e000ed08 	.word	0xe000ed08

08007018 <xPortStartScheduler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
=======
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 80052de:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <xPortStartScheduler+0xcc>)
 80052e0:	60fb      	str	r3, [r7, #12]
=======
 800701e:	4b32      	ldr	r3, [pc, #200]	; (80070e8 <xPortStartScheduler+0xd0>)
 8007020:	60fb      	str	r3, [r7, #12]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	607b      	str	r3, [r7, #4]
=======
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	607b      	str	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <xPortStartScheduler+0xd0>)
 8005304:	701a      	strb	r2, [r3, #0]
=======
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	22ff      	movs	r2, #255	; 0xff
 800702e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007040:	b2da      	uxtb	r2, r3
 8007042:	4b2a      	ldr	r3, [pc, #168]	; (80070ec <xPortStartScheduler+0xd4>)
 8007044:	701a      	strb	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 8005306:	4b29      	ldr	r3, [pc, #164]	; (80053ac <xPortStartScheduler+0xd4>)
 8005308:	2207      	movs	r2, #7
 800530a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800530c:	e009      	b.n	8005322 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800530e:	4b27      	ldr	r3, [pc, #156]	; (80053ac <xPortStartScheduler+0xd4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3b01      	subs	r3, #1
 8005314:	4a25      	ldr	r2, [pc, #148]	; (80053ac <xPortStartScheduler+0xd4>)
 8005316:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005318:	78fb      	ldrb	r3, [r7, #3]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	b2db      	uxtb	r3, r3
 8005320:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d0ef      	beq.n	800530e <xPortStartScheduler+0x36>
=======
 8007046:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <xPortStartScheduler+0xd8>)
 8007048:	2207      	movs	r2, #7
 800704a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800704c:	e009      	b.n	8007062 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800704e:	4b28      	ldr	r3, [pc, #160]	; (80070f0 <xPortStartScheduler+0xd8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3b01      	subs	r3, #1
 8007054:	4a26      	ldr	r2, [pc, #152]	; (80070f0 <xPortStartScheduler+0xd8>)
 8007056:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	005b      	lsls	r3, r3, #1
 800705e:	b2db      	uxtb	r3, r3
 8007060:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800706a:	2b80      	cmp	r3, #128	; 0x80
 800706c:	d0ef      	beq.n	800704e <xPortStartScheduler+0x36>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800532e:	4b1f      	ldr	r3, [pc, #124]	; (80053ac <xPortStartScheduler+0xd4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f1c3 0307 	rsb	r3, r3, #7
 8005336:	2b04      	cmp	r3, #4
 8005338:	d009      	beq.n	800534e <xPortStartScheduler+0x76>
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	e7fe      	b.n	800534c <xPortStartScheduler+0x74>
=======
 800706e:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <xPortStartScheduler+0xd8>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f1c3 0307 	rsb	r3, r3, #7
 8007076:	2b04      	cmp	r3, #4
 8007078:	d00a      	beq.n	8007090 <xPortStartScheduler+0x78>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	60bb      	str	r3, [r7, #8]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <xPortStartScheduler+0x76>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800534e:	4b17      	ldr	r3, [pc, #92]	; (80053ac <xPortStartScheduler+0xd4>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	021b      	lsls	r3, r3, #8
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <xPortStartScheduler+0xd4>)
 8005356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005358:	4b14      	ldr	r3, [pc, #80]	; (80053ac <xPortStartScheduler+0xd4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005360:	4a12      	ldr	r2, [pc, #72]	; (80053ac <xPortStartScheduler+0xd4>)
 8005362:	6013      	str	r3, [r2, #0]
=======
 8007090:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <xPortStartScheduler+0xd8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <xPortStartScheduler+0xd8>)
 8007098:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <xPortStartScheduler+0xd8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070a2:	4a13      	ldr	r2, [pc, #76]	; (80070f0 <xPortStartScheduler+0xd8>)
 80070a4:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	701a      	strb	r2, [r3, #0]
=======
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	701a      	strb	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <xPortStartScheduler+0xd8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <xPortStartScheduler+0xd8>)
 8005372:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <xPortStartScheduler+0xd8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0c      	ldr	r2, [pc, #48]	; (80053b0 <xPortStartScheduler+0xd8>)
 800537e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005382:	6013      	str	r3, [r2, #0]
=======
 80070ae:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <xPortStartScheduler+0xdc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a10      	ldr	r2, [pc, #64]	; (80070f4 <xPortStartScheduler+0xdc>)
 80070b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070ba:	4b0e      	ldr	r3, [pc, #56]	; (80070f4 <xPortStartScheduler+0xdc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a0d      	ldr	r2, [pc, #52]	; (80070f4 <xPortStartScheduler+0xdc>)
 80070c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070c4:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 8005384:	f000 f8b0 	bl	80054e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <xPortStartScheduler+0xdc>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800538e:	f7ff ff93 	bl	80052b8 <prvPortStartFirstTask>
=======
 80070c6:	f000 f8b9 	bl	800723c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <xPortStartScheduler+0xe0>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070d0:	f7ff ff92 	bl	8006ff8 <prvPortStartFirstTask>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 8005392:	f7ff f8d9 	bl	8004548 <vTaskSwitchContext>
	prvTaskExitError();
 8005396:	f7ff ff4f 	bl	8005238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000e400 	.word	0xe000e400
 80053a8:	20000d14 	.word	0x20000d14
 80053ac:	20000d18 	.word	0x20000d18
 80053b0:	e000ed20 	.word	0xe000ed20
 80053b4:	2000000c 	.word	0x2000000c

080053b8 <vPortEnterCritical>:
=======
 80070d4:	f7ff f8c2 	bl	800625c <vTaskSwitchContext>
	prvTaskExitError();
 80070d8:	f7ff ff4c 	bl	8006f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	e000e400 	.word	0xe000e400
 80070ec:	20000d14 	.word	0x20000d14
 80070f0:	20000d18 	.word	0x20000d18
 80070f4:	e000ed20 	.word	0xe000ed20
 80070f8:	2000000c 	.word	0x2000000c

080070fc <vPortEnterCritical>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053d0:	4b0e      	ldr	r3, [pc, #56]	; (800540c <vPortEnterCritical+0x54>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a0d      	ldr	r2, [pc, #52]	; (800540c <vPortEnterCritical+0x54>)
 80053d8:	6013      	str	r3, [r2, #0]
=======
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	607b      	str	r3, [r7, #4]
}
 8007114:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007116:	4b0f      	ldr	r3, [pc, #60]	; (8007154 <vPortEnterCritical+0x58>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	4a0d      	ldr	r2, [pc, #52]	; (8007154 <vPortEnterCritical+0x58>)
 800711e:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <vPortEnterCritical+0x54>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d10e      	bne.n	8005400 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <vPortEnterCritical+0x58>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <vPortEnterCritical+0x48>
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	e7fe      	b.n	80053fe <vPortEnterCritical+0x46>
	}
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	2000000c 	.word	0x2000000c
 8005410:	e000ed04 	.word	0xe000ed04

08005414 <vPortExitCritical>:
=======
 8007120:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <vPortEnterCritical+0x58>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d10f      	bne.n	8007148 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <vPortEnterCritical+0x5c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00a      	beq.n	8007148 <vPortEnterCritical+0x4c>
	__asm volatile
 8007132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	603b      	str	r3, [r7, #0]
}
 8007144:	bf00      	nop
 8007146:	e7fe      	b.n	8007146 <vPortEnterCritical+0x4a>
	}
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	2000000c 	.word	0x2000000c
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <vPortExitCritical>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800541a:	4b10      	ldr	r3, [pc, #64]	; (800545c <vPortExitCritical+0x48>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <vPortExitCritical+0x22>
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	e7fe      	b.n	8005434 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005436:	4b09      	ldr	r3, [pc, #36]	; (800545c <vPortExitCritical+0x48>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3b01      	subs	r3, #1
 800543c:	4a07      	ldr	r2, [pc, #28]	; (800545c <vPortExitCritical+0x48>)
 800543e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005440:	4b06      	ldr	r3, [pc, #24]	; (800545c <vPortExitCritical+0x48>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <vPortExitCritical+0x3e>
 8005448:	2300      	movs	r3, #0
 800544a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f383 8811 	msr	BASEPRI, r3
=======
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007162:	4b11      	ldr	r3, [pc, #68]	; (80071a8 <vPortExitCritical+0x4c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10a      	bne.n	8007180 <vPortExitCritical+0x24>
	__asm volatile
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	607b      	str	r3, [r7, #4]
}
 800717c:	bf00      	nop
 800717e:	e7fe      	b.n	800717e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007180:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <vPortExitCritical+0x4c>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3b01      	subs	r3, #1
 8007186:	4a08      	ldr	r2, [pc, #32]	; (80071a8 <vPortExitCritical+0x4c>)
 8007188:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800718a:	4b07      	ldr	r3, [pc, #28]	; (80071a8 <vPortExitCritical+0x4c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d105      	bne.n	800719e <vPortExitCritical+0x42>
 8007192:	2300      	movs	r3, #0
 8007194:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	f383 8811 	msr	BASEPRI, r3
}
 800719c:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	2000000c 	.word	0x2000000c

08005460 <PendSV_Handler>:
=======
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr
 80071a8:	2000000c 	.word	0x2000000c
 80071ac:	00000000 	.word	0x00000000

080071b0 <PendSV_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 8005460:	f3ef 8009 	mrs	r0, PSP
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <pxCurrentTCBConst>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005470:	6010      	str	r0, [r2, #0]
 8005472:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005476:	f04f 0050 	mov.w	r0, #80	; 0x50
 800547a:	f380 8811 	msr	BASEPRI, r0
 800547e:	f7ff f863 	bl	8004548 <vTaskSwitchContext>
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8811 	msr	BASEPRI, r0
 800548a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800548e:	6819      	ldr	r1, [r3, #0]
 8005490:	6808      	ldr	r0, [r1, #0]
 8005492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005496:	f380 8809 	msr	PSP, r0
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	4770      	bx	lr

080054a0 <pxCurrentTCBConst>:
 80054a0:	200006e8 	.word	0x200006e8
=======
 80071b0:	f3ef 8009 	mrs	r0, PSP
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <pxCurrentTCBConst>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071c0:	6010      	str	r0, [r2, #0]
 80071c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80071c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071ca:	f380 8811 	msr	BASEPRI, r0
 80071ce:	f7ff f845 	bl	800625c <vTaskSwitchContext>
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8811 	msr	BASEPRI, r0
 80071da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071e6:	f380 8809 	msr	PSP, r0
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	4770      	bx	lr

080071f0 <pxCurrentTCBConst>:
 80071f0:	200006e8 	.word	0x200006e8
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop

080054a8 <SysTick_Handler>:
=======
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop

080071f8 <SysTick_Handler>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	607b      	str	r3, [r7, #4]
=======
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	607b      	str	r3, [r7, #4]
}
 8007210:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 80054c0:	f7fe ff84 	bl	80043cc <xTaskIncrementTick>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <SysTick_Handler+0x2a>
=======
 8007212:	f7fe ff65 	bl	80060e0 <xTaskIncrementTick>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <SysTick_Handler+0x2c>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <SysTick_Handler+0x3c>)
 80054cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f383 8811 	msr	BASEPRI, r3
=======
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <SysTick_Handler+0x40>)
 800721e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	2300      	movs	r3, #0
 8007226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f383 8811 	msr	BASEPRI, r3
}
 800722e:	bf00      	nop
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <vPortSetupTimerInterrupt>:
=======
 8007230:	bf00      	nop
 8007232:	3708      	adds	r7, #8
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	e000ed04 	.word	0xe000ed04

0800723c <vPortSetupTimerInterrupt>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
=======
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 80054ec:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <vPortSetupTimerInterrupt+0x30>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <vPortSetupTimerInterrupt+0x34>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054f8:	4b09      	ldr	r3, [pc, #36]	; (8005520 <vPortSetupTimerInterrupt+0x38>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a09      	ldr	r2, [pc, #36]	; (8005524 <vPortSetupTimerInterrupt+0x3c>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	099b      	lsrs	r3, r3, #6
 8005504:	4a08      	ldr	r2, [pc, #32]	; (8005528 <vPortSetupTimerInterrupt+0x40>)
 8005506:	3b01      	subs	r3, #1
 8005508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800550a:	4b03      	ldr	r3, [pc, #12]	; (8005518 <vPortSetupTimerInterrupt+0x30>)
 800550c:	2207      	movs	r2, #7
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	e000e010 	.word	0xe000e010
 800551c:	e000e018 	.word	0xe000e018
 8005520:	20000000 	.word	0x20000000
 8005524:	10624dd3 	.word	0x10624dd3
 8005528:	e000e014 	.word	0xe000e014

0800552c <vPortValidateInterruptPriority>:
=======
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <vPortSetupTimerInterrupt+0x30>)
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <vPortSetupTimerInterrupt+0x34>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <vPortSetupTimerInterrupt+0x38>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a09      	ldr	r2, [pc, #36]	; (8007278 <vPortSetupTimerInterrupt+0x3c>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	099b      	lsrs	r3, r3, #6
 8007258:	4a08      	ldr	r2, [pc, #32]	; (800727c <vPortSetupTimerInterrupt+0x40>)
 800725a:	3b01      	subs	r3, #1
 800725c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800725e:	4b03      	ldr	r3, [pc, #12]	; (800726c <vPortSetupTimerInterrupt+0x30>)
 8007260:	2207      	movs	r2, #7
 8007262:	601a      	str	r2, [r3, #0]
}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	bc80      	pop	{r7}
 800726a:	4770      	bx	lr
 800726c:	e000e010 	.word	0xe000e010
 8007270:	e000e018 	.word	0xe000e018
 8007274:	20000000 	.word	0x20000000
 8007278:	10624dd3 	.word	0x10624dd3
 800727c:	e000e014 	.word	0xe000e014

08007280 <vPortValidateInterruptPriority>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
<<<<<<< HEAD
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
=======
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
<<<<<<< HEAD
 8005532:	f3ef 8305 	mrs	r3, IPSR
 8005536:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b0f      	cmp	r3, #15
 800553c:	d913      	bls.n	8005566 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <vPortValidateInterruptPriority+0x68>)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	72fb      	strb	r3, [r7, #11]
=======
 8007286:	f3ef 8305 	mrs	r3, IPSR
 800728a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b0f      	cmp	r3, #15
 8007290:	d914      	bls.n	80072bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007292:	4a16      	ldr	r2, [pc, #88]	; (80072ec <vPortValidateInterruptPriority+0x6c>)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	72fb      	strb	r3, [r7, #11]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
<<<<<<< HEAD
 8005548:	4b13      	ldr	r3, [pc, #76]	; (8005598 <vPortValidateInterruptPriority+0x6c>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	7afa      	ldrb	r2, [r7, #11]
 800554e:	429a      	cmp	r2, r3
 8005550:	d209      	bcs.n	8005566 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	e7fe      	b.n	8005564 <vPortValidateInterruptPriority+0x38>
=======
 800729c:	4b14      	ldr	r3, [pc, #80]	; (80072f0 <vPortValidateInterruptPriority+0x70>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	7afa      	ldrb	r2, [r7, #11]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d20a      	bcs.n	80072bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	607b      	str	r3, [r7, #4]
}
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <vPortValidateInterruptPriority+0x3a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
<<<<<<< HEAD
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <vPortValidateInterruptPriority+0x70>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800556e:	4b0c      	ldr	r3, [pc, #48]	; (80055a0 <vPortValidateInterruptPriority+0x74>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d909      	bls.n	800558a <vPortValidateInterruptPriority+0x5e>
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	e7fe      	b.n	8005588 <vPortValidateInterruptPriority+0x5c>
	}
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	e000e3f0 	.word	0xe000e3f0
 8005598:	20000d14 	.word	0x20000d14
 800559c:	e000ed0c 	.word	0xe000ed0c
 80055a0:	20000d18 	.word	0x20000d18

080055a4 <pvPortMalloc>:
=======
 80072bc:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <vPortValidateInterruptPriority+0x74>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072c4:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <vPortValidateInterruptPriority+0x78>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d90a      	bls.n	80072e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	603b      	str	r3, [r7, #0]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <vPortValidateInterruptPriority+0x60>
	}
 80072e2:	bf00      	nop
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr
 80072ec:	e000e3f0 	.word	0xe000e3f0
 80072f0:	20000d14 	.word	0x20000d14
 80072f4:	e000ed0c 	.word	0xe000ed0c
 80072f8:	20000d18 	.word	0x20000d18

080072fc <pvPortMalloc>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	; 0x28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055b0:	f7fe fe54 	bl	800425c <vTaskSuspendAll>
=======
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08a      	sub	sp, #40	; 0x28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007304:	2300      	movs	r3, #0
 8007306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007308:	f7fe fe30 	bl	8005f6c <vTaskSuspendAll>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 80055b4:	4b57      	ldr	r3, [pc, #348]	; (8005714 <pvPortMalloc+0x170>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055bc:	f000 f90c 	bl	80057d8 <prvHeapInit>
=======
 800730c:	4b58      	ldr	r3, [pc, #352]	; (8007470 <pvPortMalloc+0x174>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007314:	f000 f910 	bl	8007538 <prvHeapInit>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 80055c0:	4b55      	ldr	r3, [pc, #340]	; (8005718 <pvPortMalloc+0x174>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f040 808c 	bne.w	80056e6 <pvPortMalloc+0x142>
=======
 8007318:	4b56      	ldr	r3, [pc, #344]	; (8007474 <pvPortMalloc+0x178>)
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4013      	ands	r3, r2
 8007320:	2b00      	cmp	r3, #0
 8007322:	f040 808e 	bne.w	8007442 <pvPortMalloc+0x146>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d01c      	beq.n	800560e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80055d4:	2208      	movs	r2, #8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	607b      	str	r3, [r7, #4]
=======
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01d      	beq.n	8007368 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800732c:	2208      	movs	r2, #8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4413      	add	r3, r2
 8007332:	607b      	str	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d013      	beq.n	800560e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f023 0307 	bic.w	r3, r3, #7
 80055ec:	3308      	adds	r3, #8
 80055ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <pvPortMalloc+0x6a>
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e7fe      	b.n	800560c <pvPortMalloc+0x68>
=======
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d014      	beq.n	8007368 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f023 0307 	bic.w	r3, r3, #7
 8007344:	3308      	adds	r3, #8
 8007346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f003 0307 	and.w	r3, r3, #7
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <pvPortMalloc+0x6c>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	617b      	str	r3, [r7, #20]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <pvPortMalloc+0x6a>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d068      	beq.n	80056e6 <pvPortMalloc+0x142>
 8005614:	4b41      	ldr	r3, [pc, #260]	; (800571c <pvPortMalloc+0x178>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d863      	bhi.n	80056e6 <pvPortMalloc+0x142>
=======
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d069      	beq.n	8007442 <pvPortMalloc+0x146>
 800736e:	4b42      	ldr	r3, [pc, #264]	; (8007478 <pvPortMalloc+0x17c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d864      	bhi.n	8007442 <pvPortMalloc+0x146>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 800561e:	4b40      	ldr	r3, [pc, #256]	; (8005720 <pvPortMalloc+0x17c>)
 8005620:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005622:	4b3f      	ldr	r3, [pc, #252]	; (8005720 <pvPortMalloc+0x17c>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005628:	e004      	b.n	8005634 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d903      	bls.n	8005646 <pvPortMalloc+0xa2>
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f1      	bne.n	800562a <pvPortMalloc+0x86>
=======
 8007378:	4b40      	ldr	r3, [pc, #256]	; (800747c <pvPortMalloc+0x180>)
 800737a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800737c:	4b3f      	ldr	r3, [pc, #252]	; (800747c <pvPortMalloc+0x180>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007382:	e004      	b.n	800738e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	429a      	cmp	r2, r3
 8007396:	d903      	bls.n	80073a0 <pvPortMalloc+0xa4>
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f1      	bne.n	8007384 <pvPortMalloc+0x88>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 8005646:	4b33      	ldr	r3, [pc, #204]	; (8005714 <pvPortMalloc+0x170>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564c:	429a      	cmp	r2, r3
 800564e:	d04a      	beq.n	80056e6 <pvPortMalloc+0x142>
=======
 80073a0:	4b33      	ldr	r3, [pc, #204]	; (8007470 <pvPortMalloc+0x174>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d04b      	beq.n	8007442 <pvPortMalloc+0x146>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2208      	movs	r2, #8
 8005656:	4413      	add	r3, r2
 8005658:	61fb      	str	r3, [r7, #28]
=======
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2208      	movs	r2, #8
 80073b0:	4413      	add	r3, r2
 80073b2:	61fb      	str	r3, [r7, #28]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	601a      	str	r2, [r3, #0]
=======
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	1ad2      	subs	r2, r2, r3
 800566a:	2308      	movs	r3, #8
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	429a      	cmp	r2, r3
 8005670:	d91e      	bls.n	80056b0 <pvPortMalloc+0x10c>
=======
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	1ad2      	subs	r2, r2, r3
 80073c4:	2308      	movs	r3, #8
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d91f      	bls.n	800740c <pvPortMalloc+0x110>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 8005672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4413      	add	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	2b00      	cmp	r3, #0
 8005682:	d009      	beq.n	8005698 <pvPortMalloc+0xf4>
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e7fe      	b.n	8005696 <pvPortMalloc+0xf2>
=======
 80073cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4413      	add	r3, r2
 80073d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <pvPortMalloc+0xf8>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	613b      	str	r3, [r7, #16]
}
 80073f0:	bf00      	nop
 80073f2:	e7fe      	b.n	80073f2 <pvPortMalloc+0xf6>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056aa:	69b8      	ldr	r0, [r7, #24]
 80056ac:	f000 f8f6 	bl	800589c <prvInsertBlockIntoFreeList>
=======
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1ad2      	subs	r2, r2, r3
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007406:	69b8      	ldr	r0, [r7, #24]
 8007408:	f000 f8f8 	bl	80075fc <prvInsertBlockIntoFreeList>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 80056b0:	4b1a      	ldr	r3, [pc, #104]	; (800571c <pvPortMalloc+0x178>)
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	4a18      	ldr	r2, [pc, #96]	; (800571c <pvPortMalloc+0x178>)
 80056bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056be:	4b17      	ldr	r3, [pc, #92]	; (800571c <pvPortMalloc+0x178>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b18      	ldr	r3, [pc, #96]	; (8005724 <pvPortMalloc+0x180>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d203      	bcs.n	80056d2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <pvPortMalloc+0x178>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a15      	ldr	r2, [pc, #84]	; (8005724 <pvPortMalloc+0x180>)
 80056d0:	6013      	str	r3, [r2, #0]
=======
 800740c:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <pvPortMalloc+0x17c>)
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	4a18      	ldr	r2, [pc, #96]	; (8007478 <pvPortMalloc+0x17c>)
 8007418:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800741a:	4b17      	ldr	r3, [pc, #92]	; (8007478 <pvPortMalloc+0x17c>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <pvPortMalloc+0x184>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d203      	bcs.n	800742e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007426:	4b14      	ldr	r3, [pc, #80]	; (8007478 <pvPortMalloc+0x17c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a15      	ldr	r2, [pc, #84]	; (8007480 <pvPortMalloc+0x184>)
 800742c:	6013      	str	r3, [r2, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <pvPortMalloc+0x174>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	431a      	orrs	r2, r3
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
=======
 800742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <pvPortMalloc+0x178>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	431a      	orrs	r2, r3
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 80056e6:	f7fe fdc7 	bl	8004278 <xTaskResumeAll>
=======
 8007442:	f7fe fda1 	bl	8005f88 <xTaskResumeAll>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <pvPortMalloc+0x164>
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	e7fe      	b.n	8005706 <pvPortMalloc+0x162>
	return pvReturn;
 8005708:	69fb      	ldr	r3, [r7, #28]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3728      	adds	r7, #40	; 0x28
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	200020ac 	.word	0x200020ac
 8005718:	200020b8 	.word	0x200020b8
 800571c:	200020b0 	.word	0x200020b0
 8005720:	200020a4 	.word	0x200020a4
 8005724:	200020b4 	.word	0x200020b4

08005728 <vPortFree>:
=======
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <pvPortMalloc+0x16a>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60fb      	str	r3, [r7, #12]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <pvPortMalloc+0x168>
	return pvReturn;
 8007466:	69fb      	ldr	r3, [r7, #28]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3728      	adds	r7, #40	; 0x28
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	200020ac 	.word	0x200020ac
 8007474:	200020b8 	.word	0x200020b8
 8007478:	200020b0 	.word	0x200020b0
 800747c:	200020a4 	.word	0x200020a4
 8007480:	200020b4 	.word	0x200020b4

08007484 <vPortFree>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d046      	beq.n	80057c8 <vPortFree+0xa0>
=======
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d048      	beq.n	8007528 <vPortFree+0xa4>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 800573a:	2308      	movs	r3, #8
 800573c:	425b      	negs	r3, r3
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4413      	add	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <vPortFree+0xa8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <vPortFree+0x42>
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	e7fe      	b.n	8005768 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <vPortFree+0x5e>
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	e7fe      	b.n	8005784 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <vPortFree+0xa8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4013      	ands	r3, r2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d019      	beq.n	80057c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d115      	bne.n	80057c8 <vPortFree+0xa0>
=======
 8007496:	2308      	movs	r3, #8
 8007498:	425b      	negs	r3, r3
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	4413      	add	r3, r2
 800749e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	4b21      	ldr	r3, [pc, #132]	; (8007530 <vPortFree+0xac>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4013      	ands	r3, r2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10a      	bne.n	80074c8 <vPortFree+0x44>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	60fb      	str	r3, [r7, #12]
}
 80074c4:	bf00      	nop
 80074c6:	e7fe      	b.n	80074c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <vPortFree+0x62>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	60bb      	str	r3, [r7, #8]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	685a      	ldr	r2, [r3, #4]
 80074ea:	4b11      	ldr	r3, [pc, #68]	; (8007530 <vPortFree+0xac>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d019      	beq.n	8007528 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d115      	bne.n	8007528 <vPortFree+0xa4>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <vPortFree+0xa8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	401a      	ands	r2, r3
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057ac:	f7fe fd56 	bl	800425c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4b07      	ldr	r3, [pc, #28]	; (80057d4 <vPortFree+0xac>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4413      	add	r3, r2
 80057ba:	4a06      	ldr	r2, [pc, #24]	; (80057d4 <vPortFree+0xac>)
 80057bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057be:	6938      	ldr	r0, [r7, #16]
 80057c0:	f000 f86c 	bl	800589c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057c4:	f7fe fd58 	bl	8004278 <xTaskResumeAll>
=======
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	4b0b      	ldr	r3, [pc, #44]	; (8007530 <vPortFree+0xac>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	43db      	mvns	r3, r3
 8007506:	401a      	ands	r2, r3
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800750c:	f7fe fd2e 	bl	8005f6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	4b07      	ldr	r3, [pc, #28]	; (8007534 <vPortFree+0xb0>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4413      	add	r3, r2
 800751a:	4a06      	ldr	r2, [pc, #24]	; (8007534 <vPortFree+0xb0>)
 800751c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800751e:	6938      	ldr	r0, [r7, #16]
 8007520:	f000 f86c 	bl	80075fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007524:	f7fe fd30 	bl	8005f88 <xTaskResumeAll>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 80057c8:	bf00      	nop
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	200020b8 	.word	0x200020b8
 80057d4:	200020b0 	.word	0x200020b0

080057d8 <prvHeapInit>:
=======
 8007528:	bf00      	nop
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	200020b8 	.word	0x200020b8
 8007534:	200020b0 	.word	0x200020b0

08007538 <prvHeapInit>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
=======
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 80057de:	f241 3388 	movw	r3, #5000	; 0x1388
 80057e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057e4:	4b27      	ldr	r3, [pc, #156]	; (8005884 <prvHeapInit+0xac>)
 80057e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3307      	adds	r3, #7
 80057f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	4a1f      	ldr	r2, [pc, #124]	; (8005884 <prvHeapInit+0xac>)
 8005808:	4413      	add	r3, r2
 800580a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	607b      	str	r3, [r7, #4]
=======
 800753e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007542:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007544:	4b27      	ldr	r3, [pc, #156]	; (80075e4 <prvHeapInit+0xac>)
 8007546:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00c      	beq.n	800756c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3307      	adds	r3, #7
 8007556:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0307 	bic.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	4a1f      	ldr	r2, [pc, #124]	; (80075e4 <prvHeapInit+0xac>)
 8007568:	4413      	add	r3, r2
 800756a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	607b      	str	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 8005810:	4a1d      	ldr	r2, [pc, #116]	; (8005888 <prvHeapInit+0xb0>)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005816:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <prvHeapInit+0xb0>)
 8005818:	2200      	movs	r2, #0
 800581a:	605a      	str	r2, [r3, #4]
=======
 8007570:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <prvHeapInit+0xb0>)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007576:	4b1c      	ldr	r3, [pc, #112]	; (80075e8 <prvHeapInit+0xb0>)
 8007578:	2200      	movs	r2, #0
 800757a:	605a      	str	r2, [r3, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4413      	add	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005824:	2208      	movs	r2, #8
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0307 	bic.w	r3, r3, #7
 8005832:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a15      	ldr	r2, [pc, #84]	; (800588c <prvHeapInit+0xb4>)
 8005838:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800583a:	4b14      	ldr	r3, [pc, #80]	; (800588c <prvHeapInit+0xb4>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <prvHeapInit+0xb4>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2200      	movs	r2, #0
 8005848:	601a      	str	r2, [r3, #0]
=======
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	4413      	add	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007584:	2208      	movs	r2, #8
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	1a9b      	subs	r3, r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0307 	bic.w	r3, r3, #7
 8007592:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a15      	ldr	r2, [pc, #84]	; (80075ec <prvHeapInit+0xb4>)
 8007598:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800759a:	4b14      	ldr	r3, [pc, #80]	; (80075ec <prvHeapInit+0xb4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2200      	movs	r2, #0
 80075a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075a2:	4b12      	ldr	r3, [pc, #72]	; (80075ec <prvHeapInit+0xb4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2200      	movs	r2, #0
 80075a8:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	1ad2      	subs	r2, r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005858:	4b0c      	ldr	r3, [pc, #48]	; (800588c <prvHeapInit+0xb4>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	4a0a      	ldr	r2, [pc, #40]	; (8005890 <prvHeapInit+0xb8>)
 8005866:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4a09      	ldr	r2, [pc, #36]	; (8005894 <prvHeapInit+0xbc>)
 800586e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005870:	4b09      	ldr	r3, [pc, #36]	; (8005898 <prvHeapInit+0xc0>)
 8005872:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005876:	601a      	str	r2, [r3, #0]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000d1c 	.word	0x20000d1c
 8005888:	200020a4 	.word	0x200020a4
 800588c:	200020ac 	.word	0x200020ac
 8005890:	200020b4 	.word	0x200020b4
 8005894:	200020b0 	.word	0x200020b0
 8005898:	200020b8 	.word	0x200020b8

0800589c <prvInsertBlockIntoFreeList>:
=======
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <prvHeapInit+0xb4>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	4a0a      	ldr	r2, [pc, #40]	; (80075f0 <prvHeapInit+0xb8>)
 80075c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4a09      	ldr	r2, [pc, #36]	; (80075f4 <prvHeapInit+0xbc>)
 80075ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075d0:	4b09      	ldr	r3, [pc, #36]	; (80075f8 <prvHeapInit+0xc0>)
 80075d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075d6:	601a      	str	r2, [r3, #0]
}
 80075d8:	bf00      	nop
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	bc80      	pop	{r7}
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20000d1c 	.word	0x20000d1c
 80075e8:	200020a4 	.word	0x200020a4
 80075ec:	200020ac 	.word	0x200020ac
 80075f0:	200020b4 	.word	0x200020b4
 80075f4:	200020b0 	.word	0x200020b0
 80075f8:	200020b8 	.word	0x200020b8

080075fc <prvInsertBlockIntoFreeList>:
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
=======
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 80058a4:	4b27      	ldr	r3, [pc, #156]	; (8005944 <prvInsertBlockIntoFreeList+0xa8>)
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e002      	b.n	80058b0 <prvInsertBlockIntoFreeList+0x14>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d8f7      	bhi.n	80058aa <prvInsertBlockIntoFreeList+0xe>
=======
 8007604:	4b27      	ldr	r3, [pc, #156]	; (80076a4 <prvInsertBlockIntoFreeList+0xa8>)
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e002      	b.n	8007610 <prvInsertBlockIntoFreeList+0x14>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	429a      	cmp	r2, r3
 8007618:	d8f7      	bhi.n	800760a <prvInsertBlockIntoFreeList+0xe>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	4413      	add	r3, r2
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d108      	bne.n	80058de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	441a      	add	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	607b      	str	r3, [r7, #4]
=======
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	68ba      	ldr	r2, [r7, #8]
 8007624:	4413      	add	r3, r2
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	429a      	cmp	r2, r3
 800762a:	d108      	bne.n	800763e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	607b      	str	r3, [r7, #4]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	441a      	add	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d118      	bne.n	8005924 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <prvInsertBlockIntoFreeList+0xac>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d00d      	beq.n	800591a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	441a      	add	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	e008      	b.n	800592c <prvInsertBlockIntoFreeList+0x90>
=======
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	441a      	add	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	429a      	cmp	r2, r3
 8007650:	d118      	bne.n	8007684 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <prvInsertBlockIntoFreeList+0xac>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d00d      	beq.n	800767a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	441a      	add	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]
 8007678:	e008      	b.n	800768c <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <prvInsertBlockIntoFreeList+0xac>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e003      	b.n	800592c <prvInsertBlockIntoFreeList+0x90>
=======
 800767a:	4b0b      	ldr	r3, [pc, #44]	; (80076a8 <prvInsertBlockIntoFreeList+0xac>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	e003      	b.n	800768c <prvInsertBlockIntoFreeList+0x90>
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	601a      	str	r2, [r3, #0]
=======
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d002      	beq.n	800593a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	601a      	str	r2, [r3, #0]
=======
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	d002      	beq.n	800769a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	601a      	str	r2, [r3, #0]
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800593a:	bf00      	nop
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	200020a4 	.word	0x200020a4
 8005948:	200020ac 	.word	0x200020ac

0800594c <__libc_init_array>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	2500      	movs	r5, #0
 8005950:	4e0c      	ldr	r6, [pc, #48]	; (8005984 <__libc_init_array+0x38>)
 8005952:	4c0d      	ldr	r4, [pc, #52]	; (8005988 <__libc_init_array+0x3c>)
 8005954:	1ba4      	subs	r4, r4, r6
 8005956:	10a4      	asrs	r4, r4, #2
 8005958:	42a5      	cmp	r5, r4
 800595a:	d109      	bne.n	8005970 <__libc_init_array+0x24>
 800595c:	f000 f82e 	bl	80059bc <_init>
 8005960:	2500      	movs	r5, #0
 8005962:	4e0a      	ldr	r6, [pc, #40]	; (800598c <__libc_init_array+0x40>)
 8005964:	4c0a      	ldr	r4, [pc, #40]	; (8005990 <__libc_init_array+0x44>)
 8005966:	1ba4      	subs	r4, r4, r6
 8005968:	10a4      	asrs	r4, r4, #2
 800596a:	42a5      	cmp	r5, r4
 800596c:	d105      	bne.n	800597a <__libc_init_array+0x2e>
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005974:	4798      	blx	r3
 8005976:	3501      	adds	r5, #1
 8005978:	e7ee      	b.n	8005958 <__libc_init_array+0xc>
 800597a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800597e:	4798      	blx	r3
 8005980:	3501      	adds	r5, #1
 8005982:	e7f2      	b.n	800596a <__libc_init_array+0x1e>
 8005984:	08005c38 	.word	0x08005c38
 8005988:	08005c38 	.word	0x08005c38
 800598c:	08005c38 	.word	0x08005c38
 8005990:	08005c3c 	.word	0x08005c3c

08005994 <memcpy>:
 8005994:	b510      	push	{r4, lr}
 8005996:	1e43      	subs	r3, r0, #1
 8005998:	440a      	add	r2, r1
 800599a:	4291      	cmp	r1, r2
 800599c:	d100      	bne.n	80059a0 <memcpy+0xc>
 800599e:	bd10      	pop	{r4, pc}
 80059a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059a8:	e7f7      	b.n	800599a <memcpy+0x6>

080059aa <memset>:
 80059aa:	4603      	mov	r3, r0
 80059ac:	4402      	add	r2, r0
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d100      	bne.n	80059b4 <memset+0xa>
 80059b2:	4770      	bx	lr
 80059b4:	f803 1b01 	strb.w	r1, [r3], #1
 80059b8:	e7f9      	b.n	80059ae <memset+0x4>
	...

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
=======
 800769a:	bf00      	nop
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr
 80076a4:	200020a4 	.word	0x200020a4
 80076a8:	200020ac 	.word	0x200020ac

080076ac <__libc_init_array>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	2600      	movs	r6, #0
 80076b0:	4d0c      	ldr	r5, [pc, #48]	; (80076e4 <__libc_init_array+0x38>)
 80076b2:	4c0d      	ldr	r4, [pc, #52]	; (80076e8 <__libc_init_array+0x3c>)
 80076b4:	1b64      	subs	r4, r4, r5
 80076b6:	10a4      	asrs	r4, r4, #2
 80076b8:	42a6      	cmp	r6, r4
 80076ba:	d109      	bne.n	80076d0 <__libc_init_array+0x24>
 80076bc:	f000 f830 	bl	8007720 <_init>
 80076c0:	2600      	movs	r6, #0
 80076c2:	4d0a      	ldr	r5, [pc, #40]	; (80076ec <__libc_init_array+0x40>)
 80076c4:	4c0a      	ldr	r4, [pc, #40]	; (80076f0 <__libc_init_array+0x44>)
 80076c6:	1b64      	subs	r4, r4, r5
 80076c8:	10a4      	asrs	r4, r4, #2
 80076ca:	42a6      	cmp	r6, r4
 80076cc:	d105      	bne.n	80076da <__libc_init_array+0x2e>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d4:	4798      	blx	r3
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7ee      	b.n	80076b8 <__libc_init_array+0xc>
 80076da:	f855 3b04 	ldr.w	r3, [r5], #4
 80076de:	4798      	blx	r3
 80076e0:	3601      	adds	r6, #1
 80076e2:	e7f2      	b.n	80076ca <__libc_init_array+0x1e>
 80076e4:	08007974 	.word	0x08007974
 80076e8:	08007974 	.word	0x08007974
 80076ec:	08007974 	.word	0x08007974
 80076f0:	08007978 	.word	0x08007978

080076f4 <memcpy>:
 80076f4:	440a      	add	r2, r1
 80076f6:	4291      	cmp	r1, r2
 80076f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076fc:	d100      	bne.n	8007700 <memcpy+0xc>
 80076fe:	4770      	bx	lr
 8007700:	b510      	push	{r4, lr}
 8007702:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007706:	4291      	cmp	r1, r2
 8007708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800770c:	d1f9      	bne.n	8007702 <memcpy+0xe>
 800770e:	bd10      	pop	{r4, pc}

08007710 <memset>:
 8007710:	4603      	mov	r3, r0
 8007712:	4402      	add	r2, r0
 8007714:	4293      	cmp	r3, r2
 8007716:	d100      	bne.n	800771a <memset+0xa>
 8007718:	4770      	bx	lr
 800771a:	f803 1b01 	strb.w	r1, [r3], #1
 800771e:	e7f9      	b.n	8007714 <memset+0x4>

08007720 <_init>:
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	bf00      	nop
 8007724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007726:	bc08      	pop	{r3}
 8007728:	469e      	mov	lr, r3
 800772a:	4770      	bx	lr

0800772c <_fini>:
 800772c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772e:	bf00      	nop
 8007730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007732:	bc08      	pop	{r3}
 8007734:	469e      	mov	lr, r3
 8007736:	4770      	bx	lr
>>>>>>> 57efdb25b7c2c9300249d2fef9e0fd4824485e89
