
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a124  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800a234  0800a234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4f4  0800a4f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4f4  0800a4f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4f4  0800a4f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4f4  0800a4f4  0001a4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002978  20000010  0800a50c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002988  0800a50c  00022988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a36c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003346  00000000  00000000  0003a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001510  00000000  00000000  0003d6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001398  00000000  00000000  0003ec00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001969a  00000000  00000000  0003ff98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011aac  00000000  00000000  00059632  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009879c  00000000  00000000  0006b0de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010387a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000593c  00000000  00000000  001038f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a21c 	.word	0x0800a21c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800a21c 	.word	0x0800a21c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2iz>:
 8000e48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e50:	d30f      	bcc.n	8000e72 <__aeabi_f2iz+0x2a>
 8000e52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d90d      	bls.n	8000e78 <__aeabi_f2iz+0x30>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e64:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	bf18      	it	ne
 8000e6e:	4240      	negne	r0, r0
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr
 8000e78:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_f2iz+0x3a>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d105      	bne.n	8000e8e <__aeabi_f2iz+0x46>
 8000e82:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e86:	bf08      	it	eq
 8000e88:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e8c:	4770      	bx	lr
 8000e8e:	f04f 0000 	mov.w	r0, #0
 8000e92:	4770      	bx	lr

08000e94 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b3a      	cmp	r3, #58	; 0x3a
 8000ea2:	d13b      	bne.n	8000f1c <letter+0x88>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eaa:	48d5      	ldr	r0, [pc, #852]	; (8001200 <letter+0x36c>)
 8000eac:	f004 ff07 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb6:	48d3      	ldr	r0, [pc, #844]	; (8001204 <letter+0x370>)
 8000eb8:	f004 ff01 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	48d0      	ldr	r0, [pc, #832]	; (8001204 <letter+0x370>)
 8000ec4:	f004 fefb 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	48cd      	ldr	r0, [pc, #820]	; (8001204 <letter+0x370>)
 8000ece:	f004 fef6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	48cb      	ldr	r0, [pc, #812]	; (8001204 <letter+0x370>)
 8000ed8:	f004 fef1 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000edc:	2201      	movs	r2, #1
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	48c9      	ldr	r0, [pc, #804]	; (8001208 <letter+0x374>)
 8000ee2:	f004 feec 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	48c6      	ldr	r0, [pc, #792]	; (8001208 <letter+0x374>)
 8000eee:	f004 fee6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	48c3      	ldr	r0, [pc, #780]	; (8001208 <letter+0x374>)
 8000efa:	f004 fee0 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f04:	48c0      	ldr	r0, [pc, #768]	; (8001208 <letter+0x374>)
 8000f06:	f004 feda 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f10:	48bb      	ldr	r0, [pc, #748]	; (8001200 <letter+0x36c>)
 8000f12:	f004 fed4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f16:	2002      	movs	r0, #2
 8000f18:	f004 f84e 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '-')
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2b2d      	cmp	r3, #45	; 0x2d
 8000f20:	d13b      	bne.n	8000f9a <letter+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f28:	48b5      	ldr	r0, [pc, #724]	; (8001200 <letter+0x36c>)
 8000f2a:	f004 fec8 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f34:	48b3      	ldr	r0, [pc, #716]	; (8001204 <letter+0x370>)
 8000f36:	f004 fec2 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f40:	48b0      	ldr	r0, [pc, #704]	; (8001204 <letter+0x370>)
 8000f42:	f004 febc 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000f46:	2201      	movs	r2, #1
 8000f48:	2140      	movs	r1, #64	; 0x40
 8000f4a:	48ae      	ldr	r0, [pc, #696]	; (8001204 <letter+0x370>)
 8000f4c:	f004 feb7 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000f50:	2201      	movs	r2, #1
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	48ab      	ldr	r0, [pc, #684]	; (8001204 <letter+0x370>)
 8000f56:	f004 feb2 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	48aa      	ldr	r0, [pc, #680]	; (8001208 <letter+0x374>)
 8000f60:	f004 fead 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6a:	48a7      	ldr	r0, [pc, #668]	; (8001208 <letter+0x374>)
 8000f6c:	f004 fea7 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f76:	48a4      	ldr	r0, [pc, #656]	; (8001208 <letter+0x374>)
 8000f78:	f004 fea1 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f82:	48a1      	ldr	r0, [pc, #644]	; (8001208 <letter+0x374>)
 8000f84:	f004 fe9b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8e:	489c      	ldr	r0, [pc, #624]	; (8001200 <letter+0x36c>)
 8000f90:	f004 fe95 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f94:	2002      	movs	r0, #2
 8000f96:	f004 f80f 	bl	8004fb8 <HAL_Delay>
	}
	if(L == ' ')
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	d13b      	bne.n	8001018 <letter+0x184>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	4896      	ldr	r0, [pc, #600]	; (8001200 <letter+0x36c>)
 8000fa8:	f004 fe89 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb2:	4894      	ldr	r0, [pc, #592]	; (8001204 <letter+0x370>)
 8000fb4:	f004 fe83 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fbe:	4891      	ldr	r0, [pc, #580]	; (8001204 <letter+0x370>)
 8000fc0:	f004 fe7d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2140      	movs	r1, #64	; 0x40
 8000fc8:	488e      	ldr	r0, [pc, #568]	; (8001204 <letter+0x370>)
 8000fca:	f004 fe78 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	488c      	ldr	r0, [pc, #560]	; (8001204 <letter+0x370>)
 8000fd4:	f004 fe73 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2180      	movs	r1, #128	; 0x80
 8000fdc:	488a      	ldr	r0, [pc, #552]	; (8001208 <letter+0x374>)
 8000fde:	f004 fe6e 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe8:	4887      	ldr	r0, [pc, #540]	; (8001208 <letter+0x374>)
 8000fea:	f004 fe68 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff4:	4884      	ldr	r0, [pc, #528]	; (8001208 <letter+0x374>)
 8000ff6:	f004 fe62 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001000:	4881      	ldr	r0, [pc, #516]	; (8001208 <letter+0x374>)
 8001002:	f004 fe5c 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100c:	487c      	ldr	r0, [pc, #496]	; (8001200 <letter+0x36c>)
 800100e:	f004 fe56 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001012:	2002      	movs	r0, #2
 8001014:	f003 ffd0 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '/')
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	2b2f      	cmp	r3, #47	; 0x2f
 800101c:	d13b      	bne.n	8001096 <letter+0x202>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800101e:	2201      	movs	r2, #1
 8001020:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001024:	4876      	ldr	r0, [pc, #472]	; (8001200 <letter+0x36c>)
 8001026:	f004 fe4a 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001030:	4874      	ldr	r0, [pc, #464]	; (8001204 <letter+0x370>)
 8001032:	f004 fe44 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103c:	4871      	ldr	r0, [pc, #452]	; (8001204 <letter+0x370>)
 800103e:	f004 fe3e 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001042:	2201      	movs	r2, #1
 8001044:	2140      	movs	r1, #64	; 0x40
 8001046:	486f      	ldr	r0, [pc, #444]	; (8001204 <letter+0x370>)
 8001048:	f004 fe39 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800104c:	2201      	movs	r2, #1
 800104e:	2180      	movs	r1, #128	; 0x80
 8001050:	486c      	ldr	r0, [pc, #432]	; (8001204 <letter+0x370>)
 8001052:	f004 fe34 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001056:	2200      	movs	r2, #0
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	486b      	ldr	r0, [pc, #428]	; (8001208 <letter+0x374>)
 800105c:	f004 fe2f 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001066:	4868      	ldr	r0, [pc, #416]	; (8001208 <letter+0x374>)
 8001068:	f004 fe29 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001072:	4865      	ldr	r0, [pc, #404]	; (8001208 <letter+0x374>)
 8001074:	f004 fe23 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800107e:	4862      	ldr	r0, [pc, #392]	; (8001208 <letter+0x374>)
 8001080:	f004 fe1d 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108a:	485d      	ldr	r0, [pc, #372]	; (8001200 <letter+0x36c>)
 800108c:	f004 fe17 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001090:	2002      	movs	r0, #2
 8001092:	f003 ff91 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '!')
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b21      	cmp	r3, #33	; 0x21
 800109a:	d138      	bne.n	800110e <letter+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a2:	4857      	ldr	r0, [pc, #348]	; (8001200 <letter+0x36c>)
 80010a4:	f004 fe0b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ae:	4855      	ldr	r0, [pc, #340]	; (8001204 <letter+0x370>)
 80010b0:	f004 fe05 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	4852      	ldr	r0, [pc, #328]	; (8001204 <letter+0x370>)
 80010bc:	f004 fdff 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80010c0:	2200      	movs	r2, #0
 80010c2:	2140      	movs	r1, #64	; 0x40
 80010c4:	484f      	ldr	r0, [pc, #316]	; (8001204 <letter+0x370>)
 80010c6:	f004 fdfa 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80010ca:	2200      	movs	r2, #0
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	484d      	ldr	r0, [pc, #308]	; (8001204 <letter+0x370>)
 80010d0:	f004 fdf5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80010d4:	2200      	movs	r2, #0
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	484b      	ldr	r0, [pc, #300]	; (8001208 <letter+0x374>)
 80010da:	f004 fdf0 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e4:	4848      	ldr	r0, [pc, #288]	; (8001208 <letter+0x374>)
 80010e6:	f004 fdea 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010f0:	4845      	ldr	r0, [pc, #276]	; (8001208 <letter+0x374>)
 80010f2:	f004 fde4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fc:	4842      	ldr	r0, [pc, #264]	; (8001208 <letter+0x374>)
 80010fe:	f004 fdde 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001108:	483d      	ldr	r0, [pc, #244]	; (8001200 <letter+0x36c>)
 800110a:	f004 fdd8 	bl	8005cbe <HAL_GPIO_WritePin>
	}
	if(L == '?')
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b3f      	cmp	r3, #63	; 0x3f
 8001112:	d13b      	bne.n	800118c <letter+0x2f8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111a:	4839      	ldr	r0, [pc, #228]	; (8001200 <letter+0x36c>)
 800111c:	f004 fdcf 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001126:	4837      	ldr	r0, [pc, #220]	; (8001204 <letter+0x370>)
 8001128:	f004 fdc9 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800112c:	2201      	movs	r2, #1
 800112e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001132:	4834      	ldr	r0, [pc, #208]	; (8001204 <letter+0x370>)
 8001134:	f004 fdc3 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001138:	2201      	movs	r2, #1
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	4831      	ldr	r0, [pc, #196]	; (8001204 <letter+0x370>)
 800113e:	f004 fdbe 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001142:	2201      	movs	r2, #1
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	482f      	ldr	r0, [pc, #188]	; (8001204 <letter+0x370>)
 8001148:	f004 fdb9 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800114c:	2201      	movs	r2, #1
 800114e:	2180      	movs	r1, #128	; 0x80
 8001150:	482d      	ldr	r0, [pc, #180]	; (8001208 <letter+0x374>)
 8001152:	f004 fdb4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115c:	482a      	ldr	r0, [pc, #168]	; (8001208 <letter+0x374>)
 800115e:	f004 fdae 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001168:	4827      	ldr	r0, [pc, #156]	; (8001208 <letter+0x374>)
 800116a:	f004 fda8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001174:	4824      	ldr	r0, [pc, #144]	; (8001208 <letter+0x374>)
 8001176:	f004 fda2 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800117a:	2200      	movs	r2, #0
 800117c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001180:	481f      	ldr	r0, [pc, #124]	; (8001200 <letter+0x36c>)
 8001182:	f004 fd9c 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001186:	2002      	movs	r0, #2
 8001188:	f003 ff16 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '*')
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b2a      	cmp	r3, #42	; 0x2a
 8001190:	d142      	bne.n	8001218 <letter+0x384>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001198:	4819      	ldr	r0, [pc, #100]	; (8001200 <letter+0x36c>)
 800119a:	f004 fd90 	bl	8005cbe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <letter+0x370>)
 80011a6:	f004 fd8a 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b0:	4814      	ldr	r0, [pc, #80]	; (8001204 <letter+0x370>)
 80011b2:	f004 fd84 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80011b6:	2200      	movs	r2, #0
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	4812      	ldr	r0, [pc, #72]	; (8001204 <letter+0x370>)
 80011bc:	f004 fd7f 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80011c0:	2201      	movs	r2, #1
 80011c2:	2180      	movs	r1, #128	; 0x80
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <letter+0x370>)
 80011c6:	f004 fd7a 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80011ca:	2200      	movs	r2, #0
 80011cc:	2180      	movs	r1, #128	; 0x80
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <letter+0x374>)
 80011d0:	f004 fd75 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	480b      	ldr	r0, [pc, #44]	; (8001208 <letter+0x374>)
 80011dc:	f004 fd6f 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e6:	4808      	ldr	r0, [pc, #32]	; (8001208 <letter+0x374>)
 80011e8:	f004 fd69 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <letter+0x374>)
 80011f4:	f004 fd63 	bl	8005cbe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fe:	e005      	b.n	800120c <letter+0x378>
 8001200:	40010c00 	.word	0x40010c00
 8001204:	40011000 	.word	0x40011000
 8001208:	40010800 	.word	0x40010800
 800120c:	48d5      	ldr	r0, [pc, #852]	; (8001564 <letter+0x6d0>)
 800120e:	f004 fd56 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 8001212:	2002      	movs	r0, #2
 8001214:	f003 fed0 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '#')
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b23      	cmp	r3, #35	; 0x23
 800121c:	d13b      	bne.n	8001296 <letter+0x402>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001224:	48cf      	ldr	r0, [pc, #828]	; (8001564 <letter+0x6d0>)
 8001226:	f004 fd4a 	bl	8005cbe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001230:	48cd      	ldr	r0, [pc, #820]	; (8001568 <letter+0x6d4>)
 8001232:	f004 fd44 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123c:	48ca      	ldr	r0, [pc, #808]	; (8001568 <letter+0x6d4>)
 800123e:	f004 fd3e 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001242:	2200      	movs	r2, #0
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	48c8      	ldr	r0, [pc, #800]	; (8001568 <letter+0x6d4>)
 8001248:	f004 fd39 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	48c5      	ldr	r0, [pc, #788]	; (8001568 <letter+0x6d4>)
 8001252:	f004 fd34 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001256:	2200      	movs	r2, #0
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	48c4      	ldr	r0, [pc, #784]	; (800156c <letter+0x6d8>)
 800125c:	f004 fd2f 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001266:	48c1      	ldr	r0, [pc, #772]	; (800156c <letter+0x6d8>)
 8001268:	f004 fd29 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001272:	48be      	ldr	r0, [pc, #760]	; (800156c <letter+0x6d8>)
 8001274:	f004 fd23 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127e:	48bb      	ldr	r0, [pc, #748]	; (800156c <letter+0x6d8>)
 8001280:	f004 fd1d 	bl	8005cbe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800128a:	48b6      	ldr	r0, [pc, #728]	; (8001564 <letter+0x6d0>)
 800128c:	f004 fd17 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 8001290:	2002      	movs	r0, #2
 8001292:	f003 fe91 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'a')
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b61      	cmp	r3, #97	; 0x61
 800129a:	d13b      	bne.n	8001314 <letter+0x480>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a2:	48b0      	ldr	r0, [pc, #704]	; (8001564 <letter+0x6d0>)
 80012a4:	f004 fd0b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ae:	48ae      	ldr	r0, [pc, #696]	; (8001568 <letter+0x6d4>)
 80012b0:	f004 fd05 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80012b4:	2200      	movs	r2, #0
 80012b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ba:	48ab      	ldr	r0, [pc, #684]	; (8001568 <letter+0x6d4>)
 80012bc:	f004 fcff 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80012c0:	2200      	movs	r2, #0
 80012c2:	2140      	movs	r1, #64	; 0x40
 80012c4:	48a8      	ldr	r0, [pc, #672]	; (8001568 <letter+0x6d4>)
 80012c6:	f004 fcfa 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80012ca:	2200      	movs	r2, #0
 80012cc:	2180      	movs	r1, #128	; 0x80
 80012ce:	48a6      	ldr	r0, [pc, #664]	; (8001568 <letter+0x6d4>)
 80012d0:	f004 fcf5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80012d4:	2200      	movs	r2, #0
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	48a4      	ldr	r0, [pc, #656]	; (800156c <letter+0x6d8>)
 80012da:	f004 fcf0 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e4:	48a1      	ldr	r0, [pc, #644]	; (800156c <letter+0x6d8>)
 80012e6:	f004 fcea 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	489e      	ldr	r0, [pc, #632]	; (800156c <letter+0x6d8>)
 80012f2:	f004 fce4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80012f6:	2200      	movs	r2, #0
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	489b      	ldr	r0, [pc, #620]	; (800156c <letter+0x6d8>)
 80012fe:	f004 fcde 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001308:	4896      	ldr	r0, [pc, #600]	; (8001564 <letter+0x6d0>)
 800130a:	f004 fcd8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800130e:	2002      	movs	r0, #2
 8001310:	f003 fe52 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'b')
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b62      	cmp	r3, #98	; 0x62
 8001318:	d13b      	bne.n	8001392 <letter+0x4fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001320:	4890      	ldr	r0, [pc, #576]	; (8001564 <letter+0x6d0>)
 8001322:	f004 fccc 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132c:	488e      	ldr	r0, [pc, #568]	; (8001568 <letter+0x6d4>)
 800132e:	f004 fcc6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001338:	488b      	ldr	r0, [pc, #556]	; (8001568 <letter+0x6d4>)
 800133a:	f004 fcc0 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800133e:	2200      	movs	r2, #0
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	4889      	ldr	r0, [pc, #548]	; (8001568 <letter+0x6d4>)
 8001344:	f004 fcbb 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4886      	ldr	r0, [pc, #536]	; (8001568 <letter+0x6d4>)
 800134e:	f004 fcb6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001352:	2200      	movs	r2, #0
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	4885      	ldr	r0, [pc, #532]	; (800156c <letter+0x6d8>)
 8001358:	f004 fcb1 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	4882      	ldr	r0, [pc, #520]	; (800156c <letter+0x6d8>)
 8001364:	f004 fcab 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800136e:	487f      	ldr	r0, [pc, #508]	; (800156c <letter+0x6d8>)
 8001370:	f004 fca5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800137a:	487c      	ldr	r0, [pc, #496]	; (800156c <letter+0x6d8>)
 800137c:	f004 fc9f 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001386:	4877      	ldr	r0, [pc, #476]	; (8001564 <letter+0x6d0>)
 8001388:	f004 fc99 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800138c:	2002      	movs	r0, #2
 800138e:	f003 fe13 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'C')
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b43      	cmp	r3, #67	; 0x43
 8001396:	d13b      	bne.n	8001410 <letter+0x57c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001398:	2201      	movs	r2, #1
 800139a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800139e:	4871      	ldr	r0, [pc, #452]	; (8001564 <letter+0x6d0>)
 80013a0:	f004 fc8d 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013aa:	486f      	ldr	r0, [pc, #444]	; (8001568 <letter+0x6d4>)
 80013ac:	f004 fc87 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b6:	486c      	ldr	r0, [pc, #432]	; (8001568 <letter+0x6d4>)
 80013b8:	f004 fc81 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013bc:	2200      	movs	r2, #0
 80013be:	2140      	movs	r1, #64	; 0x40
 80013c0:	4869      	ldr	r0, [pc, #420]	; (8001568 <letter+0x6d4>)
 80013c2:	f004 fc7c 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80013c6:	2200      	movs	r2, #0
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	4867      	ldr	r0, [pc, #412]	; (8001568 <letter+0x6d4>)
 80013cc:	f004 fc77 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80013d0:	2200      	movs	r2, #0
 80013d2:	2180      	movs	r1, #128	; 0x80
 80013d4:	4865      	ldr	r0, [pc, #404]	; (800156c <letter+0x6d8>)
 80013d6:	f004 fc72 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e0:	4862      	ldr	r0, [pc, #392]	; (800156c <letter+0x6d8>)
 80013e2:	f004 fc6c 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ec:	485f      	ldr	r0, [pc, #380]	; (800156c <letter+0x6d8>)
 80013ee:	f004 fc66 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f8:	485c      	ldr	r0, [pc, #368]	; (800156c <letter+0x6d8>)
 80013fa:	f004 fc60 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001404:	4857      	ldr	r0, [pc, #348]	; (8001564 <letter+0x6d0>)
 8001406:	f004 fc5a 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800140a:	2002      	movs	r0, #2
 800140c:	f003 fdd4 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'c')
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b63      	cmp	r3, #99	; 0x63
 8001414:	d13b      	bne.n	800148e <letter+0x5fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001416:	2201      	movs	r2, #1
 8001418:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141c:	4851      	ldr	r0, [pc, #324]	; (8001564 <letter+0x6d0>)
 800141e:	f004 fc4e 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001428:	484f      	ldr	r0, [pc, #316]	; (8001568 <letter+0x6d4>)
 800142a:	f004 fc48 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001434:	484c      	ldr	r0, [pc, #304]	; (8001568 <letter+0x6d4>)
 8001436:	f004 fc42 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800143a:	2200      	movs	r2, #0
 800143c:	2140      	movs	r1, #64	; 0x40
 800143e:	484a      	ldr	r0, [pc, #296]	; (8001568 <letter+0x6d4>)
 8001440:	f004 fc3d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001444:	2200      	movs	r2, #0
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	4847      	ldr	r0, [pc, #284]	; (8001568 <letter+0x6d4>)
 800144a:	f004 fc38 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800144e:	2200      	movs	r2, #0
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	4846      	ldr	r0, [pc, #280]	; (800156c <letter+0x6d8>)
 8001454:	f004 fc33 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145e:	4843      	ldr	r0, [pc, #268]	; (800156c <letter+0x6d8>)
 8001460:	f004 fc2d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146a:	4840      	ldr	r0, [pc, #256]	; (800156c <letter+0x6d8>)
 800146c:	f004 fc27 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001476:	483d      	ldr	r0, [pc, #244]	; (800156c <letter+0x6d8>)
 8001478:	f004 fc21 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001482:	4838      	ldr	r0, [pc, #224]	; (8001564 <letter+0x6d0>)
 8001484:	f004 fc1b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001488:	2002      	movs	r0, #2
 800148a:	f003 fd95 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'd')
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d13b      	bne.n	800150c <letter+0x678>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149a:	4832      	ldr	r0, [pc, #200]	; (8001564 <letter+0x6d0>)
 800149c:	f004 fc0f 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 80014a0:	2200      	movs	r2, #0
 80014a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a6:	4830      	ldr	r0, [pc, #192]	; (8001568 <letter+0x6d4>)
 80014a8:	f004 fc09 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b2:	482d      	ldr	r0, [pc, #180]	; (8001568 <letter+0x6d4>)
 80014b4:	f004 fc03 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80014b8:	2201      	movs	r2, #1
 80014ba:	2140      	movs	r1, #64	; 0x40
 80014bc:	482a      	ldr	r0, [pc, #168]	; (8001568 <letter+0x6d4>)
 80014be:	f004 fbfe 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80014c2:	2200      	movs	r2, #0
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	4828      	ldr	r0, [pc, #160]	; (8001568 <letter+0x6d4>)
 80014c8:	f004 fbf9 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80014cc:	2200      	movs	r2, #0
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	4826      	ldr	r0, [pc, #152]	; (800156c <letter+0x6d8>)
 80014d2:	f004 fbf4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80014d6:	2201      	movs	r2, #1
 80014d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014dc:	4823      	ldr	r0, [pc, #140]	; (800156c <letter+0x6d8>)
 80014de:	f004 fbee 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014e8:	4820      	ldr	r0, [pc, #128]	; (800156c <letter+0x6d8>)
 80014ea:	f004 fbe8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f4:	481d      	ldr	r0, [pc, #116]	; (800156c <letter+0x6d8>)
 80014f6:	f004 fbe2 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001500:	4818      	ldr	r0, [pc, #96]	; (8001564 <letter+0x6d0>)
 8001502:	f004 fbdc 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001506:	2002      	movs	r0, #2
 8001508:	f003 fd56 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'E')
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b45      	cmp	r3, #69	; 0x45
 8001510:	d143      	bne.n	800159a <letter+0x706>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001518:	4812      	ldr	r0, [pc, #72]	; (8001564 <letter+0x6d0>)
 800151a:	f004 fbd0 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <letter+0x6d4>)
 8001526:	f004 fbca 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <letter+0x6d4>)
 8001532:	f004 fbc4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001536:	2201      	movs	r2, #1
 8001538:	2140      	movs	r1, #64	; 0x40
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <letter+0x6d4>)
 800153c:	f004 fbbf 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001540:	2200      	movs	r2, #0
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	4808      	ldr	r0, [pc, #32]	; (8001568 <letter+0x6d4>)
 8001546:	f004 fbba 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800154a:	2200      	movs	r2, #0
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	4807      	ldr	r0, [pc, #28]	; (800156c <letter+0x6d8>)
 8001550:	f004 fbb5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <letter+0x6d8>)
 800155c:	f004 fbaf 	bl	8005cbe <HAL_GPIO_WritePin>
 8001560:	e006      	b.n	8001570 <letter+0x6dc>
 8001562:	bf00      	nop
 8001564:	40010c00 	.word	0x40010c00
 8001568:	40011000 	.word	0x40011000
 800156c:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001576:	48d4      	ldr	r0, [pc, #848]	; (80018c8 <letter+0xa34>)
 8001578:	f004 fba1 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800157c:	2200      	movs	r2, #0
 800157e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001582:	48d1      	ldr	r0, [pc, #836]	; (80018c8 <letter+0xa34>)
 8001584:	f004 fb9b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	48cf      	ldr	r0, [pc, #828]	; (80018cc <letter+0xa38>)
 8001590:	f004 fb95 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001594:	2002      	movs	r0, #2
 8001596:	f003 fd0f 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'e')
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	2b65      	cmp	r3, #101	; 0x65
 800159e:	d13b      	bne.n	8001618 <letter+0x784>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a6:	48c9      	ldr	r0, [pc, #804]	; (80018cc <letter+0xa38>)
 80015a8:	f004 fb89 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 80015ac:	2201      	movs	r2, #1
 80015ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b2:	48c7      	ldr	r0, [pc, #796]	; (80018d0 <letter+0xa3c>)
 80015b4:	f004 fb83 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80015b8:	2200      	movs	r2, #0
 80015ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015be:	48c4      	ldr	r0, [pc, #784]	; (80018d0 <letter+0xa3c>)
 80015c0:	f004 fb7d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80015c4:	2201      	movs	r2, #1
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	48c1      	ldr	r0, [pc, #772]	; (80018d0 <letter+0xa3c>)
 80015ca:	f004 fb78 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80015ce:	2200      	movs	r2, #0
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	48bf      	ldr	r0, [pc, #764]	; (80018d0 <letter+0xa3c>)
 80015d4:	f004 fb73 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80015d8:	2200      	movs	r2, #0
 80015da:	2180      	movs	r1, #128	; 0x80
 80015dc:	48ba      	ldr	r0, [pc, #744]	; (80018c8 <letter+0xa34>)
 80015de:	f004 fb6e 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e8:	48b7      	ldr	r0, [pc, #732]	; (80018c8 <letter+0xa34>)
 80015ea:	f004 fb68 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80015ee:	2201      	movs	r2, #1
 80015f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f4:	48b4      	ldr	r0, [pc, #720]	; (80018c8 <letter+0xa34>)
 80015f6:	f004 fb62 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001600:	48b1      	ldr	r0, [pc, #708]	; (80018c8 <letter+0xa34>)
 8001602:	f004 fb5c 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160c:	48af      	ldr	r0, [pc, #700]	; (80018cc <letter+0xa38>)
 800160e:	f004 fb56 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001612:	2002      	movs	r0, #2
 8001614:	f003 fcd0 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'f')
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	2b66      	cmp	r3, #102	; 0x66
 800161c:	d13b      	bne.n	8001696 <letter+0x802>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001624:	48a9      	ldr	r0, [pc, #676]	; (80018cc <letter+0xa38>)
 8001626:	f004 fb4a 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001630:	48a7      	ldr	r0, [pc, #668]	; (80018d0 <letter+0xa3c>)
 8001632:	f004 fb44 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800163c:	48a4      	ldr	r0, [pc, #656]	; (80018d0 <letter+0xa3c>)
 800163e:	f004 fb3e 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001642:	2201      	movs	r2, #1
 8001644:	2140      	movs	r1, #64	; 0x40
 8001646:	48a2      	ldr	r0, [pc, #648]	; (80018d0 <letter+0xa3c>)
 8001648:	f004 fb39 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800164c:	2200      	movs	r2, #0
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	489f      	ldr	r0, [pc, #636]	; (80018d0 <letter+0xa3c>)
 8001652:	f004 fb34 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001656:	2200      	movs	r2, #0
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	489b      	ldr	r0, [pc, #620]	; (80018c8 <letter+0xa34>)
 800165c:	f004 fb2f 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001666:	4898      	ldr	r0, [pc, #608]	; (80018c8 <letter+0xa34>)
 8001668:	f004 fb29 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001672:	4895      	ldr	r0, [pc, #596]	; (80018c8 <letter+0xa34>)
 8001674:	f004 fb23 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167e:	4892      	ldr	r0, [pc, #584]	; (80018c8 <letter+0xa34>)
 8001680:	f004 fb1d 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168a:	4890      	ldr	r0, [pc, #576]	; (80018cc <letter+0xa38>)
 800168c:	f004 fb17 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001690:	2002      	movs	r0, #2
 8001692:	f003 fc91 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'G')
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b47      	cmp	r3, #71	; 0x47
 800169a:	d13b      	bne.n	8001714 <letter+0x880>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a2:	488a      	ldr	r0, [pc, #552]	; (80018cc <letter+0xa38>)
 80016a4:	f004 fb0b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 80016a8:	2201      	movs	r2, #1
 80016aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ae:	4888      	ldr	r0, [pc, #544]	; (80018d0 <letter+0xa3c>)
 80016b0:	f004 fb05 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4885      	ldr	r0, [pc, #532]	; (80018d0 <letter+0xa3c>)
 80016bc:	f004 faff 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	4882      	ldr	r0, [pc, #520]	; (80018d0 <letter+0xa3c>)
 80016c6:	f004 fafa 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80016ca:	2200      	movs	r2, #0
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	4880      	ldr	r0, [pc, #512]	; (80018d0 <letter+0xa3c>)
 80016d0:	f004 faf5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80016d4:	2200      	movs	r2, #0
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	487b      	ldr	r0, [pc, #492]	; (80018c8 <letter+0xa34>)
 80016da:	f004 faf0 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80016de:	2200      	movs	r2, #0
 80016e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016e4:	4878      	ldr	r0, [pc, #480]	; (80018c8 <letter+0xa34>)
 80016e6:	f004 faea 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f0:	4875      	ldr	r0, [pc, #468]	; (80018c8 <letter+0xa34>)
 80016f2:	f004 fae4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016fc:	4872      	ldr	r0, [pc, #456]	; (80018c8 <letter+0xa34>)
 80016fe:	f004 fade 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001708:	4870      	ldr	r0, [pc, #448]	; (80018cc <letter+0xa38>)
 800170a:	f004 fad8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800170e:	2002      	movs	r0, #2
 8001710:	f003 fc52 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'g')
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b67      	cmp	r3, #103	; 0x67
 8001718:	d13b      	bne.n	8001792 <letter+0x8fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001720:	486a      	ldr	r0, [pc, #424]	; (80018cc <letter+0xa38>)
 8001722:	f004 facc 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172c:	4868      	ldr	r0, [pc, #416]	; (80018d0 <letter+0xa3c>)
 800172e:	f004 fac6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001738:	4865      	ldr	r0, [pc, #404]	; (80018d0 <letter+0xa3c>)
 800173a:	f004 fac0 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800173e:	2201      	movs	r2, #1
 8001740:	2140      	movs	r1, #64	; 0x40
 8001742:	4863      	ldr	r0, [pc, #396]	; (80018d0 <letter+0xa3c>)
 8001744:	f004 fabb 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001748:	2200      	movs	r2, #0
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	4860      	ldr	r0, [pc, #384]	; (80018d0 <letter+0xa3c>)
 800174e:	f004 fab6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001752:	2200      	movs	r2, #0
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	485c      	ldr	r0, [pc, #368]	; (80018c8 <letter+0xa34>)
 8001758:	f004 fab1 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800175c:	2201      	movs	r2, #1
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001762:	4859      	ldr	r0, [pc, #356]	; (80018c8 <letter+0xa34>)
 8001764:	f004 faab 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001768:	2201      	movs	r2, #1
 800176a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800176e:	4856      	ldr	r0, [pc, #344]	; (80018c8 <letter+0xa34>)
 8001770:	f004 faa5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001774:	2200      	movs	r2, #0
 8001776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177a:	4853      	ldr	r0, [pc, #332]	; (80018c8 <letter+0xa34>)
 800177c:	f004 fa9f 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001786:	4851      	ldr	r0, [pc, #324]	; (80018cc <letter+0xa38>)
 8001788:	f004 fa99 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800178c:	2002      	movs	r0, #2
 800178e:	f003 fc13 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'I')
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b49      	cmp	r3, #73	; 0x49
 8001796:	d13b      	bne.n	8001810 <letter+0x97c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001798:	2201      	movs	r2, #1
 800179a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179e:	484b      	ldr	r0, [pc, #300]	; (80018cc <letter+0xa38>)
 80017a0:	f004 fa8d 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017aa:	4849      	ldr	r0, [pc, #292]	; (80018d0 <letter+0xa3c>)
 80017ac:	f004 fa87 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b6:	4846      	ldr	r0, [pc, #280]	; (80018d0 <letter+0xa3c>)
 80017b8:	f004 fa81 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80017bc:	2200      	movs	r2, #0
 80017be:	2140      	movs	r1, #64	; 0x40
 80017c0:	4843      	ldr	r0, [pc, #268]	; (80018d0 <letter+0xa3c>)
 80017c2:	f004 fa7c 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80017c6:	2201      	movs	r2, #1
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	4841      	ldr	r0, [pc, #260]	; (80018d0 <letter+0xa3c>)
 80017cc:	f004 fa77 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80017d0:	2200      	movs	r2, #0
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	483c      	ldr	r0, [pc, #240]	; (80018c8 <letter+0xa34>)
 80017d6:	f004 fa72 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e0:	4839      	ldr	r0, [pc, #228]	; (80018c8 <letter+0xa34>)
 80017e2:	f004 fa6c 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ec:	4836      	ldr	r0, [pc, #216]	; (80018c8 <letter+0xa34>)
 80017ee:	f004 fa66 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f8:	4833      	ldr	r0, [pc, #204]	; (80018c8 <letter+0xa34>)
 80017fa:	f004 fa60 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001804:	4831      	ldr	r0, [pc, #196]	; (80018cc <letter+0xa38>)
 8001806:	f004 fa5a 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800180a:	2002      	movs	r0, #2
 800180c:	f003 fbd4 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'i')
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b69      	cmp	r3, #105	; 0x69
 8001814:	d13b      	bne.n	800188e <letter+0x9fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181c:	482b      	ldr	r0, [pc, #172]	; (80018cc <letter+0xa38>)
 800181e:	f004 fa4e 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8001822:	2201      	movs	r2, #1
 8001824:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001828:	4829      	ldr	r0, [pc, #164]	; (80018d0 <letter+0xa3c>)
 800182a:	f004 fa48 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001834:	4826      	ldr	r0, [pc, #152]	; (80018d0 <letter+0xa3c>)
 8001836:	f004 fa42 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800183a:	2200      	movs	r2, #0
 800183c:	2140      	movs	r1, #64	; 0x40
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <letter+0xa3c>)
 8001840:	f004 fa3d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001844:	2201      	movs	r2, #1
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	4821      	ldr	r0, [pc, #132]	; (80018d0 <letter+0xa3c>)
 800184a:	f004 fa38 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800184e:	2200      	movs	r2, #0
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	481d      	ldr	r0, [pc, #116]	; (80018c8 <letter+0xa34>)
 8001854:	f004 fa33 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800185e:	481a      	ldr	r0, [pc, #104]	; (80018c8 <letter+0xa34>)
 8001860:	f004 fa2d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001864:	2201      	movs	r2, #1
 8001866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186a:	4817      	ldr	r0, [pc, #92]	; (80018c8 <letter+0xa34>)
 800186c:	f004 fa27 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001876:	4814      	ldr	r0, [pc, #80]	; (80018c8 <letter+0xa34>)
 8001878:	f004 fa21 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	4812      	ldr	r0, [pc, #72]	; (80018cc <letter+0xa38>)
 8001884:	f004 fa1b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001888:	2002      	movs	r0, #2
 800188a:	f003 fb95 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'l')
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b6c      	cmp	r3, #108	; 0x6c
 8001892:	d142      	bne.n	800191a <letter+0xa86>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <letter+0xa38>)
 800189c:	f004 fa0f 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018a6:	480a      	ldr	r0, [pc, #40]	; (80018d0 <letter+0xa3c>)
 80018a8:	f004 fa09 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <letter+0xa3c>)
 80018b4:	f004 fa03 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80018b8:	2201      	movs	r2, #1
 80018ba:	2140      	movs	r1, #64	; 0x40
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <letter+0xa3c>)
 80018be:	f004 f9fe 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80018c2:	2201      	movs	r2, #1
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	e005      	b.n	80018d4 <letter+0xa40>
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	40011000 	.word	0x40011000
 80018d4:	48d4      	ldr	r0, [pc, #848]	; (8001c28 <letter+0xd94>)
 80018d6:	f004 f9f2 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80018da:	2200      	movs	r2, #0
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	48d3      	ldr	r0, [pc, #844]	; (8001c2c <letter+0xd98>)
 80018e0:	f004 f9ed 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ea:	48d0      	ldr	r0, [pc, #832]	; (8001c2c <letter+0xd98>)
 80018ec:	f004 f9e7 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	48cd      	ldr	r0, [pc, #820]	; (8001c2c <letter+0xd98>)
 80018f8:	f004 f9e1 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001902:	48ca      	ldr	r0, [pc, #808]	; (8001c2c <letter+0xd98>)
 8001904:	f004 f9db 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190e:	48c8      	ldr	r0, [pc, #800]	; (8001c30 <letter+0xd9c>)
 8001910:	f004 f9d5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001914:	2002      	movs	r0, #2
 8001916:	f003 fb4f 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'm')
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b6d      	cmp	r3, #109	; 0x6d
 800191e:	d13b      	bne.n	8001998 <letter+0xb04>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001926:	48c2      	ldr	r0, [pc, #776]	; (8001c30 <letter+0xd9c>)
 8001928:	f004 f9c9 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001932:	48bd      	ldr	r0, [pc, #756]	; (8001c28 <letter+0xd94>)
 8001934:	f004 f9c3 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193e:	48ba      	ldr	r0, [pc, #744]	; (8001c28 <letter+0xd94>)
 8001940:	f004 f9bd 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001944:	2201      	movs	r2, #1
 8001946:	2140      	movs	r1, #64	; 0x40
 8001948:	48b7      	ldr	r0, [pc, #732]	; (8001c28 <letter+0xd94>)
 800194a:	f004 f9b8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800194e:	2201      	movs	r2, #1
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	48b5      	ldr	r0, [pc, #724]	; (8001c28 <letter+0xd94>)
 8001954:	f004 f9b3 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001958:	2200      	movs	r2, #0
 800195a:	2180      	movs	r1, #128	; 0x80
 800195c:	48b3      	ldr	r0, [pc, #716]	; (8001c2c <letter+0xd98>)
 800195e:	f004 f9ae 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001968:	48b0      	ldr	r0, [pc, #704]	; (8001c2c <letter+0xd98>)
 800196a:	f004 f9a8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001974:	48ad      	ldr	r0, [pc, #692]	; (8001c2c <letter+0xd98>)
 8001976:	f004 f9a2 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800197a:	2200      	movs	r2, #0
 800197c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001980:	48aa      	ldr	r0, [pc, #680]	; (8001c2c <letter+0xd98>)
 8001982:	f004 f99c 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198c:	48a8      	ldr	r0, [pc, #672]	; (8001c30 <letter+0xd9c>)
 800198e:	f004 f996 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001992:	2002      	movs	r0, #2
 8001994:	f003 fb10 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'N')
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b4e      	cmp	r3, #78	; 0x4e
 800199c:	d13b      	bne.n	8001a16 <letter+0xb82>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019a4:	48a2      	ldr	r0, [pc, #648]	; (8001c30 <letter+0xd9c>)
 80019a6:	f004 f98a 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b0:	489d      	ldr	r0, [pc, #628]	; (8001c28 <letter+0xd94>)
 80019b2:	f004 f984 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019bc:	489a      	ldr	r0, [pc, #616]	; (8001c28 <letter+0xd94>)
 80019be:	f004 f97e 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80019c2:	2201      	movs	r2, #1
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	4898      	ldr	r0, [pc, #608]	; (8001c28 <letter+0xd94>)
 80019c8:	f004 f979 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80019cc:	2201      	movs	r2, #1
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	4895      	ldr	r0, [pc, #596]	; (8001c28 <letter+0xd94>)
 80019d2:	f004 f974 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80019d6:	2200      	movs	r2, #0
 80019d8:	2180      	movs	r1, #128	; 0x80
 80019da:	4894      	ldr	r0, [pc, #592]	; (8001c2c <letter+0xd98>)
 80019dc:	f004 f96f 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e6:	4891      	ldr	r0, [pc, #580]	; (8001c2c <letter+0xd98>)
 80019e8:	f004 f969 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80019ec:	2201      	movs	r2, #1
 80019ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f2:	488e      	ldr	r0, [pc, #568]	; (8001c2c <letter+0xd98>)
 80019f4:	f004 f963 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80019f8:	2200      	movs	r2, #0
 80019fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fe:	488b      	ldr	r0, [pc, #556]	; (8001c2c <letter+0xd98>)
 8001a00:	f004 f95d 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a0a:	4889      	ldr	r0, [pc, #548]	; (8001c30 <letter+0xd9c>)
 8001a0c:	f004 f957 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001a10:	2002      	movs	r0, #2
 8001a12:	f003 fad1 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'n')
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b6e      	cmp	r3, #110	; 0x6e
 8001a1a:	d13b      	bne.n	8001a94 <letter+0xc00>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a22:	4883      	ldr	r0, [pc, #524]	; (8001c30 <letter+0xd9c>)
 8001a24:	f004 f94b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a2e:	487e      	ldr	r0, [pc, #504]	; (8001c28 <letter+0xd94>)
 8001a30:	f004 f945 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3a:	487b      	ldr	r0, [pc, #492]	; (8001c28 <letter+0xd94>)
 8001a3c:	f004 f93f 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001a40:	2201      	movs	r2, #1
 8001a42:	2140      	movs	r1, #64	; 0x40
 8001a44:	4878      	ldr	r0, [pc, #480]	; (8001c28 <letter+0xd94>)
 8001a46:	f004 f93a 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2180      	movs	r1, #128	; 0x80
 8001a4e:	4876      	ldr	r0, [pc, #472]	; (8001c28 <letter+0xd94>)
 8001a50:	f004 f935 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001a54:	2200      	movs	r2, #0
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	4874      	ldr	r0, [pc, #464]	; (8001c2c <letter+0xd98>)
 8001a5a:	f004 f930 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a64:	4871      	ldr	r0, [pc, #452]	; (8001c2c <letter+0xd98>)
 8001a66:	f004 f92a 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a70:	486e      	ldr	r0, [pc, #440]	; (8001c2c <letter+0xd98>)
 8001a72:	f004 f924 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001a76:	2200      	movs	r2, #0
 8001a78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a7c:	486b      	ldr	r0, [pc, #428]	; (8001c2c <letter+0xd98>)
 8001a7e:	f004 f91e 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a88:	4869      	ldr	r0, [pc, #420]	; (8001c30 <letter+0xd9c>)
 8001a8a:	f004 f918 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f003 fa92 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'O')
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2b4f      	cmp	r3, #79	; 0x4f
 8001a98:	d13b      	bne.n	8001b12 <letter+0xc7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa0:	4863      	ldr	r0, [pc, #396]	; (8001c30 <letter+0xd9c>)
 8001aa2:	f004 f90c 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aac:	485e      	ldr	r0, [pc, #376]	; (8001c28 <letter+0xd94>)
 8001aae:	f004 f906 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab8:	485b      	ldr	r0, [pc, #364]	; (8001c28 <letter+0xd94>)
 8001aba:	f004 f900 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2140      	movs	r1, #64	; 0x40
 8001ac2:	4859      	ldr	r0, [pc, #356]	; (8001c28 <letter+0xd94>)
 8001ac4:	f004 f8fb 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2180      	movs	r1, #128	; 0x80
 8001acc:	4856      	ldr	r0, [pc, #344]	; (8001c28 <letter+0xd94>)
 8001ace:	f004 f8f6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2180      	movs	r1, #128	; 0x80
 8001ad6:	4855      	ldr	r0, [pc, #340]	; (8001c2c <letter+0xd98>)
 8001ad8:	f004 f8f1 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae2:	4852      	ldr	r0, [pc, #328]	; (8001c2c <letter+0xd98>)
 8001ae4:	f004 f8eb 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aee:	484f      	ldr	r0, [pc, #316]	; (8001c2c <letter+0xd98>)
 8001af0:	f004 f8e5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001af4:	2200      	movs	r2, #0
 8001af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afa:	484c      	ldr	r0, [pc, #304]	; (8001c2c <letter+0xd98>)
 8001afc:	f004 f8df 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001b00:	2200      	movs	r2, #0
 8001b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b06:	484a      	ldr	r0, [pc, #296]	; (8001c30 <letter+0xd9c>)
 8001b08:	f004 f8d9 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f003 fa53 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'o')
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	2b6f      	cmp	r3, #111	; 0x6f
 8001b16:	d13b      	bne.n	8001b90 <letter+0xcfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	4844      	ldr	r0, [pc, #272]	; (8001c30 <letter+0xd9c>)
 8001b20:	f004 f8cd 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2a:	483f      	ldr	r0, [pc, #252]	; (8001c28 <letter+0xd94>)
 8001b2c:	f004 f8c7 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b36:	483c      	ldr	r0, [pc, #240]	; (8001c28 <letter+0xd94>)
 8001b38:	f004 f8c1 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2140      	movs	r1, #64	; 0x40
 8001b40:	4839      	ldr	r0, [pc, #228]	; (8001c28 <letter+0xd94>)
 8001b42:	f004 f8bc 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001b46:	2201      	movs	r2, #1
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	4837      	ldr	r0, [pc, #220]	; (8001c28 <letter+0xd94>)
 8001b4c:	f004 f8b7 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001b50:	2200      	movs	r2, #0
 8001b52:	2180      	movs	r1, #128	; 0x80
 8001b54:	4835      	ldr	r0, [pc, #212]	; (8001c2c <letter+0xd98>)
 8001b56:	f004 f8b2 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b60:	4832      	ldr	r0, [pc, #200]	; (8001c2c <letter+0xd98>)
 8001b62:	f004 f8ac 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001b66:	2201      	movs	r2, #1
 8001b68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6c:	482f      	ldr	r0, [pc, #188]	; (8001c2c <letter+0xd98>)
 8001b6e:	f004 f8a6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001b72:	2200      	movs	r2, #0
 8001b74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b78:	482c      	ldr	r0, [pc, #176]	; (8001c2c <letter+0xd98>)
 8001b7a:	f004 f8a0 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b84:	482a      	ldr	r0, [pc, #168]	; (8001c30 <letter+0xd9c>)
 8001b86:	f004 f89a 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f003 fa14 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'P')
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2b50      	cmp	r3, #80	; 0x50
 8001b94:	d13b      	bne.n	8001c0e <letter+0xd7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b9c:	4824      	ldr	r0, [pc, #144]	; (8001c30 <letter+0xd9c>)
 8001b9e:	f004 f88e 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba8:	481f      	ldr	r0, [pc, #124]	; (8001c28 <letter+0xd94>)
 8001baa:	f004 f888 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bb4:	481c      	ldr	r0, [pc, #112]	; (8001c28 <letter+0xd94>)
 8001bb6:	f004 f882 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2140      	movs	r1, #64	; 0x40
 8001bbe:	481a      	ldr	r0, [pc, #104]	; (8001c28 <letter+0xd94>)
 8001bc0:	f004 f87d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2180      	movs	r1, #128	; 0x80
 8001bc8:	4817      	ldr	r0, [pc, #92]	; (8001c28 <letter+0xd94>)
 8001bca:	f004 f878 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	4816      	ldr	r0, [pc, #88]	; (8001c2c <letter+0xd98>)
 8001bd4:	f004 f873 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bde:	4813      	ldr	r0, [pc, #76]	; (8001c2c <letter+0xd98>)
 8001be0:	f004 f86d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bea:	4810      	ldr	r0, [pc, #64]	; (8001c2c <letter+0xd98>)
 8001bec:	f004 f867 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf6:	480d      	ldr	r0, [pc, #52]	; (8001c2c <letter+0xd98>)
 8001bf8:	f004 f861 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c02:	480b      	ldr	r0, [pc, #44]	; (8001c30 <letter+0xd9c>)
 8001c04:	f004 f85b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f003 f9d5 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'Q')
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b51      	cmp	r3, #81	; 0x51
 8001c12:	d142      	bne.n	8001c9a <letter+0xe06>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001c14:	2201      	movs	r2, #1
 8001c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <letter+0xd9c>)
 8001c1c:	f004 f84f 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c26:	e005      	b.n	8001c34 <letter+0xda0>
 8001c28:	40011000 	.word	0x40011000
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	40010c00 	.word	0x40010c00
 8001c34:	48d5      	ldr	r0, [pc, #852]	; (8001f8c <letter+0x10f8>)
 8001c36:	f004 f842 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c40:	48d2      	ldr	r0, [pc, #840]	; (8001f8c <letter+0x10f8>)
 8001c42:	f004 f83c 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001c46:	2200      	movs	r2, #0
 8001c48:	2140      	movs	r1, #64	; 0x40
 8001c4a:	48d0      	ldr	r0, [pc, #832]	; (8001f8c <letter+0x10f8>)
 8001c4c:	f004 f837 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001c50:	2200      	movs	r2, #0
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	48cd      	ldr	r0, [pc, #820]	; (8001f8c <letter+0x10f8>)
 8001c56:	f004 f832 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2180      	movs	r1, #128	; 0x80
 8001c5e:	48cc      	ldr	r0, [pc, #816]	; (8001f90 <letter+0x10fc>)
 8001c60:	f004 f82d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c6a:	48c9      	ldr	r0, [pc, #804]	; (8001f90 <letter+0x10fc>)
 8001c6c:	f004 f827 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001c70:	2201      	movs	r2, #1
 8001c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c76:	48c6      	ldr	r0, [pc, #792]	; (8001f90 <letter+0x10fc>)
 8001c78:	f004 f821 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c82:	48c3      	ldr	r0, [pc, #780]	; (8001f90 <letter+0x10fc>)
 8001c84:	f004 f81b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8e:	48c1      	ldr	r0, [pc, #772]	; (8001f94 <letter+0x1100>)
 8001c90:	f004 f815 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001c94:	2002      	movs	r0, #2
 8001c96:	f003 f98f 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'r')
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b72      	cmp	r3, #114	; 0x72
 8001c9e:	d13b      	bne.n	8001d18 <letter+0xe84>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca6:	48bb      	ldr	r0, [pc, #748]	; (8001f94 <letter+0x1100>)
 8001ca8:	f004 f809 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb2:	48b6      	ldr	r0, [pc, #728]	; (8001f8c <letter+0x10f8>)
 8001cb4:	f004 f803 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cbe:	48b3      	ldr	r0, [pc, #716]	; (8001f8c <letter+0x10f8>)
 8001cc0:	f003 fffd 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2140      	movs	r1, #64	; 0x40
 8001cc8:	48b0      	ldr	r0, [pc, #704]	; (8001f8c <letter+0x10f8>)
 8001cca:	f003 fff8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	48ae      	ldr	r0, [pc, #696]	; (8001f8c <letter+0x10f8>)
 8001cd4:	f003 fff3 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	48ac      	ldr	r0, [pc, #688]	; (8001f90 <letter+0x10fc>)
 8001cde:	f003 ffee 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ce8:	48a9      	ldr	r0, [pc, #676]	; (8001f90 <letter+0x10fc>)
 8001cea:	f003 ffe8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf4:	48a6      	ldr	r0, [pc, #664]	; (8001f90 <letter+0x10fc>)
 8001cf6:	f003 ffe2 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d00:	48a3      	ldr	r0, [pc, #652]	; (8001f90 <letter+0x10fc>)
 8001d02:	f003 ffdc 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0c:	48a1      	ldr	r0, [pc, #644]	; (8001f94 <letter+0x1100>)
 8001d0e:	f003 ffd6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001d12:	2002      	movs	r0, #2
 8001d14:	f003 f950 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 's')
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	2b73      	cmp	r3, #115	; 0x73
 8001d1c:	d13b      	bne.n	8001d96 <letter+0xf02>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d24:	489b      	ldr	r0, [pc, #620]	; (8001f94 <letter+0x1100>)
 8001d26:	f003 ffca 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d30:	4896      	ldr	r0, [pc, #600]	; (8001f8c <letter+0x10f8>)
 8001d32:	f003 ffc4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3c:	4893      	ldr	r0, [pc, #588]	; (8001f8c <letter+0x10f8>)
 8001d3e:	f003 ffbe 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001d42:	2200      	movs	r2, #0
 8001d44:	2140      	movs	r1, #64	; 0x40
 8001d46:	4891      	ldr	r0, [pc, #580]	; (8001f8c <letter+0x10f8>)
 8001d48:	f003 ffb9 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	488e      	ldr	r0, [pc, #568]	; (8001f8c <letter+0x10f8>)
 8001d52:	f003 ffb4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001d56:	2201      	movs	r2, #1
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	488d      	ldr	r0, [pc, #564]	; (8001f90 <letter+0x10fc>)
 8001d5c:	f003 ffaf 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001d60:	2201      	movs	r2, #1
 8001d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d66:	488a      	ldr	r0, [pc, #552]	; (8001f90 <letter+0x10fc>)
 8001d68:	f003 ffa9 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d72:	4887      	ldr	r0, [pc, #540]	; (8001f90 <letter+0x10fc>)
 8001d74:	f003 ffa3 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7e:	4884      	ldr	r0, [pc, #528]	; (8001f90 <letter+0x10fc>)
 8001d80:	f003 ff9d 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d8a:	4882      	ldr	r0, [pc, #520]	; (8001f94 <letter+0x1100>)
 8001d8c:	f003 ff97 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001d90:	2002      	movs	r0, #2
 8001d92:	f003 f911 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'T')
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b54      	cmp	r3, #84	; 0x54
 8001d9a:	d13b      	bne.n	8001e14 <letter+0xf80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da2:	487c      	ldr	r0, [pc, #496]	; (8001f94 <letter+0x1100>)
 8001da4:	f003 ff8b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dae:	4877      	ldr	r0, [pc, #476]	; (8001f8c <letter+0x10f8>)
 8001db0:	f003 ff85 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001db4:	2200      	movs	r2, #0
 8001db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dba:	4874      	ldr	r0, [pc, #464]	; (8001f8c <letter+0x10f8>)
 8001dbc:	f003 ff7f 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2140      	movs	r1, #64	; 0x40
 8001dc4:	4871      	ldr	r0, [pc, #452]	; (8001f8c <letter+0x10f8>)
 8001dc6:	f003 ff7a 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	486f      	ldr	r0, [pc, #444]	; (8001f8c <letter+0x10f8>)
 8001dd0:	f003 ff75 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2180      	movs	r1, #128	; 0x80
 8001dd8:	486d      	ldr	r0, [pc, #436]	; (8001f90 <letter+0x10fc>)
 8001dda:	f003 ff70 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001de4:	486a      	ldr	r0, [pc, #424]	; (8001f90 <letter+0x10fc>)
 8001de6:	f003 ff6a 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df0:	4867      	ldr	r0, [pc, #412]	; (8001f90 <letter+0x10fc>)
 8001df2:	f003 ff64 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dfc:	4864      	ldr	r0, [pc, #400]	; (8001f90 <letter+0x10fc>)
 8001dfe:	f003 ff5e 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e08:	4862      	ldr	r0, [pc, #392]	; (8001f94 <letter+0x1100>)
 8001e0a:	f003 ff58 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001e0e:	2002      	movs	r0, #2
 8001e10:	f003 f8d2 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 't')
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b74      	cmp	r3, #116	; 0x74
 8001e18:	d13b      	bne.n	8001e92 <letter+0xffe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e20:	485c      	ldr	r0, [pc, #368]	; (8001f94 <letter+0x1100>)
 8001e22:	f003 ff4c 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e2c:	4857      	ldr	r0, [pc, #348]	; (8001f8c <letter+0x10f8>)
 8001e2e:	f003 ff46 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e38:	4854      	ldr	r0, [pc, #336]	; (8001f8c <letter+0x10f8>)
 8001e3a:	f003 ff40 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2140      	movs	r1, #64	; 0x40
 8001e42:	4852      	ldr	r0, [pc, #328]	; (8001f8c <letter+0x10f8>)
 8001e44:	f003 ff3b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2180      	movs	r1, #128	; 0x80
 8001e4c:	484f      	ldr	r0, [pc, #316]	; (8001f8c <letter+0x10f8>)
 8001e4e:	f003 ff36 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001e52:	2201      	movs	r2, #1
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	484e      	ldr	r0, [pc, #312]	; (8001f90 <letter+0x10fc>)
 8001e58:	f003 ff31 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e62:	484b      	ldr	r0, [pc, #300]	; (8001f90 <letter+0x10fc>)
 8001e64:	f003 ff2b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6e:	4848      	ldr	r0, [pc, #288]	; (8001f90 <letter+0x10fc>)
 8001e70:	f003 ff25 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e7a:	4845      	ldr	r0, [pc, #276]	; (8001f90 <letter+0x10fc>)
 8001e7c:	f003 ff1f 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001e80:	2200      	movs	r2, #0
 8001e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e86:	4843      	ldr	r0, [pc, #268]	; (8001f94 <letter+0x1100>)
 8001e88:	f003 ff19 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f003 f893 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'u')
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	2b75      	cmp	r3, #117	; 0x75
 8001e96:	d13b      	bne.n	8001f10 <letter+0x107c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e9e:	483d      	ldr	r0, [pc, #244]	; (8001f94 <letter+0x1100>)
 8001ea0:	f003 ff0d 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eaa:	4838      	ldr	r0, [pc, #224]	; (8001f8c <letter+0x10f8>)
 8001eac:	f003 ff07 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb6:	4835      	ldr	r0, [pc, #212]	; (8001f8c <letter+0x10f8>)
 8001eb8:	f003 ff01 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2140      	movs	r1, #64	; 0x40
 8001ec0:	4832      	ldr	r0, [pc, #200]	; (8001f8c <letter+0x10f8>)
 8001ec2:	f003 fefc 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2180      	movs	r1, #128	; 0x80
 8001eca:	4830      	ldr	r0, [pc, #192]	; (8001f8c <letter+0x10f8>)
 8001ecc:	f003 fef7 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	482e      	ldr	r0, [pc, #184]	; (8001f90 <letter+0x10fc>)
 8001ed6:	f003 fef2 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee0:	482b      	ldr	r0, [pc, #172]	; (8001f90 <letter+0x10fc>)
 8001ee2:	f003 feec 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eec:	4828      	ldr	r0, [pc, #160]	; (8001f90 <letter+0x10fc>)
 8001eee:	f003 fee6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef8:	4825      	ldr	r0, [pc, #148]	; (8001f90 <letter+0x10fc>)
 8001efa:	f003 fee0 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f04:	4823      	ldr	r0, [pc, #140]	; (8001f94 <letter+0x1100>)
 8001f06:	f003 feda 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	f003 f854 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'v')
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	2b76      	cmp	r3, #118	; 0x76
 8001f14:	d142      	bne.n	8001f9c <letter+0x1108>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1c:	481d      	ldr	r0, [pc, #116]	; (8001f94 <letter+0x1100>)
 8001f1e:	f003 fece 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f28:	4818      	ldr	r0, [pc, #96]	; (8001f8c <letter+0x10f8>)
 8001f2a:	f003 fec8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f34:	4815      	ldr	r0, [pc, #84]	; (8001f8c <letter+0x10f8>)
 8001f36:	f003 fec2 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2140      	movs	r1, #64	; 0x40
 8001f3e:	4813      	ldr	r0, [pc, #76]	; (8001f8c <letter+0x10f8>)
 8001f40:	f003 febd 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001f44:	2200      	movs	r2, #0
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	4810      	ldr	r0, [pc, #64]	; (8001f8c <letter+0x10f8>)
 8001f4a:	f003 feb8 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001f4e:	2201      	movs	r2, #1
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	480f      	ldr	r0, [pc, #60]	; (8001f90 <letter+0x10fc>)
 8001f54:	f003 feb3 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f5e:	480c      	ldr	r0, [pc, #48]	; (8001f90 <letter+0x10fc>)
 8001f60:	f003 fead 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001f64:	2201      	movs	r2, #1
 8001f66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6a:	4809      	ldr	r0, [pc, #36]	; (8001f90 <letter+0x10fc>)
 8001f6c:	f003 fea7 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001f70:	2200      	movs	r2, #0
 8001f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f76:	4806      	ldr	r0, [pc, #24]	; (8001f90 <letter+0x10fc>)
 8001f78:	f003 fea1 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f82:	4804      	ldr	r0, [pc, #16]	; (8001f94 <letter+0x1100>)
 8001f84:	f003 fe9b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	e005      	b.n	8001f98 <letter+0x1104>
 8001f8c:	40011000 	.word	0x40011000
 8001f90:	40010800 	.word	0x40010800
 8001f94:	40010c00 	.word	0x40010c00
 8001f98:	f003 f80e 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'W')
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b57      	cmp	r3, #87	; 0x57
 8001fa0:	d13b      	bne.n	800201a <letter+0x1186>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa8:	48d5      	ldr	r0, [pc, #852]	; (8002300 <letter+0x146c>)
 8001faa:	f003 fe88 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb4:	48d3      	ldr	r0, [pc, #844]	; (8002304 <letter+0x1470>)
 8001fb6:	f003 fe82 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc0:	48d0      	ldr	r0, [pc, #832]	; (8002304 <letter+0x1470>)
 8001fc2:	f003 fe7c 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2140      	movs	r1, #64	; 0x40
 8001fca:	48ce      	ldr	r0, [pc, #824]	; (8002304 <letter+0x1470>)
 8001fcc:	f003 fe77 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	2180      	movs	r1, #128	; 0x80
 8001fd4:	48cb      	ldr	r0, [pc, #812]	; (8002304 <letter+0x1470>)
 8001fd6:	f003 fe72 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001fda:	2201      	movs	r2, #1
 8001fdc:	2180      	movs	r1, #128	; 0x80
 8001fde:	48ca      	ldr	r0, [pc, #808]	; (8002308 <letter+0x1474>)
 8001fe0:	f003 fe6d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fea:	48c7      	ldr	r0, [pc, #796]	; (8002308 <letter+0x1474>)
 8001fec:	f003 fe67 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff6:	48c4      	ldr	r0, [pc, #784]	; (8002308 <letter+0x1474>)
 8001ff8:	f003 fe61 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002002:	48c1      	ldr	r0, [pc, #772]	; (8002308 <letter+0x1474>)
 8002004:	f003 fe5b 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800200e:	48bc      	ldr	r0, [pc, #752]	; (8002300 <letter+0x146c>)
 8002010:	f003 fe55 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002014:	2002      	movs	r0, #2
 8002016:	f002 ffcf 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'w')
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2b77      	cmp	r3, #119	; 0x77
 800201e:	d13b      	bne.n	8002098 <letter+0x1204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002026:	48b6      	ldr	r0, [pc, #728]	; (8002300 <letter+0x146c>)
 8002028:	f003 fe49 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002032:	48b4      	ldr	r0, [pc, #720]	; (8002304 <letter+0x1470>)
 8002034:	f003 fe43 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002038:	2201      	movs	r2, #1
 800203a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203e:	48b1      	ldr	r0, [pc, #708]	; (8002304 <letter+0x1470>)
 8002040:	f003 fe3d 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002044:	2201      	movs	r2, #1
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	48ae      	ldr	r0, [pc, #696]	; (8002304 <letter+0x1470>)
 800204a:	f003 fe38 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800204e:	2200      	movs	r2, #0
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	48ac      	ldr	r0, [pc, #688]	; (8002304 <letter+0x1470>)
 8002054:	f003 fe33 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002058:	2201      	movs	r2, #1
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	48aa      	ldr	r0, [pc, #680]	; (8002308 <letter+0x1474>)
 800205e:	f003 fe2e 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002062:	2201      	movs	r2, #1
 8002064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002068:	48a7      	ldr	r0, [pc, #668]	; (8002308 <letter+0x1474>)
 800206a:	f003 fe28 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800206e:	2201      	movs	r2, #1
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	48a4      	ldr	r0, [pc, #656]	; (8002308 <letter+0x1474>)
 8002076:	f003 fe22 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002080:	48a1      	ldr	r0, [pc, #644]	; (8002308 <letter+0x1474>)
 8002082:	f003 fe1c 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208c:	489c      	ldr	r0, [pc, #624]	; (8002300 <letter+0x146c>)
 800208e:	f003 fe16 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002092:	2002      	movs	r0, #2
 8002094:	f002 ff90 	bl	8004fb8 <HAL_Delay>
	}
	if(L == 'y')
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b79      	cmp	r3, #121	; 0x79
 800209c:	d13b      	bne.n	8002116 <letter+0x1282>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800209e:	2201      	movs	r2, #1
 80020a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a4:	4896      	ldr	r0, [pc, #600]	; (8002300 <letter+0x146c>)
 80020a6:	f003 fe0a 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 80020aa:	2201      	movs	r2, #1
 80020ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b0:	4894      	ldr	r0, [pc, #592]	; (8002304 <letter+0x1470>)
 80020b2:	f003 fe04 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020bc:	4891      	ldr	r0, [pc, #580]	; (8002304 <letter+0x1470>)
 80020be:	f003 fdfe 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80020c2:	2200      	movs	r2, #0
 80020c4:	2140      	movs	r1, #64	; 0x40
 80020c6:	488f      	ldr	r0, [pc, #572]	; (8002304 <letter+0x1470>)
 80020c8:	f003 fdf9 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80020cc:	2201      	movs	r2, #1
 80020ce:	2180      	movs	r1, #128	; 0x80
 80020d0:	488c      	ldr	r0, [pc, #560]	; (8002304 <letter+0x1470>)
 80020d2:	f003 fdf4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80020d6:	2201      	movs	r2, #1
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	488b      	ldr	r0, [pc, #556]	; (8002308 <letter+0x1474>)
 80020dc:	f003 fdef 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80020e0:	2201      	movs	r2, #1
 80020e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e6:	4888      	ldr	r0, [pc, #544]	; (8002308 <letter+0x1474>)
 80020e8:	f003 fde9 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f2:	4885      	ldr	r0, [pc, #532]	; (8002308 <letter+0x1474>)
 80020f4:	f003 fde3 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fe:	4882      	ldr	r0, [pc, #520]	; (8002308 <letter+0x1474>)
 8002100:	f003 fddd 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002104:	2200      	movs	r2, #0
 8002106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800210a:	487d      	ldr	r0, [pc, #500]	; (8002300 <letter+0x146c>)
 800210c:	f003 fdd7 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002110:	2002      	movs	r0, #2
 8002112:	f002 ff51 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '0')
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b30      	cmp	r3, #48	; 0x30
 800211a:	d13b      	bne.n	8002194 <letter+0x1300>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800211c:	2201      	movs	r2, #1
 800211e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002122:	4877      	ldr	r0, [pc, #476]	; (8002300 <letter+0x146c>)
 8002124:	f003 fdcb 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800212e:	4875      	ldr	r0, [pc, #468]	; (8002304 <letter+0x1470>)
 8002130:	f003 fdc5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002134:	2200      	movs	r2, #0
 8002136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213a:	4872      	ldr	r0, [pc, #456]	; (8002304 <letter+0x1470>)
 800213c:	f003 fdbf 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002140:	2200      	movs	r2, #0
 8002142:	2140      	movs	r1, #64	; 0x40
 8002144:	486f      	ldr	r0, [pc, #444]	; (8002304 <letter+0x1470>)
 8002146:	f003 fdba 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800214a:	2200      	movs	r2, #0
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	486d      	ldr	r0, [pc, #436]	; (8002304 <letter+0x1470>)
 8002150:	f003 fdb5 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002154:	2201      	movs	r2, #1
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	486b      	ldr	r0, [pc, #428]	; (8002308 <letter+0x1474>)
 800215a:	f003 fdb0 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002164:	4868      	ldr	r0, [pc, #416]	; (8002308 <letter+0x1474>)
 8002166:	f003 fdaa 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002170:	4865      	ldr	r0, [pc, #404]	; (8002308 <letter+0x1474>)
 8002172:	f003 fda4 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800217c:	4862      	ldr	r0, [pc, #392]	; (8002308 <letter+0x1474>)
 800217e:	f003 fd9e 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002182:	2200      	movs	r2, #0
 8002184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002188:	485d      	ldr	r0, [pc, #372]	; (8002300 <letter+0x146c>)
 800218a:	f003 fd98 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800218e:	2002      	movs	r0, #2
 8002190:	f002 ff12 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '1')
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b31      	cmp	r3, #49	; 0x31
 8002198:	d13b      	bne.n	8002212 <letter+0x137e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a0:	4857      	ldr	r0, [pc, #348]	; (8002300 <letter+0x146c>)
 80021a2:	f003 fd8c 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ac:	4855      	ldr	r0, [pc, #340]	; (8002304 <letter+0x1470>)
 80021ae:	f003 fd86 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b8:	4852      	ldr	r0, [pc, #328]	; (8002304 <letter+0x1470>)
 80021ba:	f003 fd80 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80021be:	2200      	movs	r2, #0
 80021c0:	2140      	movs	r1, #64	; 0x40
 80021c2:	4850      	ldr	r0, [pc, #320]	; (8002304 <letter+0x1470>)
 80021c4:	f003 fd7b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80021c8:	2200      	movs	r2, #0
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	484d      	ldr	r0, [pc, #308]	; (8002304 <letter+0x1470>)
 80021ce:	f003 fd76 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80021d2:	2201      	movs	r2, #1
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	484c      	ldr	r0, [pc, #304]	; (8002308 <letter+0x1474>)
 80021d8:	f003 fd71 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021e2:	4849      	ldr	r0, [pc, #292]	; (8002308 <letter+0x1474>)
 80021e4:	f003 fd6b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ee:	4846      	ldr	r0, [pc, #280]	; (8002308 <letter+0x1474>)
 80021f0:	f003 fd65 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80021f4:	2200      	movs	r2, #0
 80021f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fa:	4843      	ldr	r0, [pc, #268]	; (8002308 <letter+0x1474>)
 80021fc:	f003 fd5f 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002206:	483e      	ldr	r0, [pc, #248]	; (8002300 <letter+0x146c>)
 8002208:	f003 fd59 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800220c:	2002      	movs	r0, #2
 800220e:	f002 fed3 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '2')
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b32      	cmp	r3, #50	; 0x32
 8002216:	d138      	bne.n	800228a <letter+0x13f6>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002218:	2201      	movs	r2, #1
 800221a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800221e:	4838      	ldr	r0, [pc, #224]	; (8002300 <letter+0x146c>)
 8002220:	f003 fd4d 	bl	8005cbe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 8002224:	2200      	movs	r2, #0
 8002226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800222a:	4836      	ldr	r0, [pc, #216]	; (8002304 <letter+0x1470>)
 800222c:	f003 fd47 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002230:	2201      	movs	r2, #1
 8002232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002236:	4833      	ldr	r0, [pc, #204]	; (8002304 <letter+0x1470>)
 8002238:	f003 fd41 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800223c:	2200      	movs	r2, #0
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	4830      	ldr	r0, [pc, #192]	; (8002304 <letter+0x1470>)
 8002242:	f003 fd3c 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002246:	2200      	movs	r2, #0
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	482e      	ldr	r0, [pc, #184]	; (8002304 <letter+0x1470>)
 800224c:	f003 fd37 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002250:	2201      	movs	r2, #1
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	482c      	ldr	r0, [pc, #176]	; (8002308 <letter+0x1474>)
 8002256:	f003 fd32 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002260:	4829      	ldr	r0, [pc, #164]	; (8002308 <letter+0x1474>)
 8002262:	f003 fd2c 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4826      	ldr	r0, [pc, #152]	; (8002308 <letter+0x1474>)
 800226e:	f003 fd26 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4823      	ldr	r0, [pc, #140]	; (8002308 <letter+0x1474>)
 800227a:	f003 fd20 	bl	8005cbe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002284:	481e      	ldr	r0, [pc, #120]	; (8002300 <letter+0x146c>)
 8002286:	f003 fd1a 	bl	8005cbe <HAL_GPIO_WritePin>
	}
	if(L == '3')
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b33      	cmp	r3, #51	; 0x33
 800228e:	d143      	bne.n	8002318 <letter+0x1484>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002290:	2201      	movs	r2, #1
 8002292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002296:	481a      	ldr	r0, [pc, #104]	; (8002300 <letter+0x146c>)
 8002298:	f003 fd11 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022a2:	4818      	ldr	r0, [pc, #96]	; (8002304 <letter+0x1470>)
 80022a4:	f003 fd0b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80022a8:	2201      	movs	r2, #1
 80022aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ae:	4815      	ldr	r0, [pc, #84]	; (8002304 <letter+0x1470>)
 80022b0:	f003 fd05 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80022b4:	2200      	movs	r2, #0
 80022b6:	2140      	movs	r1, #64	; 0x40
 80022b8:	4812      	ldr	r0, [pc, #72]	; (8002304 <letter+0x1470>)
 80022ba:	f003 fd00 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80022be:	2200      	movs	r2, #0
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	4810      	ldr	r0, [pc, #64]	; (8002304 <letter+0x1470>)
 80022c4:	f003 fcfb 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80022c8:	2201      	movs	r2, #1
 80022ca:	2180      	movs	r1, #128	; 0x80
 80022cc:	480e      	ldr	r0, [pc, #56]	; (8002308 <letter+0x1474>)
 80022ce:	f003 fcf6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <letter+0x1474>)
 80022da:	f003 fcf0 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80022de:	2200      	movs	r2, #0
 80022e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e4:	4808      	ldr	r0, [pc, #32]	; (8002308 <letter+0x1474>)
 80022e6:	f003 fcea 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80022ea:	2200      	movs	r2, #0
 80022ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <letter+0x1474>)
 80022f2:	f003 fce4 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022fc:	e006      	b.n	800230c <letter+0x1478>
 80022fe:	bf00      	nop
 8002300:	40010c00 	.word	0x40010c00
 8002304:	40011000 	.word	0x40011000
 8002308:	40010800 	.word	0x40010800
 800230c:	48c1      	ldr	r0, [pc, #772]	; (8002614 <letter+0x1780>)
 800230e:	f003 fcd6 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002312:	2002      	movs	r0, #2
 8002314:	f002 fe50 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '4')
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	2b34      	cmp	r3, #52	; 0x34
 800231c:	d13b      	bne.n	8002396 <letter+0x1502>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800231e:	2201      	movs	r2, #1
 8002320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002324:	48bb      	ldr	r0, [pc, #748]	; (8002614 <letter+0x1780>)
 8002326:	f003 fcca 	bl	8005cbe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002330:	48b9      	ldr	r0, [pc, #740]	; (8002618 <letter+0x1784>)
 8002332:	f003 fcc4 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800233c:	48b6      	ldr	r0, [pc, #728]	; (8002618 <letter+0x1784>)
 800233e:	f003 fcbe 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002342:	2201      	movs	r2, #1
 8002344:	2140      	movs	r1, #64	; 0x40
 8002346:	48b4      	ldr	r0, [pc, #720]	; (8002618 <letter+0x1784>)
 8002348:	f003 fcb9 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800234c:	2200      	movs	r2, #0
 800234e:	2180      	movs	r1, #128	; 0x80
 8002350:	48b1      	ldr	r0, [pc, #708]	; (8002618 <letter+0x1784>)
 8002352:	f003 fcb4 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002356:	2201      	movs	r2, #1
 8002358:	2180      	movs	r1, #128	; 0x80
 800235a:	48b0      	ldr	r0, [pc, #704]	; (800261c <letter+0x1788>)
 800235c:	f003 fcaf 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002360:	2201      	movs	r2, #1
 8002362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002366:	48ad      	ldr	r0, [pc, #692]	; (800261c <letter+0x1788>)
 8002368:	f003 fca9 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002372:	48aa      	ldr	r0, [pc, #680]	; (800261c <letter+0x1788>)
 8002374:	f003 fca3 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002378:	2200      	movs	r2, #0
 800237a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800237e:	48a7      	ldr	r0, [pc, #668]	; (800261c <letter+0x1788>)
 8002380:	f003 fc9d 	bl	8005cbe <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800238a:	48a2      	ldr	r0, [pc, #648]	; (8002614 <letter+0x1780>)
 800238c:	f003 fc97 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002390:	2002      	movs	r0, #2
 8002392:	f002 fe11 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '5')
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b35      	cmp	r3, #53	; 0x35
 800239a:	d13b      	bne.n	8002414 <letter+0x1580>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800239c:	2201      	movs	r2, #1
 800239e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023a2:	489c      	ldr	r0, [pc, #624]	; (8002614 <letter+0x1780>)
 80023a4:	f003 fc8b 	bl	8005cbe <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 80023a8:	2201      	movs	r2, #1
 80023aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ae:	489a      	ldr	r0, [pc, #616]	; (8002618 <letter+0x1784>)
 80023b0:	f003 fc85 	bl	8005cbe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80023b4:	2200      	movs	r2, #0
 80023b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ba:	4897      	ldr	r0, [pc, #604]	; (8002618 <letter+0x1784>)
 80023bc:	f003 fc7f 	bl	8005cbe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80023c0:	2201      	movs	r2, #1
 80023c2:	2140      	movs	r1, #64	; 0x40
 80023c4:	4894      	ldr	r0, [pc, #592]	; (8002618 <letter+0x1784>)
 80023c6:	f003 fc7a 	bl	8005cbe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80023ca:	2200      	movs	r2, #0
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	4892      	ldr	r0, [pc, #584]	; (8002618 <letter+0x1784>)
 80023d0:	f003 fc75 	bl	8005cbe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80023d4:	2201      	movs	r2, #1
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	4890      	ldr	r0, [pc, #576]	; (800261c <letter+0x1788>)
 80023da:	f003 fc70 	bl	8005cbe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e4:	488d      	ldr	r0, [pc, #564]	; (800261c <letter+0x1788>)
 80023e6:	f003 fc6a 	bl	8005cbe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80023ea:	2200      	movs	r2, #0
 80023ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023f0:	488a      	ldr	r0, [pc, #552]	; (800261c <letter+0x1788>)
 80023f2:	f003 fc64 	bl	8005cbe <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80023f6:	2200      	movs	r2, #0
 80023f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023fc:	4887      	ldr	r0, [pc, #540]	; (800261c <letter+0x1788>)
 80023fe:	f003 fc5e 	bl	8005cbe <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002408:	4882      	ldr	r0, [pc, #520]	; (8002614 <letter+0x1780>)
 800240a:	f003 fc58 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800240e:	2002      	movs	r0, #2
 8002410:	f002 fdd2 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '6')
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b36      	cmp	r3, #54	; 0x36
 8002418:	d13b      	bne.n	8002492 <letter+0x15fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800241a:	2201      	movs	r2, #1
 800241c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002420:	487c      	ldr	r0, [pc, #496]	; (8002614 <letter+0x1780>)
 8002422:	f003 fc4c 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 8002426:	2200      	movs	r2, #0
 8002428:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242c:	487a      	ldr	r0, [pc, #488]	; (8002618 <letter+0x1784>)
 800242e:	f003 fc46 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002432:	2201      	movs	r2, #1
 8002434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002438:	4877      	ldr	r0, [pc, #476]	; (8002618 <letter+0x1784>)
 800243a:	f003 fc40 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800243e:	2201      	movs	r2, #1
 8002440:	2140      	movs	r1, #64	; 0x40
 8002442:	4875      	ldr	r0, [pc, #468]	; (8002618 <letter+0x1784>)
 8002444:	f003 fc3b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002448:	2200      	movs	r2, #0
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	4872      	ldr	r0, [pc, #456]	; (8002618 <letter+0x1784>)
 800244e:	f003 fc36 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002452:	2201      	movs	r2, #1
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	4871      	ldr	r0, [pc, #452]	; (800261c <letter+0x1788>)
 8002458:	f003 fc31 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800245c:	2201      	movs	r2, #1
 800245e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002462:	486e      	ldr	r0, [pc, #440]	; (800261c <letter+0x1788>)
 8002464:	f003 fc2b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002468:	2200      	movs	r2, #0
 800246a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800246e:	486b      	ldr	r0, [pc, #428]	; (800261c <letter+0x1788>)
 8002470:	f003 fc25 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002474:	2200      	movs	r2, #0
 8002476:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800247a:	4868      	ldr	r0, [pc, #416]	; (800261c <letter+0x1788>)
 800247c:	f003 fc1f 	bl	8005cbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002486:	4863      	ldr	r0, [pc, #396]	; (8002614 <letter+0x1780>)
 8002488:	f003 fc19 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800248c:	2002      	movs	r0, #2
 800248e:	f002 fd93 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '7')
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b37      	cmp	r3, #55	; 0x37
 8002496:	d13b      	bne.n	8002510 <letter+0x167c>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800249e:	485d      	ldr	r0, [pc, #372]	; (8002614 <letter+0x1780>)
 80024a0:	f003 fc0d 	bl	8005cbe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 80024a4:	2201      	movs	r2, #1
 80024a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024aa:	485b      	ldr	r0, [pc, #364]	; (8002618 <letter+0x1784>)
 80024ac:	f003 fc07 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80024b0:	2201      	movs	r2, #1
 80024b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b6:	4858      	ldr	r0, [pc, #352]	; (8002618 <letter+0x1784>)
 80024b8:	f003 fc01 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80024bc:	2201      	movs	r2, #1
 80024be:	2140      	movs	r1, #64	; 0x40
 80024c0:	4855      	ldr	r0, [pc, #340]	; (8002618 <letter+0x1784>)
 80024c2:	f003 fbfc 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80024c6:	2200      	movs	r2, #0
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	4853      	ldr	r0, [pc, #332]	; (8002618 <letter+0x1784>)
 80024cc:	f003 fbf7 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80024d0:	2201      	movs	r2, #1
 80024d2:	2180      	movs	r1, #128	; 0x80
 80024d4:	4851      	ldr	r0, [pc, #324]	; (800261c <letter+0x1788>)
 80024d6:	f003 fbf2 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80024da:	2201      	movs	r2, #1
 80024dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024e0:	484e      	ldr	r0, [pc, #312]	; (800261c <letter+0x1788>)
 80024e2:	f003 fbec 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ec:	484b      	ldr	r0, [pc, #300]	; (800261c <letter+0x1788>)
 80024ee:	f003 fbe6 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024f8:	4848      	ldr	r0, [pc, #288]	; (800261c <letter+0x1788>)
 80024fa:	f003 fbe0 	bl	8005cbe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80024fe:	2200      	movs	r2, #0
 8002500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002504:	4843      	ldr	r0, [pc, #268]	; (8002614 <letter+0x1780>)
 8002506:	f003 fbda 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800250a:	2002      	movs	r0, #2
 800250c:	f002 fd54 	bl	8004fb8 <HAL_Delay>
	}
	if(L == '8')
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	2b38      	cmp	r3, #56	; 0x38
 8002514:	d13b      	bne.n	800258e <letter+0x16fa>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002516:	2201      	movs	r2, #1
 8002518:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800251c:	483d      	ldr	r0, [pc, #244]	; (8002614 <letter+0x1780>)
 800251e:	f003 fbce 	bl	8005cbe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 8002522:	2200      	movs	r2, #0
 8002524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002528:	483b      	ldr	r0, [pc, #236]	; (8002618 <letter+0x1784>)
 800252a:	f003 fbc8 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800252e:	2200      	movs	r2, #0
 8002530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002534:	4838      	ldr	r0, [pc, #224]	; (8002618 <letter+0x1784>)
 8002536:	f003 fbc2 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800253a:	2200      	movs	r2, #0
 800253c:	2140      	movs	r1, #64	; 0x40
 800253e:	4836      	ldr	r0, [pc, #216]	; (8002618 <letter+0x1784>)
 8002540:	f003 fbbd 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002544:	2201      	movs	r2, #1
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	4833      	ldr	r0, [pc, #204]	; (8002618 <letter+0x1784>)
 800254a:	f003 fbb8 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800254e:	2201      	movs	r2, #1
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	4832      	ldr	r0, [pc, #200]	; (800261c <letter+0x1788>)
 8002554:	f003 fbb3 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002558:	2201      	movs	r2, #1
 800255a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255e:	482f      	ldr	r0, [pc, #188]	; (800261c <letter+0x1788>)
 8002560:	f003 fbad 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002564:	2200      	movs	r2, #0
 8002566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800256a:	482c      	ldr	r0, [pc, #176]	; (800261c <letter+0x1788>)
 800256c:	f003 fba7 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002570:	2200      	movs	r2, #0
 8002572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002576:	4829      	ldr	r0, [pc, #164]	; (800261c <letter+0x1788>)
 8002578:	f003 fba1 	bl	8005cbe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800257c:	2200      	movs	r2, #0
 800257e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002582:	4824      	ldr	r0, [pc, #144]	; (8002614 <letter+0x1780>)
 8002584:	f003 fb9b 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002588:	2002      	movs	r0, #2
 800258a:	f002 fd15 	bl	8004fb8 <HAL_Delay>
	}
	if(L =='9')
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b39      	cmp	r3, #57	; 0x39
 8002592:	d13b      	bne.n	800260c <letter+0x1778>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002594:	2201      	movs	r2, #1
 8002596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800259a:	481e      	ldr	r0, [pc, #120]	; (8002614 <letter+0x1780>)
 800259c:	f003 fb8f 	bl	8005cbe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 80025a0:	2201      	movs	r2, #1
 80025a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a6:	481c      	ldr	r0, [pc, #112]	; (8002618 <letter+0x1784>)
 80025a8:	f003 fb89 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b2:	4819      	ldr	r0, [pc, #100]	; (8002618 <letter+0x1784>)
 80025b4:	f003 fb83 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80025b8:	2200      	movs	r2, #0
 80025ba:	2140      	movs	r1, #64	; 0x40
 80025bc:	4816      	ldr	r0, [pc, #88]	; (8002618 <letter+0x1784>)
 80025be:	f003 fb7e 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80025c2:	2201      	movs	r2, #1
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	4814      	ldr	r0, [pc, #80]	; (8002618 <letter+0x1784>)
 80025c8:	f003 fb79 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80025cc:	2201      	movs	r2, #1
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	4812      	ldr	r0, [pc, #72]	; (800261c <letter+0x1788>)
 80025d2:	f003 fb74 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80025d6:	2201      	movs	r2, #1
 80025d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025dc:	480f      	ldr	r0, [pc, #60]	; (800261c <letter+0x1788>)
 80025de:	f003 fb6e 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80025e2:	2200      	movs	r2, #0
 80025e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e8:	480c      	ldr	r0, [pc, #48]	; (800261c <letter+0x1788>)
 80025ea:	f003 fb68 	bl	8005cbe <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80025ee:	2200      	movs	r2, #0
 80025f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025f4:	4809      	ldr	r0, [pc, #36]	; (800261c <letter+0x1788>)
 80025f6:	f003 fb62 	bl	8005cbe <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80025fa:	2200      	movs	r2, #0
 80025fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <letter+0x1780>)
 8002602:	f003 fb5c 	bl	8005cbe <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002606:	2002      	movs	r0, #2
 8002608:	f002 fcd6 	bl	8004fb8 <HAL_Delay>
	}

}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40010c00 	.word	0x40010c00
 8002618:	40011000 	.word	0x40011000
 800261c:	40010800 	.word	0x40010800

08002620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002624:	f002 fc96 	bl	8004f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002628:	f000 f8bc 	bl	80027a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800262c:	f000 fa3e 	bl	8002aac <MX_GPIO_Init>
  MX_TIM2_Init();
 8002630:	f000 f99c 	bl	800296c <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002634:	f000 fa10 	bl	8002a58 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8002638:	f000 f9e4 	bl	8002a04 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800263c:	f000 f908 	bl	8002850 <MX_ADC1_Init>
  MX_TIM1_Init();
 8002640:	f000 f944 	bl	80028cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002644:	f004 ffe8 	bl	8007618 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8002648:	4a35      	ldr	r2, [pc, #212]	; (8002720 <main+0x100>)
 800264a:	2102      	movs	r1, #2
 800264c:	2008      	movs	r0, #8
 800264e:	f005 f921 	bl	8007894 <osMessageQueueNew>
 8002652:	4602      	mov	r2, r0
 8002654:	4b33      	ldr	r3, [pc, #204]	; (8002724 <main+0x104>)
 8002656:	601a      	str	r2, [r3, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8002658:	4a33      	ldr	r2, [pc, #204]	; (8002728 <main+0x108>)
 800265a:	2102      	movs	r1, #2
 800265c:	2008      	movs	r0, #8
 800265e:	f005 f919 	bl	8007894 <osMessageQueueNew>
 8002662:	4602      	mov	r2, r0
 8002664:	4b31      	ldr	r3, [pc, #196]	; (800272c <main+0x10c>)
 8002666:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8002668:	4a31      	ldr	r2, [pc, #196]	; (8002730 <main+0x110>)
 800266a:	2102      	movs	r1, #2
 800266c:	2008      	movs	r0, #8
 800266e:	f005 f911 	bl	8007894 <osMessageQueueNew>
 8002672:	4602      	mov	r2, r0
 8002674:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <main+0x114>)
 8002676:	601a      	str	r2, [r3, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8002678:	4a2f      	ldr	r2, [pc, #188]	; (8002738 <main+0x118>)
 800267a:	2102      	movs	r1, #2
 800267c:	2008      	movs	r0, #8
 800267e:	f005 f909 	bl	8007894 <osMessageQueueNew>
 8002682:	4602      	mov	r2, r0
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <main+0x11c>)
 8002686:	601a      	str	r2, [r3, #0]

  /* creation of WebsiteQueue */
  WebsiteQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WebsiteQueue_attributes);
 8002688:	4a2d      	ldr	r2, [pc, #180]	; (8002740 <main+0x120>)
 800268a:	2102      	movs	r1, #2
 800268c:	2008      	movs	r0, #8
 800268e:	f005 f901 	bl	8007894 <osMessageQueueNew>
 8002692:	4602      	mov	r2, r0
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <main+0x124>)
 8002696:	601a      	str	r2, [r3, #0]

  /* creation of ProcessQueue */
  ProcessQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &ProcessQueue_attributes);
 8002698:	4a2b      	ldr	r2, [pc, #172]	; (8002748 <main+0x128>)
 800269a:	2102      	movs	r1, #2
 800269c:	2008      	movs	r0, #8
 800269e:	f005 f8f9 	bl	8007894 <osMessageQueueNew>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <main+0x12c>)
 80026a6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 80026a8:	4a29      	ldr	r2, [pc, #164]	; (8002750 <main+0x130>)
 80026aa:	2100      	movs	r1, #0
 80026ac:	4829      	ldr	r0, [pc, #164]	; (8002754 <main+0x134>)
 80026ae:	f005 f819 	bl	80076e4 <osThreadNew>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b28      	ldr	r3, [pc, #160]	; (8002758 <main+0x138>)
 80026b6:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 80026b8:	4a28      	ldr	r2, [pc, #160]	; (800275c <main+0x13c>)
 80026ba:	2100      	movs	r1, #0
 80026bc:	4828      	ldr	r0, [pc, #160]	; (8002760 <main+0x140>)
 80026be:	f005 f811 	bl	80076e4 <osThreadNew>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <main+0x144>)
 80026c6:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <main+0x148>)
 80026ca:	2100      	movs	r1, #0
 80026cc:	4827      	ldr	r0, [pc, #156]	; (800276c <main+0x14c>)
 80026ce:	f005 f809 	bl	80076e4 <osThreadNew>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b26      	ldr	r3, [pc, #152]	; (8002770 <main+0x150>)
 80026d6:	601a      	str	r2, [r3, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 80026d8:	4a26      	ldr	r2, [pc, #152]	; (8002774 <main+0x154>)
 80026da:	2100      	movs	r1, #0
 80026dc:	4826      	ldr	r0, [pc, #152]	; (8002778 <main+0x158>)
 80026de:	f005 f801 	bl	80076e4 <osThreadNew>
 80026e2:	4602      	mov	r2, r0
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <main+0x15c>)
 80026e6:	601a      	str	r2, [r3, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 80026e8:	4a25      	ldr	r2, [pc, #148]	; (8002780 <main+0x160>)
 80026ea:	2100      	movs	r1, #0
 80026ec:	4825      	ldr	r0, [pc, #148]	; (8002784 <main+0x164>)
 80026ee:	f004 fff9 	bl	80076e4 <osThreadNew>
 80026f2:	4602      	mov	r2, r0
 80026f4:	4b24      	ldr	r3, [pc, #144]	; (8002788 <main+0x168>)
 80026f6:	601a      	str	r2, [r3, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 80026f8:	4a24      	ldr	r2, [pc, #144]	; (800278c <main+0x16c>)
 80026fa:	2100      	movs	r1, #0
 80026fc:	4824      	ldr	r0, [pc, #144]	; (8002790 <main+0x170>)
 80026fe:	f004 fff1 	bl	80076e4 <osThreadNew>
 8002702:	4602      	mov	r2, r0
 8002704:	4b23      	ldr	r3, [pc, #140]	; (8002794 <main+0x174>)
 8002706:	601a      	str	r2, [r3, #0]

  /* creation of WebsiteTask */
  WebsiteTaskHandle = osThreadNew(StartWebsiteTask, NULL, &WebsiteTask_attributes);
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <main+0x178>)
 800270a:	2100      	movs	r1, #0
 800270c:	4823      	ldr	r0, [pc, #140]	; (800279c <main+0x17c>)
 800270e:	f004 ffe9 	bl	80076e4 <osThreadNew>
 8002712:	4602      	mov	r2, r0
 8002714:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <main+0x180>)
 8002716:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002718:	f004 ffb0 	bl	800767c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 800271c:	e7fe      	b.n	800271c <main+0xfc>
 800271e:	bf00      	nop
 8002720:	0800a44c 	.word	0x0800a44c
 8002724:	20002574 	.word	0x20002574
 8002728:	0800a464 	.word	0x0800a464
 800272c:	20002874 	.word	0x20002874
 8002730:	0800a47c 	.word	0x0800a47c
 8002734:	20002570 	.word	0x20002570
 8002738:	0800a494 	.word	0x0800a494
 800273c:	2000257c 	.word	0x2000257c
 8002740:	0800a4ac 	.word	0x0800a4ac
 8002744:	20002820 	.word	0x20002820
 8002748:	0800a4c4 	.word	0x0800a4c4
 800274c:	200027e8 	.word	0x200027e8
 8002750:	0800a350 	.word	0x0800a350
 8002754:	08003745 	.word	0x08003745
 8002758:	20002578 	.word	0x20002578
 800275c:	0800a374 	.word	0x0800a374
 8002760:	08003755 	.word	0x08003755
 8002764:	20002824 	.word	0x20002824
 8002768:	0800a398 	.word	0x0800a398
 800276c:	08003a61 	.word	0x08003a61
 8002770:	200028c4 	.word	0x200028c4
 8002774:	0800a3bc 	.word	0x0800a3bc
 8002778:	08003d95 	.word	0x08003d95
 800277c:	2000281c 	.word	0x2000281c
 8002780:	0800a3e0 	.word	0x0800a3e0
 8002784:	08003f51 	.word	0x08003f51
 8002788:	20002870 	.word	0x20002870
 800278c:	0800a404 	.word	0x0800a404
 8002790:	080043cd 	.word	0x080043cd
 8002794:	200028c0 	.word	0x200028c0
 8002798:	0800a428 	.word	0x0800a428
 800279c:	08004439 	.word	0x08004439
 80027a0:	200027e4 	.word	0x200027e4

080027a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b094      	sub	sp, #80	; 0x50
 80027a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ae:	2228      	movs	r2, #40	; 0x28
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f007 fd29 	bl	800a20a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027d8:	2301      	movs	r3, #1
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027dc:	2310      	movs	r3, #16
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027e0:	2302      	movs	r3, #2
 80027e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80027e4:	2300      	movs	r3, #0
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80027e8:	2300      	movs	r3, #0
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 fa9f 	bl	8005d34 <HAL_RCC_OscConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80027fc:	f001 fe4c 	bl	8004498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002800:	230f      	movs	r3, #15
 8002802:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800280c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002810:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f003 fd09 	bl	8006234 <HAL_RCC_ClockConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002828:	f001 fe36 	bl	8004498 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800282c:	2302      	movs	r3, #2
 800282e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	4618      	mov	r0, r3
 8002838:	f003 fec8 	bl	80065cc <HAL_RCCEx_PeriphCLKConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002842:	f001 fe29 	bl	8004498 <Error_Handler>
  }
}
 8002846:	bf00      	nop
 8002848:	3750      	adds	r7, #80	; 0x50
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002862:	4a19      	ldr	r2, [pc, #100]	; (80028c8 <MX_ADC1_Init+0x78>)
 8002864:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <MX_ADC1_Init+0x74>)
 800286e:	2200      	movs	r2, #0
 8002870:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002874:	2200      	movs	r2, #0
 8002876:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <MX_ADC1_Init+0x74>)
 800287a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800287e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002882:	2200      	movs	r2, #0
 8002884:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_ADC1_Init+0x74>)
 8002888:	2201      	movs	r2, #1
 800288a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <MX_ADC1_Init+0x74>)
 800288e:	f002 fbb5 	bl	8004ffc <HAL_ADC_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002898:	f001 fdfe 	bl	8004498 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800289c:	230f      	movs	r3, #15
 800289e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_ADC1_Init+0x74>)
 80028ae:	f002 fe31 	bl	8005514 <HAL_ADC_ConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80028b8:	f001 fdee 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200027ec 	.word	0x200027ec
 80028c8:	40012400 	.word	0x40012400

080028cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e0:	463b      	mov	r3, r7
 80028e2:	2200      	movs	r2, #0
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_TIM1_Init+0x98>)
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <MX_TIM1_Init+0x9c>)
 80028ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <MX_TIM1_Init+0x98>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f4:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <MX_TIM1_Init+0x98>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <MX_TIM1_Init+0x98>)
 80028fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <MX_TIM1_Init+0x98>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <MX_TIM1_Init+0x98>)
 800290a:	2200      	movs	r2, #0
 800290c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <MX_TIM1_Init+0x98>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002914:	4813      	ldr	r0, [pc, #76]	; (8002964 <MX_TIM1_Init+0x98>)
 8002916:	f003 ffcb 	bl	80068b0 <HAL_TIM_Base_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002920:	f001 fdba 	bl	8004498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	4619      	mov	r1, r3
 8002930:	480c      	ldr	r0, [pc, #48]	; (8002964 <MX_TIM1_Init+0x98>)
 8002932:	f004 f9d7 	bl	8006ce4 <HAL_TIM_ConfigClockSource>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800293c:	f001 fdac 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002940:	2300      	movs	r3, #0
 8002942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002948:	463b      	mov	r3, r7
 800294a:	4619      	mov	r1, r3
 800294c:	4805      	ldr	r0, [pc, #20]	; (8002964 <MX_TIM1_Init+0x98>)
 800294e:	f004 fb9d 	bl	800708c <HAL_TIMEx_MasterConfigSynchronization>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002958:	f001 fd9e 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20002828 	.word	0x20002828
 8002968:	40012c00 	.word	0x40012c00

0800296c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002980:	463b      	mov	r3, r7
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002988:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <MX_TIM2_Init+0x94>)
 800298a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800298e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <MX_TIM2_Init+0x94>)
 8002992:	2200      	movs	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <MX_TIM2_Init+0x94>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <MX_TIM2_Init+0x94>)
 800299e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MX_TIM2_Init+0x94>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <MX_TIM2_Init+0x94>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029b0:	4813      	ldr	r0, [pc, #76]	; (8002a00 <MX_TIM2_Init+0x94>)
 80029b2:	f003 ff7d 	bl	80068b0 <HAL_TIM_Base_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029bc:	f001 fd6c 	bl	8004498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	4619      	mov	r1, r3
 80029cc:	480c      	ldr	r0, [pc, #48]	; (8002a00 <MX_TIM2_Init+0x94>)
 80029ce:	f004 f989 	bl	8006ce4 <HAL_TIM_ConfigClockSource>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029d8:	f001 fd5e 	bl	8004498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029e4:	463b      	mov	r3, r7
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_TIM2_Init+0x94>)
 80029ea:	f004 fb4f 	bl	800708c <HAL_TIMEx_MasterConfigSynchronization>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029f4:	f001 fd50 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20002878 	.word	0x20002878

08002a04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <MX_USART1_UART_Init+0x50>)
 8002a0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a2a:	220c      	movs	r2, #12
 8002a2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <MX_USART1_UART_Init+0x4c>)
 8002a3c:	f004 fb96 	bl	800716c <HAL_UART_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a46:	f001 fd27 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200024fc 	.word	0x200024fc
 8002a54:	40013800 	.word	0x40013800

08002a58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a5e:	4a12      	ldr	r2, [pc, #72]	; (8002aa8 <MX_USART3_UART_Init+0x50>)
 8002a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a7e:	220c      	movs	r2, #12
 8002a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a8e:	4805      	ldr	r0, [pc, #20]	; (8002aa4 <MX_USART3_UART_Init+0x4c>)
 8002a90:	f004 fb6c 	bl	800716c <HAL_UART_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002a9a:	f001 fcfd 	bl	8004498 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200024bc 	.word	0x200024bc
 8002aa8:	40004800 	.word	0x40004800

08002aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab2:	f107 0310 	add.w	r3, r7, #16
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac0:	4b65      	ldr	r3, [pc, #404]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	4a64      	ldr	r2, [pc, #400]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002ac6:	f043 0310 	orr.w	r3, r3, #16
 8002aca:	6193      	str	r3, [r2, #24]
 8002acc:	4b62      	ldr	r3, [pc, #392]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad8:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a5e      	ldr	r2, [pc, #376]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002ade:	f043 0320 	orr.w	r3, r3, #32
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4a58      	ldr	r2, [pc, #352]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6193      	str	r3, [r2, #24]
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002b0e:	f043 0308 	orr.w	r3, r3, #8
 8002b12:	6193      	str	r3, [r2, #24]
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <MX_GPIO_Init+0x1ac>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002b20:	2200      	movs	r2, #0
 8002b22:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 8002b26:	484d      	ldr	r0, [pc, #308]	; (8002c5c <MX_GPIO_Init+0x1b0>)
 8002b28:	f003 f8c9 	bl	8005cbe <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8002b32:	484b      	ldr	r0, [pc, #300]	; (8002c60 <MX_GPIO_Init+0x1b4>)
 8002b34:	f003 f8c3 	bl	8005cbe <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8002b3e:	4849      	ldr	r0, [pc, #292]	; (8002c64 <MX_GPIO_Init+0x1b8>)
 8002b40:	f003 f8bd 	bl	8005cbe <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002b44:	2200      	movs	r2, #0
 8002b46:	2104      	movs	r1, #4
 8002b48:	4847      	ldr	r0, [pc, #284]	; (8002c68 <MX_GPIO_Init+0x1bc>)
 8002b4a:	f003 f8b8 	bl	8005cbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b54:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <MX_GPIO_Init+0x1c0>)
 8002b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4619      	mov	r1, r3
 8002b62:	4840      	ldr	r0, [pc, #256]	; (8002c64 <MX_GPIO_Init+0x1b8>)
 8002b64:	f002 ff3a 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002b68:	2307      	movs	r3, #7
 8002b6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4619      	mov	r1, r3
 8002b7a:	483a      	ldr	r0, [pc, #232]	; (8002c64 <MX_GPIO_Init+0x1b8>)
 8002b7c:	f002 ff2e 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b80:	230c      	movs	r3, #12
 8002b82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	4619      	mov	r1, r3
 8002b92:	4832      	ldr	r0, [pc, #200]	; (8002c5c <MX_GPIO_Init+0x1b0>)
 8002b94:	f002 ff22 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002b98:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8002b9c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002baa:	f107 0310 	add.w	r3, r7, #16
 8002bae:	4619      	mov	r1, r3
 8002bb0:	482a      	ldr	r0, [pc, #168]	; (8002c5c <MX_GPIO_Init+0x1b0>)
 8002bb2:	f002 ff13 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f107 0310 	add.w	r3, r7, #16
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4825      	ldr	r0, [pc, #148]	; (8002c60 <MX_GPIO_Init+0x1b4>)
 8002bca:	f002 ff07 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8002bce:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8002bd2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	4619      	mov	r1, r3
 8002be6:	481e      	ldr	r0, [pc, #120]	; (8002c60 <MX_GPIO_Init+0x1b4>)
 8002be8:	f002 fef8 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002bec:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8002bf0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bfe:	f107 0310 	add.w	r3, r7, #16
 8002c02:	4619      	mov	r1, r3
 8002c04:	4817      	ldr	r0, [pc, #92]	; (8002c64 <MX_GPIO_Init+0x1b8>)
 8002c06:	f002 fee9 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2302      	movs	r3, #2
 8002c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c1a:	f107 0310 	add.w	r3, r7, #16
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4811      	ldr	r0, [pc, #68]	; (8002c68 <MX_GPIO_Init+0x1bc>)
 8002c22:	f002 fedb 	bl	80059dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c26:	2340      	movs	r3, #64	; 0x40
 8002c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	4619      	mov	r1, r3
 8002c38:	4809      	ldr	r0, [pc, #36]	; (8002c60 <MX_GPIO_Init+0x1b4>)
 8002c3a:	f002 fecf 	bl	80059dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2105      	movs	r1, #5
 8002c42:	2028      	movs	r0, #40	; 0x28
 8002c44:	f002 fe9f 	bl	8005986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c48:	2028      	movs	r0, #40	; 0x28
 8002c4a:	f002 feb8 	bl	80059be <HAL_NVIC_EnableIRQ>

}
 8002c4e:	bf00      	nop
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40010800 	.word	0x40010800
 8002c60:	40010c00 	.word	0x40010c00
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40011400 	.word	0x40011400
 8002c6c:	10110000 	.word	0x10110000

08002c70 <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8002c74:	2014      	movs	r0, #20
 8002c76:	f002 f99f 	bl	8004fb8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c80:	4867      	ldr	r0, [pc, #412]	; (8002e20 <commandToLCD+0x1b0>)
 8002c82:	f003 f81c 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002c86:	2200      	movs	r2, #0
 8002c88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c8c:	4864      	ldr	r0, [pc, #400]	; (8002e20 <commandToLCD+0x1b0>)
 8002c8e:	f003 f816 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002c92:	2201      	movs	r2, #1
 8002c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c98:	4861      	ldr	r0, [pc, #388]	; (8002e20 <commandToLCD+0x1b0>)
 8002c9a:	f003 f810 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca4:	485f      	ldr	r0, [pc, #380]	; (8002e24 <commandToLCD+0x1b4>)
 8002ca6:	f003 f80a 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002caa:	2200      	movs	r2, #0
 8002cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cb0:	485c      	ldr	r0, [pc, #368]	; (8002e24 <commandToLCD+0x1b4>)
 8002cb2:	f003 f804 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2140      	movs	r1, #64	; 0x40
 8002cba:	485a      	ldr	r0, [pc, #360]	; (8002e24 <commandToLCD+0x1b4>)
 8002cbc:	f002 ffff 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	4857      	ldr	r0, [pc, #348]	; (8002e24 <commandToLCD+0x1b4>)
 8002cc6:	f002 fffa 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	4856      	ldr	r0, [pc, #344]	; (8002e28 <commandToLCD+0x1b8>)
 8002cd0:	f002 fff5 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cda:	4853      	ldr	r0, [pc, #332]	; (8002e28 <commandToLCD+0x1b8>)
 8002cdc:	f002 ffef 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ce6:	4850      	ldr	r0, [pc, #320]	; (8002e28 <commandToLCD+0x1b8>)
 8002ce8:	f002 ffe9 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cf2:	484d      	ldr	r0, [pc, #308]	; (8002e28 <commandToLCD+0x1b8>)
 8002cf4:	f002 ffe3 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cfe:	4848      	ldr	r0, [pc, #288]	; (8002e20 <commandToLCD+0x1b0>)
 8002d00:	f002 ffdd 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002d04:	2005      	movs	r0, #5
 8002d06:	f002 f957 	bl	8004fb8 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d10:	4843      	ldr	r0, [pc, #268]	; (8002e20 <commandToLCD+0x1b0>)
 8002d12:	f002 ffd4 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8002d16:	2201      	movs	r2, #1
 8002d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d1c:	4841      	ldr	r0, [pc, #260]	; (8002e24 <commandToLCD+0x1b4>)
 8002d1e:	f002 ffce 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8002d22:	2201      	movs	r2, #1
 8002d24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d28:	483e      	ldr	r0, [pc, #248]	; (8002e24 <commandToLCD+0x1b4>)
 8002d2a:	f002 ffc8 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2140      	movs	r1, #64	; 0x40
 8002d32:	483c      	ldr	r0, [pc, #240]	; (8002e24 <commandToLCD+0x1b4>)
 8002d34:	f002 ffc3 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002d38:	2201      	movs	r2, #1
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	4839      	ldr	r0, [pc, #228]	; (8002e24 <commandToLCD+0x1b4>)
 8002d3e:	f002 ffbe 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002d42:	2200      	movs	r2, #0
 8002d44:	2180      	movs	r1, #128	; 0x80
 8002d46:	4838      	ldr	r0, [pc, #224]	; (8002e28 <commandToLCD+0x1b8>)
 8002d48:	f002 ffb9 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d52:	4835      	ldr	r0, [pc, #212]	; (8002e28 <commandToLCD+0x1b8>)
 8002d54:	f002 ffb3 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d5e:	4832      	ldr	r0, [pc, #200]	; (8002e28 <commandToLCD+0x1b8>)
 8002d60:	f002 ffad 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002d64:	2200      	movs	r2, #0
 8002d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d6a:	482f      	ldr	r0, [pc, #188]	; (8002e28 <commandToLCD+0x1b8>)
 8002d6c:	f002 ffa7 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002d70:	2200      	movs	r2, #0
 8002d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d76:	482a      	ldr	r0, [pc, #168]	; (8002e20 <commandToLCD+0x1b0>)
 8002d78:	f002 ffa1 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002d7c:	2005      	movs	r0, #5
 8002d7e:	f002 f91b 	bl	8004fb8 <HAL_Delay>


	clear();
 8002d82:	f000 f925 	bl	8002fd0 <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002d86:	2201      	movs	r2, #1
 8002d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d8c:	4824      	ldr	r0, [pc, #144]	; (8002e20 <commandToLCD+0x1b0>)
 8002d8e:	f002 ff96 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 8002d92:	2200      	movs	r2, #0
 8002d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d98:	4822      	ldr	r0, [pc, #136]	; (8002e24 <commandToLCD+0x1b4>)
 8002d9a:	f002 ff90 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002da4:	481f      	ldr	r0, [pc, #124]	; (8002e24 <commandToLCD+0x1b4>)
 8002da6:	f002 ff8a 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8002daa:	2201      	movs	r2, #1
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	481d      	ldr	r0, [pc, #116]	; (8002e24 <commandToLCD+0x1b4>)
 8002db0:	f002 ff85 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002db4:	2200      	movs	r2, #0
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	481a      	ldr	r0, [pc, #104]	; (8002e24 <commandToLCD+0x1b4>)
 8002dba:	f002 ff80 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	4819      	ldr	r0, [pc, #100]	; (8002e28 <commandToLCD+0x1b8>)
 8002dc4:	f002 ff7b 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dce:	4816      	ldr	r0, [pc, #88]	; (8002e28 <commandToLCD+0x1b8>)
 8002dd0:	f002 ff75 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dda:	4813      	ldr	r0, [pc, #76]	; (8002e28 <commandToLCD+0x1b8>)
 8002ddc:	f002 ff6f 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002de6:	4810      	ldr	r0, [pc, #64]	; (8002e28 <commandToLCD+0x1b8>)
 8002de8:	f002 ff69 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002dec:	2200      	movs	r2, #0
 8002dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df2:	480b      	ldr	r0, [pc, #44]	; (8002e20 <commandToLCD+0x1b0>)
 8002df4:	f002 ff63 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002df8:	2005      	movs	r0, #5
 8002dfa:	f002 f8dd 	bl	8004fb8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e04:	4806      	ldr	r0, [pc, #24]	; (8002e20 <commandToLCD+0x1b0>)
 8002e06:	f002 ff5a 	bl	8005cbe <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 8002e0a:	bf00      	nop
 8002e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e10:	4805      	ldr	r0, [pc, #20]	; (8002e28 <commandToLCD+0x1b8>)
 8002e12:	f002 ff3d 	bl	8005c90 <HAL_GPIO_ReadPin>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d0f7      	beq.n	8002e0c <commandToLCD+0x19c>
	{}
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40010c00 	.word	0x40010c00
 8002e24:	40011000 	.word	0x40011000
 8002e28:	40010800 	.word	0x40010800

08002e2c <printPassword>:
void printPassword(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002e30:	2201      	movs	r2, #1
 8002e32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e36:	4813      	ldr	r0, [pc, #76]	; (8002e84 <printPassword+0x58>)
 8002e38:	f002 ff41 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e42:	4810      	ldr	r0, [pc, #64]	; (8002e84 <printPassword+0x58>)
 8002e44:	f002 ff3b 	bl	8005cbe <HAL_GPIO_WritePin>
	letter('P');
 8002e48:	2050      	movs	r0, #80	; 0x50
 8002e4a:	f7fe f823 	bl	8000e94 <letter>
	letter('a');
 8002e4e:	2061      	movs	r0, #97	; 0x61
 8002e50:	f7fe f820 	bl	8000e94 <letter>
	letter('s');
 8002e54:	2073      	movs	r0, #115	; 0x73
 8002e56:	f7fe f81d 	bl	8000e94 <letter>
	letter('s');
 8002e5a:	2073      	movs	r0, #115	; 0x73
 8002e5c:	f7fe f81a 	bl	8000e94 <letter>
	letter('w');
 8002e60:	2077      	movs	r0, #119	; 0x77
 8002e62:	f7fe f817 	bl	8000e94 <letter>
	letter('o');
 8002e66:	206f      	movs	r0, #111	; 0x6f
 8002e68:	f7fe f814 	bl	8000e94 <letter>
	letter('r');
 8002e6c:	2072      	movs	r0, #114	; 0x72
 8002e6e:	f7fe f811 	bl	8000e94 <letter>
	letter('d');
 8002e72:	2064      	movs	r0, #100	; 0x64
 8002e74:	f7fe f80e 	bl	8000e94 <letter>
	letter(':');
 8002e78:	203a      	movs	r0, #58	; 0x3a
 8002e7a:	f7fe f80b 	bl	8000e94 <letter>
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40010c00 	.word	0x40010c00

08002e88 <line1>:
void line1(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e92:	4823      	ldr	r0, [pc, #140]	; (8002f20 <line1+0x98>)
 8002e94:	f002 ff13 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e9e:	4820      	ldr	r0, [pc, #128]	; (8002f20 <line1+0x98>)
 8002ea0:	f002 ff0d 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eaa:	481d      	ldr	r0, [pc, #116]	; (8002f20 <line1+0x98>)
 8002eac:	f002 ff07 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eb6:	481b      	ldr	r0, [pc, #108]	; (8002f24 <line1+0x9c>)
 8002eb8:	f002 ff01 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec2:	4818      	ldr	r0, [pc, #96]	; (8002f24 <line1+0x9c>)
 8002ec4:	f002 fefb 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2140      	movs	r1, #64	; 0x40
 8002ecc:	4815      	ldr	r0, [pc, #84]	; (8002f24 <line1+0x9c>)
 8002ece:	f002 fef6 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	4813      	ldr	r0, [pc, #76]	; (8002f24 <line1+0x9c>)
 8002ed8:	f002 fef1 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002edc:	2200      	movs	r2, #0
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	4811      	ldr	r0, [pc, #68]	; (8002f28 <line1+0xa0>)
 8002ee2:	f002 feec 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eec:	480e      	ldr	r0, [pc, #56]	; (8002f28 <line1+0xa0>)
 8002eee:	f002 fee6 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ef8:	480b      	ldr	r0, [pc, #44]	; (8002f28 <line1+0xa0>)
 8002efa:	f002 fee0 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f04:	4808      	ldr	r0, [pc, #32]	; (8002f28 <line1+0xa0>)
 8002f06:	f002 feda 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <line1+0x98>)
 8002f12:	f002 fed4 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002f16:	2005      	movs	r0, #5
 8002f18:	f002 f84e 	bl	8004fb8 <HAL_Delay>
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40010c00 	.word	0x40010c00
 8002f24:	40011000 	.word	0x40011000
 8002f28:	40010800 	.word	0x40010800

08002f2c <line2>:
void line2(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002f30:	2200      	movs	r2, #0
 8002f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f36:	4823      	ldr	r0, [pc, #140]	; (8002fc4 <line2+0x98>)
 8002f38:	f002 fec1 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f42:	4820      	ldr	r0, [pc, #128]	; (8002fc4 <line2+0x98>)
 8002f44:	f002 febb 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f4e:	481d      	ldr	r0, [pc, #116]	; (8002fc4 <line2+0x98>)
 8002f50:	f002 feb5 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 8002f54:	2200      	movs	r2, #0
 8002f56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f5a:	481b      	ldr	r0, [pc, #108]	; (8002fc8 <line2+0x9c>)
 8002f5c:	f002 feaf 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002f60:	2200      	movs	r2, #0
 8002f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f66:	4818      	ldr	r0, [pc, #96]	; (8002fc8 <line2+0x9c>)
 8002f68:	f002 fea9 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2140      	movs	r1, #64	; 0x40
 8002f70:	4815      	ldr	r0, [pc, #84]	; (8002fc8 <line2+0x9c>)
 8002f72:	f002 fea4 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002f76:	2200      	movs	r2, #0
 8002f78:	2180      	movs	r1, #128	; 0x80
 8002f7a:	4813      	ldr	r0, [pc, #76]	; (8002fc8 <line2+0x9c>)
 8002f7c:	f002 fe9f 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002f80:	2200      	movs	r2, #0
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	4811      	ldr	r0, [pc, #68]	; (8002fcc <line2+0xa0>)
 8002f86:	f002 fe9a 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f90:	480e      	ldr	r0, [pc, #56]	; (8002fcc <line2+0xa0>)
 8002f92:	f002 fe94 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002f96:	2201      	movs	r2, #1
 8002f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f9c:	480b      	ldr	r0, [pc, #44]	; (8002fcc <line2+0xa0>)
 8002f9e:	f002 fe8e 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fa8:	4808      	ldr	r0, [pc, #32]	; (8002fcc <line2+0xa0>)
 8002faa:	f002 fe88 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fb4:	4803      	ldr	r0, [pc, #12]	; (8002fc4 <line2+0x98>)
 8002fb6:	f002 fe82 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002fba:	2005      	movs	r0, #5
 8002fbc:	f001 fffc 	bl	8004fb8 <HAL_Delay>
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40010c00 	.word	0x40010c00
 8002fc8:	40011000 	.word	0x40011000
 8002fcc:	40010800 	.word	0x40010800

08002fd0 <clear>:
void clear()
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fda:	4823      	ldr	r0, [pc, #140]	; (8003068 <clear+0x98>)
 8002fdc:	f002 fe6f 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fe6:	4820      	ldr	r0, [pc, #128]	; (8003068 <clear+0x98>)
 8002fe8:	f002 fe69 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002fec:	2201      	movs	r2, #1
 8002fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ff2:	481d      	ldr	r0, [pc, #116]	; (8003068 <clear+0x98>)
 8002ff4:	f002 fe63 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ffe:	481b      	ldr	r0, [pc, #108]	; (800306c <clear+0x9c>)
 8003000:	f002 fe5d 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003004:	2200      	movs	r2, #0
 8003006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800300a:	4818      	ldr	r0, [pc, #96]	; (800306c <clear+0x9c>)
 800300c:	f002 fe57 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8003010:	2200      	movs	r2, #0
 8003012:	2140      	movs	r1, #64	; 0x40
 8003014:	4815      	ldr	r0, [pc, #84]	; (800306c <clear+0x9c>)
 8003016:	f002 fe52 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800301a:	2200      	movs	r2, #0
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	4813      	ldr	r0, [pc, #76]	; (800306c <clear+0x9c>)
 8003020:	f002 fe4d 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8003024:	2200      	movs	r2, #0
 8003026:	2180      	movs	r1, #128	; 0x80
 8003028:	4811      	ldr	r0, [pc, #68]	; (8003070 <clear+0xa0>)
 800302a:	f002 fe48 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800302e:	2200      	movs	r2, #0
 8003030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003034:	480e      	ldr	r0, [pc, #56]	; (8003070 <clear+0xa0>)
 8003036:	f002 fe42 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800303a:	2200      	movs	r2, #0
 800303c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003040:	480b      	ldr	r0, [pc, #44]	; (8003070 <clear+0xa0>)
 8003042:	f002 fe3c 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8003046:	2200      	movs	r2, #0
 8003048:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800304c:	4808      	ldr	r0, [pc, #32]	; (8003070 <clear+0xa0>)
 800304e:	f002 fe36 	bl	8005cbe <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8003052:	2200      	movs	r2, #0
 8003054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003058:	4803      	ldr	r0, [pc, #12]	; (8003068 <clear+0x98>)
 800305a:	f002 fe30 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800305e:	2005      	movs	r0, #5
 8003060:	f001 ffaa 	bl	8004fb8 <HAL_Delay>
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40010c00 	.word	0x40010c00
 800306c:	40011000 	.word	0x40011000
 8003070:	40010800 	.word	0x40010800

08003074 <correct>:
void correct()
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003078:	2201      	movs	r2, #1
 800307a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800307e:	4811      	ldr	r0, [pc, #68]	; (80030c4 <correct+0x50>)
 8003080:	f002 fe1d 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003084:	2200      	movs	r2, #0
 8003086:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800308a:	480e      	ldr	r0, [pc, #56]	; (80030c4 <correct+0x50>)
 800308c:	f002 fe17 	bl	8005cbe <HAL_GPIO_WritePin>
	letter('C');
 8003090:	2043      	movs	r0, #67	; 0x43
 8003092:	f7fd feff 	bl	8000e94 <letter>
	letter('o');
 8003096:	206f      	movs	r0, #111	; 0x6f
 8003098:	f7fd fefc 	bl	8000e94 <letter>
	letter('r');
 800309c:	2072      	movs	r0, #114	; 0x72
 800309e:	f7fd fef9 	bl	8000e94 <letter>
	letter('r');
 80030a2:	2072      	movs	r0, #114	; 0x72
 80030a4:	f7fd fef6 	bl	8000e94 <letter>
	letter('e');
 80030a8:	2065      	movs	r0, #101	; 0x65
 80030aa:	f7fd fef3 	bl	8000e94 <letter>
	letter('c');
 80030ae:	2063      	movs	r0, #99	; 0x63
 80030b0:	f7fd fef0 	bl	8000e94 <letter>
	letter('t');
 80030b4:	2074      	movs	r0, #116	; 0x74
 80030b6:	f7fd feed 	bl	8000e94 <letter>
	letter('!');
 80030ba:	2021      	movs	r0, #33	; 0x21
 80030bc:	f7fd feea 	bl	8000e94 <letter>
}
 80030c0:	bf00      	nop
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40010c00 	.word	0x40010c00

080030c8 <getVal>:
int getVal(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
	int count = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
	int val=0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	603b      	str	r3, [r7, #0]
	while(count<1)
 80030d6:	e165      	b.n	80033a4 <getVal+0x2dc>
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 80030d8:	2201      	movs	r2, #1
 80030da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030de:	48b6      	ldr	r0, [pc, #728]	; (80033b8 <getVal+0x2f0>)
 80030e0:	f002 fded 	bl	8005cbe <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80030e4:	2104      	movs	r1, #4
 80030e6:	48b5      	ldr	r0, [pc, #724]	; (80033bc <getVal+0x2f4>)
 80030e8:	f002 fdd2 	bl	8005c90 <HAL_GPIO_ReadPin>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d112      	bne.n	8003118 <getVal+0x50>
	  {
		  letter('1');
 80030f2:	2031      	movs	r0, #49	; 0x31
 80030f4:	f7fd fece 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80030f8:	bf00      	nop
 80030fa:	2104      	movs	r1, #4
 80030fc:	48af      	ldr	r0, [pc, #700]	; (80033bc <getVal+0x2f4>)
 80030fe:	f002 fdc7 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d0f8      	beq.n	80030fa <getVal+0x32>
		  {}
		  HAL_Delay(100);
 8003108:	2064      	movs	r0, #100	; 0x64
 800310a:	f001 ff55 	bl	8004fb8 <HAL_Delay>
		  val = 1;
 800310e:	2301      	movs	r3, #1
 8003110:	603b      	str	r3, [r7, #0]
		  count++;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3301      	adds	r3, #1
 8003116:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8003118:	2102      	movs	r1, #2
 800311a:	48a8      	ldr	r0, [pc, #672]	; (80033bc <getVal+0x2f4>)
 800311c:	f002 fdb8 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003120:	4603      	mov	r3, r0
 8003122:	2b01      	cmp	r3, #1
 8003124:	d112      	bne.n	800314c <getVal+0x84>
	  {
		  letter('2');
 8003126:	2032      	movs	r0, #50	; 0x32
 8003128:	f7fd feb4 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800312c:	bf00      	nop
 800312e:	2102      	movs	r1, #2
 8003130:	48a2      	ldr	r0, [pc, #648]	; (80033bc <getVal+0x2f4>)
 8003132:	f002 fdad 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d0f8      	beq.n	800312e <getVal+0x66>
		  {}
		  HAL_Delay(100);
 800313c:	2064      	movs	r0, #100	; 0x64
 800313e:	f001 ff3b 	bl	8004fb8 <HAL_Delay>
		  val = 2;
 8003142:	2302      	movs	r3, #2
 8003144:	603b      	str	r3, [r7, #0]
		  count++;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3301      	adds	r3, #1
 800314a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800314c:	2101      	movs	r1, #1
 800314e:	489b      	ldr	r0, [pc, #620]	; (80033bc <getVal+0x2f4>)
 8003150:	f002 fd9e 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003154:	4603      	mov	r3, r0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d112      	bne.n	8003180 <getVal+0xb8>
	  {
		  letter('3');
 800315a:	2033      	movs	r0, #51	; 0x33
 800315c:	f7fd fe9a 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8003160:	bf00      	nop
 8003162:	2101      	movs	r1, #1
 8003164:	4895      	ldr	r0, [pc, #596]	; (80033bc <getVal+0x2f4>)
 8003166:	f002 fd93 	bl	8005c90 <HAL_GPIO_ReadPin>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d0f8      	beq.n	8003162 <getVal+0x9a>
		  {}
		  HAL_Delay(100);
 8003170:	2064      	movs	r0, #100	; 0x64
 8003172:	f001 ff21 	bl	8004fb8 <HAL_Delay>
		  val = 3;
 8003176:	2303      	movs	r3, #3
 8003178:	603b      	str	r3, [r7, #0]
		  count++;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3301      	adds	r3, #1
 800317e:	607b      	str	r3, [r7, #4]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8003180:	2200      	movs	r2, #0
 8003182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003186:	488c      	ldr	r0, [pc, #560]	; (80033b8 <getVal+0x2f0>)
 8003188:	f002 fd99 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 800318c:	2201      	movs	r2, #1
 800318e:	2104      	movs	r1, #4
 8003190:	488b      	ldr	r0, [pc, #556]	; (80033c0 <getVal+0x2f8>)
 8003192:	f002 fd94 	bl	8005cbe <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8003196:	2104      	movs	r1, #4
 8003198:	4888      	ldr	r0, [pc, #544]	; (80033bc <getVal+0x2f4>)
 800319a:	f002 fd79 	bl	8005c90 <HAL_GPIO_ReadPin>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d112      	bne.n	80031ca <getVal+0x102>
	  {
		  letter('4');
 80031a4:	2034      	movs	r0, #52	; 0x34
 80031a6:	f7fd fe75 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80031aa:	bf00      	nop
 80031ac:	2104      	movs	r1, #4
 80031ae:	4883      	ldr	r0, [pc, #524]	; (80033bc <getVal+0x2f4>)
 80031b0:	f002 fd6e 	bl	8005c90 <HAL_GPIO_ReadPin>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d0f8      	beq.n	80031ac <getVal+0xe4>
		  {}
		  HAL_Delay(100);
 80031ba:	2064      	movs	r0, #100	; 0x64
 80031bc:	f001 fefc 	bl	8004fb8 <HAL_Delay>
		  val = 4;
 80031c0:	2304      	movs	r3, #4
 80031c2:	603b      	str	r3, [r7, #0]
		  count++;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3301      	adds	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80031ca:	2102      	movs	r1, #2
 80031cc:	487b      	ldr	r0, [pc, #492]	; (80033bc <getVal+0x2f4>)
 80031ce:	f002 fd5f 	bl	8005c90 <HAL_GPIO_ReadPin>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d112      	bne.n	80031fe <getVal+0x136>
	  {
		  letter('5');
 80031d8:	2035      	movs	r0, #53	; 0x35
 80031da:	f7fd fe5b 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80031de:	bf00      	nop
 80031e0:	2102      	movs	r1, #2
 80031e2:	4876      	ldr	r0, [pc, #472]	; (80033bc <getVal+0x2f4>)
 80031e4:	f002 fd54 	bl	8005c90 <HAL_GPIO_ReadPin>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d0f8      	beq.n	80031e0 <getVal+0x118>
		  {}
		  HAL_Delay(100);
 80031ee:	2064      	movs	r0, #100	; 0x64
 80031f0:	f001 fee2 	bl	8004fb8 <HAL_Delay>
		  val = 5;
 80031f4:	2305      	movs	r3, #5
 80031f6:	603b      	str	r3, [r7, #0]
		  count++;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3301      	adds	r3, #1
 80031fc:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80031fe:	2101      	movs	r1, #1
 8003200:	486e      	ldr	r0, [pc, #440]	; (80033bc <getVal+0x2f4>)
 8003202:	f002 fd45 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003206:	4603      	mov	r3, r0
 8003208:	2b01      	cmp	r3, #1
 800320a:	d112      	bne.n	8003232 <getVal+0x16a>
	  {
		  letter('6');
 800320c:	2036      	movs	r0, #54	; 0x36
 800320e:	f7fd fe41 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8003212:	bf00      	nop
 8003214:	2101      	movs	r1, #1
 8003216:	4869      	ldr	r0, [pc, #420]	; (80033bc <getVal+0x2f4>)
 8003218:	f002 fd3a 	bl	8005c90 <HAL_GPIO_ReadPin>
 800321c:	4603      	mov	r3, r0
 800321e:	2b01      	cmp	r3, #1
 8003220:	d0f8      	beq.n	8003214 <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 8003222:	2064      	movs	r0, #100	; 0x64
 8003224:	f001 fec8 	bl	8004fb8 <HAL_Delay>
		  val = 6;
 8003228:	2306      	movs	r3, #6
 800322a:	603b      	str	r3, [r7, #0]
		  count++;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3301      	adds	r3, #1
 8003230:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8003232:	2200      	movs	r2, #0
 8003234:	2104      	movs	r1, #4
 8003236:	4862      	ldr	r0, [pc, #392]	; (80033c0 <getVal+0x2f8>)
 8003238:	f002 fd41 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 800323c:	2201      	movs	r2, #1
 800323e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003242:	485d      	ldr	r0, [pc, #372]	; (80033b8 <getVal+0x2f0>)
 8003244:	f002 fd3b 	bl	8005cbe <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8003248:	2104      	movs	r1, #4
 800324a:	485c      	ldr	r0, [pc, #368]	; (80033bc <getVal+0x2f4>)
 800324c:	f002 fd20 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d112      	bne.n	800327c <getVal+0x1b4>
	  {
		  letter('7');
 8003256:	2037      	movs	r0, #55	; 0x37
 8003258:	f7fd fe1c 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800325c:	bf00      	nop
 800325e:	2104      	movs	r1, #4
 8003260:	4856      	ldr	r0, [pc, #344]	; (80033bc <getVal+0x2f4>)
 8003262:	f002 fd15 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003266:	4603      	mov	r3, r0
 8003268:	2b01      	cmp	r3, #1
 800326a:	d0f8      	beq.n	800325e <getVal+0x196>
		  {}
		  HAL_Delay(100);
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	f001 fea3 	bl	8004fb8 <HAL_Delay>
		  val = 7;
 8003272:	2307      	movs	r3, #7
 8003274:	603b      	str	r3, [r7, #0]
		  count++;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3301      	adds	r3, #1
 800327a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800327c:	2102      	movs	r1, #2
 800327e:	484f      	ldr	r0, [pc, #316]	; (80033bc <getVal+0x2f4>)
 8003280:	f002 fd06 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d112      	bne.n	80032b0 <getVal+0x1e8>
	  {
		  letter('8');
 800328a:	2038      	movs	r0, #56	; 0x38
 800328c:	f7fd fe02 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8003290:	bf00      	nop
 8003292:	2102      	movs	r1, #2
 8003294:	4849      	ldr	r0, [pc, #292]	; (80033bc <getVal+0x2f4>)
 8003296:	f002 fcfb 	bl	8005c90 <HAL_GPIO_ReadPin>
 800329a:	4603      	mov	r3, r0
 800329c:	2b01      	cmp	r3, #1
 800329e:	d0f8      	beq.n	8003292 <getVal+0x1ca>
		  {}
		  HAL_Delay(100);
 80032a0:	2064      	movs	r0, #100	; 0x64
 80032a2:	f001 fe89 	bl	8004fb8 <HAL_Delay>
		  val = 8;
 80032a6:	2308      	movs	r3, #8
 80032a8:	603b      	str	r3, [r7, #0]
		  count++;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3301      	adds	r3, #1
 80032ae:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80032b0:	2101      	movs	r1, #1
 80032b2:	4842      	ldr	r0, [pc, #264]	; (80033bc <getVal+0x2f4>)
 80032b4:	f002 fcec 	bl	8005c90 <HAL_GPIO_ReadPin>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d112      	bne.n	80032e4 <getVal+0x21c>
	  {
		  letter('9');
 80032be:	2039      	movs	r0, #57	; 0x39
 80032c0:	f7fd fde8 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80032c4:	bf00      	nop
 80032c6:	2101      	movs	r1, #1
 80032c8:	483c      	ldr	r0, [pc, #240]	; (80033bc <getVal+0x2f4>)
 80032ca:	f002 fce1 	bl	8005c90 <HAL_GPIO_ReadPin>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d0f8      	beq.n	80032c6 <getVal+0x1fe>
		  {}
		  HAL_Delay(100);
 80032d4:	2064      	movs	r0, #100	; 0x64
 80032d6:	f001 fe6f 	bl	8004fb8 <HAL_Delay>
		  val = 9;
 80032da:	2309      	movs	r3, #9
 80032dc:	603b      	str	r3, [r7, #0]
		  count++;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3301      	adds	r3, #1
 80032e2:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 80032e4:	2200      	movs	r2, #0
 80032e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ea:	4833      	ldr	r0, [pc, #204]	; (80033b8 <getVal+0x2f0>)
 80032ec:	f002 fce7 	bl	8005cbe <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 80032f0:	2201      	movs	r2, #1
 80032f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032f6:	4830      	ldr	r0, [pc, #192]	; (80033b8 <getVal+0x2f0>)
 80032f8:	f002 fce1 	bl	8005cbe <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80032fc:	2104      	movs	r1, #4
 80032fe:	482f      	ldr	r0, [pc, #188]	; (80033bc <getVal+0x2f4>)
 8003300:	f002 fcc6 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d112      	bne.n	8003330 <getVal+0x268>
	  {
		  letter('*');
 800330a:	202a      	movs	r0, #42	; 0x2a
 800330c:	f7fd fdc2 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8003310:	bf00      	nop
 8003312:	2104      	movs	r1, #4
 8003314:	4829      	ldr	r0, [pc, #164]	; (80033bc <getVal+0x2f4>)
 8003316:	f002 fcbb 	bl	8005c90 <HAL_GPIO_ReadPin>
 800331a:	4603      	mov	r3, r0
 800331c:	2b01      	cmp	r3, #1
 800331e:	d0f8      	beq.n	8003312 <getVal+0x24a>
		  {}
		  HAL_Delay(100);
 8003320:	2064      	movs	r0, #100	; 0x64
 8003322:	f001 fe49 	bl	8004fb8 <HAL_Delay>
		  val = 10;
 8003326:	230a      	movs	r3, #10
 8003328:	603b      	str	r3, [r7, #0]
		  count++;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3301      	adds	r3, #1
 800332e:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8003330:	2102      	movs	r1, #2
 8003332:	4822      	ldr	r0, [pc, #136]	; (80033bc <getVal+0x2f4>)
 8003334:	f002 fcac 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d112      	bne.n	8003364 <getVal+0x29c>
	  {
		  letter('0');
 800333e:	2030      	movs	r0, #48	; 0x30
 8003340:	f7fd fda8 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8003344:	bf00      	nop
 8003346:	2102      	movs	r1, #2
 8003348:	481c      	ldr	r0, [pc, #112]	; (80033bc <getVal+0x2f4>)
 800334a:	f002 fca1 	bl	8005c90 <HAL_GPIO_ReadPin>
 800334e:	4603      	mov	r3, r0
 8003350:	2b01      	cmp	r3, #1
 8003352:	d0f8      	beq.n	8003346 <getVal+0x27e>
		  {}
		  HAL_Delay(100);
 8003354:	2064      	movs	r0, #100	; 0x64
 8003356:	f001 fe2f 	bl	8004fb8 <HAL_Delay>
		  val = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	603b      	str	r3, [r7, #0]
		  count++;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3301      	adds	r3, #1
 8003362:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8003364:	2101      	movs	r1, #1
 8003366:	4815      	ldr	r0, [pc, #84]	; (80033bc <getVal+0x2f4>)
 8003368:	f002 fc92 	bl	8005c90 <HAL_GPIO_ReadPin>
 800336c:	4603      	mov	r3, r0
 800336e:	2b01      	cmp	r3, #1
 8003370:	d112      	bne.n	8003398 <getVal+0x2d0>
	  {
		  letter('#');
 8003372:	2023      	movs	r0, #35	; 0x23
 8003374:	f7fd fd8e 	bl	8000e94 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8003378:	bf00      	nop
 800337a:	2101      	movs	r1, #1
 800337c:	480f      	ldr	r0, [pc, #60]	; (80033bc <getVal+0x2f4>)
 800337e:	f002 fc87 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003382:	4603      	mov	r3, r0
 8003384:	2b01      	cmp	r3, #1
 8003386:	d0f8      	beq.n	800337a <getVal+0x2b2>
		  {}
		  HAL_Delay(100);
 8003388:	2064      	movs	r0, #100	; 0x64
 800338a:	f001 fe15 	bl	8004fb8 <HAL_Delay>
		  val = 11;
 800338e:	230b      	movs	r3, #11
 8003390:	603b      	str	r3, [r7, #0]
		  count++;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3301      	adds	r3, #1
 8003396:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 8003398:	2200      	movs	r2, #0
 800339a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800339e:	4806      	ldr	r0, [pc, #24]	; (80033b8 <getVal+0x2f0>)
 80033a0:	f002 fc8d 	bl	8005cbe <HAL_GPIO_WritePin>
	while(count<1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f77f ae96 	ble.w	80030d8 <getVal+0x10>
	}
	//osDelay(1);
	return val;
 80033ac:	683b      	ldr	r3, [r7, #0]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40011000 	.word	0x40011000
 80033bc:	40010c00 	.word	0x40010c00
 80033c0:	40011400 	.word	0x40011400

080033c4 <wrongPass>:
void wrongPass(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80033c8:	2201      	movs	r2, #1
 80033ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033ce:	481a      	ldr	r0, [pc, #104]	; (8003438 <wrongPass+0x74>)
 80033d0:	f002 fc75 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80033d4:	2200      	movs	r2, #0
 80033d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033da:	4817      	ldr	r0, [pc, #92]	; (8003438 <wrongPass+0x74>)
 80033dc:	f002 fc6f 	bl	8005cbe <HAL_GPIO_WritePin>
	letter('W');
 80033e0:	2057      	movs	r0, #87	; 0x57
 80033e2:	f7fd fd57 	bl	8000e94 <letter>
	letter('r');
 80033e6:	2072      	movs	r0, #114	; 0x72
 80033e8:	f7fd fd54 	bl	8000e94 <letter>
	letter('o');
 80033ec:	206f      	movs	r0, #111	; 0x6f
 80033ee:	f7fd fd51 	bl	8000e94 <letter>
	letter('n');
 80033f2:	206e      	movs	r0, #110	; 0x6e
 80033f4:	f7fd fd4e 	bl	8000e94 <letter>
	letter('g');
 80033f8:	2067      	movs	r0, #103	; 0x67
 80033fa:	f7fd fd4b 	bl	8000e94 <letter>
	letter(' ');
 80033fe:	2020      	movs	r0, #32
 8003400:	f7fd fd48 	bl	8000e94 <letter>
	letter('P');
 8003404:	2050      	movs	r0, #80	; 0x50
 8003406:	f7fd fd45 	bl	8000e94 <letter>
	letter('a');
 800340a:	2061      	movs	r0, #97	; 0x61
 800340c:	f7fd fd42 	bl	8000e94 <letter>
	letter('s');
 8003410:	2073      	movs	r0, #115	; 0x73
 8003412:	f7fd fd3f 	bl	8000e94 <letter>
	letter('s');
 8003416:	2073      	movs	r0, #115	; 0x73
 8003418:	f7fd fd3c 	bl	8000e94 <letter>
	letter('w');
 800341c:	2077      	movs	r0, #119	; 0x77
 800341e:	f7fd fd39 	bl	8000e94 <letter>
	letter('o');
 8003422:	206f      	movs	r0, #111	; 0x6f
 8003424:	f7fd fd36 	bl	8000e94 <letter>
	letter('r');
 8003428:	2072      	movs	r0, #114	; 0x72
 800342a:	f7fd fd33 	bl	8000e94 <letter>
	letter('d');
 800342e:	2064      	movs	r0, #100	; 0x64
 8003430:	f7fd fd30 	bl	8000e94 <letter>
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40010c00 	.word	0x40010c00

0800343c <green>:
void green(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003440:	2201      	movs	r2, #1
 8003442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003446:	4814      	ldr	r0, [pc, #80]	; (8003498 <green+0x5c>)
 8003448:	f002 fc39 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800344c:	2200      	movs	r2, #0
 800344e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003452:	4811      	ldr	r0, [pc, #68]	; (8003498 <green+0x5c>)
 8003454:	f002 fc33 	bl	8005cbe <HAL_GPIO_WritePin>
	letter('G');
 8003458:	2047      	movs	r0, #71	; 0x47
 800345a:	f7fd fd1b 	bl	8000e94 <letter>
	letter('r');
 800345e:	2072      	movs	r0, #114	; 0x72
 8003460:	f7fd fd18 	bl	8000e94 <letter>
	letter('e');
 8003464:	2065      	movs	r0, #101	; 0x65
 8003466:	f7fd fd15 	bl	8000e94 <letter>
	letter('e');
 800346a:	2065      	movs	r0, #101	; 0x65
 800346c:	f7fd fd12 	bl	8000e94 <letter>
	letter('n');
 8003470:	206e      	movs	r0, #110	; 0x6e
 8003472:	f7fd fd0f 	bl	8000e94 <letter>
	letter(' ');
 8003476:	2020      	movs	r0, #32
 8003478:	f7fd fd0c 	bl	8000e94 <letter>
	letter('1');
 800347c:	2031      	movs	r0, #49	; 0x31
 800347e:	f7fd fd09 	bl	8000e94 <letter>
	letter('-');
 8003482:	202d      	movs	r0, #45	; 0x2d
 8003484:	f7fd fd06 	bl	8000e94 <letter>
	letter('3');
 8003488:	2033      	movs	r0, #51	; 0x33
 800348a:	f7fd fd03 	bl	8000e94 <letter>
	letter(':');
 800348e:	203a      	movs	r0, #58	; 0x3a
 8003490:	f7fd fd00 	bl	8000e94 <letter>

}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40010c00 	.word	0x40010c00

0800349c <timer>:

void timer(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80034a0:	2201      	movs	r2, #1
 80034a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034a6:	481a      	ldr	r0, [pc, #104]	; (8003510 <timer+0x74>)
 80034a8:	f002 fc09 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80034ac:	2200      	movs	r2, #0
 80034ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034b2:	4817      	ldr	r0, [pc, #92]	; (8003510 <timer+0x74>)
 80034b4:	f002 fc03 	bl	8005cbe <HAL_GPIO_WritePin>

	letter('T');
 80034b8:	2054      	movs	r0, #84	; 0x54
 80034ba:	f7fd fceb 	bl	8000e94 <letter>
	letter('i');
 80034be:	2069      	movs	r0, #105	; 0x69
 80034c0:	f7fd fce8 	bl	8000e94 <letter>
	letter('m');
 80034c4:	206d      	movs	r0, #109	; 0x6d
 80034c6:	f7fd fce5 	bl	8000e94 <letter>
	letter('e');
 80034ca:	2065      	movs	r0, #101	; 0x65
 80034cc:	f7fd fce2 	bl	8000e94 <letter>
	letter(' ');
 80034d0:	2020      	movs	r0, #32
 80034d2:	f7fd fcdf 	bl	8000e94 <letter>
	letter('0');
 80034d6:	2030      	movs	r0, #48	; 0x30
 80034d8:	f7fd fcdc 	bl	8000e94 <letter>
	letter('0');
 80034dc:	2030      	movs	r0, #48	; 0x30
 80034de:	f7fd fcd9 	bl	8000e94 <letter>
	letter('-');
 80034e2:	202d      	movs	r0, #45	; 0x2d
 80034e4:	f7fd fcd6 	bl	8000e94 <letter>
	letter('6');
 80034e8:	2036      	movs	r0, #54	; 0x36
 80034ea:	f7fd fcd3 	bl	8000e94 <letter>
	letter('0');
 80034ee:	2030      	movs	r0, #48	; 0x30
 80034f0:	f7fd fcd0 	bl	8000e94 <letter>
	letter('m');
 80034f4:	206d      	movs	r0, #109	; 0x6d
 80034f6:	f7fd fccd 	bl	8000e94 <letter>
	letter('i');
 80034fa:	2069      	movs	r0, #105	; 0x69
 80034fc:	f7fd fcca 	bl	8000e94 <letter>
	letter('n');
 8003500:	206e      	movs	r0, #110	; 0x6e
 8003502:	f7fd fcc7 	bl	8000e94 <letter>
	letter(':');
 8003506:	203a      	movs	r0, #58	; 0x3a
 8003508:	f7fd fcc4 	bl	8000e94 <letter>

}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40010c00 	.word	0x40010c00

08003514 <quit>:

void quit(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003518:	2201      	movs	r2, #1
 800351a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800351e:	481e      	ldr	r0, [pc, #120]	; (8003598 <quit+0x84>)
 8003520:	f002 fbcd 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003524:	2200      	movs	r2, #0
 8003526:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800352a:	481b      	ldr	r0, [pc, #108]	; (8003598 <quit+0x84>)
 800352c:	f002 fbc7 	bl	8005cbe <HAL_GPIO_WritePin>

	letter('Q');
 8003530:	2051      	movs	r0, #81	; 0x51
 8003532:	f7fd fcaf 	bl	8000e94 <letter>
	letter('u');
 8003536:	2075      	movs	r0, #117	; 0x75
 8003538:	f7fd fcac 	bl	8000e94 <letter>
	letter('i');
 800353c:	2069      	movs	r0, #105	; 0x69
 800353e:	f7fd fca9 	bl	8000e94 <letter>
	letter('t');
 8003542:	2074      	movs	r0, #116	; 0x74
 8003544:	f7fd fca6 	bl	8000e94 <letter>
	letter('?');
 8003548:	203f      	movs	r0, #63	; 0x3f
 800354a:	f7fd fca3 	bl	8000e94 <letter>
	letter(' ');
 800354e:	2020      	movs	r0, #32
 8003550:	f7fd fca0 	bl	8000e94 <letter>
	letter('y');
 8003554:	2079      	movs	r0, #121	; 0x79
 8003556:	f7fd fc9d 	bl	8000e94 <letter>
	letter('e');
 800355a:	2065      	movs	r0, #101	; 0x65
 800355c:	f7fd fc9a 	bl	8000e94 <letter>
	letter('s');
 8003560:	2073      	movs	r0, #115	; 0x73
 8003562:	f7fd fc97 	bl	8000e94 <letter>
	letter('-');
 8003566:	202d      	movs	r0, #45	; 0x2d
 8003568:	f7fd fc94 	bl	8000e94 <letter>
	letter('1');
 800356c:	2031      	movs	r0, #49	; 0x31
 800356e:	f7fd fc91 	bl	8000e94 <letter>
	letter(' ');
 8003572:	2020      	movs	r0, #32
 8003574:	f7fd fc8e 	bl	8000e94 <letter>
	letter('n');
 8003578:	206e      	movs	r0, #110	; 0x6e
 800357a:	f7fd fc8b 	bl	8000e94 <letter>
	letter('o');
 800357e:	206f      	movs	r0, #111	; 0x6f
 8003580:	f7fd fc88 	bl	8000e94 <letter>
	letter('-');
 8003584:	202d      	movs	r0, #45	; 0x2d
 8003586:	f7fd fc85 	bl	8000e94 <letter>
	letter('0');
 800358a:	2030      	movs	r0, #48	; 0x30
 800358c:	f7fd fc82 	bl	8000e94 <letter>
	line2();
 8003590:	f7ff fccc 	bl	8002f2c <line2>
}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40010c00 	.word	0x40010c00

0800359c <onOffTime>:
void onOffTime(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80035a0:	2201      	movs	r2, #1
 80035a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035a6:	481e      	ldr	r0, [pc, #120]	; (8003620 <onOffTime+0x84>)
 80035a8:	f002 fb89 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80035ac:	2200      	movs	r2, #0
 80035ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035b2:	481b      	ldr	r0, [pc, #108]	; (8003620 <onOffTime+0x84>)
 80035b4:	f002 fb83 	bl	8005cbe <HAL_GPIO_WritePin>
	letter('0');
 80035b8:	2030      	movs	r0, #48	; 0x30
 80035ba:	f7fd fc6b 	bl	8000e94 <letter>
	letter('-');
 80035be:	202d      	movs	r0, #45	; 0x2d
 80035c0:	f7fd fc68 	bl	8000e94 <letter>
	letter('O');
 80035c4:	204f      	movs	r0, #79	; 0x4f
 80035c6:	f7fd fc65 	bl	8000e94 <letter>
	letter('n');
 80035ca:	206e      	movs	r0, #110	; 0x6e
 80035cc:	f7fd fc62 	bl	8000e94 <letter>
	letter('/');
 80035d0:	202f      	movs	r0, #47	; 0x2f
 80035d2:	f7fd fc5f 	bl	8000e94 <letter>
	letter('O');
 80035d6:	204f      	movs	r0, #79	; 0x4f
 80035d8:	f7fd fc5c 	bl	8000e94 <letter>
	letter('f');
 80035dc:	2066      	movs	r0, #102	; 0x66
 80035de:	f7fd fc59 	bl	8000e94 <letter>
	letter('f');
 80035e2:	2066      	movs	r0, #102	; 0x66
 80035e4:	f7fd fc56 	bl	8000e94 <letter>
	letter(' ');
 80035e8:	2020      	movs	r0, #32
 80035ea:	f7fd fc53 	bl	8000e94 <letter>
	letter('1');
 80035ee:	2031      	movs	r0, #49	; 0x31
 80035f0:	f7fd fc50 	bl	8000e94 <letter>
	letter('-');
 80035f4:	202d      	movs	r0, #45	; 0x2d
 80035f6:	f7fd fc4d 	bl	8000e94 <letter>
	letter('T');
 80035fa:	2054      	movs	r0, #84	; 0x54
 80035fc:	f7fd fc4a 	bl	8000e94 <letter>
	letter('i');
 8003600:	2069      	movs	r0, #105	; 0x69
 8003602:	f7fd fc47 	bl	8000e94 <letter>
	letter('m');
 8003606:	206d      	movs	r0, #109	; 0x6d
 8003608:	f7fd fc44 	bl	8000e94 <letter>
	letter('e');
 800360c:	2065      	movs	r0, #101	; 0x65
 800360e:	f7fd fc41 	bl	8000e94 <letter>
	letter('r');
 8003612:	2072      	movs	r0, #114	; 0x72
 8003614:	f7fd fc3e 	bl	8000e94 <letter>
	line2();
 8003618:	f7ff fc88 	bl	8002f2c <line2>
}
 800361c:	bf00      	nop
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40010c00 	.word	0x40010c00

08003624 <onOff>:
void onOff(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003628:	2201      	movs	r2, #1
 800362a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800362e:	4816      	ldr	r0, [pc, #88]	; (8003688 <onOff+0x64>)
 8003630:	f002 fb45 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003634:	2200      	movs	r2, #0
 8003636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800363a:	4813      	ldr	r0, [pc, #76]	; (8003688 <onOff+0x64>)
 800363c:	f002 fb3f 	bl	8005cbe <HAL_GPIO_WritePin>
	letter('0');
 8003640:	2030      	movs	r0, #48	; 0x30
 8003642:	f7fd fc27 	bl	8000e94 <letter>
	letter('-');
 8003646:	202d      	movs	r0, #45	; 0x2d
 8003648:	f7fd fc24 	bl	8000e94 <letter>
	letter('O');
 800364c:	204f      	movs	r0, #79	; 0x4f
 800364e:	f7fd fc21 	bl	8000e94 <letter>
	letter('n');
 8003652:	206e      	movs	r0, #110	; 0x6e
 8003654:	f7fd fc1e 	bl	8000e94 <letter>
	letter(' ');
 8003658:	2020      	movs	r0, #32
 800365a:	f7fd fc1b 	bl	8000e94 <letter>
	letter('1');
 800365e:	2031      	movs	r0, #49	; 0x31
 8003660:	f7fd fc18 	bl	8000e94 <letter>
	letter('-');
 8003664:	202d      	movs	r0, #45	; 0x2d
 8003666:	f7fd fc15 	bl	8000e94 <letter>
	letter('O');
 800366a:	204f      	movs	r0, #79	; 0x4f
 800366c:	f7fd fc12 	bl	8000e94 <letter>
	letter('f');
 8003670:	2066      	movs	r0, #102	; 0x66
 8003672:	f7fd fc0f 	bl	8000e94 <letter>
	letter('f');
 8003676:	2066      	movs	r0, #102	; 0x66
 8003678:	f7fd fc0c 	bl	8000e94 <letter>
	letter(':');
 800367c:	203a      	movs	r0, #58	; 0x3a
 800367e:	f7fd fc09 	bl	8000e94 <letter>

}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40010c00 	.word	0x40010c00

0800368c <error>:
void error(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003690:	2201      	movs	r2, #1
 8003692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003696:	482a      	ldr	r0, [pc, #168]	; (8003740 <error+0xb4>)
 8003698:	f002 fb11 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800369c:	2200      	movs	r2, #0
 800369e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036a2:	4827      	ldr	r0, [pc, #156]	; (8003740 <error+0xb4>)
 80036a4:	f002 fb0b 	bl	8005cbe <HAL_GPIO_WritePin>

	letter('E');
 80036a8:	2045      	movs	r0, #69	; 0x45
 80036aa:	f7fd fbf3 	bl	8000e94 <letter>
	letter('r');
 80036ae:	2072      	movs	r0, #114	; 0x72
 80036b0:	f7fd fbf0 	bl	8000e94 <letter>
	letter('r');
 80036b4:	2072      	movs	r0, #114	; 0x72
 80036b6:	f7fd fbed 	bl	8000e94 <letter>
	letter('o');
 80036ba:	206f      	movs	r0, #111	; 0x6f
 80036bc:	f7fd fbea 	bl	8000e94 <letter>
	letter('r');
 80036c0:	2072      	movs	r0, #114	; 0x72
 80036c2:	f7fd fbe7 	bl	8000e94 <letter>
	letter(',');
 80036c6:	202c      	movs	r0, #44	; 0x2c
 80036c8:	f7fd fbe4 	bl	8000e94 <letter>
	letter(' ');
 80036cc:	2020      	movs	r0, #32
 80036ce:	f7fd fbe1 	bl	8000e94 <letter>
	letter('I');
 80036d2:	2049      	movs	r0, #73	; 0x49
 80036d4:	f7fd fbde 	bl	8000e94 <letter>
	letter('n');
 80036d8:	206e      	movs	r0, #110	; 0x6e
 80036da:	f7fd fbdb 	bl	8000e94 <letter>
	letter('v');
 80036de:	2076      	movs	r0, #118	; 0x76
 80036e0:	f7fd fbd8 	bl	8000e94 <letter>
	letter('a');
 80036e4:	2061      	movs	r0, #97	; 0x61
 80036e6:	f7fd fbd5 	bl	8000e94 <letter>
	letter('l');
 80036ea:	206c      	movs	r0, #108	; 0x6c
 80036ec:	f7fd fbd2 	bl	8000e94 <letter>
	letter('i');
 80036f0:	2069      	movs	r0, #105	; 0x69
 80036f2:	f7fd fbcf 	bl	8000e94 <letter>
	letter('d');
 80036f6:	2064      	movs	r0, #100	; 0x64
 80036f8:	f7fd fbcc 	bl	8000e94 <letter>

	line2();
 80036fc:	f7ff fc16 	bl	8002f2c <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003700:	2201      	movs	r2, #1
 8003702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003706:	480e      	ldr	r0, [pc, #56]	; (8003740 <error+0xb4>)
 8003708:	f002 fad9 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800370c:	2200      	movs	r2, #0
 800370e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003712:	480b      	ldr	r0, [pc, #44]	; (8003740 <error+0xb4>)
 8003714:	f002 fad3 	bl	8005cbe <HAL_GPIO_WritePin>
	letter('N');
 8003718:	204e      	movs	r0, #78	; 0x4e
 800371a:	f7fd fbbb 	bl	8000e94 <letter>
	letter('u');
 800371e:	2075      	movs	r0, #117	; 0x75
 8003720:	f7fd fbb8 	bl	8000e94 <letter>
	letter('m');
 8003724:	206d      	movs	r0, #109	; 0x6d
 8003726:	f7fd fbb5 	bl	8000e94 <letter>
	letter('b');
 800372a:	2062      	movs	r0, #98	; 0x62
 800372c:	f7fd fbb2 	bl	8000e94 <letter>
	letter('e');
 8003730:	2065      	movs	r0, #101	; 0x65
 8003732:	f7fd fbaf 	bl	8000e94 <letter>
	letter('r');
 8003736:	2072      	movs	r0, #114	; 0x72
 8003738:	f7fd fbac 	bl	8000e94 <letter>
}
 800373c:	bf00      	nop
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40010c00 	.word	0x40010c00

08003744 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  osDelay(1);
 800374c:	2001      	movs	r0, #1
 800374e:	f004 f873 	bl	8007838 <osDelay>
 8003752:	e7fb      	b.n	800374c <StartXbeeTask+0x8>

08003754 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	uint16_t num[7];
	uint16_t indc, m;

  for(;;)
  {
	commandToLCD();
 800375c:	f7ff fa88 	bl	8002c70 <commandToLCD>
	printPassword();
 8003760:	f7ff fb64 	bl	8002e2c <printPassword>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800376a:	48ba      	ldr	r0, [pc, #744]	; (8003a54 <StartUserTask+0x300>)
 800376c:	f002 faa7 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8003770:	2200      	movs	r2, #0
 8003772:	2104      	movs	r1, #4
 8003774:	48b8      	ldr	r0, [pc, #736]	; (8003a58 <StartUserTask+0x304>)
 8003776:	f002 faa2 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 800377a:	2200      	movs	r2, #0
 800377c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003780:	48b4      	ldr	r0, [pc, #720]	; (8003a54 <StartUserTask+0x300>)
 8003782:	f002 fa9c 	bl	8005cbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8003786:	2200      	movs	r2, #0
 8003788:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800378c:	48b1      	ldr	r0, [pc, #708]	; (8003a54 <StartUserTask+0x300>)
 800378e:	f002 fa96 	bl	8005cbe <HAL_GPIO_WritePin>

	for(int i = 0; i < 4; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e00d      	b.n	80037b4 <StartUserTask+0x60>
	{
		num[i] = getVal();
 8003798:	f7ff fc96 	bl	80030c8 <getVal>
 800379c:	4603      	mov	r3, r0
 800379e:	b29a      	uxth	r2, r3
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	f107 0120 	add.w	r1, r7, #32
 80037a8:	440b      	add	r3, r1
 80037aa:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 4; i++)
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3301      	adds	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	ddee      	ble.n	8003798 <StartUserTask+0x44>
	}
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 80037ba:	893b      	ldrh	r3, [r7, #8]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	f040 813c 	bne.w	8003a3a <StartUserTask+0x2e6>
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	f040 8138 	bne.w	8003a3a <StartUserTask+0x2e6>
 80037ca:	89bb      	ldrh	r3, [r7, #12]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	f040 8134 	bne.w	8003a3a <StartUserTask+0x2e6>
 80037d2:	89fb      	ldrh	r3, [r7, #14]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	f040 8130 	bne.w	8003a3a <StartUserTask+0x2e6>
	{
		clear();
 80037da:	f7ff fbf9 	bl	8002fd0 <clear>
		line1();
 80037de:	f7ff fb53 	bl	8002e88 <line1>
		correct();
 80037e2:	f7ff fc47 	bl	8003074 <correct>
		HAL_Delay(1500);
 80037e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80037ea:	f001 fbe5 	bl	8004fb8 <HAL_Delay>
		num[6] = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	82bb      	strh	r3, [r7, #20]
		while(num[6] == 0)
 80037f2:	e11d      	b.n	8003a30 <StartUserTask+0x2dc>
		{
			commandToLCD();
 80037f4:	f7ff fa3c 	bl	8002c70 <commandToLCD>
			onOffTime();
 80037f8:	f7ff fed0 	bl	800359c <onOffTime>
			num[0] = getVal();
 80037fc:	f7ff fc64 	bl	80030c8 <getVal>
 8003800:	4603      	mov	r3, r0
 8003802:	b29b      	uxth	r3, r3
 8003804:	813b      	strh	r3, [r7, #8]
			while(num[0]< 0 || num[0] > 1)
 8003806:	e010      	b.n	800382a <StartUserTask+0xd6>
			{
				commandToLCD();
 8003808:	f7ff fa32 	bl	8002c70 <commandToLCD>
				error();
 800380c:	f7ff ff3e 	bl	800368c <error>
				HAL_Delay(1500);
 8003810:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003814:	f001 fbd0 	bl	8004fb8 <HAL_Delay>
				commandToLCD();
 8003818:	f7ff fa2a 	bl	8002c70 <commandToLCD>
				onOffTime();
 800381c:	f7ff febe 	bl	800359c <onOffTime>
				num[0] = getVal();
 8003820:	f7ff fc52 	bl	80030c8 <getVal>
 8003824:	4603      	mov	r3, r0
 8003826:	b29b      	uxth	r3, r3
 8003828:	813b      	strh	r3, [r7, #8]
			while(num[0]< 0 || num[0] > 1)
 800382a:	893b      	ldrh	r3, [r7, #8]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d8eb      	bhi.n	8003808 <StartUserTask+0xb4>
			}
			if(num[0] == 0)
 8003830:	893b      	ldrh	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d170      	bne.n	8003918 <StartUserTask+0x1c4>
			{
				m = 1;
 8003836:	2301      	movs	r3, #1
 8003838:	837b      	strh	r3, [r7, #26]
				commandToLCD();
 800383a:	f7ff fa19 	bl	8002c70 <commandToLCD>
				green();
 800383e:	f7ff fdfd 	bl	800343c <green>
				num[0] = getVal();
 8003842:	f7ff fc41 	bl	80030c8 <getVal>
 8003846:	4603      	mov	r3, r0
 8003848:	b29b      	uxth	r3, r3
 800384a:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 800384c:	e010      	b.n	8003870 <StartUserTask+0x11c>
				{
					commandToLCD();
 800384e:	f7ff fa0f 	bl	8002c70 <commandToLCD>
					error();
 8003852:	f7ff ff1b 	bl	800368c <error>
					HAL_Delay(1500);
 8003856:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800385a:	f001 fbad 	bl	8004fb8 <HAL_Delay>
					commandToLCD();
 800385e:	f7ff fa07 	bl	8002c70 <commandToLCD>
					green();
 8003862:	f7ff fdeb 	bl	800343c <green>
					num[0] = getVal();
 8003866:	f7ff fc2f 	bl	80030c8 <getVal>
 800386a:	4603      	mov	r3, r0
 800386c:	b29b      	uxth	r3, r3
 800386e:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003870:	893b      	ldrh	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0eb      	beq.n	800384e <StartUserTask+0xfa>
 8003876:	893b      	ldrh	r3, [r7, #8]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d8e8      	bhi.n	800384e <StartUserTask+0xfa>
				}
				indc = num[0];
 800387c:	893b      	ldrh	r3, [r7, #8]
 800387e:	833b      	strh	r3, [r7, #24]
				line2();
 8003880:	f7ff fb54 	bl	8002f2c <line2>
				onOff();
 8003884:	f7ff fece 	bl	8003624 <onOff>
				num[0] = getVal();
 8003888:	f7ff fc1e 	bl	80030c8 <getVal>
 800388c:	4603      	mov	r3, r0
 800388e:	b29b      	uxth	r3, r3
 8003890:	813b      	strh	r3, [r7, #8]
				while(num[0]< 0 || num[0] > 1)
 8003892:	e010      	b.n	80038b6 <StartUserTask+0x162>
				{
					commandToLCD();
 8003894:	f7ff f9ec 	bl	8002c70 <commandToLCD>
					error();
 8003898:	f7ff fef8 	bl	800368c <error>
					HAL_Delay(1500);
 800389c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80038a0:	f001 fb8a 	bl	8004fb8 <HAL_Delay>
					commandToLCD();
 80038a4:	f7ff f9e4 	bl	8002c70 <commandToLCD>
					onOff();
 80038a8:	f7ff febc 	bl	8003624 <onOff>
					num[0] = getVal();
 80038ac:	f7ff fc0c 	bl	80030c8 <getVal>
 80038b0:	4603      	mov	r3, r0
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	813b      	strh	r3, [r7, #8]
				while(num[0]< 0 || num[0] > 1)
 80038b6:	893b      	ldrh	r3, [r7, #8]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d8eb      	bhi.n	8003894 <StartUserTask+0x140>
				}
				UserInfo[1] = m;
 80038bc:	4a67      	ldr	r2, [pc, #412]	; (8003a5c <StartUserTask+0x308>)
 80038be:	8b7b      	ldrh	r3, [r7, #26]
 80038c0:	8053      	strh	r3, [r2, #2]
				UserInfo[2] = indc;
 80038c2:	4a66      	ldr	r2, [pc, #408]	; (8003a5c <StartUserTask+0x308>)
 80038c4:	8b3b      	ldrh	r3, [r7, #24]
 80038c6:	8093      	strh	r3, [r2, #4]
				UserInfo[3] = num[0];
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	4b64      	ldr	r3, [pc, #400]	; (8003a5c <StartUserTask+0x308>)
 80038cc:	80da      	strh	r2, [r3, #6]
				UserInfo[0]++;
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <StartUserTask+0x308>)
 80038d0:	881b      	ldrh	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <StartUserTask+0x308>)
 80038d8:	801a      	strh	r2, [r3, #0]

				clear();
 80038da:	f7ff fb79 	bl	8002fd0 <clear>
				quit();
 80038de:	f7ff fe19 	bl	8003514 <quit>
				num[5] = getVal();
 80038e2:	f7ff fbf1 	bl	80030c8 <getVal>
 80038e6:	4603      	mov	r3, r0
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 80038ec:	e010      	b.n	8003910 <StartUserTask+0x1bc>
				{
					commandToLCD();
 80038ee:	f7ff f9bf 	bl	8002c70 <commandToLCD>
					error();
 80038f2:	f7ff fecb 	bl	800368c <error>
					HAL_Delay(1500);
 80038f6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80038fa:	f001 fb5d 	bl	8004fb8 <HAL_Delay>
					commandToLCD();
 80038fe:	f7ff f9b7 	bl	8002c70 <commandToLCD>
					quit();
 8003902:	f7ff fe07 	bl	8003514 <quit>
					num[5] = getVal();
 8003906:	f7ff fbdf 	bl	80030c8 <getVal>
 800390a:	4603      	mov	r3, r0
 800390c:	b29b      	uxth	r3, r3
 800390e:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 8003910:	8a7b      	ldrh	r3, [r7, #18]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d8eb      	bhi.n	80038ee <StartUserTask+0x19a>
 8003916:	e086      	b.n	8003a26 <StartUserTask+0x2d2>
				}
			}
			else if(num[0] == 1)
 8003918:	893b      	ldrh	r3, [r7, #8]
 800391a:	2b01      	cmp	r3, #1
 800391c:	f040 8083 	bne.w	8003a26 <StartUserTask+0x2d2>
			{
				m = 2;
 8003920:	2302      	movs	r3, #2
 8003922:	837b      	strh	r3, [r7, #26]
				commandToLCD();
 8003924:	f7ff f9a4 	bl	8002c70 <commandToLCD>
				green();
 8003928:	f7ff fd88 	bl	800343c <green>
				num[0] = getVal();
 800392c:	f7ff fbcc 	bl	80030c8 <getVal>
 8003930:	4603      	mov	r3, r0
 8003932:	b29b      	uxth	r3, r3
 8003934:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003936:	e010      	b.n	800395a <StartUserTask+0x206>
				{
					commandToLCD();
 8003938:	f7ff f99a 	bl	8002c70 <commandToLCD>
					error();
 800393c:	f7ff fea6 	bl	800368c <error>
					HAL_Delay(1500);
 8003940:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003944:	f001 fb38 	bl	8004fb8 <HAL_Delay>
					commandToLCD();
 8003948:	f7ff f992 	bl	8002c70 <commandToLCD>
					green();
 800394c:	f7ff fd76 	bl	800343c <green>
					num[0] = getVal();
 8003950:	f7ff fbba 	bl	80030c8 <getVal>
 8003954:	4603      	mov	r3, r0
 8003956:	b29b      	uxth	r3, r3
 8003958:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 800395a:	893b      	ldrh	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0eb      	beq.n	8003938 <StartUserTask+0x1e4>
 8003960:	893b      	ldrh	r3, [r7, #8]
 8003962:	2b03      	cmp	r3, #3
 8003964:	d8e8      	bhi.n	8003938 <StartUserTask+0x1e4>
				}
				indc = num[0];
 8003966:	893b      	ldrh	r3, [r7, #8]
 8003968:	833b      	strh	r3, [r7, #24]
				line2();
 800396a:	f7ff fadf 	bl	8002f2c <line2>
				timer();
 800396e:	f7ff fd95 	bl	800349c <timer>
				num[0] = getVal();
 8003972:	f7ff fba9 	bl	80030c8 <getVal>
 8003976:	4603      	mov	r3, r0
 8003978:	b29b      	uxth	r3, r3
 800397a:	813b      	strh	r3, [r7, #8]
				num[1] = getVal();
 800397c:	f7ff fba4 	bl	80030c8 <getVal>
 8003980:	4603      	mov	r3, r0
 8003982:	b29b      	uxth	r3, r3
 8003984:	817b      	strh	r3, [r7, #10]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8003986:	e015      	b.n	80039b4 <StartUserTask+0x260>
				{
					commandToLCD();
 8003988:	f7ff f972 	bl	8002c70 <commandToLCD>
					error();
 800398c:	f7ff fe7e 	bl	800368c <error>
					HAL_Delay(1500);
 8003990:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003994:	f001 fb10 	bl	8004fb8 <HAL_Delay>
					commandToLCD();
 8003998:	f7ff f96a 	bl	8002c70 <commandToLCD>
					timer();
 800399c:	f7ff fd7e 	bl	800349c <timer>
					num[0] = getVal();
 80039a0:	f7ff fb92 	bl	80030c8 <getVal>
 80039a4:	4603      	mov	r3, r0
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	813b      	strh	r3, [r7, #8]
					num[1] = getVal();
 80039aa:	f7ff fb8d 	bl	80030c8 <getVal>
 80039ae:	4603      	mov	r3, r0
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	817b      	strh	r3, [r7, #10]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d8e6      	bhi.n	8003988 <StartUserTask+0x234>
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	2b09      	cmp	r3, #9
 80039be:	d8e3      	bhi.n	8003988 <StartUserTask+0x234>
 80039c0:	893b      	ldrh	r3, [r7, #8]
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d102      	bne.n	80039cc <StartUserTask+0x278>
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1dd      	bne.n	8003988 <StartUserTask+0x234>
				}
				UserInfo[1] = m;
 80039cc:	4a23      	ldr	r2, [pc, #140]	; (8003a5c <StartUserTask+0x308>)
 80039ce:	8b7b      	ldrh	r3, [r7, #26]
 80039d0:	8053      	strh	r3, [r2, #2]
				UserInfo[2] = indc;
 80039d2:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <StartUserTask+0x308>)
 80039d4:	8b3b      	ldrh	r3, [r7, #24]
 80039d6:	8093      	strh	r3, [r2, #4]
				UserInfo[3] = num[0];
 80039d8:	893a      	ldrh	r2, [r7, #8]
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <StartUserTask+0x308>)
 80039dc:	80da      	strh	r2, [r3, #6]
				UserInfo[0] ++;
 80039de:	4b1f      	ldr	r3, [pc, #124]	; (8003a5c <StartUserTask+0x308>)
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <StartUserTask+0x308>)
 80039e8:	801a      	strh	r2, [r3, #0]

				clear();
 80039ea:	f7ff faf1 	bl	8002fd0 <clear>
				quit();
 80039ee:	f7ff fd91 	bl	8003514 <quit>
				num[5] = getVal();
 80039f2:	f7ff fb69 	bl	80030c8 <getVal>
 80039f6:	4603      	mov	r3, r0
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 80039fc:	e010      	b.n	8003a20 <StartUserTask+0x2cc>
				{
					commandToLCD();
 80039fe:	f7ff f937 	bl	8002c70 <commandToLCD>
					error();
 8003a02:	f7ff fe43 	bl	800368c <error>
					HAL_Delay(1500);
 8003a06:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003a0a:	f001 fad5 	bl	8004fb8 <HAL_Delay>
					commandToLCD();
 8003a0e:	f7ff f92f 	bl	8002c70 <commandToLCD>
					quit();
 8003a12:	f7ff fd7f 	bl	8003514 <quit>
					num[5] = getVal();
 8003a16:	f7ff fb57 	bl	80030c8 <getVal>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 8003a20:	8a7b      	ldrh	r3, [r7, #18]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d8eb      	bhi.n	80039fe <StartUserTask+0x2aa>
				}
			}
			if(num[5] == 1)
 8003a26:	8a7b      	ldrh	r3, [r7, #18]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <StartUserTask+0x2dc>
			{
				num[6] = 5;
 8003a2c:	2305      	movs	r3, #5
 8003a2e:	82bb      	strh	r3, [r7, #20]
		while(num[6] == 0)
 8003a30:	8abb      	ldrh	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f43f aede 	beq.w	80037f4 <StartUserTask+0xa0>
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8003a38:	e007      	b.n	8003a4a <StartUserTask+0x2f6>
			}
		}
	}
	else
	{
		line2();
 8003a3a:	f7ff fa77 	bl	8002f2c <line2>
		wrongPass();
 8003a3e:	f7ff fcc1 	bl	80033c4 <wrongPass>
		HAL_Delay(2000);
 8003a42:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a46:	f001 fab7 	bl	8004fb8 <HAL_Delay>
	}
	osDelay(1);
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	f003 fef4 	bl	8007838 <osDelay>
	commandToLCD();
 8003a50:	e684      	b.n	800375c <StartUserTask+0x8>
 8003a52:	bf00      	nop
 8003a54:	40011000 	.word	0x40011000
 8003a58:	40011400 	.word	0x40011400
 8003a5c:	2000002c 	.word	0x2000002c

08003a60 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	; 0x30
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSolenoidTask */
	uint8_t b = 0, temp, L[3] = {0,0,0}, timS[3] = {0,0,0};
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003a74:	2300      	movs	r3, #0
 8003a76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003a86:	2300      	movs	r3, #0
 8003a88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t timT[3] = {0,0,0}, timF[3] = {10,10,10};
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	4a91      	ldr	r2, [pc, #580]	; (8003ce4 <StartSolenoidTask+0x284>)
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	/* Infinite loop */

  for(;;)
  {
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]))
 8003aaa:	e125      	b.n	8003cf8 <StartSolenoidTask+0x298>
	  {

		  if(UserInfo[0] > b)//collecting new values
 8003aac:	4b8e      	ldr	r3, [pc, #568]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d97a      	bls.n	8003bb0 <StartSolenoidTask+0x150>
		  {
			  if(UserInfo[1] == 1)//on/off
 8003aba:	4b8b      	ldr	r3, [pc, #556]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003abc:	885b      	ldrh	r3, [r3, #2]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d138      	bne.n	8003b34 <StartSolenoidTask+0xd4>
			  {
				  if(UserInfo[2] == 1)//green one on/off
 8003ac2:	4b89      	ldr	r3, [pc, #548]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003ac4:	889b      	ldrh	r3, [r3, #4]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d10e      	bne.n	8003ae8 <StartSolenoidTask+0x88>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, ((UserInfo[3] + 1) %2));
 8003aca:	4b87      	ldr	r3, [pc, #540]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003acc:	88db      	ldrh	r3, [r3, #6]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	bfb8      	it	lt
 8003ad8:	425b      	neglt	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	461a      	mov	r2, r3
 8003ade:	2180      	movs	r1, #128	; 0x80
 8003ae0:	4882      	ldr	r0, [pc, #520]	; (8003cec <StartSolenoidTask+0x28c>)
 8003ae2:	f002 f8ec 	bl	8005cbe <HAL_GPIO_WritePin>
 8003ae6:	e05d      	b.n	8003ba4 <StartSolenoidTask+0x144>
				  else if(UserInfo[2] == 2)//green two on/off
 8003ae8:	4b7f      	ldr	r3, [pc, #508]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003aea:	889b      	ldrh	r3, [r3, #4]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d10e      	bne.n	8003b0e <StartSolenoidTask+0xae>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((UserInfo[3] + 1) %2));
 8003af0:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003af2:	88db      	ldrh	r3, [r3, #6]
 8003af4:	3301      	adds	r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	bfb8      	it	lt
 8003afe:	425b      	neglt	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	2120      	movs	r1, #32
 8003b06:	4879      	ldr	r0, [pc, #484]	; (8003cec <StartSolenoidTask+0x28c>)
 8003b08:	f002 f8d9 	bl	8005cbe <HAL_GPIO_WritePin>
 8003b0c:	e04a      	b.n	8003ba4 <StartSolenoidTask+0x144>
				  else if(UserInfo[2] == 3)//green three on/off
 8003b0e:	4b76      	ldr	r3, [pc, #472]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b10:	889b      	ldrh	r3, [r3, #4]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d146      	bne.n	8003ba4 <StartSolenoidTask+0x144>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((UserInfo[3] + 1) %2));
 8003b16:	4b74      	ldr	r3, [pc, #464]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b18:	88db      	ldrh	r3, [r3, #6]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	bfb8      	it	lt
 8003b24:	425b      	neglt	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2110      	movs	r1, #16
 8003b2c:	486f      	ldr	r0, [pc, #444]	; (8003cec <StartSolenoidTask+0x28c>)
 8003b2e:	f002 f8c6 	bl	8005cbe <HAL_GPIO_WritePin>
 8003b32:	e037      	b.n	8003ba4 <StartSolenoidTask+0x144>
			  }
			  else if(UserInfo[1] == 2)//timer
 8003b34:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b36:	885b      	ldrh	r3, [r3, #2]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d133      	bne.n	8003ba4 <StartSolenoidTask+0x144>
			  {
				  timF[UserInfo[2]-1] = UserInfo[3];//set final time
 8003b3c:	4b6a      	ldr	r3, [pc, #424]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b3e:	88da      	ldrh	r2, [r3, #6]
 8003b40:	4b69      	ldr	r3, [pc, #420]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b42:	889b      	ldrh	r3, [r3, #4]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f843 2c24 	str.w	r2, [r3, #-36]
				  timS[UserInfo[2]-1] =__HAL_TIM_GET_COUNTER(&htim2);
 8003b52:	4b67      	ldr	r3, [pc, #412]	; (8003cf0 <StartSolenoidTask+0x290>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b58:	4b63      	ldr	r3, [pc, #396]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b5a:	889b      	ldrh	r3, [r3, #4]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003b64:	440b      	add	r3, r1
 8003b66:	f803 2c0c 	strb.w	r2, [r3, #-12]
				  if(UserInfo[2] == 1)//green one one
 8003b6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b6c:	889b      	ldrh	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d105      	bne.n	8003b7e <StartSolenoidTask+0x11e>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8003b72:	2201      	movs	r2, #1
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	485d      	ldr	r0, [pc, #372]	; (8003cec <StartSolenoidTask+0x28c>)
 8003b78:	f002 f8a1 	bl	8005cbe <HAL_GPIO_WritePin>
 8003b7c:	e012      	b.n	8003ba4 <StartSolenoidTask+0x144>
				  else if(UserInfo[2] == 2)//green two on
 8003b7e:	4b5a      	ldr	r3, [pc, #360]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b80:	889b      	ldrh	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d105      	bne.n	8003b92 <StartSolenoidTask+0x132>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8003b86:	2201      	movs	r2, #1
 8003b88:	2120      	movs	r1, #32
 8003b8a:	4858      	ldr	r0, [pc, #352]	; (8003cec <StartSolenoidTask+0x28c>)
 8003b8c:	f002 f897 	bl	8005cbe <HAL_GPIO_WritePin>
 8003b90:	e008      	b.n	8003ba4 <StartSolenoidTask+0x144>
				  else if(UserInfo[2] == 3)//green three on
 8003b92:	4b55      	ldr	r3, [pc, #340]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003b94:	889b      	ldrh	r3, [r3, #4]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d104      	bne.n	8003ba4 <StartSolenoidTask+0x144>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2110      	movs	r1, #16
 8003b9e:	4853      	ldr	r0, [pc, #332]	; (8003cec <StartSolenoidTask+0x28c>)
 8003ba0:	f002 f88d 	bl	8005cbe <HAL_GPIO_WritePin>
			  }
			  UserInfo[0]--;
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	4b4e      	ldr	r3, [pc, #312]	; (8003ce8 <StartSolenoidTask+0x288>)
 8003bae:	801a      	strh	r2, [r3, #0]
		  }
		  //running timers if we have a time set for any solenoid
		  if(timF[0] != 10)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b0a      	cmp	r3, #10
 8003bb4:	d02f      	beq.n	8003c16 <StartSolenoidTask+0x1b6>
		  {
			  if(timS[0] != 0)
 8003bb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <StartSolenoidTask+0x16e>
			  {
				  timF[0] = timF[0] + timS[0];
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003bc4:	4413      	add	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
				  timS[0] = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8003bce:	4b48      	ldr	r3, [pc, #288]	; (8003cf0 <StartSolenoidTask+0x290>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[0])
 8003bd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bdc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d20b      	bcs.n	8003bfc <StartSolenoidTask+0x19c>
				  timT[0] = timT[0] + temp + 65535 - L[0];
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003bea:	4413      	add	r3, r2
 8003bec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003bf6:	33ff      	adds	r3, #255	; 0xff
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e007      	b.n	8003c0c <StartSolenoidTask+0x1ac>

			  else
				  timT[0] = timT[0] + (temp - L[0]);
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003c02:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003c06:	1a52      	subs	r2, r2, r1
 8003c08:	4413      	add	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
			  L[0] = temp;
 8003c0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c10:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003c14:	e070      	b.n	8003cf8 <StartSolenoidTask+0x298>
		  }
		  else if(timF[1] != 10)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b0a      	cmp	r3, #10
 8003c1a:	d02f      	beq.n	8003c7c <StartSolenoidTask+0x21c>
		  {
			  if(timS[1] != 0)
 8003c1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <StartSolenoidTask+0x1d4>
			  {
				  timF[1] = timF[1] + timS[1];
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003c2a:	4413      	add	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
				  timS[1] = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8003c34:	4b2e      	ldr	r3, [pc, #184]	; (8003cf0 <StartSolenoidTask+0x290>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[1])
 8003c3e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003c42:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d20b      	bcs.n	8003c62 <StartSolenoidTask+0x202>
				  timT[1] = timT[1] + temp + 65535 - L[1];
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c50:	4413      	add	r3, r2
 8003c52:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003c5c:	33ff      	adds	r3, #255	; 0xff
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	e007      	b.n	8003c72 <StartSolenoidTask+0x212>

			  else
				  timT[1] = timT[1] + (temp - L[1]);
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003c68:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003c6c:	1a52      	subs	r2, r2, r1
 8003c6e:	4413      	add	r3, r2
 8003c70:	61fb      	str	r3, [r7, #28]
			  L[1] = temp;
 8003c72:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003c76:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8003c7a:	e03d      	b.n	8003cf8 <StartSolenoidTask+0x298>
		  }
		  else if(timF[2] != 10)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b0a      	cmp	r3, #10
 8003c80:	d038      	beq.n	8003cf4 <StartSolenoidTask+0x294>
		  {
			  if(timS[2] != 0)
 8003c82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <StartSolenoidTask+0x23a>
			  {
				  timF[2] = timF[2] + timS[2];
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003c90:	4413      	add	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
				  timS[2] = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <StartSolenoidTask+0x290>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[2])
 8003ca4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003ca8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d20b      	bcs.n	8003cc8 <StartSolenoidTask+0x268>
				  timT[2] = timT[2] + temp + 65535 - L[2];
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003cc2:	33ff      	adds	r3, #255	; 0xff
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	e007      	b.n	8003cd8 <StartSolenoidTask+0x278>

			  else
				  timT[2] = timT[2] + (temp - L[2]);
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003cce:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8003cd2:	1a52      	subs	r2, r2, r1
 8003cd4:	4413      	add	r3, r2
 8003cd6:	623b      	str	r3, [r7, #32]
			  L[2] = temp;
 8003cd8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ce0:	e00a      	b.n	8003cf8 <StartSolenoidTask+0x298>
 8003ce2:	bf00      	nop
 8003ce4:	0800a2e8 	.word	0x0800a2e8
 8003ce8:	2000002c 	.word	0x2000002c
 8003cec:	40010c00 	.word	0x40010c00
 8003cf0:	20002878 	.word	0x20002878
		  }
		  else
			  timT[0] = 11;
 8003cf4:	230b      	movs	r3, #11
 8003cf6:	61bb      	str	r3, [r7, #24]
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]))
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d208      	bcs.n	8003d12 <StartSolenoidTask+0x2b2>
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d204      	bcs.n	8003d12 <StartSolenoidTask+0x2b2>
 8003d08:	6a3a      	ldr	r2, [r7, #32]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f4ff aecd 	bcc.w	8003aac <StartSolenoidTask+0x4c>
	  }


	  if(timT[0] == 11)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b0b      	cmp	r3, #11
 8003d16:	d101      	bne.n	8003d1c <StartSolenoidTask+0x2bc>
		  timT[0] = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]

	  if(timT[0] >= timF[0])
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d30c      	bcc.n	8003d3e <StartSolenoidTask+0x2de>
	  {
			Water[0] = Flow[0] * timT[0];
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <StartSolenoidTask+0x32c>)
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	fb02 f303 	mul.w	r3, r2, r3
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <StartSolenoidTask+0x330>)
 8003d34:	801a      	strh	r2, [r3, #0]
			timT[0] = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
			timF[0] = 10;
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	60fb      	str	r3, [r7, #12]
	  }
	  if(timT[1] >= timF[1])
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d30c      	bcc.n	8003d60 <StartSolenoidTask+0x300>
	  {
			Water[1] = Flow[1] * timT[1];
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <StartSolenoidTask+0x32c>)
 8003d48:	885b      	ldrh	r3, [r3, #2]
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	b292      	uxth	r2, r2
 8003d4e:	fb02 f303 	mul.w	r3, r2, r3
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <StartSolenoidTask+0x330>)
 8003d56:	805a      	strh	r2, [r3, #2]
			timT[1] = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61fb      	str	r3, [r7, #28]
			timF[1] = 10;
 8003d5c:	230a      	movs	r3, #10
 8003d5e:	613b      	str	r3, [r7, #16]
	  }
	  if(timT[2] >= timF[2])
 8003d60:	6a3a      	ldr	r2, [r7, #32]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d30c      	bcc.n	8003d82 <StartSolenoidTask+0x322>
	  {
			Water[2] = Flow[2] * timT[2];
 8003d68:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <StartSolenoidTask+0x32c>)
 8003d6a:	889b      	ldrh	r3, [r3, #4]
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	b292      	uxth	r2, r2
 8003d70:	fb02 f303 	mul.w	r3, r2, r3
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <StartSolenoidTask+0x330>)
 8003d78:	809a      	strh	r2, [r3, #4]
			timT[2] = 0;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
			timF[2] = 10;
 8003d7e:	230a      	movs	r3, #10
 8003d80:	617b      	str	r3, [r7, #20]
	  }
	  osDelay(1);
 8003d82:	2001      	movs	r0, #1
 8003d84:	f003 fd58 	bl	8007838 <osDelay>
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]))
 8003d88:	e7b6      	b.n	8003cf8 <StartSolenoidTask+0x298>
 8003d8a:	bf00      	nop
 8003d8c:	2000003c 	.word	0x2000003c
 8003d90:	20000034 	.word	0x20000034

08003d94 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b09c      	sub	sp, #112	; 0x70
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWeatherTask */
	uint16_t period[20], raw[20];
	uint16_t tickstart, tickend, totalP, totalT, a, b;
	uint16_t Pcount = 0;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	HAL_TIM_Base_Start(&htim2);
 8003da2:	4867      	ldr	r0, [pc, #412]	; (8003f40 <StartWeatherTask+0x1ac>)
 8003da4:	f002 fdd4 	bl	8006950 <HAL_TIM_Base_Start>

  /* Infinite loop */
  for(;;)
  {
		while(Pcount < 20)
 8003da8:	e056      	b.n	8003e58 <StartWeatherTask+0xc4>
		{
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8003daa:	bf00      	nop
 8003dac:	2101      	movs	r1, #1
 8003dae:	4865      	ldr	r0, [pc, #404]	; (8003f44 <StartWeatherTask+0x1b0>)
 8003db0:	f001 ff6e 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f8      	beq.n	8003dac <StartWeatherTask+0x18>
			{}
			tickstart = __HAL_TIM_GET_COUNTER(&htim2);
 8003dba:	4b61      	ldr	r3, [pc, #388]	; (8003f40 <StartWeatherTask+0x1ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1)
 8003dc4:	bf00      	nop
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	485e      	ldr	r0, [pc, #376]	; (8003f44 <StartWeatherTask+0x1b0>)
 8003dca:	f001 ff61 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d0f8      	beq.n	8003dc6 <StartWeatherTask+0x32>
			{}
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8003dd4:	bf00      	nop
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	485a      	ldr	r0, [pc, #360]	; (8003f44 <StartWeatherTask+0x1b0>)
 8003dda:	f001 ff59 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f8      	beq.n	8003dd6 <StartWeatherTask+0x42>
			{}
			tickend = __HAL_TIM_GET_COUNTER(&htim2);
 8003de4:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <StartWeatherTask+0x1ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			if(tickend > tickstart)
 8003dee:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003df2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d90e      	bls.n	8003e18 <StartWeatherTask+0x84>
				period[Pcount] = tickend - tickstart;
 8003dfa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003dfe:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 8003e02:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8003e06:	1a8a      	subs	r2, r1, r2
 8003e08:	b292      	uxth	r2, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003e10:	440b      	add	r3, r1
 8003e12:	f823 2c40 	strh.w	r2, [r3, #-64]
 8003e16:	e00f      	b.n	8003e38 <StartWeatherTask+0xa4>
			else
				period[Pcount] = (65535 - tickstart) + tickend;
 8003e18:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8003e1c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	b292      	uxth	r2, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003e32:	440b      	add	r3, r1
 8003e34:	f823 2c40 	strh.w	r2, [r3, #-64]

			if(period[Pcount]< 1000)
 8003e38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003e42:	4413      	add	r3, r2
 8003e44:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8003e48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e4c:	d204      	bcs.n	8003e58 <StartWeatherTask+0xc4>
				Pcount++;
 8003e4e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e52:	3301      	adds	r3, #1
 8003e54:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		while(Pcount < 20)
 8003e58:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e5c:	2b13      	cmp	r3, #19
 8003e5e:	d9a4      	bls.n	8003daa <StartWeatherTask+0x16>
		}

		for(int i = 0; i < 20; i++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	663b      	str	r3, [r7, #96]	; 0x60
 8003e64:	e016      	b.n	8003e94 <StartWeatherTask+0x100>
		{
			HAL_ADC_Start(&hadc1);
 8003e66:	4838      	ldr	r0, [pc, #224]	; (8003f48 <StartWeatherTask+0x1b4>)
 8003e68:	f001 f9a0 	bl	80051ac <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e70:	4835      	ldr	r0, [pc, #212]	; (8003f48 <StartWeatherTask+0x1b4>)
 8003e72:	f001 fa49 	bl	8005308 <HAL_ADC_PollForConversion>
			raw[i] = HAL_ADC_GetValue(&hadc1);
 8003e76:	4834      	ldr	r0, [pc, #208]	; (8003f48 <StartWeatherTask+0x1b4>)
 8003e78:	f001 fb40 	bl	80054fc <HAL_ADC_GetValue>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8003e88:	440b      	add	r3, r1
 8003e8a:	f823 2c68 	strh.w	r2, [r3, #-104]
		for(int i = 0; i < 20; i++)
 8003e8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e90:	3301      	adds	r3, #1
 8003e92:	663b      	str	r3, [r7, #96]	; 0x60
 8003e94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e96:	2b13      	cmp	r3, #19
 8003e98:	dde5      	ble.n	8003e66 <StartWeatherTask+0xd2>
		}

		Pcount = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		totalT = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		totalP = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		for(int i = 0; i < 20; i++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb0:	e01a      	b.n	8003ee8 <StartWeatherTask+0x154>
		{
			totalT = totalT +raw[i];
 8003eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003eba:	4413      	add	r3, r2
 8003ebc:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 8003ec0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			totalP = totalP +period[i];
 8003eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f833 2c40 	ldrh.w	r2, [r3, #-64]
 8003ed8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003edc:	4413      	add	r3, r2
 8003ede:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		for(int i = 0; i < 20; i++)
 8003ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eea:	2b13      	cmp	r3, #19
 8003eec:	dde1      	ble.n	8003eb2 <StartWeatherTask+0x11e>
		}
		totalT = totalT/20;
 8003eee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <StartWeatherTask+0x1b8>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		totalP = totalP/20;
 8003efe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <StartWeatherTask+0x1b8>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if(a != totalT || b != totalP)
 8003f0e:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8003f12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d105      	bne.n	8003f26 <StartWeatherTask+0x192>
 8003f1a:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8003f1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d007      	beq.n	8003f36 <StartWeatherTask+0x1a2>
		{
			//osMessageQueuePut(WeatherQueueHandle, &totalT, 1U, 0U);
			//osMessageQueuePut(WeatherQueueHandle, &totalP, 1U, 0U);
			a = totalT;
 8003f26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f2a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			b = totalP;
 8003f2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f32:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		}
    osDelay(1);
 8003f36:	2001      	movs	r0, #1
 8003f38:	f003 fc7e 	bl	8007838 <osDelay>
		while(Pcount < 20)
 8003f3c:	e78c      	b.n	8003e58 <StartWeatherTask+0xc4>
 8003f3e:	bf00      	nop
 8003f40:	20002878 	.word	0x20002878
 8003f44:	40011000 	.word	0x40011000
 8003f48:	200027ec 	.word	0x200027ec
 8003f4c:	cccccccd 	.word	0xcccccccd

08003f50 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b09a      	sub	sp, #104	; 0x68
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlowTask */
  	uint8_t F = 0, L = 0, o[3] = {1,1,1};
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003f64:	4abe      	ldr	r2, [pc, #760]	; (8004260 <StartFlowTask+0x310>)
 8003f66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	8019      	strh	r1, [r3, #0]
 8003f70:	3302      	adds	r3, #2
 8003f72:	0c12      	lsrs	r2, r2, #16
 8003f74:	701a      	strb	r2, [r3, #0]
  	uint16_t f1 = 0, f2 = 0, f3 = 0, tickL =0, temp;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  	uint16_t C[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	2228      	movs	r2, #40	; 0x28
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f006 f937 	bl	800a20a <memset>
  	uint32_t total = 0, tickS;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 8003fa0:	2180      	movs	r1, #128	; 0x80
 8003fa2:	48b0      	ldr	r0, [pc, #704]	; (8004264 <StartFlowTask+0x314>)
 8003fa4:	f001 fe74 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	f040 8091 	bne.w	80040d2 <StartFlowTask+0x182>
 8003fb0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 808c 	bne.w	80040d2 <StartFlowTask+0x182>
	  {
		  for(int j =0; j < 20; j++)
 8003fba:	2300      	movs	r3, #0
 8003fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003fbe:	e058      	b.n	8004072 <StartFlowTask+0x122>
		  {
			  HAL_TIM_Base_Start(&htim1);
 8003fc0:	48a9      	ldr	r0, [pc, #676]	; (8004268 <StartFlowTask+0x318>)
 8003fc2:	f002 fcc5 	bl	8006950 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1) + 9830250;
 8003fc6:	4ba8      	ldr	r3, [pc, #672]	; (8004268 <StartFlowTask+0x318>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fcc:	4ba7      	ldr	r3, [pc, #668]	; (800426c <StartFlowTask+0x31c>)
 8003fce:	4413      	add	r3, r2
 8003fd0:	63bb      	str	r3, [r7, #56]	; 0x38
			  while(total< tickS)
 8003fd2:	e042      	b.n	800405a <StartFlowTask+0x10a>
			  {
				  F = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);//b7
 8003fd4:	2140      	movs	r1, #64	; 0x40
 8003fd6:	48a3      	ldr	r0, [pc, #652]	; (8004264 <StartFlowTask+0x314>)
 8003fd8:	f001 fe5a 	bl	8005c90 <HAL_GPIO_ReadPin>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  if(F == 1 && F!=L)
 8003fe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d115      	bne.n	8004016 <StartFlowTask+0xc6>
 8003fea:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003fee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d00f      	beq.n	8004016 <StartFlowTask+0xc6>
				  {
					  C[j]++;
 8003ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ffe:	4413      	add	r3, r2
 8004000:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8004004:	3301      	adds	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004010:	440b      	add	r3, r1
 8004012:	f823 2c60 	strh.w	r2, [r3, #-96]
				  }
				  L=F;
 8004016:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800401a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 800401e:	4b92      	ldr	r3, [pc, #584]	; (8004268 <StartFlowTask+0x318>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	86fb      	strh	r3, [r7, #54]	; 0x36
				  if (temp < tickL)
 8004026:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004028:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800402c:	429a      	cmp	r2, r3
 800402e:	d20a      	bcs.n	8004046 <StartFlowTask+0xf6>
				  {
					  total = total + temp + (65535 - tickL);
 8004030:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004032:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004034:	441a      	add	r2, r3
 8004036:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004040:	33ff      	adds	r3, #255	; 0xff
 8004042:	65bb      	str	r3, [r7, #88]	; 0x58
 8004044:	e006      	b.n	8004054 <StartFlowTask+0x104>
				  }
				  else
				  {
					  total = total + temp - tickL;
 8004046:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004048:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800404a:	441a      	add	r2, r3
 800404c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	65bb      	str	r3, [r7, #88]	; 0x58
				  }
				  tickL = temp;
 8004054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004056:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  while(total< tickS)
 800405a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	429a      	cmp	r2, r3
 8004060:	d3b8      	bcc.n	8003fd4 <StartFlowTask+0x84>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8004062:	4881      	ldr	r0, [pc, #516]	; (8004268 <StartFlowTask+0x318>)
 8004064:	f002 fcbe 	bl	80069e4 <HAL_TIM_Base_Stop>
			  total = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int j =0; j < 20; j++)
 800406c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800406e:	3301      	adds	r3, #1
 8004070:	657b      	str	r3, [r7, #84]	; 0x54
 8004072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004074:	2b13      	cmp	r3, #19
 8004076:	dda3      	ble.n	8003fc0 <StartFlowTask+0x70>
		  }
		  for(int j =0; j < 20; j++)
 8004078:	2300      	movs	r3, #0
 800407a:	653b      	str	r3, [r7, #80]	; 0x50
 800407c:	e016      	b.n	80040ac <StartFlowTask+0x15c>
		  {
			  f1 = f1 + C[j];
 800407e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004086:	4413      	add	r3, r2
 8004088:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 800408c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004090:	4413      	add	r3, r2
 8004092:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			  C[j] = 0;
 8004096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800409e:	4413      	add	r3, r2
 80040a0:	2200      	movs	r2, #0
 80040a2:	f823 2c60 	strh.w	r2, [r3, #-96]
		  for(int j =0; j < 20; j++)
 80040a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a8:	3301      	adds	r3, #1
 80040aa:	653b      	str	r3, [r7, #80]	; 0x50
 80040ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ae:	2b13      	cmp	r3, #19
 80040b0:	dde5      	ble.n	800407e <StartFlowTask+0x12e>
		  }
		  f1 = f1 / 100;
 80040b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040b6:	4a6e      	ldr	r2, [pc, #440]	; (8004270 <StartFlowTask+0x320>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  Flow[0] = f1;
 80040c2:	4a6c      	ldr	r2, [pc, #432]	; (8004274 <StartFlowTask+0x324>)
 80040c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040c8:	8013      	strh	r3, [r2, #0]
		  o[0] = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80040d0:	e00d      	b.n	80040ee <StartFlowTask+0x19e>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[0] == 0)
 80040d2:	2180      	movs	r1, #128	; 0x80
 80040d4:	4863      	ldr	r0, [pc, #396]	; (8004264 <StartFlowTask+0x314>)
 80040d6:	f001 fddb 	bl	8005c90 <HAL_GPIO_ReadPin>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <StartFlowTask+0x19e>
 80040e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <StartFlowTask+0x19e>
	  {
		  o[0] = 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1 && o[1] == 1)
 80040ee:	2120      	movs	r1, #32
 80040f0:	485c      	ldr	r0, [pc, #368]	; (8004264 <StartFlowTask+0x314>)
 80040f2:	f001 fdcd 	bl	8005c90 <HAL_GPIO_ReadPin>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	f040 8093 	bne.w	8004224 <StartFlowTask+0x2d4>
 80040fe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004102:	2b01      	cmp	r3, #1
 8004104:	f040 808e 	bne.w	8004224 <StartFlowTask+0x2d4>
	  {
		  for(int j =0; j < 20; j++)
 8004108:	2300      	movs	r3, #0
 800410a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800410c:	e05a      	b.n	80041c4 <StartFlowTask+0x274>
		  {
			  HAL_TIM_Base_Start(&htim1);
 800410e:	4856      	ldr	r0, [pc, #344]	; (8004268 <StartFlowTask+0x318>)
 8004110:	f002 fc1e 	bl	8006950 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1) + 327675;// needs an adjustment for correct timing**********
 8004114:	4b54      	ldr	r3, [pc, #336]	; (8004268 <StartFlowTask+0x318>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f503 239f 	add.w	r3, r3, #325632	; 0x4f800
 800411e:	f203 73fb 	addw	r3, r3, #2043	; 0x7fb
 8004122:	63bb      	str	r3, [r7, #56]	; 0x38
			  while(total < tickS)
 8004124:	e042      	b.n	80041ac <StartFlowTask+0x25c>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);//b5
 8004126:	2102      	movs	r1, #2
 8004128:	4853      	ldr	r0, [pc, #332]	; (8004278 <StartFlowTask+0x328>)
 800412a:	f001 fdb1 	bl	8005c90 <HAL_GPIO_ReadPin>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  if(F == 1 && F!=L)
 8004134:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004138:	2b01      	cmp	r3, #1
 800413a:	d115      	bne.n	8004168 <StartFlowTask+0x218>
 800413c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004140:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004144:	429a      	cmp	r2, r3
 8004146:	d00f      	beq.n	8004168 <StartFlowTask+0x218>
				  {
					  C[j]++;
 8004148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004150:	4413      	add	r3, r2
 8004152:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8004156:	3301      	adds	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004162:	440b      	add	r3, r1
 8004164:	f823 2c60 	strh.w	r2, [r3, #-96]
				  }
				  L=F;
 8004168:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800416c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8004170:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <StartFlowTask+0x318>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	86fb      	strh	r3, [r7, #54]	; 0x36
				  if (temp < tickL)
 8004178:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800417a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800417e:	429a      	cmp	r2, r3
 8004180:	d20a      	bcs.n	8004198 <StartFlowTask+0x248>
					  total = total + temp + (65535 - tickL);
 8004182:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004186:	441a      	add	r2, r3
 8004188:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004192:	33ff      	adds	r3, #255	; 0xff
 8004194:	65bb      	str	r3, [r7, #88]	; 0x58
 8004196:	e006      	b.n	80041a6 <StartFlowTask+0x256>

				  else
					  total = total + temp - tickL;
 8004198:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800419a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800419c:	441a      	add	r2, r3
 800419e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	65bb      	str	r3, [r7, #88]	; 0x58

				  tickL = temp;
 80041a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041a8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  while(total < tickS)
 80041ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d3b8      	bcc.n	8004126 <StartFlowTask+0x1d6>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 80041b4:	482c      	ldr	r0, [pc, #176]	; (8004268 <StartFlowTask+0x318>)
 80041b6:	f002 fc15 	bl	80069e4 <HAL_TIM_Base_Stop>
			  total = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int j =0; j < 20; j++)
 80041be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c0:	3301      	adds	r3, #1
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c6:	2b13      	cmp	r3, #19
 80041c8:	dda1      	ble.n	800410e <StartFlowTask+0x1be>
		  }
		  for(int j =0; j < 20; j++)
 80041ca:	2300      	movs	r3, #0
 80041cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ce:	e016      	b.n	80041fe <StartFlowTask+0x2ae>
		  {
			  f2 = f2 + C[j];
 80041d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80041d8:	4413      	add	r3, r2
 80041da:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 80041de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80041e2:	4413      	add	r3, r2
 80041e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			  C[j] = 0;
 80041e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80041f0:	4413      	add	r3, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	f823 2c60 	strh.w	r2, [r3, #-96]
		  for(int j =0; j < 20; j++)
 80041f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fa:	3301      	adds	r3, #1
 80041fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80041fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004200:	2b13      	cmp	r3, #19
 8004202:	dde5      	ble.n	80041d0 <StartFlowTask+0x280>
		  }
		  f2 = f2 / 100;
 8004204:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004208:	4a19      	ldr	r2, [pc, #100]	; (8004270 <StartFlowTask+0x320>)
 800420a:	fba2 2303 	umull	r2, r3, r2, r3
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  Flow[1] = f2;
 8004214:	4a17      	ldr	r2, [pc, #92]	; (8004274 <StartFlowTask+0x324>)
 8004216:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800421a:	8053      	strh	r3, [r2, #2]
		  o[1] = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004222:	e00d      	b.n	8004240 <StartFlowTask+0x2f0>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0 && o[1] == 0)
 8004224:	2120      	movs	r1, #32
 8004226:	480f      	ldr	r0, [pc, #60]	; (8004264 <StartFlowTask+0x314>)
 8004228:	f001 fd32 	bl	8005c90 <HAL_GPIO_ReadPin>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <StartFlowTask+0x2f0>
 8004232:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <StartFlowTask+0x2f0>
	  {
		  o[1] = 1;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[2] == 1)
 8004240:	2180      	movs	r1, #128	; 0x80
 8004242:	4808      	ldr	r0, [pc, #32]	; (8004264 <StartFlowTask+0x314>)
 8004244:	f001 fd24 	bl	8005c90 <HAL_GPIO_ReadPin>
 8004248:	4603      	mov	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	f040 80a1 	bne.w	8004392 <StartFlowTask+0x442>
 8004250:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004254:	2b01      	cmp	r3, #1
 8004256:	f040 809c 	bne.w	8004392 <StartFlowTask+0x442>
	  {
		  for(int j =0; j < 20; j++)
 800425a:	2300      	movs	r3, #0
 800425c:	647b      	str	r3, [r7, #68]	; 0x44
 800425e:	e068      	b.n	8004332 <StartFlowTask+0x3e2>
 8004260:	0800a2f4 	.word	0x0800a2f4
 8004264:	40010c00 	.word	0x40010c00
 8004268:	20002828 	.word	0x20002828
 800426c:	0095ff6a 	.word	0x0095ff6a
 8004270:	51eb851f 	.word	0x51eb851f
 8004274:	2000003c 	.word	0x2000003c
 8004278:	40011000 	.word	0x40011000
		  {
			  HAL_TIM_Base_Start(&htim1);
 800427c:	484e      	ldr	r0, [pc, #312]	; (80043b8 <StartFlowTask+0x468>)
 800427e:	f002 fb67 	bl	8006950 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1) + 327675;// needs an adjustment for correct timing**********
 8004282:	4b4d      	ldr	r3, [pc, #308]	; (80043b8 <StartFlowTask+0x468>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	f503 239f 	add.w	r3, r3, #325632	; 0x4f800
 800428c:	f203 73fb 	addw	r3, r3, #2043	; 0x7fb
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
			  while(total < tickS)
 8004292:	e042      	b.n	800431a <StartFlowTask+0x3ca>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b4
 8004294:	2104      	movs	r1, #4
 8004296:	4849      	ldr	r0, [pc, #292]	; (80043bc <StartFlowTask+0x46c>)
 8004298:	f001 fcfa 	bl	8005c90 <HAL_GPIO_ReadPin>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  if(F == 1 && F!=L)
 80042a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d115      	bne.n	80042d6 <StartFlowTask+0x386>
 80042aa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80042ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d00f      	beq.n	80042d6 <StartFlowTask+0x386>
				  {
					  C[j]++;
 80042b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80042be:	4413      	add	r3, r2
 80042c0:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80042c4:	3301      	adds	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80042d0:	440b      	add	r3, r1
 80042d2:	f823 2c60 	strh.w	r2, [r3, #-96]
				  }
				  L=F;
 80042d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80042da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 80042de:	4b36      	ldr	r3, [pc, #216]	; (80043b8 <StartFlowTask+0x468>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	86fb      	strh	r3, [r7, #54]	; 0x36
				  if (temp < tickL)
 80042e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80042e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d20a      	bcs.n	8004306 <StartFlowTask+0x3b6>
					  total = total + temp + (65535 - tickL);
 80042f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80042f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f4:	441a      	add	r2, r3
 80042f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004300:	33ff      	adds	r3, #255	; 0xff
 8004302:	65bb      	str	r3, [r7, #88]	; 0x58
 8004304:	e006      	b.n	8004314 <StartFlowTask+0x3c4>

				  else
					  total = total+ temp - tickL;
 8004306:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004308:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800430a:	441a      	add	r2, r3
 800430c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	65bb      	str	r3, [r7, #88]	; 0x58

				  tickL = temp;
 8004314:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004316:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  while(total < tickS)
 800431a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	429a      	cmp	r2, r3
 8004320:	d3b8      	bcc.n	8004294 <StartFlowTask+0x344>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8004322:	4825      	ldr	r0, [pc, #148]	; (80043b8 <StartFlowTask+0x468>)
 8004324:	f002 fb5e 	bl	80069e4 <HAL_TIM_Base_Stop>
			  total = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int j =0; j < 20; j++)
 800432c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432e:	3301      	adds	r3, #1
 8004330:	647b      	str	r3, [r7, #68]	; 0x44
 8004332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004334:	2b13      	cmp	r3, #19
 8004336:	dda1      	ble.n	800427c <StartFlowTask+0x32c>
		  }
		  for(int j =0; j < 20; j++)
 8004338:	2300      	movs	r3, #0
 800433a:	643b      	str	r3, [r7, #64]	; 0x40
 800433c:	e016      	b.n	800436c <StartFlowTask+0x41c>
		  {
			  f1 = f1 + C[j];
 800433e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004346:	4413      	add	r3, r2
 8004348:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 800434c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004350:	4413      	add	r3, r2
 8004352:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			  C[j] = 0;
 8004356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800435e:	4413      	add	r3, r2
 8004360:	2200      	movs	r2, #0
 8004362:	f823 2c60 	strh.w	r2, [r3, #-96]
		  for(int j =0; j < 20; j++)
 8004366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004368:	3301      	adds	r3, #1
 800436a:	643b      	str	r3, [r7, #64]	; 0x40
 800436c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436e:	2b13      	cmp	r3, #19
 8004370:	dde5      	ble.n	800433e <StartFlowTask+0x3ee>
		  }
		  f3 = f3 / 100;
 8004372:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <StartFlowTask+0x470>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		  Flow[2] = f3;
 8004382:	4a10      	ldr	r2, [pc, #64]	; (80043c4 <StartFlowTask+0x474>)
 8004384:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004388:	8093      	strh	r3, [r2, #4]
		  o[2] = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004390:	e00d      	b.n	80043ae <StartFlowTask+0x45e>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[2] == 0)
 8004392:	2180      	movs	r1, #128	; 0x80
 8004394:	480c      	ldr	r0, [pc, #48]	; (80043c8 <StartFlowTask+0x478>)
 8004396:	f001 fc7b 	bl	8005c90 <HAL_GPIO_ReadPin>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <StartFlowTask+0x45e>
 80043a0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <StartFlowTask+0x45e>
	  {
		  o[2] = 1;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	  }
	  osDelay(1);
 80043ae:	2001      	movs	r0, #1
 80043b0:	f003 fa42 	bl	8007838 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 80043b4:	e5f4      	b.n	8003fa0 <StartFlowTask+0x50>
 80043b6:	bf00      	nop
 80043b8:	20002828 	.word	0x20002828
 80043bc:	40011000 	.word	0x40011000
 80043c0:	51eb851f 	.word	0x51eb851f
 80043c4:	2000003c 	.word	0x2000003c
 80043c8:	40010c00 	.word	0x40010c00

080043cc <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */

	initializeNodes();
 80043d4:	f000 f864 	bl	80044a0 <initializeNodes>
	uint16_t Weather[2], Web[2];
	uint16_t C =0;
 80043d8:	2300      	movs	r3, #0
 80043da:	82fb      	strh	r3, [r7, #22]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 100) == HAL_OK)
 80043dc:	2364      	movs	r3, #100	; 0x64
 80043de:	221a      	movs	r2, #26
 80043e0:	4913      	ldr	r1, [pc, #76]	; (8004430 <StartProcessingTask+0x64>)
 80043e2:	4814      	ldr	r0, [pc, #80]	; (8004434 <StartProcessingTask+0x68>)
 80043e4:	f002 ffa1 	bl	800732a <HAL_UART_Receive>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11a      	bne.n	8004424 <StartProcessingTask+0x58>
	 	  	 {
	 	  		 //HAL_UART_Transmit(&huart1, uartBufferRX, 13, 1000); // send info to Olivia when recieved
	 	  		 //has to stay with main (the file where the "UART_HandleTypeDef huart3;" is)
	 	  		 if (uartBufferRX[0] == 0x7E)
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <StartProcessingTask+0x64>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b7e      	cmp	r3, #126	; 0x7e
 80043f4:	d116      	bne.n	8004424 <StartProcessingTask+0x58>
	 	  		 {
	 	  			 switch (uartBufferRX[3])
 80043f6:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <StartProcessingTask+0x64>)
 80043f8:	78db      	ldrb	r3, [r3, #3]
 80043fa:	2b92      	cmp	r3, #146	; 0x92
 80043fc:	d002      	beq.n	8004404 <StartProcessingTask+0x38>
 80043fe:	2b97      	cmp	r3, #151	; 0x97
 8004400:	d004      	beq.n	800440c <StartProcessingTask+0x40>
 8004402:	e007      	b.n	8004414 <StartProcessingTask+0x48>
	 	  			 {
	 	  			 case 0x92:
	 	  				 processIO(uartBufferRX);
 8004404:	480a      	ldr	r0, [pc, #40]	; (8004430 <StartProcessingTask+0x64>)
 8004406:	f000 f95b 	bl	80046c0 <processIO>
	 	  				 break;
 800440a:	e00c      	b.n	8004426 <StartProcessingTask+0x5a>

	 	  			 case 0x97:
	 	  				 processATResponse(uartBufferRX);
 800440c:	4808      	ldr	r0, [pc, #32]	; (8004430 <StartProcessingTask+0x64>)
 800440e:	f000 f8f1 	bl	80045f4 <processATResponse>
	 	  				 break;
 8004412:	e008      	b.n	8004426 <StartProcessingTask+0x5a>

	 	  			 default://if it wasnt an expected data type just throw it out
	 	  				 HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 1000);
 8004414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004418:	221a      	movs	r2, #26
 800441a:	4905      	ldr	r1, [pc, #20]	; (8004430 <StartProcessingTask+0x64>)
 800441c:	4805      	ldr	r0, [pc, #20]	; (8004434 <StartProcessingTask+0x68>)
 800441e:	f002 ff84 	bl	800732a <HAL_UART_Receive>
	 	  				 break;
 8004422:	e000      	b.n	8004426 <StartProcessingTask+0x5a>
	 	  			 }
	 	  		  }
 8004424:	bf00      	nop
//	  {//when receiving data put it in this array
//		  Web[C] = input;
//		  C++;
//	  }
//	  C = 0;
    osDelay(50);
 8004426:	2032      	movs	r0, #50	; 0x32
 8004428:	f003 fa06 	bl	8007838 <osDelay>
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 100) == HAL_OK)
 800442c:	e7d6      	b.n	80043dc <StartProcessingTask+0x10>
 800442e:	bf00      	nop
 8004430:	2000253c 	.word	0x2000253c
 8004434:	200024bc 	.word	0x200024bc

08004438 <StartWebsiteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebsiteTask */
void StartWebsiteTask(void *argument)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b090      	sub	sp, #64	; 0x40
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
//	  if(osMessageQueueGet(SolenoidQueueHandle, &input, NULL, 0U ) == osOK)
//	  {//when receiving data put it in this array
//		  water = water + input;
//		  HAL_UART_Transmit(&huart1, &water, 1, 10);//*********also send Colton's info************
//	  }
	  if(HAL_UART_Receive(&huart1, BufferRX, 5, 10) == HAL_OK)
 8004440:	f107 010c 	add.w	r1, r7, #12
 8004444:	230a      	movs	r3, #10
 8004446:	2205      	movs	r2, #5
 8004448:	4808      	ldr	r0, [pc, #32]	; (800446c <StartWebsiteTask+0x34>)
 800444a:	f002 ff6e 	bl	800732a <HAL_UART_Receive>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d107      	bne.n	8004464 <StartWebsiteTask+0x2c>
  	  {
  		osMessageQueuePut(WebsiteQueueHandle, &BufferRX, 1U, 0U);
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <StartWebsiteTask+0x38>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	f107 010c 	add.w	r1, r7, #12
 800445c:	2300      	movs	r3, #0
 800445e:	2201      	movs	r2, #1
 8004460:	f003 fa9e 	bl	80079a0 <osMessageQueuePut>
  	  }
    osDelay(50);
 8004464:	2032      	movs	r0, #50	; 0x32
 8004466:	f003 f9e7 	bl	8007838 <osDelay>
	  if(HAL_UART_Receive(&huart1, BufferRX, 5, 10) == HAL_OK)
 800446a:	e7e9      	b.n	8004440 <StartWebsiteTask+0x8>
 800446c:	200024fc 	.word	0x200024fc
 8004470:	20002820 	.word	0x20002820

08004474 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a04      	ldr	r2, [pc, #16]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d101      	bne.n	800448a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004486:	f000 fd7b 	bl	8004f80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40000800 	.word	0x40000800

08004498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800449c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800449e:	e7fe      	b.n	800449e <Error_Handler+0x6>

080044a0 <initializeNodes>:
 */

#include "sensorObjects.h"

void initializeNodes()
{
 80044a0:	b480      	push	{r7}
 80044a2:	b089      	sub	sp, #36	; 0x24
 80044a4:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 80044a6:	4a4f      	ldr	r2, [pc, #316]	; (80045e4 <initializeNodes+0x144>)
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044b0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 80044b4:	4a4c      	ldr	r2, [pc, #304]	; (80045e8 <initializeNodes+0x148>)
 80044b6:	f107 030c 	add.w	r3, r7, #12
 80044ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044be:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 80044c2:	4a4a      	ldr	r2, [pc, #296]	; (80045ec <initializeNodes+0x14c>)
 80044c4:	1d3b      	adds	r3, r7, #4
 80044c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044ca:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 80044ce:	2300      	movs	r3, #0
 80044d0:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 80044d2:	2300      	movs	r3, #0
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e053      	b.n	8004580 <initializeNodes+0xe0>
	{
		fairways[i].capacative[0]	= 0;
 80044d8:	7ffa      	ldrb	r2, [r7, #31]
 80044da:	4945      	ldr	r1, [pc, #276]	; (80045f0 <initializeNodes+0x150>)
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	4413      	add	r3, r2
 80044e2:	440b      	add	r3, r1
 80044e4:	330a      	adds	r3, #10
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
		fairways[i].capacative[1]	= 0;
 80044ea:	7ffa      	ldrb	r2, [r7, #31]
 80044ec:	4940      	ldr	r1, [pc, #256]	; (80045f0 <initializeNodes+0x150>)
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	4413      	add	r3, r2
 80044f4:	440b      	add	r3, r1
 80044f6:	330b      	adds	r3, #11
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]

		fairways[i].battery[0] 		= 0;
 80044fc:	7ffa      	ldrb	r2, [r7, #31]
 80044fe:	493c      	ldr	r1, [pc, #240]	; (80045f0 <initializeNodes+0x150>)
 8004500:	4613      	mov	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	4413      	add	r3, r2
 8004506:	440b      	add	r3, r1
 8004508:	330c      	adds	r3, #12
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
		fairways[i].battery[1] 		= 0;
 800450e:	7ffa      	ldrb	r2, [r7, #31]
 8004510:	4937      	ldr	r1, [pc, #220]	; (80045f0 <initializeNodes+0x150>)
 8004512:	4613      	mov	r3, r2
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4413      	add	r3, r2
 8004518:	440b      	add	r3, r1
 800451a:	330d      	adds	r3, #13
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]

		fairways[i].resistive[0] 	= 0;
 8004520:	7ffa      	ldrb	r2, [r7, #31]
 8004522:	4933      	ldr	r1, [pc, #204]	; (80045f0 <initializeNodes+0x150>)
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	4413      	add	r3, r2
 800452a:	440b      	add	r3, r1
 800452c:	3308      	adds	r3, #8
 800452e:	2200      	movs	r2, #0
 8004530:	701a      	strb	r2, [r3, #0]
		fairways[i].resistive[1] 	= 0;
 8004532:	7ffa      	ldrb	r2, [r7, #31]
 8004534:	492e      	ldr	r1, [pc, #184]	; (80045f0 <initializeNodes+0x150>)
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	4413      	add	r3, r2
 800453c:	440b      	add	r3, r1
 800453e:	3309      	adds	r3, #9
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]

		fairways[i].temperature[0]	= 0;
 8004544:	7ffa      	ldrb	r2, [r7, #31]
 8004546:	492a      	ldr	r1, [pc, #168]	; (80045f0 <initializeNodes+0x150>)
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	4413      	add	r3, r2
 800454e:	440b      	add	r3, r1
 8004550:	330e      	adds	r3, #14
 8004552:	2200      	movs	r2, #0
 8004554:	701a      	strb	r2, [r3, #0]
		fairways[i].temperature[1]	= 0;
 8004556:	7ffa      	ldrb	r2, [r7, #31]
 8004558:	4925      	ldr	r1, [pc, #148]	; (80045f0 <initializeNodes+0x150>)
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4413      	add	r3, r2
 8004560:	440b      	add	r3, r1
 8004562:	330f      	adds	r3, #15
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
		fairways[i].temperature[2]	= 0;
 8004568:	7ffa      	ldrb	r2, [r7, #31]
 800456a:	4921      	ldr	r1, [pc, #132]	; (80045f0 <initializeNodes+0x150>)
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	4413      	add	r3, r2
 8004572:	440b      	add	r3, r1
 8004574:	3310      	adds	r3, #16
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
	for (i = 0; i<32; i++)
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	3301      	adds	r3, #1
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	7ffb      	ldrb	r3, [r7, #31]
 8004582:	2b1f      	cmp	r3, #31
 8004584:	d9a8      	bls.n	80044d8 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8004586:	2300      	movs	r3, #0
 8004588:	77fb      	strb	r3, [r7, #31]
 800458a:	e022      	b.n	80045d2 <initializeNodes+0x132>
	{
		fairways[0].address[i] = BlueAddress[i];
 800458c:	7ffa      	ldrb	r2, [r7, #31]
 800458e:	7ffb      	ldrb	r3, [r7, #31]
 8004590:	f107 0120 	add.w	r1, r7, #32
 8004594:	440a      	add	r2, r1
 8004596:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <initializeNodes+0x150>)
 800459c:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 800459e:	7ffa      	ldrb	r2, [r7, #31]
 80045a0:	7ffb      	ldrb	r3, [r7, #31]
 80045a2:	f107 0120 	add.w	r1, r7, #32
 80045a6:	440a      	add	r2, r1
 80045a8:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 80045ac:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <initializeNodes+0x150>)
 80045ae:	4413      	add	r3, r2
 80045b0:	460a      	mov	r2, r1
 80045b2:	745a      	strb	r2, [r3, #17]
		fairways[2].address[i] = RedAddress[i];
 80045b4:	7ffa      	ldrb	r2, [r7, #31]
 80045b6:	7ffb      	ldrb	r3, [r7, #31]
 80045b8:	f107 0120 	add.w	r1, r7, #32
 80045bc:	440a      	add	r2, r1
 80045be:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 80045c2:	4a0b      	ldr	r2, [pc, #44]	; (80045f0 <initializeNodes+0x150>)
 80045c4:	4413      	add	r3, r2
 80045c6:	460a      	mov	r2, r1
 80045c8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	for (i= 0; i<8; i++)
 80045cc:	7ffb      	ldrb	r3, [r7, #31]
 80045ce:	3301      	adds	r3, #1
 80045d0:	77fb      	strb	r3, [r7, #31]
 80045d2:	7ffb      	ldrb	r3, [r7, #31]
 80045d4:	2b07      	cmp	r3, #7
 80045d6:	d9d9      	bls.n	800458c <initializeNodes+0xec>
	}

	return;
 80045d8:	bf00      	nop
}
 80045da:	3724      	adds	r7, #36	; 0x24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	0800a2f8 	.word	0x0800a2f8
 80045e8:	0800a300 	.word	0x0800a300
 80045ec:	0800a308 	.word	0x0800a308
 80045f0:	20002580 	.word	0x20002580

080045f4 <processATResponse>:

//Process Data
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void processATResponse(uint8_t *ATResponse)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	int nodeNum = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
	uint8_t battAsASCII[] = {0,0};
 8004600:	2300      	movs	r3, #0
 8004602:	723b      	strb	r3, [r7, #8]
 8004604:	2300      	movs	r3, #0
 8004606:	727b      	strb	r3, [r7, #9]

	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e04e      	b.n	80046ac <processATResponse+0xb8>
		{
			int match = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	613b      	str	r3, [r7, #16]
			//Compare the address in the API Frame to the address of our known nodes.
			//the address bytes in the API frame are 5-12
			//if we find a different byte, we know its the wrong address and do not have a match
			for (int j = 0; j<8; j++)
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e015      	b.n	8004644 <processATResponse+0x50>
			{
				if (ATResponse[j+5] != (fairways[nodeNum]).address[j])
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3305      	adds	r3, #5
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	4413      	add	r3, r2
 8004620:	7819      	ldrb	r1, [r3, #0]
 8004622:	4826      	ldr	r0, [pc, #152]	; (80046bc <processATResponse+0xc8>)
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	4413      	add	r3, r2
 800462c:	18c2      	adds	r2, r0, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4299      	cmp	r1, r3
 8004636:	d002      	beq.n	800463e <processATResponse+0x4a>
				{
					match = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
					break; //exit the loop, its not this node
 800463c:	e005      	b.n	800464a <processATResponse+0x56>
			for (int j = 0; j<8; j++)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b07      	cmp	r3, #7
 8004648:	dde6      	ble.n	8004618 <processATResponse+0x24>
				}
			}

			if (match == 1)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d12a      	bne.n	80046a6 <processATResponse+0xb2>
			{
				//get which data type it is
				//no longer need the first "IF" because the temp is now coming from an ADC
				//we will keep in so we could add ambient field temp in the future.
				if (ATResponse[15] == 0x25 && ATResponse[16] == 0x56) //if the AT command was "%V"
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	330f      	adds	r3, #15
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b25      	cmp	r3, #37	; 0x25
 8004658:	d123      	bne.n	80046a2 <processATResponse+0xae>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3310      	adds	r3, #16
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b56      	cmp	r3, #86	; 0x56
 8004662:	d11e      	bne.n	80046a2 <processATResponse+0xae>
				{
					calcPercent(ATResponse[18], ATResponse[19], battAsASCII);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3312      	adds	r3, #18
 8004668:	7818      	ldrb	r0, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	3313      	adds	r3, #19
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f107 0208 	add.w	r2, r7, #8
 8004674:	4619      	mov	r1, r3
 8004676:	f000 fa41 	bl	8004afc <calcPercent>
					fairways[nodeNum].battery[0] = battAsASCII[0];
 800467a:	7a38      	ldrb	r0, [r7, #8]
 800467c:	490f      	ldr	r1, [pc, #60]	; (80046bc <processATResponse+0xc8>)
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4613      	mov	r3, r2
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	4413      	add	r3, r2
 8004686:	440b      	add	r3, r1
 8004688:	330c      	adds	r3, #12
 800468a:	4602      	mov	r2, r0
 800468c:	701a      	strb	r2, [r3, #0]
					fairways[nodeNum].battery[0] = battAsASCII[0];
 800468e:	7a38      	ldrb	r0, [r7, #8]
 8004690:	490a      	ldr	r1, [pc, #40]	; (80046bc <processATResponse+0xc8>)
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4613      	mov	r3, r2
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	4413      	add	r3, r2
 800469a:	440b      	add	r3, r1
 800469c:	330c      	adds	r3, #12
 800469e:	4602      	mov	r2, r0
 80046a0:	701a      	strb	r2, [r3, #0]
				else
				{	//if we got an unexpected AT Command Type, give up and try again next time data is transmitted
					//uartInterruptInit(26);
				}

				nodeNum = 255; //break the loop. Break would work too but this explicitly breaks the correct loop if i move things.
 80046a2:	23ff      	movs	r3, #255	; 0xff
 80046a4:	617b      	str	r3, [r7, #20]
	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	3301      	adds	r3, #1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b23      	cmp	r3, #35	; 0x23
 80046b0:	ddad      	ble.n	800460e <processATResponse+0x1a>
			}
		}

  return;
 80046b2:	bf00      	nop
}
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20002580 	.word	0x20002580

080046c0 <processIO>:

void processIO(uint8_t *ioData)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	uint8_t nodeNumber = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]
	uint8_t	 match = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	75fb      	strb	r3, [r7, #23]

	uint8_t dataAsASCII[] = {0,0,0};
 80046d0:	2300      	movs	r3, #0
 80046d2:	733b      	strb	r3, [r7, #12]
 80046d4:	2300      	movs	r3, #0
 80046d6:	737b      	strb	r3, [r7, #13]
 80046d8:	2300      	movs	r3, #0
 80046da:	73bb      	strb	r3, [r7, #14]

	if(!verifyChecksum(ioData))
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f92b 	bl	8004938 <verifyChecksum>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 8095 	beq.w	8004814 <processIO+0x154>
		//Determine which sensor it belongs to
		//get the address, if it exists, put the data into it
		//if the addres doesnt already exist then make a new object to put data into
		//for now we will just use the three that we have

		for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 80046ea:	2300      	movs	r3, #0
 80046ec:	73fb      	strb	r3, [r7, #15]
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b23      	cmp	r3, #35	; 0x23
 80046f2:	f200 8089 	bhi.w	8004808 <processIO+0x148>
		{
			match = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	75fb      	strb	r3, [r7, #23]
			//Compare the address in the API Frame to the address of our known nodes.
			//the address bytes in the API frame are 5-12
			//if we find a different byte, we know its the wrong address and do not have a match
			for (int j = 0; j<8; j++)
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	e015      	b.n	800472c <processIO+0x6c>
			{
				if (ioData[j+4] != (fairways[nodeNumber]).address[j])
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	3304      	adds	r3, #4
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	4413      	add	r3, r2
 8004708:	7819      	ldrb	r1, [r3, #0]
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	4844      	ldr	r0, [pc, #272]	; (8004820 <processIO+0x160>)
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	4413      	add	r3, r2
 8004714:	18c2      	adds	r2, r0, r3
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4413      	add	r3, r2
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	4299      	cmp	r1, r3
 800471e:	d002      	beq.n	8004726 <processIO+0x66>
				{
					match = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
					break;//it is not this nodeNumer (j value)
 8004724:	e005      	b.n	8004732 <processIO+0x72>
			for (int j = 0; j<8; j++)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3301      	adds	r3, #1
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b07      	cmp	r3, #7
 8004730:	dde6      	ble.n	8004700 <processIO+0x40>
				}
			}

			if (match == 1)
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d16f      	bne.n	8004818 <processIO+0x158>
			{
				calcTemp(ioData[19], ioData[20], dataAsASCII);//put the temp values into a three byte array
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3313      	adds	r3, #19
 800473c:	7818      	ldrb	r0, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3314      	adds	r3, #20
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f107 020c 	add.w	r2, r7, #12
 8004748:	4619      	mov	r1, r3
 800474a:	f000 f957 	bl	80049fc <calcTemp>
				fairways[nodeNumber].temperature[0]	= dataAsASCII[0];
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	7b38      	ldrb	r0, [r7, #12]
 8004752:	4933      	ldr	r1, [pc, #204]	; (8004820 <processIO+0x160>)
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	4413      	add	r3, r2
 800475a:	440b      	add	r3, r1
 800475c:	330e      	adds	r3, #14
 800475e:	4602      	mov	r2, r0
 8004760:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].temperature[1]	= dataAsASCII[1];
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	7b78      	ldrb	r0, [r7, #13]
 8004766:	492e      	ldr	r1, [pc, #184]	; (8004820 <processIO+0x160>)
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	4413      	add	r3, r2
 800476e:	440b      	add	r3, r1
 8004770:	330f      	adds	r3, #15
 8004772:	4602      	mov	r2, r0
 8004774:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].temperature[2]	= dataAsASCII[2];
 8004776:	7bfa      	ldrb	r2, [r7, #15]
 8004778:	7bb8      	ldrb	r0, [r7, #14]
 800477a:	4929      	ldr	r1, [pc, #164]	; (8004820 <processIO+0x160>)
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	4413      	add	r3, r2
 8004782:	440b      	add	r3, r1
 8004784:	3310      	adds	r3, #16
 8004786:	4602      	mov	r2, r0
 8004788:	701a      	strb	r2, [r3, #0]

				calcPercent(ioData[21], ioData[22], dataAsASCII);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3315      	adds	r3, #21
 800478e:	7818      	ldrb	r0, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3316      	adds	r3, #22
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	f107 020c 	add.w	r2, r7, #12
 800479a:	4619      	mov	r1, r3
 800479c:	f000 f9ae 	bl	8004afc <calcPercent>
				fairways[nodeNumber].resistive[0]	= dataAsASCII[0];
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	7b38      	ldrb	r0, [r7, #12]
 80047a4:	491e      	ldr	r1, [pc, #120]	; (8004820 <processIO+0x160>)
 80047a6:	4613      	mov	r3, r2
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	4413      	add	r3, r2
 80047ac:	440b      	add	r3, r1
 80047ae:	3308      	adds	r3, #8
 80047b0:	4602      	mov	r2, r0
 80047b2:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].resistive[1]	= dataAsASCII[1];
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	7b78      	ldrb	r0, [r7, #13]
 80047b8:	4919      	ldr	r1, [pc, #100]	; (8004820 <processIO+0x160>)
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	4413      	add	r3, r2
 80047c0:	440b      	add	r3, r1
 80047c2:	3309      	adds	r3, #9
 80047c4:	4602      	mov	r2, r0
 80047c6:	701a      	strb	r2, [r3, #0]

				calcPercent(ioData[21], ioData[22], dataAsASCII);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3315      	adds	r3, #21
 80047cc:	7818      	ldrb	r0, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3316      	adds	r3, #22
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f107 020c 	add.w	r2, r7, #12
 80047d8:	4619      	mov	r1, r3
 80047da:	f000 f98f 	bl	8004afc <calcPercent>
				fairways[nodeNumber].capacative[0]	= dataAsASCII[0];
 80047de:	7bfa      	ldrb	r2, [r7, #15]
 80047e0:	7b38      	ldrb	r0, [r7, #12]
 80047e2:	490f      	ldr	r1, [pc, #60]	; (8004820 <processIO+0x160>)
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	4413      	add	r3, r2
 80047ea:	440b      	add	r3, r1
 80047ec:	330a      	adds	r3, #10
 80047ee:	4602      	mov	r2, r0
 80047f0:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].capacative[1]	= dataAsASCII[1];
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	7b78      	ldrb	r0, [r7, #13]
 80047f6:	490a      	ldr	r1, [pc, #40]	; (8004820 <processIO+0x160>)
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	4413      	add	r3, r2
 80047fe:	440b      	add	r3, r1
 8004800:	330b      	adds	r3, #11
 8004802:	4602      	mov	r2, r0
 8004804:	701a      	strb	r2, [r3, #0]

				break;
 8004806:	bf00      	nop
		}
	}
	//__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_TC);

	//uartInterruptInit(21);
	sendBattRequest(nodeNumber);
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	4618      	mov	r0, r3
 800480c:	f000 f80a 	bl	8004824 <sendBattRequest>

  return;
 8004810:	bf00      	nop
 8004812:	e002      	b.n	800481a <processIO+0x15a>
		return;//include an error report here if time permits
 8004814:	bf00      	nop
 8004816:	e000      	b.n	800481a <processIO+0x15a>
				return;
 8004818:	bf00      	nop
}
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20002580 	.word	0x20002580

08004824 <sendBattRequest>:

//Send Data Requests
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void sendBattRequest(uint8_t nodeNumber)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	71fb      	strb	r3, [r7, #7]
	uartBufferTX[0] = 0x7E; //startDelim
 800482e:	4b3f      	ldr	r3, [pc, #252]	; (800492c <sendBattRequest+0x108>)
 8004830:	227e      	movs	r2, #126	; 0x7e
 8004832:	701a      	strb	r2, [r3, #0]
	uartBufferTX[1] = 0x00; //length byte 1
 8004834:	4b3d      	ldr	r3, [pc, #244]	; (800492c <sendBattRequest+0x108>)
 8004836:	2200      	movs	r2, #0
 8004838:	705a      	strb	r2, [r3, #1]
	uartBufferTX[2] = 0x0F; //length byte 2
 800483a:	4b3c      	ldr	r3, [pc, #240]	; (800492c <sendBattRequest+0x108>)
 800483c:	220f      	movs	r2, #15
 800483e:	709a      	strb	r2, [r3, #2]
	uartBufferTX[3] = 0x17; //Frame Type
 8004840:	4b3a      	ldr	r3, [pc, #232]	; (800492c <sendBattRequest+0x108>)
 8004842:	2217      	movs	r2, #23
 8004844:	70da      	strb	r2, [r3, #3]
	uartBufferTX[4] = 0x01; //Frame ID
 8004846:	4b39      	ldr	r3, [pc, #228]	; (800492c <sendBattRequest+0x108>)
 8004848:	2201      	movs	r2, #1
 800484a:	711a      	strb	r2, [r3, #4]
	uartBufferTX[5] = 	fairways[nodeNumber].address[0]; //start of 64bit address
 800484c:	79fa      	ldrb	r2, [r7, #7]
 800484e:	4938      	ldr	r1, [pc, #224]	; (8004930 <sendBattRequest+0x10c>)
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	4413      	add	r3, r2
 8004856:	440b      	add	r3, r1
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	4b34      	ldr	r3, [pc, #208]	; (800492c <sendBattRequest+0x108>)
 800485c:	715a      	strb	r2, [r3, #5]
	uartBufferTX[6] = 	fairways[nodeNumber].address[1];
 800485e:	79fa      	ldrb	r2, [r7, #7]
 8004860:	4933      	ldr	r1, [pc, #204]	; (8004930 <sendBattRequest+0x10c>)
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	4413      	add	r3, r2
 8004868:	440b      	add	r3, r1
 800486a:	3301      	adds	r3, #1
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	4b2f      	ldr	r3, [pc, #188]	; (800492c <sendBattRequest+0x108>)
 8004870:	719a      	strb	r2, [r3, #6]
	uartBufferTX[7] = 	fairways[nodeNumber].address[2];
 8004872:	79fa      	ldrb	r2, [r7, #7]
 8004874:	492e      	ldr	r1, [pc, #184]	; (8004930 <sendBattRequest+0x10c>)
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	4413      	add	r3, r2
 800487c:	440b      	add	r3, r1
 800487e:	3302      	adds	r3, #2
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	4b2a      	ldr	r3, [pc, #168]	; (800492c <sendBattRequest+0x108>)
 8004884:	71da      	strb	r2, [r3, #7]
	uartBufferTX[8] = 	fairways[nodeNumber].address[3];
 8004886:	79fa      	ldrb	r2, [r7, #7]
 8004888:	4929      	ldr	r1, [pc, #164]	; (8004930 <sendBattRequest+0x10c>)
 800488a:	4613      	mov	r3, r2
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	4413      	add	r3, r2
 8004890:	440b      	add	r3, r1
 8004892:	3303      	adds	r3, #3
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	4b25      	ldr	r3, [pc, #148]	; (800492c <sendBattRequest+0x108>)
 8004898:	721a      	strb	r2, [r3, #8]
	uartBufferTX[9] = 	fairways[nodeNumber].address[4];
 800489a:	79fa      	ldrb	r2, [r7, #7]
 800489c:	4924      	ldr	r1, [pc, #144]	; (8004930 <sendBattRequest+0x10c>)
 800489e:	4613      	mov	r3, r2
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	4413      	add	r3, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	3304      	adds	r3, #4
 80048a8:	781a      	ldrb	r2, [r3, #0]
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <sendBattRequest+0x108>)
 80048ac:	725a      	strb	r2, [r3, #9]
	uartBufferTX[10] =	fairways[nodeNumber].address[5];
 80048ae:	79fa      	ldrb	r2, [r7, #7]
 80048b0:	491f      	ldr	r1, [pc, #124]	; (8004930 <sendBattRequest+0x10c>)
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	4413      	add	r3, r2
 80048b8:	440b      	add	r3, r1
 80048ba:	3305      	adds	r3, #5
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <sendBattRequest+0x108>)
 80048c0:	729a      	strb	r2, [r3, #10]
	uartBufferTX[11] = 	fairways[nodeNumber].address[6];
 80048c2:	79fa      	ldrb	r2, [r7, #7]
 80048c4:	491a      	ldr	r1, [pc, #104]	; (8004930 <sendBattRequest+0x10c>)
 80048c6:	4613      	mov	r3, r2
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	4413      	add	r3, r2
 80048cc:	440b      	add	r3, r1
 80048ce:	3306      	adds	r3, #6
 80048d0:	781a      	ldrb	r2, [r3, #0]
 80048d2:	4b16      	ldr	r3, [pc, #88]	; (800492c <sendBattRequest+0x108>)
 80048d4:	72da      	strb	r2, [r3, #11]
	uartBufferTX[12] = 	fairways[nodeNumber].address[7]; //last of 64bit address
 80048d6:	79fa      	ldrb	r2, [r7, #7]
 80048d8:	4915      	ldr	r1, [pc, #84]	; (8004930 <sendBattRequest+0x10c>)
 80048da:	4613      	mov	r3, r2
 80048dc:	011b      	lsls	r3, r3, #4
 80048de:	4413      	add	r3, r2
 80048e0:	440b      	add	r3, r1
 80048e2:	3307      	adds	r3, #7
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	4b11      	ldr	r3, [pc, #68]	; (800492c <sendBattRequest+0x108>)
 80048e8:	731a      	strb	r2, [r3, #12]
	uartBufferTX[13] = 0xFF;//Start of 16 bit address
 80048ea:	4b10      	ldr	r3, [pc, #64]	; (800492c <sendBattRequest+0x108>)
 80048ec:	22ff      	movs	r2, #255	; 0xff
 80048ee:	735a      	strb	r2, [r3, #13]
	uartBufferTX[14] = 0xFE;//End of 16 bit address
 80048f0:	4b0e      	ldr	r3, [pc, #56]	; (800492c <sendBattRequest+0x108>)
 80048f2:	22fe      	movs	r2, #254	; 0xfe
 80048f4:	739a      	strb	r2, [r3, #14]
	uartBufferTX[15] = 0x02;//Command Options - 0x02 means apply
 80048f6:	4b0d      	ldr	r3, [pc, #52]	; (800492c <sendBattRequest+0x108>)
 80048f8:	2202      	movs	r2, #2
 80048fa:	73da      	strb	r2, [r3, #15]
	uartBufferTX[16] = 0x25;//AT Command Byte 1 - 0x25 is '%'
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <sendBattRequest+0x108>)
 80048fe:	2225      	movs	r2, #37	; 0x25
 8004900:	741a      	strb	r2, [r3, #16]
	uartBufferTX[17] = 0x56;//AT Command Byte 2 - 0x56 is 'V'
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <sendBattRequest+0x108>)
 8004904:	2256      	movs	r2, #86	; 0x56
 8004906:	745a      	strb	r2, [r3, #17]
	uartBufferTX[18] = generateChecksum(uartBufferTX);//Checksum (as calculated by XCTU)
 8004908:	4808      	ldr	r0, [pc, #32]	; (800492c <sendBattRequest+0x108>)
 800490a:	f000 f846 	bl	800499a <generateChecksum>
 800490e:	4603      	mov	r3, r0
 8004910:	461a      	mov	r2, r3
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <sendBattRequest+0x108>)
 8004914:	749a      	strb	r2, [r3, #18]

	HAL_UART_Transmit(&huart3, uartBufferTX, 19, 1);
 8004916:	2301      	movs	r3, #1
 8004918:	2213      	movs	r2, #19
 800491a:	4904      	ldr	r1, [pc, #16]	; (800492c <sendBattRequest+0x108>)
 800491c:	4805      	ldr	r0, [pc, #20]	; (8004934 <sendBattRequest+0x110>)
 800491e:	f002 fc72 	bl	8007206 <HAL_UART_Transmit>
	return;
 8004922:	bf00      	nop
}
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	200028c8 	.word	0x200028c8
 8004930:	20002580 	.word	0x20002580
 8004934:	200024bc 	.word	0x200024bc

08004938 <verifyChecksum>:
return;
}
//Checksum Functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t verifyChecksum(uint8_t *ioData)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	uint16_t lengthOfData = ioData[1] * 256 + ioData[2]; //this value should always be 17
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3301      	adds	r3, #1
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3302      	adds	r3, #2
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b29b      	uxth	r3, r3
 8004954:	4413      	add	r3, r2
 8004956:	81fb      	strh	r3, [r7, #14]
	uint16_t checkSumCompare = 0; //calculate the check sum and see if it matches the value recieved
 8004958:	2300      	movs	r3, #0
 800495a:	82fb      	strh	r3, [r7, #22]
	/* to verify the checksum:
	 * Add all bytes including the checksum; do not include the delimiter and length.
	 * If the checksum is correct, the last two digits on the far right of the sum equal 0xFF.
	 */

	for (int i = 0; i<=lengthOfData; i++)
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	e00b      	b.n	800497a <verifyChecksum+0x42>
	{	//i<=lengthOfData includes checksum value, as opposed to i<lengthOfData which does not
		checkSumCompare += ioData[i+3]; //i+3 becasue we skip the delim and length values
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	3303      	adds	r3, #3
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	b29a      	uxth	r2, r3
 800496e:	8afb      	ldrh	r3, [r7, #22]
 8004970:	4413      	add	r3, r2
 8004972:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i<=lengthOfData; i++)
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3301      	adds	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	ddef      	ble.n	8004962 <verifyChecksum+0x2a>
	}

	if ((checkSumCompare & 0xFF) == 0xFF) //clears all bits except lowest 8 then compares
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2bff      	cmp	r3, #255	; 0xff
 8004988:	d101      	bne.n	800498e <verifyChecksum+0x56>
	{
		return 1;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <verifyChecksum+0x58>
	}
	else
	{
		return 0;
 800498e:	2300      	movs	r3, #0
	}
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <generateChecksum>:

uint8_t generateChecksum(uint8_t *frame)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
	 * Add all bytes of the packet, except the start delimiter 0x7E and the length (the second and third bytes).
	 * Keep only the lowest 8 bits from the result.
   	 * Subtract this quantity from 0xFF.
   	 */

	uint16_t length = frame[1]*256 + frame[2];
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3301      	adds	r3, #1
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3302      	adds	r3, #2
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	817b      	strh	r3, [r7, #10]
	uint8_t i = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
	uint16_t sum= 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	81bb      	strh	r3, [r7, #12]

	for (i=0; i<length; i++)
 80049c2:	2300      	movs	r3, #0
 80049c4:	73fb      	strb	r3, [r7, #15]
 80049c6:	e00b      	b.n	80049e0 <generateChecksum+0x46>
	{
		sum += frame[i+3];
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	3303      	adds	r3, #3
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	89bb      	ldrh	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	81bb      	strh	r3, [r7, #12]
	for (i=0; i<length; i++)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	3301      	adds	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	897a      	ldrh	r2, [r7, #10]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d8ee      	bhi.n	80049c8 <generateChecksum+0x2e>
		//sum = sum & 0xFF;//we only need the last two bits in the end
		//this clears off the high numbers that we dont need so we can use
		//a smaller data type
	}

	return (0xFF - sum);
 80049ea:	89bb      	ldrh	r3, [r7, #12]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	b2db      	uxtb	r3, r3
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <calcTemp>:

//Calculations
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void calcTemp(uint8_t ADC0_19, uint8_t ADC0_20, uint8_t *threeByteArray)
{
 80049fc:	b590      	push	{r4, r7, lr}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	603a      	str	r2, [r7, #0]
 8004a06:	71fb      	strb	r3, [r7, #7]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	71bb      	strb	r3, [r7, #6]
	int ADC = ADC0_19*256 + ADC0_20; //wrt real ground, range of 0 (0V) to 1023 (2.5V)
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	021a      	lsls	r2, r3, #8
 8004a10:	79bb      	ldrb	r3, [r7, #6]
 8004a12:	4413      	add	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]
	int virtualGround = 401;//virtual ground is 981mV: (981/2500)*1023 = 401
 8004a16:	f240 1391 	movw	r3, #401	; 0x191
 8004a1a:	613b      	str	r3, [r7, #16]
	ADC = ADC - virtualGround;//wrt to virtual ground now
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	617b      	str	r3, [r7, #20]
	float voltage = ADC * 2.5; //convert the ADC value to a real voltage
 8004a24:	6978      	ldr	r0, [r7, #20]
 8004a26:	f7fb fce5 	bl	80003f4 <__aeabi_i2d>
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	4b30      	ldr	r3, [pc, #192]	; (8004af0 <calcTemp+0xf4>)
 8004a30:	f7fb fd4a 	bl	80004c8 <__aeabi_dmul>
 8004a34:	4603      	mov	r3, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	4618      	mov	r0, r3
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	f7fb ff56 	bl	80008ec <__aeabi_d2f>
 8004a40:	4603      	mov	r3, r0
 8004a42:	60fb      	str	r3, [r7, #12]
	voltage = voltage*100; // same as dividing by 0.01 mV/degree
 8004a44:	492b      	ldr	r1, [pc, #172]	; (8004af4 <calcTemp+0xf8>)
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f7fc f8ae 	bl	8000ba8 <__aeabi_fmul>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	60fb      	str	r3, [r7, #12]
	int temperature = (int)voltage;//cast into uint16_t
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f7fc f9f9 	bl	8000e48 <__aeabi_f2iz>
 8004a56:	4603      	mov	r3, r0
 8004a58:	60bb      	str	r3, [r7, #8]

	//we will assume the temperature is in the range of (-99, 99) because if its not, the grass is dead and the sensors dont work anyway
	if (temperature >= -99 && temperature <=99)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004a60:	db38      	blt.n	8004ad4 <calcTemp+0xd8>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2b63      	cmp	r3, #99	; 0x63
 8004a66:	dc35      	bgt.n	8004ad4 <calcTemp+0xd8>
	{
		if (temperature <0)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da03      	bge.n	8004a76 <calcTemp+0x7a>
		{
			threeByteArray[0] = 1;//1 means negative
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	e002      	b.n	8004a7c <calcTemp+0x80>
		}
		else
		{
			threeByteArray[0] = 0;//0 means positive
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
		}
		threeByteArray[1] = temperature/10; //get the tens digit from 0 to 9
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <calcTemp+0xfc>)
 8004a80:	fb82 1203 	smull	r1, r2, r2, r3
 8004a84:	1092      	asrs	r2, r2, #2
 8004a86:	17db      	asrs	r3, r3, #31
 8004a88:	1ad2      	subs	r2, r2, r3
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
		threeByteArray[2] = temperature%10; //get the remainder from 0 to 9
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	4b18      	ldr	r3, [pc, #96]	; (8004af8 <calcTemp+0xfc>)
 8004a96:	fb83 1302 	smull	r1, r3, r3, r2
 8004a9a:	1099      	asrs	r1, r3, #2
 8004a9c:	17d3      	asrs	r3, r2, #31
 8004a9e:	1ac9      	subs	r1, r1, r3
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	1ad1      	subs	r1, r2, r3
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	3302      	adds	r3, #2
 8004aae:	b2ca      	uxtb	r2, r1
 8004ab0:	701a      	strb	r2, [r3, #0]
		//turn the values into the hex value representing the ASCII symbol of that digit
		//^^this sentence is why I will never reccomend digi products
		//^^because why should I have to do this?
		threeByteArray[1] += 30;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	781a      	ldrb	r2, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	321e      	adds	r2, #30
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	701a      	strb	r2, [r3, #0]
		threeByteArray[2] += 30;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	3302      	adds	r3, #2
 8004acc:	321e      	adds	r2, #30
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e008      	b.n	8004ae6 <calcTemp+0xea>
	}
	else //(The case of righteous fires cleansing the earth or hell froze over)
	{
		threeByteArray[0] = 2; //two means buggered Data
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	701a      	strb	r2, [r3, #0]
		threeByteArray[0] = 36; //arbitrary
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2224      	movs	r2, #36	; 0x24
 8004ade:	701a      	strb	r2, [r3, #0]
		threeByteArray[0] = 39; //arbitrary
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2227      	movs	r2, #39	; 0x27
 8004ae4:	701a      	strb	r2, [r3, #0]
	}

	return;
 8004ae6:	bf00      	nop
}
 8004ae8:	371c      	adds	r7, #28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd90      	pop	{r4, r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40040000 	.word	0x40040000
 8004af4:	42c80000 	.word	0x42c80000
 8004af8:	66666667 	.word	0x66666667

08004afc <calcPercent>:

void calcPercent(uint8_t ADC_A, uint8_t ADC_B, uint8_t *threeByteArray)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	603a      	str	r2, [r7, #0]
 8004b06:	71fb      	strb	r3, [r7, #7]
 8004b08:	460b      	mov	r3, r1
 8004b0a:	71bb      	strb	r3, [r7, #6]
	//The function will convert the ADC value to a percentage based on the available range
	//then break the percentage down into a two digit int
	//the two digit int will be sepereated
	//the seperated values will be replaced by their ascii representations

	float ADC = ADC_A*256 + ADC_B; //wrt real ground, range of 0 (0V) to 1023 (2.5V)
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	021a      	lsls	r2, r3, #8
 8004b10:	79bb      	ldrb	r3, [r7, #6]
 8004b12:	4413      	add	r3, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fff3 	bl	8000b00 <__aeabi_i2f>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	60fb      	str	r3, [r7, #12]
	ADC = (ADC/1023)*100; //divide by the full range, multiply by 100 to get the percent
 8004b1e:	491e      	ldr	r1, [pc, #120]	; (8004b98 <calcPercent+0x9c>)
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7fc f8f5 	bl	8000d10 <__aeabi_fdiv>
 8004b26:	4603      	mov	r3, r0
 8004b28:	491c      	ldr	r1, [pc, #112]	; (8004b9c <calcPercent+0xa0>)
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fc f83c 	bl	8000ba8 <__aeabi_fmul>
 8004b30:	4603      	mov	r3, r0
 8004b32:	60fb      	str	r3, [r7, #12]
	int intADC = (int) ADC;
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7fc f987 	bl	8000e48 <__aeabi_f2iz>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	60bb      	str	r3, [r7, #8]

	threeByteArray[0] = intADC/10; //get the 10s digit
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <calcPercent+0xa4>)
 8004b42:	fb82 1203 	smull	r1, r2, r2, r3
 8004b46:	1092      	asrs	r2, r2, #2
 8004b48:	17db      	asrs	r3, r3, #31
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	701a      	strb	r2, [r3, #0]
	threeByteArray[1] = intADC%10; //get the ones digit
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <calcPercent+0xa4>)
 8004b56:	fb83 1302 	smull	r1, r3, r3, r2
 8004b5a:	1099      	asrs	r1, r3, #2
 8004b5c:	17d3      	asrs	r3, r2, #31
 8004b5e:	1ac9      	subs	r1, r1, r3
 8004b60:	460b      	mov	r3, r1
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	1ad1      	subs	r1, r2, r3
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	b2ca      	uxtb	r2, r1
 8004b70:	701a      	strb	r2, [r3, #0]

	threeByteArray[0] += 30;//gives the hex value of the ascii representation of the digit
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	331e      	adds	r3, #30
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	701a      	strb	r2, [r3, #0]
	threeByteArray[1] += 30;//gives the hex value of the ascii representation of the digit
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	781a      	ldrb	r2, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	3301      	adds	r3, #1
 8004b88:	321e      	adds	r2, #30
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]

	return;
 8004b8e:	bf00      	nop

}
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	447fc000 	.word	0x447fc000
 8004b9c:	42c80000 	.word	0x42c80000
 8004ba0:	66666667 	.word	0x66666667

08004ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004baa:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_MspInit+0x68>)
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <HAL_MspInit+0x68>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6193      	str	r3, [r2, #24]
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_MspInit+0x68>)
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_MspInit+0x68>)
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <HAL_MspInit+0x68>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	61d3      	str	r3, [r2, #28]
 8004bce:	4b0f      	ldr	r3, [pc, #60]	; (8004c0c <HAL_MspInit+0x68>)
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004bda:	2200      	movs	r2, #0
 8004bdc:	210f      	movs	r1, #15
 8004bde:	f06f 0001 	mvn.w	r0, #1
 8004be2:	f000 fed0 	bl	8005986 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_MspInit+0x6c>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <HAL_MspInit+0x6c>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	40010000 	.word	0x40010000

08004c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1c:	f107 0310 	add.w	r3, r7, #16
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	609a      	str	r2, [r3, #8]
 8004c28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a14      	ldr	r2, [pc, #80]	; (8004c80 <HAL_ADC_MspInit+0x6c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d121      	bne.n	8004c78 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c34:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <HAL_ADC_MspInit+0x70>)
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	4a12      	ldr	r2, [pc, #72]	; (8004c84 <HAL_ADC_MspInit+0x70>)
 8004c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c3e:	6193      	str	r3, [r2, #24]
 8004c40:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_ADC_MspInit+0x70>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <HAL_ADC_MspInit+0x70>)
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <HAL_ADC_MspInit+0x70>)
 8004c52:	f043 0310 	orr.w	r3, r3, #16
 8004c56:	6193      	str	r3, [r2, #24]
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_ADC_MspInit+0x70>)
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004c64:	2320      	movs	r3, #32
 8004c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c6c:	f107 0310 	add.w	r3, r7, #16
 8004c70:	4619      	mov	r1, r3
 8004c72:	4805      	ldr	r0, [pc, #20]	; (8004c88 <HAL_ADC_MspInit+0x74>)
 8004c74:	f000 feb2 	bl	80059dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c78:	bf00      	nop
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40012400 	.word	0x40012400
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40011000 	.word	0x40011000

08004c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a12      	ldr	r2, [pc, #72]	; (8004ce4 <HAL_TIM_Base_MspInit+0x58>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	4a11      	ldr	r2, [pc, #68]	; (8004ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8004ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ca8:	6193      	str	r3, [r2, #24]
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004cb6:	e010      	b.n	8004cda <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d10b      	bne.n	8004cda <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	61d3      	str	r3, [r2, #28]
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_TIM_Base_MspInit+0x5c>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40021000 	.word	0x40021000

08004cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf4:	f107 0318 	add.w	r3, r7, #24
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	605a      	str	r2, [r3, #4]
 8004cfe:	609a      	str	r2, [r3, #8]
 8004d00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a38      	ldr	r2, [pc, #224]	; (8004de8 <HAL_UART_MspInit+0xfc>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d132      	bne.n	8004d72 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d0c:	4b37      	ldr	r3, [pc, #220]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	4a36      	ldr	r2, [pc, #216]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d16:	6193      	str	r3, [r2, #24]
 8004d18:	4b34      	ldr	r3, [pc, #208]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d24:	4b31      	ldr	r3, [pc, #196]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	4a30      	ldr	r2, [pc, #192]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d2a:	f043 0304 	orr.w	r3, r3, #4
 8004d2e:	6193      	str	r3, [r2, #24]
 8004d30:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d42:	2302      	movs	r3, #2
 8004d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d46:	2303      	movs	r3, #3
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4a:	f107 0318 	add.w	r3, r7, #24
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4827      	ldr	r0, [pc, #156]	; (8004df0 <HAL_UART_MspInit+0x104>)
 8004d52:	f000 fe43 	bl	80059dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d64:	f107 0318 	add.w	r3, r7, #24
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4821      	ldr	r0, [pc, #132]	; (8004df0 <HAL_UART_MspInit+0x104>)
 8004d6c:	f000 fe36 	bl	80059dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004d70:	e036      	b.n	8004de0 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a1f      	ldr	r2, [pc, #124]	; (8004df4 <HAL_UART_MspInit+0x108>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d131      	bne.n	8004de0 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d7c:	4b1b      	ldr	r3, [pc, #108]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d86:	61d3      	str	r3, [r2, #28]
 8004d88:	4b18      	ldr	r3, [pc, #96]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d94:	4b15      	ldr	r3, [pc, #84]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	4a14      	ldr	r2, [pc, #80]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004d9a:	f043 0308 	orr.w	r3, r3, #8
 8004d9e:	6193      	str	r3, [r2, #24]
 8004da0:	4b12      	ldr	r3, [pc, #72]	; (8004dec <HAL_UART_MspInit+0x100>)
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db2:	2302      	movs	r3, #2
 8004db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004db6:	2303      	movs	r3, #3
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dba:	f107 0318 	add.w	r3, r7, #24
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	480d      	ldr	r0, [pc, #52]	; (8004df8 <HAL_UART_MspInit+0x10c>)
 8004dc2:	f000 fe0b 	bl	80059dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004dc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd4:	f107 0318 	add.w	r3, r7, #24
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4807      	ldr	r0, [pc, #28]	; (8004df8 <HAL_UART_MspInit+0x10c>)
 8004ddc:	f000 fdfe 	bl	80059dc <HAL_GPIO_Init>
}
 8004de0:	bf00      	nop
 8004de2:	3728      	adds	r7, #40	; 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40013800 	.word	0x40013800
 8004dec:	40021000 	.word	0x40021000
 8004df0:	40010800 	.word	0x40010800
 8004df4:	40004800 	.word	0x40004800
 8004df8:	40010c00 	.word	0x40010c00

08004dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	; 0x30
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	201e      	movs	r0, #30
 8004e12:	f000 fdb8 	bl	8005986 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004e16:	201e      	movs	r0, #30
 8004e18:	f000 fdd1 	bl	80059be <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004e1c:	4b1f      	ldr	r3, [pc, #124]	; (8004e9c <HAL_InitTick+0xa0>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <HAL_InitTick+0xa0>)
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	61d3      	str	r3, [r2, #28]
 8004e28:	4b1c      	ldr	r3, [pc, #112]	; (8004e9c <HAL_InitTick+0xa0>)
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e34:	f107 0210 	add.w	r2, r7, #16
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fb76 	bl	8006530 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004e44:	f001 fb4c 	bl	80064e0 <HAL_RCC_GetPCLK1Freq>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e50:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <HAL_InitTick+0xa4>)
 8004e52:	fba2 2303 	umull	r2, r3, r2, r3
 8004e56:	0c9b      	lsrs	r3, r3, #18
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <HAL_InitTick+0xa8>)
 8004e5e:	4a12      	ldr	r2, [pc, #72]	; (8004ea8 <HAL_InitTick+0xac>)
 8004e60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <HAL_InitTick+0xa8>)
 8004e64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e68:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <HAL_InitTick+0xa8>)
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <HAL_InitTick+0xa8>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <HAL_InitTick+0xa8>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8004e7c:	4809      	ldr	r0, [pc, #36]	; (8004ea4 <HAL_InitTick+0xa8>)
 8004e7e:	f001 fd17 	bl	80068b0 <HAL_TIM_Base_Init>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d104      	bne.n	8004e92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8004e88:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <HAL_InitTick+0xa8>)
 8004e8a:	f001 fdd1 	bl	8006a30 <HAL_TIM_Base_Start_IT>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	e000      	b.n	8004e94 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3730      	adds	r7, #48	; 0x30
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	431bde83 	.word	0x431bde83
 8004ea4:	200028fc 	.word	0x200028fc
 8004ea8:	40000800 	.word	0x40000800

08004eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004eac:	b480      	push	{r7}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004eb0:	e7fe      	b.n	8004eb0 <NMI_Handler+0x4>

08004eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004eb6:	e7fe      	b.n	8004eb6 <HardFault_Handler+0x4>

08004eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ebc:	e7fe      	b.n	8004ebc <MemManage_Handler+0x4>

08004ebe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ec2:	e7fe      	b.n	8004ec2 <BusFault_Handler+0x4>

08004ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ec8:	e7fe      	b.n	8004ec8 <UsageFault_Handler+0x4>

08004eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr
	...

08004ed8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <TIM4_IRQHandler+0x10>)
 8004ede:	f001 fdf9 	bl	8006ad4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200028fc 	.word	0x200028fc

08004eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004ef0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ef4:	f000 fefc 	bl	8005cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ef8:	bf00      	nop
 8004efa:	bd80      	pop	{r7, pc}

08004efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004f08:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004f0a:	e003      	b.n	8004f14 <LoopCopyDataInit>

08004f0c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004f0e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004f10:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004f12:	3104      	adds	r1, #4

08004f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004f14:	480a      	ldr	r0, [pc, #40]	; (8004f40 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004f16:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004f18:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004f1a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004f1c:	d3f6      	bcc.n	8004f0c <CopyDataInit>
  ldr r2, =_sbss
 8004f1e:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004f20:	e002      	b.n	8004f28 <LoopFillZerobss>

08004f22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004f22:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004f24:	f842 3b04 	str.w	r3, [r2], #4

08004f28 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004f2a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004f2c:	d3f9      	bcc.n	8004f22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f2e:	f7ff ffe5 	bl	8004efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f32:	f005 f93b 	bl	800a1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f36:	f7fd fb73 	bl	8002620 <main>
  bx lr
 8004f3a:	4770      	bx	lr
  ldr r3, =_sidata
 8004f3c:	0800a4fc 	.word	0x0800a4fc
  ldr r0, =_sdata
 8004f40:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004f44:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8004f48:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8004f4c:	20002988 	.word	0x20002988

08004f50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f50:	e7fe      	b.n	8004f50 <ADC1_2_IRQHandler>
	...

08004f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_Init+0x28>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <HAL_Init+0x28>)
 8004f5e:	f043 0310 	orr.w	r3, r3, #16
 8004f62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f64:	2003      	movs	r0, #3
 8004f66:	f000 fd03 	bl	8005970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	f7ff ff46 	bl	8004dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f70:	f7ff fe18 	bl	8004ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40022000 	.word	0x40022000

08004f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_IncTick+0x1c>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_IncTick+0x20>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	4a03      	ldr	r2, [pc, #12]	; (8004fa0 <HAL_IncTick+0x20>)
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	20000008 	.word	0x20000008
 8004fa0:	20002944 	.word	0x20002944

08004fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fa8:	4b02      	ldr	r3, [pc, #8]	; (8004fb4 <HAL_GetTick+0x10>)
 8004faa:	681b      	ldr	r3, [r3, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr
 8004fb4:	20002944 	.word	0x20002944

08004fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fc0:	f7ff fff0 	bl	8004fa4 <HAL_GetTick>
 8004fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d005      	beq.n	8004fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_Delay+0x40>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004fde:	bf00      	nop
 8004fe0:	f7ff ffe0 	bl	8004fa4 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d8f7      	bhi.n	8004fe0 <HAL_Delay+0x28>
  {
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000008 	.word	0x20000008

08004ffc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e0be      	b.n	800519c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	2b00      	cmp	r3, #0
 800502a:	d109      	bne.n	8005040 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fdea 	bl	8004c14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fbb1 	bl	80057a8 <ADC_ConversionStop_Disable>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	2b00      	cmp	r3, #0
 8005054:	f040 8099 	bne.w	800518a <HAL_ADC_Init+0x18e>
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 8095 	bne.w	800518a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005064:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005068:	f023 0302 	bic.w	r3, r3, #2
 800506c:	f043 0202 	orr.w	r2, r3, #2
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800507c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	7b1b      	ldrb	r3, [r3, #12]
 8005082:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005084:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005094:	d003      	beq.n	800509e <HAL_ADC_Init+0xa2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d102      	bne.n	80050a4 <HAL_ADC_Init+0xa8>
 800509e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a2:	e000      	b.n	80050a6 <HAL_ADC_Init+0xaa>
 80050a4:	2300      	movs	r3, #0
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	7d1b      	ldrb	r3, [r3, #20]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d119      	bne.n	80050e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7b1b      	ldrb	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	035a      	lsls	r2, r3, #13
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	e00b      	b.n	80050e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f043 0220 	orr.w	r2, r3, #32
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e0:	f043 0201 	orr.w	r2, r3, #1
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <HAL_ADC_Init+0x1a8>)
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	430b      	orrs	r3, r1
 800510e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005118:	d003      	beq.n	8005122 <HAL_ADC_Init+0x126>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d104      	bne.n	800512c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	3b01      	subs	r3, #1
 8005128:	051b      	lsls	r3, r3, #20
 800512a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	430a      	orrs	r2, r1
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <HAL_ADC_Init+0x1ac>)
 8005148:	4013      	ands	r3, r2
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	429a      	cmp	r2, r3
 800514e:	d10b      	bne.n	8005168 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	f023 0303 	bic.w	r3, r3, #3
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005166:	e018      	b.n	800519a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	f023 0312 	bic.w	r3, r3, #18
 8005170:	f043 0210 	orr.w	r2, r3, #16
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f043 0201 	orr.w	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005188:	e007      	b.n	800519a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	f043 0210 	orr.w	r2, r3, #16
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800519a:	7dfb      	ldrb	r3, [r7, #23]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	ffe1f7fd 	.word	0xffe1f7fd
 80051a8:	ff1f0efe 	.word	0xff1f0efe

080051ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_ADC_Start+0x1a>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e098      	b.n	80052f8 <HAL_ADC_Start+0x14c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa98 	bl	8005704 <ADC_Enable>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 8087 	bne.w	80052ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e8:	f023 0301 	bic.w	r3, r3, #1
 80051ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a41      	ldr	r2, [pc, #260]	; (8005300 <HAL_ADC_Start+0x154>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d105      	bne.n	800520a <HAL_ADC_Start+0x5e>
 80051fe:	4b41      	ldr	r3, [pc, #260]	; (8005304 <HAL_ADC_Start+0x158>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d115      	bne.n	8005236 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005220:	2b00      	cmp	r3, #0
 8005222:	d026      	beq.n	8005272 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800522c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005234:	e01d      	b.n	8005272 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2f      	ldr	r2, [pc, #188]	; (8005304 <HAL_ADC_Start+0x158>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_ADC_Start+0xaa>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <HAL_ADC_Start+0x154>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d10d      	bne.n	8005272 <HAL_ADC_Start+0xc6>
 8005256:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_ADC_Start+0x158>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525e:	2b00      	cmp	r3, #0
 8005260:	d007      	beq.n	8005272 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005266:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800526a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d006      	beq.n	800528c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	f023 0206 	bic.w	r2, r3, #6
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	62da      	str	r2, [r3, #44]	; 0x2c
 800528a:	e002      	b.n	8005292 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f06f 0202 	mvn.w	r2, #2
 80052a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80052ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80052b2:	d113      	bne.n	80052dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052b8:	4a11      	ldr	r2, [pc, #68]	; (8005300 <HAL_ADC_Start+0x154>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d105      	bne.n	80052ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80052be:	4b11      	ldr	r3, [pc, #68]	; (8005304 <HAL_ADC_Start+0x158>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d108      	bne.n	80052dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80052d8:	609a      	str	r2, [r3, #8]
 80052da:	e00c      	b.n	80052f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	e003      	b.n	80052f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40012800 	.word	0x40012800
 8005304:	40012400 	.word	0x40012400

08005308 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800531e:	f7ff fe41 	bl	8004fa4 <HAL_GetTick>
 8005322:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e0c8      	b.n	80054dc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005354:	2b00      	cmp	r3, #0
 8005356:	d12a      	bne.n	80053ae <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005362:	2b00      	cmp	r3, #0
 8005364:	d123      	bne.n	80053ae <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005366:	e01a      	b.n	800539e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d016      	beq.n	800539e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <HAL_ADC_PollForConversion+0x7e>
 8005376:	f7ff fe15 	bl	8004fa4 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d20b      	bcs.n	800539e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e09e      	b.n	80054dc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0dd      	beq.n	8005368 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80053ac:	e06c      	b.n	8005488 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80053ae:	4b4d      	ldr	r3, [pc, #308]	; (80054e4 <HAL_ADC_PollForConversion+0x1dc>)
 80053b0:	681c      	ldr	r4, [r3, #0]
 80053b2:	2002      	movs	r0, #2
 80053b4:	f001 f9c0 	bl	8006738 <HAL_RCCEx_GetPeriphCLKFreq>
 80053b8:	4603      	mov	r3, r0
 80053ba:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6919      	ldr	r1, [r3, #16]
 80053c4:	4b48      	ldr	r3, [pc, #288]	; (80054e8 <HAL_ADC_PollForConversion+0x1e0>)
 80053c6:	400b      	ands	r3, r1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d118      	bne.n	80053fe <HAL_ADC_PollForConversion+0xf6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68d9      	ldr	r1, [r3, #12]
 80053d2:	4b46      	ldr	r3, [pc, #280]	; (80054ec <HAL_ADC_PollForConversion+0x1e4>)
 80053d4:	400b      	ands	r3, r1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d111      	bne.n	80053fe <HAL_ADC_PollForConversion+0xf6>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6919      	ldr	r1, [r3, #16]
 80053e0:	4b43      	ldr	r3, [pc, #268]	; (80054f0 <HAL_ADC_PollForConversion+0x1e8>)
 80053e2:	400b      	ands	r3, r1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d108      	bne.n	80053fa <HAL_ADC_PollForConversion+0xf2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68d9      	ldr	r1, [r3, #12]
 80053ee:	4b41      	ldr	r3, [pc, #260]	; (80054f4 <HAL_ADC_PollForConversion+0x1ec>)
 80053f0:	400b      	ands	r3, r1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_PollForConversion+0xf2>
 80053f6:	2314      	movs	r3, #20
 80053f8:	e020      	b.n	800543c <HAL_ADC_PollForConversion+0x134>
 80053fa:	2329      	movs	r3, #41	; 0x29
 80053fc:	e01e      	b.n	800543c <HAL_ADC_PollForConversion+0x134>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6919      	ldr	r1, [r3, #16]
 8005404:	4b3a      	ldr	r3, [pc, #232]	; (80054f0 <HAL_ADC_PollForConversion+0x1e8>)
 8005406:	400b      	ands	r3, r1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d106      	bne.n	800541a <HAL_ADC_PollForConversion+0x112>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68d9      	ldr	r1, [r3, #12]
 8005412:	4b38      	ldr	r3, [pc, #224]	; (80054f4 <HAL_ADC_PollForConversion+0x1ec>)
 8005414:	400b      	ands	r3, r1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <HAL_ADC_PollForConversion+0x12e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6919      	ldr	r1, [r3, #16]
 8005420:	4b35      	ldr	r3, [pc, #212]	; (80054f8 <HAL_ADC_PollForConversion+0x1f0>)
 8005422:	400b      	ands	r3, r1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d108      	bne.n	800543a <HAL_ADC_PollForConversion+0x132>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68d9      	ldr	r1, [r3, #12]
 800542e:	4b32      	ldr	r3, [pc, #200]	; (80054f8 <HAL_ADC_PollForConversion+0x1f0>)
 8005430:	400b      	ands	r3, r1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_ADC_PollForConversion+0x132>
 8005436:	2354      	movs	r3, #84	; 0x54
 8005438:	e000      	b.n	800543c <HAL_ADC_PollForConversion+0x134>
 800543a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005442:	e01d      	b.n	8005480 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d016      	beq.n	800547a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_ADC_PollForConversion+0x15a>
 8005452:	f7ff fda7 	bl	8004fa4 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d20b      	bcs.n	800547a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	f043 0204 	orr.w	r2, r3, #4
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e030      	b.n	80054dc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3301      	adds	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d8dd      	bhi.n	8005444 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0212 	mvn.w	r2, #18
 8005490:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80054a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80054ac:	d115      	bne.n	80054da <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d111      	bne.n	80054da <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d105      	bne.n	80054da <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd90      	pop	{r4, r7, pc}
 80054e4:	20000000 	.word	0x20000000
 80054e8:	24924924 	.word	0x24924924
 80054ec:	00924924 	.word	0x00924924
 80054f0:	12492492 	.word	0x12492492
 80054f4:	00492492 	.word	0x00492492
 80054f8:	00249249 	.word	0x00249249

080054fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005522:	2300      	movs	r3, #0
 8005524:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_ADC_ConfigChannel+0x20>
 8005530:	2302      	movs	r3, #2
 8005532:	e0dc      	b.n	80056ee <HAL_ADC_ConfigChannel+0x1da>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b06      	cmp	r3, #6
 8005542:	d81c      	bhi.n	800557e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	3b05      	subs	r3, #5
 8005556:	221f      	movs	r2, #31
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	43db      	mvns	r3, r3
 800555e:	4019      	ands	r1, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	3b05      	subs	r3, #5
 8005570:	fa00 f203 	lsl.w	r2, r0, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	635a      	str	r2, [r3, #52]	; 0x34
 800557c:	e03c      	b.n	80055f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b0c      	cmp	r3, #12
 8005584:	d81c      	bhi.n	80055c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	3b23      	subs	r3, #35	; 0x23
 8005598:	221f      	movs	r2, #31
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	4019      	ands	r1, r3
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	3b23      	subs	r3, #35	; 0x23
 80055b2:	fa00 f203 	lsl.w	r2, r0, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	631a      	str	r2, [r3, #48]	; 0x30
 80055be:	e01b      	b.n	80055f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	3b41      	subs	r3, #65	; 0x41
 80055d2:	221f      	movs	r2, #31
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	4019      	ands	r1, r3
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	3b41      	subs	r3, #65	; 0x41
 80055ec:	fa00 f203 	lsl.w	r2, r0, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b09      	cmp	r3, #9
 80055fe:	d91c      	bls.n	800563a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68d9      	ldr	r1, [r3, #12]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4613      	mov	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	4413      	add	r3, r2
 8005610:	3b1e      	subs	r3, #30
 8005612:	2207      	movs	r2, #7
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	4019      	ands	r1, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6898      	ldr	r0, [r3, #8]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4613      	mov	r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	3b1e      	subs	r3, #30
 800562c:	fa00 f203 	lsl.w	r2, r0, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	60da      	str	r2, [r3, #12]
 8005638:	e019      	b.n	800566e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6919      	ldr	r1, [r3, #16]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	2207      	movs	r2, #7
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	4019      	ands	r1, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	6898      	ldr	r0, [r3, #8]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	4413      	add	r3, r2
 8005662:	fa00 f203 	lsl.w	r2, r0, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b10      	cmp	r3, #16
 8005674:	d003      	beq.n	800567e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800567a:	2b11      	cmp	r3, #17
 800567c:	d132      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d125      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d126      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80056a4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b10      	cmp	r3, #16
 80056ac:	d11a      	bne.n	80056e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056ae:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_ADC_ConfigChannel+0x1e8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <HAL_ADC_ConfigChannel+0x1ec>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	0c9a      	lsrs	r2, r3, #18
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80056c4:	e002      	b.n	80056cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f9      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x1b2>
 80056d2:	e007      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	f043 0220 	orr.w	r2, r3, #32
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr
 80056f8:	40012400 	.word	0x40012400
 80056fc:	20000000 	.word	0x20000000
 8005700:	431bde83 	.word	0x431bde83

08005704 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b01      	cmp	r3, #1
 8005720:	d039      	beq.n	8005796 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0201 	orr.w	r2, r2, #1
 8005730:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005732:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <ADC_Enable+0x9c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <ADC_Enable+0xa0>)
 8005738:	fba2 2303 	umull	r2, r3, r2, r3
 800573c:	0c9b      	lsrs	r3, r3, #18
 800573e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005740:	e002      	b.n	8005748 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	3b01      	subs	r3, #1
 8005746:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f9      	bne.n	8005742 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800574e:	f7ff fc29 	bl	8004fa4 <HAL_GetTick>
 8005752:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005754:	e018      	b.n	8005788 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005756:	f7ff fc25 	bl	8004fa4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d911      	bls.n	8005788 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	f043 0210 	orr.w	r2, r3, #16
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	f043 0201 	orr.w	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b01      	cmp	r3, #1
 8005794:	d1df      	bne.n	8005756 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000000 	.word	0x20000000
 80057a4:	431bde83 	.word	0x431bde83

080057a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d127      	bne.n	8005812 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0201 	bic.w	r2, r2, #1
 80057d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057d2:	f7ff fbe7 	bl	8004fa4 <HAL_GetTick>
 80057d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80057d8:	e014      	b.n	8005804 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057da:	f7ff fbe3 	bl	8004fa4 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d90d      	bls.n	8005804 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f043 0210 	orr.w	r2, r3, #16
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	f043 0201 	orr.w	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e007      	b.n	8005814 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d0e3      	beq.n	80057da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f003 0307 	and.w	r3, r3, #7
 800582a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <__NVIC_SetPriorityGrouping+0x44>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005838:	4013      	ands	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800584e:	4a04      	ldr	r2, [pc, #16]	; (8005860 <__NVIC_SetPriorityGrouping+0x44>)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	60d3      	str	r3, [r2, #12]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <__NVIC_GetPriorityGrouping+0x18>)
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	0a1b      	lsrs	r3, r3, #8
 800586e:	f003 0307 	and.w	r3, r3, #7
}
 8005872:	4618      	mov	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	e000ed00 	.word	0xe000ed00

08005880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588e:	2b00      	cmp	r3, #0
 8005890:	db0b      	blt.n	80058aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	f003 021f 	and.w	r2, r3, #31
 8005898:	4906      	ldr	r1, [pc, #24]	; (80058b4 <__NVIC_EnableIRQ+0x34>)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	2001      	movs	r0, #1
 80058a2:	fa00 f202 	lsl.w	r2, r0, r2
 80058a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bc80      	pop	{r7}
 80058b2:	4770      	bx	lr
 80058b4:	e000e100 	.word	0xe000e100

080058b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	6039      	str	r1, [r7, #0]
 80058c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	db0a      	blt.n	80058e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	490c      	ldr	r1, [pc, #48]	; (8005904 <__NVIC_SetPriority+0x4c>)
 80058d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	440b      	add	r3, r1
 80058dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058e0:	e00a      	b.n	80058f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4908      	ldr	r1, [pc, #32]	; (8005908 <__NVIC_SetPriority+0x50>)
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	3b04      	subs	r3, #4
 80058f0:	0112      	lsls	r2, r2, #4
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	440b      	add	r3, r1
 80058f6:	761a      	strb	r2, [r3, #24]
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	e000e100 	.word	0xe000e100
 8005908:	e000ed00 	.word	0xe000ed00

0800590c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800590c:	b480      	push	{r7}
 800590e:	b089      	sub	sp, #36	; 0x24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f1c3 0307 	rsb	r3, r3, #7
 8005926:	2b04      	cmp	r3, #4
 8005928:	bf28      	it	cs
 800592a:	2304      	movcs	r3, #4
 800592c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3304      	adds	r3, #4
 8005932:	2b06      	cmp	r3, #6
 8005934:	d902      	bls.n	800593c <NVIC_EncodePriority+0x30>
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3b03      	subs	r3, #3
 800593a:	e000      	b.n	800593e <NVIC_EncodePriority+0x32>
 800593c:	2300      	movs	r3, #0
 800593e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005940:	f04f 32ff 	mov.w	r2, #4294967295
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43da      	mvns	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	401a      	ands	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005954:	f04f 31ff 	mov.w	r1, #4294967295
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	fa01 f303 	lsl.w	r3, r1, r3
 800595e:	43d9      	mvns	r1, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005964:	4313      	orrs	r3, r2
         );
}
 8005966:	4618      	mov	r0, r3
 8005968:	3724      	adds	r7, #36	; 0x24
 800596a:	46bd      	mov	sp, r7
 800596c:	bc80      	pop	{r7}
 800596e:	4770      	bx	lr

08005970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff ff4f 	bl	800581c <__NVIC_SetPriorityGrouping>
}
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005986:	b580      	push	{r7, lr}
 8005988:	b086      	sub	sp, #24
 800598a:	af00      	add	r7, sp, #0
 800598c:	4603      	mov	r3, r0
 800598e:	60b9      	str	r1, [r7, #8]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005998:	f7ff ff64 	bl	8005864 <__NVIC_GetPriorityGrouping>
 800599c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7ff ffb2 	bl	800590c <NVIC_EncodePriority>
 80059a8:	4602      	mov	r2, r0
 80059aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff ff81 	bl	80058b8 <__NVIC_SetPriority>
}
 80059b6:	bf00      	nop
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	4603      	mov	r3, r0
 80059c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff ff57 	bl	8005880 <__NVIC_EnableIRQ>
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059dc:	b480      	push	{r7}
 80059de:	b08b      	sub	sp, #44	; 0x2c
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80059ea:	2300      	movs	r3, #0
 80059ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ee:	e127      	b.n	8005c40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80059f0:	2201      	movs	r2, #1
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	f040 8116 	bne.w	8005c3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b12      	cmp	r3, #18
 8005a14:	d034      	beq.n	8005a80 <HAL_GPIO_Init+0xa4>
 8005a16:	2b12      	cmp	r3, #18
 8005a18:	d80d      	bhi.n	8005a36 <HAL_GPIO_Init+0x5a>
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d02b      	beq.n	8005a76 <HAL_GPIO_Init+0x9a>
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d804      	bhi.n	8005a2c <HAL_GPIO_Init+0x50>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d031      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d01c      	beq.n	8005a64 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005a2a:	e048      	b.n	8005abe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d043      	beq.n	8005ab8 <HAL_GPIO_Init+0xdc>
 8005a30:	2b11      	cmp	r3, #17
 8005a32:	d01b      	beq.n	8005a6c <HAL_GPIO_Init+0x90>
          break;
 8005a34:	e043      	b.n	8005abe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a36:	4a89      	ldr	r2, [pc, #548]	; (8005c5c <HAL_GPIO_Init+0x280>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d026      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a3c:	4a87      	ldr	r2, [pc, #540]	; (8005c5c <HAL_GPIO_Init+0x280>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d806      	bhi.n	8005a50 <HAL_GPIO_Init+0x74>
 8005a42:	4a87      	ldr	r2, [pc, #540]	; (8005c60 <HAL_GPIO_Init+0x284>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d020      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a48:	4a86      	ldr	r2, [pc, #536]	; (8005c64 <HAL_GPIO_Init+0x288>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01d      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
          break;
 8005a4e:	e036      	b.n	8005abe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a50:	4a85      	ldr	r2, [pc, #532]	; (8005c68 <HAL_GPIO_Init+0x28c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d019      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a56:	4a85      	ldr	r2, [pc, #532]	; (8005c6c <HAL_GPIO_Init+0x290>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d016      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
 8005a5c:	4a84      	ldr	r2, [pc, #528]	; (8005c70 <HAL_GPIO_Init+0x294>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <HAL_GPIO_Init+0xae>
          break;
 8005a62:	e02c      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	623b      	str	r3, [r7, #32]
          break;
 8005a6a:	e028      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	3304      	adds	r3, #4
 8005a72:	623b      	str	r3, [r7, #32]
          break;
 8005a74:	e023      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	623b      	str	r3, [r7, #32]
          break;
 8005a7e:	e01e      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	330c      	adds	r3, #12
 8005a86:	623b      	str	r3, [r7, #32]
          break;
 8005a88:	e019      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005a92:	2304      	movs	r3, #4
 8005a94:	623b      	str	r3, [r7, #32]
          break;
 8005a96:	e012      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d105      	bne.n	8005aac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	611a      	str	r2, [r3, #16]
          break;
 8005aaa:	e008      	b.n	8005abe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005aac:	2308      	movs	r3, #8
 8005aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	615a      	str	r2, [r3, #20]
          break;
 8005ab6:	e002      	b.n	8005abe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	623b      	str	r3, [r7, #32]
          break;
 8005abc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2bff      	cmp	r3, #255	; 0xff
 8005ac2:	d801      	bhi.n	8005ac8 <HAL_GPIO_Init+0xec>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	e001      	b.n	8005acc <HAL_GPIO_Init+0xf0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2bff      	cmp	r3, #255	; 0xff
 8005ad2:	d802      	bhi.n	8005ada <HAL_GPIO_Init+0xfe>
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	e002      	b.n	8005ae0 <HAL_GPIO_Init+0x104>
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	3b08      	subs	r3, #8
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	210f      	movs	r1, #15
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	401a      	ands	r2, r3
 8005af2:	6a39      	ldr	r1, [r7, #32]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	fa01 f303 	lsl.w	r3, r1, r3
 8005afa:	431a      	orrs	r2, r3
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8096 	beq.w	8005c3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b0e:	4b59      	ldr	r3, [pc, #356]	; (8005c74 <HAL_GPIO_Init+0x298>)
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	4a58      	ldr	r2, [pc, #352]	; (8005c74 <HAL_GPIO_Init+0x298>)
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	6193      	str	r3, [r2, #24]
 8005b1a:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <HAL_GPIO_Init+0x298>)
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	60bb      	str	r3, [r7, #8]
 8005b24:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b26:	4a54      	ldr	r2, [pc, #336]	; (8005c78 <HAL_GPIO_Init+0x29c>)
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	089b      	lsrs	r3, r3, #2
 8005b2c:	3302      	adds	r3, #2
 8005b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b32:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	220f      	movs	r2, #15
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43db      	mvns	r3, r3
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	4013      	ands	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a4b      	ldr	r2, [pc, #300]	; (8005c7c <HAL_GPIO_Init+0x2a0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_GPIO_Init+0x19e>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a4a      	ldr	r2, [pc, #296]	; (8005c80 <HAL_GPIO_Init+0x2a4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00d      	beq.n	8005b76 <HAL_GPIO_Init+0x19a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a49      	ldr	r2, [pc, #292]	; (8005c84 <HAL_GPIO_Init+0x2a8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <HAL_GPIO_Init+0x196>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a48      	ldr	r2, [pc, #288]	; (8005c88 <HAL_GPIO_Init+0x2ac>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_GPIO_Init+0x192>
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e006      	b.n	8005b7c <HAL_GPIO_Init+0x1a0>
 8005b6e:	2304      	movs	r3, #4
 8005b70:	e004      	b.n	8005b7c <HAL_GPIO_Init+0x1a0>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e002      	b.n	8005b7c <HAL_GPIO_Init+0x1a0>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x1a0>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	f002 0203 	and.w	r2, r2, #3
 8005b82:	0092      	lsls	r2, r2, #2
 8005b84:	4093      	lsls	r3, r2
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005b8c:	493a      	ldr	r1, [pc, #232]	; (8005c78 <HAL_GPIO_Init+0x29c>)
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	3302      	adds	r3, #2
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d006      	beq.n	8005bb4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ba6:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	4938      	ldr	r1, [pc, #224]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
 8005bb2:	e006      	b.n	8005bc2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005bb4:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	4933      	ldr	r1, [pc, #204]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005bce:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	492e      	ldr	r1, [pc, #184]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	604b      	str	r3, [r1, #4]
 8005bda:	e006      	b.n	8005bea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	4929      	ldr	r1, [pc, #164]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005bf6:	4b25      	ldr	r3, [pc, #148]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	4924      	ldr	r1, [pc, #144]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	608b      	str	r3, [r1, #8]
 8005c02:	e006      	b.n	8005c12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c04:	4b21      	ldr	r3, [pc, #132]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	491f      	ldr	r1, [pc, #124]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d006      	beq.n	8005c2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c1e:	4b1b      	ldr	r3, [pc, #108]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	491a      	ldr	r1, [pc, #104]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60cb      	str	r3, [r1, #12]
 8005c2a:	e006      	b.n	8005c3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	4915      	ldr	r1, [pc, #84]	; (8005c8c <HAL_GPIO_Init+0x2b0>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f47f aed0 	bne.w	80059f0 <HAL_GPIO_Init+0x14>
  }
}
 8005c50:	bf00      	nop
 8005c52:	372c      	adds	r7, #44	; 0x2c
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	10210000 	.word	0x10210000
 8005c60:	10110000 	.word	0x10110000
 8005c64:	10120000 	.word	0x10120000
 8005c68:	10310000 	.word	0x10310000
 8005c6c:	10320000 	.word	0x10320000
 8005c70:	10220000 	.word	0x10220000
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40010800 	.word	0x40010800
 8005c80:	40010c00 	.word	0x40010c00
 8005c84:	40011000 	.word	0x40011000
 8005c88:	40011400 	.word	0x40011400
 8005c8c:	40010400 	.word	0x40010400

08005c90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	689a      	ldr	r2, [r3, #8]
 8005ca0:	887b      	ldrh	r3, [r7, #2]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
 8005cac:	e001      	b.n	8005cb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	807b      	strh	r3, [r7, #2]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cce:	787b      	ldrb	r3, [r7, #1]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cd4:	887a      	ldrh	r2, [r7, #2]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005cda:	e003      	b.n	8005ce4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005cdc:	887b      	ldrh	r3, [r7, #2]
 8005cde:	041a      	lsls	r2, r3, #16
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	611a      	str	r2, [r3, #16]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	88fb      	ldrh	r3, [r7, #6]
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d006      	beq.n	8005d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d06:	4a05      	ldr	r2, [pc, #20]	; (8005d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f806 	bl	8005d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40010400 	.word	0x40010400

08005d20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e26c      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8087 	beq.w	8005e62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d54:	4b92      	ldr	r3, [pc, #584]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 030c 	and.w	r3, r3, #12
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d00c      	beq.n	8005d7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d60:	4b8f      	ldr	r3, [pc, #572]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d112      	bne.n	8005d92 <HAL_RCC_OscConfig+0x5e>
 8005d6c:	4b8c      	ldr	r3, [pc, #560]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d78:	d10b      	bne.n	8005d92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d7a:	4b89      	ldr	r3, [pc, #548]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d06c      	beq.n	8005e60 <HAL_RCC_OscConfig+0x12c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d168      	bne.n	8005e60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e246      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9a:	d106      	bne.n	8005daa <HAL_RCC_OscConfig+0x76>
 8005d9c:	4b80      	ldr	r3, [pc, #512]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a7f      	ldr	r2, [pc, #508]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	e02e      	b.n	8005e08 <HAL_RCC_OscConfig+0xd4>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10c      	bne.n	8005dcc <HAL_RCC_OscConfig+0x98>
 8005db2:	4b7b      	ldr	r3, [pc, #492]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a7a      	ldr	r2, [pc, #488]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dbc:	6013      	str	r3, [r2, #0]
 8005dbe:	4b78      	ldr	r3, [pc, #480]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a77      	ldr	r2, [pc, #476]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	e01d      	b.n	8005e08 <HAL_RCC_OscConfig+0xd4>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dd4:	d10c      	bne.n	8005df0 <HAL_RCC_OscConfig+0xbc>
 8005dd6:	4b72      	ldr	r3, [pc, #456]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a71      	ldr	r2, [pc, #452]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	4b6f      	ldr	r3, [pc, #444]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a6e      	ldr	r2, [pc, #440]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	e00b      	b.n	8005e08 <HAL_RCC_OscConfig+0xd4>
 8005df0:	4b6b      	ldr	r3, [pc, #428]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a6a      	ldr	r2, [pc, #424]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4b68      	ldr	r3, [pc, #416]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a67      	ldr	r2, [pc, #412]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d013      	beq.n	8005e38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e10:	f7ff f8c8 	bl	8004fa4 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e18:	f7ff f8c4 	bl	8004fa4 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b64      	cmp	r3, #100	; 0x64
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e1fa      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e2a:	4b5d      	ldr	r3, [pc, #372]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f0      	beq.n	8005e18 <HAL_RCC_OscConfig+0xe4>
 8005e36:	e014      	b.n	8005e62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e38:	f7ff f8b4 	bl	8004fa4 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e40:	f7ff f8b0 	bl	8004fa4 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	; 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e1e6      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e52:	4b53      	ldr	r3, [pc, #332]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f0      	bne.n	8005e40 <HAL_RCC_OscConfig+0x10c>
 8005e5e:	e000      	b.n	8005e62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d063      	beq.n	8005f36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e6e:	4b4c      	ldr	r3, [pc, #304]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f003 030c 	and.w	r3, r3, #12
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e7a:	4b49      	ldr	r3, [pc, #292]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d11c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x18c>
 8005e86:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d116      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e92:	4b43      	ldr	r3, [pc, #268]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d005      	beq.n	8005eaa <HAL_RCC_OscConfig+0x176>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d001      	beq.n	8005eaa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e1ba      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eaa:	4b3d      	ldr	r3, [pc, #244]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4939      	ldr	r1, [pc, #228]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ebe:	e03a      	b.n	8005f36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d020      	beq.n	8005f0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ec8:	4b36      	ldr	r3, [pc, #216]	; (8005fa4 <HAL_RCC_OscConfig+0x270>)
 8005eca:	2201      	movs	r2, #1
 8005ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ece:	f7ff f869 	bl	8004fa4 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed6:	f7ff f865 	bl	8004fa4 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e19b      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee8:	4b2d      	ldr	r3, [pc, #180]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f0      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef4:	4b2a      	ldr	r3, [pc, #168]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	4927      	ldr	r1, [pc, #156]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	600b      	str	r3, [r1, #0]
 8005f08:	e015      	b.n	8005f36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f0a:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <HAL_RCC_OscConfig+0x270>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7ff f848 	bl	8004fa4 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f18:	f7ff f844 	bl	8004fa4 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e17a      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d03a      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d019      	beq.n	8005f7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f4a:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <HAL_RCC_OscConfig+0x274>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f50:	f7ff f828 	bl	8004fa4 <HAL_GetTick>
 8005f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f56:	e008      	b.n	8005f6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f58:	f7ff f824 	bl	8004fa4 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e15a      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f6a:	4b0d      	ldr	r3, [pc, #52]	; (8005fa0 <HAL_RCC_OscConfig+0x26c>)
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f76:	2001      	movs	r0, #1
 8005f78:	f000 fb0a 	bl	8006590 <RCC_Delay>
 8005f7c:	e01c      	b.n	8005fb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f7e:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <HAL_RCC_OscConfig+0x274>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f84:	f7ff f80e 	bl	8004fa4 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f8a:	e00f      	b.n	8005fac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f8c:	f7ff f80a 	bl	8004fa4 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d908      	bls.n	8005fac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e140      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
 8005f9e:	bf00      	nop
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	42420000 	.word	0x42420000
 8005fa8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fac:	4b9e      	ldr	r3, [pc, #632]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e9      	bne.n	8005f8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 80a6 	beq.w	8006112 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fca:	4b97      	ldr	r3, [pc, #604]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10d      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd6:	4b94      	ldr	r3, [pc, #592]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	4a93      	ldr	r2, [pc, #588]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8005fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	61d3      	str	r3, [r2, #28]
 8005fe2:	4b91      	ldr	r3, [pc, #580]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fea:	60bb      	str	r3, [r7, #8]
 8005fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff2:	4b8e      	ldr	r3, [pc, #568]	; (800622c <HAL_RCC_OscConfig+0x4f8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d118      	bne.n	8006030 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ffe:	4b8b      	ldr	r3, [pc, #556]	; (800622c <HAL_RCC_OscConfig+0x4f8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a8a      	ldr	r2, [pc, #552]	; (800622c <HAL_RCC_OscConfig+0x4f8>)
 8006004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800600a:	f7fe ffcb 	bl	8004fa4 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006012:	f7fe ffc7 	bl	8004fa4 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b64      	cmp	r3, #100	; 0x64
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e0fd      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006024:	4b81      	ldr	r3, [pc, #516]	; (800622c <HAL_RCC_OscConfig+0x4f8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d106      	bne.n	8006046 <HAL_RCC_OscConfig+0x312>
 8006038:	4b7b      	ldr	r3, [pc, #492]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	4a7a      	ldr	r2, [pc, #488]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	6213      	str	r3, [r2, #32]
 8006044:	e02d      	b.n	80060a2 <HAL_RCC_OscConfig+0x36e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10c      	bne.n	8006068 <HAL_RCC_OscConfig+0x334>
 800604e:	4b76      	ldr	r3, [pc, #472]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	4a75      	ldr	r2, [pc, #468]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	6213      	str	r3, [r2, #32]
 800605a:	4b73      	ldr	r3, [pc, #460]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	4a72      	ldr	r2, [pc, #456]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006060:	f023 0304 	bic.w	r3, r3, #4
 8006064:	6213      	str	r3, [r2, #32]
 8006066:	e01c      	b.n	80060a2 <HAL_RCC_OscConfig+0x36e>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b05      	cmp	r3, #5
 800606e:	d10c      	bne.n	800608a <HAL_RCC_OscConfig+0x356>
 8006070:	4b6d      	ldr	r3, [pc, #436]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	4a6c      	ldr	r2, [pc, #432]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	6213      	str	r3, [r2, #32]
 800607c:	4b6a      	ldr	r3, [pc, #424]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	4a69      	ldr	r2, [pc, #420]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6213      	str	r3, [r2, #32]
 8006088:	e00b      	b.n	80060a2 <HAL_RCC_OscConfig+0x36e>
 800608a:	4b67      	ldr	r3, [pc, #412]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	4a66      	ldr	r2, [pc, #408]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6213      	str	r3, [r2, #32]
 8006096:	4b64      	ldr	r3, [pc, #400]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	4a63      	ldr	r2, [pc, #396]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800609c:	f023 0304 	bic.w	r3, r3, #4
 80060a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d015      	beq.n	80060d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060aa:	f7fe ff7b 	bl	8004fa4 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b0:	e00a      	b.n	80060c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b2:	f7fe ff77 	bl	8004fa4 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e0ab      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c8:	4b57      	ldr	r3, [pc, #348]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0ee      	beq.n	80060b2 <HAL_RCC_OscConfig+0x37e>
 80060d4:	e014      	b.n	8006100 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060d6:	f7fe ff65 	bl	8004fa4 <HAL_GetTick>
 80060da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060dc:	e00a      	b.n	80060f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060de:	f7fe ff61 	bl	8004fa4 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d901      	bls.n	80060f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80060f0:	2303      	movs	r3, #3
 80060f2:	e095      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f4:	4b4c      	ldr	r3, [pc, #304]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1ee      	bne.n	80060de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d105      	bne.n	8006112 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006106:	4b48      	ldr	r3, [pc, #288]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	4a47      	ldr	r2, [pc, #284]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800610c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006110:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8081 	beq.w	800621e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800611c:	4b42      	ldr	r3, [pc, #264]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 030c 	and.w	r3, r3, #12
 8006124:	2b08      	cmp	r3, #8
 8006126:	d061      	beq.n	80061ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d146      	bne.n	80061be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006130:	4b3f      	ldr	r3, [pc, #252]	; (8006230 <HAL_RCC_OscConfig+0x4fc>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006136:	f7fe ff35 	bl	8004fa4 <HAL_GetTick>
 800613a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800613e:	f7fe ff31 	bl	8004fa4 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e067      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006150:	4b35      	ldr	r3, [pc, #212]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1f0      	bne.n	800613e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006164:	d108      	bne.n	8006178 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006166:	4b30      	ldr	r3, [pc, #192]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	492d      	ldr	r1, [pc, #180]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 8006174:	4313      	orrs	r3, r2
 8006176:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006178:	4b2b      	ldr	r3, [pc, #172]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a19      	ldr	r1, [r3, #32]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	430b      	orrs	r3, r1
 800618a:	4927      	ldr	r1, [pc, #156]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 800618c:	4313      	orrs	r3, r2
 800618e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006190:	4b27      	ldr	r3, [pc, #156]	; (8006230 <HAL_RCC_OscConfig+0x4fc>)
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006196:	f7fe ff05 	bl	8004fa4 <HAL_GetTick>
 800619a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800619c:	e008      	b.n	80061b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619e:	f7fe ff01 	bl	8004fa4 <HAL_GetTick>
 80061a2:	4602      	mov	r2, r0
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d901      	bls.n	80061b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e037      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061b0:	4b1d      	ldr	r3, [pc, #116]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d0f0      	beq.n	800619e <HAL_RCC_OscConfig+0x46a>
 80061bc:	e02f      	b.n	800621e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061be:	4b1c      	ldr	r3, [pc, #112]	; (8006230 <HAL_RCC_OscConfig+0x4fc>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061c4:	f7fe feee 	bl	8004fa4 <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061cc:	f7fe feea 	bl	8004fa4 <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e020      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061de:	4b12      	ldr	r3, [pc, #72]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0x498>
 80061ea:	e018      	b.n	800621e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e013      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_RCC_OscConfig+0x4f4>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	429a      	cmp	r2, r3
 800620a:	d106      	bne.n	800621a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006216:	429a      	cmp	r2, r3
 8006218:	d001      	beq.n	800621e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e000      	b.n	8006220 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021000 	.word	0x40021000
 800622c:	40007000 	.word	0x40007000
 8006230:	42420060 	.word	0x42420060

08006234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0d0      	b.n	80063ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006248:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d910      	bls.n	8006278 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b67      	ldr	r3, [pc, #412]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f023 0207 	bic.w	r2, r3, #7
 800625e:	4965      	ldr	r1, [pc, #404]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	4313      	orrs	r3, r2
 8006264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006266:	4b63      	ldr	r3, [pc, #396]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d001      	beq.n	8006278 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0b8      	b.n	80063ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b00      	cmp	r3, #0
 8006282:	d020      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006290:	4b59      	ldr	r3, [pc, #356]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	4a58      	ldr	r2, [pc, #352]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800629a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062a8:	4b53      	ldr	r3, [pc, #332]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	4a52      	ldr	r2, [pc, #328]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80062b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062b4:	4b50      	ldr	r3, [pc, #320]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	494d      	ldr	r1, [pc, #308]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d040      	beq.n	8006354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d107      	bne.n	80062ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062da:	4b47      	ldr	r3, [pc, #284]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d115      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e07f      	b.n	80063ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d107      	bne.n	8006302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062f2:	4b41      	ldr	r3, [pc, #260]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e073      	b.n	80063ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006302:	4b3d      	ldr	r3, [pc, #244]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e06b      	b.n	80063ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006312:	4b39      	ldr	r3, [pc, #228]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f023 0203 	bic.w	r2, r3, #3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4936      	ldr	r1, [pc, #216]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006320:	4313      	orrs	r3, r2
 8006322:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006324:	f7fe fe3e 	bl	8004fa4 <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632a:	e00a      	b.n	8006342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800632c:	f7fe fe3a 	bl	8004fa4 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	; 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e053      	b.n	80063ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006342:	4b2d      	ldr	r3, [pc, #180]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f003 020c 	and.w	r2, r3, #12
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	429a      	cmp	r2, r3
 8006352:	d1eb      	bne.n	800632c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006354:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d210      	bcs.n	8006384 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006362:	4b24      	ldr	r3, [pc, #144]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f023 0207 	bic.w	r2, r3, #7
 800636a:	4922      	ldr	r1, [pc, #136]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	4313      	orrs	r3, r2
 8006370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006372:	4b20      	ldr	r3, [pc, #128]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d001      	beq.n	8006384 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e032      	b.n	80063ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006390:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	4916      	ldr	r1, [pc, #88]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063ae:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	490e      	ldr	r1, [pc, #56]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063c2:	f000 f821 	bl	8006408 <HAL_RCC_GetSysClockFreq>
 80063c6:	4601      	mov	r1, r0
 80063c8:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	091b      	lsrs	r3, r3, #4
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <HAL_RCC_ClockConfig+0x1c8>)
 80063d4:	5cd3      	ldrb	r3, [r2, r3]
 80063d6:	fa21 f303 	lsr.w	r3, r1, r3
 80063da:	4a09      	ldr	r2, [pc, #36]	; (8006400 <HAL_RCC_ClockConfig+0x1cc>)
 80063dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <HAL_RCC_ClockConfig+0x1d0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fd0a 	bl	8004dfc <HAL_InitTick>

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40022000 	.word	0x40022000
 80063f8:	40021000 	.word	0x40021000
 80063fc:	0800a4dc 	.word	0x0800a4dc
 8006400:	20000000 	.word	0x20000000
 8006404:	20000004 	.word	0x20000004

08006408 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006408:	b490      	push	{r4, r7}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800640e:	4b2a      	ldr	r3, [pc, #168]	; (80064b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006410:	1d3c      	adds	r4, r7, #4
 8006412:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006418:	4b28      	ldr	r3, [pc, #160]	; (80064bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	2300      	movs	r3, #0
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	2300      	movs	r3, #0
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006432:	4b23      	ldr	r3, [pc, #140]	; (80064c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f003 030c 	and.w	r3, r3, #12
 800643e:	2b04      	cmp	r3, #4
 8006440:	d002      	beq.n	8006448 <HAL_RCC_GetSysClockFreq+0x40>
 8006442:	2b08      	cmp	r3, #8
 8006444:	d003      	beq.n	800644e <HAL_RCC_GetSysClockFreq+0x46>
 8006446:	e02d      	b.n	80064a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006448:	4b1e      	ldr	r3, [pc, #120]	; (80064c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800644a:	623b      	str	r3, [r7, #32]
      break;
 800644c:	e02d      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	0c9b      	lsrs	r3, r3, #18
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800645a:	4413      	add	r3, r2
 800645c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006460:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d013      	beq.n	8006494 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800646c:	4b14      	ldr	r3, [pc, #80]	; (80064c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	0c5b      	lsrs	r3, r3, #17
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800647a:	4413      	add	r3, r2
 800647c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006480:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	4a0f      	ldr	r2, [pc, #60]	; (80064c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006486:	fb02 f203 	mul.w	r2, r2, r3
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
 8006492:	e004      	b.n	800649e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	4a0c      	ldr	r2, [pc, #48]	; (80064c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006498:	fb02 f303 	mul.w	r3, r2, r3
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	623b      	str	r3, [r7, #32]
      break;
 80064a2:	e002      	b.n	80064aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80064a4:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064a6:	623b      	str	r3, [r7, #32]
      break;
 80064a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064aa:	6a3b      	ldr	r3, [r7, #32]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3728      	adds	r7, #40	; 0x28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bc90      	pop	{r4, r7}
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	0800a310 	.word	0x0800a310
 80064bc:	0800a320 	.word	0x0800a320
 80064c0:	40021000 	.word	0x40021000
 80064c4:	007a1200 	.word	0x007a1200
 80064c8:	003d0900 	.word	0x003d0900

080064cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d0:	4b02      	ldr	r3, [pc, #8]	; (80064dc <HAL_RCC_GetHCLKFreq+0x10>)
 80064d2:	681b      	ldr	r3, [r3, #0]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr
 80064dc:	20000000 	.word	0x20000000

080064e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064e4:	f7ff fff2 	bl	80064cc <HAL_RCC_GetHCLKFreq>
 80064e8:	4601      	mov	r1, r0
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	0a1b      	lsrs	r3, r3, #8
 80064f0:	f003 0307 	and.w	r3, r3, #7
 80064f4:	4a03      	ldr	r2, [pc, #12]	; (8006504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064f6:	5cd3      	ldrb	r3, [r2, r3]
 80064f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40021000 	.word	0x40021000
 8006504:	0800a4ec 	.word	0x0800a4ec

08006508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800650c:	f7ff ffde 	bl	80064cc <HAL_RCC_GetHCLKFreq>
 8006510:	4601      	mov	r1, r0
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	0adb      	lsrs	r3, r3, #11
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	4a03      	ldr	r2, [pc, #12]	; (800652c <HAL_RCC_GetPCLK2Freq+0x24>)
 800651e:	5cd3      	ldrb	r3, [r2, r3]
 8006520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006524:	4618      	mov	r0, r3
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40021000 	.word	0x40021000
 800652c:	0800a4ec 	.word	0x0800a4ec

08006530 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	220f      	movs	r2, #15
 800653e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <HAL_RCC_GetClockConfig+0x58>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 0203 	and.w	r2, r3, #3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <HAL_RCC_GetClockConfig+0x58>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <HAL_RCC_GetClockConfig+0x58>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006564:	4b08      	ldr	r3, [pc, #32]	; (8006588 <HAL_RCC_GetClockConfig+0x58>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	08db      	lsrs	r3, r3, #3
 800656a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006572:	4b06      	ldr	r3, [pc, #24]	; (800658c <HAL_RCC_GetClockConfig+0x5c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0207 	and.w	r2, r3, #7
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	bc80      	pop	{r7}
 8006586:	4770      	bx	lr
 8006588:	40021000 	.word	0x40021000
 800658c:	40022000 	.word	0x40022000

08006590 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006598:	4b0a      	ldr	r3, [pc, #40]	; (80065c4 <RCC_Delay+0x34>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <RCC_Delay+0x38>)
 800659e:	fba2 2303 	umull	r2, r3, r2, r3
 80065a2:	0a5b      	lsrs	r3, r3, #9
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065ac:	bf00      	nop
  }
  while (Delay --);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	60fa      	str	r2, [r7, #12]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1f9      	bne.n	80065ac <RCC_Delay+0x1c>
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000000 	.word	0x20000000
 80065c8:	10624dd3 	.word	0x10624dd3

080065cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d07d      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80065e8:	2300      	movs	r3, #0
 80065ea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ec:	4b4f      	ldr	r3, [pc, #316]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10d      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065f8:	4b4c      	ldr	r3, [pc, #304]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fa:	69db      	ldr	r3, [r3, #28]
 80065fc:	4a4b      	ldr	r2, [pc, #300]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006602:	61d3      	str	r3, [r2, #28]
 8006604:	4b49      	ldr	r3, [pc, #292]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800660c:	60bb      	str	r3, [r7, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006614:	4b46      	ldr	r3, [pc, #280]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d118      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006620:	4b43      	ldr	r3, [pc, #268]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a42      	ldr	r2, [pc, #264]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800662a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800662c:	f7fe fcba 	bl	8004fa4 <HAL_GetTick>
 8006630:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006632:	e008      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006634:	f7fe fcb6 	bl	8004fa4 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	2b64      	cmp	r3, #100	; 0x64
 8006640:	d901      	bls.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e06d      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006646:	4b3a      	ldr	r3, [pc, #232]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0f0      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006652:	4b36      	ldr	r3, [pc, #216]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800665a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d02e      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	429a      	cmp	r2, r3
 800666e:	d027      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006670:	4b2e      	ldr	r3, [pc, #184]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006678:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800667a:	4b2e      	ldr	r3, [pc, #184]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006680:	4b2c      	ldr	r3, [pc, #176]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006686:	4a29      	ldr	r2, [pc, #164]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d014      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006696:	f7fe fc85 	bl	8004fa4 <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669c:	e00a      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669e:	f7fe fc81 	bl	8004fa4 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e036      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b4:	4b1d      	ldr	r3, [pc, #116]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d0ee      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066c0:	4b1a      	ldr	r3, [pc, #104]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	4917      	ldr	r1, [pc, #92]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d105      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066d8:	4b14      	ldr	r3, [pc, #80]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	4a13      	ldr	r2, [pc, #76]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d008      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066f0:	4b0e      	ldr	r3, [pc, #56]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	490b      	ldr	r1, [pc, #44]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	d008      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800670e:	4b07      	ldr	r3, [pc, #28]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	4904      	ldr	r1, [pc, #16]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800671c:	4313      	orrs	r3, r2
 800671e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000
 8006730:	40007000 	.word	0x40007000
 8006734:	42420440 	.word	0x42420440

08006738 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006738:	b590      	push	{r4, r7, lr}
 800673a:	b08d      	sub	sp, #52	; 0x34
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006740:	4b55      	ldr	r3, [pc, #340]	; (8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006742:	f107 040c 	add.w	r4, r7, #12
 8006746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800674c:	4b53      	ldr	r3, [pc, #332]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	627b      	str	r3, [r7, #36]	; 0x24
 8006756:	2300      	movs	r3, #0
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800675a:	2300      	movs	r3, #0
 800675c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	2300      	movs	r3, #0
 8006764:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b02      	cmp	r3, #2
 800676a:	d07f      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800676c:	2b10      	cmp	r3, #16
 800676e:	d002      	beq.n	8006776 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006770:	2b01      	cmp	r3, #1
 8006772:	d048      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006774:	e08b      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006776:	4b4a      	ldr	r3, [pc, #296]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800677c:	4b48      	ldr	r3, [pc, #288]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d07f      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	0c9b      	lsrs	r3, r3, #18
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006794:	4413      	add	r3, r2
 8006796:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800679a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d018      	beq.n	80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067a6:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	0c5b      	lsrs	r3, r3, #17
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067b4:	4413      	add	r3, r2
 80067b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00d      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80067c6:	4a37      	ldr	r2, [pc, #220]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	fb02 f303 	mul.w	r3, r2, r3
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d6:	e004      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	4a33      	ldr	r2, [pc, #204]	; (80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80067dc:	fb02 f303 	mul.w	r3, r2, r3
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80067e2:	4b2f      	ldr	r3, [pc, #188]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ee:	d102      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80067f4:	e048      	b.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	4a2c      	ldr	r2, [pc, #176]	; (80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80067fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006800:	085b      	lsrs	r3, r3, #1
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006804:	e040      	b.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8006806:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006816:	d108      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d003      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8006822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006826:	62bb      	str	r3, [r7, #40]	; 0x28
 8006828:	e01f      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d109      	bne.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	f003 0302 	and.w	r3, r3, #2
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8006842:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	e00f      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006854:	d11a      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8006856:	4b12      	ldr	r3, [pc, #72]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d014      	beq.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8006862:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006868:	e010      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800686a:	e00f      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800686c:	f7ff fe4c 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
 8006870:	4602      	mov	r2, r0
 8006872:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	0b9b      	lsrs	r3, r3, #14
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	3301      	adds	r3, #1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	fbb2 f3f3 	udiv	r3, r2, r3
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006886:	e002      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8006888:	bf00      	nop
 800688a:	e000      	b.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 800688c:	bf00      	nop
    }
  }
  return (frequency);
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006890:	4618      	mov	r0, r3
 8006892:	3734      	adds	r7, #52	; 0x34
 8006894:	46bd      	mov	sp, r7
 8006896:	bd90      	pop	{r4, r7, pc}
 8006898:	0800a324 	.word	0x0800a324
 800689c:	0800a334 	.word	0x0800a334
 80068a0:	40021000 	.word	0x40021000
 80068a4:	007a1200 	.word	0x007a1200
 80068a8:	003d0900 	.word	0x003d0900
 80068ac:	aaaaaaab 	.word	0xaaaaaaab

080068b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e041      	b.n	8006946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fe f9d8 	bl	8004c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f000 fad4 	bl	8006e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	d001      	beq.n	8006968 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e032      	b.n	80069ce <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_TIM_Base_Start+0x88>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00e      	beq.n	8006998 <HAL_TIM_Base_Start+0x48>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d009      	beq.n	8006998 <HAL_TIM_Base_Start+0x48>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a14      	ldr	r2, [pc, #80]	; (80069dc <HAL_TIM_Base_Start+0x8c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d004      	beq.n	8006998 <HAL_TIM_Base_Start+0x48>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <HAL_TIM_Base_Start+0x90>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d111      	bne.n	80069bc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b06      	cmp	r3, #6
 80069a8:	d010      	beq.n	80069cc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0201 	orr.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ba:	e007      	b.n	80069cc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0201 	orr.w	r2, r2, #1
 80069ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	40012c00 	.word	0x40012c00
 80069dc:	40000400 	.word	0x40000400
 80069e0:	40000800 	.word	0x40000800

080069e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6a1a      	ldr	r2, [r3, #32]
 80069f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80069f6:	4013      	ands	r3, r2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10f      	bne.n	8006a1c <HAL_TIM_Base_Stop+0x38>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a1a      	ldr	r2, [r3, #32]
 8006a02:	f240 4344 	movw	r3, #1092	; 0x444
 8006a06:	4013      	ands	r3, r2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d107      	bne.n	8006a1c <HAL_TIM_Base_Stop+0x38>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d001      	beq.n	8006a48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e03a      	b.n	8006abe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a18      	ldr	r2, [pc, #96]	; (8006ac8 <HAL_TIM_Base_Start_IT+0x98>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d00e      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x58>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d009      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x58>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a14      	ldr	r2, [pc, #80]	; (8006acc <HAL_TIM_Base_Start_IT+0x9c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d004      	beq.n	8006a88 <HAL_TIM_Base_Start_IT+0x58>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d111      	bne.n	8006aac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b06      	cmp	r3, #6
 8006a98:	d010      	beq.n	8006abc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0201 	orr.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aaa:	e007      	b.n	8006abc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr
 8006ac8:	40012c00 	.word	0x40012c00
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	40000800 	.word	0x40000800

08006ad4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d122      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d11b      	bne.n	8006b30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f06f 0202 	mvn.w	r2, #2
 8006b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f9a4 	bl	8006e64 <HAL_TIM_IC_CaptureCallback>
 8006b1c:	e005      	b.n	8006b2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f997 	bl	8006e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f9a6 	bl	8006e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d122      	bne.n	8006b84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d11b      	bne.n	8006b84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f06f 0204 	mvn.w	r2, #4
 8006b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f97a 	bl	8006e64 <HAL_TIM_IC_CaptureCallback>
 8006b70:	e005      	b.n	8006b7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f96d 	bl	8006e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f97c 	bl	8006e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d122      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d11b      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0208 	mvn.w	r2, #8
 8006ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2204      	movs	r2, #4
 8006bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f950 	bl	8006e64 <HAL_TIM_IC_CaptureCallback>
 8006bc4:	e005      	b.n	8006bd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f943 	bl	8006e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f952 	bl	8006e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b10      	cmp	r3, #16
 8006be4:	d122      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d11b      	bne.n	8006c2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0210 	mvn.w	r2, #16
 8006bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2208      	movs	r2, #8
 8006c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f926 	bl	8006e64 <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f919 	bl	8006e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f928 	bl	8006e76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d10e      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d107      	bne.n	8006c58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0201 	mvn.w	r2, #1
 8006c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7fd fc0e 	bl	8004474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d10e      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c70:	2b80      	cmp	r3, #128	; 0x80
 8006c72:	d107      	bne.n	8006c84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa6b 	bl	800715a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8e:	2b40      	cmp	r3, #64	; 0x40
 8006c90:	d10e      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	d107      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f8ec 	bl	8006e88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0320 	and.w	r3, r3, #32
 8006cba:	2b20      	cmp	r3, #32
 8006cbc:	d10e      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b20      	cmp	r3, #32
 8006cca:	d107      	bne.n	8006cdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0220 	mvn.w	r2, #32
 8006cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa36 	bl	8007148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_TIM_ConfigClockSource+0x18>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e0a6      	b.n	8006e4a <HAL_TIM_ConfigClockSource+0x166>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d067      	beq.n	8006e04 <HAL_TIM_ConfigClockSource+0x120>
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d80b      	bhi.n	8006d50 <HAL_TIM_ConfigClockSource+0x6c>
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d073      	beq.n	8006e24 <HAL_TIM_ConfigClockSource+0x140>
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d802      	bhi.n	8006d46 <HAL_TIM_ConfigClockSource+0x62>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d06f      	beq.n	8006e24 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006d44:	e078      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d46:	2b20      	cmp	r3, #32
 8006d48:	d06c      	beq.n	8006e24 <HAL_TIM_ConfigClockSource+0x140>
 8006d4a:	2b30      	cmp	r3, #48	; 0x30
 8006d4c:	d06a      	beq.n	8006e24 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d4e:	e073      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d50:	2b70      	cmp	r3, #112	; 0x70
 8006d52:	d00d      	beq.n	8006d70 <HAL_TIM_ConfigClockSource+0x8c>
 8006d54:	2b70      	cmp	r3, #112	; 0x70
 8006d56:	d804      	bhi.n	8006d62 <HAL_TIM_ConfigClockSource+0x7e>
 8006d58:	2b50      	cmp	r3, #80	; 0x50
 8006d5a:	d033      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0xe0>
 8006d5c:	2b60      	cmp	r3, #96	; 0x60
 8006d5e:	d041      	beq.n	8006de4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d60:	e06a      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d66:	d066      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0x152>
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6c:	d017      	beq.n	8006d9e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d6e:	e063      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	6899      	ldr	r1, [r3, #8]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f000 f965 	bl	800704e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d92:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	609a      	str	r2, [r3, #8]
      break;
 8006d9c:	e04c      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	6899      	ldr	r1, [r3, #8]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	f000 f94e 	bl	800704e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dc0:	609a      	str	r2, [r3, #8]
      break;
 8006dc2:	e039      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	6859      	ldr	r1, [r3, #4]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f000 f8c5 	bl	8006f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2150      	movs	r1, #80	; 0x50
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 f91c 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006de2:	e029      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6859      	ldr	r1, [r3, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f000 f8e3 	bl	8006fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2160      	movs	r1, #96	; 0x60
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 f90c 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006e02:	e019      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6818      	ldr	r0, [r3, #0]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	6859      	ldr	r1, [r3, #4]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	461a      	mov	r2, r3
 8006e12:	f000 f8a5 	bl	8006f60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2140      	movs	r1, #64	; 0x40
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 f8fc 	bl	800701a <TIM_ITRx_SetConfig>
      break;
 8006e22:	e009      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f000 f8f3 	bl	800701a <TIM_ITRx_SetConfig>
        break;
 8006e34:	e000      	b.n	8006e38 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e5a:	bf00      	nop
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr

08006e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bc80      	pop	{r7}
 8006e74:	4770      	bx	lr

08006e76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e7e:	bf00      	nop
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr

08006e88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
	...

08006e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a29      	ldr	r2, [pc, #164]	; (8006f54 <TIM_Base_SetConfig+0xb8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00b      	beq.n	8006ecc <TIM_Base_SetConfig+0x30>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d007      	beq.n	8006ecc <TIM_Base_SetConfig+0x30>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <TIM_Base_SetConfig+0xbc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_Base_SetConfig+0x30>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a25      	ldr	r2, [pc, #148]	; (8006f5c <TIM_Base_SetConfig+0xc0>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d108      	bne.n	8006ede <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a1c      	ldr	r2, [pc, #112]	; (8006f54 <TIM_Base_SetConfig+0xb8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00b      	beq.n	8006efe <TIM_Base_SetConfig+0x62>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eec:	d007      	beq.n	8006efe <TIM_Base_SetConfig+0x62>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <TIM_Base_SetConfig+0xbc>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d003      	beq.n	8006efe <TIM_Base_SetConfig+0x62>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <TIM_Base_SetConfig+0xc0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d108      	bne.n	8006f10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a07      	ldr	r2, [pc, #28]	; (8006f54 <TIM_Base_SetConfig+0xb8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	691a      	ldr	r2, [r3, #16]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	615a      	str	r2, [r3, #20]
}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bc80      	pop	{r7}
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800

08006f60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f023 030a 	bic.w	r3, r3, #10
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	693a      	ldr	r2, [r7, #16]
 8006faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	621a      	str	r2, [r3, #32]
}
 8006fb2:	bf00      	nop
 8006fb4:	371c      	adds	r7, #28
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr

08006fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6a1b      	ldr	r3, [r3, #32]
 8006fcc:	f023 0210 	bic.w	r2, r3, #16
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	031b      	lsls	r3, r3, #12
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4313      	orrs	r3, r2
 8007002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	621a      	str	r2, [r3, #32]
}
 8007010:	bf00      	nop
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr

0800701a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007030:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	f043 0307 	orr.w	r3, r3, #7
 800703c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	609a      	str	r2, [r3, #8]
}
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800704e:	b480      	push	{r7}
 8007050:	b087      	sub	sp, #28
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007068:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	021a      	lsls	r2, r3, #8
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	431a      	orrs	r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4313      	orrs	r3, r2
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	609a      	str	r2, [r3, #8]
}
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	bc80      	pop	{r7}
 800708a:	4770      	bx	lr

0800708c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800709c:	2b01      	cmp	r3, #1
 800709e:	d101      	bne.n	80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e046      	b.n	8007132 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2202      	movs	r2, #2
 80070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a16      	ldr	r2, [pc, #88]	; (800713c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f0:	d009      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a12      	ldr	r2, [pc, #72]	; (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a10      	ldr	r2, [pc, #64]	; (8007144 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d10c      	bne.n	8007120 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800710c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4313      	orrs	r3, r2
 8007116:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	bc80      	pop	{r7}
 800713a:	4770      	bx	lr
 800713c:	40012c00 	.word	0x40012c00
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800

08007148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	bc80      	pop	{r7}
 8007158:	4770      	bx	lr

0800715a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e03f      	b.n	80071fe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d106      	bne.n	8007198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7fd fdaa 	bl	8004cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2224      	movs	r2, #36	; 0x24
 800719c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9a3 	bl	80074fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b08a      	sub	sp, #40	; 0x28
 800720a:	af02      	add	r7, sp, #8
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	603b      	str	r3, [r7, #0]
 8007212:	4613      	mov	r3, r2
 8007214:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b20      	cmp	r3, #32
 8007224:	d17c      	bne.n	8007320 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d002      	beq.n	8007232 <HAL_UART_Transmit+0x2c>
 800722c:	88fb      	ldrh	r3, [r7, #6]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e075      	b.n	8007322 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_UART_Transmit+0x3e>
 8007240:	2302      	movs	r3, #2
 8007242:	e06e      	b.n	8007322 <HAL_UART_Transmit+0x11c>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2221      	movs	r2, #33	; 0x21
 8007256:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800725a:	f7fd fea3 	bl	8004fa4 <HAL_GetTick>
 800725e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	88fa      	ldrh	r2, [r7, #6]
 8007264:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	88fa      	ldrh	r2, [r7, #6]
 800726a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007274:	d108      	bne.n	8007288 <HAL_UART_Transmit+0x82>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d104      	bne.n	8007288 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800727e:	2300      	movs	r3, #0
 8007280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	e003      	b.n	8007290 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800728c:	2300      	movs	r3, #0
 800728e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007298:	e02a      	b.n	80072f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2200      	movs	r2, #0
 80072a2:	2180      	movs	r1, #128	; 0x80
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f8df 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e036      	b.n	8007322 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10b      	bne.n	80072d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	3302      	adds	r3, #2
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	e007      	b.n	80072e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	3301      	adds	r3, #1
 80072e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	3b01      	subs	r3, #1
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1cf      	bne.n	800729a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2200      	movs	r2, #0
 8007302:	2140      	movs	r1, #64	; 0x40
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 f8af 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e006      	b.n	8007322 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2220      	movs	r2, #32
 8007318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e000      	b.n	8007322 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007320:	2302      	movs	r3, #2
  }
}
 8007322:	4618      	mov	r0, r3
 8007324:	3720      	adds	r7, #32
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b08a      	sub	sp, #40	; 0x28
 800732e:	af02      	add	r7, sp, #8
 8007330:	60f8      	str	r0, [r7, #12]
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	603b      	str	r3, [r7, #0]
 8007336:	4613      	mov	r3, r2
 8007338:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b20      	cmp	r3, #32
 8007348:	f040 8089 	bne.w	800745e <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <HAL_UART_Receive+0x2e>
 8007352:	88fb      	ldrh	r3, [r7, #6]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e081      	b.n	8007460 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007362:	2b01      	cmp	r3, #1
 8007364:	d101      	bne.n	800736a <HAL_UART_Receive+0x40>
 8007366:	2302      	movs	r3, #2
 8007368:	e07a      	b.n	8007460 <HAL_UART_Receive+0x136>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2222      	movs	r2, #34	; 0x22
 800737c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007380:	f7fd fe10 	bl	8004fa4 <HAL_GetTick>
 8007384:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	88fa      	ldrh	r2, [r7, #6]
 800738a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	88fa      	ldrh	r2, [r7, #6]
 8007390:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739a:	d108      	bne.n	80073ae <HAL_UART_Receive+0x84>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d104      	bne.n	80073ae <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	e003      	b.n	80073b6 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80073be:	e043      	b.n	8007448 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	9300      	str	r3, [sp, #0]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2200      	movs	r2, #0
 80073c8:	2120      	movs	r1, #32
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 f84c 	bl	8007468 <UART_WaitOnFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e042      	b.n	8007460 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10c      	bne.n	80073fa <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	3302      	adds	r3, #2
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	e01f      	b.n	800743a <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007402:	d007      	beq.n	8007414 <HAL_UART_Receive+0xea>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <HAL_UART_Receive+0xf8>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	b2da      	uxtb	r2, r3
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e008      	b.n	8007434 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742e:	b2da      	uxtb	r2, r3
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	3301      	adds	r3, #1
 8007438:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743e:	b29b      	uxth	r3, r3
 8007440:	3b01      	subs	r3, #1
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800744c:	b29b      	uxth	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1b6      	bne.n	80073c0 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2220      	movs	r2, #32
 8007456:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	e000      	b.n	8007460 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 800745e:	2302      	movs	r3, #2
  }
}
 8007460:	4618      	mov	r0, r3
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007478:	e02c      	b.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007480:	d028      	beq.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d007      	beq.n	8007498 <UART_WaitOnFlagUntilTimeout+0x30>
 8007488:	f7fd fd8c 	bl	8004fa4 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	d21d      	bcs.n	80074d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68da      	ldr	r2, [r3, #12]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80074a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695a      	ldr	r2, [r3, #20]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0201 	bic.w	r2, r2, #1
 80074b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e00f      	b.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	bf0c      	ite	eq
 80074e4:	2301      	moveq	r3, #1
 80074e6:	2300      	movne	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	79fb      	ldrb	r3, [r7, #7]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d0c3      	beq.n	800747a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3710      	adds	r7, #16
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007536:	f023 030c 	bic.w	r3, r3, #12
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	430b      	orrs	r3, r1
 8007542:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2c      	ldr	r2, [pc, #176]	; (8007610 <UART_SetConfig+0x114>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d103      	bne.n	800756c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007564:	f7fe ffd0 	bl	8006508 <HAL_RCC_GetPCLK2Freq>
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	e002      	b.n	8007572 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800756c:	f7fe ffb8 	bl	80064e0 <HAL_RCC_GetPCLK1Freq>
 8007570:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009a      	lsls	r2, r3, #2
 800757c:	441a      	add	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	fbb2 f3f3 	udiv	r3, r2, r3
 8007588:	4a22      	ldr	r2, [pc, #136]	; (8007614 <UART_SetConfig+0x118>)
 800758a:	fba2 2303 	umull	r2, r3, r2, r3
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	0119      	lsls	r1, r3, #4
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	009a      	lsls	r2, r3, #2
 800759c:	441a      	add	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80075a8:	4b1a      	ldr	r3, [pc, #104]	; (8007614 <UART_SetConfig+0x118>)
 80075aa:	fba3 0302 	umull	r0, r3, r3, r2
 80075ae:	095b      	lsrs	r3, r3, #5
 80075b0:	2064      	movs	r0, #100	; 0x64
 80075b2:	fb00 f303 	mul.w	r3, r0, r3
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	3332      	adds	r3, #50	; 0x32
 80075bc:	4a15      	ldr	r2, [pc, #84]	; (8007614 <UART_SetConfig+0x118>)
 80075be:	fba2 2303 	umull	r2, r3, r2, r3
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075c8:	4419      	add	r1, r3
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009a      	lsls	r2, r3, #2
 80075d4:	441a      	add	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80075e0:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <UART_SetConfig+0x118>)
 80075e2:	fba3 0302 	umull	r0, r3, r3, r2
 80075e6:	095b      	lsrs	r3, r3, #5
 80075e8:	2064      	movs	r0, #100	; 0x64
 80075ea:	fb00 f303 	mul.w	r3, r0, r3
 80075ee:	1ad3      	subs	r3, r2, r3
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	3332      	adds	r3, #50	; 0x32
 80075f4:	4a07      	ldr	r2, [pc, #28]	; (8007614 <UART_SetConfig+0x118>)
 80075f6:	fba2 2303 	umull	r2, r3, r2, r3
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	f003 020f 	and.w	r2, r3, #15
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	440a      	add	r2, r1
 8007606:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40013800 	.word	0x40013800
 8007614:	51eb851f 	.word	0x51eb851f

08007618 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800761e:	f3ef 8305 	mrs	r3, IPSR
 8007622:	60bb      	str	r3, [r7, #8]
  return(result);
 8007624:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10f      	bne.n	800764a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800762a:	f3ef 8310 	mrs	r3, PRIMASK
 800762e:	607b      	str	r3, [r7, #4]
  return(result);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <osKernelInitialize+0x32>
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <osKernelInitialize+0x60>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d109      	bne.n	8007652 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800763e:	f3ef 8311 	mrs	r3, BASEPRI
 8007642:	603b      	str	r3, [r7, #0]
  return(result);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800764a:	f06f 0305 	mvn.w	r3, #5
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	e00c      	b.n	800766c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <osKernelInitialize+0x60>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800765a:	4b07      	ldr	r3, [pc, #28]	; (8007678 <osKernelInitialize+0x60>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e002      	b.n	800766c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007666:	f04f 33ff 	mov.w	r3, #4294967295
 800766a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800766c:	68fb      	ldr	r3, [r7, #12]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr
 8007678:	20000044 	.word	0x20000044

0800767c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007682:	f3ef 8305 	mrs	r3, IPSR
 8007686:	60bb      	str	r3, [r7, #8]
  return(result);
 8007688:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10f      	bne.n	80076ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768e:	f3ef 8310 	mrs	r3, PRIMASK
 8007692:	607b      	str	r3, [r7, #4]
  return(result);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <osKernelStart+0x32>
 800769a:	4b11      	ldr	r3, [pc, #68]	; (80076e0 <osKernelStart+0x64>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d109      	bne.n	80076b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80076a2:	f3ef 8311 	mrs	r3, BASEPRI
 80076a6:	603b      	str	r3, [r7, #0]
  return(result);
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80076ae:	f06f 0305 	mvn.w	r3, #5
 80076b2:	60fb      	str	r3, [r7, #12]
 80076b4:	e00e      	b.n	80076d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80076b6:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <osKernelStart+0x64>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d107      	bne.n	80076ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80076be:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <osKernelStart+0x64>)
 80076c0:	2202      	movs	r2, #2
 80076c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80076c4:	f001 f99a 	bl	80089fc <vTaskStartScheduler>
      stat = osOK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	e002      	b.n	80076d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80076ce:	f04f 33ff 	mov.w	r3, #4294967295
 80076d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80076d4:	68fb      	ldr	r3, [r7, #12]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000044 	.word	0x20000044

080076e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b092      	sub	sp, #72	; 0x48
 80076e8:	af04      	add	r7, sp, #16
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80076f0:	2300      	movs	r3, #0
 80076f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076f4:	f3ef 8305 	mrs	r3, IPSR
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f040 8094 	bne.w	800782a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007702:	f3ef 8310 	mrs	r3, PRIMASK
 8007706:	623b      	str	r3, [r7, #32]
  return(result);
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 808d 	bne.w	800782a <osThreadNew+0x146>
 8007710:	4b48      	ldr	r3, [pc, #288]	; (8007834 <osThreadNew+0x150>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d106      	bne.n	8007726 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007718:	f3ef 8311 	mrs	r3, BASEPRI
 800771c:	61fb      	str	r3, [r7, #28]
  return(result);
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f040 8082 	bne.w	800782a <osThreadNew+0x146>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d07e      	beq.n	800782a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800772c:	2380      	movs	r3, #128	; 0x80
 800772e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007730:	2318      	movs	r3, #24
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007734:	2300      	movs	r3, #0
 8007736:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007738:	f107 031b 	add.w	r3, r7, #27
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800773e:	f04f 33ff 	mov.w	r3, #4294967295
 8007742:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d045      	beq.n	80077d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <osThreadNew+0x74>
        name = attr->name;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d008      	beq.n	800777e <osThreadNew+0x9a>
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	2b38      	cmp	r3, #56	; 0x38
 8007770:	d805      	bhi.n	800777e <osThreadNew+0x9a>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <osThreadNew+0x9e>
        return (NULL);
 800777e:	2300      	movs	r3, #0
 8007780:	e054      	b.n	800782c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	089b      	lsrs	r3, r3, #2
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00e      	beq.n	80077b8 <osThreadNew+0xd4>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b5b      	cmp	r3, #91	; 0x5b
 80077a0:	d90a      	bls.n	80077b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d006      	beq.n	80077b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <osThreadNew+0xd4>
        mem = 1;
 80077b2:	2301      	movs	r3, #1
 80077b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b6:	e010      	b.n	80077da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10c      	bne.n	80077da <osThreadNew+0xf6>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d108      	bne.n	80077da <osThreadNew+0xf6>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d104      	bne.n	80077da <osThreadNew+0xf6>
          mem = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077d4:	e001      	b.n	80077da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80077da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d110      	bne.n	8007802 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077e8:	9202      	str	r2, [sp, #8]
 80077ea:	9301      	str	r3, [sp, #4]
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 ff38 	bl	800866c <xTaskCreateStatic>
 80077fc:	4603      	mov	r3, r0
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e013      	b.n	800782a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	2b00      	cmp	r3, #0
 8007806:	d110      	bne.n	800782a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	b29a      	uxth	r2, r3
 800780c:	f107 0314 	add.w	r3, r7, #20
 8007810:	9301      	str	r3, [sp, #4]
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 ff7f 	bl	800871e <xTaskCreate>
 8007820:	4603      	mov	r3, r0
 8007822:	2b01      	cmp	r3, #1
 8007824:	d001      	beq.n	800782a <osThreadNew+0x146>
          hTask = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800782a:	697b      	ldr	r3, [r7, #20]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3738      	adds	r7, #56	; 0x38
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000044 	.word	0x20000044

08007838 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007840:	f3ef 8305 	mrs	r3, IPSR
 8007844:	613b      	str	r3, [r7, #16]
  return(result);
 8007846:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10f      	bne.n	800786c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800784c:	f3ef 8310 	mrs	r3, PRIMASK
 8007850:	60fb      	str	r3, [r7, #12]
  return(result);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d109      	bne.n	800786c <osDelay+0x34>
 8007858:	4b0d      	ldr	r3, [pc, #52]	; (8007890 <osDelay+0x58>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d109      	bne.n	8007874 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007860:	f3ef 8311 	mrs	r3, BASEPRI
 8007864:	60bb      	str	r3, [r7, #8]
  return(result);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <osDelay+0x3c>
    stat = osErrorISR;
 800786c:	f06f 0305 	mvn.w	r3, #5
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	e007      	b.n	8007884 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <osDelay+0x4c>
      vTaskDelay(ticks);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 f888 	bl	8008994 <vTaskDelay>
    }
  }

  return (stat);
 8007884:	697b      	ldr	r3, [r7, #20]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000044 	.word	0x20000044

08007894 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007894:	b580      	push	{r7, lr}
 8007896:	b08c      	sub	sp, #48	; 0x30
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078a4:	f3ef 8305 	mrs	r3, IPSR
 80078a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80078aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d170      	bne.n	8007992 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078b0:	f3ef 8310 	mrs	r3, PRIMASK
 80078b4:	617b      	str	r3, [r7, #20]
  return(result);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d16a      	bne.n	8007992 <osMessageQueueNew+0xfe>
 80078bc:	4b37      	ldr	r3, [pc, #220]	; (800799c <osMessageQueueNew+0x108>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d105      	bne.n	80078d0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078c4:	f3ef 8311 	mrs	r3, BASEPRI
 80078c8:	613b      	str	r3, [r7, #16]
  return(result);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d160      	bne.n	8007992 <osMessageQueueNew+0xfe>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d05d      	beq.n	8007992 <osMessageQueueNew+0xfe>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d05a      	beq.n	8007992 <osMessageQueueNew+0xfe>
    mem = -1;
 80078dc:	f04f 33ff 	mov.w	r3, #4294967295
 80078e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d029      	beq.n	800793c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d012      	beq.n	8007916 <osMessageQueueNew+0x82>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	2b4f      	cmp	r3, #79	; 0x4f
 80078f6:	d90e      	bls.n	8007916 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695a      	ldr	r2, [r3, #20]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	429a      	cmp	r2, r3
 800790e:	d302      	bcc.n	8007916 <osMessageQueueNew+0x82>
        mem = 1;
 8007910:	2301      	movs	r3, #1
 8007912:	623b      	str	r3, [r7, #32]
 8007914:	e014      	b.n	8007940 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d110      	bne.n	8007940 <osMessageQueueNew+0xac>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800792a:	2b00      	cmp	r3, #0
 800792c:	d108      	bne.n	8007940 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <osMessageQueueNew+0xac>
          mem = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	623b      	str	r3, [r7, #32]
 800793a:	e001      	b.n	8007940 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d10c      	bne.n	8007960 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6899      	ldr	r1, [r3, #8]
 800794e:	2300      	movs	r3, #0
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	460b      	mov	r3, r1
 8007954:	68b9      	ldr	r1, [r7, #8]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f9e0 	bl	8007d1c <xQueueGenericCreateStatic>
 800795c:	6278      	str	r0, [r7, #36]	; 0x24
 800795e:	e008      	b.n	8007972 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d105      	bne.n	8007972 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007966:	2200      	movs	r2, #0
 8007968:	68b9      	ldr	r1, [r7, #8]
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 fa48 	bl	8007e00 <xQueueGenericCreate>
 8007970:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00c      	beq.n	8007992 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <osMessageQueueNew+0xf2>
        name = attr->name;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	61fb      	str	r3, [r7, #28]
 8007984:	e001      	b.n	800798a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800798a:	69f9      	ldr	r1, [r7, #28]
 800798c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800798e:	f000 fe11 	bl	80085b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007994:	4618      	mov	r0, r3
 8007996:	3728      	adds	r7, #40	; 0x28
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000044 	.word	0x20000044

080079a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	603b      	str	r3, [r7, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079b8:	f3ef 8305 	mrs	r3, IPSR
 80079bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80079be:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10f      	bne.n	80079e4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c4:	f3ef 8310 	mrs	r3, PRIMASK
 80079c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d109      	bne.n	80079e4 <osMessageQueuePut+0x44>
 80079d0:	4b2b      	ldr	r3, [pc, #172]	; (8007a80 <osMessageQueuePut+0xe0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d12e      	bne.n	8007a36 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80079d8:	f3ef 8311 	mrs	r3, BASEPRI
 80079dc:	617b      	str	r3, [r7, #20]
  return(result);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d028      	beq.n	8007a36 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <osMessageQueuePut+0x56>
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <osMessageQueuePut+0x56>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80079f6:	f06f 0303 	mvn.w	r3, #3
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80079fc:	e039      	b.n	8007a72 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007a02:	f107 0210 	add.w	r2, r7, #16
 8007a06:	2300      	movs	r3, #0
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	6a38      	ldr	r0, [r7, #32]
 8007a0c:	f000 fb52 	bl	80080b4 <xQueueGenericSendFromISR>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d003      	beq.n	8007a1e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007a16:	f06f 0302 	mvn.w	r3, #2
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a1c:	e029      	b.n	8007a72 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d026      	beq.n	8007a72 <osMessageQueuePut+0xd2>
 8007a24:	4b17      	ldr	r3, [pc, #92]	; (8007a84 <osMessageQueuePut+0xe4>)
 8007a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a34:	e01d      	b.n	8007a72 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <osMessageQueuePut+0xa2>
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007a42:	f06f 0303 	mvn.w	r3, #3
 8007a46:	627b      	str	r3, [r7, #36]	; 0x24
 8007a48:	e014      	b.n	8007a74 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	6a38      	ldr	r0, [r7, #32]
 8007a52:	f000 fa35 	bl	8007ec0 <xQueueGenericSend>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d00b      	beq.n	8007a74 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007a62:	f06f 0301 	mvn.w	r3, #1
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
 8007a68:	e004      	b.n	8007a74 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007a6a:	f06f 0302 	mvn.w	r3, #2
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a70:	e000      	b.n	8007a74 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007a72:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3728      	adds	r7, #40	; 0x28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000044 	.word	0x20000044
 8007a84:	e000ed04 	.word	0xe000ed04

08007a88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4a06      	ldr	r2, [pc, #24]	; (8007ab0 <vApplicationGetIdleTaskMemory+0x28>)
 8007a98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	4a05      	ldr	r2, [pc, #20]	; (8007ab4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007a9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2280      	movs	r2, #128	; 0x80
 8007aa4:	601a      	str	r2, [r3, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	3714      	adds	r7, #20
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bc80      	pop	{r7}
 8007aae:	4770      	bx	lr
 8007ab0:	20000048 	.word	0x20000048
 8007ab4:	200000a4 	.word	0x200000a4

08007ab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4a07      	ldr	r2, [pc, #28]	; (8007ae4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007ac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4a06      	ldr	r2, [pc, #24]	; (8007ae8 <vApplicationGetTimerTaskMemory+0x30>)
 8007ace:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ad6:	601a      	str	r2, [r3, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	200002a4 	.word	0x200002a4
 8007ae8:	20000300 	.word	0x20000300

08007aec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f103 0208 	add.w	r2, r3, #8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f04f 32ff 	mov.w	r2, #4294967295
 8007b04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f103 0208 	add.w	r2, r3, #8
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f103 0208 	add.w	r2, r3, #8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr

08007b2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bc80      	pop	{r7}
 8007b40:	4770      	bx	lr

08007b42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	683a      	ldr	r2, [r7, #0]
 8007b66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	1c5a      	adds	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	601a      	str	r2, [r3, #0]
}
 8007b7e:	bf00      	nop
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bc80      	pop	{r7}
 8007b86:	4770      	bx	lr

08007b88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d103      	bne.n	8007ba8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e00c      	b.n	8007bc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3308      	adds	r3, #8
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	e002      	b.n	8007bb6 <vListInsert+0x2e>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	60fb      	str	r3, [r7, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d2f6      	bcs.n	8007bb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	601a      	str	r2, [r3, #0]
}
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bc80      	pop	{r7}
 8007bf6:	4770      	bx	lr

08007bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6892      	ldr	r2, [r2, #8]
 8007c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6852      	ldr	r2, [r2, #4]
 8007c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d103      	bne.n	8007c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	1e5a      	subs	r2, r3, #1
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
	...

08007c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60bb      	str	r3, [r7, #8]
 8007c72:	e7fe      	b.n	8007c72 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007c74:	f001 ffd0 	bl	8009c18 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c80:	68f9      	ldr	r1, [r7, #12]
 8007c82:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c84:	fb01 f303 	mul.w	r3, r1, r3
 8007c88:	441a      	add	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	68f9      	ldr	r1, [r7, #12]
 8007ca8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007caa:	fb01 f303 	mul.w	r3, r1, r3
 8007cae:	441a      	add	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	22ff      	movs	r2, #255	; 0xff
 8007cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	22ff      	movs	r2, #255	; 0xff
 8007cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d114      	bne.n	8007cf4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01a      	beq.n	8007d08 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3310      	adds	r3, #16
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f001 f914 	bl	8008f04 <xTaskRemoveFromEventList>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d012      	beq.n	8007d08 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <xQueueGenericReset+0xcc>)
 8007ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	e009      	b.n	8007d08 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fef7 	bl	8007aec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3324      	adds	r3, #36	; 0x24
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fef2 	bl	8007aec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d08:	f001 ffb4 	bl	8009c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d0c:	2301      	movs	r3, #1
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08e      	sub	sp, #56	; 0x38
 8007d20:	af02      	add	r7, sp, #8
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <xQueueGenericCreateStatic+0x28>
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d42:	e7fe      	b.n	8007d42 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d109      	bne.n	8007d5e <xQueueGenericCreateStatic+0x42>
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d5c:	e7fe      	b.n	8007d5c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <xQueueGenericCreateStatic+0x4e>
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <xQueueGenericCreateStatic+0x52>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e000      	b.n	8007d70 <xQueueGenericCreateStatic+0x54>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <xQueueGenericCreateStatic+0x6c>
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	623b      	str	r3, [r7, #32]
 8007d86:	e7fe      	b.n	8007d86 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <xQueueGenericCreateStatic+0x78>
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <xQueueGenericCreateStatic+0x7c>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <xQueueGenericCreateStatic+0x7e>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d109      	bne.n	8007db2 <xQueueGenericCreateStatic+0x96>
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	61fb      	str	r3, [r7, #28]
 8007db0:	e7fe      	b.n	8007db0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007db2:	2350      	movs	r3, #80	; 0x50
 8007db4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b50      	cmp	r3, #80	; 0x50
 8007dba:	d009      	beq.n	8007dd0 <xQueueGenericCreateStatic+0xb4>
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	61bb      	str	r3, [r7, #24]
 8007dce:	e7fe      	b.n	8007dce <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00d      	beq.n	8007df6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007de2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	4613      	mov	r3, r2
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f842 	bl	8007e7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3730      	adds	r7, #48	; 0x30
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08a      	sub	sp, #40	; 0x28
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <xQueueGenericCreate+0x28>
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	613b      	str	r3, [r7, #16]
 8007e26:	e7fe      	b.n	8007e26 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d102      	bne.n	8007e34 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
 8007e32:	e004      	b.n	8007e3e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	3350      	adds	r3, #80	; 0x50
 8007e42:	4618      	mov	r0, r3
 8007e44:	f001 ffde 	bl	8009e04 <pvPortMalloc>
 8007e48:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00f      	beq.n	8007e70 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	3350      	adds	r3, #80	; 0x50
 8007e54:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e5e:	79fa      	ldrb	r2, [r7, #7]
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 f805 	bl	8007e7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e70:	69bb      	ldr	r3, [r7, #24]
	}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	60f8      	str	r0, [r7, #12]
 8007e82:	60b9      	str	r1, [r7, #8]
 8007e84:	607a      	str	r2, [r7, #4]
 8007e86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d103      	bne.n	8007e96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e002      	b.n	8007e9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ea2:	69bb      	ldr	r3, [r7, #24]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	69b8      	ldr	r0, [r7, #24]
 8007eac:	f7ff fece 	bl	8007c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	78fa      	ldrb	r2, [r7, #3]
 8007eb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08e      	sub	sp, #56	; 0x38
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d109      	bne.n	8007ef0 <xQueueGenericSend+0x30>
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eee:	e7fe      	b.n	8007eee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSend+0x3e>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSend+0x42>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSend+0x44>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d109      	bne.n	8007f1c <xQueueGenericSend+0x5c>
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1a:	e7fe      	b.n	8007f1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d103      	bne.n	8007f2a <xQueueGenericSend+0x6a>
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <xQueueGenericSend+0x6e>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <xQueueGenericSend+0x70>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d109      	bne.n	8007f48 <xQueueGenericSend+0x88>
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	623b      	str	r3, [r7, #32]
 8007f46:	e7fe      	b.n	8007f46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f48:	f001 f996 	bl	8009278 <xTaskGetSchedulerState>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <xQueueGenericSend+0x98>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <xQueueGenericSend+0x9c>
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <xQueueGenericSend+0x9e>
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d109      	bne.n	8007f76 <xQueueGenericSend+0xb6>
 8007f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f66:	f383 8811 	msr	BASEPRI, r3
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	61fb      	str	r3, [r7, #28]
 8007f74:	e7fe      	b.n	8007f74 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f76:	f001 fe4f 	bl	8009c18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d302      	bcc.n	8007f8c <xQueueGenericSend+0xcc>
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d129      	bne.n	8007fe0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f92:	f000 f9ff 	bl	8008394 <prvCopyDataToQueue>
 8007f96:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d010      	beq.n	8007fc2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	3324      	adds	r3, #36	; 0x24
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 ffad 	bl	8008f04 <xTaskRemoveFromEventList>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d013      	beq.n	8007fd8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fb0:	4b3f      	ldr	r3, [pc, #252]	; (80080b0 <xQueueGenericSend+0x1f0>)
 8007fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb6:	601a      	str	r2, [r3, #0]
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	e00a      	b.n	8007fd8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d007      	beq.n	8007fd8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fc8:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <xQueueGenericSend+0x1f0>)
 8007fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fd8:	f001 fe4c 	bl	8009c74 <vPortExitCritical>
				return pdPASS;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e063      	b.n	80080a8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d103      	bne.n	8007fee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fe6:	f001 fe45 	bl	8009c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e05c      	b.n	80080a8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ff4:	f107 0314 	add.w	r3, r7, #20
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 ffe5 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008002:	f001 fe37 	bl	8009c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008006:	f000 fd5d 	bl	8008ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800800a:	f001 fe05 	bl	8009c18 <vPortEnterCritical>
 800800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008014:	b25b      	sxtb	r3, r3
 8008016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801a:	d103      	bne.n	8008024 <xQueueGenericSend+0x164>
 800801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800802a:	b25b      	sxtb	r3, r3
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d103      	bne.n	800803a <xQueueGenericSend+0x17a>
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800803a:	f001 fe1b 	bl	8009c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800803e:	1d3a      	adds	r2, r7, #4
 8008040:	f107 0314 	add.w	r3, r7, #20
 8008044:	4611      	mov	r1, r2
 8008046:	4618      	mov	r0, r3
 8008048:	f000 ffd4 	bl	8008ff4 <xTaskCheckForTimeOut>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d124      	bne.n	800809c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008054:	f000 fa96 	bl	8008584 <prvIsQueueFull>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d018      	beq.n	8008090 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800805e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008060:	3310      	adds	r3, #16
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f000 fefe 	bl	8008e68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800806c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800806e:	f000 fa21 	bl	80084b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008072:	f000 fd35 	bl	8008ae0 <xTaskResumeAll>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	f47f af7c 	bne.w	8007f76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800807e:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <xQueueGenericSend+0x1f0>)
 8008080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	e772      	b.n	8007f76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008092:	f000 fa0f 	bl	80084b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008096:	f000 fd23 	bl	8008ae0 <xTaskResumeAll>
 800809a:	e76c      	b.n	8007f76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800809c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800809e:	f000 fa09 	bl	80084b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a2:	f000 fd1d 	bl	8008ae0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80080a6:	2300      	movs	r3, #0
		}
	}
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3738      	adds	r7, #56	; 0x38
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	e000ed04 	.word	0xe000ed04

080080b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08e      	sub	sp, #56	; 0x38
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <xQueueGenericSendFromISR+0x2c>
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
 80080de:	e7fe      	b.n	80080de <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d103      	bne.n	80080ee <xQueueGenericSendFromISR+0x3a>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d101      	bne.n	80080f2 <xQueueGenericSendFromISR+0x3e>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e000      	b.n	80080f4 <xQueueGenericSendFromISR+0x40>
 80080f2:	2300      	movs	r3, #0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d109      	bne.n	800810c <xQueueGenericSendFromISR+0x58>
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	f383 8811 	msr	BASEPRI, r3
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	f3bf 8f4f 	dsb	sy
 8008108:	623b      	str	r3, [r7, #32]
 800810a:	e7fe      	b.n	800810a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d103      	bne.n	800811a <xQueueGenericSendFromISR+0x66>
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <xQueueGenericSendFromISR+0x6a>
 800811a:	2301      	movs	r3, #1
 800811c:	e000      	b.n	8008120 <xQueueGenericSendFromISR+0x6c>
 800811e:	2300      	movs	r3, #0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d109      	bne.n	8008138 <xQueueGenericSendFromISR+0x84>
 8008124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008128:	f383 8811 	msr	BASEPRI, r3
 800812c:	f3bf 8f6f 	isb	sy
 8008130:	f3bf 8f4f 	dsb	sy
 8008134:	61fb      	str	r3, [r7, #28]
 8008136:	e7fe      	b.n	8008136 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008138:	f001 fe28 	bl	8009d8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800813c:	f3ef 8211 	mrs	r2, BASEPRI
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	61ba      	str	r2, [r7, #24]
 8008152:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008154:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008160:	429a      	cmp	r2, r3
 8008162:	d302      	bcc.n	800816a <xQueueGenericSendFromISR+0xb6>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d12c      	bne.n	80081c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800817a:	f000 f90b 	bl	8008394 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800817e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008186:	d112      	bne.n	80081ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	2b00      	cmp	r3, #0
 800818e:	d016      	beq.n	80081be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008192:	3324      	adds	r3, #36	; 0x24
 8008194:	4618      	mov	r0, r3
 8008196:	f000 feb5 	bl	8008f04 <xTaskRemoveFromEventList>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00e      	beq.n	80081be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	601a      	str	r2, [r3, #0]
 80081ac:	e007      	b.n	80081be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081b2:	3301      	adds	r3, #1
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	b25a      	sxtb	r2, r3
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081be:	2301      	movs	r3, #1
 80081c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80081c2:	e001      	b.n	80081c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081c4:	2300      	movs	r3, #0
 80081c6:	637b      	str	r3, [r7, #52]	; 0x34
 80081c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3738      	adds	r7, #56	; 0x38
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	; 0x30
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <xQueueReceive+0x2e>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	623b      	str	r3, [r7, #32]
 8008208:	e7fe      	b.n	8008208 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <xQueueReceive+0x3c>
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <xQueueReceive+0x40>
 8008218:	2301      	movs	r3, #1
 800821a:	e000      	b.n	800821e <xQueueReceive+0x42>
 800821c:	2300      	movs	r3, #0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <xQueueReceive+0x5a>
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	61fb      	str	r3, [r7, #28]
 8008234:	e7fe      	b.n	8008234 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008236:	f001 f81f 	bl	8009278 <xTaskGetSchedulerState>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d102      	bne.n	8008246 <xQueueReceive+0x6a>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <xQueueReceive+0x6e>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <xQueueReceive+0x70>
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d109      	bne.n	8008264 <xQueueReceive+0x88>
 8008250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	e7fe      	b.n	8008262 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008264:	f001 fcd8 	bl	8009c18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01f      	beq.n	80082b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008278:	f000 f8f6 	bl	8008468 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	1e5a      	subs	r2, r3, #1
 8008280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008282:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00f      	beq.n	80082ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	3310      	adds	r3, #16
 8008290:	4618      	mov	r0, r3
 8008292:	f000 fe37 	bl	8008f04 <xTaskRemoveFromEventList>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d007      	beq.n	80082ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800829c:	4b3c      	ldr	r3, [pc, #240]	; (8008390 <xQueueReceive+0x1b4>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ac:	f001 fce2 	bl	8009c74 <vPortExitCritical>
				return pdPASS;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e069      	b.n	8008388 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d103      	bne.n	80082c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082ba:	f001 fcdb 	bl	8009c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082be:	2300      	movs	r3, #0
 80082c0:	e062      	b.n	8008388 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082c8:	f107 0310 	add.w	r3, r7, #16
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 fe7b 	bl	8008fc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082d2:	2301      	movs	r3, #1
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082d6:	f001 fccd 	bl	8009c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082da:	f000 fbf3 	bl	8008ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082de:	f001 fc9b 	bl	8009c18 <vPortEnterCritical>
 80082e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e8:	b25b      	sxtb	r3, r3
 80082ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ee:	d103      	bne.n	80082f8 <xQueueReceive+0x11c>
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082fe:	b25b      	sxtb	r3, r3
 8008300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008304:	d103      	bne.n	800830e <xQueueReceive+0x132>
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830e:	f001 fcb1 	bl	8009c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008312:	1d3a      	adds	r2, r7, #4
 8008314:	f107 0310 	add.w	r3, r7, #16
 8008318:	4611      	mov	r1, r2
 800831a:	4618      	mov	r0, r3
 800831c:	f000 fe6a 	bl	8008ff4 <xTaskCheckForTimeOut>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d123      	bne.n	800836e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008328:	f000 f916 	bl	8008558 <prvIsQueueEmpty>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d017      	beq.n	8008362 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008334:	3324      	adds	r3, #36	; 0x24
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	4611      	mov	r1, r2
 800833a:	4618      	mov	r0, r3
 800833c:	f000 fd94 	bl	8008e68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008342:	f000 f8b7 	bl	80084b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008346:	f000 fbcb 	bl	8008ae0 <xTaskResumeAll>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d189      	bne.n	8008264 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008350:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <xQueueReceive+0x1b4>)
 8008352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	e780      	b.n	8008264 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008364:	f000 f8a6 	bl	80084b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008368:	f000 fbba 	bl	8008ae0 <xTaskResumeAll>
 800836c:	e77a      	b.n	8008264 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800836e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008370:	f000 f8a0 	bl	80084b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008374:	f000 fbb4 	bl	8008ae0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837a:	f000 f8ed 	bl	8008558 <prvIsQueueEmpty>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	f43f af6f 	beq.w	8008264 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008386:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008388:	4618      	mov	r0, r3
 800838a:	3730      	adds	r7, #48	; 0x30
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10d      	bne.n	80083ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d14d      	bne.n	8008456 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 ff78 	bl	80092b4 <xTaskPriorityDisinherit>
 80083c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	605a      	str	r2, [r3, #4]
 80083cc:	e043      	b.n	8008456 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d119      	bne.n	8008408 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6898      	ldr	r0, [r3, #8]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	461a      	mov	r2, r3
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	f001 ff08 	bl	800a1f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	689a      	ldr	r2, [r3, #8]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	441a      	add	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689a      	ldr	r2, [r3, #8]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d32b      	bcc.n	8008456 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	609a      	str	r2, [r3, #8]
 8008406:	e026      	b.n	8008456 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	68d8      	ldr	r0, [r3, #12]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008410:	461a      	mov	r2, r3
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	f001 feee 	bl	800a1f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	425b      	negs	r3, r3
 8008422:	441a      	add	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	68da      	ldr	r2, [r3, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d207      	bcs.n	8008444 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843c:	425b      	negs	r3, r3
 800843e:	441a      	add	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d105      	bne.n	8008456 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	3b01      	subs	r3, #1
 8008454:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1c5a      	adds	r2, r3, #1
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800845e:	697b      	ldr	r3, [r7, #20]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	2b00      	cmp	r3, #0
 8008478:	d018      	beq.n	80084ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68da      	ldr	r2, [r3, #12]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	441a      	add	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	68da      	ldr	r2, [r3, #12]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	429a      	cmp	r2, r3
 8008492:	d303      	bcc.n	800849c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68d9      	ldr	r1, [r3, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a4:	461a      	mov	r2, r3
 80084a6:	6838      	ldr	r0, [r7, #0]
 80084a8:	f001 fea4 	bl	800a1f4 <memcpy>
	}
}
 80084ac:	bf00      	nop
 80084ae:	3708      	adds	r7, #8
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084bc:	f001 fbac 	bl	8009c18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084c8:	e011      	b.n	80084ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d012      	beq.n	80084f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	3324      	adds	r3, #36	; 0x24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f000 fd14 	bl	8008f04 <xTaskRemoveFromEventList>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084e2:	f000 fde7 	bl	80090b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	dce9      	bgt.n	80084ca <prvUnlockQueue+0x16>
 80084f6:	e000      	b.n	80084fa <prvUnlockQueue+0x46>
					break;
 80084f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	22ff      	movs	r2, #255	; 0xff
 80084fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008502:	f001 fbb7 	bl	8009c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008506:	f001 fb87 	bl	8009c18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008510:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008512:	e011      	b.n	8008538 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d012      	beq.n	8008542 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3310      	adds	r3, #16
 8008520:	4618      	mov	r0, r3
 8008522:	f000 fcef 	bl	8008f04 <xTaskRemoveFromEventList>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800852c:	f000 fdc2 	bl	80090b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	3b01      	subs	r3, #1
 8008534:	b2db      	uxtb	r3, r3
 8008536:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800853c:	2b00      	cmp	r3, #0
 800853e:	dce9      	bgt.n	8008514 <prvUnlockQueue+0x60>
 8008540:	e000      	b.n	8008544 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008542:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	22ff      	movs	r2, #255	; 0xff
 8008548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800854c:	f001 fb92 	bl	8009c74 <vPortExitCritical>
}
 8008550:	bf00      	nop
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008560:	f001 fb5a 	bl	8009c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800856c:	2301      	movs	r3, #1
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e001      	b.n	8008576 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008576:	f001 fb7d 	bl	8009c74 <vPortExitCritical>

	return xReturn;
 800857a:	68fb      	ldr	r3, [r7, #12]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800858c:	f001 fb44 	bl	8009c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008598:	429a      	cmp	r2, r3
 800859a:	d102      	bne.n	80085a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800859c:	2301      	movs	r3, #1
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	e001      	b.n	80085a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085a6:	f001 fb65 	bl	8009c74 <vPortExitCritical>

	return xReturn;
 80085aa:	68fb      	ldr	r3, [r7, #12]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085be:	2300      	movs	r3, #0
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	e014      	b.n	80085ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085c4:	4a0e      	ldr	r2, [pc, #56]	; (8008600 <vQueueAddToRegistry+0x4c>)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10b      	bne.n	80085e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085d0:	490b      	ldr	r1, [pc, #44]	; (8008600 <vQueueAddToRegistry+0x4c>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	683a      	ldr	r2, [r7, #0]
 80085d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085da:	4a09      	ldr	r2, [pc, #36]	; (8008600 <vQueueAddToRegistry+0x4c>)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4413      	add	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085e6:	e005      	b.n	80085f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3301      	adds	r3, #1
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2b07      	cmp	r3, #7
 80085f2:	d9e7      	bls.n	80085c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	20002948 	.word	0x20002948

08008604 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008614:	f001 fb00 	bl	8009c18 <vPortEnterCritical>
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800861e:	b25b      	sxtb	r3, r3
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d103      	bne.n	800862e <vQueueWaitForMessageRestricted+0x2a>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008634:	b25b      	sxtb	r3, r3
 8008636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863a:	d103      	bne.n	8008644 <vQueueWaitForMessageRestricted+0x40>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008644:	f001 fb16 	bl	8009c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864c:	2b00      	cmp	r3, #0
 800864e:	d106      	bne.n	800865e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	3324      	adds	r3, #36	; 0x24
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fc29 	bl	8008eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	f7ff ff28 	bl	80084b4 <prvUnlockQueue>
	}
 8008664:	bf00      	nop
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08e      	sub	sp, #56	; 0x38
 8008670:	af04      	add	r7, sp, #16
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <xTaskCreateStatic+0x28>
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	623b      	str	r3, [r7, #32]
 8008692:	e7fe      	b.n	8008692 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	2b00      	cmp	r3, #0
 8008698:	d109      	bne.n	80086ae <xTaskCreateStatic+0x42>
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61fb      	str	r3, [r7, #28]
 80086ac:	e7fe      	b.n	80086ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086ae:	235c      	movs	r3, #92	; 0x5c
 80086b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	2b5c      	cmp	r3, #92	; 0x5c
 80086b6:	d009      	beq.n	80086cc <xTaskCreateStatic+0x60>
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	61bb      	str	r3, [r7, #24]
 80086ca:	e7fe      	b.n	80086ca <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01e      	beq.n	8008710 <xTaskCreateStatic+0xa4>
 80086d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01b      	beq.n	8008710 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086ea:	2300      	movs	r3, #0
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	9302      	str	r3, [sp, #8]
 80086f2:	f107 0314 	add.w	r3, r7, #20
 80086f6:	9301      	str	r3, [sp, #4]
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	68b9      	ldr	r1, [r7, #8]
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 f850 	bl	80087a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800870a:	f000 f8d3 	bl	80088b4 <prvAddNewTaskToReadyList>
 800870e:	e001      	b.n	8008714 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008714:	697b      	ldr	r3, [r7, #20]
	}
 8008716:	4618      	mov	r0, r3
 8008718:	3728      	adds	r7, #40	; 0x28
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800871e:	b580      	push	{r7, lr}
 8008720:	b08c      	sub	sp, #48	; 0x30
 8008722:	af04      	add	r7, sp, #16
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	603b      	str	r3, [r7, #0]
 800872a:	4613      	mov	r3, r2
 800872c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	4618      	mov	r0, r3
 8008734:	f001 fb66 	bl	8009e04 <pvPortMalloc>
 8008738:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00e      	beq.n	800875e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008740:	205c      	movs	r0, #92	; 0x5c
 8008742:	f001 fb5f 	bl	8009e04 <pvPortMalloc>
 8008746:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	631a      	str	r2, [r3, #48]	; 0x30
 8008754:	e005      	b.n	8008762 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008756:	6978      	ldr	r0, [r7, #20]
 8008758:	f001 fc16 	bl	8009f88 <vPortFree>
 800875c:	e001      	b.n	8008762 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800875e:	2300      	movs	r3, #0
 8008760:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d017      	beq.n	8008798 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008770:	88fa      	ldrh	r2, [r7, #6]
 8008772:	2300      	movs	r3, #0
 8008774:	9303      	str	r3, [sp, #12]
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	9302      	str	r3, [sp, #8]
 800877a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f80e 	bl	80087a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800878c:	69f8      	ldr	r0, [r7, #28]
 800878e:	f000 f891 	bl	80088b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008792:	2301      	movs	r3, #1
 8008794:	61bb      	str	r3, [r7, #24]
 8008796:	e002      	b.n	800879e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008798:	f04f 33ff 	mov.w	r3, #4294967295
 800879c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800879e:	69bb      	ldr	r3, [r7, #24]
	}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3720      	adds	r7, #32
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	461a      	mov	r2, r3
 80087c0:	21a5      	movs	r1, #165	; 0xa5
 80087c2:	f001 fd22 	bl	800a20a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087d0:	3b01      	subs	r3, #1
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	f023 0307 	bic.w	r3, r3, #7
 80087de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <prvInitialiseNewTask+0x56>
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e7fe      	b.n	80087fc <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	e012      	b.n	800882a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	4413      	add	r3, r2
 800880a:	7819      	ldrb	r1, [r3, #0]
 800880c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880e:	69fb      	ldr	r3, [r7, #28]
 8008810:	4413      	add	r3, r2
 8008812:	3334      	adds	r3, #52	; 0x34
 8008814:	460a      	mov	r2, r1
 8008816:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	4413      	add	r3, r2
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d006      	beq.n	8008832 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	3301      	adds	r3, #1
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	2b0f      	cmp	r3, #15
 800882e:	d9e9      	bls.n	8008804 <prvInitialiseNewTask+0x5c>
 8008830:	e000      	b.n	8008834 <prvInitialiseNewTask+0x8c>
		{
			break;
 8008832:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	2b37      	cmp	r3, #55	; 0x37
 8008840:	d901      	bls.n	8008846 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008842:	2337      	movs	r3, #55	; 0x37
 8008844:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008850:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	2200      	movs	r2, #0
 8008856:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	3304      	adds	r3, #4
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff f964 	bl	8007b2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	3318      	adds	r3, #24
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff f95f 	bl	8007b2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008870:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008880:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	2200      	movs	r2, #0
 8008886:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	68f9      	ldr	r1, [r7, #12]
 8008894:	69b8      	ldr	r0, [r7, #24]
 8008896:	f001 f8d7 	bl	8009a48 <pxPortInitialiseStack>
 800889a:	4602      	mov	r2, r0
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088ac:	bf00      	nop
 80088ae:	3720      	adds	r7, #32
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088bc:	f001 f9ac 	bl	8009c18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088c0:	4b2d      	ldr	r3, [pc, #180]	; (8008978 <prvAddNewTaskToReadyList+0xc4>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	4a2c      	ldr	r2, [pc, #176]	; (8008978 <prvAddNewTaskToReadyList+0xc4>)
 80088c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088ca:	4b2c      	ldr	r3, [pc, #176]	; (800897c <prvAddNewTaskToReadyList+0xc8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d109      	bne.n	80088e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088d2:	4a2a      	ldr	r2, [pc, #168]	; (800897c <prvAddNewTaskToReadyList+0xc8>)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80088d8:	4b27      	ldr	r3, [pc, #156]	; (8008978 <prvAddNewTaskToReadyList+0xc4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d110      	bne.n	8008902 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80088e0:	f000 fc0c 	bl	80090fc <prvInitialiseTaskLists>
 80088e4:	e00d      	b.n	8008902 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80088e6:	4b26      	ldr	r3, [pc, #152]	; (8008980 <prvAddNewTaskToReadyList+0xcc>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d109      	bne.n	8008902 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80088ee:	4b23      	ldr	r3, [pc, #140]	; (800897c <prvAddNewTaskToReadyList+0xc8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d802      	bhi.n	8008902 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088fc:	4a1f      	ldr	r2, [pc, #124]	; (800897c <prvAddNewTaskToReadyList+0xc8>)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008902:	4b20      	ldr	r3, [pc, #128]	; (8008984 <prvAddNewTaskToReadyList+0xd0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3301      	adds	r3, #1
 8008908:	4a1e      	ldr	r2, [pc, #120]	; (8008984 <prvAddNewTaskToReadyList+0xd0>)
 800890a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800890c:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <prvAddNewTaskToReadyList+0xd0>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <prvAddNewTaskToReadyList+0xd4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	429a      	cmp	r2, r3
 800891e:	d903      	bls.n	8008928 <prvAddNewTaskToReadyList+0x74>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008924:	4a18      	ldr	r2, [pc, #96]	; (8008988 <prvAddNewTaskToReadyList+0xd4>)
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892c:	4613      	mov	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4a15      	ldr	r2, [pc, #84]	; (800898c <prvAddNewTaskToReadyList+0xd8>)
 8008936:	441a      	add	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f7ff f8ff 	bl	8007b42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008944:	f001 f996 	bl	8009c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008948:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <prvAddNewTaskToReadyList+0xcc>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00e      	beq.n	800896e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <prvAddNewTaskToReadyList+0xc8>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	429a      	cmp	r2, r3
 800895c:	d207      	bcs.n	800896e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800895e:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <prvAddNewTaskToReadyList+0xdc>)
 8008960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	20000bd4 	.word	0x20000bd4
 800897c:	20000700 	.word	0x20000700
 8008980:	20000be0 	.word	0x20000be0
 8008984:	20000bf0 	.word	0x20000bf0
 8008988:	20000bdc 	.word	0x20000bdc
 800898c:	20000704 	.word	0x20000704
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d016      	beq.n	80089d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089a6:	4b13      	ldr	r3, [pc, #76]	; (80089f4 <vTaskDelay+0x60>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <vTaskDelay+0x2e>
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	60bb      	str	r3, [r7, #8]
 80089c0:	e7fe      	b.n	80089c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80089c2:	f000 f87f 	bl	8008ac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089c6:	2100      	movs	r1, #0
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fcdf 	bl	800938c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089ce:	f000 f887 	bl	8008ae0 <xTaskResumeAll>
 80089d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d107      	bne.n	80089ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80089da:	4b07      	ldr	r3, [pc, #28]	; (80089f8 <vTaskDelay+0x64>)
 80089dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089e0:	601a      	str	r2, [r3, #0]
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	20000bfc 	.word	0x20000bfc
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b08a      	sub	sp, #40	; 0x28
 8008a00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	1d39      	adds	r1, r7, #4
 8008a0e:	f107 0308 	add.w	r3, r7, #8
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7ff f838 	bl	8007a88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	9202      	str	r2, [sp, #8]
 8008a20:	9301      	str	r3, [sp, #4]
 8008a22:	2300      	movs	r3, #0
 8008a24:	9300      	str	r3, [sp, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	460a      	mov	r2, r1
 8008a2a:	4920      	ldr	r1, [pc, #128]	; (8008aac <vTaskStartScheduler+0xb0>)
 8008a2c:	4820      	ldr	r0, [pc, #128]	; (8008ab0 <vTaskStartScheduler+0xb4>)
 8008a2e:	f7ff fe1d 	bl	800866c <xTaskCreateStatic>
 8008a32:	4602      	mov	r2, r0
 8008a34:	4b1f      	ldr	r3, [pc, #124]	; (8008ab4 <vTaskStartScheduler+0xb8>)
 8008a36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a38:	4b1e      	ldr	r3, [pc, #120]	; (8008ab4 <vTaskStartScheduler+0xb8>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a40:	2301      	movs	r3, #1
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e001      	b.n	8008a4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d102      	bne.n	8008a56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008a50:	f000 fcf0 	bl	8009434 <xTimerCreateTimerTask>
 8008a54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d115      	bne.n	8008a88 <vTaskStartScheduler+0x8c>
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a6e:	4b12      	ldr	r3, [pc, #72]	; (8008ab8 <vTaskStartScheduler+0xbc>)
 8008a70:	f04f 32ff 	mov.w	r2, #4294967295
 8008a74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a76:	4b11      	ldr	r3, [pc, #68]	; (8008abc <vTaskStartScheduler+0xc0>)
 8008a78:	2201      	movs	r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008a7c:	4b10      	ldr	r3, [pc, #64]	; (8008ac0 <vTaskStartScheduler+0xc4>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a82:	f001 f859 	bl	8009b38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a86:	e00d      	b.n	8008aa4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8e:	d109      	bne.n	8008aa4 <vTaskStartScheduler+0xa8>
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	e7fe      	b.n	8008aa2 <vTaskStartScheduler+0xa6>
}
 8008aa4:	bf00      	nop
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	0800a338 	.word	0x0800a338
 8008ab0:	080090cd 	.word	0x080090cd
 8008ab4:	20000bf8 	.word	0x20000bf8
 8008ab8:	20000bf4 	.word	0x20000bf4
 8008abc:	20000be0 	.word	0x20000be0
 8008ac0:	20000bd8 	.word	0x20000bd8

08008ac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008ac8:	4b04      	ldr	r3, [pc, #16]	; (8008adc <vTaskSuspendAll+0x18>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	4a03      	ldr	r2, [pc, #12]	; (8008adc <vTaskSuspendAll+0x18>)
 8008ad0:	6013      	str	r3, [r2, #0]
}
 8008ad2:	bf00      	nop
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	20000bfc 	.word	0x20000bfc

08008ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008aea:	2300      	movs	r3, #0
 8008aec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008aee:	4b41      	ldr	r3, [pc, #260]	; (8008bf4 <xTaskResumeAll+0x114>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d109      	bne.n	8008b0a <xTaskResumeAll+0x2a>
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	603b      	str	r3, [r7, #0]
 8008b08:	e7fe      	b.n	8008b08 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b0a:	f001 f885 	bl	8009c18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b0e:	4b39      	ldr	r3, [pc, #228]	; (8008bf4 <xTaskResumeAll+0x114>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3b01      	subs	r3, #1
 8008b14:	4a37      	ldr	r2, [pc, #220]	; (8008bf4 <xTaskResumeAll+0x114>)
 8008b16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b18:	4b36      	ldr	r3, [pc, #216]	; (8008bf4 <xTaskResumeAll+0x114>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d162      	bne.n	8008be6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b20:	4b35      	ldr	r3, [pc, #212]	; (8008bf8 <xTaskResumeAll+0x118>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d05e      	beq.n	8008be6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b28:	e02f      	b.n	8008b8a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008b2a:	4b34      	ldr	r3, [pc, #208]	; (8008bfc <xTaskResumeAll+0x11c>)
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3318      	adds	r3, #24
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff f85e 	bl	8007bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff f859 	bl	8007bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4a:	4b2d      	ldr	r3, [pc, #180]	; (8008c00 <xTaskResumeAll+0x120>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d903      	bls.n	8008b5a <xTaskResumeAll+0x7a>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	4a2a      	ldr	r2, [pc, #168]	; (8008c00 <xTaskResumeAll+0x120>)
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4a27      	ldr	r2, [pc, #156]	; (8008c04 <xTaskResumeAll+0x124>)
 8008b68:	441a      	add	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4610      	mov	r0, r2
 8008b72:	f7fe ffe6 	bl	8007b42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	4b23      	ldr	r3, [pc, #140]	; (8008c08 <xTaskResumeAll+0x128>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d302      	bcc.n	8008b8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008b84:	4b21      	ldr	r3, [pc, #132]	; (8008c0c <xTaskResumeAll+0x12c>)
 8008b86:	2201      	movs	r2, #1
 8008b88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b8a:	4b1c      	ldr	r3, [pc, #112]	; (8008bfc <xTaskResumeAll+0x11c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1cb      	bne.n	8008b2a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b98:	f000 fb4a 	bl	8009230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008b9c:	4b1c      	ldr	r3, [pc, #112]	; (8008c10 <xTaskResumeAll+0x130>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d010      	beq.n	8008bca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ba8:	f000 f844 	bl	8008c34 <xTaskIncrementTick>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008bb2:	4b16      	ldr	r3, [pc, #88]	; (8008c0c <xTaskResumeAll+0x12c>)
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1f1      	bne.n	8008ba8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008bc4:	4b12      	ldr	r3, [pc, #72]	; (8008c10 <xTaskResumeAll+0x130>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bca:	4b10      	ldr	r3, [pc, #64]	; (8008c0c <xTaskResumeAll+0x12c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bd6:	4b0f      	ldr	r3, [pc, #60]	; (8008c14 <xTaskResumeAll+0x134>)
 8008bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008be6:	f001 f845 	bl	8009c74 <vPortExitCritical>

	return xAlreadyYielded;
 8008bea:	68bb      	ldr	r3, [r7, #8]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20000bfc 	.word	0x20000bfc
 8008bf8:	20000bd4 	.word	0x20000bd4
 8008bfc:	20000b94 	.word	0x20000b94
 8008c00:	20000bdc 	.word	0x20000bdc
 8008c04:	20000704 	.word	0x20000704
 8008c08:	20000700 	.word	0x20000700
 8008c0c:	20000be8 	.word	0x20000be8
 8008c10:	20000be4 	.word	0x20000be4
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008c1e:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <xTaskGetTickCount+0x18>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008c24:	687b      	ldr	r3, [r7, #4]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bc80      	pop	{r7}
 8008c2e:	4770      	bx	lr
 8008c30:	20000bd8 	.word	0x20000bd8

08008c34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c3e:	4b51      	ldr	r3, [pc, #324]	; (8008d84 <xTaskIncrementTick+0x150>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f040 808d 	bne.w	8008d62 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c48:	4b4f      	ldr	r3, [pc, #316]	; (8008d88 <xTaskIncrementTick+0x154>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c50:	4a4d      	ldr	r2, [pc, #308]	; (8008d88 <xTaskIncrementTick+0x154>)
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d11f      	bne.n	8008c9c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c5c:	4b4b      	ldr	r3, [pc, #300]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d009      	beq.n	8008c7a <xTaskIncrementTick+0x46>
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	e7fe      	b.n	8008c78 <xTaskIncrementTick+0x44>
 8008c7a:	4b44      	ldr	r3, [pc, #272]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]
 8008c80:	4b43      	ldr	r3, [pc, #268]	; (8008d90 <xTaskIncrementTick+0x15c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a41      	ldr	r2, [pc, #260]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	4a41      	ldr	r2, [pc, #260]	; (8008d90 <xTaskIncrementTick+0x15c>)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	4b41      	ldr	r3, [pc, #260]	; (8008d94 <xTaskIncrementTick+0x160>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	4a3f      	ldr	r2, [pc, #252]	; (8008d94 <xTaskIncrementTick+0x160>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	f000 faca 	bl	8009230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c9c:	4b3e      	ldr	r3, [pc, #248]	; (8008d98 <xTaskIncrementTick+0x164>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d34e      	bcc.n	8008d44 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca6:	4b39      	ldr	r3, [pc, #228]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <xTaskIncrementTick+0x80>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e000      	b.n	8008cb6 <xTaskIncrementTick+0x82>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d004      	beq.n	8008cc4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cba:	4b37      	ldr	r3, [pc, #220]	; (8008d98 <xTaskIncrementTick+0x164>)
 8008cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc0:	601a      	str	r2, [r3, #0]
					break;
 8008cc2:	e03f      	b.n	8008d44 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008cc4:	4b31      	ldr	r3, [pc, #196]	; (8008d8c <xTaskIncrementTick+0x158>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cd4:	693a      	ldr	r2, [r7, #16]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d203      	bcs.n	8008ce4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cdc:	4a2e      	ldr	r2, [pc, #184]	; (8008d98 <xTaskIncrementTick+0x164>)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6013      	str	r3, [r2, #0]
						break;
 8008ce2:	e02f      	b.n	8008d44 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fe ff85 	bl	8007bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d004      	beq.n	8008d00 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	3318      	adds	r3, #24
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fe ff7c 	bl	8007bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	4b25      	ldr	r3, [pc, #148]	; (8008d9c <xTaskIncrementTick+0x168>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d903      	bls.n	8008d14 <xTaskIncrementTick+0xe0>
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	4a22      	ldr	r2, [pc, #136]	; (8008d9c <xTaskIncrementTick+0x168>)
 8008d12:	6013      	str	r3, [r2, #0]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d18:	4613      	mov	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4413      	add	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4a1f      	ldr	r2, [pc, #124]	; (8008da0 <xTaskIncrementTick+0x16c>)
 8008d22:	441a      	add	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	3304      	adds	r3, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f7fe ff09 	bl	8007b42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	4b1b      	ldr	r3, [pc, #108]	; (8008da4 <xTaskIncrementTick+0x170>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d3b3      	bcc.n	8008ca6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d42:	e7b0      	b.n	8008ca6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d44:	4b17      	ldr	r3, [pc, #92]	; (8008da4 <xTaskIncrementTick+0x170>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4a:	4915      	ldr	r1, [pc, #84]	; (8008da0 <xTaskIncrementTick+0x16c>)
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	440b      	add	r3, r1
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d907      	bls.n	8008d6c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	617b      	str	r3, [r7, #20]
 8008d60:	e004      	b.n	8008d6c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d62:	4b11      	ldr	r3, [pc, #68]	; (8008da8 <xTaskIncrementTick+0x174>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3301      	adds	r3, #1
 8008d68:	4a0f      	ldr	r2, [pc, #60]	; (8008da8 <xTaskIncrementTick+0x174>)
 8008d6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <xTaskIncrementTick+0x178>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008d74:	2301      	movs	r3, #1
 8008d76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d78:	697b      	ldr	r3, [r7, #20]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000bfc 	.word	0x20000bfc
 8008d88:	20000bd8 	.word	0x20000bd8
 8008d8c:	20000b8c 	.word	0x20000b8c
 8008d90:	20000b90 	.word	0x20000b90
 8008d94:	20000bec 	.word	0x20000bec
 8008d98:	20000bf4 	.word	0x20000bf4
 8008d9c:	20000bdc 	.word	0x20000bdc
 8008da0:	20000704 	.word	0x20000704
 8008da4:	20000700 	.word	0x20000700
 8008da8:	20000be4 	.word	0x20000be4
 8008dac:	20000be8 	.word	0x20000be8

08008db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008db6:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <vTaskSwitchContext+0xa4>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d003      	beq.n	8008dc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008dbe:	4b26      	ldr	r3, [pc, #152]	; (8008e58 <vTaskSwitchContext+0xa8>)
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008dc4:	e040      	b.n	8008e48 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008dc6:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <vTaskSwitchContext+0xa8>)
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008dcc:	4b23      	ldr	r3, [pc, #140]	; (8008e5c <vTaskSwitchContext+0xac>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	e00f      	b.n	8008df4 <vTaskSwitchContext+0x44>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d109      	bne.n	8008dee <vTaskSwitchContext+0x3e>
 8008dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	607b      	str	r3, [r7, #4]
 8008dec:	e7fe      	b.n	8008dec <vTaskSwitchContext+0x3c>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	60fb      	str	r3, [r7, #12]
 8008df4:	491a      	ldr	r1, [pc, #104]	; (8008e60 <vTaskSwitchContext+0xb0>)
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d0e5      	beq.n	8008dd4 <vTaskSwitchContext+0x24>
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4413      	add	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4a13      	ldr	r2, [pc, #76]	; (8008e60 <vTaskSwitchContext+0xb0>)
 8008e14:	4413      	add	r3, r2
 8008e16:	60bb      	str	r3, [r7, #8]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	605a      	str	r2, [r3, #4]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d104      	bne.n	8008e38 <vTaskSwitchContext+0x88>
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	605a      	str	r2, [r3, #4]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	4a09      	ldr	r2, [pc, #36]	; (8008e64 <vTaskSwitchContext+0xb4>)
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	4a06      	ldr	r2, [pc, #24]	; (8008e5c <vTaskSwitchContext+0xac>)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6013      	str	r3, [r2, #0]
}
 8008e48:	bf00      	nop
 8008e4a:	3714      	adds	r7, #20
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bc80      	pop	{r7}
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	20000bfc 	.word	0x20000bfc
 8008e58:	20000be8 	.word	0x20000be8
 8008e5c:	20000bdc 	.word	0x20000bdc
 8008e60:	20000704 	.word	0x20000704
 8008e64:	20000700 	.word	0x20000700

08008e68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <vTaskPlaceOnEventList+0x24>
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	e7fe      	b.n	8008e8a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e8c:	4b07      	ldr	r3, [pc, #28]	; (8008eac <vTaskPlaceOnEventList+0x44>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3318      	adds	r3, #24
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7fe fe77 	bl	8007b88 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	6838      	ldr	r0, [r7, #0]
 8008e9e:	f000 fa75 	bl	800938c <prvAddCurrentTaskToDelayedList>
}
 8008ea2:	bf00      	nop
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20000700 	.word	0x20000700

08008eb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <vTaskPlaceOnEventListRestricted+0x26>
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	617b      	str	r3, [r7, #20]
 8008ed4:	e7fe      	b.n	8008ed4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ed6:	4b0a      	ldr	r3, [pc, #40]	; (8008f00 <vTaskPlaceOnEventListRestricted+0x50>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	3318      	adds	r3, #24
 8008edc:	4619      	mov	r1, r3
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f7fe fe2f 	bl	8007b42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008eea:	f04f 33ff 	mov.w	r3, #4294967295
 8008eee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ef0:	6879      	ldr	r1, [r7, #4]
 8008ef2:	68b8      	ldr	r0, [r7, #8]
 8008ef4:	f000 fa4a 	bl	800938c <prvAddCurrentTaskToDelayedList>
	}
 8008ef8:	bf00      	nop
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	20000700 	.word	0x20000700

08008f04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d109      	bne.n	8008f2e <xTaskRemoveFromEventList+0x2a>
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	e7fe      	b.n	8008f2c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	3318      	adds	r3, #24
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe fe60 	bl	8007bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f38:	4b1d      	ldr	r3, [pc, #116]	; (8008fb0 <xTaskRemoveFromEventList+0xac>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d11d      	bne.n	8008f7c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	3304      	adds	r3, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fe fe57 	bl	8007bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f4e:	4b19      	ldr	r3, [pc, #100]	; (8008fb4 <xTaskRemoveFromEventList+0xb0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d903      	bls.n	8008f5e <xTaskRemoveFromEventList+0x5a>
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	4a16      	ldr	r2, [pc, #88]	; (8008fb4 <xTaskRemoveFromEventList+0xb0>)
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f62:	4613      	mov	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4a13      	ldr	r2, [pc, #76]	; (8008fb8 <xTaskRemoveFromEventList+0xb4>)
 8008f6c:	441a      	add	r2, r3
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7fe fde4 	bl	8007b42 <vListInsertEnd>
 8008f7a:	e005      	b.n	8008f88 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	3318      	adds	r3, #24
 8008f80:	4619      	mov	r1, r3
 8008f82:	480e      	ldr	r0, [pc, #56]	; (8008fbc <xTaskRemoveFromEventList+0xb8>)
 8008f84:	f7fe fddd 	bl	8007b42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <xTaskRemoveFromEventList+0xbc>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d905      	bls.n	8008fa2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f96:	2301      	movs	r3, #1
 8008f98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	; (8008fc4 <xTaskRemoveFromEventList+0xc0>)
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	e001      	b.n	8008fa6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008fa6:	697b      	ldr	r3, [r7, #20]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	20000bfc 	.word	0x20000bfc
 8008fb4:	20000bdc 	.word	0x20000bdc
 8008fb8:	20000704 	.word	0x20000704
 8008fbc:	20000b94 	.word	0x20000b94
 8008fc0:	20000700 	.word	0x20000700
 8008fc4:	20000be8 	.word	0x20000be8

08008fc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008fd0:	4b06      	ldr	r3, [pc, #24]	; (8008fec <vTaskInternalSetTimeOutState+0x24>)
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008fd8:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <vTaskInternalSetTimeOutState+0x28>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	20000bec 	.word	0x20000bec
 8008ff0:	20000bd8 	.word	0x20000bd8

08008ff4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b088      	sub	sp, #32
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d109      	bne.n	8009018 <xTaskCheckForTimeOut+0x24>
 8009004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	613b      	str	r3, [r7, #16]
 8009016:	e7fe      	b.n	8009016 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d109      	bne.n	8009032 <xTaskCheckForTimeOut+0x3e>
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60fb      	str	r3, [r7, #12]
 8009030:	e7fe      	b.n	8009030 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009032:	f000 fdf1 	bl	8009c18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009036:	4b1d      	ldr	r3, [pc, #116]	; (80090ac <xTaskCheckForTimeOut+0xb8>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d102      	bne.n	8009056 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009050:	2300      	movs	r3, #0
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	e023      	b.n	800909e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	4b15      	ldr	r3, [pc, #84]	; (80090b0 <xTaskCheckForTimeOut+0xbc>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d007      	beq.n	8009072 <xTaskCheckForTimeOut+0x7e>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	69ba      	ldr	r2, [r7, #24]
 8009068:	429a      	cmp	r2, r3
 800906a:	d302      	bcc.n	8009072 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800906c:	2301      	movs	r3, #1
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	e015      	b.n	800909e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	697a      	ldr	r2, [r7, #20]
 8009078:	429a      	cmp	r2, r3
 800907a:	d20b      	bcs.n	8009094 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	1ad2      	subs	r2, r2, r3
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff ff9d 	bl	8008fc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800908e:	2300      	movs	r3, #0
 8009090:	61fb      	str	r3, [r7, #28]
 8009092:	e004      	b.n	800909e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800909a:	2301      	movs	r3, #1
 800909c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800909e:	f000 fde9 	bl	8009c74 <vPortExitCritical>

	return xReturn;
 80090a2:	69fb      	ldr	r3, [r7, #28]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20000bd8 	.word	0x20000bd8
 80090b0:	20000bec 	.word	0x20000bec

080090b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80090b8:	4b03      	ldr	r3, [pc, #12]	; (80090c8 <vTaskMissedYield+0x14>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	601a      	str	r2, [r3, #0]
}
 80090be:	bf00      	nop
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	20000be8 	.word	0x20000be8

080090cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80090d4:	f000 f852 	bl	800917c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80090d8:	4b06      	ldr	r3, [pc, #24]	; (80090f4 <prvIdleTask+0x28>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d9f9      	bls.n	80090d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80090e0:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <prvIdleTask+0x2c>)
 80090e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090f0:	e7f0      	b.n	80090d4 <prvIdleTask+0x8>
 80090f2:	bf00      	nop
 80090f4:	20000704 	.word	0x20000704
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009102:	2300      	movs	r3, #0
 8009104:	607b      	str	r3, [r7, #4]
 8009106:	e00c      	b.n	8009122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	4613      	mov	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4a12      	ldr	r2, [pc, #72]	; (800915c <prvInitialiseTaskLists+0x60>)
 8009114:	4413      	add	r3, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe fce8 	bl	8007aec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3301      	adds	r3, #1
 8009120:	607b      	str	r3, [r7, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b37      	cmp	r3, #55	; 0x37
 8009126:	d9ef      	bls.n	8009108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009128:	480d      	ldr	r0, [pc, #52]	; (8009160 <prvInitialiseTaskLists+0x64>)
 800912a:	f7fe fcdf 	bl	8007aec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800912e:	480d      	ldr	r0, [pc, #52]	; (8009164 <prvInitialiseTaskLists+0x68>)
 8009130:	f7fe fcdc 	bl	8007aec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009134:	480c      	ldr	r0, [pc, #48]	; (8009168 <prvInitialiseTaskLists+0x6c>)
 8009136:	f7fe fcd9 	bl	8007aec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800913a:	480c      	ldr	r0, [pc, #48]	; (800916c <prvInitialiseTaskLists+0x70>)
 800913c:	f7fe fcd6 	bl	8007aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009140:	480b      	ldr	r0, [pc, #44]	; (8009170 <prvInitialiseTaskLists+0x74>)
 8009142:	f7fe fcd3 	bl	8007aec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <prvInitialiseTaskLists+0x78>)
 8009148:	4a05      	ldr	r2, [pc, #20]	; (8009160 <prvInitialiseTaskLists+0x64>)
 800914a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <prvInitialiseTaskLists+0x7c>)
 800914e:	4a05      	ldr	r2, [pc, #20]	; (8009164 <prvInitialiseTaskLists+0x68>)
 8009150:	601a      	str	r2, [r3, #0]
}
 8009152:	bf00      	nop
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000704 	.word	0x20000704
 8009160:	20000b64 	.word	0x20000b64
 8009164:	20000b78 	.word	0x20000b78
 8009168:	20000b94 	.word	0x20000b94
 800916c:	20000ba8 	.word	0x20000ba8
 8009170:	20000bc0 	.word	0x20000bc0
 8009174:	20000b8c 	.word	0x20000b8c
 8009178:	20000b90 	.word	0x20000b90

0800917c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009182:	e019      	b.n	80091b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009184:	f000 fd48 	bl	8009c18 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009188:	4b0f      	ldr	r3, [pc, #60]	; (80091c8 <prvCheckTasksWaitingTermination+0x4c>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3304      	adds	r3, #4
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe fd2f 	bl	8007bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800919a:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <prvCheckTasksWaitingTermination+0x50>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3b01      	subs	r3, #1
 80091a0:	4a0a      	ldr	r2, [pc, #40]	; (80091cc <prvCheckTasksWaitingTermination+0x50>)
 80091a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091a4:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <prvCheckTasksWaitingTermination+0x54>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3b01      	subs	r3, #1
 80091aa:	4a09      	ldr	r2, [pc, #36]	; (80091d0 <prvCheckTasksWaitingTermination+0x54>)
 80091ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091ae:	f000 fd61 	bl	8009c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f80e 	bl	80091d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <prvCheckTasksWaitingTermination+0x54>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1e1      	bne.n	8009184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	20000ba8 	.word	0x20000ba8
 80091cc:	20000bd4 	.word	0x20000bd4
 80091d0:	20000bbc 	.word	0x20000bbc

080091d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d108      	bne.n	80091f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fecc 	bl	8009f88 <vPortFree>
				vPortFree( pxTCB );
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fec9 	bl	8009f88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091f6:	e017      	b.n	8009228 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d103      	bne.n	800920a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fec0 	bl	8009f88 <vPortFree>
	}
 8009208:	e00e      	b.n	8009228 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009210:	2b02      	cmp	r3, #2
 8009212:	d009      	beq.n	8009228 <prvDeleteTCB+0x54>
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e7fe      	b.n	8009226 <prvDeleteTCB+0x52>
	}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009236:	4b0e      	ldr	r3, [pc, #56]	; (8009270 <prvResetNextTaskUnblockTime+0x40>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <prvResetNextTaskUnblockTime+0x14>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <prvResetNextTaskUnblockTime+0x16>
 8009244:	2300      	movs	r3, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d004      	beq.n	8009254 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800924a:	4b0a      	ldr	r3, [pc, #40]	; (8009274 <prvResetNextTaskUnblockTime+0x44>)
 800924c:	f04f 32ff 	mov.w	r2, #4294967295
 8009250:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009252:	e008      	b.n	8009266 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <prvResetNextTaskUnblockTime+0x40>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	4a04      	ldr	r2, [pc, #16]	; (8009274 <prvResetNextTaskUnblockTime+0x44>)
 8009264:	6013      	str	r3, [r2, #0]
}
 8009266:	bf00      	nop
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr
 8009270:	20000b8c 	.word	0x20000b8c
 8009274:	20000bf4 	.word	0x20000bf4

08009278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800927e:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <xTaskGetSchedulerState+0x34>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d102      	bne.n	800928c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009286:	2301      	movs	r3, #1
 8009288:	607b      	str	r3, [r7, #4]
 800928a:	e008      	b.n	800929e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800928c:	4b08      	ldr	r3, [pc, #32]	; (80092b0 <xTaskGetSchedulerState+0x38>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d102      	bne.n	800929a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009294:	2302      	movs	r3, #2
 8009296:	607b      	str	r3, [r7, #4]
 8009298:	e001      	b.n	800929e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800929a:	2300      	movs	r3, #0
 800929c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800929e:	687b      	ldr	r3, [r7, #4]
	}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bc80      	pop	{r7}
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	20000be0 	.word	0x20000be0
 80092b0:	20000bfc 	.word	0x20000bfc

080092b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80092c0:	2300      	movs	r3, #0
 80092c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d054      	beq.n	8009374 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80092ca:	4b2d      	ldr	r3, [pc, #180]	; (8009380 <xTaskPriorityDisinherit+0xcc>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d009      	beq.n	80092e8 <xTaskPriorityDisinherit+0x34>
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	e7fe      	b.n	80092e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d109      	bne.n	8009304 <xTaskPriorityDisinherit+0x50>
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60bb      	str	r3, [r7, #8]
 8009302:	e7fe      	b.n	8009302 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009308:	1e5a      	subs	r2, r3, #1
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009316:	429a      	cmp	r2, r3
 8009318:	d02c      	beq.n	8009374 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800931e:	2b00      	cmp	r3, #0
 8009320:	d128      	bne.n	8009374 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	3304      	adds	r3, #4
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe fc66 	bl	8007bf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009344:	4b0f      	ldr	r3, [pc, #60]	; (8009384 <xTaskPriorityDisinherit+0xd0>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d903      	bls.n	8009354 <xTaskPriorityDisinherit+0xa0>
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	4a0c      	ldr	r2, [pc, #48]	; (8009384 <xTaskPriorityDisinherit+0xd0>)
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4a09      	ldr	r2, [pc, #36]	; (8009388 <xTaskPriorityDisinherit+0xd4>)
 8009362:	441a      	add	r2, r3
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	3304      	adds	r3, #4
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f7fe fbe9 	bl	8007b42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009370:	2301      	movs	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009374:	697b      	ldr	r3, [r7, #20]
	}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000700 	.word	0x20000700
 8009384:	20000bdc 	.word	0x20000bdc
 8009388:	20000704 	.word	0x20000704

0800938c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009396:	4b21      	ldr	r3, [pc, #132]	; (800941c <prvAddCurrentTaskToDelayedList+0x90>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800939c:	4b20      	ldr	r3, [pc, #128]	; (8009420 <prvAddCurrentTaskToDelayedList+0x94>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3304      	adds	r3, #4
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7fe fc28 	bl	8007bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d10a      	bne.n	80093c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d007      	beq.n	80093c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093b6:	4b1a      	ldr	r3, [pc, #104]	; (8009420 <prvAddCurrentTaskToDelayedList+0x94>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	3304      	adds	r3, #4
 80093bc:	4619      	mov	r1, r3
 80093be:	4819      	ldr	r0, [pc, #100]	; (8009424 <prvAddCurrentTaskToDelayedList+0x98>)
 80093c0:	f7fe fbbf 	bl	8007b42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093c4:	e026      	b.n	8009414 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	4413      	add	r3, r2
 80093cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093ce:	4b14      	ldr	r3, [pc, #80]	; (8009420 <prvAddCurrentTaskToDelayedList+0x94>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d209      	bcs.n	80093f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093de:	4b12      	ldr	r3, [pc, #72]	; (8009428 <prvAddCurrentTaskToDelayedList+0x9c>)
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <prvAddCurrentTaskToDelayedList+0x94>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3304      	adds	r3, #4
 80093e8:	4619      	mov	r1, r3
 80093ea:	4610      	mov	r0, r2
 80093ec:	f7fe fbcc 	bl	8007b88 <vListInsert>
}
 80093f0:	e010      	b.n	8009414 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f2:	4b0e      	ldr	r3, [pc, #56]	; (800942c <prvAddCurrentTaskToDelayedList+0xa0>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <prvAddCurrentTaskToDelayedList+0x94>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3304      	adds	r3, #4
 80093fc:	4619      	mov	r1, r3
 80093fe:	4610      	mov	r0, r2
 8009400:	f7fe fbc2 	bl	8007b88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009404:	4b0a      	ldr	r3, [pc, #40]	; (8009430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	429a      	cmp	r2, r3
 800940c:	d202      	bcs.n	8009414 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800940e:	4a08      	ldr	r2, [pc, #32]	; (8009430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	6013      	str	r3, [r2, #0]
}
 8009414:	bf00      	nop
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20000bd8 	.word	0x20000bd8
 8009420:	20000700 	.word	0x20000700
 8009424:	20000bc0 	.word	0x20000bc0
 8009428:	20000b90 	.word	0x20000b90
 800942c:	20000b8c 	.word	0x20000b8c
 8009430:	20000bf4 	.word	0x20000bf4

08009434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08a      	sub	sp, #40	; 0x28
 8009438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800943e:	f000 fac3 	bl	80099c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009442:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <xTimerCreateTimerTask+0x80>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d021      	beq.n	800948e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800944a:	2300      	movs	r3, #0
 800944c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009452:	1d3a      	adds	r2, r7, #4
 8009454:	f107 0108 	add.w	r1, r7, #8
 8009458:	f107 030c 	add.w	r3, r7, #12
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fb2b 	bl	8007ab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	68fa      	ldr	r2, [r7, #12]
 8009468:	9202      	str	r2, [sp, #8]
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	2302      	movs	r3, #2
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	2300      	movs	r3, #0
 8009472:	460a      	mov	r2, r1
 8009474:	4910      	ldr	r1, [pc, #64]	; (80094b8 <xTimerCreateTimerTask+0x84>)
 8009476:	4811      	ldr	r0, [pc, #68]	; (80094bc <xTimerCreateTimerTask+0x88>)
 8009478:	f7ff f8f8 	bl	800866c <xTaskCreateStatic>
 800947c:	4602      	mov	r2, r0
 800947e:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <xTimerCreateTimerTask+0x8c>)
 8009480:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009482:	4b0f      	ldr	r3, [pc, #60]	; (80094c0 <xTimerCreateTimerTask+0x8c>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800948a:	2301      	movs	r3, #1
 800948c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d109      	bne.n	80094a8 <xTimerCreateTimerTask+0x74>
 8009494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009498:	f383 8811 	msr	BASEPRI, r3
 800949c:	f3bf 8f6f 	isb	sy
 80094a0:	f3bf 8f4f 	dsb	sy
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	e7fe      	b.n	80094a6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80094a8:	697b      	ldr	r3, [r7, #20]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	20000c30 	.word	0x20000c30
 80094b8:	0800a340 	.word	0x0800a340
 80094bc:	080095dd 	.word	0x080095dd
 80094c0:	20000c34 	.word	0x20000c34

080094c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b08a      	sub	sp, #40	; 0x28
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
 80094d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80094d2:	2300      	movs	r3, #0
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d109      	bne.n	80094f0 <xTimerGenericCommand+0x2c>
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	623b      	str	r3, [r7, #32]
 80094ee:	e7fe      	b.n	80094ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80094f0:	4b19      	ldr	r3, [pc, #100]	; (8009558 <xTimerGenericCommand+0x94>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d02a      	beq.n	800954e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b05      	cmp	r3, #5
 8009508:	dc18      	bgt.n	800953c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800950a:	f7ff feb5 	bl	8009278 <xTaskGetSchedulerState>
 800950e:	4603      	mov	r3, r0
 8009510:	2b02      	cmp	r3, #2
 8009512:	d109      	bne.n	8009528 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009514:	4b10      	ldr	r3, [pc, #64]	; (8009558 <xTimerGenericCommand+0x94>)
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	f107 0110 	add.w	r1, r7, #16
 800951c:	2300      	movs	r3, #0
 800951e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009520:	f7fe fcce 	bl	8007ec0 <xQueueGenericSend>
 8009524:	6278      	str	r0, [r7, #36]	; 0x24
 8009526:	e012      	b.n	800954e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009528:	4b0b      	ldr	r3, [pc, #44]	; (8009558 <xTimerGenericCommand+0x94>)
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	f107 0110 	add.w	r1, r7, #16
 8009530:	2300      	movs	r3, #0
 8009532:	2200      	movs	r2, #0
 8009534:	f7fe fcc4 	bl	8007ec0 <xQueueGenericSend>
 8009538:	6278      	str	r0, [r7, #36]	; 0x24
 800953a:	e008      	b.n	800954e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800953c:	4b06      	ldr	r3, [pc, #24]	; (8009558 <xTimerGenericCommand+0x94>)
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	f107 0110 	add.w	r1, r7, #16
 8009544:	2300      	movs	r3, #0
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	f7fe fdb4 	bl	80080b4 <xQueueGenericSendFromISR>
 800954c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009550:	4618      	mov	r0, r3
 8009552:	3728      	adds	r7, #40	; 0x28
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20000c30 	.word	0x20000c30

0800955c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af02      	add	r7, sp, #8
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009566:	4b1c      	ldr	r3, [pc, #112]	; (80095d8 <prvProcessExpiredTimer+0x7c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	3304      	adds	r3, #4
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe fb3f 	bl	8007bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	69db      	ldr	r3, [r3, #28]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d121      	bne.n	80095c6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	699a      	ldr	r2, [r3, #24]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	18d1      	adds	r1, r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	683a      	ldr	r2, [r7, #0]
 800958e:	6978      	ldr	r0, [r7, #20]
 8009590:	f000 f8c8 	bl	8009724 <prvInsertTimerInActiveList>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d015      	beq.n	80095c6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800959a:	2300      	movs	r3, #0
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	2300      	movs	r3, #0
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	2100      	movs	r1, #0
 80095a4:	6978      	ldr	r0, [r7, #20]
 80095a6:	f7ff ff8d 	bl	80094c4 <xTimerGenericCommand>
 80095aa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <prvProcessExpiredTimer+0x6a>
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	e7fe      	b.n	80095c4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	4798      	blx	r3
}
 80095ce:	bf00      	nop
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20000c28 	.word	0x20000c28

080095dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095e4:	f107 0308 	add.w	r3, r7, #8
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 f857 	bl	800969c <prvGetNextExpireTime>
 80095ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	4619      	mov	r1, r3
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f803 	bl	8009600 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80095fa:	f000 f8d5 	bl	80097a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095fe:	e7f1      	b.n	80095e4 <prvTimerTask+0x8>

08009600 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800960a:	f7ff fa5b 	bl	8008ac4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800960e:	f107 0308 	add.w	r3, r7, #8
 8009612:	4618      	mov	r0, r3
 8009614:	f000 f866 	bl	80096e4 <prvSampleTimeNow>
 8009618:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d130      	bne.n	8009682 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10a      	bne.n	800963c <prvProcessTimerOrBlockTask+0x3c>
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	429a      	cmp	r2, r3
 800962c:	d806      	bhi.n	800963c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800962e:	f7ff fa57 	bl	8008ae0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009632:	68f9      	ldr	r1, [r7, #12]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ff91 	bl	800955c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800963a:	e024      	b.n	8009686 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d008      	beq.n	8009654 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009642:	4b13      	ldr	r3, [pc, #76]	; (8009690 <prvProcessTimerOrBlockTask+0x90>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	bf0c      	ite	eq
 800964c:	2301      	moveq	r3, #1
 800964e:	2300      	movne	r3, #0
 8009650:	b2db      	uxtb	r3, r3
 8009652:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009654:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <prvProcessTimerOrBlockTask+0x94>)
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	4619      	mov	r1, r3
 8009662:	f7fe ffcf 	bl	8008604 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009666:	f7ff fa3b 	bl	8008ae0 <xTaskResumeAll>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <prvProcessTimerOrBlockTask+0x98>)
 8009672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	f3bf 8f6f 	isb	sy
}
 8009680:	e001      	b.n	8009686 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009682:	f7ff fa2d 	bl	8008ae0 <xTaskResumeAll>
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20000c2c 	.word	0x20000c2c
 8009694:	20000c30 	.word	0x20000c30
 8009698:	e000ed04 	.word	0xe000ed04

0800969c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80096a4:	4b0e      	ldr	r3, [pc, #56]	; (80096e0 <prvGetNextExpireTime+0x44>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	bf0c      	ite	eq
 80096ae:	2301      	moveq	r3, #1
 80096b0:	2300      	movne	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	461a      	mov	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c2:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <prvGetNextExpireTime+0x44>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	60fb      	str	r3, [r7, #12]
 80096cc:	e001      	b.n	80096d2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80096d2:	68fb      	ldr	r3, [r7, #12]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	bc80      	pop	{r7}
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	20000c28 	.word	0x20000c28

080096e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80096ec:	f7ff fa94 	bl	8008c18 <xTaskGetTickCount>
 80096f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80096f2:	4b0b      	ldr	r3, [pc, #44]	; (8009720 <prvSampleTimeNow+0x3c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d205      	bcs.n	8009708 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80096fc:	f000 f904 	bl	8009908 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	e002      	b.n	800970e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800970e:	4a04      	ldr	r2, [pc, #16]	; (8009720 <prvSampleTimeNow+0x3c>)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009714:	68fb      	ldr	r3, [r7, #12]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20000c38 	.word	0x20000c38

08009724 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
 8009730:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	68fa      	ldr	r2, [r7, #12]
 8009740:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	429a      	cmp	r2, r3
 8009748:	d812      	bhi.n	8009770 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	1ad2      	subs	r2, r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	429a      	cmp	r2, r3
 8009756:	d302      	bcc.n	800975e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009758:	2301      	movs	r3, #1
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e01b      	b.n	8009796 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800975e:	4b10      	ldr	r3, [pc, #64]	; (80097a0 <prvInsertTimerInActiveList+0x7c>)
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	3304      	adds	r3, #4
 8009766:	4619      	mov	r1, r3
 8009768:	4610      	mov	r0, r2
 800976a:	f7fe fa0d 	bl	8007b88 <vListInsert>
 800976e:	e012      	b.n	8009796 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	429a      	cmp	r2, r3
 8009776:	d206      	bcs.n	8009786 <prvInsertTimerInActiveList+0x62>
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	429a      	cmp	r2, r3
 800977e:	d302      	bcc.n	8009786 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009780:	2301      	movs	r3, #1
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	e007      	b.n	8009796 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009786:	4b07      	ldr	r3, [pc, #28]	; (80097a4 <prvInsertTimerInActiveList+0x80>)
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3304      	adds	r3, #4
 800978e:	4619      	mov	r1, r3
 8009790:	4610      	mov	r0, r2
 8009792:	f7fe f9f9 	bl	8007b88 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009796:	697b      	ldr	r3, [r7, #20]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3718      	adds	r7, #24
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20000c2c 	.word	0x20000c2c
 80097a4:	20000c28 	.word	0x20000c28

080097a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08e      	sub	sp, #56	; 0x38
 80097ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097ae:	e099      	b.n	80098e4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	da17      	bge.n	80097e6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80097b6:	1d3b      	adds	r3, r7, #4
 80097b8:	3304      	adds	r3, #4
 80097ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d109      	bne.n	80097d6 <prvProcessReceivedCommands+0x2e>
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	61fb      	str	r3, [r7, #28]
 80097d4:	e7fe      	b.n	80097d4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80097d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097dc:	6850      	ldr	r0, [r2, #4]
 80097de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097e0:	6892      	ldr	r2, [r2, #8]
 80097e2:	4611      	mov	r1, r2
 80097e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	db7a      	blt.n	80098e2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d004      	beq.n	8009802 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	3304      	adds	r3, #4
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7fe f9fb 	bl	8007bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009802:	463b      	mov	r3, r7
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff ff6d 	bl	80096e4 <prvSampleTimeNow>
 800980a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b09      	cmp	r3, #9
 8009810:	d868      	bhi.n	80098e4 <prvProcessReceivedCommands+0x13c>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <prvProcessReceivedCommands+0x70>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	08009841 	.word	0x08009841
 800981c:	08009841 	.word	0x08009841
 8009820:	08009841 	.word	0x08009841
 8009824:	080098e5 	.word	0x080098e5
 8009828:	0800989b 	.word	0x0800989b
 800982c:	080098d1 	.word	0x080098d1
 8009830:	08009841 	.word	0x08009841
 8009834:	08009841 	.word	0x08009841
 8009838:	080098e5 	.word	0x080098e5
 800983c:	0800989b 	.word	0x0800989b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	18d1      	adds	r1, r2, r3
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800984c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984e:	f7ff ff69 	bl	8009724 <prvInsertTimerInActiveList>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d045      	beq.n	80098e4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	2b01      	cmp	r3, #1
 8009866:	d13d      	bne.n	80098e4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	441a      	add	r2, r3
 8009870:	2300      	movs	r3, #0
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	2300      	movs	r3, #0
 8009876:	2100      	movs	r1, #0
 8009878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800987a:	f7ff fe23 	bl	80094c4 <xTimerGenericCommand>
 800987e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009880:	6a3b      	ldr	r3, [r7, #32]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d12e      	bne.n	80098e4 <prvProcessReceivedCommands+0x13c>
 8009886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	61bb      	str	r3, [r7, #24]
 8009898:	e7fe      	b.n	8009898 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d109      	bne.n	80098bc <prvProcessReceivedCommands+0x114>
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	617b      	str	r3, [r7, #20]
 80098ba:	e7fe      	b.n	80098ba <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	699a      	ldr	r2, [r3, #24]
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	18d1      	adds	r1, r2, r3
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ca:	f7ff ff2b 	bl	8009724 <prvInsertTimerInActiveList>
					break;
 80098ce:	e009      	b.n	80098e4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80098d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d104      	bne.n	80098e4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80098da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098dc:	f000 fb54 	bl	8009f88 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098e0:	e000      	b.n	80098e4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80098e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098e4:	4b07      	ldr	r3, [pc, #28]	; (8009904 <prvProcessReceivedCommands+0x15c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	1d39      	adds	r1, r7, #4
 80098ea:	2200      	movs	r2, #0
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fe fc75 	bl	80081dc <xQueueReceive>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f47f af5b 	bne.w	80097b0 <prvProcessReceivedCommands+0x8>
	}
}
 80098fa:	bf00      	nop
 80098fc:	3730      	adds	r7, #48	; 0x30
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	20000c30 	.word	0x20000c30

08009908 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800990e:	e044      	b.n	800999a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009910:	4b2b      	ldr	r3, [pc, #172]	; (80099c0 <prvSwitchTimerLists+0xb8>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800991a:	4b29      	ldr	r3, [pc, #164]	; (80099c0 <prvSwitchTimerLists+0xb8>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3304      	adds	r3, #4
 8009928:	4618      	mov	r0, r3
 800992a:	f7fe f965 	bl	8007bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d12d      	bne.n	800999a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4413      	add	r3, r2
 8009946:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	429a      	cmp	r2, r3
 800994e:	d90e      	bls.n	800996e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800995c:	4b18      	ldr	r3, [pc, #96]	; (80099c0 <prvSwitchTimerLists+0xb8>)
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	3304      	adds	r3, #4
 8009964:	4619      	mov	r1, r3
 8009966:	4610      	mov	r0, r2
 8009968:	f7fe f90e 	bl	8007b88 <vListInsert>
 800996c:	e015      	b.n	800999a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800996e:	2300      	movs	r3, #0
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	2300      	movs	r3, #0
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	2100      	movs	r1, #0
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7ff fda3 	bl	80094c4 <xTimerGenericCommand>
 800997e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d109      	bne.n	800999a <prvSwitchTimerLists+0x92>
 8009986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998a:	f383 8811 	msr	BASEPRI, r3
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	f3bf 8f4f 	dsb	sy
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	e7fe      	b.n	8009998 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800999a:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <prvSwitchTimerLists+0xb8>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1b5      	bne.n	8009910 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099a4:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <prvSwitchTimerLists+0xb8>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099aa:	4b06      	ldr	r3, [pc, #24]	; (80099c4 <prvSwitchTimerLists+0xbc>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a04      	ldr	r2, [pc, #16]	; (80099c0 <prvSwitchTimerLists+0xb8>)
 80099b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099b2:	4a04      	ldr	r2, [pc, #16]	; (80099c4 <prvSwitchTimerLists+0xbc>)
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	6013      	str	r3, [r2, #0]
}
 80099b8:	bf00      	nop
 80099ba:	3718      	adds	r7, #24
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	20000c28 	.word	0x20000c28
 80099c4:	20000c2c 	.word	0x20000c2c

080099c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099ce:	f000 f923 	bl	8009c18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099d2:	4b15      	ldr	r3, [pc, #84]	; (8009a28 <prvCheckForValidListAndQueue+0x60>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d120      	bne.n	8009a1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099da:	4814      	ldr	r0, [pc, #80]	; (8009a2c <prvCheckForValidListAndQueue+0x64>)
 80099dc:	f7fe f886 	bl	8007aec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099e0:	4813      	ldr	r0, [pc, #76]	; (8009a30 <prvCheckForValidListAndQueue+0x68>)
 80099e2:	f7fe f883 	bl	8007aec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099e6:	4b13      	ldr	r3, [pc, #76]	; (8009a34 <prvCheckForValidListAndQueue+0x6c>)
 80099e8:	4a10      	ldr	r2, [pc, #64]	; (8009a2c <prvCheckForValidListAndQueue+0x64>)
 80099ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099ec:	4b12      	ldr	r3, [pc, #72]	; (8009a38 <prvCheckForValidListAndQueue+0x70>)
 80099ee:	4a10      	ldr	r2, [pc, #64]	; (8009a30 <prvCheckForValidListAndQueue+0x68>)
 80099f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099f2:	2300      	movs	r3, #0
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4b11      	ldr	r3, [pc, #68]	; (8009a3c <prvCheckForValidListAndQueue+0x74>)
 80099f8:	4a11      	ldr	r2, [pc, #68]	; (8009a40 <prvCheckForValidListAndQueue+0x78>)
 80099fa:	2110      	movs	r1, #16
 80099fc:	200a      	movs	r0, #10
 80099fe:	f7fe f98d 	bl	8007d1c <xQueueGenericCreateStatic>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <prvCheckForValidListAndQueue+0x60>)
 8009a06:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a08:	4b07      	ldr	r3, [pc, #28]	; (8009a28 <prvCheckForValidListAndQueue+0x60>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a10:	4b05      	ldr	r3, [pc, #20]	; (8009a28 <prvCheckForValidListAndQueue+0x60>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	490b      	ldr	r1, [pc, #44]	; (8009a44 <prvCheckForValidListAndQueue+0x7c>)
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe fdcc 	bl	80085b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a1c:	f000 f92a 	bl	8009c74 <vPortExitCritical>
}
 8009a20:	bf00      	nop
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000c30 	.word	0x20000c30
 8009a2c:	20000c00 	.word	0x20000c00
 8009a30:	20000c14 	.word	0x20000c14
 8009a34:	20000c28 	.word	0x20000c28
 8009a38:	20000c2c 	.word	0x20000c2c
 8009a3c:	20000cdc 	.word	0x20000cdc
 8009a40:	20000c3c 	.word	0x20000c3c
 8009a44:	0800a348 	.word	0x0800a348

08009a48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3b04      	subs	r3, #4
 8009a58:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	3b04      	subs	r3, #4
 8009a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f023 0201 	bic.w	r2, r3, #1
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3b04      	subs	r3, #4
 8009a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a78:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <pxPortInitialiseStack+0x54>)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3b14      	subs	r3, #20
 8009a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3b20      	subs	r3, #32
 8009a8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a90:	68fb      	ldr	r3, [r7, #12]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3714      	adds	r7, #20
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bc80      	pop	{r7}
 8009a9a:	4770      	bx	lr
 8009a9c:	08009aa1 	.word	0x08009aa1

08009aa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aaa:	4b10      	ldr	r3, [pc, #64]	; (8009aec <prvTaskExitError+0x4c>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab2:	d009      	beq.n	8009ac8 <prvTaskExitError+0x28>
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	e7fe      	b.n	8009ac6 <prvTaskExitError+0x26>
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ada:	bf00      	nop
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d0fc      	beq.n	8009adc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ae2:	bf00      	nop
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bc80      	pop	{r7}
 8009aea:	4770      	bx	lr
 8009aec:	2000000c 	.word	0x2000000c

08009af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <pxCurrentTCBConst2>)
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	6808      	ldr	r0, [r1, #0]
 8009af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009afa:	f380 8809 	msr	PSP, r0
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009b0e:	4770      	bx	lr

08009b10 <pxCurrentTCBConst2>:
 8009b10:	20000700 	.word	0x20000700
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009b18:	4806      	ldr	r0, [pc, #24]	; (8009b34 <prvPortStartFirstTask+0x1c>)
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	f380 8808 	msr	MSP, r0
 8009b22:	b662      	cpsie	i
 8009b24:	b661      	cpsie	f
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	df00      	svc	0
 8009b30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b32:	bf00      	nop
 8009b34:	e000ed08 	.word	0xe000ed08

08009b38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b3e:	4b31      	ldr	r3, [pc, #196]	; (8009c04 <xPortStartScheduler+0xcc>)
 8009b40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	22ff      	movs	r2, #255	; 0xff
 8009b4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	4b29      	ldr	r3, [pc, #164]	; (8009c08 <xPortStartScheduler+0xd0>)
 8009b64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b66:	4b29      	ldr	r3, [pc, #164]	; (8009c0c <xPortStartScheduler+0xd4>)
 8009b68:	2207      	movs	r2, #7
 8009b6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b6c:	e009      	b.n	8009b82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009b6e:	4b27      	ldr	r3, [pc, #156]	; (8009c0c <xPortStartScheduler+0xd4>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	4a25      	ldr	r2, [pc, #148]	; (8009c0c <xPortStartScheduler+0xd4>)
 8009b76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b82:	78fb      	ldrb	r3, [r7, #3]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b8a:	2b80      	cmp	r3, #128	; 0x80
 8009b8c:	d0ef      	beq.n	8009b6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b8e:	4b1f      	ldr	r3, [pc, #124]	; (8009c0c <xPortStartScheduler+0xd4>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f1c3 0307 	rsb	r3, r3, #7
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d009      	beq.n	8009bae <xPortStartScheduler+0x76>
 8009b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	60bb      	str	r3, [r7, #8]
 8009bac:	e7fe      	b.n	8009bac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bae:	4b17      	ldr	r3, [pc, #92]	; (8009c0c <xPortStartScheduler+0xd4>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	4a15      	ldr	r2, [pc, #84]	; (8009c0c <xPortStartScheduler+0xd4>)
 8009bb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bb8:	4b14      	ldr	r3, [pc, #80]	; (8009c0c <xPortStartScheduler+0xd4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bc0:	4a12      	ldr	r2, [pc, #72]	; (8009c0c <xPortStartScheduler+0xd4>)
 8009bc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009bcc:	4b10      	ldr	r3, [pc, #64]	; (8009c10 <xPortStartScheduler+0xd8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a0f      	ldr	r2, [pc, #60]	; (8009c10 <xPortStartScheduler+0xd8>)
 8009bd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009bd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bd8:	4b0d      	ldr	r3, [pc, #52]	; (8009c10 <xPortStartScheduler+0xd8>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a0c      	ldr	r2, [pc, #48]	; (8009c10 <xPortStartScheduler+0xd8>)
 8009bde:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009be2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009be4:	f000 f8b0 	bl	8009d48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009be8:	4b0a      	ldr	r3, [pc, #40]	; (8009c14 <xPortStartScheduler+0xdc>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bee:	f7ff ff93 	bl	8009b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bf2:	f7ff f8dd 	bl	8008db0 <vTaskSwitchContext>
	prvTaskExitError();
 8009bf6:	f7ff ff53 	bl	8009aa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	e000e400 	.word	0xe000e400
 8009c08:	20000d2c 	.word	0x20000d2c
 8009c0c:	20000d30 	.word	0x20000d30
 8009c10:	e000ed20 	.word	0xe000ed20
 8009c14:	2000000c 	.word	0x2000000c

08009c18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c30:	4b0e      	ldr	r3, [pc, #56]	; (8009c6c <vPortEnterCritical+0x54>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	4a0d      	ldr	r2, [pc, #52]	; (8009c6c <vPortEnterCritical+0x54>)
 8009c38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <vPortEnterCritical+0x54>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d10e      	bne.n	8009c60 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c42:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <vPortEnterCritical+0x58>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d009      	beq.n	8009c60 <vPortEnterCritical+0x48>
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	603b      	str	r3, [r7, #0]
 8009c5e:	e7fe      	b.n	8009c5e <vPortEnterCritical+0x46>
	}
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc80      	pop	{r7}
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	2000000c 	.word	0x2000000c
 8009c70:	e000ed04 	.word	0xe000ed04

08009c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c7a:	4b10      	ldr	r3, [pc, #64]	; (8009cbc <vPortExitCritical+0x48>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d109      	bne.n	8009c96 <vPortExitCritical+0x22>
 8009c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	607b      	str	r3, [r7, #4]
 8009c94:	e7fe      	b.n	8009c94 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009c96:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <vPortExitCritical+0x48>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	4a07      	ldr	r2, [pc, #28]	; (8009cbc <vPortExitCritical+0x48>)
 8009c9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ca0:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <vPortExitCritical+0x48>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <vPortExitCritical+0x3e>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009cb2:	bf00      	nop
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bc80      	pop	{r7}
 8009cba:	4770      	bx	lr
 8009cbc:	2000000c 	.word	0x2000000c

08009cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009cc0:	f3ef 8009 	mrs	r0, PSP
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	4b0d      	ldr	r3, [pc, #52]	; (8009d00 <pxCurrentTCBConst>)
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009cd0:	6010      	str	r0, [r2, #0]
 8009cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009cd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009cda:	f380 8811 	msr	BASEPRI, r0
 8009cde:	f7ff f867 	bl	8008db0 <vTaskSwitchContext>
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f380 8811 	msr	BASEPRI, r0
 8009cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009cee:	6819      	ldr	r1, [r3, #0]
 8009cf0:	6808      	ldr	r0, [r1, #0]
 8009cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009cf6:	f380 8809 	msr	PSP, r0
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	4770      	bx	lr

08009d00 <pxCurrentTCBConst>:
 8009d00:	20000700 	.word	0x20000700
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d04:	bf00      	nop
 8009d06:	bf00      	nop

08009d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d20:	f7fe ff88 	bl	8008c34 <xTaskIncrementTick>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d2a:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <SysTick_Handler+0x3c>)
 8009d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d30:	601a      	str	r2, [r3, #0]
 8009d32:	2300      	movs	r3, #0
 8009d34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	e000ed04 	.word	0xe000ed04

08009d48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <vPortSetupTimerInterrupt+0x30>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d52:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <vPortSetupTimerInterrupt+0x34>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d58:	4b09      	ldr	r3, [pc, #36]	; (8009d80 <vPortSetupTimerInterrupt+0x38>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a09      	ldr	r2, [pc, #36]	; (8009d84 <vPortSetupTimerInterrupt+0x3c>)
 8009d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d62:	099b      	lsrs	r3, r3, #6
 8009d64:	4a08      	ldr	r2, [pc, #32]	; (8009d88 <vPortSetupTimerInterrupt+0x40>)
 8009d66:	3b01      	subs	r3, #1
 8009d68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d6a:	4b03      	ldr	r3, [pc, #12]	; (8009d78 <vPortSetupTimerInterrupt+0x30>)
 8009d6c:	2207      	movs	r2, #7
 8009d6e:	601a      	str	r2, [r3, #0]
}
 8009d70:	bf00      	nop
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bc80      	pop	{r7}
 8009d76:	4770      	bx	lr
 8009d78:	e000e010 	.word	0xe000e010
 8009d7c:	e000e018 	.word	0xe000e018
 8009d80:	20000000 	.word	0x20000000
 8009d84:	10624dd3 	.word	0x10624dd3
 8009d88:	e000e014 	.word	0xe000e014

08009d8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d92:	f3ef 8305 	mrs	r3, IPSR
 8009d96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	d913      	bls.n	8009dc6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d9e:	4a15      	ldr	r2, [pc, #84]	; (8009df4 <vPortValidateInterruptPriority+0x68>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009da8:	4b13      	ldr	r3, [pc, #76]	; (8009df8 <vPortValidateInterruptPriority+0x6c>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	7afa      	ldrb	r2, [r7, #11]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d209      	bcs.n	8009dc6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	607b      	str	r3, [r7, #4]
 8009dc4:	e7fe      	b.n	8009dc4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009dc6:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <vPortValidateInterruptPriority+0x70>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009dce:	4b0c      	ldr	r3, [pc, #48]	; (8009e00 <vPortValidateInterruptPriority+0x74>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d909      	bls.n	8009dea <vPortValidateInterruptPriority+0x5e>
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	e7fe      	b.n	8009de8 <vPortValidateInterruptPriority+0x5c>
	}
 8009dea:	bf00      	nop
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bc80      	pop	{r7}
 8009df2:	4770      	bx	lr
 8009df4:	e000e3f0 	.word	0xe000e3f0
 8009df8:	20000d2c 	.word	0x20000d2c
 8009dfc:	e000ed0c 	.word	0xe000ed0c
 8009e00:	20000d30 	.word	0x20000d30

08009e04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08a      	sub	sp, #40	; 0x28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e10:	f7fe fe58 	bl	8008ac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e14:	4b57      	ldr	r3, [pc, #348]	; (8009f74 <pvPortMalloc+0x170>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e1c:	f000 f90c 	bl	800a038 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e20:	4b55      	ldr	r3, [pc, #340]	; (8009f78 <pvPortMalloc+0x174>)
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4013      	ands	r3, r2
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f040 808c 	bne.w	8009f46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d01c      	beq.n	8009e6e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009e34:	2208      	movs	r2, #8
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4413      	add	r3, r2
 8009e3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f003 0307 	and.w	r3, r3, #7
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d013      	beq.n	8009e6e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f023 0307 	bic.w	r3, r3, #7
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d009      	beq.n	8009e6e <pvPortMalloc+0x6a>
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	e7fe      	b.n	8009e6c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d068      	beq.n	8009f46 <pvPortMalloc+0x142>
 8009e74:	4b41      	ldr	r3, [pc, #260]	; (8009f7c <pvPortMalloc+0x178>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d863      	bhi.n	8009f46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e7e:	4b40      	ldr	r3, [pc, #256]	; (8009f80 <pvPortMalloc+0x17c>)
 8009e80:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e82:	4b3f      	ldr	r3, [pc, #252]	; (8009f80 <pvPortMalloc+0x17c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e88:	e004      	b.n	8009e94 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d903      	bls.n	8009ea6 <pvPortMalloc+0xa2>
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1f1      	bne.n	8009e8a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ea6:	4b33      	ldr	r3, [pc, #204]	; (8009f74 <pvPortMalloc+0x170>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d04a      	beq.n	8009f46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2208      	movs	r2, #8
 8009eb6:	4413      	add	r3, r2
 8009eb8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	685a      	ldr	r2, [r3, #4]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	1ad2      	subs	r2, r2, r3
 8009eca:	2308      	movs	r3, #8
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d91e      	bls.n	8009f10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	f003 0307 	and.w	r3, r3, #7
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d009      	beq.n	8009ef8 <pvPortMalloc+0xf4>
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	613b      	str	r3, [r7, #16]
 8009ef6:	e7fe      	b.n	8009ef6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f0a:	69b8      	ldr	r0, [r7, #24]
 8009f0c:	f000 f8f6 	bl	800a0fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f10:	4b1a      	ldr	r3, [pc, #104]	; (8009f7c <pvPortMalloc+0x178>)
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	4a18      	ldr	r2, [pc, #96]	; (8009f7c <pvPortMalloc+0x178>)
 8009f1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f1e:	4b17      	ldr	r3, [pc, #92]	; (8009f7c <pvPortMalloc+0x178>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	4b18      	ldr	r3, [pc, #96]	; (8009f84 <pvPortMalloc+0x180>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d203      	bcs.n	8009f32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f2a:	4b14      	ldr	r3, [pc, #80]	; (8009f7c <pvPortMalloc+0x178>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a15      	ldr	r2, [pc, #84]	; (8009f84 <pvPortMalloc+0x180>)
 8009f30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <pvPortMalloc+0x174>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	2200      	movs	r2, #0
 8009f44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f46:	f7fe fdcb 	bl	8008ae0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f4a:	69fb      	ldr	r3, [r7, #28]
 8009f4c:	f003 0307 	and.w	r3, r3, #7
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d009      	beq.n	8009f68 <pvPortMalloc+0x164>
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	e7fe      	b.n	8009f66 <pvPortMalloc+0x162>
	return pvReturn;
 8009f68:	69fb      	ldr	r3, [r7, #28]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3728      	adds	r7, #40	; 0x28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	200024ac 	.word	0x200024ac
 8009f78:	200024b8 	.word	0x200024b8
 8009f7c:	200024b0 	.word	0x200024b0
 8009f80:	200024a4 	.word	0x200024a4
 8009f84:	200024b4 	.word	0x200024b4

08009f88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d046      	beq.n	800a028 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f9a:	2308      	movs	r3, #8
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	4b20      	ldr	r3, [pc, #128]	; (800a030 <vPortFree+0xa8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <vPortFree+0x42>
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	60fb      	str	r3, [r7, #12]
 8009fc8:	e7fe      	b.n	8009fc8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d009      	beq.n	8009fe6 <vPortFree+0x5e>
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	60bb      	str	r3, [r7, #8]
 8009fe4:	e7fe      	b.n	8009fe4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	685a      	ldr	r2, [r3, #4]
 8009fea:	4b11      	ldr	r3, [pc, #68]	; (800a030 <vPortFree+0xa8>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4013      	ands	r3, r2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d019      	beq.n	800a028 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d115      	bne.n	800a028 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	4b0b      	ldr	r3, [pc, #44]	; (800a030 <vPortFree+0xa8>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	43db      	mvns	r3, r3
 800a006:	401a      	ands	r2, r3
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a00c:	f7fe fd5a 	bl	8008ac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	4b07      	ldr	r3, [pc, #28]	; (800a034 <vPortFree+0xac>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4413      	add	r3, r2
 800a01a:	4a06      	ldr	r2, [pc, #24]	; (800a034 <vPortFree+0xac>)
 800a01c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a01e:	6938      	ldr	r0, [r7, #16]
 800a020:	f000 f86c 	bl	800a0fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a024:	f7fe fd5c 	bl	8008ae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a028:	bf00      	nop
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	200024b8 	.word	0x200024b8
 800a034:	200024b0 	.word	0x200024b0

0800a038 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a03e:	f241 7370 	movw	r3, #6000	; 0x1770
 800a042:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a044:	4b27      	ldr	r3, [pc, #156]	; (800a0e4 <prvHeapInit+0xac>)
 800a046:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f003 0307 	and.w	r3, r3, #7
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00c      	beq.n	800a06c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	3307      	adds	r3, #7
 800a056:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f023 0307 	bic.w	r3, r3, #7
 800a05e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	4a1f      	ldr	r2, [pc, #124]	; (800a0e4 <prvHeapInit+0xac>)
 800a068:	4413      	add	r3, r2
 800a06a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a070:	4a1d      	ldr	r2, [pc, #116]	; (800a0e8 <prvHeapInit+0xb0>)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a076:	4b1c      	ldr	r3, [pc, #112]	; (800a0e8 <prvHeapInit+0xb0>)
 800a078:	2200      	movs	r2, #0
 800a07a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a084:	2208      	movs	r2, #8
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	1a9b      	subs	r3, r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f023 0307 	bic.w	r3, r3, #7
 800a092:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4a15      	ldr	r2, [pc, #84]	; (800a0ec <prvHeapInit+0xb4>)
 800a098:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a09a:	4b14      	ldr	r3, [pc, #80]	; (800a0ec <prvHeapInit+0xb4>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0a2:	4b12      	ldr	r3, [pc, #72]	; (800a0ec <prvHeapInit+0xb4>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	1ad2      	subs	r2, r2, r3
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0b8:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <prvHeapInit+0xb4>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	4a0a      	ldr	r2, [pc, #40]	; (800a0f0 <prvHeapInit+0xb8>)
 800a0c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	4a09      	ldr	r2, [pc, #36]	; (800a0f4 <prvHeapInit+0xbc>)
 800a0ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0d0:	4b09      	ldr	r3, [pc, #36]	; (800a0f8 <prvHeapInit+0xc0>)
 800a0d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a0d6:	601a      	str	r2, [r3, #0]
}
 800a0d8:	bf00      	nop
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bc80      	pop	{r7}
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	20000d34 	.word	0x20000d34
 800a0e8:	200024a4 	.word	0x200024a4
 800a0ec:	200024ac 	.word	0x200024ac
 800a0f0:	200024b4 	.word	0x200024b4
 800a0f4:	200024b0 	.word	0x200024b0
 800a0f8:	200024b8 	.word	0x200024b8

0800a0fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a104:	4b27      	ldr	r3, [pc, #156]	; (800a1a4 <prvInsertBlockIntoFreeList+0xa8>)
 800a106:	60fb      	str	r3, [r7, #12]
 800a108:	e002      	b.n	800a110 <prvInsertBlockIntoFreeList+0x14>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	429a      	cmp	r2, r3
 800a118:	d8f7      	bhi.n	800a10a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	4413      	add	r3, r2
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d108      	bne.n	800a13e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	441a      	add	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	441a      	add	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d118      	bne.n	800a184 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <prvInsertBlockIntoFreeList+0xac>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d00d      	beq.n	800a17a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	441a      	add	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	601a      	str	r2, [r3, #0]
 800a178:	e008      	b.n	800a18c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a17a:	4b0b      	ldr	r3, [pc, #44]	; (800a1a8 <prvInsertBlockIntoFreeList+0xac>)
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	e003      	b.n	800a18c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	429a      	cmp	r2, r3
 800a192:	d002      	beq.n	800a19a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr
 800a1a4:	200024a4 	.word	0x200024a4
 800a1a8:	200024ac 	.word	0x200024ac

0800a1ac <__libc_init_array>:
 800a1ac:	b570      	push	{r4, r5, r6, lr}
 800a1ae:	2500      	movs	r5, #0
 800a1b0:	4e0c      	ldr	r6, [pc, #48]	; (800a1e4 <__libc_init_array+0x38>)
 800a1b2:	4c0d      	ldr	r4, [pc, #52]	; (800a1e8 <__libc_init_array+0x3c>)
 800a1b4:	1ba4      	subs	r4, r4, r6
 800a1b6:	10a4      	asrs	r4, r4, #2
 800a1b8:	42a5      	cmp	r5, r4
 800a1ba:	d109      	bne.n	800a1d0 <__libc_init_array+0x24>
 800a1bc:	f000 f82e 	bl	800a21c <_init>
 800a1c0:	2500      	movs	r5, #0
 800a1c2:	4e0a      	ldr	r6, [pc, #40]	; (800a1ec <__libc_init_array+0x40>)
 800a1c4:	4c0a      	ldr	r4, [pc, #40]	; (800a1f0 <__libc_init_array+0x44>)
 800a1c6:	1ba4      	subs	r4, r4, r6
 800a1c8:	10a4      	asrs	r4, r4, #2
 800a1ca:	42a5      	cmp	r5, r4
 800a1cc:	d105      	bne.n	800a1da <__libc_init_array+0x2e>
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1d4:	4798      	blx	r3
 800a1d6:	3501      	adds	r5, #1
 800a1d8:	e7ee      	b.n	800a1b8 <__libc_init_array+0xc>
 800a1da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a1de:	4798      	blx	r3
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	e7f2      	b.n	800a1ca <__libc_init_array+0x1e>
 800a1e4:	0800a4f4 	.word	0x0800a4f4
 800a1e8:	0800a4f4 	.word	0x0800a4f4
 800a1ec:	0800a4f4 	.word	0x0800a4f4
 800a1f0:	0800a4f8 	.word	0x0800a4f8

0800a1f4 <memcpy>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	1e43      	subs	r3, r0, #1
 800a1f8:	440a      	add	r2, r1
 800a1fa:	4291      	cmp	r1, r2
 800a1fc:	d100      	bne.n	800a200 <memcpy+0xc>
 800a1fe:	bd10      	pop	{r4, pc}
 800a200:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a204:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a208:	e7f7      	b.n	800a1fa <memcpy+0x6>

0800a20a <memset>:
 800a20a:	4603      	mov	r3, r0
 800a20c:	4402      	add	r2, r0
 800a20e:	4293      	cmp	r3, r2
 800a210:	d100      	bne.n	800a214 <memset+0xa>
 800a212:	4770      	bx	lr
 800a214:	f803 1b01 	strb.w	r1, [r3], #1
 800a218:	e7f9      	b.n	800a20e <memset+0x4>
	...

0800a21c <_init>:
 800a21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21e:	bf00      	nop
 800a220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a222:	bc08      	pop	{r3}
 800a224:	469e      	mov	lr, r3
 800a226:	4770      	bx	lr

0800a228 <_fini>:
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22a:	bf00      	nop
 800a22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a22e:	bc08      	pop	{r3}
 800a230:	469e      	mov	lr, r3
 800a232:	4770      	bx	lr
