
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae90  0800ae90  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae90  0800ae90  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae90  0800ae90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae90  0800ae90  0001ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ae98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002994  20000078  0800af10  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002a0c  0800af10  00022a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afc2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037af  00000000  00000000  0003b063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003fd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001976a  00000000  00000000  000410c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000172c2  00000000  00000000  0005a82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a59  00000000  00000000  00071aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a545  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ab8  00000000  00000000  0010a598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800abe0 	.word	0x0800abe0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800abe0 	.word	0x0800abe0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_frsub>:
 8000a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	e002      	b.n	8000a34 <__addsf3>
 8000a2e:	bf00      	nop

08000a30 <__aeabi_fsub>:
 8000a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a34 <__addsf3>:
 8000a34:	0042      	lsls	r2, r0, #1
 8000a36:	bf1f      	itttt	ne
 8000a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a3c:	ea92 0f03 	teqne	r2, r3
 8000a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a48:	d06a      	beq.n	8000b20 <__addsf3+0xec>
 8000a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a52:	bfc1      	itttt	gt
 8000a54:	18d2      	addgt	r2, r2, r3
 8000a56:	4041      	eorgt	r1, r0
 8000a58:	4048      	eorgt	r0, r1
 8000a5a:	4041      	eorgt	r1, r0
 8000a5c:	bfb8      	it	lt
 8000a5e:	425b      	neglt	r3, r3
 8000a60:	2b19      	cmp	r3, #25
 8000a62:	bf88      	it	hi
 8000a64:	4770      	bxhi	lr
 8000a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a72:	bf18      	it	ne
 8000a74:	4240      	negne	r0, r0
 8000a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a82:	bf18      	it	ne
 8000a84:	4249      	negne	r1, r1
 8000a86:	ea92 0f03 	teq	r2, r3
 8000a8a:	d03f      	beq.n	8000b0c <__addsf3+0xd8>
 8000a8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000a90:	fa41 fc03 	asr.w	ip, r1, r3
 8000a94:	eb10 000c 	adds.w	r0, r0, ip
 8000a98:	f1c3 0320 	rsb	r3, r3, #32
 8000a9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	d502      	bpl.n	8000aac <__addsf3+0x78>
 8000aa6:	4249      	negs	r1, r1
 8000aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ab0:	d313      	bcc.n	8000ada <__addsf3+0xa6>
 8000ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ab6:	d306      	bcc.n	8000ac6 <__addsf3+0x92>
 8000ab8:	0840      	lsrs	r0, r0, #1
 8000aba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000abe:	f102 0201 	add.w	r2, r2, #1
 8000ac2:	2afe      	cmp	r2, #254	; 0xfe
 8000ac4:	d251      	bcs.n	8000b6a <__addsf3+0x136>
 8000ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ace:	bf08      	it	eq
 8000ad0:	f020 0001 	biceq.w	r0, r0, #1
 8000ad4:	ea40 0003 	orr.w	r0, r0, r3
 8000ad8:	4770      	bx	lr
 8000ada:	0049      	lsls	r1, r1, #1
 8000adc:	eb40 0000 	adc.w	r0, r0, r0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	bf28      	it	cs
 8000ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ae8:	d2ed      	bcs.n	8000ac6 <__addsf3+0x92>
 8000aea:	fab0 fc80 	clz	ip, r0
 8000aee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000af2:	ebb2 020c 	subs.w	r2, r2, ip
 8000af6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000afa:	bfaa      	itet	ge
 8000afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b00:	4252      	neglt	r2, r2
 8000b02:	4318      	orrge	r0, r3
 8000b04:	bfbc      	itt	lt
 8000b06:	40d0      	lsrlt	r0, r2
 8000b08:	4318      	orrlt	r0, r3
 8000b0a:	4770      	bx	lr
 8000b0c:	f092 0f00 	teq	r2, #0
 8000b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b14:	bf06      	itte	eq
 8000b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b1a:	3201      	addeq	r2, #1
 8000b1c:	3b01      	subne	r3, #1
 8000b1e:	e7b5      	b.n	8000a8c <__addsf3+0x58>
 8000b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b28:	bf18      	it	ne
 8000b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b2e:	d021      	beq.n	8000b74 <__addsf3+0x140>
 8000b30:	ea92 0f03 	teq	r2, r3
 8000b34:	d004      	beq.n	8000b40 <__addsf3+0x10c>
 8000b36:	f092 0f00 	teq	r2, #0
 8000b3a:	bf08      	it	eq
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	4770      	bx	lr
 8000b40:	ea90 0f01 	teq	r0, r1
 8000b44:	bf1c      	itt	ne
 8000b46:	2000      	movne	r0, #0
 8000b48:	4770      	bxne	lr
 8000b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b4e:	d104      	bne.n	8000b5a <__addsf3+0x126>
 8000b50:	0040      	lsls	r0, r0, #1
 8000b52:	bf28      	it	cs
 8000b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b58:	4770      	bx	lr
 8000b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b5e:	bf3c      	itt	cc
 8000b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bxcc	lr
 8000b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	4770      	bx	lr
 8000b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b78:	bf16      	itet	ne
 8000b7a:	4608      	movne	r0, r1
 8000b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b80:	4601      	movne	r1, r0
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	bf06      	itte	eq
 8000b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b8a:	ea90 0f01 	teqeq	r0, r1
 8000b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b92:	4770      	bx	lr

08000b94 <__aeabi_ui2f>:
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e004      	b.n	8000ba4 <__aeabi_i2f+0x8>
 8000b9a:	bf00      	nop

08000b9c <__aeabi_i2f>:
 8000b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	bf48      	it	mi
 8000ba2:	4240      	negmi	r0, r0
 8000ba4:	ea5f 0c00 	movs.w	ip, r0
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bb0:	4601      	mov	r1, r0
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	e01c      	b.n	8000bf2 <__aeabi_l2f+0x2a>

08000bb8 <__aeabi_ul2f>:
 8000bb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bbc:	bf08      	it	eq
 8000bbe:	4770      	bxeq	lr
 8000bc0:	f04f 0300 	mov.w	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <__aeabi_l2f+0x14>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_l2f>:
 8000bc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__aeabi_l2f+0x14>
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bdc:	ea5f 0c01 	movs.w	ip, r1
 8000be0:	bf02      	ittt	eq
 8000be2:	4684      	moveq	ip, r0
 8000be4:	4601      	moveq	r1, r0
 8000be6:	2000      	moveq	r0, #0
 8000be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bec:	bf08      	it	eq
 8000bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bf6:	fabc f28c 	clz	r2, ip
 8000bfa:	3a08      	subs	r2, #8
 8000bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c00:	db10      	blt.n	8000c24 <__aeabi_l2f+0x5c>
 8000c02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c06:	4463      	add	r3, ip
 8000c08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c0c:	f1c2 0220 	rsb	r2, r2, #32
 8000c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c14:	fa20 f202 	lsr.w	r2, r0, r2
 8000c18:	eb43 0002 	adc.w	r0, r3, r2
 8000c1c:	bf08      	it	eq
 8000c1e:	f020 0001 	biceq.w	r0, r0, #1
 8000c22:	4770      	bx	lr
 8000c24:	f102 0220 	add.w	r2, r2, #32
 8000c28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2c:	f1c2 0220 	rsb	r2, r2, #32
 8000c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c34:	fa21 f202 	lsr.w	r2, r1, r2
 8000c38:	eb43 0002 	adc.w	r0, r3, r2
 8000c3c:	bf08      	it	eq
 8000c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_fmul>:
 8000c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c52:	ea92 0f0c 	teqne	r2, ip
 8000c56:	ea93 0f0c 	teqne	r3, ip
 8000c5a:	d06f      	beq.n	8000d3c <__aeabi_fmul+0xf8>
 8000c5c:	441a      	add	r2, r3
 8000c5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000c62:	0240      	lsls	r0, r0, #9
 8000c64:	bf18      	it	ne
 8000c66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c6a:	d01e      	beq.n	8000caa <__aeabi_fmul+0x66>
 8000c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c78:	fba0 3101 	umull	r3, r1, r0, r1
 8000c7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c84:	bf3e      	ittt	cc
 8000c86:	0049      	lslcc	r1, r1, #1
 8000c88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c8c:	005b      	lslcc	r3, r3, #1
 8000c8e:	ea40 0001 	orr.w	r0, r0, r1
 8000c92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c96:	2afd      	cmp	r2, #253	; 0xfd
 8000c98:	d81d      	bhi.n	8000cd6 <__aeabi_fmul+0x92>
 8000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ca2:	bf08      	it	eq
 8000ca4:	f020 0001 	biceq.w	r0, r0, #1
 8000ca8:	4770      	bx	lr
 8000caa:	f090 0f00 	teq	r0, #0
 8000cae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cb2:	bf08      	it	eq
 8000cb4:	0249      	lsleq	r1, r1, #9
 8000cb6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cbe:	3a7f      	subs	r2, #127	; 0x7f
 8000cc0:	bfc2      	ittt	gt
 8000cc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cca:	4770      	bxgt	lr
 8000ccc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	dc5d      	bgt.n	8000d94 <__aeabi_fmul+0x150>
 8000cd8:	f112 0f19 	cmn.w	r2, #25
 8000cdc:	bfdc      	itt	le
 8000cde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ce2:	4770      	bxle	lr
 8000ce4:	f1c2 0200 	rsb	r2, r2, #0
 8000ce8:	0041      	lsls	r1, r0, #1
 8000cea:	fa21 f102 	lsr.w	r1, r1, r2
 8000cee:	f1c2 0220 	rsb	r2, r2, #32
 8000cf2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cfa:	f140 0000 	adc.w	r0, r0, #0
 8000cfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d02:	bf08      	it	eq
 8000d04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d08:	4770      	bx	lr
 8000d0a:	f092 0f00 	teq	r2, #0
 8000d0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d12:	bf02      	ittt	eq
 8000d14:	0040      	lsleq	r0, r0, #1
 8000d16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d1a:	3a01      	subeq	r2, #1
 8000d1c:	d0f9      	beq.n	8000d12 <__aeabi_fmul+0xce>
 8000d1e:	ea40 000c 	orr.w	r0, r0, ip
 8000d22:	f093 0f00 	teq	r3, #0
 8000d26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d2a:	bf02      	ittt	eq
 8000d2c:	0049      	lsleq	r1, r1, #1
 8000d2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d32:	3b01      	subeq	r3, #1
 8000d34:	d0f9      	beq.n	8000d2a <__aeabi_fmul+0xe6>
 8000d36:	ea41 010c 	orr.w	r1, r1, ip
 8000d3a:	e78f      	b.n	8000c5c <__aeabi_fmul+0x18>
 8000d3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d40:	ea92 0f0c 	teq	r2, ip
 8000d44:	bf18      	it	ne
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d00a      	beq.n	8000d62 <__aeabi_fmul+0x11e>
 8000d4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d50:	bf18      	it	ne
 8000d52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d56:	d1d8      	bne.n	8000d0a <__aeabi_fmul+0xc6>
 8000d58:	ea80 0001 	eor.w	r0, r0, r1
 8000d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d60:	4770      	bx	lr
 8000d62:	f090 0f00 	teq	r0, #0
 8000d66:	bf17      	itett	ne
 8000d68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	f091 0f00 	teqne	r1, #0
 8000d72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d76:	d014      	beq.n	8000da2 <__aeabi_fmul+0x15e>
 8000d78:	ea92 0f0c 	teq	r2, ip
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_fmul+0x13e>
 8000d7e:	0242      	lsls	r2, r0, #9
 8000d80:	d10f      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d82:	ea93 0f0c 	teq	r3, ip
 8000d86:	d103      	bne.n	8000d90 <__aeabi_fmul+0x14c>
 8000d88:	024b      	lsls	r3, r1, #9
 8000d8a:	bf18      	it	ne
 8000d8c:	4608      	movne	r0, r1
 8000d8e:	d108      	bne.n	8000da2 <__aeabi_fmul+0x15e>
 8000d90:	ea80 0001 	eor.w	r0, r0, r1
 8000d94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	4770      	bx	lr
 8000da2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000da6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_fdiv>:
 8000dac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000db4:	bf1e      	ittt	ne
 8000db6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dba:	ea92 0f0c 	teqne	r2, ip
 8000dbe:	ea93 0f0c 	teqne	r3, ip
 8000dc2:	d069      	beq.n	8000e98 <__aeabi_fdiv+0xec>
 8000dc4:	eba2 0203 	sub.w	r2, r2, r3
 8000dc8:	ea80 0c01 	eor.w	ip, r0, r1
 8000dcc:	0249      	lsls	r1, r1, #9
 8000dce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dd2:	d037      	beq.n	8000e44 <__aeabi_fdiv+0x98>
 8000dd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dd8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ddc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000de0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de4:	428b      	cmp	r3, r1
 8000de6:	bf38      	it	cc
 8000de8:	005b      	lslcc	r3, r3, #1
 8000dea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000df2:	428b      	cmp	r3, r1
 8000df4:	bf24      	itt	cs
 8000df6:	1a5b      	subcs	r3, r3, r1
 8000df8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000dfc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e0e:	bf24      	itt	cs
 8000e10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e1c:	bf24      	itt	cs
 8000e1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e26:	011b      	lsls	r3, r3, #4
 8000e28:	bf18      	it	ne
 8000e2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e2e:	d1e0      	bne.n	8000df2 <__aeabi_fdiv+0x46>
 8000e30:	2afd      	cmp	r2, #253	; 0xfd
 8000e32:	f63f af50 	bhi.w	8000cd6 <__aeabi_fmul+0x92>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4c:	327f      	adds	r2, #127	; 0x7f
 8000e4e:	bfc2      	ittt	gt
 8000e50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e58:	4770      	bxgt	lr
 8000e5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	3a01      	subs	r2, #1
 8000e64:	e737      	b.n	8000cd6 <__aeabi_fmul+0x92>
 8000e66:	f092 0f00 	teq	r2, #0
 8000e6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0040      	lsleq	r0, r0, #1
 8000e72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e76:	3a01      	subeq	r2, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fdiv+0xc2>
 8000e7a:	ea40 000c 	orr.w	r0, r0, ip
 8000e7e:	f093 0f00 	teq	r3, #0
 8000e82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	bf02      	ittt	eq
 8000e88:	0049      	lsleq	r1, r1, #1
 8000e8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e8e:	3b01      	subeq	r3, #1
 8000e90:	d0f9      	beq.n	8000e86 <__aeabi_fdiv+0xda>
 8000e92:	ea41 010c 	orr.w	r1, r1, ip
 8000e96:	e795      	b.n	8000dc4 <__aeabi_fdiv+0x18>
 8000e98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e9c:	ea92 0f0c 	teq	r2, ip
 8000ea0:	d108      	bne.n	8000eb4 <__aeabi_fdiv+0x108>
 8000ea2:	0242      	lsls	r2, r0, #9
 8000ea4:	f47f af7d 	bne.w	8000da2 <__aeabi_fmul+0x15e>
 8000ea8:	ea93 0f0c 	teq	r3, ip
 8000eac:	f47f af70 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e776      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000eb4:	ea93 0f0c 	teq	r3, ip
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_fdiv+0x118>
 8000eba:	024b      	lsls	r3, r1, #9
 8000ebc:	f43f af4c 	beq.w	8000d58 <__aeabi_fmul+0x114>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e76e      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1ca      	bne.n	8000e66 <__aeabi_fdiv+0xba>
 8000ed0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ed4:	f47f af5c 	bne.w	8000d90 <__aeabi_fmul+0x14c>
 8000ed8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000edc:	f47f af3c 	bne.w	8000d58 <__aeabi_fmul+0x114>
 8000ee0:	e75f      	b.n	8000da2 <__aeabi_fmul+0x15e>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_f2iz>:
 8000ee4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eec:	d30f      	bcc.n	8000f0e <__aeabi_f2iz+0x2a>
 8000eee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ef2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef6:	d90d      	bls.n	8000f14 <__aeabi_f2iz+0x30>
 8000ef8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000efc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f04:	fa23 f002 	lsr.w	r0, r3, r2
 8000f08:	bf18      	it	ne
 8000f0a:	4240      	negne	r0, r0
 8000f0c:	4770      	bx	lr
 8000f0e:	f04f 0000 	mov.w	r0, #0
 8000f12:	4770      	bx	lr
 8000f14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f18:	d101      	bne.n	8000f1e <__aeabi_f2iz+0x3a>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d105      	bne.n	8000f2a <__aeabi_f2iz+0x46>
 8000f1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f22:	bf08      	it	eq
 8000f24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f28:	4770      	bx	lr
 8000f2a:	f04f 0000 	mov.w	r0, #0
 8000f2e:	4770      	bx	lr

08000f30 <letter>:
 */

#include "Letters.h"

void letter(char L)//depending on the letter or number entered we have it
{//written out assigning the binary value of that letter or numberin ASCII to our LCD pins
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b3a      	cmp	r3, #58	; 0x3a
 8000f3e:	d13b      	bne.n	8000fb8 <letter+0x88>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f40:	2201      	movs	r2, #1
 8000f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f46:	48d5      	ldr	r0, [pc, #852]	; (800129c <letter+0x36c>)
 8000f48:	f005 f9bb 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f52:	48d3      	ldr	r0, [pc, #844]	; (80012a0 <letter+0x370>)
 8000f54:	f005 f9b5 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	48d0      	ldr	r0, [pc, #832]	; (80012a0 <letter+0x370>)
 8000f60:	f005 f9af 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f64:	2200      	movs	r2, #0
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	48cd      	ldr	r0, [pc, #820]	; (80012a0 <letter+0x370>)
 8000f6a:	f005 f9aa 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2180      	movs	r1, #128	; 0x80
 8000f72:	48cb      	ldr	r0, [pc, #812]	; (80012a0 <letter+0x370>)
 8000f74:	f005 f9a5 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	48c9      	ldr	r0, [pc, #804]	; (80012a4 <letter+0x374>)
 8000f7e:	f005 f9a0 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f82:	2201      	movs	r2, #1
 8000f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f88:	48c6      	ldr	r0, [pc, #792]	; (80012a4 <letter+0x374>)
 8000f8a:	f005 f99a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f94:	48c3      	ldr	r0, [pc, #780]	; (80012a4 <letter+0x374>)
 8000f96:	f005 f994 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	48c0      	ldr	r0, [pc, #768]	; (80012a4 <letter+0x374>)
 8000fa2:	f005 f98e 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	48bb      	ldr	r0, [pc, #748]	; (800129c <letter+0x36c>)
 8000fae:	f005 f988 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f004 fad6 	bl	8005564 <HAL_Delay>
	}
	if(L == '-')
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b2d      	cmp	r3, #45	; 0x2d
 8000fbc:	d13b      	bne.n	8001036 <letter+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc4:	48b5      	ldr	r0, [pc, #724]	; (800129c <letter+0x36c>)
 8000fc6:	f005 f97c 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd0:	48b3      	ldr	r0, [pc, #716]	; (80012a0 <letter+0x370>)
 8000fd2:	f005 f976 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fdc:	48b0      	ldr	r0, [pc, #704]	; (80012a0 <letter+0x370>)
 8000fde:	f005 f970 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	48ae      	ldr	r0, [pc, #696]	; (80012a0 <letter+0x370>)
 8000fe8:	f005 f96b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000fec:	2201      	movs	r2, #1
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	48ab      	ldr	r0, [pc, #684]	; (80012a0 <letter+0x370>)
 8000ff2:	f005 f966 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	48aa      	ldr	r0, [pc, #680]	; (80012a4 <letter+0x374>)
 8000ffc:	f005 f961 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001006:	48a7      	ldr	r0, [pc, #668]	; (80012a4 <letter+0x374>)
 8001008:	f005 f95b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	48a4      	ldr	r0, [pc, #656]	; (80012a4 <letter+0x374>)
 8001014:	f005 f955 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800101e:	48a1      	ldr	r0, [pc, #644]	; (80012a4 <letter+0x374>)
 8001020:	f005 f94f 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	489c      	ldr	r0, [pc, #624]	; (800129c <letter+0x36c>)
 800102c:	f005 f949 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001030:	2002      	movs	r0, #2
 8001032:	f004 fa97 	bl	8005564 <HAL_Delay>
	}
	if(L == ' ')
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	2b20      	cmp	r3, #32
 800103a:	d13b      	bne.n	80010b4 <letter+0x184>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	4896      	ldr	r0, [pc, #600]	; (800129c <letter+0x36c>)
 8001044:	f005 f93d 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104e:	4894      	ldr	r0, [pc, #592]	; (80012a0 <letter+0x370>)
 8001050:	f005 f937 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105a:	4891      	ldr	r0, [pc, #580]	; (80012a0 <letter+0x370>)
 800105c:	f005 f931 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001060:	2200      	movs	r2, #0
 8001062:	2140      	movs	r1, #64	; 0x40
 8001064:	488e      	ldr	r0, [pc, #568]	; (80012a0 <letter+0x370>)
 8001066:	f005 f92c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800106a:	2200      	movs	r2, #0
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	488c      	ldr	r0, [pc, #560]	; (80012a0 <letter+0x370>)
 8001070:	f005 f927 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001074:	2200      	movs	r2, #0
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	488a      	ldr	r0, [pc, #552]	; (80012a4 <letter+0x374>)
 800107a:	f005 f922 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800107e:	2201      	movs	r2, #1
 8001080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001084:	4887      	ldr	r0, [pc, #540]	; (80012a4 <letter+0x374>)
 8001086:	f005 f91c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001090:	4884      	ldr	r0, [pc, #528]	; (80012a4 <letter+0x374>)
 8001092:	f005 f916 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109c:	4881      	ldr	r0, [pc, #516]	; (80012a4 <letter+0x374>)
 800109e:	f005 f910 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a8:	487c      	ldr	r0, [pc, #496]	; (800129c <letter+0x36c>)
 80010aa:	f005 f90a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80010ae:	2002      	movs	r0, #2
 80010b0:	f004 fa58 	bl	8005564 <HAL_Delay>
	}
	if(L == '/')
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b2f      	cmp	r3, #47	; 0x2f
 80010b8:	d13b      	bne.n	8001132 <letter+0x202>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4876      	ldr	r0, [pc, #472]	; (800129c <letter+0x36c>)
 80010c2:	f005 f8fe 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	4874      	ldr	r0, [pc, #464]	; (80012a0 <letter+0x370>)
 80010ce:	f005 f8f8 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d8:	4871      	ldr	r0, [pc, #452]	; (80012a0 <letter+0x370>)
 80010da:	f005 f8f2 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80010de:	2201      	movs	r2, #1
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	486f      	ldr	r0, [pc, #444]	; (80012a0 <letter+0x370>)
 80010e4:	f005 f8ed 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80010e8:	2201      	movs	r2, #1
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	486c      	ldr	r0, [pc, #432]	; (80012a0 <letter+0x370>)
 80010ee:	f005 f8e8 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80010f2:	2200      	movs	r2, #0
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	486b      	ldr	r0, [pc, #428]	; (80012a4 <letter+0x374>)
 80010f8:	f005 f8e3 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	4868      	ldr	r0, [pc, #416]	; (80012a4 <letter+0x374>)
 8001104:	f005 f8dd 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	4865      	ldr	r0, [pc, #404]	; (80012a4 <letter+0x374>)
 8001110:	f005 f8d7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111a:	4862      	ldr	r0, [pc, #392]	; (80012a4 <letter+0x374>)
 800111c:	f005 f8d1 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001126:	485d      	ldr	r0, [pc, #372]	; (800129c <letter+0x36c>)
 8001128:	f005 f8cb 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800112c:	2002      	movs	r0, #2
 800112e:	f004 fa19 	bl	8005564 <HAL_Delay>
	}
	if(L == '!')
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b21      	cmp	r3, #33	; 0x21
 8001136:	d138      	bne.n	80011aa <letter+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800113e:	4857      	ldr	r0, [pc, #348]	; (800129c <letter+0x36c>)
 8001140:	f005 f8bf 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 8001144:	2201      	movs	r2, #1
 8001146:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114a:	4855      	ldr	r0, [pc, #340]	; (80012a0 <letter+0x370>)
 800114c:	f005 f8b9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001156:	4852      	ldr	r0, [pc, #328]	; (80012a0 <letter+0x370>)
 8001158:	f005 f8b3 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800115c:	2200      	movs	r2, #0
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	484f      	ldr	r0, [pc, #316]	; (80012a0 <letter+0x370>)
 8001162:	f005 f8ae 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001166:	2200      	movs	r2, #0
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	484d      	ldr	r0, [pc, #308]	; (80012a0 <letter+0x370>)
 800116c:	f005 f8a9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001170:	2200      	movs	r2, #0
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	484b      	ldr	r0, [pc, #300]	; (80012a4 <letter+0x374>)
 8001176:	f005 f8a4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	4848      	ldr	r0, [pc, #288]	; (80012a4 <letter+0x374>)
 8001182:	f005 f89e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118c:	4845      	ldr	r0, [pc, #276]	; (80012a4 <letter+0x374>)
 800118e:	f005 f898 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001192:	2200      	movs	r2, #0
 8001194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001198:	4842      	ldr	r0, [pc, #264]	; (80012a4 <letter+0x374>)
 800119a:	f005 f892 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a4:	483d      	ldr	r0, [pc, #244]	; (800129c <letter+0x36c>)
 80011a6:	f005 f88c 	bl	80062c2 <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b3f      	cmp	r3, #63	; 0x3f
 80011ae:	d13b      	bne.n	8001228 <letter+0x2f8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	4839      	ldr	r0, [pc, #228]	; (800129c <letter+0x36c>)
 80011b8:	f005 f883 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	4837      	ldr	r0, [pc, #220]	; (80012a0 <letter+0x370>)
 80011c4:	f005 f87d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	4834      	ldr	r0, [pc, #208]	; (80012a0 <letter+0x370>)
 80011d0:	f005 f877 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80011d4:	2201      	movs	r2, #1
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	4831      	ldr	r0, [pc, #196]	; (80012a0 <letter+0x370>)
 80011da:	f005 f872 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80011de:	2201      	movs	r2, #1
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	482f      	ldr	r0, [pc, #188]	; (80012a0 <letter+0x370>)
 80011e4:	f005 f86d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80011e8:	2201      	movs	r2, #1
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	482d      	ldr	r0, [pc, #180]	; (80012a4 <letter+0x374>)
 80011ee:	f005 f868 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80011f2:	2201      	movs	r2, #1
 80011f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f8:	482a      	ldr	r0, [pc, #168]	; (80012a4 <letter+0x374>)
 80011fa:	f005 f862 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001204:	4827      	ldr	r0, [pc, #156]	; (80012a4 <letter+0x374>)
 8001206:	f005 f85c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001210:	4824      	ldr	r0, [pc, #144]	; (80012a4 <letter+0x374>)
 8001212:	f005 f856 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	481f      	ldr	r0, [pc, #124]	; (800129c <letter+0x36c>)
 800121e:	f005 f850 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001222:	2002      	movs	r0, #2
 8001224:	f004 f99e 	bl	8005564 <HAL_Delay>
	}
	if(L == '*')
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2b2a      	cmp	r3, #42	; 0x2a
 800122c:	d142      	bne.n	80012b4 <letter+0x384>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001234:	4819      	ldr	r0, [pc, #100]	; (800129c <letter+0x36c>)
 8001236:	f005 f844 	bl	80062c2 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001240:	4817      	ldr	r0, [pc, #92]	; (80012a0 <letter+0x370>)
 8001242:	f005 f83e 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001246:	2201      	movs	r2, #1
 8001248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800124c:	4814      	ldr	r0, [pc, #80]	; (80012a0 <letter+0x370>)
 800124e:	f005 f838 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001252:	2200      	movs	r2, #0
 8001254:	2140      	movs	r1, #64	; 0x40
 8001256:	4812      	ldr	r0, [pc, #72]	; (80012a0 <letter+0x370>)
 8001258:	f005 f833 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800125c:	2201      	movs	r2, #1
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	480f      	ldr	r0, [pc, #60]	; (80012a0 <letter+0x370>)
 8001262:	f005 f82e 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001266:	2200      	movs	r2, #0
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	480e      	ldr	r0, [pc, #56]	; (80012a4 <letter+0x374>)
 800126c:	f005 f829 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001276:	480b      	ldr	r0, [pc, #44]	; (80012a4 <letter+0x374>)
 8001278:	f005 f823 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <letter+0x374>)
 8001284:	f005 f81d 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <letter+0x374>)
 8001290:	f005 f817 	bl	80062c2 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129a:	e005      	b.n	80012a8 <letter+0x378>
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	40011000 	.word	0x40011000
 80012a4:	40010800 	.word	0x40010800
 80012a8:	48d5      	ldr	r0, [pc, #852]	; (8001600 <letter+0x6d0>)
 80012aa:	f005 f80a 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80012ae:	2002      	movs	r0, #2
 80012b0:	f004 f958 	bl	8005564 <HAL_Delay>
	}
	if(L == '#')
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b23      	cmp	r3, #35	; 0x23
 80012b8:	d13b      	bne.n	8001332 <letter+0x402>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c0:	48cf      	ldr	r0, [pc, #828]	; (8001600 <letter+0x6d0>)
 80012c2:	f004 fffe 	bl	80062c2 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012cc:	48cd      	ldr	r0, [pc, #820]	; (8001604 <letter+0x6d4>)
 80012ce:	f004 fff8 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d8:	48ca      	ldr	r0, [pc, #808]	; (8001604 <letter+0x6d4>)
 80012da:	f004 fff2 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80012de:	2200      	movs	r2, #0
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	48c8      	ldr	r0, [pc, #800]	; (8001604 <letter+0x6d4>)
 80012e4:	f004 ffed 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80012e8:	2200      	movs	r2, #0
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	48c5      	ldr	r0, [pc, #788]	; (8001604 <letter+0x6d4>)
 80012ee:	f004 ffe8 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80012f2:	2200      	movs	r2, #0
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	48c4      	ldr	r0, [pc, #784]	; (8001608 <letter+0x6d8>)
 80012f8:	f004 ffe3 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	48c1      	ldr	r0, [pc, #772]	; (8001608 <letter+0x6d8>)
 8001304:	f004 ffdd 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	48be      	ldr	r0, [pc, #760]	; (8001608 <letter+0x6d8>)
 8001310:	f004 ffd7 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131a:	48bb      	ldr	r0, [pc, #748]	; (8001608 <letter+0x6d8>)
 800131c:	f004 ffd1 	bl	80062c2 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001326:	48b6      	ldr	r0, [pc, #728]	; (8001600 <letter+0x6d0>)
 8001328:	f004 ffcb 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 800132c:	2002      	movs	r0, #2
 800132e:	f004 f919 	bl	8005564 <HAL_Delay>
	}
	if(L == 'a')
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b61      	cmp	r3, #97	; 0x61
 8001336:	d13b      	bne.n	80013b0 <letter+0x480>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133e:	48b0      	ldr	r0, [pc, #704]	; (8001600 <letter+0x6d0>)
 8001340:	f004 ffbf 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8001344:	2201      	movs	r2, #1
 8001346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134a:	48ae      	ldr	r0, [pc, #696]	; (8001604 <letter+0x6d4>)
 800134c:	f004 ffb9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001356:	48ab      	ldr	r0, [pc, #684]	; (8001604 <letter+0x6d4>)
 8001358:	f004 ffb3 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800135c:	2200      	movs	r2, #0
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	48a8      	ldr	r0, [pc, #672]	; (8001604 <letter+0x6d4>)
 8001362:	f004 ffae 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001366:	2200      	movs	r2, #0
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	48a6      	ldr	r0, [pc, #664]	; (8001604 <letter+0x6d4>)
 800136c:	f004 ffa9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001370:	2200      	movs	r2, #0
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	48a4      	ldr	r0, [pc, #656]	; (8001608 <letter+0x6d8>)
 8001376:	f004 ffa4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001380:	48a1      	ldr	r0, [pc, #644]	; (8001608 <letter+0x6d8>)
 8001382:	f004 ff9e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800138c:	489e      	ldr	r0, [pc, #632]	; (8001608 <letter+0x6d8>)
 800138e:	f004 ff98 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001392:	2200      	movs	r2, #0
 8001394:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001398:	489b      	ldr	r0, [pc, #620]	; (8001608 <letter+0x6d8>)
 800139a:	f004 ff92 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800139e:	2200      	movs	r2, #0
 80013a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a4:	4896      	ldr	r0, [pc, #600]	; (8001600 <letter+0x6d0>)
 80013a6:	f004 ff8c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80013aa:	2002      	movs	r0, #2
 80013ac:	f004 f8da 	bl	8005564 <HAL_Delay>
	}
	if(L == 'b')
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b62      	cmp	r3, #98	; 0x62
 80013b4:	d13b      	bne.n	800142e <letter+0x4fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013bc:	4890      	ldr	r0, [pc, #576]	; (8001600 <letter+0x6d0>)
 80013be:	f004 ff80 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 80013c2:	2200      	movs	r2, #0
 80013c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c8:	488e      	ldr	r0, [pc, #568]	; (8001604 <letter+0x6d4>)
 80013ca:	f004 ff7a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013d4:	488b      	ldr	r0, [pc, #556]	; (8001604 <letter+0x6d4>)
 80013d6:	f004 ff74 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013da:	2200      	movs	r2, #0
 80013dc:	2140      	movs	r1, #64	; 0x40
 80013de:	4889      	ldr	r0, [pc, #548]	; (8001604 <letter+0x6d4>)
 80013e0:	f004 ff6f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80013e4:	2200      	movs	r2, #0
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	4886      	ldr	r0, [pc, #536]	; (8001604 <letter+0x6d4>)
 80013ea:	f004 ff6a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80013ee:	2200      	movs	r2, #0
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	4885      	ldr	r0, [pc, #532]	; (8001608 <letter+0x6d8>)
 80013f4:	f004 ff65 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fe:	4882      	ldr	r0, [pc, #520]	; (8001608 <letter+0x6d8>)
 8001400:	f004 ff5f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140a:	487f      	ldr	r0, [pc, #508]	; (8001608 <letter+0x6d8>)
 800140c:	f004 ff59 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001416:	487c      	ldr	r0, [pc, #496]	; (8001608 <letter+0x6d8>)
 8001418:	f004 ff53 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001422:	4877      	ldr	r0, [pc, #476]	; (8001600 <letter+0x6d0>)
 8001424:	f004 ff4d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001428:	2002      	movs	r0, #2
 800142a:	f004 f89b 	bl	8005564 <HAL_Delay>
	}
	if(L == 'C')
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b43      	cmp	r3, #67	; 0x43
 8001432:	d13b      	bne.n	80014ac <letter+0x57c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143a:	4871      	ldr	r0, [pc, #452]	; (8001600 <letter+0x6d0>)
 800143c:	f004 ff41 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001446:	486f      	ldr	r0, [pc, #444]	; (8001604 <letter+0x6d4>)
 8001448:	f004 ff3b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001452:	486c      	ldr	r0, [pc, #432]	; (8001604 <letter+0x6d4>)
 8001454:	f004 ff35 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001458:	2200      	movs	r2, #0
 800145a:	2140      	movs	r1, #64	; 0x40
 800145c:	4869      	ldr	r0, [pc, #420]	; (8001604 <letter+0x6d4>)
 800145e:	f004 ff30 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001462:	2200      	movs	r2, #0
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	4867      	ldr	r0, [pc, #412]	; (8001604 <letter+0x6d4>)
 8001468:	f004 ff2b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800146c:	2200      	movs	r2, #0
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	4865      	ldr	r0, [pc, #404]	; (8001608 <letter+0x6d8>)
 8001472:	f004 ff26 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001476:	2200      	movs	r2, #0
 8001478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800147c:	4862      	ldr	r0, [pc, #392]	; (8001608 <letter+0x6d8>)
 800147e:	f004 ff20 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001488:	485f      	ldr	r0, [pc, #380]	; (8001608 <letter+0x6d8>)
 800148a:	f004 ff1a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001494:	485c      	ldr	r0, [pc, #368]	; (8001608 <letter+0x6d8>)
 8001496:	f004 ff14 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800149a:	2200      	movs	r2, #0
 800149c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a0:	4857      	ldr	r0, [pc, #348]	; (8001600 <letter+0x6d0>)
 80014a2:	f004 ff0e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014a6:	2002      	movs	r0, #2
 80014a8:	f004 f85c 	bl	8005564 <HAL_Delay>
	}
	if(L == 'c')
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b63      	cmp	r3, #99	; 0x63
 80014b0:	d13b      	bne.n	800152a <letter+0x5fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b8:	4851      	ldr	r0, [pc, #324]	; (8001600 <letter+0x6d0>)
 80014ba:	f004 ff02 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c4:	484f      	ldr	r0, [pc, #316]	; (8001604 <letter+0x6d4>)
 80014c6:	f004 fefc 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d0:	484c      	ldr	r0, [pc, #304]	; (8001604 <letter+0x6d4>)
 80014d2:	f004 fef6 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80014d6:	2200      	movs	r2, #0
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	484a      	ldr	r0, [pc, #296]	; (8001604 <letter+0x6d4>)
 80014dc:	f004 fef1 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80014e0:	2200      	movs	r2, #0
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	4847      	ldr	r0, [pc, #284]	; (8001604 <letter+0x6d4>)
 80014e6:	f004 feec 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80014ea:	2200      	movs	r2, #0
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	4846      	ldr	r0, [pc, #280]	; (8001608 <letter+0x6d8>)
 80014f0:	f004 fee7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014fa:	4843      	ldr	r0, [pc, #268]	; (8001608 <letter+0x6d8>)
 80014fc:	f004 fee1 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001500:	2201      	movs	r2, #1
 8001502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001506:	4840      	ldr	r0, [pc, #256]	; (8001608 <letter+0x6d8>)
 8001508:	f004 fedb 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001512:	483d      	ldr	r0, [pc, #244]	; (8001608 <letter+0x6d8>)
 8001514:	f004 fed5 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151e:	4838      	ldr	r0, [pc, #224]	; (8001600 <letter+0x6d0>)
 8001520:	f004 fecf 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001524:	2002      	movs	r0, #2
 8001526:	f004 f81d 	bl	8005564 <HAL_Delay>
	}
	if(L == 'd')
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d13b      	bne.n	80015a8 <letter+0x678>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001536:	4832      	ldr	r0, [pc, #200]	; (8001600 <letter+0x6d0>)
 8001538:	f004 fec3 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001542:	4830      	ldr	r0, [pc, #192]	; (8001604 <letter+0x6d4>)
 8001544:	f004 febd 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154e:	482d      	ldr	r0, [pc, #180]	; (8001604 <letter+0x6d4>)
 8001550:	f004 feb7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001554:	2201      	movs	r2, #1
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	482a      	ldr	r0, [pc, #168]	; (8001604 <letter+0x6d4>)
 800155a:	f004 feb2 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800155e:	2200      	movs	r2, #0
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	4828      	ldr	r0, [pc, #160]	; (8001604 <letter+0x6d4>)
 8001564:	f004 fead 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001568:	2200      	movs	r2, #0
 800156a:	2180      	movs	r1, #128	; 0x80
 800156c:	4826      	ldr	r0, [pc, #152]	; (8001608 <letter+0x6d8>)
 800156e:	f004 fea8 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001578:	4823      	ldr	r0, [pc, #140]	; (8001608 <letter+0x6d8>)
 800157a:	f004 fea2 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001584:	4820      	ldr	r0, [pc, #128]	; (8001608 <letter+0x6d8>)
 8001586:	f004 fe9c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800158a:	2200      	movs	r2, #0
 800158c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001590:	481d      	ldr	r0, [pc, #116]	; (8001608 <letter+0x6d8>)
 8001592:	f004 fe96 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159c:	4818      	ldr	r0, [pc, #96]	; (8001600 <letter+0x6d0>)
 800159e:	f004 fe90 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015a2:	2002      	movs	r0, #2
 80015a4:	f003 ffde 	bl	8005564 <HAL_Delay>
	}
	if(L == 'E')
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b45      	cmp	r3, #69	; 0x45
 80015ac:	d143      	bne.n	8001636 <letter+0x706>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <letter+0x6d0>)
 80015b6:	f004 fe84 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c0:	4810      	ldr	r0, [pc, #64]	; (8001604 <letter+0x6d4>)
 80015c2:	f004 fe7e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015cc:	480d      	ldr	r0, [pc, #52]	; (8001604 <letter+0x6d4>)
 80015ce:	f004 fe78 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80015d2:	2201      	movs	r2, #1
 80015d4:	2140      	movs	r1, #64	; 0x40
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <letter+0x6d4>)
 80015d8:	f004 fe73 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80015dc:	2200      	movs	r2, #0
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <letter+0x6d4>)
 80015e2:	f004 fe6e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80015e6:	2200      	movs	r2, #0
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	4807      	ldr	r0, [pc, #28]	; (8001608 <letter+0x6d8>)
 80015ec:	f004 fe69 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	4804      	ldr	r0, [pc, #16]	; (8001608 <letter+0x6d8>)
 80015f8:	f004 fe63 	bl	80062c2 <HAL_GPIO_WritePin>
 80015fc:	e006      	b.n	800160c <letter+0x6dc>
 80015fe:	bf00      	nop
 8001600:	40010c00 	.word	0x40010c00
 8001604:	40011000 	.word	0x40011000
 8001608:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001612:	48d4      	ldr	r0, [pc, #848]	; (8001964 <letter+0xa34>)
 8001614:	f004 fe55 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161e:	48d1      	ldr	r0, [pc, #836]	; (8001964 <letter+0xa34>)
 8001620:	f004 fe4f 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162a:	48cf      	ldr	r0, [pc, #828]	; (8001968 <letter+0xa38>)
 800162c:	f004 fe49 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001630:	2002      	movs	r0, #2
 8001632:	f003 ff97 	bl	8005564 <HAL_Delay>
	}
	if(L == 'e')
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b65      	cmp	r3, #101	; 0x65
 800163a:	d13b      	bne.n	80016b4 <letter+0x784>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001642:	48c9      	ldr	r0, [pc, #804]	; (8001968 <letter+0xa38>)
 8001644:	f004 fe3d 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164e:	48c7      	ldr	r0, [pc, #796]	; (800196c <letter+0xa3c>)
 8001650:	f004 fe37 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165a:	48c4      	ldr	r0, [pc, #784]	; (800196c <letter+0xa3c>)
 800165c:	f004 fe31 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001660:	2201      	movs	r2, #1
 8001662:	2140      	movs	r1, #64	; 0x40
 8001664:	48c1      	ldr	r0, [pc, #772]	; (800196c <letter+0xa3c>)
 8001666:	f004 fe2c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800166a:	2200      	movs	r2, #0
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	48bf      	ldr	r0, [pc, #764]	; (800196c <letter+0xa3c>)
 8001670:	f004 fe27 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001674:	2200      	movs	r2, #0
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	48ba      	ldr	r0, [pc, #744]	; (8001964 <letter+0xa34>)
 800167a:	f004 fe22 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001684:	48b7      	ldr	r0, [pc, #732]	; (8001964 <letter+0xa34>)
 8001686:	f004 fe1c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001690:	48b4      	ldr	r0, [pc, #720]	; (8001964 <letter+0xa34>)
 8001692:	f004 fe16 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169c:	48b1      	ldr	r0, [pc, #708]	; (8001964 <letter+0xa34>)
 800169e:	f004 fe10 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a8:	48af      	ldr	r0, [pc, #700]	; (8001968 <letter+0xa38>)
 80016aa:	f004 fe0a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016ae:	2002      	movs	r0, #2
 80016b0:	f003 ff58 	bl	8005564 <HAL_Delay>
	}
	if(L == 'f')
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b66      	cmp	r3, #102	; 0x66
 80016b8:	d13b      	bne.n	8001732 <letter+0x802>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c0:	48a9      	ldr	r0, [pc, #676]	; (8001968 <letter+0xa38>)
 80016c2:	f004 fdfe 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016cc:	48a7      	ldr	r0, [pc, #668]	; (800196c <letter+0xa3c>)
 80016ce:	f004 fdf8 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80016d2:	2201      	movs	r2, #1
 80016d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d8:	48a4      	ldr	r0, [pc, #656]	; (800196c <letter+0xa3c>)
 80016da:	f004 fdf2 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016de:	2201      	movs	r2, #1
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	48a2      	ldr	r0, [pc, #648]	; (800196c <letter+0xa3c>)
 80016e4:	f004 fded 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80016e8:	2200      	movs	r2, #0
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	489f      	ldr	r0, [pc, #636]	; (800196c <letter+0xa3c>)
 80016ee:	f004 fde8 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80016f2:	2200      	movs	r2, #0
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	489b      	ldr	r0, [pc, #620]	; (8001964 <letter+0xa34>)
 80016f8:	f004 fde3 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80016fc:	2201      	movs	r2, #1
 80016fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001702:	4898      	ldr	r0, [pc, #608]	; (8001964 <letter+0xa34>)
 8001704:	f004 fddd 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170e:	4895      	ldr	r0, [pc, #596]	; (8001964 <letter+0xa34>)
 8001710:	f004 fdd7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171a:	4892      	ldr	r0, [pc, #584]	; (8001964 <letter+0xa34>)
 800171c:	f004 fdd1 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001726:	4890      	ldr	r0, [pc, #576]	; (8001968 <letter+0xa38>)
 8001728:	f004 fdcb 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800172c:	2002      	movs	r0, #2
 800172e:	f003 ff19 	bl	8005564 <HAL_Delay>
	}
	if(L == 'G')
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b47      	cmp	r3, #71	; 0x47
 8001736:	d13b      	bne.n	80017b0 <letter+0x880>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173e:	488a      	ldr	r0, [pc, #552]	; (8001968 <letter+0xa38>)
 8001740:	f004 fdbf 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800174a:	4888      	ldr	r0, [pc, #544]	; (800196c <letter+0xa3c>)
 800174c:	f004 fdb9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001756:	4885      	ldr	r0, [pc, #532]	; (800196c <letter+0xa3c>)
 8001758:	f004 fdb3 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800175c:	2201      	movs	r2, #1
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	4882      	ldr	r0, [pc, #520]	; (800196c <letter+0xa3c>)
 8001762:	f004 fdae 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001766:	2200      	movs	r2, #0
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	4880      	ldr	r0, [pc, #512]	; (800196c <letter+0xa3c>)
 800176c:	f004 fda9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	487b      	ldr	r0, [pc, #492]	; (8001964 <letter+0xa34>)
 8001776:	f004 fda4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001780:	4878      	ldr	r0, [pc, #480]	; (8001964 <letter+0xa34>)
 8001782:	f004 fd9e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001786:	2201      	movs	r2, #1
 8001788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800178c:	4875      	ldr	r0, [pc, #468]	; (8001964 <letter+0xa34>)
 800178e:	f004 fd98 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001798:	4872      	ldr	r0, [pc, #456]	; (8001964 <letter+0xa34>)
 800179a:	f004 fd92 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a4:	4870      	ldr	r0, [pc, #448]	; (8001968 <letter+0xa38>)
 80017a6:	f004 fd8c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f003 feda 	bl	8005564 <HAL_Delay>
	}
	if(L == 'g')
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b67      	cmp	r3, #103	; 0x67
 80017b4:	d13b      	bne.n	800182e <letter+0x8fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	486a      	ldr	r0, [pc, #424]	; (8001968 <letter+0xa38>)
 80017be:	f004 fd80 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c8:	4868      	ldr	r0, [pc, #416]	; (800196c <letter+0xa3c>)
 80017ca:	f004 fd7a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d4:	4865      	ldr	r0, [pc, #404]	; (800196c <letter+0xa3c>)
 80017d6:	f004 fd74 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80017da:	2201      	movs	r2, #1
 80017dc:	2140      	movs	r1, #64	; 0x40
 80017de:	4863      	ldr	r0, [pc, #396]	; (800196c <letter+0xa3c>)
 80017e0:	f004 fd6f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80017e4:	2200      	movs	r2, #0
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	4860      	ldr	r0, [pc, #384]	; (800196c <letter+0xa3c>)
 80017ea:	f004 fd6a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80017ee:	2200      	movs	r2, #0
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	485c      	ldr	r0, [pc, #368]	; (8001964 <letter+0xa34>)
 80017f4:	f004 fd65 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017fe:	4859      	ldr	r0, [pc, #356]	; (8001964 <letter+0xa34>)
 8001800:	f004 fd5f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800180a:	4856      	ldr	r0, [pc, #344]	; (8001964 <letter+0xa34>)
 800180c:	f004 fd59 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001816:	4853      	ldr	r0, [pc, #332]	; (8001964 <letter+0xa34>)
 8001818:	f004 fd53 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001822:	4851      	ldr	r0, [pc, #324]	; (8001968 <letter+0xa38>)
 8001824:	f004 fd4d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001828:	2002      	movs	r0, #2
 800182a:	f003 fe9b 	bl	8005564 <HAL_Delay>
	}
	if(L == 'I')
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b49      	cmp	r3, #73	; 0x49
 8001832:	d13b      	bne.n	80018ac <letter+0x97c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001834:	2201      	movs	r2, #1
 8001836:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183a:	484b      	ldr	r0, [pc, #300]	; (8001968 <letter+0xa38>)
 800183c:	f004 fd41 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001846:	4849      	ldr	r0, [pc, #292]	; (800196c <letter+0xa3c>)
 8001848:	f004 fd3b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001852:	4846      	ldr	r0, [pc, #280]	; (800196c <letter+0xa3c>)
 8001854:	f004 fd35 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001858:	2200      	movs	r2, #0
 800185a:	2140      	movs	r1, #64	; 0x40
 800185c:	4843      	ldr	r0, [pc, #268]	; (800196c <letter+0xa3c>)
 800185e:	f004 fd30 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001862:	2201      	movs	r2, #1
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4841      	ldr	r0, [pc, #260]	; (800196c <letter+0xa3c>)
 8001868:	f004 fd2b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800186c:	2200      	movs	r2, #0
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	483c      	ldr	r0, [pc, #240]	; (8001964 <letter+0xa34>)
 8001872:	f004 fd26 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187c:	4839      	ldr	r0, [pc, #228]	; (8001964 <letter+0xa34>)
 800187e:	f004 fd20 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001888:	4836      	ldr	r0, [pc, #216]	; (8001964 <letter+0xa34>)
 800188a:	f004 fd1a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001894:	4833      	ldr	r0, [pc, #204]	; (8001964 <letter+0xa34>)
 8001896:	f004 fd14 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a0:	4831      	ldr	r0, [pc, #196]	; (8001968 <letter+0xa38>)
 80018a2:	f004 fd0e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018a6:	2002      	movs	r0, #2
 80018a8:	f003 fe5c 	bl	8005564 <HAL_Delay>
	}
	if(L == 'i')
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b69      	cmp	r3, #105	; 0x69
 80018b0:	d13b      	bne.n	800192a <letter+0x9fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80018b2:	2201      	movs	r2, #1
 80018b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b8:	482b      	ldr	r0, [pc, #172]	; (8001968 <letter+0xa38>)
 80018ba:	f004 fd02 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c4:	4829      	ldr	r0, [pc, #164]	; (800196c <letter+0xa3c>)
 80018c6:	f004 fcfc 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d0:	4826      	ldr	r0, [pc, #152]	; (800196c <letter+0xa3c>)
 80018d2:	f004 fcf6 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80018d6:	2200      	movs	r2, #0
 80018d8:	2140      	movs	r1, #64	; 0x40
 80018da:	4824      	ldr	r0, [pc, #144]	; (800196c <letter+0xa3c>)
 80018dc:	f004 fcf1 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80018e0:	2201      	movs	r2, #1
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	4821      	ldr	r0, [pc, #132]	; (800196c <letter+0xa3c>)
 80018e6:	f004 fcec 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80018ea:	2200      	movs	r2, #0
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	481d      	ldr	r0, [pc, #116]	; (8001964 <letter+0xa34>)
 80018f0:	f004 fce7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fa:	481a      	ldr	r0, [pc, #104]	; (8001964 <letter+0xa34>)
 80018fc:	f004 fce1 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001900:	2201      	movs	r2, #1
 8001902:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001906:	4817      	ldr	r0, [pc, #92]	; (8001964 <letter+0xa34>)
 8001908:	f004 fcdb 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001912:	4814      	ldr	r0, [pc, #80]	; (8001964 <letter+0xa34>)
 8001914:	f004 fcd5 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191e:	4812      	ldr	r0, [pc, #72]	; (8001968 <letter+0xa38>)
 8001920:	f004 fccf 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001924:	2002      	movs	r0, #2
 8001926:	f003 fe1d 	bl	8005564 <HAL_Delay>
	}
	if(L == 'l')
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b6c      	cmp	r3, #108	; 0x6c
 800192e:	d142      	bne.n	80019b6 <letter+0xa86>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001936:	480c      	ldr	r0, [pc, #48]	; (8001968 <letter+0xa38>)
 8001938:	f004 fcc3 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001942:	480a      	ldr	r0, [pc, #40]	; (800196c <letter+0xa3c>)
 8001944:	f004 fcbd 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <letter+0xa3c>)
 8001950:	f004 fcb7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001954:	2201      	movs	r2, #1
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <letter+0xa3c>)
 800195a:	f004 fcb2 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800195e:	2201      	movs	r2, #1
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	e005      	b.n	8001970 <letter+0xa40>
 8001964:	40010800 	.word	0x40010800
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40011000 	.word	0x40011000
 8001970:	48d4      	ldr	r0, [pc, #848]	; (8001cc4 <letter+0xd94>)
 8001972:	f004 fca6 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001976:	2200      	movs	r2, #0
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	48d3      	ldr	r0, [pc, #844]	; (8001cc8 <letter+0xd98>)
 800197c:	f004 fca1 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001986:	48d0      	ldr	r0, [pc, #832]	; (8001cc8 <letter+0xd98>)
 8001988:	f004 fc9b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001992:	48cd      	ldr	r0, [pc, #820]	; (8001cc8 <letter+0xd98>)
 8001994:	f004 fc95 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800199e:	48ca      	ldr	r0, [pc, #808]	; (8001cc8 <letter+0xd98>)
 80019a0:	f004 fc8f 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019aa:	48c8      	ldr	r0, [pc, #800]	; (8001ccc <letter+0xd9c>)
 80019ac:	f004 fc89 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80019b0:	2002      	movs	r0, #2
 80019b2:	f003 fdd7 	bl	8005564 <HAL_Delay>
	}
	if(L == 'm')
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b6d      	cmp	r3, #109	; 0x6d
 80019ba:	d13b      	bne.n	8001a34 <letter+0xb04>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80019bc:	2201      	movs	r2, #1
 80019be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c2:	48c2      	ldr	r0, [pc, #776]	; (8001ccc <letter+0xd9c>)
 80019c4:	f004 fc7d 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ce:	48bd      	ldr	r0, [pc, #756]	; (8001cc4 <letter+0xd94>)
 80019d0:	f004 fc77 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019da:	48ba      	ldr	r0, [pc, #744]	; (8001cc4 <letter+0xd94>)
 80019dc:	f004 fc71 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80019e0:	2201      	movs	r2, #1
 80019e2:	2140      	movs	r1, #64	; 0x40
 80019e4:	48b7      	ldr	r0, [pc, #732]	; (8001cc4 <letter+0xd94>)
 80019e6:	f004 fc6c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80019ea:	2201      	movs	r2, #1
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	48b5      	ldr	r0, [pc, #724]	; (8001cc4 <letter+0xd94>)
 80019f0:	f004 fc67 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80019f4:	2200      	movs	r2, #0
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	48b3      	ldr	r0, [pc, #716]	; (8001cc8 <letter+0xd98>)
 80019fa:	f004 fc62 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80019fe:	2201      	movs	r2, #1
 8001a00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a04:	48b0      	ldr	r0, [pc, #704]	; (8001cc8 <letter+0xd98>)
 8001a06:	f004 fc5c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a10:	48ad      	ldr	r0, [pc, #692]	; (8001cc8 <letter+0xd98>)
 8001a12:	f004 fc56 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a1c:	48aa      	ldr	r0, [pc, #680]	; (8001cc8 <letter+0xd98>)
 8001a1e:	f004 fc50 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001a22:	2200      	movs	r2, #0
 8001a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a28:	48a8      	ldr	r0, [pc, #672]	; (8001ccc <letter+0xd9c>)
 8001a2a:	f004 fc4a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f003 fd98 	bl	8005564 <HAL_Delay>
	}
	if(L == 'N')
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b4e      	cmp	r3, #78	; 0x4e
 8001a38:	d13b      	bne.n	8001ab2 <letter+0xb82>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a40:	48a2      	ldr	r0, [pc, #648]	; (8001ccc <letter+0xd9c>)
 8001a42:	f004 fc3e 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a4c:	489d      	ldr	r0, [pc, #628]	; (8001cc4 <letter+0xd94>)
 8001a4e:	f004 fc38 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001a52:	2201      	movs	r2, #1
 8001a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a58:	489a      	ldr	r0, [pc, #616]	; (8001cc4 <letter+0xd94>)
 8001a5a:	f004 fc32 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2140      	movs	r1, #64	; 0x40
 8001a62:	4898      	ldr	r0, [pc, #608]	; (8001cc4 <letter+0xd94>)
 8001a64:	f004 fc2d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001a68:	2201      	movs	r2, #1
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	4895      	ldr	r0, [pc, #596]	; (8001cc4 <letter+0xd94>)
 8001a6e:	f004 fc28 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001a72:	2200      	movs	r2, #0
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	4894      	ldr	r0, [pc, #592]	; (8001cc8 <letter+0xd98>)
 8001a78:	f004 fc23 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a82:	4891      	ldr	r0, [pc, #580]	; (8001cc8 <letter+0xd98>)
 8001a84:	f004 fc1d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a8e:	488e      	ldr	r0, [pc, #568]	; (8001cc8 <letter+0xd98>)
 8001a90:	f004 fc17 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001a94:	2200      	movs	r2, #0
 8001a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a9a:	488b      	ldr	r0, [pc, #556]	; (8001cc8 <letter+0xd98>)
 8001a9c:	f004 fc11 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa6:	4889      	ldr	r0, [pc, #548]	; (8001ccc <letter+0xd9c>)
 8001aa8:	f004 fc0b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001aac:	2002      	movs	r0, #2
 8001aae:	f003 fd59 	bl	8005564 <HAL_Delay>
	}
	if(L == 'n')
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b6e      	cmp	r3, #110	; 0x6e
 8001ab6:	d13b      	bne.n	8001b30 <letter+0xc00>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001abe:	4883      	ldr	r0, [pc, #524]	; (8001ccc <letter+0xd9c>)
 8001ac0:	f004 fbff 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aca:	487e      	ldr	r0, [pc, #504]	; (8001cc4 <letter+0xd94>)
 8001acc:	f004 fbf9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ad6:	487b      	ldr	r0, [pc, #492]	; (8001cc4 <letter+0xd94>)
 8001ad8:	f004 fbf3 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001adc:	2201      	movs	r2, #1
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	4878      	ldr	r0, [pc, #480]	; (8001cc4 <letter+0xd94>)
 8001ae2:	f004 fbee 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2180      	movs	r1, #128	; 0x80
 8001aea:	4876      	ldr	r0, [pc, #472]	; (8001cc4 <letter+0xd94>)
 8001aec:	f004 fbe9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001af0:	2200      	movs	r2, #0
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	4874      	ldr	r0, [pc, #464]	; (8001cc8 <letter+0xd98>)
 8001af6:	f004 fbe4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001afa:	2201      	movs	r2, #1
 8001afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b00:	4871      	ldr	r0, [pc, #452]	; (8001cc8 <letter+0xd98>)
 8001b02:	f004 fbde 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001b06:	2201      	movs	r2, #1
 8001b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0c:	486e      	ldr	r0, [pc, #440]	; (8001cc8 <letter+0xd98>)
 8001b0e:	f004 fbd8 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001b12:	2200      	movs	r2, #0
 8001b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b18:	486b      	ldr	r0, [pc, #428]	; (8001cc8 <letter+0xd98>)
 8001b1a:	f004 fbd2 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b24:	4869      	ldr	r0, [pc, #420]	; (8001ccc <letter+0xd9c>)
 8001b26:	f004 fbcc 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f003 fd1a 	bl	8005564 <HAL_Delay>
	}
	if(L == 'O')
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b4f      	cmp	r3, #79	; 0x4f
 8001b34:	d13b      	bne.n	8001bae <letter+0xc7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001b36:	2201      	movs	r2, #1
 8001b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b3c:	4863      	ldr	r0, [pc, #396]	; (8001ccc <letter+0xd9c>)
 8001b3e:	f004 fbc0 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8001b42:	2201      	movs	r2, #1
 8001b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b48:	485e      	ldr	r0, [pc, #376]	; (8001cc4 <letter+0xd94>)
 8001b4a:	f004 fbba 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b54:	485b      	ldr	r0, [pc, #364]	; (8001cc4 <letter+0xd94>)
 8001b56:	f004 fbb4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	4859      	ldr	r0, [pc, #356]	; (8001cc4 <letter+0xd94>)
 8001b60:	f004 fbaf 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001b64:	2201      	movs	r2, #1
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	4856      	ldr	r0, [pc, #344]	; (8001cc4 <letter+0xd94>)
 8001b6a:	f004 fbaa 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	4855      	ldr	r0, [pc, #340]	; (8001cc8 <letter+0xd98>)
 8001b74:	f004 fba5 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7e:	4852      	ldr	r0, [pc, #328]	; (8001cc8 <letter+0xd98>)
 8001b80:	f004 fb9f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8a:	484f      	ldr	r0, [pc, #316]	; (8001cc8 <letter+0xd98>)
 8001b8c:	f004 fb99 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b96:	484c      	ldr	r0, [pc, #304]	; (8001cc8 <letter+0xd98>)
 8001b98:	f004 fb93 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba2:	484a      	ldr	r0, [pc, #296]	; (8001ccc <letter+0xd9c>)
 8001ba4:	f004 fb8d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f003 fcdb 	bl	8005564 <HAL_Delay>
	}
	if(L == 'o')
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b6f      	cmp	r3, #111	; 0x6f
 8001bb2:	d13b      	bne.n	8001c2c <letter+0xcfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bba:	4844      	ldr	r0, [pc, #272]	; (8001ccc <letter+0xd9c>)
 8001bbc:	f004 fb81 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bc6:	483f      	ldr	r0, [pc, #252]	; (8001cc4 <letter+0xd94>)
 8001bc8:	f004 fb7b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd2:	483c      	ldr	r0, [pc, #240]	; (8001cc4 <letter+0xd94>)
 8001bd4:	f004 fb75 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	4839      	ldr	r0, [pc, #228]	; (8001cc4 <letter+0xd94>)
 8001bde:	f004 fb70 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001be2:	2201      	movs	r2, #1
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	4837      	ldr	r0, [pc, #220]	; (8001cc4 <letter+0xd94>)
 8001be8:	f004 fb6b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001bec:	2200      	movs	r2, #0
 8001bee:	2180      	movs	r1, #128	; 0x80
 8001bf0:	4835      	ldr	r0, [pc, #212]	; (8001cc8 <letter+0xd98>)
 8001bf2:	f004 fb66 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfc:	4832      	ldr	r0, [pc, #200]	; (8001cc8 <letter+0xd98>)
 8001bfe:	f004 fb60 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001c02:	2201      	movs	r2, #1
 8001c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c08:	482f      	ldr	r0, [pc, #188]	; (8001cc8 <letter+0xd98>)
 8001c0a:	f004 fb5a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c14:	482c      	ldr	r0, [pc, #176]	; (8001cc8 <letter+0xd98>)
 8001c16:	f004 fb54 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c20:	482a      	ldr	r0, [pc, #168]	; (8001ccc <letter+0xd9c>)
 8001c22:	f004 fb4e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001c26:	2002      	movs	r0, #2
 8001c28:	f003 fc9c 	bl	8005564 <HAL_Delay>
	}
	if(L == 'P')
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	2b50      	cmp	r3, #80	; 0x50
 8001c30:	d13b      	bne.n	8001caa <letter+0xd7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c38:	4824      	ldr	r0, [pc, #144]	; (8001ccc <letter+0xd9c>)
 8001c3a:	f004 fb42 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c44:	481f      	ldr	r0, [pc, #124]	; (8001cc4 <letter+0xd94>)
 8001c46:	f004 fb3c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c50:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <letter+0xd94>)
 8001c52:	f004 fb36 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001c56:	2200      	movs	r2, #0
 8001c58:	2140      	movs	r1, #64	; 0x40
 8001c5a:	481a      	ldr	r0, [pc, #104]	; (8001cc4 <letter+0xd94>)
 8001c5c:	f004 fb31 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <letter+0xd94>)
 8001c66:	f004 fb2c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	4816      	ldr	r0, [pc, #88]	; (8001cc8 <letter+0xd98>)
 8001c70:	f004 fb27 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7a:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <letter+0xd98>)
 8001c7c:	f004 fb21 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c86:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <letter+0xd98>)
 8001c88:	f004 fb1b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <letter+0xd98>)
 8001c94:	f004 fb15 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <letter+0xd9c>)
 8001ca0:	f004 fb0f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f003 fc5d 	bl	8005564 <HAL_Delay>
	}
	if(L == 'Q')
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b51      	cmp	r3, #81	; 0x51
 8001cae:	d142      	bne.n	8001d36 <letter+0xe06>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <letter+0xd9c>)
 8001cb8:	f004 fb03 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cc2:	e005      	b.n	8001cd0 <letter+0xda0>
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	40010c00 	.word	0x40010c00
 8001cd0:	48d5      	ldr	r0, [pc, #852]	; (8002028 <letter+0x10f8>)
 8001cd2:	f004 faf6 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cdc:	48d2      	ldr	r0, [pc, #840]	; (8002028 <letter+0x10f8>)
 8001cde:	f004 faf0 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2140      	movs	r1, #64	; 0x40
 8001ce6:	48d0      	ldr	r0, [pc, #832]	; (8002028 <letter+0x10f8>)
 8001ce8:	f004 faeb 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001cec:	2200      	movs	r2, #0
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	48cd      	ldr	r0, [pc, #820]	; (8002028 <letter+0x10f8>)
 8001cf2:	f004 fae6 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	48cc      	ldr	r0, [pc, #816]	; (800202c <letter+0x10fc>)
 8001cfc:	f004 fae1 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d06:	48c9      	ldr	r0, [pc, #804]	; (800202c <letter+0x10fc>)
 8001d08:	f004 fadb 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d12:	48c6      	ldr	r0, [pc, #792]	; (800202c <letter+0x10fc>)
 8001d14:	f004 fad5 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d1e:	48c3      	ldr	r0, [pc, #780]	; (800202c <letter+0x10fc>)
 8001d20:	f004 facf 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2a:	48c1      	ldr	r0, [pc, #772]	; (8002030 <letter+0x1100>)
 8001d2c:	f004 fac9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001d30:	2002      	movs	r0, #2
 8001d32:	f003 fc17 	bl	8005564 <HAL_Delay>
	}
	if(L == 'r')
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	2b72      	cmp	r3, #114	; 0x72
 8001d3a:	d13b      	bne.n	8001db4 <letter+0xe84>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d42:	48bb      	ldr	r0, [pc, #748]	; (8002030 <letter+0x1100>)
 8001d44:	f004 fabd 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d4e:	48b6      	ldr	r0, [pc, #728]	; (8002028 <letter+0x10f8>)
 8001d50:	f004 fab7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001d54:	2201      	movs	r2, #1
 8001d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d5a:	48b3      	ldr	r0, [pc, #716]	; (8002028 <letter+0x10f8>)
 8001d5c:	f004 fab1 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001d60:	2200      	movs	r2, #0
 8001d62:	2140      	movs	r1, #64	; 0x40
 8001d64:	48b0      	ldr	r0, [pc, #704]	; (8002028 <letter+0x10f8>)
 8001d66:	f004 faac 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	48ae      	ldr	r0, [pc, #696]	; (8002028 <letter+0x10f8>)
 8001d70:	f004 faa7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001d74:	2201      	movs	r2, #1
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	48ac      	ldr	r0, [pc, #688]	; (800202c <letter+0x10fc>)
 8001d7a:	f004 faa2 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d84:	48a9      	ldr	r0, [pc, #676]	; (800202c <letter+0x10fc>)
 8001d86:	f004 fa9c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d90:	48a6      	ldr	r0, [pc, #664]	; (800202c <letter+0x10fc>)
 8001d92:	f004 fa96 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001d96:	2200      	movs	r2, #0
 8001d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d9c:	48a3      	ldr	r0, [pc, #652]	; (800202c <letter+0x10fc>)
 8001d9e:	f004 fa90 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da8:	48a1      	ldr	r0, [pc, #644]	; (8002030 <letter+0x1100>)
 8001daa:	f004 fa8a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001dae:	2002      	movs	r0, #2
 8001db0:	f003 fbd8 	bl	8005564 <HAL_Delay>
	}
	if(L == 's')
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	2b73      	cmp	r3, #115	; 0x73
 8001db8:	d13b      	bne.n	8001e32 <letter+0xf02>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc0:	489b      	ldr	r0, [pc, #620]	; (8002030 <letter+0x1100>)
 8001dc2:	f004 fa7e 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dcc:	4896      	ldr	r0, [pc, #600]	; (8002028 <letter+0x10f8>)
 8001dce:	f004 fa78 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dd8:	4893      	ldr	r0, [pc, #588]	; (8002028 <letter+0x10f8>)
 8001dda:	f004 fa72 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001dde:	2200      	movs	r2, #0
 8001de0:	2140      	movs	r1, #64	; 0x40
 8001de2:	4891      	ldr	r0, [pc, #580]	; (8002028 <letter+0x10f8>)
 8001de4:	f004 fa6d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001de8:	2200      	movs	r2, #0
 8001dea:	2180      	movs	r1, #128	; 0x80
 8001dec:	488e      	ldr	r0, [pc, #568]	; (8002028 <letter+0x10f8>)
 8001dee:	f004 fa68 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001df2:	2201      	movs	r2, #1
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	488d      	ldr	r0, [pc, #564]	; (800202c <letter+0x10fc>)
 8001df8:	f004 fa63 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e02:	488a      	ldr	r0, [pc, #552]	; (800202c <letter+0x10fc>)
 8001e04:	f004 fa5d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0e:	4887      	ldr	r0, [pc, #540]	; (800202c <letter+0x10fc>)
 8001e10:	f004 fa57 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1a:	4884      	ldr	r0, [pc, #528]	; (800202c <letter+0x10fc>)
 8001e1c:	f004 fa51 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e26:	4882      	ldr	r0, [pc, #520]	; (8002030 <letter+0x1100>)
 8001e28:	f004 fa4b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001e2c:	2002      	movs	r0, #2
 8001e2e:	f003 fb99 	bl	8005564 <HAL_Delay>
	}
	if(L == 'T')
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b54      	cmp	r3, #84	; 0x54
 8001e36:	d13b      	bne.n	8001eb0 <letter+0xf80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e3e:	487c      	ldr	r0, [pc, #496]	; (8002030 <letter+0x1100>)
 8001e40:	f004 fa3f 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e4a:	4877      	ldr	r0, [pc, #476]	; (8002028 <letter+0x10f8>)
 8001e4c:	f004 fa39 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e56:	4874      	ldr	r0, [pc, #464]	; (8002028 <letter+0x10f8>)
 8001e58:	f004 fa33 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	2140      	movs	r1, #64	; 0x40
 8001e60:	4871      	ldr	r0, [pc, #452]	; (8002028 <letter+0x10f8>)
 8001e62:	f004 fa2e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001e66:	2200      	movs	r2, #0
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	486f      	ldr	r0, [pc, #444]	; (8002028 <letter+0x10f8>)
 8001e6c:	f004 fa29 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001e70:	2201      	movs	r2, #1
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	486d      	ldr	r0, [pc, #436]	; (800202c <letter+0x10fc>)
 8001e76:	f004 fa24 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e80:	486a      	ldr	r0, [pc, #424]	; (800202c <letter+0x10fc>)
 8001e82:	f004 fa1e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e8c:	4867      	ldr	r0, [pc, #412]	; (800202c <letter+0x10fc>)
 8001e8e:	f004 fa18 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001e92:	2200      	movs	r2, #0
 8001e94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e98:	4864      	ldr	r0, [pc, #400]	; (800202c <letter+0x10fc>)
 8001e9a:	f004 fa12 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea4:	4862      	ldr	r0, [pc, #392]	; (8002030 <letter+0x1100>)
 8001ea6:	f004 fa0c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f003 fb5a 	bl	8005564 <HAL_Delay>
	}
	if(L == 't')
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b74      	cmp	r3, #116	; 0x74
 8001eb4:	d13b      	bne.n	8001f2e <letter+0xffe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ebc:	485c      	ldr	r0, [pc, #368]	; (8002030 <letter+0x1100>)
 8001ebe:	f004 fa00 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec8:	4857      	ldr	r0, [pc, #348]	; (8002028 <letter+0x10f8>)
 8001eca:	f004 f9fa 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed4:	4854      	ldr	r0, [pc, #336]	; (8002028 <letter+0x10f8>)
 8001ed6:	f004 f9f4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001eda:	2201      	movs	r2, #1
 8001edc:	2140      	movs	r1, #64	; 0x40
 8001ede:	4852      	ldr	r0, [pc, #328]	; (8002028 <letter+0x10f8>)
 8001ee0:	f004 f9ef 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	484f      	ldr	r0, [pc, #316]	; (8002028 <letter+0x10f8>)
 8001eea:	f004 f9ea 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2180      	movs	r1, #128	; 0x80
 8001ef2:	484e      	ldr	r0, [pc, #312]	; (800202c <letter+0x10fc>)
 8001ef4:	f004 f9e5 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001efe:	484b      	ldr	r0, [pc, #300]	; (800202c <letter+0x10fc>)
 8001f00:	f004 f9df 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001f04:	2201      	movs	r2, #1
 8001f06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f0a:	4848      	ldr	r0, [pc, #288]	; (800202c <letter+0x10fc>)
 8001f0c:	f004 f9d9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f16:	4845      	ldr	r0, [pc, #276]	; (800202c <letter+0x10fc>)
 8001f18:	f004 f9d3 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f22:	4843      	ldr	r0, [pc, #268]	; (8002030 <letter+0x1100>)
 8001f24:	f004 f9cd 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f003 fb1b 	bl	8005564 <HAL_Delay>
	}
	if(L == 'u')
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b75      	cmp	r3, #117	; 0x75
 8001f32:	d13b      	bne.n	8001fac <letter+0x107c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001f34:	2201      	movs	r2, #1
 8001f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3a:	483d      	ldr	r0, [pc, #244]	; (8002030 <letter+0x1100>)
 8001f3c:	f004 f9c1 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f46:	4838      	ldr	r0, [pc, #224]	; (8002028 <letter+0x10f8>)
 8001f48:	f004 f9bb 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f52:	4835      	ldr	r0, [pc, #212]	; (8002028 <letter+0x10f8>)
 8001f54:	f004 f9b5 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001f58:	2201      	movs	r2, #1
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	4832      	ldr	r0, [pc, #200]	; (8002028 <letter+0x10f8>)
 8001f5e:	f004 f9b0 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001f62:	2200      	movs	r2, #0
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	4830      	ldr	r0, [pc, #192]	; (8002028 <letter+0x10f8>)
 8001f68:	f004 f9ab 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	482e      	ldr	r0, [pc, #184]	; (800202c <letter+0x10fc>)
 8001f72:	f004 f9a6 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001f76:	2201      	movs	r2, #1
 8001f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f7c:	482b      	ldr	r0, [pc, #172]	; (800202c <letter+0x10fc>)
 8001f7e:	f004 f9a0 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4828      	ldr	r0, [pc, #160]	; (800202c <letter+0x10fc>)
 8001f8a:	f004 f99a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	4825      	ldr	r0, [pc, #148]	; (800202c <letter+0x10fc>)
 8001f96:	f004 f994 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa0:	4823      	ldr	r0, [pc, #140]	; (8002030 <letter+0x1100>)
 8001fa2:	f004 f98e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	f003 fadc 	bl	8005564 <HAL_Delay>
	}
	if(L == 'v')
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b76      	cmp	r3, #118	; 0x76
 8001fb0:	d142      	bne.n	8002038 <letter+0x1108>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb8:	481d      	ldr	r0, [pc, #116]	; (8002030 <letter+0x1100>)
 8001fba:	f004 f982 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc4:	4818      	ldr	r0, [pc, #96]	; (8002028 <letter+0x10f8>)
 8001fc6:	f004 f97c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd0:	4815      	ldr	r0, [pc, #84]	; (8002028 <letter+0x10f8>)
 8001fd2:	f004 f976 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2140      	movs	r1, #64	; 0x40
 8001fda:	4813      	ldr	r0, [pc, #76]	; (8002028 <letter+0x10f8>)
 8001fdc:	f004 f971 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2180      	movs	r1, #128	; 0x80
 8001fe4:	4810      	ldr	r0, [pc, #64]	; (8002028 <letter+0x10f8>)
 8001fe6:	f004 f96c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001fea:	2201      	movs	r2, #1
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	480f      	ldr	r0, [pc, #60]	; (800202c <letter+0x10fc>)
 8001ff0:	f004 f967 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffa:	480c      	ldr	r0, [pc, #48]	; (800202c <letter+0x10fc>)
 8001ffc:	f004 f961 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002000:	2201      	movs	r2, #1
 8002002:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002006:	4809      	ldr	r0, [pc, #36]	; (800202c <letter+0x10fc>)
 8002008:	f004 f95b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800200c:	2200      	movs	r2, #0
 800200e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <letter+0x10fc>)
 8002014:	f004 f955 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <letter+0x1100>)
 8002020:	f004 f94f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002024:	2002      	movs	r0, #2
 8002026:	e005      	b.n	8002034 <letter+0x1104>
 8002028:	40011000 	.word	0x40011000
 800202c:	40010800 	.word	0x40010800
 8002030:	40010c00 	.word	0x40010c00
 8002034:	f003 fa96 	bl	8005564 <HAL_Delay>
	}
	if(L == 'W')
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b57      	cmp	r3, #87	; 0x57
 800203c:	d13b      	bne.n	80020b6 <letter+0x1186>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002044:	48d5      	ldr	r0, [pc, #852]	; (800239c <letter+0x146c>)
 8002046:	f004 f93c 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002050:	48d3      	ldr	r0, [pc, #844]	; (80023a0 <letter+0x1470>)
 8002052:	f004 f936 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002056:	2201      	movs	r2, #1
 8002058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205c:	48d0      	ldr	r0, [pc, #832]	; (80023a0 <letter+0x1470>)
 800205e:	f004 f930 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002062:	2201      	movs	r2, #1
 8002064:	2140      	movs	r1, #64	; 0x40
 8002066:	48ce      	ldr	r0, [pc, #824]	; (80023a0 <letter+0x1470>)
 8002068:	f004 f92b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800206c:	2200      	movs	r2, #0
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	48cb      	ldr	r0, [pc, #812]	; (80023a0 <letter+0x1470>)
 8002072:	f004 f926 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002076:	2201      	movs	r2, #1
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	48ca      	ldr	r0, [pc, #808]	; (80023a4 <letter+0x1474>)
 800207c:	f004 f921 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002080:	2200      	movs	r2, #0
 8002082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002086:	48c7      	ldr	r0, [pc, #796]	; (80023a4 <letter+0x1474>)
 8002088:	f004 f91b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002092:	48c4      	ldr	r0, [pc, #784]	; (80023a4 <letter+0x1474>)
 8002094:	f004 f915 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002098:	2200      	movs	r2, #0
 800209a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800209e:	48c1      	ldr	r0, [pc, #772]	; (80023a4 <letter+0x1474>)
 80020a0:	f004 f90f 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80020a4:	2200      	movs	r2, #0
 80020a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020aa:	48bc      	ldr	r0, [pc, #752]	; (800239c <letter+0x146c>)
 80020ac:	f004 f909 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80020b0:	2002      	movs	r0, #2
 80020b2:	f003 fa57 	bl	8005564 <HAL_Delay>
	}
	if(L == 'w')
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	2b77      	cmp	r3, #119	; 0x77
 80020ba:	d13b      	bne.n	8002134 <letter+0x1204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80020bc:	2201      	movs	r2, #1
 80020be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c2:	48b6      	ldr	r0, [pc, #728]	; (800239c <letter+0x146c>)
 80020c4:	f004 f8fd 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ce:	48b4      	ldr	r0, [pc, #720]	; (80023a0 <letter+0x1470>)
 80020d0:	f004 f8f7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020da:	48b1      	ldr	r0, [pc, #708]	; (80023a0 <letter+0x1470>)
 80020dc:	f004 f8f1 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80020e0:	2201      	movs	r2, #1
 80020e2:	2140      	movs	r1, #64	; 0x40
 80020e4:	48ae      	ldr	r0, [pc, #696]	; (80023a0 <letter+0x1470>)
 80020e6:	f004 f8ec 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80020ea:	2200      	movs	r2, #0
 80020ec:	2180      	movs	r1, #128	; 0x80
 80020ee:	48ac      	ldr	r0, [pc, #688]	; (80023a0 <letter+0x1470>)
 80020f0:	f004 f8e7 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80020f4:	2201      	movs	r2, #1
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	48aa      	ldr	r0, [pc, #680]	; (80023a4 <letter+0x1474>)
 80020fa:	f004 f8e2 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002104:	48a7      	ldr	r0, [pc, #668]	; (80023a4 <letter+0x1474>)
 8002106:	f004 f8dc 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800210a:	2201      	movs	r2, #1
 800210c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002110:	48a4      	ldr	r0, [pc, #656]	; (80023a4 <letter+0x1474>)
 8002112:	f004 f8d6 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002116:	2200      	movs	r2, #0
 8002118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800211c:	48a1      	ldr	r0, [pc, #644]	; (80023a4 <letter+0x1474>)
 800211e:	f004 f8d0 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002122:	2200      	movs	r2, #0
 8002124:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002128:	489c      	ldr	r0, [pc, #624]	; (800239c <letter+0x146c>)
 800212a:	f004 f8ca 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800212e:	2002      	movs	r0, #2
 8002130:	f003 fa18 	bl	8005564 <HAL_Delay>
	}
	if(L == 'y')
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b79      	cmp	r3, #121	; 0x79
 8002138:	d13b      	bne.n	80021b2 <letter+0x1282>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800213a:	2201      	movs	r2, #1
 800213c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002140:	4896      	ldr	r0, [pc, #600]	; (800239c <letter+0x146c>)
 8002142:	f004 f8be 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800214c:	4894      	ldr	r0, [pc, #592]	; (80023a0 <letter+0x1470>)
 800214e:	f004 f8b8 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002152:	2200      	movs	r2, #0
 8002154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002158:	4891      	ldr	r0, [pc, #580]	; (80023a0 <letter+0x1470>)
 800215a:	f004 f8b2 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800215e:	2200      	movs	r2, #0
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	488f      	ldr	r0, [pc, #572]	; (80023a0 <letter+0x1470>)
 8002164:	f004 f8ad 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002168:	2201      	movs	r2, #1
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	488c      	ldr	r0, [pc, #560]	; (80023a0 <letter+0x1470>)
 800216e:	f004 f8a8 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002172:	2201      	movs	r2, #1
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	488b      	ldr	r0, [pc, #556]	; (80023a4 <letter+0x1474>)
 8002178:	f004 f8a3 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800217c:	2201      	movs	r2, #1
 800217e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002182:	4888      	ldr	r0, [pc, #544]	; (80023a4 <letter+0x1474>)
 8002184:	f004 f89d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002188:	2201      	movs	r2, #1
 800218a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218e:	4885      	ldr	r0, [pc, #532]	; (80023a4 <letter+0x1474>)
 8002190:	f004 f897 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002194:	2200      	movs	r2, #0
 8002196:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219a:	4882      	ldr	r0, [pc, #520]	; (80023a4 <letter+0x1474>)
 800219c:	f004 f891 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a6:	487d      	ldr	r0, [pc, #500]	; (800239c <letter+0x146c>)
 80021a8:	f004 f88b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80021ac:	2002      	movs	r0, #2
 80021ae:	f003 f9d9 	bl	8005564 <HAL_Delay>
	}
	if(L == '0')
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2b30      	cmp	r3, #48	; 0x30
 80021b6:	d13b      	bne.n	8002230 <letter+0x1300>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80021b8:	2201      	movs	r2, #1
 80021ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021be:	4877      	ldr	r0, [pc, #476]	; (800239c <letter+0x146c>)
 80021c0:	f004 f87f 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80021c4:	2200      	movs	r2, #0
 80021c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ca:	4875      	ldr	r0, [pc, #468]	; (80023a0 <letter+0x1470>)
 80021cc:	f004 f879 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80021d0:	2200      	movs	r2, #0
 80021d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d6:	4872      	ldr	r0, [pc, #456]	; (80023a0 <letter+0x1470>)
 80021d8:	f004 f873 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80021dc:	2200      	movs	r2, #0
 80021de:	2140      	movs	r1, #64	; 0x40
 80021e0:	486f      	ldr	r0, [pc, #444]	; (80023a0 <letter+0x1470>)
 80021e2:	f004 f86e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80021e6:	2200      	movs	r2, #0
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	486d      	ldr	r0, [pc, #436]	; (80023a0 <letter+0x1470>)
 80021ec:	f004 f869 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80021f0:	2201      	movs	r2, #1
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	486b      	ldr	r0, [pc, #428]	; (80023a4 <letter+0x1474>)
 80021f6:	f004 f864 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002200:	4868      	ldr	r0, [pc, #416]	; (80023a4 <letter+0x1474>)
 8002202:	f004 f85e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002206:	2200      	movs	r2, #0
 8002208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800220c:	4865      	ldr	r0, [pc, #404]	; (80023a4 <letter+0x1474>)
 800220e:	f004 f858 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002212:	2200      	movs	r2, #0
 8002214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002218:	4862      	ldr	r0, [pc, #392]	; (80023a4 <letter+0x1474>)
 800221a:	f004 f852 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800221e:	2200      	movs	r2, #0
 8002220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002224:	485d      	ldr	r0, [pc, #372]	; (800239c <letter+0x146c>)
 8002226:	f004 f84c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800222a:	2002      	movs	r0, #2
 800222c:	f003 f99a 	bl	8005564 <HAL_Delay>
	}
	if(L == '1')
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	2b31      	cmp	r3, #49	; 0x31
 8002234:	d13b      	bne.n	80022ae <letter+0x137e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002236:	2201      	movs	r2, #1
 8002238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800223c:	4857      	ldr	r0, [pc, #348]	; (800239c <letter+0x146c>)
 800223e:	f004 f840 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002248:	4855      	ldr	r0, [pc, #340]	; (80023a0 <letter+0x1470>)
 800224a:	f004 f83a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002254:	4852      	ldr	r0, [pc, #328]	; (80023a0 <letter+0x1470>)
 8002256:	f004 f834 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800225a:	2200      	movs	r2, #0
 800225c:	2140      	movs	r1, #64	; 0x40
 800225e:	4850      	ldr	r0, [pc, #320]	; (80023a0 <letter+0x1470>)
 8002260:	f004 f82f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002264:	2200      	movs	r2, #0
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	484d      	ldr	r0, [pc, #308]	; (80023a0 <letter+0x1470>)
 800226a:	f004 f82a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800226e:	2201      	movs	r2, #1
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	484c      	ldr	r0, [pc, #304]	; (80023a4 <letter+0x1474>)
 8002274:	f004 f825 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002278:	2201      	movs	r2, #1
 800227a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800227e:	4849      	ldr	r0, [pc, #292]	; (80023a4 <letter+0x1474>)
 8002280:	f004 f81f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800228a:	4846      	ldr	r0, [pc, #280]	; (80023a4 <letter+0x1474>)
 800228c:	f004 f819 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002290:	2200      	movs	r2, #0
 8002292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002296:	4843      	ldr	r0, [pc, #268]	; (80023a4 <letter+0x1474>)
 8002298:	f004 f813 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800229c:	2200      	movs	r2, #0
 800229e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022a2:	483e      	ldr	r0, [pc, #248]	; (800239c <letter+0x146c>)
 80022a4:	f004 f80d 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80022a8:	2002      	movs	r0, #2
 80022aa:	f003 f95b 	bl	8005564 <HAL_Delay>
	}
	if(L == '2')
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b32      	cmp	r3, #50	; 0x32
 80022b2:	d138      	bne.n	8002326 <letter+0x13f6>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80022b4:	2201      	movs	r2, #1
 80022b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022ba:	4838      	ldr	r0, [pc, #224]	; (800239c <letter+0x146c>)
 80022bc:	f004 f801 	bl	80062c2 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c6:	4836      	ldr	r0, [pc, #216]	; (80023a0 <letter+0x1470>)
 80022c8:	f003 fffb 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80022cc:	2201      	movs	r2, #1
 80022ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d2:	4833      	ldr	r0, [pc, #204]	; (80023a0 <letter+0x1470>)
 80022d4:	f003 fff5 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80022d8:	2200      	movs	r2, #0
 80022da:	2140      	movs	r1, #64	; 0x40
 80022dc:	4830      	ldr	r0, [pc, #192]	; (80023a0 <letter+0x1470>)
 80022de:	f003 fff0 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80022e2:	2200      	movs	r2, #0
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	482e      	ldr	r0, [pc, #184]	; (80023a0 <letter+0x1470>)
 80022e8:	f003 ffeb 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80022ec:	2201      	movs	r2, #1
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	482c      	ldr	r0, [pc, #176]	; (80023a4 <letter+0x1474>)
 80022f2:	f003 ffe6 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80022f6:	2201      	movs	r2, #1
 80022f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022fc:	4829      	ldr	r0, [pc, #164]	; (80023a4 <letter+0x1474>)
 80022fe:	f003 ffe0 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002308:	4826      	ldr	r0, [pc, #152]	; (80023a4 <letter+0x1474>)
 800230a:	f003 ffda 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002314:	4823      	ldr	r0, [pc, #140]	; (80023a4 <letter+0x1474>)
 8002316:	f003 ffd4 	bl	80062c2 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002320:	481e      	ldr	r0, [pc, #120]	; (800239c <letter+0x146c>)
 8002322:	f003 ffce 	bl	80062c2 <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b33      	cmp	r3, #51	; 0x33
 800232a:	d143      	bne.n	80023b4 <letter+0x1484>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800232c:	2201      	movs	r2, #1
 800232e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002332:	481a      	ldr	r0, [pc, #104]	; (800239c <letter+0x146c>)
 8002334:	f003 ffc5 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800233e:	4818      	ldr	r0, [pc, #96]	; (80023a0 <letter+0x1470>)
 8002340:	f003 ffbf 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002344:	2201      	movs	r2, #1
 8002346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234a:	4815      	ldr	r0, [pc, #84]	; (80023a0 <letter+0x1470>)
 800234c:	f003 ffb9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002350:	2200      	movs	r2, #0
 8002352:	2140      	movs	r1, #64	; 0x40
 8002354:	4812      	ldr	r0, [pc, #72]	; (80023a0 <letter+0x1470>)
 8002356:	f003 ffb4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800235a:	2200      	movs	r2, #0
 800235c:	2180      	movs	r1, #128	; 0x80
 800235e:	4810      	ldr	r0, [pc, #64]	; (80023a0 <letter+0x1470>)
 8002360:	f003 ffaf 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002364:	2201      	movs	r2, #1
 8002366:	2180      	movs	r1, #128	; 0x80
 8002368:	480e      	ldr	r0, [pc, #56]	; (80023a4 <letter+0x1474>)
 800236a:	f003 ffaa 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800236e:	2201      	movs	r2, #1
 8002370:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002374:	480b      	ldr	r0, [pc, #44]	; (80023a4 <letter+0x1474>)
 8002376:	f003 ffa4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002380:	4808      	ldr	r0, [pc, #32]	; (80023a4 <letter+0x1474>)
 8002382:	f003 ff9e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238c:	4805      	ldr	r0, [pc, #20]	; (80023a4 <letter+0x1474>)
 800238e:	f003 ff98 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002392:	2200      	movs	r2, #0
 8002394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002398:	e006      	b.n	80023a8 <letter+0x1478>
 800239a:	bf00      	nop
 800239c:	40010c00 	.word	0x40010c00
 80023a0:	40011000 	.word	0x40011000
 80023a4:	40010800 	.word	0x40010800
 80023a8:	48c1      	ldr	r0, [pc, #772]	; (80026b0 <letter+0x1780>)
 80023aa:	f003 ff8a 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80023ae:	2002      	movs	r0, #2
 80023b0:	f003 f8d8 	bl	8005564 <HAL_Delay>
	}
	if(L == '4')
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	2b34      	cmp	r3, #52	; 0x34
 80023b8:	d13b      	bne.n	8002432 <letter+0x1502>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80023ba:	2201      	movs	r2, #1
 80023bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023c0:	48bb      	ldr	r0, [pc, #748]	; (80026b0 <letter+0x1780>)
 80023c2:	f003 ff7e 	bl	80062c2 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 80023c6:	2200      	movs	r2, #0
 80023c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023cc:	48b9      	ldr	r0, [pc, #740]	; (80026b4 <letter+0x1784>)
 80023ce:	f003 ff78 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80023d2:	2200      	movs	r2, #0
 80023d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d8:	48b6      	ldr	r0, [pc, #728]	; (80026b4 <letter+0x1784>)
 80023da:	f003 ff72 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80023de:	2201      	movs	r2, #1
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	48b4      	ldr	r0, [pc, #720]	; (80026b4 <letter+0x1784>)
 80023e4:	f003 ff6d 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80023e8:	2200      	movs	r2, #0
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	48b1      	ldr	r0, [pc, #708]	; (80026b4 <letter+0x1784>)
 80023ee:	f003 ff68 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80023f2:	2201      	movs	r2, #1
 80023f4:	2180      	movs	r1, #128	; 0x80
 80023f6:	48b0      	ldr	r0, [pc, #704]	; (80026b8 <letter+0x1788>)
 80023f8:	f003 ff63 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80023fc:	2201      	movs	r2, #1
 80023fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002402:	48ad      	ldr	r0, [pc, #692]	; (80026b8 <letter+0x1788>)
 8002404:	f003 ff5d 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240e:	48aa      	ldr	r0, [pc, #680]	; (80026b8 <letter+0x1788>)
 8002410:	f003 ff57 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002414:	2200      	movs	r2, #0
 8002416:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800241a:	48a7      	ldr	r0, [pc, #668]	; (80026b8 <letter+0x1788>)
 800241c:	f003 ff51 	bl	80062c2 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002426:	48a2      	ldr	r0, [pc, #648]	; (80026b0 <letter+0x1780>)
 8002428:	f003 ff4b 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800242c:	2002      	movs	r0, #2
 800242e:	f003 f899 	bl	8005564 <HAL_Delay>
	}
	if(L == '5')
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b35      	cmp	r3, #53	; 0x35
 8002436:	d13b      	bne.n	80024b0 <letter+0x1580>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002438:	2201      	movs	r2, #1
 800243a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800243e:	489c      	ldr	r0, [pc, #624]	; (80026b0 <letter+0x1780>)
 8002440:	f003 ff3f 	bl	80062c2 <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800244a:	489a      	ldr	r0, [pc, #616]	; (80026b4 <letter+0x1784>)
 800244c:	f003 ff39 	bl	80062c2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002450:	2200      	movs	r2, #0
 8002452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002456:	4897      	ldr	r0, [pc, #604]	; (80026b4 <letter+0x1784>)
 8002458:	f003 ff33 	bl	80062c2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800245c:	2201      	movs	r2, #1
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	4894      	ldr	r0, [pc, #592]	; (80026b4 <letter+0x1784>)
 8002462:	f003 ff2e 	bl	80062c2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002466:	2200      	movs	r2, #0
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	4892      	ldr	r0, [pc, #584]	; (80026b4 <letter+0x1784>)
 800246c:	f003 ff29 	bl	80062c2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002470:	2201      	movs	r2, #1
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	4890      	ldr	r0, [pc, #576]	; (80026b8 <letter+0x1788>)
 8002476:	f003 ff24 	bl	80062c2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002480:	488d      	ldr	r0, [pc, #564]	; (80026b8 <letter+0x1788>)
 8002482:	f003 ff1e 	bl	80062c2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002486:	2200      	movs	r2, #0
 8002488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800248c:	488a      	ldr	r0, [pc, #552]	; (80026b8 <letter+0x1788>)
 800248e:	f003 ff18 	bl	80062c2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002492:	2200      	movs	r2, #0
 8002494:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002498:	4887      	ldr	r0, [pc, #540]	; (80026b8 <letter+0x1788>)
 800249a:	f003 ff12 	bl	80062c2 <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024a4:	4882      	ldr	r0, [pc, #520]	; (80026b0 <letter+0x1780>)
 80024a6:	f003 ff0c 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80024aa:	2002      	movs	r0, #2
 80024ac:	f003 f85a 	bl	8005564 <HAL_Delay>
	}
	if(L == '6')
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b36      	cmp	r3, #54	; 0x36
 80024b4:	d13b      	bne.n	800252e <letter+0x15fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80024b6:	2201      	movs	r2, #1
 80024b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024bc:	487c      	ldr	r0, [pc, #496]	; (80026b0 <letter+0x1780>)
 80024be:	f003 ff00 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 80024c2:	2200      	movs	r2, #0
 80024c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024c8:	487a      	ldr	r0, [pc, #488]	; (80026b4 <letter+0x1784>)
 80024ca:	f003 fefa 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024d4:	4877      	ldr	r0, [pc, #476]	; (80026b4 <letter+0x1784>)
 80024d6:	f003 fef4 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80024da:	2201      	movs	r2, #1
 80024dc:	2140      	movs	r1, #64	; 0x40
 80024de:	4875      	ldr	r0, [pc, #468]	; (80026b4 <letter+0x1784>)
 80024e0:	f003 feef 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	4872      	ldr	r0, [pc, #456]	; (80026b4 <letter+0x1784>)
 80024ea:	f003 feea 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80024ee:	2201      	movs	r2, #1
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	4871      	ldr	r0, [pc, #452]	; (80026b8 <letter+0x1788>)
 80024f4:	f003 fee5 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024fe:	486e      	ldr	r0, [pc, #440]	; (80026b8 <letter+0x1788>)
 8002500:	f003 fedf 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800250a:	486b      	ldr	r0, [pc, #428]	; (80026b8 <letter+0x1788>)
 800250c:	f003 fed9 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002510:	2200      	movs	r2, #0
 8002512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002516:	4868      	ldr	r0, [pc, #416]	; (80026b8 <letter+0x1788>)
 8002518:	f003 fed3 	bl	80062c2 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002522:	4863      	ldr	r0, [pc, #396]	; (80026b0 <letter+0x1780>)
 8002524:	f003 fecd 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002528:	2002      	movs	r0, #2
 800252a:	f003 f81b 	bl	8005564 <HAL_Delay>
	}
	if(L == '7')
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	2b37      	cmp	r3, #55	; 0x37
 8002532:	d13b      	bne.n	80025ac <letter+0x167c>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002534:	2201      	movs	r2, #1
 8002536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800253a:	485d      	ldr	r0, [pc, #372]	; (80026b0 <letter+0x1780>)
 800253c:	f003 fec1 	bl	80062c2 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 8002540:	2201      	movs	r2, #1
 8002542:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002546:	485b      	ldr	r0, [pc, #364]	; (80026b4 <letter+0x1784>)
 8002548:	f003 febb 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002552:	4858      	ldr	r0, [pc, #352]	; (80026b4 <letter+0x1784>)
 8002554:	f003 feb5 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8002558:	2201      	movs	r2, #1
 800255a:	2140      	movs	r1, #64	; 0x40
 800255c:	4855      	ldr	r0, [pc, #340]	; (80026b4 <letter+0x1784>)
 800255e:	f003 feb0 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002562:	2200      	movs	r2, #0
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	4853      	ldr	r0, [pc, #332]	; (80026b4 <letter+0x1784>)
 8002568:	f003 feab 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800256c:	2201      	movs	r2, #1
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	4851      	ldr	r0, [pc, #324]	; (80026b8 <letter+0x1788>)
 8002572:	f003 fea6 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002576:	2201      	movs	r2, #1
 8002578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800257c:	484e      	ldr	r0, [pc, #312]	; (80026b8 <letter+0x1788>)
 800257e:	f003 fea0 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002582:	2200      	movs	r2, #0
 8002584:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002588:	484b      	ldr	r0, [pc, #300]	; (80026b8 <letter+0x1788>)
 800258a:	f003 fe9a 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002594:	4848      	ldr	r0, [pc, #288]	; (80026b8 <letter+0x1788>)
 8002596:	f003 fe94 	bl	80062c2 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800259a:	2200      	movs	r2, #0
 800259c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025a0:	4843      	ldr	r0, [pc, #268]	; (80026b0 <letter+0x1780>)
 80025a2:	f003 fe8e 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80025a6:	2002      	movs	r0, #2
 80025a8:	f002 ffdc 	bl	8005564 <HAL_Delay>
	}
	if(L == '8')
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	2b38      	cmp	r3, #56	; 0x38
 80025b0:	d13b      	bne.n	800262a <letter+0x16fa>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80025b2:	2201      	movs	r2, #1
 80025b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b8:	483d      	ldr	r0, [pc, #244]	; (80026b0 <letter+0x1780>)
 80025ba:	f003 fe82 	bl	80062c2 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 80025be:	2200      	movs	r2, #0
 80025c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025c4:	483b      	ldr	r0, [pc, #236]	; (80026b4 <letter+0x1784>)
 80025c6:	f003 fe7c 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80025ca:	2200      	movs	r2, #0
 80025cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025d0:	4838      	ldr	r0, [pc, #224]	; (80026b4 <letter+0x1784>)
 80025d2:	f003 fe76 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80025d6:	2200      	movs	r2, #0
 80025d8:	2140      	movs	r1, #64	; 0x40
 80025da:	4836      	ldr	r0, [pc, #216]	; (80026b4 <letter+0x1784>)
 80025dc:	f003 fe71 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80025e0:	2201      	movs	r2, #1
 80025e2:	2180      	movs	r1, #128	; 0x80
 80025e4:	4833      	ldr	r0, [pc, #204]	; (80026b4 <letter+0x1784>)
 80025e6:	f003 fe6c 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80025ea:	2201      	movs	r2, #1
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	4832      	ldr	r0, [pc, #200]	; (80026b8 <letter+0x1788>)
 80025f0:	f003 fe67 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80025f4:	2201      	movs	r2, #1
 80025f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fa:	482f      	ldr	r0, [pc, #188]	; (80026b8 <letter+0x1788>)
 80025fc:	f003 fe61 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002600:	2200      	movs	r2, #0
 8002602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002606:	482c      	ldr	r0, [pc, #176]	; (80026b8 <letter+0x1788>)
 8002608:	f003 fe5b 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800260c:	2200      	movs	r2, #0
 800260e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002612:	4829      	ldr	r0, [pc, #164]	; (80026b8 <letter+0x1788>)
 8002614:	f003 fe55 	bl	80062c2 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261e:	4824      	ldr	r0, [pc, #144]	; (80026b0 <letter+0x1780>)
 8002620:	f003 fe4f 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8002624:	2002      	movs	r0, #2
 8002626:	f002 ff9d 	bl	8005564 <HAL_Delay>
	}
	if(L =='9')
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	2b39      	cmp	r3, #57	; 0x39
 800262e:	d13b      	bne.n	80026a8 <letter+0x1778>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002630:	2201      	movs	r2, #1
 8002632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002636:	481e      	ldr	r0, [pc, #120]	; (80026b0 <letter+0x1780>)
 8002638:	f003 fe43 	bl	80062c2 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 800263c:	2201      	movs	r2, #1
 800263e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002642:	481c      	ldr	r0, [pc, #112]	; (80026b4 <letter+0x1784>)
 8002644:	f003 fe3d 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002648:	2200      	movs	r2, #0
 800264a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264e:	4819      	ldr	r0, [pc, #100]	; (80026b4 <letter+0x1784>)
 8002650:	f003 fe37 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002654:	2200      	movs	r2, #0
 8002656:	2140      	movs	r1, #64	; 0x40
 8002658:	4816      	ldr	r0, [pc, #88]	; (80026b4 <letter+0x1784>)
 800265a:	f003 fe32 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800265e:	2201      	movs	r2, #1
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	4814      	ldr	r0, [pc, #80]	; (80026b4 <letter+0x1784>)
 8002664:	f003 fe2d 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8002668:	2201      	movs	r2, #1
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	4812      	ldr	r0, [pc, #72]	; (80026b8 <letter+0x1788>)
 800266e:	f003 fe28 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002672:	2201      	movs	r2, #1
 8002674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002678:	480f      	ldr	r0, [pc, #60]	; (80026b8 <letter+0x1788>)
 800267a:	f003 fe22 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800267e:	2200      	movs	r2, #0
 8002680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002684:	480c      	ldr	r0, [pc, #48]	; (80026b8 <letter+0x1788>)
 8002686:	f003 fe1c 	bl	80062c2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800268a:	2200      	movs	r2, #0
 800268c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002690:	4809      	ldr	r0, [pc, #36]	; (80026b8 <letter+0x1788>)
 8002692:	f003 fe16 	bl	80062c2 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002696:	2200      	movs	r2, #0
 8002698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <letter+0x1780>)
 800269e:	f003 fe10 	bl	80062c2 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80026a2:	2002      	movs	r0, #2
 80026a4:	f002 ff5e 	bl	8005564 <HAL_Delay>
	}

}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40010c00 	.word	0x40010c00
 80026b4:	40011000 	.word	0x40011000
 80026b8:	40010800 	.word	0x40010800

080026bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026c0:	f002 ff1e 	bl	8005500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026c4:	f000 f8ae 	bl	8002824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026c8:	f000 fa30 	bl	8002b2c <MX_GPIO_Init>
  MX_TIM2_Init();
 80026cc:	f000 f98e 	bl	80029ec <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80026d0:	f000 fa02 	bl	8002ad8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80026d4:	f000 f9d6 	bl	8002a84 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80026d8:	f000 f8fa 	bl	80028d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80026dc:	f000 f936 	bl	800294c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80026e0:	f005 faae 	bl	8007c40 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 80026e4:	4a31      	ldr	r2, [pc, #196]	; (80027ac <main+0xf0>)
 80026e6:	2102      	movs	r1, #2
 80026e8:	2008      	movs	r0, #8
 80026ea:	f005 fbe7 	bl	8007ebc <osMessageQueueNew>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <main+0xf4>)
 80026f2:	6013      	str	r3, [r2, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 80026f4:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <main+0xf8>)
 80026f6:	2102      	movs	r1, #2
 80026f8:	2008      	movs	r0, #8
 80026fa:	f005 fbdf 	bl	8007ebc <osMessageQueueNew>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <main+0xfc>)
 8002702:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8002704:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <main+0x100>)
 8002706:	2102      	movs	r1, #2
 8002708:	2008      	movs	r0, #8
 800270a:	f005 fbd7 	bl	8007ebc <osMessageQueueNew>
 800270e:	4603      	mov	r3, r0
 8002710:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <main+0x104>)
 8002712:	6013      	str	r3, [r2, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8002714:	4a2b      	ldr	r2, [pc, #172]	; (80027c4 <main+0x108>)
 8002716:	2102      	movs	r1, #2
 8002718:	2008      	movs	r0, #8
 800271a:	f005 fbcf 	bl	8007ebc <osMessageQueueNew>
 800271e:	4603      	mov	r3, r0
 8002720:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <main+0x10c>)
 8002722:	6013      	str	r3, [r2, #0]

  /* creation of WebsiteQueue */
  WebsiteQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WebsiteQueue_attributes);
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <main+0x110>)
 8002726:	2102      	movs	r1, #2
 8002728:	2008      	movs	r0, #8
 800272a:	f005 fbc7 	bl	8007ebc <osMessageQueueNew>
 800272e:	4603      	mov	r3, r0
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <main+0x114>)
 8002732:	6013      	str	r3, [r2, #0]

  /* creation of ProcessQueue */
  ProcessQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &ProcessQueue_attributes);
 8002734:	4a27      	ldr	r2, [pc, #156]	; (80027d4 <main+0x118>)
 8002736:	2102      	movs	r1, #2
 8002738:	2008      	movs	r0, #8
 800273a:	f005 fbbf 	bl	8007ebc <osMessageQueueNew>
 800273e:	4603      	mov	r3, r0
 8002740:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <main+0x11c>)
 8002742:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 8002744:	4a25      	ldr	r2, [pc, #148]	; (80027dc <main+0x120>)
 8002746:	2100      	movs	r1, #0
 8002748:	4825      	ldr	r0, [pc, #148]	; (80027e0 <main+0x124>)
 800274a:	f005 fadf 	bl	8007d0c <osThreadNew>
 800274e:	4603      	mov	r3, r0
 8002750:	4a24      	ldr	r2, [pc, #144]	; (80027e4 <main+0x128>)
 8002752:	6013      	str	r3, [r2, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <main+0x12c>)
 8002756:	2100      	movs	r1, #0
 8002758:	4824      	ldr	r0, [pc, #144]	; (80027ec <main+0x130>)
 800275a:	f005 fad7 	bl	8007d0c <osThreadNew>
 800275e:	4603      	mov	r3, r0
 8002760:	4a23      	ldr	r2, [pc, #140]	; (80027f0 <main+0x134>)
 8002762:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 8002764:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <main+0x138>)
 8002766:	2100      	movs	r1, #0
 8002768:	4823      	ldr	r0, [pc, #140]	; (80027f8 <main+0x13c>)
 800276a:	f005 facf 	bl	8007d0c <osThreadNew>
 800276e:	4603      	mov	r3, r0
 8002770:	4a22      	ldr	r2, [pc, #136]	; (80027fc <main+0x140>)
 8002772:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 8002774:	4a22      	ldr	r2, [pc, #136]	; (8002800 <main+0x144>)
 8002776:	2100      	movs	r1, #0
 8002778:	4822      	ldr	r0, [pc, #136]	; (8002804 <main+0x148>)
 800277a:	f005 fac7 	bl	8007d0c <osThreadNew>
 800277e:	4603      	mov	r3, r0
 8002780:	4a21      	ldr	r2, [pc, #132]	; (8002808 <main+0x14c>)
 8002782:	6013      	str	r3, [r2, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 8002784:	4a21      	ldr	r2, [pc, #132]	; (800280c <main+0x150>)
 8002786:	2100      	movs	r1, #0
 8002788:	4821      	ldr	r0, [pc, #132]	; (8002810 <main+0x154>)
 800278a:	f005 fabf 	bl	8007d0c <osThreadNew>
 800278e:	4603      	mov	r3, r0
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <main+0x158>)
 8002792:	6013      	str	r3, [r2, #0]

  /* creation of WebsiteTask */
  WebsiteTaskHandle = osThreadNew(StartWebsiteTask, NULL, &WebsiteTask_attributes);
 8002794:	4a20      	ldr	r2, [pc, #128]	; (8002818 <main+0x15c>)
 8002796:	2100      	movs	r1, #0
 8002798:	4820      	ldr	r0, [pc, #128]	; (800281c <main+0x160>)
 800279a:	f005 fab7 	bl	8007d0c <osThreadNew>
 800279e:	4603      	mov	r3, r0
 80027a0:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <main+0x164>)
 80027a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80027a4:	f005 fa7e 	bl	8007ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 80027a8:	e7fe      	b.n	80027a8 <main+0xec>
 80027aa:	bf00      	nop
 80027ac:	0800ade4 	.word	0x0800ade4
 80027b0:	200025ec 	.word	0x200025ec
 80027b4:	0800adfc 	.word	0x0800adfc
 80027b8:	200028ec 	.word	0x200028ec
 80027bc:	0800ae14 	.word	0x0800ae14
 80027c0:	200025e8 	.word	0x200025e8
 80027c4:	0800ae2c 	.word	0x0800ae2c
 80027c8:	200025f4 	.word	0x200025f4
 80027cc:	0800ae44 	.word	0x0800ae44
 80027d0:	20002898 	.word	0x20002898
 80027d4:	0800ae5c 	.word	0x0800ae5c
 80027d8:	20002860 	.word	0x20002860
 80027dc:	0800ad0c 	.word	0x0800ad0c
 80027e0:	08003941 	.word	0x08003941
 80027e4:	200025f0 	.word	0x200025f0
 80027e8:	0800ad30 	.word	0x0800ad30
 80027ec:	08003ab9 	.word	0x08003ab9
 80027f0:	2000289c 	.word	0x2000289c
 80027f4:	0800ad54 	.word	0x0800ad54
 80027f8:	08003dd1 	.word	0x08003dd1
 80027fc:	20002938 	.word	0x20002938
 8002800:	0800ad78 	.word	0x0800ad78
 8002804:	08004235 	.word	0x08004235
 8002808:	20002894 	.word	0x20002894
 800280c:	0800ad9c 	.word	0x0800ad9c
 8002810:	08004425 	.word	0x08004425
 8002814:	200028e8 	.word	0x200028e8
 8002818:	0800adc0 	.word	0x0800adc0
 800281c:	080048b1 	.word	0x080048b1
 8002820:	2000285c 	.word	0x2000285c

08002824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b094      	sub	sp, #80	; 0x50
 8002828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800282e:	2228      	movs	r2, #40	; 0x28
 8002830:	2100      	movs	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f007 ffda 	bl	800a7ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002848:	1d3b      	adds	r3, r7, #4
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002854:	2302      	movs	r3, #2
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002858:	2301      	movs	r3, #1
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800285c:	2310      	movs	r3, #16
 800285e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002860:	2302      	movs	r3, #2
 8002862:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002864:	2300      	movs	r3, #0
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8002868:	2300      	movs	r3, #0
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800286c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002870:	4618      	mov	r0, r3
 8002872:	f003 fd61 	bl	8006338 <HAL_RCC_OscConfig>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800287c:	f002 f84e 	bl	800491c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002880:	230f      	movs	r3, #15
 8002882:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002884:	2302      	movs	r3, #2
 8002886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800288c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002890:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f003 ffcb 	bl	8006838 <HAL_RCC_ClockConfig>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <SystemClock_Config+0x88>
  {
    Error_Handler();
 80028a8:	f002 f838 	bl	800491c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028ac:	2302      	movs	r3, #2
 80028ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 f988 	bl	8006bcc <HAL_RCCEx_PeriphCLKConfig>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80028c2:	f002 f82b 	bl	800491c <Error_Handler>
  }
}
 80028c6:	bf00      	nop
 80028c8:	3750      	adds	r7, #80	; 0x50
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80028e0:	4b18      	ldr	r3, [pc, #96]	; (8002944 <MX_ADC1_Init+0x74>)
 80028e2:	4a19      	ldr	r2, [pc, #100]	; (8002948 <MX_ADC1_Init+0x78>)
 80028e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <MX_ADC1_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028ec:	4b15      	ldr	r3, [pc, #84]	; (8002944 <MX_ADC1_Init+0x74>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_ADC1_Init+0x74>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028f8:	4b12      	ldr	r3, [pc, #72]	; (8002944 <MX_ADC1_Init+0x74>)
 80028fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80028fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002900:	4b10      	ldr	r3, [pc, #64]	; (8002944 <MX_ADC1_Init+0x74>)
 8002902:	2200      	movs	r2, #0
 8002904:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <MX_ADC1_Init+0x74>)
 8002908:	2201      	movs	r2, #1
 800290a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800290c:	480d      	ldr	r0, [pc, #52]	; (8002944 <MX_ADC1_Init+0x74>)
 800290e:	f002 fe4d 	bl	80055ac <HAL_ADC_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002918:	f002 f800 	bl	800491c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800291c:	230f      	movs	r3, #15
 800291e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002920:	2301      	movs	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	4619      	mov	r1, r3
 800292c:	4805      	ldr	r0, [pc, #20]	; (8002944 <MX_ADC1_Init+0x74>)
 800292e:	f003 f8c9 	bl	8005ac4 <HAL_ADC_ConfigChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002938:	f001 fff0 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20002864 	.word	0x20002864
 8002948:	40012400 	.word	0x40012400

0800294c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]
 800295c:	609a      	str	r2, [r3, #8]
 800295e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002960:	463b      	mov	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002968:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <MX_TIM1_Init+0x98>)
 800296a:	4a1f      	ldr	r2, [pc, #124]	; (80029e8 <MX_TIM1_Init+0x9c>)
 800296c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <MX_TIM1_Init+0x98>)
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <MX_TIM1_Init+0x98>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <MX_TIM1_Init+0x98>)
 800297c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002980:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <MX_TIM1_Init+0x98>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <MX_TIM1_Init+0x98>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <MX_TIM1_Init+0x98>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002994:	4813      	ldr	r0, [pc, #76]	; (80029e4 <MX_TIM1_Init+0x98>)
 8002996:	f004 fa93 	bl	8006ec0 <HAL_TIM_Base_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80029a0:	f001 ffbc 	bl	800491c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	4619      	mov	r1, r3
 80029b0:	480c      	ldr	r0, [pc, #48]	; (80029e4 <MX_TIM1_Init+0x98>)
 80029b2:	f004 fc9f 	bl	80072f4 <HAL_TIM_ConfigClockSource>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80029bc:	f001 ffae 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029c0:	2300      	movs	r3, #0
 80029c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029c8:	463b      	mov	r3, r7
 80029ca:	4619      	mov	r1, r3
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_TIM1_Init+0x98>)
 80029ce:	f004 fe71 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80029d8:	f001 ffa0 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200028a0 	.word	0x200028a0
 80029e8:	40012c00 	.word	0x40012c00

080029ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a00:	463b      	mov	r3, r7
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a30:	4813      	ldr	r0, [pc, #76]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a32:	f004 fa45 	bl	8006ec0 <HAL_TIM_Base_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a3c:	f001 ff6e 	bl	800491c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	480c      	ldr	r0, [pc, #48]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a4e:	f004 fc51 	bl	80072f4 <HAL_TIM_ConfigClockSource>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a58:	f001 ff60 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a64:	463b      	mov	r3, r7
 8002a66:	4619      	mov	r1, r3
 8002a68:	4805      	ldr	r0, [pc, #20]	; (8002a80 <MX_TIM2_Init+0x94>)
 8002a6a:	f004 fe23 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a74:	f001 ff52 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a78:	bf00      	nop
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	200028f0 	.word	0x200028f0

08002a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <MX_USART1_UART_Init+0x50>)
 8002a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002a90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002aaa:	220c      	movs	r2, #12
 8002aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002aba:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_USART1_UART_Init+0x4c>)
 8002abc:	f004 fe6a 	bl	8007794 <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ac6:	f001 ff29 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20002568 	.word	0x20002568
 8002ad4:	40013800 	.word	0x40013800

08002ad8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <MX_USART3_UART_Init+0x50>)
 8002ae0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002ae2:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002ae4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ae8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002aea:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002afe:	220c      	movs	r2, #12
 8002b00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b02:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b08:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b0e:	4805      	ldr	r0, [pc, #20]	; (8002b24 <MX_USART3_UART_Init+0x4c>)
 8002b10:	f004 fe40 	bl	8007794 <HAL_UART_Init>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002b1a:	f001 feff 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20002528 	.word	0x20002528
 8002b28:	40004800 	.word	0x40004800

08002b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b32:	f107 0310 	add.w	r3, r7, #16
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
 8002b3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b40:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a64      	ldr	r2, [pc, #400]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b46:	f043 0310 	orr.w	r3, r3, #16
 8002b4a:	6193      	str	r3, [r2, #24]
 8002b4c:	4b62      	ldr	r3, [pc, #392]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b58:	4b5f      	ldr	r3, [pc, #380]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	4a5e      	ldr	r2, [pc, #376]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b5e:	f043 0320 	orr.w	r3, r3, #32
 8002b62:	6193      	str	r3, [r2, #24]
 8002b64:	4b5c      	ldr	r3, [pc, #368]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b8e:	f043 0308 	orr.w	r3, r3, #8
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <MX_GPIO_Init+0x1ac>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	603b      	str	r3, [r7, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 8002ba6:	484d      	ldr	r0, [pc, #308]	; (8002cdc <MX_GPIO_Init+0x1b0>)
 8002ba8:	f003 fb8b 	bl	80062c2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8002bac:	2200      	movs	r2, #0
 8002bae:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8002bb2:	484b      	ldr	r0, [pc, #300]	; (8002ce0 <MX_GPIO_Init+0x1b4>)
 8002bb4:	f003 fb85 	bl	80062c2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8002bbe:	4849      	ldr	r0, [pc, #292]	; (8002ce4 <MX_GPIO_Init+0x1b8>)
 8002bc0:	f003 fb7f 	bl	80062c2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2104      	movs	r1, #4
 8002bc8:	4847      	ldr	r0, [pc, #284]	; (8002ce8 <MX_GPIO_Init+0x1bc>)
 8002bca:	f003 fb7a 	bl	80062c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bd4:	4b45      	ldr	r3, [pc, #276]	; (8002cec <MX_GPIO_Init+0x1c0>)
 8002bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	f107 0310 	add.w	r3, r7, #16
 8002be0:	4619      	mov	r1, r3
 8002be2:	4840      	ldr	r0, [pc, #256]	; (8002ce4 <MX_GPIO_Init+0x1b8>)
 8002be4:	f003 f9d2 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002be8:	2307      	movs	r3, #7
 8002bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf4:	f107 0310 	add.w	r3, r7, #16
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	483a      	ldr	r0, [pc, #232]	; (8002ce4 <MX_GPIO_Init+0x1b8>)
 8002bfc:	f003 f9c6 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c00:	230c      	movs	r3, #12
 8002c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 0310 	add.w	r3, r7, #16
 8002c10:	4619      	mov	r1, r3
 8002c12:	4832      	ldr	r0, [pc, #200]	; (8002cdc <MX_GPIO_Init+0x1b0>)
 8002c14:	f003 f9ba 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002c18:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8002c1c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4619      	mov	r1, r3
 8002c30:	482a      	ldr	r0, [pc, #168]	; (8002cdc <MX_GPIO_Init+0x1b0>)
 8002c32:	f003 f9ab 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002c36:	2307      	movs	r3, #7
 8002c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	f107 0310 	add.w	r3, r7, #16
 8002c46:	4619      	mov	r1, r3
 8002c48:	4825      	ldr	r0, [pc, #148]	; (8002ce0 <MX_GPIO_Init+0x1b4>)
 8002c4a:	f003 f99f 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8002c4e:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8002c52:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c60:	f107 0310 	add.w	r3, r7, #16
 8002c64:	4619      	mov	r1, r3
 8002c66:	481e      	ldr	r0, [pc, #120]	; (8002ce0 <MX_GPIO_Init+0x1b4>)
 8002c68:	f003 f990 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002c6c:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8002c70:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	4619      	mov	r1, r3
 8002c84:	4817      	ldr	r0, [pc, #92]	; (8002ce4 <MX_GPIO_Init+0x1b8>)
 8002c86:	f003 f981 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c96:	2302      	movs	r3, #2
 8002c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c9a:	f107 0310 	add.w	r3, r7, #16
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4811      	ldr	r0, [pc, #68]	; (8002ce8 <MX_GPIO_Init+0x1bc>)
 8002ca2:	f003 f973 	bl	8005f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ca6:	2340      	movs	r3, #64	; 0x40
 8002ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb2:	f107 0310 	add.w	r3, r7, #16
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <MX_GPIO_Init+0x1b4>)
 8002cba:	f003 f967 	bl	8005f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2105      	movs	r1, #5
 8002cc2:	2028      	movs	r0, #40	; 0x28
 8002cc4:	f003 f937 	bl	8005f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cc8:	2028      	movs	r0, #40	; 0x28
 8002cca:	f003 f950 	bl	8005f6e <HAL_NVIC_EnableIRQ>

}
 8002cce:	bf00      	nop
 8002cd0:	3720      	adds	r7, #32
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40010800 	.word	0x40010800
 8002ce0:	40010c00 	.word	0x40010c00
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40011400 	.word	0x40011400
 8002cec:	10110000 	.word	0x10110000

08002cf0 <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)// Send configuration data to my LCD
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8002cf4:	2014      	movs	r0, #20
 8002cf6:	f002 fc35 	bl	8005564 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d00:	4868      	ldr	r0, [pc, #416]	; (8002ea4 <commandToLCD+0x1b4>)
 8002d02:	f003 fade 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002d06:	2200      	movs	r2, #0
 8002d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d0c:	4865      	ldr	r0, [pc, #404]	; (8002ea4 <commandToLCD+0x1b4>)
 8002d0e:	f003 fad8 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002d12:	2201      	movs	r2, #1
 8002d14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d18:	4862      	ldr	r0, [pc, #392]	; (8002ea4 <commandToLCD+0x1b4>)
 8002d1a:	f003 fad2 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d24:	4860      	ldr	r0, [pc, #384]	; (8002ea8 <commandToLCD+0x1b8>)
 8002d26:	f003 facc 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d30:	485d      	ldr	r0, [pc, #372]	; (8002ea8 <commandToLCD+0x1b8>)
 8002d32:	f003 fac6 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8002d36:	2200      	movs	r2, #0
 8002d38:	2140      	movs	r1, #64	; 0x40
 8002d3a:	485b      	ldr	r0, [pc, #364]	; (8002ea8 <commandToLCD+0x1b8>)
 8002d3c:	f003 fac1 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8002d40:	2201      	movs	r2, #1
 8002d42:	2180      	movs	r1, #128	; 0x80
 8002d44:	4858      	ldr	r0, [pc, #352]	; (8002ea8 <commandToLCD+0x1b8>)
 8002d46:	f003 fabc 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	4857      	ldr	r0, [pc, #348]	; (8002eac <commandToLCD+0x1bc>)
 8002d50:	f003 fab7 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002d54:	2201      	movs	r2, #1
 8002d56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d5a:	4854      	ldr	r0, [pc, #336]	; (8002eac <commandToLCD+0x1bc>)
 8002d5c:	f003 fab1 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002d60:	2200      	movs	r2, #0
 8002d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d66:	4851      	ldr	r0, [pc, #324]	; (8002eac <commandToLCD+0x1bc>)
 8002d68:	f003 faab 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d72:	484e      	ldr	r0, [pc, #312]	; (8002eac <commandToLCD+0x1bc>)
 8002d74:	f003 faa5 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d7e:	4849      	ldr	r0, [pc, #292]	; (8002ea4 <commandToLCD+0x1b4>)
 8002d80:	f003 fa9f 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002d84:	2005      	movs	r0, #5
 8002d86:	f002 fbed 	bl	8005564 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d90:	4844      	ldr	r0, [pc, #272]	; (8002ea4 <commandToLCD+0x1b4>)
 8002d92:	f003 fa96 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8002d96:	2201      	movs	r2, #1
 8002d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d9c:	4842      	ldr	r0, [pc, #264]	; (8002ea8 <commandToLCD+0x1b8>)
 8002d9e:	f003 fa90 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8002da2:	2201      	movs	r2, #1
 8002da4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002da8:	483f      	ldr	r0, [pc, #252]	; (8002ea8 <commandToLCD+0x1b8>)
 8002daa:	f003 fa8a 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8002dae:	2201      	movs	r2, #1
 8002db0:	2140      	movs	r1, #64	; 0x40
 8002db2:	483d      	ldr	r0, [pc, #244]	; (8002ea8 <commandToLCD+0x1b8>)
 8002db4:	f003 fa85 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8002db8:	2201      	movs	r2, #1
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	483a      	ldr	r0, [pc, #232]	; (8002ea8 <commandToLCD+0x1b8>)
 8002dbe:	f003 fa80 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	4839      	ldr	r0, [pc, #228]	; (8002eac <commandToLCD+0x1bc>)
 8002dc8:	f003 fa7b 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dd2:	4836      	ldr	r0, [pc, #216]	; (8002eac <commandToLCD+0x1bc>)
 8002dd4:	f003 fa75 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dde:	4833      	ldr	r0, [pc, #204]	; (8002eac <commandToLCD+0x1bc>)
 8002de0:	f003 fa6f 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002de4:	2200      	movs	r2, #0
 8002de6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002dea:	4830      	ldr	r0, [pc, #192]	; (8002eac <commandToLCD+0x1bc>)
 8002dec:	f003 fa69 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002df0:	2200      	movs	r2, #0
 8002df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df6:	482b      	ldr	r0, [pc, #172]	; (8002ea4 <commandToLCD+0x1b4>)
 8002df8:	f003 fa63 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002dfc:	2005      	movs	r0, #5
 8002dfe:	f002 fbb1 	bl	8005564 <HAL_Delay>


	clear();
 8002e02:	f000 f927 	bl	8003054 <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002e06:	2201      	movs	r2, #1
 8002e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e0c:	4825      	ldr	r0, [pc, #148]	; (8002ea4 <commandToLCD+0x1b4>)
 8002e0e:	f003 fa58 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 8002e12:	2200      	movs	r2, #0
 8002e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e18:	4823      	ldr	r0, [pc, #140]	; (8002ea8 <commandToLCD+0x1b8>)
 8002e1a:	f003 fa52 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e24:	4820      	ldr	r0, [pc, #128]	; (8002ea8 <commandToLCD+0x1b8>)
 8002e26:	f003 fa4c 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2140      	movs	r1, #64	; 0x40
 8002e2e:	481e      	ldr	r0, [pc, #120]	; (8002ea8 <commandToLCD+0x1b8>)
 8002e30:	f003 fa47 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002e34:	2200      	movs	r2, #0
 8002e36:	2180      	movs	r1, #128	; 0x80
 8002e38:	481b      	ldr	r0, [pc, #108]	; (8002ea8 <commandToLCD+0x1b8>)
 8002e3a:	f003 fa42 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	481a      	ldr	r0, [pc, #104]	; (8002eac <commandToLCD+0x1bc>)
 8002e44:	f003 fa3d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e4e:	4817      	ldr	r0, [pc, #92]	; (8002eac <commandToLCD+0x1bc>)
 8002e50:	f003 fa37 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002e54:	2200      	movs	r2, #0
 8002e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e5a:	4814      	ldr	r0, [pc, #80]	; (8002eac <commandToLCD+0x1bc>)
 8002e5c:	f003 fa31 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002e60:	2200      	movs	r2, #0
 8002e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e66:	4811      	ldr	r0, [pc, #68]	; (8002eac <commandToLCD+0x1bc>)
 8002e68:	f003 fa2b 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e72:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <commandToLCD+0x1b4>)
 8002e74:	f003 fa25 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002e78:	2005      	movs	r0, #5
 8002e7a:	f002 fb73 	bl	8005564 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e84:	4807      	ldr	r0, [pc, #28]	; (8002ea4 <commandToLCD+0x1b4>)
 8002e86:	f003 fa1c 	bl	80062c2 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 8002e8a:	bf00      	nop
 8002e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e90:	4806      	ldr	r0, [pc, #24]	; (8002eac <commandToLCD+0x1bc>)
 8002e92:	f003 f9ff 	bl	8006294 <HAL_GPIO_ReadPin>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d0f7      	beq.n	8002e8c <commandToLCD+0x19c>
	{}
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40010c00 	.word	0x40010c00
 8002ea8:	40011000 	.word	0x40011000
 8002eac:	40010800 	.word	0x40010800

08002eb0 <printPassword>:
void printPassword(void)// print out "Password:" on LCD
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eba:	4813      	ldr	r0, [pc, #76]	; (8002f08 <printPassword+0x58>)
 8002ebc:	f003 fa01 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ec6:	4810      	ldr	r0, [pc, #64]	; (8002f08 <printPassword+0x58>)
 8002ec8:	f003 f9fb 	bl	80062c2 <HAL_GPIO_WritePin>
	letter('P');
 8002ecc:	2050      	movs	r0, #80	; 0x50
 8002ece:	f7fe f82f 	bl	8000f30 <letter>
	letter('a');
 8002ed2:	2061      	movs	r0, #97	; 0x61
 8002ed4:	f7fe f82c 	bl	8000f30 <letter>
	letter('s');
 8002ed8:	2073      	movs	r0, #115	; 0x73
 8002eda:	f7fe f829 	bl	8000f30 <letter>
	letter('s');
 8002ede:	2073      	movs	r0, #115	; 0x73
 8002ee0:	f7fe f826 	bl	8000f30 <letter>
	letter('w');
 8002ee4:	2077      	movs	r0, #119	; 0x77
 8002ee6:	f7fe f823 	bl	8000f30 <letter>
	letter('o');
 8002eea:	206f      	movs	r0, #111	; 0x6f
 8002eec:	f7fe f820 	bl	8000f30 <letter>
	letter('r');
 8002ef0:	2072      	movs	r0, #114	; 0x72
 8002ef2:	f7fe f81d 	bl	8000f30 <letter>
	letter('d');
 8002ef6:	2064      	movs	r0, #100	; 0x64
 8002ef8:	f7fe f81a 	bl	8000f30 <letter>
	letter(':');
 8002efc:	203a      	movs	r0, #58	; 0x3a
 8002efe:	f7fe f817 	bl	8000f30 <letter>
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40010c00 	.word	0x40010c00

08002f0c <line1>:
void line1(void)// set cursor to line 1 on LCD
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002f10:	2200      	movs	r2, #0
 8002f12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f16:	4823      	ldr	r0, [pc, #140]	; (8002fa4 <line1+0x98>)
 8002f18:	f003 f9d3 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f22:	4820      	ldr	r0, [pc, #128]	; (8002fa4 <line1+0x98>)
 8002f24:	f003 f9cd 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f2e:	481d      	ldr	r0, [pc, #116]	; (8002fa4 <line1+0x98>)
 8002f30:	f003 f9c7 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 8002f34:	2200      	movs	r2, #0
 8002f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f3a:	481b      	ldr	r0, [pc, #108]	; (8002fa8 <line1+0x9c>)
 8002f3c:	f003 f9c1 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002f40:	2200      	movs	r2, #0
 8002f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f46:	4818      	ldr	r0, [pc, #96]	; (8002fa8 <line1+0x9c>)
 8002f48:	f003 f9bb 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2140      	movs	r1, #64	; 0x40
 8002f50:	4815      	ldr	r0, [pc, #84]	; (8002fa8 <line1+0x9c>)
 8002f52:	f003 f9b6 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002f56:	2200      	movs	r2, #0
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	4813      	ldr	r0, [pc, #76]	; (8002fa8 <line1+0x9c>)
 8002f5c:	f003 f9b1 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002f60:	2200      	movs	r2, #0
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	4811      	ldr	r0, [pc, #68]	; (8002fac <line1+0xa0>)
 8002f66:	f003 f9ac 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f70:	480e      	ldr	r0, [pc, #56]	; (8002fac <line1+0xa0>)
 8002f72:	f003 f9a6 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002f76:	2200      	movs	r2, #0
 8002f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f7c:	480b      	ldr	r0, [pc, #44]	; (8002fac <line1+0xa0>)
 8002f7e:	f003 f9a0 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 8002f82:	2201      	movs	r2, #1
 8002f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f88:	4808      	ldr	r0, [pc, #32]	; (8002fac <line1+0xa0>)
 8002f8a:	f003 f99a 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f94:	4803      	ldr	r0, [pc, #12]	; (8002fa4 <line1+0x98>)
 8002f96:	f003 f994 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002f9a:	2005      	movs	r0, #5
 8002f9c:	f002 fae2 	bl	8005564 <HAL_Delay>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40010c00 	.word	0x40010c00
 8002fa8:	40011000 	.word	0x40011000
 8002fac:	40010800 	.word	0x40010800

08002fb0 <line2>:
void line2(void)// set cursor to line 2 on LCD
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fba:	4823      	ldr	r0, [pc, #140]	; (8003048 <line2+0x98>)
 8002fbc:	f003 f981 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fc6:	4820      	ldr	r0, [pc, #128]	; (8003048 <line2+0x98>)
 8002fc8:	f003 f97b 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fd2:	481d      	ldr	r0, [pc, #116]	; (8003048 <line2+0x98>)
 8002fd4:	f003 f975 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fde:	481b      	ldr	r0, [pc, #108]	; (800304c <line2+0x9c>)
 8002fe0:	f003 f96f 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fea:	4818      	ldr	r0, [pc, #96]	; (800304c <line2+0x9c>)
 8002fec:	f003 f969 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2140      	movs	r1, #64	; 0x40
 8002ff4:	4815      	ldr	r0, [pc, #84]	; (800304c <line2+0x9c>)
 8002ff6:	f003 f964 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2180      	movs	r1, #128	; 0x80
 8002ffe:	4813      	ldr	r0, [pc, #76]	; (800304c <line2+0x9c>)
 8003000:	f003 f95f 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8003004:	2200      	movs	r2, #0
 8003006:	2180      	movs	r1, #128	; 0x80
 8003008:	4811      	ldr	r0, [pc, #68]	; (8003050 <line2+0xa0>)
 800300a:	f003 f95a 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800300e:	2200      	movs	r2, #0
 8003010:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003014:	480e      	ldr	r0, [pc, #56]	; (8003050 <line2+0xa0>)
 8003016:	f003 f954 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800301a:	2201      	movs	r2, #1
 800301c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003020:	480b      	ldr	r0, [pc, #44]	; (8003050 <line2+0xa0>)
 8003022:	f003 f94e 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 8003026:	2201      	movs	r2, #1
 8003028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800302c:	4808      	ldr	r0, [pc, #32]	; (8003050 <line2+0xa0>)
 800302e:	f003 f948 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8003032:	2200      	movs	r2, #0
 8003034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003038:	4803      	ldr	r0, [pc, #12]	; (8003048 <line2+0x98>)
 800303a:	f003 f942 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800303e:	2005      	movs	r0, #5
 8003040:	f002 fa90 	bl	8005564 <HAL_Delay>
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40010c00 	.word	0x40010c00
 800304c:	40011000 	.word	0x40011000
 8003050:	40010800 	.word	0x40010800

08003054 <clear>:
void clear()// clear LCD screen
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8003058:	2200      	movs	r2, #0
 800305a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305e:	4823      	ldr	r0, [pc, #140]	; (80030ec <clear+0x98>)
 8003060:	f003 f92f 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003064:	2200      	movs	r2, #0
 8003066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800306a:	4820      	ldr	r0, [pc, #128]	; (80030ec <clear+0x98>)
 800306c:	f003 f929 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8003070:	2201      	movs	r2, #1
 8003072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003076:	481d      	ldr	r0, [pc, #116]	; (80030ec <clear+0x98>)
 8003078:	f003 f923 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 800307c:	2201      	movs	r2, #1
 800307e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003082:	481b      	ldr	r0, [pc, #108]	; (80030f0 <clear+0x9c>)
 8003084:	f003 f91d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8003088:	2200      	movs	r2, #0
 800308a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800308e:	4818      	ldr	r0, [pc, #96]	; (80030f0 <clear+0x9c>)
 8003090:	f003 f917 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8003094:	2200      	movs	r2, #0
 8003096:	2140      	movs	r1, #64	; 0x40
 8003098:	4815      	ldr	r0, [pc, #84]	; (80030f0 <clear+0x9c>)
 800309a:	f003 f912 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800309e:	2200      	movs	r2, #0
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	4813      	ldr	r0, [pc, #76]	; (80030f0 <clear+0x9c>)
 80030a4:	f003 f90d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80030a8:	2200      	movs	r2, #0
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	4811      	ldr	r0, [pc, #68]	; (80030f4 <clear+0xa0>)
 80030ae:	f003 f908 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80030b2:	2200      	movs	r2, #0
 80030b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030b8:	480e      	ldr	r0, [pc, #56]	; (80030f4 <clear+0xa0>)
 80030ba:	f003 f902 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80030be:	2200      	movs	r2, #0
 80030c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <clear+0xa0>)
 80030c6:	f003 f8fc 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80030ca:	2200      	movs	r2, #0
 80030cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030d0:	4808      	ldr	r0, [pc, #32]	; (80030f4 <clear+0xa0>)
 80030d2:	f003 f8f6 	bl	80062c2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80030d6:	2200      	movs	r2, #0
 80030d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030dc:	4803      	ldr	r0, [pc, #12]	; (80030ec <clear+0x98>)
 80030de:	f003 f8f0 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80030e2:	2005      	movs	r0, #5
 80030e4:	f002 fa3e 	bl	8005564 <HAL_Delay>
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40010c00 	.word	0x40010c00
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40010800 	.word	0x40010800

080030f8 <correct>:
void correct()// print out "Correct!"
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80030fc:	2201      	movs	r2, #1
 80030fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003102:	4811      	ldr	r0, [pc, #68]	; (8003148 <correct+0x50>)
 8003104:	f003 f8dd 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800310e:	480e      	ldr	r0, [pc, #56]	; (8003148 <correct+0x50>)
 8003110:	f003 f8d7 	bl	80062c2 <HAL_GPIO_WritePin>
	letter('C');
 8003114:	2043      	movs	r0, #67	; 0x43
 8003116:	f7fd ff0b 	bl	8000f30 <letter>
	letter('o');
 800311a:	206f      	movs	r0, #111	; 0x6f
 800311c:	f7fd ff08 	bl	8000f30 <letter>
	letter('r');
 8003120:	2072      	movs	r0, #114	; 0x72
 8003122:	f7fd ff05 	bl	8000f30 <letter>
	letter('r');
 8003126:	2072      	movs	r0, #114	; 0x72
 8003128:	f7fd ff02 	bl	8000f30 <letter>
	letter('e');
 800312c:	2065      	movs	r0, #101	; 0x65
 800312e:	f7fd feff 	bl	8000f30 <letter>
	letter('c');
 8003132:	2063      	movs	r0, #99	; 0x63
 8003134:	f7fd fefc 	bl	8000f30 <letter>
	letter('t');
 8003138:	2074      	movs	r0, #116	; 0x74
 800313a:	f7fd fef9 	bl	8000f30 <letter>
	letter('!');
 800313e:	2021      	movs	r0, #33	; 0x21
 8003140:	f7fd fef6 	bl	8000f30 <letter>
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40010c00 	.word	0x40010c00

0800314c <getVal>:
int getVal(void)// get input value from keypad
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
	int count = 0;
 8003152:	2300      	movs	r3, #0
 8003154:	607b      	str	r3, [r7, #4]
	int val=0;
 8003156:	2300      	movs	r3, #0
 8003158:	603b      	str	r3, [r7, #0]
	while(count<1)//while we don't have a value count is below 1
 800315a:	e165      	b.n	8003428 <getVal+0x2dc>
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 800315c:	2201      	movs	r2, #1
 800315e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003162:	48b6      	ldr	r0, [pc, #728]	; (800343c <getVal+0x2f0>)
 8003164:	f003 f8ad 	bl	80062c2 <HAL_GPIO_WritePin>
	  	  	  	  	  	  	  	  	  	  	  	  	  //check for top row values 1,2,3
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8003168:	2104      	movs	r1, #4
 800316a:	48b5      	ldr	r0, [pc, #724]	; (8003440 <getVal+0x2f4>)
 800316c:	f003 f892 	bl	8006294 <HAL_GPIO_ReadPin>
 8003170:	4603      	mov	r3, r0
 8003172:	2b01      	cmp	r3, #1
 8003174:	d112      	bne.n	800319c <getVal+0x50>
	  {
		  letter('1');
 8003176:	2031      	movs	r0, #49	; 0x31
 8003178:	f7fd feda 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800317c:	bf00      	nop
 800317e:	2104      	movs	r1, #4
 8003180:	48af      	ldr	r0, [pc, #700]	; (8003440 <getVal+0x2f4>)
 8003182:	f003 f887 	bl	8006294 <HAL_GPIO_ReadPin>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d0f8      	beq.n	800317e <getVal+0x32>
		  {}
		  HAL_Delay(100);
 800318c:	2064      	movs	r0, #100	; 0x64
 800318e:	f002 f9e9 	bl	8005564 <HAL_Delay>
		  val = 1;
 8003192:	2301      	movs	r3, #1
 8003194:	603b      	str	r3, [r7, #0]
		  count++;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3301      	adds	r3, #1
 800319a:	607b      	str	r3, [r7, #4]
	  }
	  	  	  	  	  //check for top row values 1,2,3
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800319c:	2102      	movs	r1, #2
 800319e:	48a8      	ldr	r0, [pc, #672]	; (8003440 <getVal+0x2f4>)
 80031a0:	f003 f878 	bl	8006294 <HAL_GPIO_ReadPin>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d112      	bne.n	80031d0 <getVal+0x84>
	  {
		  letter('2');
 80031aa:	2032      	movs	r0, #50	; 0x32
 80031ac:	f7fd fec0 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80031b0:	bf00      	nop
 80031b2:	2102      	movs	r1, #2
 80031b4:	48a2      	ldr	r0, [pc, #648]	; (8003440 <getVal+0x2f4>)
 80031b6:	f003 f86d 	bl	8006294 <HAL_GPIO_ReadPin>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d0f8      	beq.n	80031b2 <getVal+0x66>
		  {}
		  HAL_Delay(100);
 80031c0:	2064      	movs	r0, #100	; 0x64
 80031c2:	f002 f9cf 	bl	8005564 <HAL_Delay>
		  val = 2;
 80031c6:	2302      	movs	r3, #2
 80031c8:	603b      	str	r3, [r7, #0]
		  count++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3301      	adds	r3, #1
 80031ce:	607b      	str	r3, [r7, #4]
	  }
	  	  	  	  	  //check for top row values 1,2,3
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80031d0:	2101      	movs	r1, #1
 80031d2:	489b      	ldr	r0, [pc, #620]	; (8003440 <getVal+0x2f4>)
 80031d4:	f003 f85e 	bl	8006294 <HAL_GPIO_ReadPin>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d112      	bne.n	8003204 <getVal+0xb8>
	  {
		  letter('3');
 80031de:	2033      	movs	r0, #51	; 0x33
 80031e0:	f7fd fea6 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80031e4:	bf00      	nop
 80031e6:	2101      	movs	r1, #1
 80031e8:	4895      	ldr	r0, [pc, #596]	; (8003440 <getVal+0x2f4>)
 80031ea:	f003 f853 	bl	8006294 <HAL_GPIO_ReadPin>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d0f8      	beq.n	80031e6 <getVal+0x9a>
		  {}
		  HAL_Delay(100);
 80031f4:	2064      	movs	r0, #100	; 0x64
 80031f6:	f002 f9b5 	bl	8005564 <HAL_Delay>
		  val = 3;
 80031fa:	2303      	movs	r3, #3
 80031fc:	603b      	str	r3, [r7, #0]
		  count++;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3301      	adds	r3, #1
 8003202:	607b      	str	r3, [r7, #4]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8003204:	2200      	movs	r2, #0
 8003206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800320a:	488c      	ldr	r0, [pc, #560]	; (800343c <getVal+0x2f0>)
 800320c:	f003 f859 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 8003210:	2201      	movs	r2, #1
 8003212:	2104      	movs	r1, #4
 8003214:	488b      	ldr	r0, [pc, #556]	; (8003444 <getVal+0x2f8>)
 8003216:	f003 f854 	bl	80062c2 <HAL_GPIO_WritePin>

	  	  	  	  	  //check for second row values 4,5,6
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 800321a:	2104      	movs	r1, #4
 800321c:	4888      	ldr	r0, [pc, #544]	; (8003440 <getVal+0x2f4>)
 800321e:	f003 f839 	bl	8006294 <HAL_GPIO_ReadPin>
 8003222:	4603      	mov	r3, r0
 8003224:	2b01      	cmp	r3, #1
 8003226:	d112      	bne.n	800324e <getVal+0x102>
	  {
		  letter('4');
 8003228:	2034      	movs	r0, #52	; 0x34
 800322a:	f7fd fe81 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800322e:	bf00      	nop
 8003230:	2104      	movs	r1, #4
 8003232:	4883      	ldr	r0, [pc, #524]	; (8003440 <getVal+0x2f4>)
 8003234:	f003 f82e 	bl	8006294 <HAL_GPIO_ReadPin>
 8003238:	4603      	mov	r3, r0
 800323a:	2b01      	cmp	r3, #1
 800323c:	d0f8      	beq.n	8003230 <getVal+0xe4>
		  {}
		  HAL_Delay(100);
 800323e:	2064      	movs	r0, #100	; 0x64
 8003240:	f002 f990 	bl	8005564 <HAL_Delay>
		  val = 4;
 8003244:	2304      	movs	r3, #4
 8003246:	603b      	str	r3, [r7, #0]
		  count++;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3301      	adds	r3, #1
 800324c:	607b      	str	r3, [r7, #4]
	  }
	  	  	  	  	  //check for second row values 4,5,6
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800324e:	2102      	movs	r1, #2
 8003250:	487b      	ldr	r0, [pc, #492]	; (8003440 <getVal+0x2f4>)
 8003252:	f003 f81f 	bl	8006294 <HAL_GPIO_ReadPin>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d112      	bne.n	8003282 <getVal+0x136>
	  {
		  letter('5');
 800325c:	2035      	movs	r0, #53	; 0x35
 800325e:	f7fd fe67 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8003262:	bf00      	nop
 8003264:	2102      	movs	r1, #2
 8003266:	4876      	ldr	r0, [pc, #472]	; (8003440 <getVal+0x2f4>)
 8003268:	f003 f814 	bl	8006294 <HAL_GPIO_ReadPin>
 800326c:	4603      	mov	r3, r0
 800326e:	2b01      	cmp	r3, #1
 8003270:	d0f8      	beq.n	8003264 <getVal+0x118>
		  {}
		  HAL_Delay(100);
 8003272:	2064      	movs	r0, #100	; 0x64
 8003274:	f002 f976 	bl	8005564 <HAL_Delay>
		  val = 5;
 8003278:	2305      	movs	r3, #5
 800327a:	603b      	str	r3, [r7, #0]
		  count++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3301      	adds	r3, #1
 8003280:	607b      	str	r3, [r7, #4]
	  }
	  	  	  	  	  //check for second row values 4,5,6
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8003282:	2101      	movs	r1, #1
 8003284:	486e      	ldr	r0, [pc, #440]	; (8003440 <getVal+0x2f4>)
 8003286:	f003 f805 	bl	8006294 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	d112      	bne.n	80032b6 <getVal+0x16a>
	  {
		  letter('6');
 8003290:	2036      	movs	r0, #54	; 0x36
 8003292:	f7fd fe4d 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8003296:	bf00      	nop
 8003298:	2101      	movs	r1, #1
 800329a:	4869      	ldr	r0, [pc, #420]	; (8003440 <getVal+0x2f4>)
 800329c:	f002 fffa 	bl	8006294 <HAL_GPIO_ReadPin>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d0f8      	beq.n	8003298 <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 80032a6:	2064      	movs	r0, #100	; 0x64
 80032a8:	f002 f95c 	bl	8005564 <HAL_Delay>
		  val = 6;
 80032ac:	2306      	movs	r3, #6
 80032ae:	603b      	str	r3, [r7, #0]
		  count++;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3301      	adds	r3, #1
 80032b4:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 80032b6:	2200      	movs	r2, #0
 80032b8:	2104      	movs	r1, #4
 80032ba:	4862      	ldr	r0, [pc, #392]	; (8003444 <getVal+0x2f8>)
 80032bc:	f003 f801 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 80032c0:	2201      	movs	r2, #1
 80032c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032c6:	485d      	ldr	r0, [pc, #372]	; (800343c <getVal+0x2f0>)
 80032c8:	f002 fffb 	bl	80062c2 <HAL_GPIO_WritePin>
  	  	  	  	  	  //check for third row values 7,8,9
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80032cc:	2104      	movs	r1, #4
 80032ce:	485c      	ldr	r0, [pc, #368]	; (8003440 <getVal+0x2f4>)
 80032d0:	f002 ffe0 	bl	8006294 <HAL_GPIO_ReadPin>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d112      	bne.n	8003300 <getVal+0x1b4>
	  {
		  letter('7');
 80032da:	2037      	movs	r0, #55	; 0x37
 80032dc:	f7fd fe28 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80032e0:	bf00      	nop
 80032e2:	2104      	movs	r1, #4
 80032e4:	4856      	ldr	r0, [pc, #344]	; (8003440 <getVal+0x2f4>)
 80032e6:	f002 ffd5 	bl	8006294 <HAL_GPIO_ReadPin>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d0f8      	beq.n	80032e2 <getVal+0x196>
		  {}
		  HAL_Delay(100);
 80032f0:	2064      	movs	r0, #100	; 0x64
 80032f2:	f002 f937 	bl	8005564 <HAL_Delay>
		  val = 7;
 80032f6:	2307      	movs	r3, #7
 80032f8:	603b      	str	r3, [r7, #0]
		  count++;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3301      	adds	r3, #1
 80032fe:	607b      	str	r3, [r7, #4]
	  }
	  	  	  	  	  //check for third row values 7,8,9
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8003300:	2102      	movs	r1, #2
 8003302:	484f      	ldr	r0, [pc, #316]	; (8003440 <getVal+0x2f4>)
 8003304:	f002 ffc6 	bl	8006294 <HAL_GPIO_ReadPin>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d112      	bne.n	8003334 <getVal+0x1e8>
	  {
		  letter('8');
 800330e:	2038      	movs	r0, #56	; 0x38
 8003310:	f7fd fe0e 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8003314:	bf00      	nop
 8003316:	2102      	movs	r1, #2
 8003318:	4849      	ldr	r0, [pc, #292]	; (8003440 <getVal+0x2f4>)
 800331a:	f002 ffbb 	bl	8006294 <HAL_GPIO_ReadPin>
 800331e:	4603      	mov	r3, r0
 8003320:	2b01      	cmp	r3, #1
 8003322:	d0f8      	beq.n	8003316 <getVal+0x1ca>
		  {}
		  HAL_Delay(100);
 8003324:	2064      	movs	r0, #100	; 0x64
 8003326:	f002 f91d 	bl	8005564 <HAL_Delay>
		  val = 8;
 800332a:	2308      	movs	r3, #8
 800332c:	603b      	str	r3, [r7, #0]
		  count++;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3301      	adds	r3, #1
 8003332:	607b      	str	r3, [r7, #4]
	  }
	  	  	  	  	  //check for third row values 7,8,9
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8003334:	2101      	movs	r1, #1
 8003336:	4842      	ldr	r0, [pc, #264]	; (8003440 <getVal+0x2f4>)
 8003338:	f002 ffac 	bl	8006294 <HAL_GPIO_ReadPin>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d112      	bne.n	8003368 <getVal+0x21c>
	  {
		  letter('9');
 8003342:	2039      	movs	r0, #57	; 0x39
 8003344:	f7fd fdf4 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8003348:	bf00      	nop
 800334a:	2101      	movs	r1, #1
 800334c:	483c      	ldr	r0, [pc, #240]	; (8003440 <getVal+0x2f4>)
 800334e:	f002 ffa1 	bl	8006294 <HAL_GPIO_ReadPin>
 8003352:	4603      	mov	r3, r0
 8003354:	2b01      	cmp	r3, #1
 8003356:	d0f8      	beq.n	800334a <getVal+0x1fe>
		  {}
		  HAL_Delay(100);
 8003358:	2064      	movs	r0, #100	; 0x64
 800335a:	f002 f903 	bl	8005564 <HAL_Delay>
		  val = 9;
 800335e:	2309      	movs	r3, #9
 8003360:	603b      	str	r3, [r7, #0]
		  count++;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3301      	adds	r3, #1
 8003366:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8003368:	2200      	movs	r2, #0
 800336a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800336e:	4833      	ldr	r0, [pc, #204]	; (800343c <getVal+0x2f0>)
 8003370:	f002 ffa7 	bl	80062c2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 8003374:	2201      	movs	r2, #1
 8003376:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800337a:	4830      	ldr	r0, [pc, #192]	; (800343c <getVal+0x2f0>)
 800337c:	f002 ffa1 	bl	80062c2 <HAL_GPIO_WritePin>
	  	  	  	  	  	  //check for fourth row values *,0,#
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8003380:	2104      	movs	r1, #4
 8003382:	482f      	ldr	r0, [pc, #188]	; (8003440 <getVal+0x2f4>)
 8003384:	f002 ff86 	bl	8006294 <HAL_GPIO_ReadPin>
 8003388:	4603      	mov	r3, r0
 800338a:	2b01      	cmp	r3, #1
 800338c:	d112      	bne.n	80033b4 <getVal+0x268>
	  {
		  letter('*');
 800338e:	202a      	movs	r0, #42	; 0x2a
 8003390:	f7fd fdce 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8003394:	bf00      	nop
 8003396:	2104      	movs	r1, #4
 8003398:	4829      	ldr	r0, [pc, #164]	; (8003440 <getVal+0x2f4>)
 800339a:	f002 ff7b 	bl	8006294 <HAL_GPIO_ReadPin>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d0f8      	beq.n	8003396 <getVal+0x24a>
		  {}
		  HAL_Delay(100);
 80033a4:	2064      	movs	r0, #100	; 0x64
 80033a6:	f002 f8dd 	bl	8005564 <HAL_Delay>
		  val = 10;
 80033aa:	230a      	movs	r3, #10
 80033ac:	603b      	str	r3, [r7, #0]
		  count++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3301      	adds	r3, #1
 80033b2:	607b      	str	r3, [r7, #4]
	  }
	  	  	  	  	  	  //check for fourth row values *,0,#
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80033b4:	2102      	movs	r1, #2
 80033b6:	4822      	ldr	r0, [pc, #136]	; (8003440 <getVal+0x2f4>)
 80033b8:	f002 ff6c 	bl	8006294 <HAL_GPIO_ReadPin>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d112      	bne.n	80033e8 <getVal+0x29c>
	  {
		  letter('0');
 80033c2:	2030      	movs	r0, #48	; 0x30
 80033c4:	f7fd fdb4 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80033c8:	bf00      	nop
 80033ca:	2102      	movs	r1, #2
 80033cc:	481c      	ldr	r0, [pc, #112]	; (8003440 <getVal+0x2f4>)
 80033ce:	f002 ff61 	bl	8006294 <HAL_GPIO_ReadPin>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d0f8      	beq.n	80033ca <getVal+0x27e>
		  {}
		  HAL_Delay(100);
 80033d8:	2064      	movs	r0, #100	; 0x64
 80033da:	f002 f8c3 	bl	8005564 <HAL_Delay>
		  val = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	603b      	str	r3, [r7, #0]
		  count++;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3301      	adds	r3, #1
 80033e6:	607b      	str	r3, [r7, #4]
	  }
	  	  	  	  	  	  //check for fourth row values *,0,#
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80033e8:	2101      	movs	r1, #1
 80033ea:	4815      	ldr	r0, [pc, #84]	; (8003440 <getVal+0x2f4>)
 80033ec:	f002 ff52 	bl	8006294 <HAL_GPIO_ReadPin>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d112      	bne.n	800341c <getVal+0x2d0>
	  {
		  letter('#');
 80033f6:	2023      	movs	r0, #35	; 0x23
 80033f8:	f7fd fd9a 	bl	8000f30 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80033fc:	bf00      	nop
 80033fe:	2101      	movs	r1, #1
 8003400:	480f      	ldr	r0, [pc, #60]	; (8003440 <getVal+0x2f4>)
 8003402:	f002 ff47 	bl	8006294 <HAL_GPIO_ReadPin>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d0f8      	beq.n	80033fe <getVal+0x2b2>
		  {}
		  HAL_Delay(100);
 800340c:	2064      	movs	r0, #100	; 0x64
 800340e:	f002 f8a9 	bl	8005564 <HAL_Delay>
		  val = 11;
 8003412:	230b      	movs	r3, #11
 8003414:	603b      	str	r3, [r7, #0]
		  count++;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3301      	adds	r3, #1
 800341a:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003422:	4806      	ldr	r0, [pc, #24]	; (800343c <getVal+0x2f0>)
 8003424:	f002 ff4d 	bl	80062c2 <HAL_GPIO_WritePin>
	while(count<1)//while we don't have a value count is below 1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	f77f ae96 	ble.w	800315c <getVal+0x10>
	}
	return val;
 8003430:	683b      	ldr	r3, [r7, #0]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40011000 	.word	0x40011000
 8003440:	40010c00 	.word	0x40010c00
 8003444:	40011400 	.word	0x40011400

08003448 <calcRain>:
void calcRain(void)//decides if it will rain or not
{
 8003448:	b5b0      	push	{r4, r5, r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
	double Dewpoint = 0, n = 0, temp;
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp = (17.27*Temperature)/(237.3+Temperature);
 8003466:	4b4e      	ldr	r3, [pc, #312]	; (80035a0 <calcRain+0x158>)
 8003468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800346c:	a346      	add	r3, pc, #280	; (adr r3, 8003588 <calcRain+0x140>)
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f7fd f829 	bl	80004c8 <__aeabi_dmul>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	4614      	mov	r4, r2
 800347c:	461d      	mov	r5, r3
 800347e:	4b48      	ldr	r3, [pc, #288]	; (80035a0 <calcRain+0x158>)
 8003480:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003484:	a342      	add	r3, pc, #264	; (adr r3, 8003590 <calcRain+0x148>)
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f7fc fe67 	bl	800015c <__adddf3>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4620      	mov	r0, r4
 8003494:	4629      	mov	r1, r5
 8003496:	f7fd f941 	bl	800071c <__aeabi_ddiv>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	e9c7 2300 	strd	r2, r3, [r7]
	n = (log(Humidity/100) + temp);
 80034a2:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <calcRain+0x15c>)
 80034a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <calcRain+0x160>)
 80034ae:	f7fd f935 	bl	800071c <__aeabi_ddiv>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4610      	mov	r0, r2
 80034b8:	4619      	mov	r1, r3
 80034ba:	f007 f99f 	bl	800a7fc <log>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034c6:	f7fc fe49 	bl	800015c <__adddf3>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
	Dewpoint = (237.3*n)/(1-n);
 80034d2:	a32f      	add	r3, pc, #188	; (adr r3, 8003590 <calcRain+0x148>)
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034dc:	f7fc fff4 	bl	80004c8 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4614      	mov	r4, r2
 80034e6:	461d      	mov	r5, r3
 80034e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	492e      	ldr	r1, [pc, #184]	; (80035ac <calcRain+0x164>)
 80034f2:	f7fc fe31 	bl	8000158 <__aeabi_dsub>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4620      	mov	r0, r4
 80034fc:	4629      	mov	r1, r5
 80034fe:	f7fd f90d 	bl	800071c <__aeabi_ddiv>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if(Humidity >= 70)
 800350a:	4b26      	ldr	r3, [pc, #152]	; (80035a4 <calcRain+0x15c>)
 800350c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <calcRain+0x168>)
 8003516:	f7fd fa5d 	bl	80009d4 <__aeabi_dcmpge>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d100      	bne.n	8003522 <calcRain+0xda>
		}
		else
			rain = 0;
	}

}
 8003520:	e02b      	b.n	800357a <calcRain+0x132>
		temp = Dewpoint/0.926316;
 8003522:	a31d      	add	r3, pc, #116	; (adr r3, 8003598 <calcRain+0x150>)
 8003524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003528:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800352c:	f7fd f8f6 	bl	800071c <__aeabi_ddiv>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	e9c7 2300 	strd	r2, r3, [r7]
		if (temp <= Humidity && Humidity >= 85)//rain is coming if its expected and the cop is greater than 70%
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <calcRain+0x15c>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003542:	f7fd fa3d 	bl	80009c0 <__aeabi_dcmple>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <calcRain+0x12a>
 800354c:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <calcRain+0x15c>)
 800354e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <calcRain+0x16c>)
 8003558:	f7fd fa3c 	bl	80009d4 <__aeabi_dcmpge>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <calcRain+0x12a>
			if(web[2] >= 7 )//if COP is greater than 70%
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <calcRain+0x170>)
 8003564:	789b      	ldrb	r3, [r3, #2]
 8003566:	2b06      	cmp	r3, #6
 8003568:	d907      	bls.n	800357a <calcRain+0x132>
				rain = 1;
 800356a:	4b14      	ldr	r3, [pc, #80]	; (80035bc <calcRain+0x174>)
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
			if(web[2] >= 7 )//if COP is greater than 70%
 8003570:	e003      	b.n	800357a <calcRain+0x132>
			rain = 0;
 8003572:	4b12      	ldr	r3, [pc, #72]	; (80035bc <calcRain+0x174>)
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
}
 8003578:	e7ff      	b.n	800357a <calcRain+0x132>
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bdb0      	pop	{r4, r5, r7, pc}
 8003582:	bf00      	nop
 8003584:	f3af 8000 	nop.w
 8003588:	b851eb85 	.word	0xb851eb85
 800358c:	4031451e 	.word	0x4031451e
 8003590:	9999999a 	.word	0x9999999a
 8003594:	406da999 	.word	0x406da999
 8003598:	73b85e81 	.word	0x73b85e81
 800359c:	3feda461 	.word	0x3feda461
 80035a0:	200025e0 	.word	0x200025e0
 80035a4:	20002940 	.word	0x20002940
 80035a8:	40590000 	.word	0x40590000
 80035ac:	3ff00000 	.word	0x3ff00000
 80035b0:	40518000 	.word	0x40518000
 80035b4:	40554000 	.word	0x40554000
 80035b8:	200000a8 	.word	0x200000a8
 80035bc:	20002948 	.word	0x20002948

080035c0 <wrongPass>:
void wrongPass(void)//Print Wrong Password on entry of wrong password
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80035c4:	2201      	movs	r2, #1
 80035c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ca:	481a      	ldr	r0, [pc, #104]	; (8003634 <wrongPass+0x74>)
 80035cc:	f002 fe79 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80035d0:	2200      	movs	r2, #0
 80035d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035d6:	4817      	ldr	r0, [pc, #92]	; (8003634 <wrongPass+0x74>)
 80035d8:	f002 fe73 	bl	80062c2 <HAL_GPIO_WritePin>
	letter('W');
 80035dc:	2057      	movs	r0, #87	; 0x57
 80035de:	f7fd fca7 	bl	8000f30 <letter>
	letter('r');
 80035e2:	2072      	movs	r0, #114	; 0x72
 80035e4:	f7fd fca4 	bl	8000f30 <letter>
	letter('o');
 80035e8:	206f      	movs	r0, #111	; 0x6f
 80035ea:	f7fd fca1 	bl	8000f30 <letter>
	letter('n');
 80035ee:	206e      	movs	r0, #110	; 0x6e
 80035f0:	f7fd fc9e 	bl	8000f30 <letter>
	letter('g');
 80035f4:	2067      	movs	r0, #103	; 0x67
 80035f6:	f7fd fc9b 	bl	8000f30 <letter>
	letter(' ');
 80035fa:	2020      	movs	r0, #32
 80035fc:	f7fd fc98 	bl	8000f30 <letter>
	letter('P');
 8003600:	2050      	movs	r0, #80	; 0x50
 8003602:	f7fd fc95 	bl	8000f30 <letter>
	letter('a');
 8003606:	2061      	movs	r0, #97	; 0x61
 8003608:	f7fd fc92 	bl	8000f30 <letter>
	letter('s');
 800360c:	2073      	movs	r0, #115	; 0x73
 800360e:	f7fd fc8f 	bl	8000f30 <letter>
	letter('s');
 8003612:	2073      	movs	r0, #115	; 0x73
 8003614:	f7fd fc8c 	bl	8000f30 <letter>
	letter('w');
 8003618:	2077      	movs	r0, #119	; 0x77
 800361a:	f7fd fc89 	bl	8000f30 <letter>
	letter('o');
 800361e:	206f      	movs	r0, #111	; 0x6f
 8003620:	f7fd fc86 	bl	8000f30 <letter>
	letter('r');
 8003624:	2072      	movs	r0, #114	; 0x72
 8003626:	f7fd fc83 	bl	8000f30 <letter>
	letter('d');
 800362a:	2064      	movs	r0, #100	; 0x64
 800362c:	f7fd fc80 	bl	8000f30 <letter>
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40010c00 	.word	0x40010c00

08003638 <green>:
void green(void)//Print "Green 1-3:"
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800363c:	2201      	movs	r2, #1
 800363e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003642:	4814      	ldr	r0, [pc, #80]	; (8003694 <green+0x5c>)
 8003644:	f002 fe3d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003648:	2200      	movs	r2, #0
 800364a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800364e:	4811      	ldr	r0, [pc, #68]	; (8003694 <green+0x5c>)
 8003650:	f002 fe37 	bl	80062c2 <HAL_GPIO_WritePin>
	letter('G');
 8003654:	2047      	movs	r0, #71	; 0x47
 8003656:	f7fd fc6b 	bl	8000f30 <letter>
	letter('r');
 800365a:	2072      	movs	r0, #114	; 0x72
 800365c:	f7fd fc68 	bl	8000f30 <letter>
	letter('e');
 8003660:	2065      	movs	r0, #101	; 0x65
 8003662:	f7fd fc65 	bl	8000f30 <letter>
	letter('e');
 8003666:	2065      	movs	r0, #101	; 0x65
 8003668:	f7fd fc62 	bl	8000f30 <letter>
	letter('n');
 800366c:	206e      	movs	r0, #110	; 0x6e
 800366e:	f7fd fc5f 	bl	8000f30 <letter>
	letter(' ');
 8003672:	2020      	movs	r0, #32
 8003674:	f7fd fc5c 	bl	8000f30 <letter>
	letter('1');
 8003678:	2031      	movs	r0, #49	; 0x31
 800367a:	f7fd fc59 	bl	8000f30 <letter>
	letter('-');
 800367e:	202d      	movs	r0, #45	; 0x2d
 8003680:	f7fd fc56 	bl	8000f30 <letter>
	letter('3');
 8003684:	2033      	movs	r0, #51	; 0x33
 8003686:	f7fd fc53 	bl	8000f30 <letter>
	letter(':');
 800368a:	203a      	movs	r0, #58	; 0x3a
 800368c:	f7fd fc50 	bl	8000f30 <letter>

}
 8003690:	bf00      	nop
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40010c00 	.word	0x40010c00

08003698 <timer>:

void timer(void)//Print "Time 00-60min:"
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800369c:	2201      	movs	r2, #1
 800369e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036a2:	481a      	ldr	r0, [pc, #104]	; (800370c <timer+0x74>)
 80036a4:	f002 fe0d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80036a8:	2200      	movs	r2, #0
 80036aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80036ae:	4817      	ldr	r0, [pc, #92]	; (800370c <timer+0x74>)
 80036b0:	f002 fe07 	bl	80062c2 <HAL_GPIO_WritePin>

	letter('T');
 80036b4:	2054      	movs	r0, #84	; 0x54
 80036b6:	f7fd fc3b 	bl	8000f30 <letter>
	letter('i');
 80036ba:	2069      	movs	r0, #105	; 0x69
 80036bc:	f7fd fc38 	bl	8000f30 <letter>
	letter('m');
 80036c0:	206d      	movs	r0, #109	; 0x6d
 80036c2:	f7fd fc35 	bl	8000f30 <letter>
	letter('e');
 80036c6:	2065      	movs	r0, #101	; 0x65
 80036c8:	f7fd fc32 	bl	8000f30 <letter>
	letter(' ');
 80036cc:	2020      	movs	r0, #32
 80036ce:	f7fd fc2f 	bl	8000f30 <letter>
	letter('0');
 80036d2:	2030      	movs	r0, #48	; 0x30
 80036d4:	f7fd fc2c 	bl	8000f30 <letter>
	letter('0');
 80036d8:	2030      	movs	r0, #48	; 0x30
 80036da:	f7fd fc29 	bl	8000f30 <letter>
	letter('-');
 80036de:	202d      	movs	r0, #45	; 0x2d
 80036e0:	f7fd fc26 	bl	8000f30 <letter>
	letter('6');
 80036e4:	2036      	movs	r0, #54	; 0x36
 80036e6:	f7fd fc23 	bl	8000f30 <letter>
	letter('0');
 80036ea:	2030      	movs	r0, #48	; 0x30
 80036ec:	f7fd fc20 	bl	8000f30 <letter>
	letter('m');
 80036f0:	206d      	movs	r0, #109	; 0x6d
 80036f2:	f7fd fc1d 	bl	8000f30 <letter>
	letter('i');
 80036f6:	2069      	movs	r0, #105	; 0x69
 80036f8:	f7fd fc1a 	bl	8000f30 <letter>
	letter('n');
 80036fc:	206e      	movs	r0, #110	; 0x6e
 80036fe:	f7fd fc17 	bl	8000f30 <letter>
	letter(':');
 8003702:	203a      	movs	r0, #58	; 0x3a
 8003704:	f7fd fc14 	bl	8000f30 <letter>

}
 8003708:	bf00      	nop
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40010c00 	.word	0x40010c00

08003710 <quit>:

void quit(void)//Print "Quit? yes-1 no-0:"
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003714:	2201      	movs	r2, #1
 8003716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800371a:	481e      	ldr	r0, [pc, #120]	; (8003794 <quit+0x84>)
 800371c:	f002 fdd1 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003720:	2200      	movs	r2, #0
 8003722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003726:	481b      	ldr	r0, [pc, #108]	; (8003794 <quit+0x84>)
 8003728:	f002 fdcb 	bl	80062c2 <HAL_GPIO_WritePin>

	letter('Q');
 800372c:	2051      	movs	r0, #81	; 0x51
 800372e:	f7fd fbff 	bl	8000f30 <letter>
	letter('u');
 8003732:	2075      	movs	r0, #117	; 0x75
 8003734:	f7fd fbfc 	bl	8000f30 <letter>
	letter('i');
 8003738:	2069      	movs	r0, #105	; 0x69
 800373a:	f7fd fbf9 	bl	8000f30 <letter>
	letter('t');
 800373e:	2074      	movs	r0, #116	; 0x74
 8003740:	f7fd fbf6 	bl	8000f30 <letter>
	letter('?');
 8003744:	203f      	movs	r0, #63	; 0x3f
 8003746:	f7fd fbf3 	bl	8000f30 <letter>
	letter(' ');
 800374a:	2020      	movs	r0, #32
 800374c:	f7fd fbf0 	bl	8000f30 <letter>
	letter('y');
 8003750:	2079      	movs	r0, #121	; 0x79
 8003752:	f7fd fbed 	bl	8000f30 <letter>
	letter('e');
 8003756:	2065      	movs	r0, #101	; 0x65
 8003758:	f7fd fbea 	bl	8000f30 <letter>
	letter('s');
 800375c:	2073      	movs	r0, #115	; 0x73
 800375e:	f7fd fbe7 	bl	8000f30 <letter>
	letter('-');
 8003762:	202d      	movs	r0, #45	; 0x2d
 8003764:	f7fd fbe4 	bl	8000f30 <letter>
	letter('1');
 8003768:	2031      	movs	r0, #49	; 0x31
 800376a:	f7fd fbe1 	bl	8000f30 <letter>
	letter(' ');
 800376e:	2020      	movs	r0, #32
 8003770:	f7fd fbde 	bl	8000f30 <letter>
	letter('n');
 8003774:	206e      	movs	r0, #110	; 0x6e
 8003776:	f7fd fbdb 	bl	8000f30 <letter>
	letter('o');
 800377a:	206f      	movs	r0, #111	; 0x6f
 800377c:	f7fd fbd8 	bl	8000f30 <letter>
	letter('-');
 8003780:	202d      	movs	r0, #45	; 0x2d
 8003782:	f7fd fbd5 	bl	8000f30 <letter>
	letter('0');
 8003786:	2030      	movs	r0, #48	; 0x30
 8003788:	f7fd fbd2 	bl	8000f30 <letter>
	line2();
 800378c:	f7ff fc10 	bl	8002fb0 <line2>
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40010c00 	.word	0x40010c00

08003798 <onOffTime>:
void onOffTime(void)//Print "0-on/off 1-Timer"
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800379c:	2201      	movs	r2, #1
 800379e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037a2:	481e      	ldr	r0, [pc, #120]	; (800381c <onOffTime+0x84>)
 80037a4:	f002 fd8d 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80037a8:	2200      	movs	r2, #0
 80037aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037ae:	481b      	ldr	r0, [pc, #108]	; (800381c <onOffTime+0x84>)
 80037b0:	f002 fd87 	bl	80062c2 <HAL_GPIO_WritePin>
	letter('0');
 80037b4:	2030      	movs	r0, #48	; 0x30
 80037b6:	f7fd fbbb 	bl	8000f30 <letter>
	letter('-');
 80037ba:	202d      	movs	r0, #45	; 0x2d
 80037bc:	f7fd fbb8 	bl	8000f30 <letter>
	letter('O');
 80037c0:	204f      	movs	r0, #79	; 0x4f
 80037c2:	f7fd fbb5 	bl	8000f30 <letter>
	letter('n');
 80037c6:	206e      	movs	r0, #110	; 0x6e
 80037c8:	f7fd fbb2 	bl	8000f30 <letter>
	letter('/');
 80037cc:	202f      	movs	r0, #47	; 0x2f
 80037ce:	f7fd fbaf 	bl	8000f30 <letter>
	letter('O');
 80037d2:	204f      	movs	r0, #79	; 0x4f
 80037d4:	f7fd fbac 	bl	8000f30 <letter>
	letter('f');
 80037d8:	2066      	movs	r0, #102	; 0x66
 80037da:	f7fd fba9 	bl	8000f30 <letter>
	letter('f');
 80037de:	2066      	movs	r0, #102	; 0x66
 80037e0:	f7fd fba6 	bl	8000f30 <letter>
	letter(' ');
 80037e4:	2020      	movs	r0, #32
 80037e6:	f7fd fba3 	bl	8000f30 <letter>
	letter('1');
 80037ea:	2031      	movs	r0, #49	; 0x31
 80037ec:	f7fd fba0 	bl	8000f30 <letter>
	letter('-');
 80037f0:	202d      	movs	r0, #45	; 0x2d
 80037f2:	f7fd fb9d 	bl	8000f30 <letter>
	letter('T');
 80037f6:	2054      	movs	r0, #84	; 0x54
 80037f8:	f7fd fb9a 	bl	8000f30 <letter>
	letter('i');
 80037fc:	2069      	movs	r0, #105	; 0x69
 80037fe:	f7fd fb97 	bl	8000f30 <letter>
	letter('m');
 8003802:	206d      	movs	r0, #109	; 0x6d
 8003804:	f7fd fb94 	bl	8000f30 <letter>
	letter('e');
 8003808:	2065      	movs	r0, #101	; 0x65
 800380a:	f7fd fb91 	bl	8000f30 <letter>
	letter('r');
 800380e:	2072      	movs	r0, #114	; 0x72
 8003810:	f7fd fb8e 	bl	8000f30 <letter>
	line2();
 8003814:	f7ff fbcc 	bl	8002fb0 <line2>
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40010c00 	.word	0x40010c00

08003820 <onOff>:
void onOff(void)//Print "0-on 1-off:"
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8003824:	2201      	movs	r2, #1
 8003826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800382a:	4816      	ldr	r0, [pc, #88]	; (8003884 <onOff+0x64>)
 800382c:	f002 fd49 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003830:	2200      	movs	r2, #0
 8003832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003836:	4813      	ldr	r0, [pc, #76]	; (8003884 <onOff+0x64>)
 8003838:	f002 fd43 	bl	80062c2 <HAL_GPIO_WritePin>
	letter('0');
 800383c:	2030      	movs	r0, #48	; 0x30
 800383e:	f7fd fb77 	bl	8000f30 <letter>
	letter('-');
 8003842:	202d      	movs	r0, #45	; 0x2d
 8003844:	f7fd fb74 	bl	8000f30 <letter>
	letter('O');
 8003848:	204f      	movs	r0, #79	; 0x4f
 800384a:	f7fd fb71 	bl	8000f30 <letter>
	letter('n');
 800384e:	206e      	movs	r0, #110	; 0x6e
 8003850:	f7fd fb6e 	bl	8000f30 <letter>
	letter(' ');
 8003854:	2020      	movs	r0, #32
 8003856:	f7fd fb6b 	bl	8000f30 <letter>
	letter('1');
 800385a:	2031      	movs	r0, #49	; 0x31
 800385c:	f7fd fb68 	bl	8000f30 <letter>
	letter('-');
 8003860:	202d      	movs	r0, #45	; 0x2d
 8003862:	f7fd fb65 	bl	8000f30 <letter>
	letter('O');
 8003866:	204f      	movs	r0, #79	; 0x4f
 8003868:	f7fd fb62 	bl	8000f30 <letter>
	letter('f');
 800386c:	2066      	movs	r0, #102	; 0x66
 800386e:	f7fd fb5f 	bl	8000f30 <letter>
	letter('f');
 8003872:	2066      	movs	r0, #102	; 0x66
 8003874:	f7fd fb5c 	bl	8000f30 <letter>
	letter(':');
 8003878:	203a      	movs	r0, #58	; 0x3a
 800387a:	f7fd fb59 	bl	8000f30 <letter>

}
 800387e:	bf00      	nop
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40010c00 	.word	0x40010c00

08003888 <error>:
void error(void)// Print "Error, Invalid Number"
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800388c:	2201      	movs	r2, #1
 800388e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003892:	482a      	ldr	r0, [pc, #168]	; (800393c <error+0xb4>)
 8003894:	f002 fd15 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003898:	2200      	movs	r2, #0
 800389a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800389e:	4827      	ldr	r0, [pc, #156]	; (800393c <error+0xb4>)
 80038a0:	f002 fd0f 	bl	80062c2 <HAL_GPIO_WritePin>

	letter('E');
 80038a4:	2045      	movs	r0, #69	; 0x45
 80038a6:	f7fd fb43 	bl	8000f30 <letter>
	letter('r');
 80038aa:	2072      	movs	r0, #114	; 0x72
 80038ac:	f7fd fb40 	bl	8000f30 <letter>
	letter('r');
 80038b0:	2072      	movs	r0, #114	; 0x72
 80038b2:	f7fd fb3d 	bl	8000f30 <letter>
	letter('o');
 80038b6:	206f      	movs	r0, #111	; 0x6f
 80038b8:	f7fd fb3a 	bl	8000f30 <letter>
	letter('r');
 80038bc:	2072      	movs	r0, #114	; 0x72
 80038be:	f7fd fb37 	bl	8000f30 <letter>
	letter(',');
 80038c2:	202c      	movs	r0, #44	; 0x2c
 80038c4:	f7fd fb34 	bl	8000f30 <letter>
	letter(' ');
 80038c8:	2020      	movs	r0, #32
 80038ca:	f7fd fb31 	bl	8000f30 <letter>
	letter('I');
 80038ce:	2049      	movs	r0, #73	; 0x49
 80038d0:	f7fd fb2e 	bl	8000f30 <letter>
	letter('n');
 80038d4:	206e      	movs	r0, #110	; 0x6e
 80038d6:	f7fd fb2b 	bl	8000f30 <letter>
	letter('v');
 80038da:	2076      	movs	r0, #118	; 0x76
 80038dc:	f7fd fb28 	bl	8000f30 <letter>
	letter('a');
 80038e0:	2061      	movs	r0, #97	; 0x61
 80038e2:	f7fd fb25 	bl	8000f30 <letter>
	letter('l');
 80038e6:	206c      	movs	r0, #108	; 0x6c
 80038e8:	f7fd fb22 	bl	8000f30 <letter>
	letter('i');
 80038ec:	2069      	movs	r0, #105	; 0x69
 80038ee:	f7fd fb1f 	bl	8000f30 <letter>
	letter('d');
 80038f2:	2064      	movs	r0, #100	; 0x64
 80038f4:	f7fd fb1c 	bl	8000f30 <letter>

	line2();
 80038f8:	f7ff fb5a 	bl	8002fb0 <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80038fc:	2201      	movs	r2, #1
 80038fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003902:	480e      	ldr	r0, [pc, #56]	; (800393c <error+0xb4>)
 8003904:	f002 fcdd 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8003908:	2200      	movs	r2, #0
 800390a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800390e:	480b      	ldr	r0, [pc, #44]	; (800393c <error+0xb4>)
 8003910:	f002 fcd7 	bl	80062c2 <HAL_GPIO_WritePin>
	letter('N');
 8003914:	204e      	movs	r0, #78	; 0x4e
 8003916:	f7fd fb0b 	bl	8000f30 <letter>
	letter('u');
 800391a:	2075      	movs	r0, #117	; 0x75
 800391c:	f7fd fb08 	bl	8000f30 <letter>
	letter('m');
 8003920:	206d      	movs	r0, #109	; 0x6d
 8003922:	f7fd fb05 	bl	8000f30 <letter>
	letter('b');
 8003926:	2062      	movs	r0, #98	; 0x62
 8003928:	f7fd fb02 	bl	8000f30 <letter>
	letter('e');
 800392c:	2065      	movs	r0, #101	; 0x65
 800392e:	f7fd faff 	bl	8000f30 <letter>
	letter('r');
 8003932:	2072      	movs	r0, #114	; 0x72
 8003934:	f7fd fafc 	bl	8000f30 <letter>
}
 8003938:	bf00      	nop
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40010c00 	.word	0x40010c00

08003940 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	initializeNodes();
 8003948:	f000 ffee 	bl	8004928 <initializeNodes>
	uint16_t Moisture[3] = {100, 100, 100};
 800394c:	4a55      	ldr	r2, [pc, #340]	; (8003aa4 <StartXbeeTask+0x164>)
 800394e:	f107 0308 	add.w	r3, r7, #8
 8003952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003956:	6018      	str	r0, [r3, #0]
 8003958:	3304      	adds	r3, #4
 800395a:	8019      	strh	r1, [r3, #0]
  /* Infinite loop */

  for(;;)
  {
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 300) == HAL_OK)
 800395c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003960:	221a      	movs	r2, #26
 8003962:	4951      	ldr	r1, [pc, #324]	; (8003aa8 <StartXbeeTask+0x168>)
 8003964:	4851      	ldr	r0, [pc, #324]	; (8003aac <StartXbeeTask+0x16c>)
 8003966:	f003 fff4 	bl	8007952 <HAL_UART_Receive>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d17d      	bne.n	8003a6c <StartXbeeTask+0x12c>
	  {
		 //has to stay with main (the file where the "UART_HandleTypeDef huart3;" is)
		  if (uartBufferRX[0] == 0x7E)
 8003970:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <StartXbeeTask+0x168>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b7e      	cmp	r3, #126	; 0x7e
 8003976:	d176      	bne.n	8003a66 <StartXbeeTask+0x126>
		  {
			  switch (uartBufferRX[3])
 8003978:	4b4b      	ldr	r3, [pc, #300]	; (8003aa8 <StartXbeeTask+0x168>)
 800397a:	78db      	ldrb	r3, [r3, #3]
 800397c:	2b92      	cmp	r3, #146	; 0x92
 800397e:	d002      	beq.n	8003986 <StartXbeeTask+0x46>
 8003980:	2b97      	cmp	r3, #151	; 0x97
 8003982:	d004      	beq.n	800398e <StartXbeeTask+0x4e>
 8003984:	e007      	b.n	8003996 <StartXbeeTask+0x56>
			  {
			  case 0x92:
				  processIO(uartBufferRX);
 8003986:	4848      	ldr	r0, [pc, #288]	; (8003aa8 <StartXbeeTask+0x168>)
 8003988:	f001 f8dc 	bl	8004b44 <processIO>
				  break;
 800398c:	e00b      	b.n	80039a6 <StartXbeeTask+0x66>

			  case 0x97:
				  processATResponse(uartBufferRX);
 800398e:	4846      	ldr	r0, [pc, #280]	; (8003aa8 <StartXbeeTask+0x168>)
 8003990:	f001 f874 	bl	8004a7c <processATResponse>
				  break;
 8003994:	e007      	b.n	80039a6 <StartXbeeTask+0x66>

			  default://if it wasnt an expected data type just throw it out
				  HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 400);
 8003996:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800399a:	221a      	movs	r2, #26
 800399c:	4942      	ldr	r1, [pc, #264]	; (8003aa8 <StartXbeeTask+0x168>)
 800399e:	4843      	ldr	r0, [pc, #268]	; (8003aac <StartXbeeTask+0x16c>)
 80039a0:	f003 ffd7 	bl	8007952 <HAL_UART_Receive>
				  break;
 80039a4:	bf00      	nop
			  }
			  ///green1
			  fairways[1].capacative[0] -= 0x30;// set moisture levels for each green and check to see if they're too high
 80039a6:	4b42      	ldr	r3, [pc, #264]	; (8003ab0 <StartXbeeTask+0x170>)
 80039a8:	7edb      	ldrb	r3, [r3, #27]
 80039aa:	3b30      	subs	r3, #48	; 0x30
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <StartXbeeTask+0x170>)
 80039b0:	76da      	strb	r2, [r3, #27]
			  fairways[1].capacative[1] -= 0x30;
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <StartXbeeTask+0x170>)
 80039b4:	7f1b      	ldrb	r3, [r3, #28]
 80039b6:	3b30      	subs	r3, #48	; 0x30
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <StartXbeeTask+0x170>)
 80039bc:	771a      	strb	r2, [r3, #28]

			  Moisture[0] = fairways[1].capacative[0]*10;
 80039be:	4b3c      	ldr	r3, [pc, #240]	; (8003ab0 <StartXbeeTask+0x170>)
 80039c0:	7edb      	ldrb	r3, [r3, #27]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	0092      	lsls	r2, r2, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	813b      	strh	r3, [r7, #8]
			  Moisture[0] = Moisture[0] + fairways[1].capacative[1];
 80039d0:	893a      	ldrh	r2, [r7, #8]
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <StartXbeeTask+0x170>)
 80039d4:	7f1b      	ldrb	r3, [r3, #28]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4413      	add	r3, r2
 80039da:	b29b      	uxth	r3, r3
 80039dc:	813b      	strh	r3, [r7, #8]
			  ///green 2
			  fairways[2].capacative[0] -= 0x30;
 80039de:	4b34      	ldr	r3, [pc, #208]	; (8003ab0 <StartXbeeTask+0x170>)
 80039e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80039e4:	3b30      	subs	r3, #48	; 0x30
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	4b31      	ldr	r3, [pc, #196]	; (8003ab0 <StartXbeeTask+0x170>)
 80039ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			  fairways[2].capacative[1] -= 0x30;
 80039ee:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <StartXbeeTask+0x170>)
 80039f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80039f4:	3b30      	subs	r3, #48	; 0x30
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <StartXbeeTask+0x170>)
 80039fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

			  Moisture[1] = fairways[2].capacative[0]*10;
 80039fe:	4b2c      	ldr	r3, [pc, #176]	; (8003ab0 <StartXbeeTask+0x170>)
 8003a00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	0092      	lsls	r2, r2, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	817b      	strh	r3, [r7, #10]
			  Moisture[1] = Moisture[1] + fairways[2].capacative[1];
 8003a12:	897a      	ldrh	r2, [r7, #10]
 8003a14:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <StartXbeeTask+0x170>)
 8003a16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	817b      	strh	r3, [r7, #10]
			  /// green 3
			  fairways[3].capacative[0] -= 0x30;
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <StartXbeeTask+0x170>)
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a28:	3b30      	subs	r3, #48	; 0x30
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <StartXbeeTask+0x170>)
 8003a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			  fairways[3].capacative[1] -= 0x30;
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <StartXbeeTask+0x170>)
 8003a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a38:	3b30      	subs	r3, #48	; 0x30
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <StartXbeeTask+0x170>)
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

			  Moisture[2] = fairways[3].capacative[0]*10;
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <StartXbeeTask+0x170>)
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	0092      	lsls	r2, r2, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	81bb      	strh	r3, [r7, #12]
			  Moisture[2] = Moisture[2] + fairways[3].capacative[1];
 8003a56:	89ba      	ldrh	r2, [r7, #12]
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <StartXbeeTask+0x170>)
 8003a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	4413      	add	r3, r2
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	81bb      	strh	r3, [r7, #12]
		  }
		  sensorToGateway(1);
 8003a66:	2001      	movs	r0, #1
 8003a68:	f001 f9ae 	bl	8004dc8 <sensorToGateway>
	  }
	  //check to see if moisture levels are too high
	  if(Moisture[0] <= 40)//40 percent is 100 in the initial input
 8003a6c:	893b      	ldrh	r3, [r7, #8]
 8003a6e:	2b28      	cmp	r3, #40	; 0x28
 8003a70:	d804      	bhi.n	8003a7c <StartXbeeTask+0x13c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2120      	movs	r1, #32
 8003a76:	480f      	ldr	r0, [pc, #60]	; (8003ab4 <StartXbeeTask+0x174>)
 8003a78:	f002 fc23 	bl	80062c2 <HAL_GPIO_WritePin>
	  }

	  if(Moisture[1]<= 40)//40 percent is 100 in the initial input
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	2b28      	cmp	r3, #40	; 0x28
 8003a80:	d804      	bhi.n	8003a8c <StartXbeeTask+0x14c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <StartXbeeTask+0x174>)
 8003a88:	f002 fc1b 	bl	80062c2 <HAL_GPIO_WritePin>
	  }

	  if(Moisture[2]<= 40)//40 percent is 100 in the initial input
 8003a8c:	89bb      	ldrh	r3, [r7, #12]
 8003a8e:	2b28      	cmp	r3, #40	; 0x28
 8003a90:	d804      	bhi.n	8003a9c <StartXbeeTask+0x15c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2110      	movs	r1, #16
 8003a96:	4807      	ldr	r0, [pc, #28]	; (8003ab4 <StartXbeeTask+0x174>)
 8003a98:	f002 fc13 	bl	80062c2 <HAL_GPIO_WritePin>
	  }
	  osDelay(1);
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f004 f9df 	bl	8007e60 <osDelay>
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 300) == HAL_OK)
 8003aa2:	e75b      	b.n	800395c <StartXbeeTask+0x1c>
 8003aa4:	0800ac9c 	.word	0x0800ac9c
 8003aa8:	200025ac 	.word	0x200025ac
 8003aac:	20002528 	.word	0x20002528
 8003ab0:	200025f8 	.word	0x200025f8
 8003ab4:	40010c00 	.word	0x40010c00

08003ab8 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	uint16_t num[7];
	uint16_t indc, m;

  for(;;)
  {
	commandToLCD();//reset LCD
 8003ac0:	f7ff f916 	bl	8002cf0 <commandToLCD>
	printPassword();
 8003ac4:	f7ff f9f4 	bl	8002eb0 <printPassword>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ace:	48bd      	ldr	r0, [pc, #756]	; (8003dc4 <StartUserTask+0x30c>)
 8003ad0:	f002 fbf7 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2104      	movs	r1, #4
 8003ad8:	48bb      	ldr	r0, [pc, #748]	; (8003dc8 <StartUserTask+0x310>)
 8003ada:	f002 fbf2 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ae4:	48b7      	ldr	r0, [pc, #732]	; (8003dc4 <StartUserTask+0x30c>)
 8003ae6:	f002 fbec 	bl	80062c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8003aea:	2200      	movs	r2, #0
 8003aec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003af0:	48b4      	ldr	r0, [pc, #720]	; (8003dc4 <StartUserTask+0x30c>)
 8003af2:	f002 fbe6 	bl	80062c2 <HAL_GPIO_WritePin>

	for(int i = 0; i < 4; i++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e00d      	b.n	8003b18 <StartUserTask+0x60>
	{
		num[i] = getVal();
 8003afc:	f7ff fb26 	bl	800314c <getVal>
 8003b00:	4603      	mov	r3, r0
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	f107 0120 	add.w	r1, r7, #32
 8003b0c:	440b      	add	r3, r1
 8003b0e:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 4; i++)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	ddee      	ble.n	8003afc <StartUserTask+0x44>
	}
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8003b1e:	893b      	ldrh	r3, [r7, #8]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	f040 8142 	bne.w	8003daa <StartUserTask+0x2f2>
 8003b26:	897b      	ldrh	r3, [r7, #10]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	f040 813e 	bne.w	8003daa <StartUserTask+0x2f2>
 8003b2e:	89bb      	ldrh	r3, [r7, #12]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	f040 813a 	bne.w	8003daa <StartUserTask+0x2f2>
 8003b36:	89fb      	ldrh	r3, [r7, #14]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	f040 8136 	bne.w	8003daa <StartUserTask+0x2f2>
	{
		clear();//clear screen
 8003b3e:	f7ff fa89 	bl	8003054 <clear>
		line1();// set cursor to line 1
 8003b42:	f7ff f9e3 	bl	8002f0c <line1>
		correct();// after correct password entry
 8003b46:	f7ff fad7 	bl	80030f8 <correct>
		HAL_Delay(1500);
 8003b4a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003b4e:	f001 fd09 	bl	8005564 <HAL_Delay>
		num[6] = 0;//set quit variable for start
 8003b52:	2300      	movs	r3, #0
 8003b54:	82bb      	strh	r3, [r7, #20]
		while(num[6] == 0)
 8003b56:	e123      	b.n	8003da0 <StartUserTask+0x2e8>
		{
			commandToLCD();//reset LCD
 8003b58:	f7ff f8ca 	bl	8002cf0 <commandToLCD>
			onOffTime();//on/off or timer
 8003b5c:	f7ff fe1c 	bl	8003798 <onOffTime>
			num[0] = getVal();
 8003b60:	f7ff faf4 	bl	800314c <getVal>
 8003b64:	4603      	mov	r3, r0
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	813b      	strh	r3, [r7, #8]
			while(num[0]< 0 || num[0] > 1)
 8003b6a:	e010      	b.n	8003b8e <StartUserTask+0xd6>
			{
				commandToLCD();//reset LCD
 8003b6c:	f7ff f8c0 	bl	8002cf0 <commandToLCD>
				error();//error invalid entry
 8003b70:	f7ff fe8a 	bl	8003888 <error>
				HAL_Delay(1500);
 8003b74:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003b78:	f001 fcf4 	bl	8005564 <HAL_Delay>
				commandToLCD();//reset LCD
 8003b7c:	f7ff f8b8 	bl	8002cf0 <commandToLCD>
				onOffTime();//on/off or timer
 8003b80:	f7ff fe0a 	bl	8003798 <onOffTime>
				num[0] = getVal();
 8003b84:	f7ff fae2 	bl	800314c <getVal>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	813b      	strh	r3, [r7, #8]
			while(num[0]< 0 || num[0] > 1)
 8003b8e:	893b      	ldrh	r3, [r7, #8]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d8eb      	bhi.n	8003b6c <StartUserTask+0xb4>
			}
			if(num[0] == 0)//on/off selected
 8003b94:	893b      	ldrh	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d173      	bne.n	8003c82 <StartUserTask+0x1ca>
			{
				m = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	837b      	strh	r3, [r7, #26]
				commandToLCD();//reset LCD
 8003b9e:	f7ff f8a7 	bl	8002cf0 <commandToLCD>
				green();//enter green
 8003ba2:	f7ff fd49 	bl	8003638 <green>
				num[0] = getVal();
 8003ba6:	f7ff fad1 	bl	800314c <getVal>
 8003baa:	4603      	mov	r3, r0
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003bb0:	e010      	b.n	8003bd4 <StartUserTask+0x11c>
				{
					commandToLCD();//reset LCD
 8003bb2:	f7ff f89d 	bl	8002cf0 <commandToLCD>
					error();//error invalid entry
 8003bb6:	f7ff fe67 	bl	8003888 <error>
					HAL_Delay(1500);
 8003bba:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003bbe:	f001 fcd1 	bl	8005564 <HAL_Delay>
					commandToLCD();//reset LCD
 8003bc2:	f7ff f895 	bl	8002cf0 <commandToLCD>
					green();
 8003bc6:	f7ff fd37 	bl	8003638 <green>
					num[0] = getVal();
 8003bca:	f7ff fabf 	bl	800314c <getVal>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003bd4:	893b      	ldrh	r3, [r7, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0eb      	beq.n	8003bb2 <StartUserTask+0xfa>
 8003bda:	893b      	ldrh	r3, [r7, #8]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d8e8      	bhi.n	8003bb2 <StartUserTask+0xfa>
				}
				indc = num[0];
 8003be0:	893b      	ldrh	r3, [r7, #8]
 8003be2:	833b      	strh	r3, [r7, #24]
				line2();
 8003be4:	f7ff f9e4 	bl	8002fb0 <line2>
				onOff();//enter value for on or off
 8003be8:	f7ff fe1a 	bl	8003820 <onOff>
				num[0] = getVal();
 8003bec:	f7ff faae 	bl	800314c <getVal>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	813b      	strh	r3, [r7, #8]
				while(num[0]< 0 || num[0] > 1)
 8003bf6:	e010      	b.n	8003c1a <StartUserTask+0x162>
				{
					commandToLCD();//reset LCD
 8003bf8:	f7ff f87a 	bl	8002cf0 <commandToLCD>
					error();//error invalid entry
 8003bfc:	f7ff fe44 	bl	8003888 <error>
					HAL_Delay(1500);
 8003c00:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003c04:	f001 fcae 	bl	8005564 <HAL_Delay>
					commandToLCD();//reset LCD
 8003c08:	f7ff f872 	bl	8002cf0 <commandToLCD>
					onOff();//enter value for on or off
 8003c0c:	f7ff fe08 	bl	8003820 <onOff>
					num[0] = getVal();
 8003c10:	f7ff fa9c 	bl	800314c <getVal>
 8003c14:	4603      	mov	r3, r0
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	813b      	strh	r3, [r7, #8]
				while(num[0]< 0 || num[0] > 1)
 8003c1a:	893b      	ldrh	r3, [r7, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d8eb      	bhi.n	8003bf8 <StartUserTask+0x140>
				}
				UserInfo[1] = m;//enter new user input data
 8003c20:	8b7b      	ldrh	r3, [r7, #26]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	4b69      	ldr	r3, [pc, #420]	; (8003dcc <StartUserTask+0x314>)
 8003c26:	705a      	strb	r2, [r3, #1]
				UserInfo[2] = indc;
 8003c28:	8b3b      	ldrh	r3, [r7, #24]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b67      	ldr	r3, [pc, #412]	; (8003dcc <StartUserTask+0x314>)
 8003c2e:	709a      	strb	r2, [r3, #2]
				UserInfo[3] = num[0];
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <StartUserTask+0x314>)
 8003c36:	70da      	strb	r2, [r3, #3]
				UserInfo[0]++;
 8003c38:	4b64      	ldr	r3, [pc, #400]	; (8003dcc <StartUserTask+0x314>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	4b62      	ldr	r3, [pc, #392]	; (8003dcc <StartUserTask+0x314>)
 8003c42:	701a      	strb	r2, [r3, #0]

				clear();
 8003c44:	f7ff fa06 	bl	8003054 <clear>
				quit();//quit?
 8003c48:	f7ff fd62 	bl	8003710 <quit>
				num[5] = getVal();
 8003c4c:	f7ff fa7e 	bl	800314c <getVal>
 8003c50:	4603      	mov	r3, r0
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 8003c56:	e010      	b.n	8003c7a <StartUserTask+0x1c2>
				{
					commandToLCD();//reset LCD
 8003c58:	f7ff f84a 	bl	8002cf0 <commandToLCD>
					error();//error invalid entry
 8003c5c:	f7ff fe14 	bl	8003888 <error>
					HAL_Delay(1500);
 8003c60:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003c64:	f001 fc7e 	bl	8005564 <HAL_Delay>
					commandToLCD();//reset LCD
 8003c68:	f7ff f842 	bl	8002cf0 <commandToLCD>
					quit();
 8003c6c:	f7ff fd50 	bl	8003710 <quit>
					num[5] = getVal();
 8003c70:	f7ff fa6c 	bl	800314c <getVal>
 8003c74:	4603      	mov	r3, r0
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 8003c7a:	8a7b      	ldrh	r3, [r7, #18]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d8eb      	bhi.n	8003c58 <StartUserTask+0x1a0>
 8003c80:	e089      	b.n	8003d96 <StartUserTask+0x2de>
				}
			}
			else if(num[0] == 1)//timer
 8003c82:	893b      	ldrh	r3, [r7, #8]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	f040 8086 	bne.w	8003d96 <StartUserTask+0x2de>
			{
				m = 2;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	837b      	strh	r3, [r7, #26]
				commandToLCD();//reset LCD
 8003c8e:	f7ff f82f 	bl	8002cf0 <commandToLCD>
				green();//get green
 8003c92:	f7ff fcd1 	bl	8003638 <green>
				num[0] = getVal();
 8003c96:	f7ff fa59 	bl	800314c <getVal>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003ca0:	e010      	b.n	8003cc4 <StartUserTask+0x20c>
				{
					commandToLCD();//reset LCD
 8003ca2:	f7ff f825 	bl	8002cf0 <commandToLCD>
					error();//error invalid entry
 8003ca6:	f7ff fdef 	bl	8003888 <error>
					HAL_Delay(1500);
 8003caa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003cae:	f001 fc59 	bl	8005564 <HAL_Delay>
					commandToLCD();//reset LCD
 8003cb2:	f7ff f81d 	bl	8002cf0 <commandToLCD>
					green();
 8003cb6:	f7ff fcbf 	bl	8003638 <green>
					num[0] = getVal();
 8003cba:	f7ff fa47 	bl	800314c <getVal>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003cc4:	893b      	ldrh	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0eb      	beq.n	8003ca2 <StartUserTask+0x1ea>
 8003cca:	893b      	ldrh	r3, [r7, #8]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d8e8      	bhi.n	8003ca2 <StartUserTask+0x1ea>
				}
				indc = num[0];//set green
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	833b      	strh	r3, [r7, #24]
				line2();
 8003cd4:	f7ff f96c 	bl	8002fb0 <line2>
				timer();
 8003cd8:	f7ff fcde 	bl	8003698 <timer>
				num[0] = getVal();//get time
 8003cdc:	f7ff fa36 	bl	800314c <getVal>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	813b      	strh	r3, [r7, #8]
				num[1] = getVal();
 8003ce6:	f7ff fa31 	bl	800314c <getVal>
 8003cea:	4603      	mov	r3, r0
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	817b      	strh	r3, [r7, #10]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8003cf0:	e015      	b.n	8003d1e <StartUserTask+0x266>
				{
					commandToLCD();//reset LCD
 8003cf2:	f7fe fffd 	bl	8002cf0 <commandToLCD>
					error();//error invalid entry
 8003cf6:	f7ff fdc7 	bl	8003888 <error>
					HAL_Delay(1500);
 8003cfa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003cfe:	f001 fc31 	bl	8005564 <HAL_Delay>
					commandToLCD();//reset LCD
 8003d02:	f7fe fff5 	bl	8002cf0 <commandToLCD>
					timer();
 8003d06:	f7ff fcc7 	bl	8003698 <timer>
					num[0] = getVal();//get time
 8003d0a:	f7ff fa1f 	bl	800314c <getVal>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	813b      	strh	r3, [r7, #8]
					num[1] = getVal();
 8003d14:	f7ff fa1a 	bl	800314c <getVal>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	817b      	strh	r3, [r7, #10]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8003d1e:	893b      	ldrh	r3, [r7, #8]
 8003d20:	2b06      	cmp	r3, #6
 8003d22:	d8e6      	bhi.n	8003cf2 <StartUserTask+0x23a>
 8003d24:	897b      	ldrh	r3, [r7, #10]
 8003d26:	2b09      	cmp	r3, #9
 8003d28:	d8e3      	bhi.n	8003cf2 <StartUserTask+0x23a>
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	2b06      	cmp	r3, #6
 8003d2e:	d102      	bne.n	8003d36 <StartUserTask+0x27e>
 8003d30:	897b      	ldrh	r3, [r7, #10]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1dd      	bne.n	8003cf2 <StartUserTask+0x23a>
				}
				UserInfo[1] = m;//set input data
 8003d36:	8b7b      	ldrh	r3, [r7, #26]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <StartUserTask+0x314>)
 8003d3c:	705a      	strb	r2, [r3, #1]
				UserInfo[2] = indc;
 8003d3e:	8b3b      	ldrh	r3, [r7, #24]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <StartUserTask+0x314>)
 8003d44:	709a      	strb	r2, [r3, #2]
				UserInfo[3] = num[0];
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <StartUserTask+0x314>)
 8003d4c:	70da      	strb	r2, [r3, #3]
				UserInfo[0] ++;
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <StartUserTask+0x314>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <StartUserTask+0x314>)
 8003d58:	701a      	strb	r2, [r3, #0]

				clear();//clear screen
 8003d5a:	f7ff f97b 	bl	8003054 <clear>
				quit();//quit?
 8003d5e:	f7ff fcd7 	bl	8003710 <quit>
				num[5] = getVal();//get input
 8003d62:	f7ff f9f3 	bl	800314c <getVal>
 8003d66:	4603      	mov	r3, r0
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 8003d6c:	e010      	b.n	8003d90 <StartUserTask+0x2d8>
				{
					commandToLCD();//reset LCD
 8003d6e:	f7fe ffbf 	bl	8002cf0 <commandToLCD>
					error();//error invalid value
 8003d72:	f7ff fd89 	bl	8003888 <error>
					HAL_Delay(1500);
 8003d76:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003d7a:	f001 fbf3 	bl	8005564 <HAL_Delay>
					commandToLCD();//reset LCD
 8003d7e:	f7fe ffb7 	bl	8002cf0 <commandToLCD>
					quit();//quit?
 8003d82:	f7ff fcc5 	bl	8003710 <quit>
					num[5] = getVal();//get input
 8003d86:	f7ff f9e1 	bl	800314c <getVal>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 8003d90:	8a7b      	ldrh	r3, [r7, #18]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d8eb      	bhi.n	8003d6e <StartUserTask+0x2b6>
				}
			}
			if(num[5] == 1)
 8003d96:	8a7b      	ldrh	r3, [r7, #18]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <StartUserTask+0x2e8>
			{
				num[6] = 5;//quit else go back to options
 8003d9c:	2305      	movs	r3, #5
 8003d9e:	82bb      	strh	r3, [r7, #20]
		while(num[6] == 0)
 8003da0:	8abb      	ldrh	r3, [r7, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f43f aed8 	beq.w	8003b58 <StartUserTask+0xa0>
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8003da8:	e007      	b.n	8003dba <StartUserTask+0x302>
			}
		}
	}
	else
	{
		line2();
 8003daa:	f7ff f901 	bl	8002fb0 <line2>
		wrongPass();//error wrong password
 8003dae:	f7ff fc07 	bl	80035c0 <wrongPass>
		HAL_Delay(2000);
 8003db2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003db6:	f001 fbd5 	bl	8005564 <HAL_Delay>
	}
	osDelay(1);
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f004 f850 	bl	8007e60 <osDelay>
	commandToLCD();//reset LCD
 8003dc0:	e67e      	b.n	8003ac0 <StartUserTask+0x8>
 8003dc2:	bf00      	nop
 8003dc4:	40011000 	.word	0x40011000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	20000094 	.word	0x20000094

08003dd0 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08c      	sub	sp, #48	; 0x30
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSolenoidTask */
	uint8_t b = 0, temp, L[3] = {0,0,0}, timS[3] = {0,0,0};
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003dde:	4aa6      	ldr	r2, [pc, #664]	; (8004078 <StartSolenoidTask+0x2a8>)
 8003de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	4611      	mov	r1, r2
 8003de8:	8019      	strh	r1, [r3, #0]
 8003dea:	3302      	adds	r3, #2
 8003dec:	0c12      	lsrs	r2, r2, #16
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	4aa1      	ldr	r2, [pc, #644]	; (8004078 <StartSolenoidTask+0x2a8>)
 8003df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	4611      	mov	r1, r2
 8003dfa:	8019      	strh	r1, [r3, #0]
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	0c12      	lsrs	r2, r2, #16
 8003e00:	701a      	strb	r2, [r3, #0]
	uint32_t timT[3] = {0,0,0}, timF[3] = {10,10,10};
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
 8003e0e:	4a9b      	ldr	r2, [pc, #620]	; (800407c <StartSolenoidTask+0x2ac>)
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	/* Infinite loop */

  for(;;)
  {
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]) && (rain == 0) && (web[1] == 1))//run all the time if any timer elapses leave
 8003e1a:	e139      	b.n	8004090 <StartSolenoidTask+0x2c0>
	  {//loop and turn off solenoid then come back in and continue timing also only run while not anticipating rain and after dark

		  if(UserInfo[0] > b)//collecting new values
 8003e1c:	4b98      	ldr	r3, [pc, #608]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003e24:	429a      	cmp	r2, r3
 8003e26:	f080 808d 	bcs.w	8003f44 <StartSolenoidTask+0x174>
		  {
			  if(UserInfo[1] == 1)//on/off
 8003e2a:	4b95      	ldr	r3, [pc, #596]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d138      	bne.n	8003ea4 <StartSolenoidTask+0xd4>
			  {
				  if(UserInfo[2] == 1)//green one on/off
 8003e32:	4b93      	ldr	r3, [pc, #588]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003e34:	789b      	ldrb	r3, [r3, #2]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10e      	bne.n	8003e58 <StartSolenoidTask+0x88>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, ((UserInfo[3] + 1) %2));
 8003e3a:	4b91      	ldr	r3, [pc, #580]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003e3c:	78db      	ldrb	r3, [r3, #3]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	bfb8      	it	lt
 8003e48:	425b      	neglt	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	488c      	ldr	r0, [pc, #560]	; (8004084 <StartSolenoidTask+0x2b4>)
 8003e52:	f002 fa36 	bl	80062c2 <HAL_GPIO_WritePin>
 8003e56:	e06f      	b.n	8003f38 <StartSolenoidTask+0x168>
				  else if(UserInfo[2] == 2)//green two on/off
 8003e58:	4b89      	ldr	r3, [pc, #548]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003e5a:	789b      	ldrb	r3, [r3, #2]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d10e      	bne.n	8003e7e <StartSolenoidTask+0xae>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((UserInfo[3] + 1) %2));
 8003e60:	4b87      	ldr	r3, [pc, #540]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003e62:	78db      	ldrb	r3, [r3, #3]
 8003e64:	3301      	adds	r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	bfb8      	it	lt
 8003e6e:	425b      	neglt	r3, r3
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	2120      	movs	r1, #32
 8003e76:	4883      	ldr	r0, [pc, #524]	; (8004084 <StartSolenoidTask+0x2b4>)
 8003e78:	f002 fa23 	bl	80062c2 <HAL_GPIO_WritePin>
 8003e7c:	e05c      	b.n	8003f38 <StartSolenoidTask+0x168>
				  else if(UserInfo[2] == 3)//green three on/off
 8003e7e:	4b80      	ldr	r3, [pc, #512]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003e80:	789b      	ldrb	r3, [r3, #2]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d158      	bne.n	8003f38 <StartSolenoidTask+0x168>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((UserInfo[3] + 1) %2));
 8003e86:	4b7e      	ldr	r3, [pc, #504]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003e88:	78db      	ldrb	r3, [r3, #3]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	bfb8      	it	lt
 8003e94:	425b      	neglt	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2110      	movs	r1, #16
 8003e9c:	4879      	ldr	r0, [pc, #484]	; (8004084 <StartSolenoidTask+0x2b4>)
 8003e9e:	f002 fa10 	bl	80062c2 <HAL_GPIO_WritePin>
 8003ea2:	e049      	b.n	8003f38 <StartSolenoidTask+0x168>
			  }
			  else if(UserInfo[1] == 2)//timer
 8003ea4:	4b76      	ldr	r3, [pc, #472]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d145      	bne.n	8003f38 <StartSolenoidTask+0x168>
			  {
				  timF[UserInfo[2]-1] = UserInfo[3];//set final time
 8003eac:	4b74      	ldr	r3, [pc, #464]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003eae:	78da      	ldrb	r2, [r3, #3]
 8003eb0:	4b73      	ldr	r3, [pc, #460]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003eb2:	789b      	ldrb	r3, [r3, #2]
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003ebc:	440b      	add	r3, r1
 8003ebe:	f843 2c24 	str.w	r2, [r3, #-36]
				  timS[UserInfo[2]-1] =__HAL_TIM_GET_COUNTER(&htim2);
 8003ec2:	4b71      	ldr	r3, [pc, #452]	; (8004088 <StartSolenoidTask+0x2b8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec8:	4b6d      	ldr	r3, [pc, #436]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003eca:	789b      	ldrb	r3, [r3, #2]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003ed4:	440b      	add	r3, r1
 8003ed6:	f803 2c0c 	strb.w	r2, [r3, #-12]
				  if(UserInfo[2] == 1)//green one on
 8003eda:	4b69      	ldr	r3, [pc, #420]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003edc:	789b      	ldrb	r3, [r3, #2]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d10b      	bne.n	8003efa <StartSolenoidTask+0x12a>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	2180      	movs	r1, #128	; 0x80
 8003ee6:	4867      	ldr	r0, [pc, #412]	; (8004084 <StartSolenoidTask+0x2b4>)
 8003ee8:	f002 f9eb 	bl	80062c2 <HAL_GPIO_WritePin>
					  timS[0] = __HAL_TIM_GET_COUNTER(&htim2);
 8003eec:	4b66      	ldr	r3, [pc, #408]	; (8004088 <StartSolenoidTask+0x2b8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8003ef8:	e01e      	b.n	8003f38 <StartSolenoidTask+0x168>
				  }
				  else if(UserInfo[2] == 2)//green two on
 8003efa:	4b61      	ldr	r3, [pc, #388]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003efc:	789b      	ldrb	r3, [r3, #2]
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d10b      	bne.n	8003f1a <StartSolenoidTask+0x14a>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8003f02:	2201      	movs	r2, #1
 8003f04:	2120      	movs	r1, #32
 8003f06:	485f      	ldr	r0, [pc, #380]	; (8004084 <StartSolenoidTask+0x2b4>)
 8003f08:	f002 f9db 	bl	80062c2 <HAL_GPIO_WritePin>
					  timS[1] = __HAL_TIM_GET_COUNTER(&htim2);
 8003f0c:	4b5e      	ldr	r3, [pc, #376]	; (8004088 <StartSolenoidTask+0x2b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003f18:	e00e      	b.n	8003f38 <StartSolenoidTask+0x168>
				  }
				  else if(UserInfo[2] == 3)//green three on
 8003f1a:	4b59      	ldr	r3, [pc, #356]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003f1c:	789b      	ldrb	r3, [r3, #2]
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d10a      	bne.n	8003f38 <StartSolenoidTask+0x168>
				  {
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003f22:	2201      	movs	r2, #1
 8003f24:	2110      	movs	r1, #16
 8003f26:	4857      	ldr	r0, [pc, #348]	; (8004084 <StartSolenoidTask+0x2b4>)
 8003f28:	f002 f9cb 	bl	80062c2 <HAL_GPIO_WritePin>
					  timS[2] = __HAL_TIM_GET_COUNTER(&htim2);
 8003f2c:	4b56      	ldr	r3, [pc, #344]	; (8004088 <StartSolenoidTask+0x2b8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				  }
			  }
			  UserInfo[0]--;//reset new info check
 8003f38:	4b51      	ldr	r3, [pc, #324]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <StartSolenoidTask+0x2b0>)
 8003f42:	701a      	strb	r2, [r3, #0]
		  }
		  //running timers if we have a time set for any solenoid
		  if(timF[0] != 10)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b0a      	cmp	r3, #10
 8003f48:	d02f      	beq.n	8003faa <StartSolenoidTask+0x1da>
		  {
			  if(timS[0] != 0)//if start value isn't in reset state
 8003f4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <StartSolenoidTask+0x192>
			  {
				  timF[0] = timF[0] + timS[0];
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003f58:	4413      	add	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
				  timS[0] = 0;//set start time to reset state now
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8003f62:	4b49      	ldr	r3, [pc, #292]	; (8004088 <StartSolenoidTask+0x2b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[0])
 8003f6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f70:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d20b      	bcs.n	8003f90 <StartSolenoidTask+0x1c0>
				  timT[0] = timT[0] + temp + 65535 - L[0];// if timer rolled over calc total time now
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f7e:	4413      	add	r3, r2
 8003f80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003f8a:	33ff      	adds	r3, #255	; 0xff
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	e007      	b.n	8003fa0 <StartSolenoidTask+0x1d0>

			  else
				  timT[0] = timT[0] + (temp - L[0]);// if timer didn't roll over calc total time now
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003f96:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003f9a:	1a52      	subs	r2, r2, r1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
			  L[0] = temp;
 8003fa0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003fa4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003fa8:	e072      	b.n	8004090 <StartSolenoidTask+0x2c0>
		  }
		  else if(timF[1] != 10)
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b0a      	cmp	r3, #10
 8003fae:	d02f      	beq.n	8004010 <StartSolenoidTask+0x240>
		  {
			  if(timS[1] != 0)//if start value isn't in reset state
 8003fb0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <StartSolenoidTask+0x1f8>
			  {
				  timF[1] = timF[1] + timS[1];
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003fbe:	4413      	add	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
				  timS[1] = 0;//set start time to reset state now
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <StartSolenoidTask+0x2b8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[1])
 8003fd2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003fd6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d20b      	bcs.n	8003ff6 <StartSolenoidTask+0x226>
				  timT[1] = timT[1] + temp + 65535 - L[1];// if timer rolled over calc total time now
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003ff0:	33ff      	adds	r3, #255	; 0xff
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	e007      	b.n	8004006 <StartSolenoidTask+0x236>

			  else
				  timT[1] = timT[1] + (temp - L[1]);// if timer didn't roll over calc total time now
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003ffc:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8004000:	1a52      	subs	r2, r2, r1
 8004002:	4413      	add	r3, r2
 8004004:	61fb      	str	r3, [r7, #28]
			  L[1] = temp;
 8004006:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800400a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800400e:	e03f      	b.n	8004090 <StartSolenoidTask+0x2c0>
		  }
		  else if(timF[2] != 10)
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2b0a      	cmp	r3, #10
 8004014:	d03a      	beq.n	800408c <StartSolenoidTask+0x2bc>
		  {
			  if(timS[2] != 0)//if start value isn't in reset state
 8004016:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <StartSolenoidTask+0x25e>
			  {
				  timF[2] = timF[2] + timS[2];
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004024:	4413      	add	r3, r2
 8004026:	617b      	str	r3, [r7, #20]
				  timS[2] = 0;//set start time to reset state now
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 800402e:	4b16      	ldr	r3, [pc, #88]	; (8004088 <StartSolenoidTask+0x2b8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[2])
 8004038:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800403c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004040:	429a      	cmp	r2, r3
 8004042:	d20b      	bcs.n	800405c <StartSolenoidTask+0x28c>
				  timT[2] = timT[2] + temp + 65535 - L[2];// if timer rolled over calc total time now
 8004044:	6a3a      	ldr	r2, [r7, #32]
 8004046:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800404a:	4413      	add	r3, r2
 800404c:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004056:	33ff      	adds	r3, #255	; 0xff
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	e007      	b.n	800406c <StartSolenoidTask+0x29c>

			  else
				  timT[2] = timT[2] + (temp - L[2]);// if timer didn't roll over calc total time now
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004062:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004066:	1a52      	subs	r2, r2, r1
 8004068:	4413      	add	r3, r2
 800406a:	623b      	str	r3, [r7, #32]
			  L[2] = temp;
 800406c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004074:	e00c      	b.n	8004090 <StartSolenoidTask+0x2c0>
 8004076:	bf00      	nop
 8004078:	0800aca4 	.word	0x0800aca4
 800407c:	0800aca8 	.word	0x0800aca8
 8004080:	20000094 	.word	0x20000094
 8004084:	40010c00 	.word	0x40010c00
 8004088:	200028f0 	.word	0x200028f0
		  }
		  else
			  timT[0] = 11;//reset for no timer
 800408c:	230b      	movs	r3, #11
 800408e:	61bb      	str	r3, [r7, #24]
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]) && (rain == 0) && (web[1] == 1))//run all the time if any timer elapses leave
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	429a      	cmp	r2, r3
 8004096:	d210      	bcs.n	80040ba <StartSolenoidTask+0x2ea>
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	429a      	cmp	r2, r3
 800409e:	d20c      	bcs.n	80040ba <StartSolenoidTask+0x2ea>
 80040a0:	6a3a      	ldr	r2, [r7, #32]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d208      	bcs.n	80040ba <StartSolenoidTask+0x2ea>
 80040a8:	4b5c      	ldr	r3, [pc, #368]	; (800421c <StartSolenoidTask+0x44c>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <StartSolenoidTask+0x2ea>
 80040b0:	4b5b      	ldr	r3, [pc, #364]	; (8004220 <StartSolenoidTask+0x450>)
 80040b2:	785b      	ldrb	r3, [r3, #1]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	f43f aeb1 	beq.w	8003e1c <StartSolenoidTask+0x4c>
	  }


	  if(timT[0] == 11)// if infinite loop reset timer and head back int while loop this way we get an OS delay every time
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	2b0b      	cmp	r3, #11
 80040be:	d101      	bne.n	80040c4 <StartSolenoidTask+0x2f4>
		  timT[0] = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]

	  if(timT[0] >= timF[0])//reset solenoid 1 timings
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d333      	bcc.n	8004134 <StartSolenoidTask+0x364>
	  {
			Water[0] = Flow[0] * timT[0];
 80040cc:	4b55      	ldr	r3, [pc, #340]	; (8004224 <StartSolenoidTask+0x454>)
 80040ce:	881b      	ldrh	r3, [r3, #0]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	b292      	uxth	r2, r2
 80040d4:	fb02 f303 	mul.w	r3, r2, r3
 80040d8:	b29a      	uxth	r2, r3
 80040da:	4b53      	ldr	r3, [pc, #332]	; (8004228 <StartSolenoidTask+0x458>)
 80040dc:	801a      	strh	r2, [r3, #0]
			timT[0] = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	61bb      	str	r3, [r7, #24]
			timF[0] = 10;
 80040e2:	230a      	movs	r3, #10
 80040e4:	60fb      	str	r3, [r7, #12]
			liters[0] = Water[0] + Water[1] + Water[2];//set total water used
 80040e6:	4b50      	ldr	r3, [pc, #320]	; (8004228 <StartSolenoidTask+0x458>)
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	4b4f      	ldr	r3, [pc, #316]	; (8004228 <StartSolenoidTask+0x458>)
 80040ec:	885b      	ldrh	r3, [r3, #2]
 80040ee:	4413      	add	r3, r2
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <StartSolenoidTask+0x458>)
 80040f4:	889b      	ldrh	r3, [r3, #4]
 80040f6:	4413      	add	r3, r2
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	4b4c      	ldr	r3, [pc, #304]	; (800422c <StartSolenoidTask+0x45c>)
 80040fc:	801a      	strh	r2, [r3, #0]
			liters[1] = (liters[0]%10) + 0x30;
 80040fe:	4b4b      	ldr	r3, [pc, #300]	; (800422c <StartSolenoidTask+0x45c>)
 8004100:	881a      	ldrh	r2, [r3, #0]
 8004102:	4b4b      	ldr	r3, [pc, #300]	; (8004230 <StartSolenoidTask+0x460>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	08d9      	lsrs	r1, r3, #3
 800410a:	460b      	mov	r3, r1
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	b29b      	uxth	r3, r3
 8004116:	3330      	adds	r3, #48	; 0x30
 8004118:	b29a      	uxth	r2, r3
 800411a:	4b44      	ldr	r3, [pc, #272]	; (800422c <StartSolenoidTask+0x45c>)
 800411c:	805a      	strh	r2, [r3, #2]
			liters[0] = (liters[0]/10) + 0x30;
 800411e:	4b43      	ldr	r3, [pc, #268]	; (800422c <StartSolenoidTask+0x45c>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	4a43      	ldr	r2, [pc, #268]	; (8004230 <StartSolenoidTask+0x460>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	08db      	lsrs	r3, r3, #3
 800412a:	b29b      	uxth	r3, r3
 800412c:	3330      	adds	r3, #48	; 0x30
 800412e:	b29a      	uxth	r2, r3
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <StartSolenoidTask+0x45c>)
 8004132:	801a      	strh	r2, [r3, #0]
	  }
	  if(timT[1] >= timF[1])//reset solenoid 2 timings
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	429a      	cmp	r2, r3
 800413a:	d333      	bcc.n	80041a4 <StartSolenoidTask+0x3d4>
	  {
			Water[1] = Flow[1] * timT[1];
 800413c:	4b39      	ldr	r3, [pc, #228]	; (8004224 <StartSolenoidTask+0x454>)
 800413e:	885b      	ldrh	r3, [r3, #2]
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	b292      	uxth	r2, r2
 8004144:	fb02 f303 	mul.w	r3, r2, r3
 8004148:	b29a      	uxth	r2, r3
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <StartSolenoidTask+0x458>)
 800414c:	805a      	strh	r2, [r3, #2]
			timT[1] = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
			timF[1] = 10;
 8004152:	230a      	movs	r3, #10
 8004154:	613b      	str	r3, [r7, #16]
			liters[0] = Water[0] + Water[1] + Water[2];//set total water used
 8004156:	4b34      	ldr	r3, [pc, #208]	; (8004228 <StartSolenoidTask+0x458>)
 8004158:	881a      	ldrh	r2, [r3, #0]
 800415a:	4b33      	ldr	r3, [pc, #204]	; (8004228 <StartSolenoidTask+0x458>)
 800415c:	885b      	ldrh	r3, [r3, #2]
 800415e:	4413      	add	r3, r2
 8004160:	b29a      	uxth	r2, r3
 8004162:	4b31      	ldr	r3, [pc, #196]	; (8004228 <StartSolenoidTask+0x458>)
 8004164:	889b      	ldrh	r3, [r3, #4]
 8004166:	4413      	add	r3, r2
 8004168:	b29a      	uxth	r2, r3
 800416a:	4b30      	ldr	r3, [pc, #192]	; (800422c <StartSolenoidTask+0x45c>)
 800416c:	801a      	strh	r2, [r3, #0]
			liters[1] = (liters[0]%10) + 0x30;
 800416e:	4b2f      	ldr	r3, [pc, #188]	; (800422c <StartSolenoidTask+0x45c>)
 8004170:	881a      	ldrh	r2, [r3, #0]
 8004172:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <StartSolenoidTask+0x460>)
 8004174:	fba3 1302 	umull	r1, r3, r3, r2
 8004178:	08d9      	lsrs	r1, r3, #3
 800417a:	460b      	mov	r3, r1
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	b29b      	uxth	r3, r3
 8004186:	3330      	adds	r3, #48	; 0x30
 8004188:	b29a      	uxth	r2, r3
 800418a:	4b28      	ldr	r3, [pc, #160]	; (800422c <StartSolenoidTask+0x45c>)
 800418c:	805a      	strh	r2, [r3, #2]
			liters[0] = (liters[0]/10) + 0x30;
 800418e:	4b27      	ldr	r3, [pc, #156]	; (800422c <StartSolenoidTask+0x45c>)
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	4a27      	ldr	r2, [pc, #156]	; (8004230 <StartSolenoidTask+0x460>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	b29b      	uxth	r3, r3
 800419c:	3330      	adds	r3, #48	; 0x30
 800419e:	b29a      	uxth	r2, r3
 80041a0:	4b22      	ldr	r3, [pc, #136]	; (800422c <StartSolenoidTask+0x45c>)
 80041a2:	801a      	strh	r2, [r3, #0]
	  }
	  if(timT[2] >= timF[2])//reset solenoid 3 timings
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d333      	bcc.n	8004214 <StartSolenoidTask+0x444>
	  {
			Water[2] = Flow[2] * timT[2];
 80041ac:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <StartSolenoidTask+0x454>)
 80041ae:	889b      	ldrh	r3, [r3, #4]
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	b292      	uxth	r2, r2
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <StartSolenoidTask+0x458>)
 80041bc:	809a      	strh	r2, [r3, #4]
			timT[2] = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
			timF[2] = 10;
 80041c2:	230a      	movs	r3, #10
 80041c4:	617b      	str	r3, [r7, #20]
			liters[0] = Water[0] + Water[1] + Water[2];//set total water used
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <StartSolenoidTask+0x458>)
 80041c8:	881a      	ldrh	r2, [r3, #0]
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <StartSolenoidTask+0x458>)
 80041cc:	885b      	ldrh	r3, [r3, #2]
 80041ce:	4413      	add	r3, r2
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <StartSolenoidTask+0x458>)
 80041d4:	889b      	ldrh	r3, [r3, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	b29a      	uxth	r2, r3
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <StartSolenoidTask+0x45c>)
 80041dc:	801a      	strh	r2, [r3, #0]
			liters[1] = (liters[0]%10) + 0x30;
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <StartSolenoidTask+0x45c>)
 80041e0:	881a      	ldrh	r2, [r3, #0]
 80041e2:	4b13      	ldr	r3, [pc, #76]	; (8004230 <StartSolenoidTask+0x460>)
 80041e4:	fba3 1302 	umull	r1, r3, r3, r2
 80041e8:	08d9      	lsrs	r1, r3, #3
 80041ea:	460b      	mov	r3, r1
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3330      	adds	r3, #48	; 0x30
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <StartSolenoidTask+0x45c>)
 80041fc:	805a      	strh	r2, [r3, #2]
			liters[0] = (liters[0]/10) + 0x30;
 80041fe:	4b0b      	ldr	r3, [pc, #44]	; (800422c <StartSolenoidTask+0x45c>)
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	4a0b      	ldr	r2, [pc, #44]	; (8004230 <StartSolenoidTask+0x460>)
 8004204:	fba2 2303 	umull	r2, r3, r2, r3
 8004208:	08db      	lsrs	r3, r3, #3
 800420a:	b29b      	uxth	r3, r3
 800420c:	3330      	adds	r3, #48	; 0x30
 800420e:	b29a      	uxth	r2, r3
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <StartSolenoidTask+0x45c>)
 8004212:	801a      	strh	r2, [r3, #0]
	  }
	  osDelay(1);
 8004214:	2001      	movs	r0, #1
 8004216:	f003 fe23 	bl	8007e60 <osDelay>
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]) && (rain == 0) && (web[1] == 1))//run all the time if any timer elapses leave
 800421a:	e739      	b.n	8004090 <StartSolenoidTask+0x2c0>
 800421c:	20002948 	.word	0x20002948
 8004220:	200000a8 	.word	0x200000a8
 8004224:	200000a0 	.word	0x200000a0
 8004228:	20000098 	.word	0x20000098
 800422c:	200025a8 	.word	0x200025a8
 8004230:	cccccccd 	.word	0xcccccccd

08004234 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b09c      	sub	sp, #112	; 0x70
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWeatherTask */
	uint16_t period[20], raw[20];
	uint16_t tickstart, tickend, totalP, totalT, a, b;
	uint16_t Pcount = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	HAL_TIM_Base_Start(&htim2);
 8004242:	4872      	ldr	r0, [pc, #456]	; (800440c <StartWeatherTask+0x1d8>)
 8004244:	f002 fe8c 	bl	8006f60 <HAL_TIM_Base_Start>

  /* Infinite loop */
  for(;;)
  {
		while(Pcount < 20)// get 20 readings of Relative humidity at a time
 8004248:	e056      	b.n	80042f8 <StartWeatherTask+0xc4>
		{
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 800424a:	bf00      	nop
 800424c:	2101      	movs	r1, #1
 800424e:	4870      	ldr	r0, [pc, #448]	; (8004410 <StartWeatherTask+0x1dc>)
 8004250:	f002 f820 	bl	8006294 <HAL_GPIO_ReadPin>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f8      	beq.n	800424c <StartWeatherTask+0x18>
			{}
			tickstart = __HAL_TIM_GET_COUNTER(&htim2);//on a 1 input measure a period
 800425a:	4b6c      	ldr	r3, [pc, #432]	; (800440c <StartWeatherTask+0x1d8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1)
 8004264:	bf00      	nop
 8004266:	2101      	movs	r1, #1
 8004268:	4869      	ldr	r0, [pc, #420]	; (8004410 <StartWeatherTask+0x1dc>)
 800426a:	f002 f813 	bl	8006294 <HAL_GPIO_ReadPin>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d0f8      	beq.n	8004266 <StartWeatherTask+0x32>
			{}
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8004274:	bf00      	nop
 8004276:	2101      	movs	r1, #1
 8004278:	4865      	ldr	r0, [pc, #404]	; (8004410 <StartWeatherTask+0x1dc>)
 800427a:	f002 f80b 	bl	8006294 <HAL_GPIO_ReadPin>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f8      	beq.n	8004276 <StartWeatherTask+0x42>
			{}
			tickend = __HAL_TIM_GET_COUNTER(&htim2);//end the period measurement after getting a 1 again
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <StartWeatherTask+0x1d8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
			if(tickend > tickstart)
 800428e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8004292:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004296:	429a      	cmp	r2, r3
 8004298:	d90e      	bls.n	80042b8 <StartWeatherTask+0x84>
				period[Pcount] = tickend - tickstart;
 800429a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800429e:	f8b7 1058 	ldrh.w	r1, [r7, #88]	; 0x58
 80042a2:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80042a6:	1a8a      	subs	r2, r1, r2
 80042a8:	b292      	uxth	r2, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80042b0:	440b      	add	r3, r1
 80042b2:	f823 2c40 	strh.w	r2, [r3, #-64]
 80042b6:	e00f      	b.n	80042d8 <StartWeatherTask+0xa4>
			else
				period[Pcount] = (65535 - tickstart) + tickend;
 80042b8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80042bc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80042c8:	3a01      	subs	r2, #1
 80042ca:	b292      	uxth	r2, r2
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80042d2:	440b      	add	r3, r1
 80042d4:	f823 2c40 	strh.w	r2, [r3, #-64]

			if(period[Pcount]< 1000)
 80042d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80042e2:	4413      	add	r3, r2
 80042e4:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 80042e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ec:	d204      	bcs.n	80042f8 <StartWeatherTask+0xc4>
				Pcount++;
 80042ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80042f2:	3301      	adds	r3, #1
 80042f4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		while(Pcount < 20)// get 20 readings of Relative humidity at a time
 80042f8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80042fc:	2b13      	cmp	r3, #19
 80042fe:	d9a4      	bls.n	800424a <StartWeatherTask+0x16>
		}// now with at least 20 readings of frequency
		 //get temperature value
		for(int i = 0; i < 20; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	663b      	str	r3, [r7, #96]	; 0x60
 8004304:	e016      	b.n	8004334 <StartWeatherTask+0x100>
		{
			HAL_ADC_Start(&hadc1);
 8004306:	4843      	ldr	r0, [pc, #268]	; (8004414 <StartWeatherTask+0x1e0>)
 8004308:	f001 fa28 	bl	800575c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800430c:	f04f 31ff 	mov.w	r1, #4294967295
 8004310:	4840      	ldr	r0, [pc, #256]	; (8004414 <StartWeatherTask+0x1e0>)
 8004312:	f001 fad1 	bl	80058b8 <HAL_ADC_PollForConversion>
			raw[i] = HAL_ADC_GetValue(&hadc1);
 8004316:	483f      	ldr	r0, [pc, #252]	; (8004414 <StartWeatherTask+0x1e0>)
 8004318:	f001 fbc8 	bl	8005aac <HAL_ADC_GetValue>
 800431c:	4603      	mov	r3, r0
 800431e:	b29a      	uxth	r2, r3
 8004320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8004328:	440b      	add	r3, r1
 800432a:	f823 2c68 	strh.w	r2, [r3, #-104]
		for(int i = 0; i < 20; i++)
 800432e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004330:	3301      	adds	r3, #1
 8004332:	663b      	str	r3, [r7, #96]	; 0x60
 8004334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004336:	2b13      	cmp	r3, #19
 8004338:	dde5      	ble.n	8004306 <StartWeatherTask+0xd2>
		}

		Pcount = 0;//reset counters and total values for entry of new totals
 800433a:	2300      	movs	r3, #0
 800433c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		totalT = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		totalP = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		for(int i = 0; i < 20; i++)
 800434c:	2300      	movs	r3, #0
 800434e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004350:	e01a      	b.n	8004388 <StartWeatherTask+0x154>
		{
			totalT = totalT +raw[i];
 8004352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800435a:	4413      	add	r3, r2
 800435c:	f833 2c68 	ldrh.w	r2, [r3, #-104]
 8004360:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004364:	4413      	add	r3, r2
 8004366:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			totalP = totalP +period[i];
 800436a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004372:	4413      	add	r3, r2
 8004374:	f833 2c40 	ldrh.w	r2, [r3, #-64]
 8004378:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800437c:	4413      	add	r3, r2
 800437e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		for(int i = 0; i < 20; i++)
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	3301      	adds	r3, #1
 8004386:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800438a:	2b13      	cmp	r3, #19
 800438c:	dde1      	ble.n	8004352 <StartWeatherTask+0x11e>
		}
		totalT = totalT/20;
 800438e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004392:	4a21      	ldr	r2, [pc, #132]	; (8004418 <StartWeatherTask+0x1e4>)
 8004394:	fba2 2303 	umull	r2, r3, r2, r3
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		totalP = totalP/20;//find average value after 20 readings of each
 800439e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043a2:	4a1d      	ldr	r2, [pc, #116]	; (8004418 <StartWeatherTask+0x1e4>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if(a != totalT || b != totalP)//check to make sure there is a new value being entered
 80043ae:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80043b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d105      	bne.n	80043c6 <StartWeatherTask+0x192>
 80043ba:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80043be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d01d      	beq.n	8004402 <StartWeatherTask+0x1ce>
		{
			Temperature = totalT;//assign values to variable if new
 80043c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fc f802 	bl	80003d4 <__aeabi_ui2d>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4911      	ldr	r1, [pc, #68]	; (800441c <StartWeatherTask+0x1e8>)
 80043d6:	e9c1 2300 	strd	r2, r3, [r1]
			Humidity = totalP;
 80043da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fb fff8 	bl	80003d4 <__aeabi_ui2d>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	490d      	ldr	r1, [pc, #52]	; (8004420 <StartWeatherTask+0x1ec>)
 80043ea:	e9c1 2300 	strd	r2, r3, [r1]
			calcRain();
 80043ee:	f7ff f82b 	bl	8003448 <calcRain>
			a = totalT;//assign check variables looking for new data
 80043f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043f6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
			b = totalP;
 80043fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043fe:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		}
    osDelay(1);
 8004402:	2001      	movs	r0, #1
 8004404:	f003 fd2c 	bl	8007e60 <osDelay>
		while(Pcount < 20)// get 20 readings of Relative humidity at a time
 8004408:	e776      	b.n	80042f8 <StartWeatherTask+0xc4>
 800440a:	bf00      	nop
 800440c:	200028f0 	.word	0x200028f0
 8004410:	40011000 	.word	0x40011000
 8004414:	20002864 	.word	0x20002864
 8004418:	cccccccd 	.word	0xcccccccd
 800441c:	200025e0 	.word	0x200025e0
 8004420:	20002940 	.word	0x20002940

08004424 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b09a      	sub	sp, #104	; 0x68
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlowTask */
  	uint8_t F = 0, L = 0, o[3] = {1,1,1};
 800442c:	2300      	movs	r3, #0
 800442e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004438:	4ac2      	ldr	r2, [pc, #776]	; (8004744 <StartFlowTask+0x320>)
 800443a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	4611      	mov	r1, r2
 8004442:	8019      	strh	r1, [r3, #0]
 8004444:	3302      	adds	r3, #2
 8004446:	0c12      	lsrs	r2, r2, #16
 8004448:	701a      	strb	r2, [r3, #0]
  	uint16_t f1 = 0, f2 = 0, f3 = 0, tickL =0, temp;
 800444a:	2300      	movs	r3, #0
 800444c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004450:	2300      	movs	r3, #0
 8004452:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004456:	2300      	movs	r3, #0
 8004458:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800445c:	2300      	movs	r3, #0
 800445e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  	uint16_t C[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	2228      	movs	r2, #40	; 0x28
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f006 f9be 	bl	800a7ec <memset>
  	uint32_t total = 0, tickS;
 8004470:	2300      	movs	r3, #0
 8004472:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)//if solenoid 1 is running and we haven't already measured its flow
 8004474:	2180      	movs	r1, #128	; 0x80
 8004476:	48b4      	ldr	r0, [pc, #720]	; (8004748 <StartFlowTask+0x324>)
 8004478:	f001 ff0c 	bl	8006294 <HAL_GPIO_ReadPin>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	f040 8096 	bne.w	80045b0 <StartFlowTask+0x18c>
 8004484:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004488:	2b01      	cmp	r3, #1
 800448a:	f040 8091 	bne.w	80045b0 <StartFlowTask+0x18c>
	  {
		  for(int j =0; j < 20; j++)//measure 20 flow values
 800448e:	2300      	movs	r3, #0
 8004490:	657b      	str	r3, [r7, #84]	; 0x54
 8004492:	e05a      	b.n	800454a <StartFlowTask+0x126>
		  {
			  HAL_TIM_Base_Start(&htim1);
 8004494:	48ad      	ldr	r0, [pc, #692]	; (800474c <StartFlowTask+0x328>)
 8004496:	f002 fd63 	bl	8006f60 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1) + 983025;//get start time add total time to be measured, 65535 ticks per sec*15s = 983025
 800449a:	4bac      	ldr	r3, [pc, #688]	; (800474c <StartFlowTask+0x328>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f503 236f 	add.w	r3, r3, #978944	; 0xef000
 80044a4:	f603 73f1 	addw	r3, r3, #4081	; 0xff1
 80044a8:	63bb      	str	r3, [r7, #56]	; 0x38
			  while(total< tickS)
 80044aa:	e042      	b.n	8004532 <StartFlowTask+0x10e>
			  {
				  F = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);//solenoid b7 is this sensors
 80044ac:	2140      	movs	r1, #64	; 0x40
 80044ae:	48a6      	ldr	r0, [pc, #664]	; (8004748 <StartFlowTask+0x324>)
 80044b0:	f001 fef0 	bl	8006294 <HAL_GPIO_ReadPin>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  if(F == 1 && F!=L)//if signal changed
 80044ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d115      	bne.n	80044ee <StartFlowTask+0xca>
 80044c2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80044c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d00f      	beq.n	80044ee <StartFlowTask+0xca>
				  {
					  C[j]++;//add to count
 80044ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80044d6:	4413      	add	r3, r2
 80044d8:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80044dc:	3301      	adds	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80044e8:	440b      	add	r3, r1
 80044ea:	f823 2c60 	strh.w	r2, [r3, #-96]
				  }
				  L=F;
 80044ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 80044f6:	4b95      	ldr	r3, [pc, #596]	; (800474c <StartFlowTask+0x328>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	86fb      	strh	r3, [r7, #54]	; 0x36
				  if (temp < tickL)
 80044fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004500:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004504:	429a      	cmp	r2, r3
 8004506:	d20a      	bcs.n	800451e <StartFlowTask+0xfa>
					  total = total + temp + (65535 - tickL);//if timer roll over, increment timer
 8004508:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800450a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450c:	441a      	add	r2, r3
 800450e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004518:	33ff      	adds	r3, #255	; 0xff
 800451a:	65bb      	str	r3, [r7, #88]	; 0x58
 800451c:	e006      	b.n	800452c <StartFlowTask+0x108>
				  else
					  total = total + temp - tickL;//if no timer roll over increment timer
 800451e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004520:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004522:	441a      	add	r2, r3
 8004524:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	65bb      	str	r3, [r7, #88]	; 0x58

				  tickL = temp;//reset timer roll over check value
 800452c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800452e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  while(total< tickS)
 8004532:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004536:	429a      	cmp	r2, r3
 8004538:	d3b8      	bcc.n	80044ac <StartFlowTask+0x88>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 800453a:	4884      	ldr	r0, [pc, #528]	; (800474c <StartFlowTask+0x328>)
 800453c:	f002 fd5a 	bl	8006ff4 <HAL_TIM_Base_Stop>
			  total = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int j =0; j < 20; j++)//measure 20 flow values
 8004544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004546:	3301      	adds	r3, #1
 8004548:	657b      	str	r3, [r7, #84]	; 0x54
 800454a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454c:	2b13      	cmp	r3, #19
 800454e:	dda1      	ble.n	8004494 <StartFlowTask+0x70>
		  }
		  f1 =0;
 8004550:	2300      	movs	r3, #0
 8004552:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  for(int j =0; j < 20; j++)// average all 20 flow rates
 8004556:	2300      	movs	r3, #0
 8004558:	653b      	str	r3, [r7, #80]	; 0x50
 800455a:	e016      	b.n	800458a <StartFlowTask+0x166>
		  {
			  f1 = f1 + C[j];
 800455c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004564:	4413      	add	r3, r2
 8004566:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 800456a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800456e:	4413      	add	r3, r2
 8004570:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
			  C[j] = 0;
 8004574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800457c:	4413      	add	r3, r2
 800457e:	2200      	movs	r2, #0
 8004580:	f823 2c60 	strh.w	r2, [r3, #-96]
		  for(int j =0; j < 20; j++)// average all 20 flow rates
 8004584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004586:	3301      	adds	r3, #1
 8004588:	653b      	str	r3, [r7, #80]	; 0x50
 800458a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800458c:	2b13      	cmp	r3, #19
 800458e:	dde5      	ble.n	800455c <StartFlowTask+0x138>
		  }
		  f1 = f1 / 100;
 8004590:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004594:	4a6e      	ldr	r2, [pc, #440]	; (8004750 <StartFlowTask+0x32c>)
 8004596:	fba2 2303 	umull	r2, r3, r2, r3
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		  Flow[0] = f1;//set flow rate
 80045a0:	4a6c      	ldr	r2, [pc, #432]	; (8004754 <StartFlowTask+0x330>)
 80045a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045a6:	8013      	strh	r3, [r2, #0]
		  o[0] = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80045ae:	e00d      	b.n	80045cc <StartFlowTask+0x1a8>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[0] == 0)//if solenoid 1 is off and we already measured flow rate
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	4865      	ldr	r0, [pc, #404]	; (8004748 <StartFlowTask+0x324>)
 80045b4:	f001 fe6e 	bl	8006294 <HAL_GPIO_ReadPin>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d106      	bne.n	80045cc <StartFlowTask+0x1a8>
 80045be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <StartFlowTask+0x1a8>
	  {
		  o[0] = 1;//meaning this watering is done and we have flow rate so reset check flag
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1 && o[1] == 1)//if solenoid 2 is running and we haven't already measured its flow
 80045cc:	2120      	movs	r1, #32
 80045ce:	485e      	ldr	r0, [pc, #376]	; (8004748 <StartFlowTask+0x324>)
 80045d0:	f001 fe60 	bl	8006294 <HAL_GPIO_ReadPin>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	f040 8096 	bne.w	8004708 <StartFlowTask+0x2e4>
 80045dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	f040 8091 	bne.w	8004708 <StartFlowTask+0x2e4>
	  {
		  for(int j =0; j < 20; j++)//measure 20 flow values
 80045e6:	2300      	movs	r3, #0
 80045e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ea:	e05a      	b.n	80046a2 <StartFlowTask+0x27e>
		  {
			  HAL_TIM_Base_Start(&htim1);
 80045ec:	4857      	ldr	r0, [pc, #348]	; (800474c <StartFlowTask+0x328>)
 80045ee:	f002 fcb7 	bl	8006f60 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1) + 983025;//get start time add total time to be measured, 65535 ticks per sec*15s = 983025
 80045f2:	4b56      	ldr	r3, [pc, #344]	; (800474c <StartFlowTask+0x328>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f503 236f 	add.w	r3, r3, #978944	; 0xef000
 80045fc:	f603 73f1 	addw	r3, r3, #4081	; 0xff1
 8004600:	63bb      	str	r3, [r7, #56]	; 0x38
			  while(total < tickS)
 8004602:	e042      	b.n	800468a <StartFlowTask+0x266>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);//solenoid b5 is this sensors
 8004604:	2102      	movs	r1, #2
 8004606:	4854      	ldr	r0, [pc, #336]	; (8004758 <StartFlowTask+0x334>)
 8004608:	f001 fe44 	bl	8006294 <HAL_GPIO_ReadPin>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  if(F == 1 && F!=L)//if signal changed
 8004612:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004616:	2b01      	cmp	r3, #1
 8004618:	d115      	bne.n	8004646 <StartFlowTask+0x222>
 800461a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800461e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004622:	429a      	cmp	r2, r3
 8004624:	d00f      	beq.n	8004646 <StartFlowTask+0x222>
				  {
					  C[j]++;//add one to count
 8004626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800462e:	4413      	add	r3, r2
 8004630:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8004634:	3301      	adds	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004640:	440b      	add	r3, r1
 8004642:	f823 2c60 	strh.w	r2, [r3, #-96]
				  }
				  L=F;
 8004646:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800464a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 800464e:	4b3f      	ldr	r3, [pc, #252]	; (800474c <StartFlowTask+0x328>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	86fb      	strh	r3, [r7, #54]	; 0x36
				  if (temp < tickL)
 8004656:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004658:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800465c:	429a      	cmp	r2, r3
 800465e:	d20a      	bcs.n	8004676 <StartFlowTask+0x252>
					  total = total + temp + (65535 - tickL);//if timer roll over, increment timer
 8004660:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004664:	441a      	add	r2, r3
 8004666:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8004670:	33ff      	adds	r3, #255	; 0xff
 8004672:	65bb      	str	r3, [r7, #88]	; 0x58
 8004674:	e006      	b.n	8004684 <StartFlowTask+0x260>

				  else
					  total = total + temp - tickL;//if no timer roll over increment timer
 8004676:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800467a:	441a      	add	r2, r3
 800467c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	65bb      	str	r3, [r7, #88]	; 0x58

				  tickL = temp;//reset timer roll over check value
 8004684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004686:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  while(total < tickS)
 800468a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	429a      	cmp	r2, r3
 8004690:	d3b8      	bcc.n	8004604 <StartFlowTask+0x1e0>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8004692:	482e      	ldr	r0, [pc, #184]	; (800474c <StartFlowTask+0x328>)
 8004694:	f002 fcae 	bl	8006ff4 <HAL_TIM_Base_Stop>
			  total = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int j =0; j < 20; j++)//measure 20 flow values
 800469c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469e:	3301      	adds	r3, #1
 80046a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	2b13      	cmp	r3, #19
 80046a6:	dda1      	ble.n	80045ec <StartFlowTask+0x1c8>
		  }
		  f2 = 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  for(int j =0; j < 20; j++)// average all 20 flow rates
 80046ae:	2300      	movs	r3, #0
 80046b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80046b2:	e016      	b.n	80046e2 <StartFlowTask+0x2be>
		  {
			  f2 = f2 + C[j];
 80046b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80046bc:	4413      	add	r3, r2
 80046be:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 80046c2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046c6:	4413      	add	r3, r2
 80046c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			  C[j] = 0;
 80046cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80046d4:	4413      	add	r3, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	f823 2c60 	strh.w	r2, [r3, #-96]
		  for(int j =0; j < 20; j++)// average all 20 flow rates
 80046dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046de:	3301      	adds	r3, #1
 80046e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e4:	2b13      	cmp	r3, #19
 80046e6:	dde5      	ble.n	80046b4 <StartFlowTask+0x290>
		  }
		  f2 = f2 / 100;
 80046e8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <StartFlowTask+0x32c>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  Flow[1] = f2;//set flow rate
 80046f8:	4a16      	ldr	r2, [pc, #88]	; (8004754 <StartFlowTask+0x330>)
 80046fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80046fe:	8053      	strh	r3, [r2, #2]
		  o[1] = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8004706:	e00d      	b.n	8004724 <StartFlowTask+0x300>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0 && o[1] == 0)//if solenoid 2 is off and we already measured flow rate
 8004708:	2120      	movs	r1, #32
 800470a:	480f      	ldr	r0, [pc, #60]	; (8004748 <StartFlowTask+0x324>)
 800470c:	f001 fdc2 	bl	8006294 <HAL_GPIO_ReadPin>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <StartFlowTask+0x300>
 8004716:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <StartFlowTask+0x300>
	  {
		  o[1] = 1;//meaning this watering is done and we have flow rate so reset check flag
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[2] == 1)//if solenoid 3 is running and we haven't already measured its flow
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	4808      	ldr	r0, [pc, #32]	; (8004748 <StartFlowTask+0x324>)
 8004728:	f001 fdb4 	bl	8006294 <HAL_GPIO_ReadPin>
 800472c:	4603      	mov	r3, r0
 800472e:	2b01      	cmp	r3, #1
 8004730:	f040 80a2 	bne.w	8004878 <StartFlowTask+0x454>
 8004734:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004738:	2b01      	cmp	r3, #1
 800473a:	f040 809d 	bne.w	8004878 <StartFlowTask+0x454>
	  {
		  for(int j =0; j < 20; j++)//measure 20 flow values
 800473e:	2300      	movs	r3, #0
 8004740:	647b      	str	r3, [r7, #68]	; 0x44
 8004742:	e066      	b.n	8004812 <StartFlowTask+0x3ee>
 8004744:	0800acb4 	.word	0x0800acb4
 8004748:	40010c00 	.word	0x40010c00
 800474c:	200028a0 	.word	0x200028a0
 8004750:	51eb851f 	.word	0x51eb851f
 8004754:	200000a0 	.word	0x200000a0
 8004758:	40011000 	.word	0x40011000
		  {
			  HAL_TIM_Base_Start(&htim1);
 800475c:	484f      	ldr	r0, [pc, #316]	; (800489c <StartFlowTask+0x478>)
 800475e:	f002 fbff 	bl	8006f60 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1) + 983025;//get start time add total time to be measured, 65535 ticks per sec*15s = 983025
 8004762:	4b4e      	ldr	r3, [pc, #312]	; (800489c <StartFlowTask+0x478>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	f503 236f 	add.w	r3, r3, #978944	; 0xef000
 800476c:	f603 73f1 	addw	r3, r3, #4081	; 0xff1
 8004770:	63bb      	str	r3, [r7, #56]	; 0x38
			  while(total < tickS)
 8004772:	e042      	b.n	80047fa <StartFlowTask+0x3d6>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//solenoid b4 is this sensors
 8004774:	2104      	movs	r1, #4
 8004776:	484a      	ldr	r0, [pc, #296]	; (80048a0 <StartFlowTask+0x47c>)
 8004778:	f001 fd8c 	bl	8006294 <HAL_GPIO_ReadPin>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  if(F == 1 && F!=L)//if signal changed
 8004782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004786:	2b01      	cmp	r3, #1
 8004788:	d115      	bne.n	80047b6 <StartFlowTask+0x392>
 800478a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800478e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004792:	429a      	cmp	r2, r3
 8004794:	d00f      	beq.n	80047b6 <StartFlowTask+0x392>
				  {
					  C[j]++;//add one to count
 8004796:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800479e:	4413      	add	r3, r2
 80047a0:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80047a4:	3301      	adds	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80047b0:	440b      	add	r3, r1
 80047b2:	f823 2c60 	strh.w	r2, [r3, #-96]
				  }
				  L=F;
 80047b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <StartFlowTask+0x478>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	86fb      	strh	r3, [r7, #54]	; 0x36
				  if (temp < tickL)
 80047c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80047c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d20a      	bcs.n	80047e6 <StartFlowTask+0x3c2>
					  total = total + temp + (65535 - tickL);//if timer roll over, increment timer
 80047d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80047d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d4:	441a      	add	r2, r3
 80047d6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80047e0:	33ff      	adds	r3, #255	; 0xff
 80047e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80047e4:	e006      	b.n	80047f4 <StartFlowTask+0x3d0>

				  else
					  total = total+ temp - tickL;//if no timer roll over increment timer
 80047e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80047e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ea:	441a      	add	r2, r3
 80047ec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	65bb      	str	r3, [r7, #88]	; 0x58

				  tickL = temp;//reset timer roll over check value
 80047f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047f6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			  while(total < tickS)
 80047fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3b8      	bcc.n	8004774 <StartFlowTask+0x350>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8004802:	4826      	ldr	r0, [pc, #152]	; (800489c <StartFlowTask+0x478>)
 8004804:	f002 fbf6 	bl	8006ff4 <HAL_TIM_Base_Stop>
			  total = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	65bb      	str	r3, [r7, #88]	; 0x58
		  for(int j =0; j < 20; j++)//measure 20 flow values
 800480c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480e:	3301      	adds	r3, #1
 8004810:	647b      	str	r3, [r7, #68]	; 0x44
 8004812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004814:	2b13      	cmp	r3, #19
 8004816:	dda1      	ble.n	800475c <StartFlowTask+0x338>
		  }
		  f3 = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		  for(int j =0; j < 20; j++)// average all 20 flow rates
 800481e:	2300      	movs	r3, #0
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
 8004822:	e016      	b.n	8004852 <StartFlowTask+0x42e>
		  {
			  f3 = f3 + C[j];
 8004824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800482c:	4413      	add	r3, r2
 800482e:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 8004832:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004836:	4413      	add	r3, r2
 8004838:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
			  C[j] = 0;
 800483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004844:	4413      	add	r3, r2
 8004846:	2200      	movs	r2, #0
 8004848:	f823 2c60 	strh.w	r2, [r3, #-96]
		  for(int j =0; j < 20; j++)// average all 20 flow rates
 800484c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800484e:	3301      	adds	r3, #1
 8004850:	643b      	str	r3, [r7, #64]	; 0x40
 8004852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004854:	2b13      	cmp	r3, #19
 8004856:	dde5      	ble.n	8004824 <StartFlowTask+0x400>
		  }
		  f3 = f3 / 100;
 8004858:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <StartFlowTask+0x480>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		  Flow[2] = f3;//set flow rate
 8004868:	4a0f      	ldr	r2, [pc, #60]	; (80048a8 <StartFlowTask+0x484>)
 800486a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800486e:	8093      	strh	r3, [r2, #4]
		  o[2] = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004876:	e00d      	b.n	8004894 <StartFlowTask+0x470>
	  }
	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[2] == 0)//if solenoid 2 is off and we already measured flow rate
 8004878:	2180      	movs	r1, #128	; 0x80
 800487a:	480c      	ldr	r0, [pc, #48]	; (80048ac <StartFlowTask+0x488>)
 800487c:	f001 fd0a 	bl	8006294 <HAL_GPIO_ReadPin>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <StartFlowTask+0x470>
 8004886:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <StartFlowTask+0x470>
	  {
		  o[2] = 1;//meaning this watering is done and we have flow rate so reset check flag
 800488e:	2301      	movs	r3, #1
 8004890:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	  }
	  osDelay(1);
 8004894:	2001      	movs	r0, #1
 8004896:	f003 fae3 	bl	8007e60 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)//if solenoid 1 is running and we haven't already measured its flow
 800489a:	e5eb      	b.n	8004474 <StartFlowTask+0x50>
 800489c:	200028a0 	.word	0x200028a0
 80048a0:	40011000 	.word	0x40011000
 80048a4:	51eb851f 	.word	0x51eb851f
 80048a8:	200000a0 	.word	0x200000a0
 80048ac:	40010c00 	.word	0x40010c00

080048b0 <StartWebsiteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebsiteTask */
void StartWebsiteTask(void *argument)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b090      	sub	sp, #64	; 0x40
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWebsiteTask */
	uint8_t BufferRX[50];
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_UART_Receive(&huart1, BufferRX, 2, 300) == HAL_OK)
 80048b8:	f107 010c 	add.w	r1, r7, #12
 80048bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80048c0:	2202      	movs	r2, #2
 80048c2:	480b      	ldr	r0, [pc, #44]	; (80048f0 <StartWebsiteTask+0x40>)
 80048c4:	f003 f845 	bl	8007952 <HAL_UART_Receive>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <StartWebsiteTask+0x36>
  	  {
  		web[0]++;
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <StartWebsiteTask+0x44>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <StartWebsiteTask+0x44>)
 80048d8:	701a      	strb	r2, [r3, #0]
  		web[1] = BufferRX[0];//Sun has set or not
 80048da:	7b3a      	ldrb	r2, [r7, #12]
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <StartWebsiteTask+0x44>)
 80048de:	705a      	strb	r2, [r3, #1]
  		web[2] = BufferRX[1];//Chance of precipitation
 80048e0:	7b7a      	ldrb	r2, [r7, #13]
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <StartWebsiteTask+0x44>)
 80048e4:	709a      	strb	r2, [r3, #2]
  	  }
    osDelay(1);
 80048e6:	2001      	movs	r0, #1
 80048e8:	f003 faba 	bl	8007e60 <osDelay>
	  if(HAL_UART_Receive(&huart1, BufferRX, 2, 300) == HAL_OK)
 80048ec:	e7e4      	b.n	80048b8 <StartWebsiteTask+0x8>
 80048ee:	bf00      	nop
 80048f0:	20002568 	.word	0x20002568
 80048f4:	200000a8 	.word	0x200000a8

080048f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800490a:	f000 fe0f 	bl	800552c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40000800 	.word	0x40000800

0800491c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004920:	b672      	cpsid	i
}
 8004922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004924:	e7fe      	b.n	8004924 <Error_Handler+0x8>
	...

08004928 <initializeNodes>:
 */

#include "sensorObjects.h"

void initializeNodes()
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	; 0x24
 800492c:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 800492e:	4a4f      	ldr	r2, [pc, #316]	; (8004a6c <initializeNodes+0x144>)
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004938:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 800493c:	4a4c      	ldr	r2, [pc, #304]	; (8004a70 <initializeNodes+0x148>)
 800493e:	f107 030c 	add.w	r3, r7, #12
 8004942:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004946:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 800494a:	4a4a      	ldr	r2, [pc, #296]	; (8004a74 <initializeNodes+0x14c>)
 800494c:	1d3b      	adds	r3, r7, #4
 800494e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004952:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 800495a:	2300      	movs	r3, #0
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e053      	b.n	8004a08 <initializeNodes+0xe0>
	{
		fairways[i].capacative[0]	= 0x30;
 8004960:	7ffa      	ldrb	r2, [r7, #31]
 8004962:	4945      	ldr	r1, [pc, #276]	; (8004a78 <initializeNodes+0x150>)
 8004964:	4613      	mov	r3, r2
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	4413      	add	r3, r2
 800496a:	440b      	add	r3, r1
 800496c:	330a      	adds	r3, #10
 800496e:	2230      	movs	r2, #48	; 0x30
 8004970:	701a      	strb	r2, [r3, #0]
		fairways[i].capacative[1]	= 0x30;
 8004972:	7ffa      	ldrb	r2, [r7, #31]
 8004974:	4940      	ldr	r1, [pc, #256]	; (8004a78 <initializeNodes+0x150>)
 8004976:	4613      	mov	r3, r2
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	4413      	add	r3, r2
 800497c:	440b      	add	r3, r1
 800497e:	330b      	adds	r3, #11
 8004980:	2230      	movs	r2, #48	; 0x30
 8004982:	701a      	strb	r2, [r3, #0]

		fairways[i].battery[0] 		= 0x38;
 8004984:	7ffa      	ldrb	r2, [r7, #31]
 8004986:	493c      	ldr	r1, [pc, #240]	; (8004a78 <initializeNodes+0x150>)
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	4413      	add	r3, r2
 800498e:	440b      	add	r3, r1
 8004990:	330c      	adds	r3, #12
 8004992:	2238      	movs	r2, #56	; 0x38
 8004994:	701a      	strb	r2, [r3, #0]
		fairways[i].battery[1] 		= 0x37;
 8004996:	7ffa      	ldrb	r2, [r7, #31]
 8004998:	4937      	ldr	r1, [pc, #220]	; (8004a78 <initializeNodes+0x150>)
 800499a:	4613      	mov	r3, r2
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	4413      	add	r3, r2
 80049a0:	440b      	add	r3, r1
 80049a2:	330d      	adds	r3, #13
 80049a4:	2237      	movs	r2, #55	; 0x37
 80049a6:	701a      	strb	r2, [r3, #0]

		fairways[i].resistive[0] 	= 0x30;
 80049a8:	7ffa      	ldrb	r2, [r7, #31]
 80049aa:	4933      	ldr	r1, [pc, #204]	; (8004a78 <initializeNodes+0x150>)
 80049ac:	4613      	mov	r3, r2
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	4413      	add	r3, r2
 80049b2:	440b      	add	r3, r1
 80049b4:	3308      	adds	r3, #8
 80049b6:	2230      	movs	r2, #48	; 0x30
 80049b8:	701a      	strb	r2, [r3, #0]
		fairways[i].resistive[1] 	= 0x30;
 80049ba:	7ffa      	ldrb	r2, [r7, #31]
 80049bc:	492e      	ldr	r1, [pc, #184]	; (8004a78 <initializeNodes+0x150>)
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	4413      	add	r3, r2
 80049c4:	440b      	add	r3, r1
 80049c6:	3309      	adds	r3, #9
 80049c8:	2230      	movs	r2, #48	; 0x30
 80049ca:	701a      	strb	r2, [r3, #0]

		fairways[i].temperature[0]	= 0x30;
 80049cc:	7ffa      	ldrb	r2, [r7, #31]
 80049ce:	492a      	ldr	r1, [pc, #168]	; (8004a78 <initializeNodes+0x150>)
 80049d0:	4613      	mov	r3, r2
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4413      	add	r3, r2
 80049d6:	440b      	add	r3, r1
 80049d8:	330e      	adds	r3, #14
 80049da:	2230      	movs	r2, #48	; 0x30
 80049dc:	701a      	strb	r2, [r3, #0]
		fairways[i].temperature[1]	= 0x30;
 80049de:	7ffa      	ldrb	r2, [r7, #31]
 80049e0:	4925      	ldr	r1, [pc, #148]	; (8004a78 <initializeNodes+0x150>)
 80049e2:	4613      	mov	r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	4413      	add	r3, r2
 80049e8:	440b      	add	r3, r1
 80049ea:	330f      	adds	r3, #15
 80049ec:	2230      	movs	r2, #48	; 0x30
 80049ee:	701a      	strb	r2, [r3, #0]
		fairways[i].temperature[2]	= 0x30;
 80049f0:	7ffa      	ldrb	r2, [r7, #31]
 80049f2:	4921      	ldr	r1, [pc, #132]	; (8004a78 <initializeNodes+0x150>)
 80049f4:	4613      	mov	r3, r2
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4413      	add	r3, r2
 80049fa:	440b      	add	r3, r1
 80049fc:	3310      	adds	r3, #16
 80049fe:	2230      	movs	r2, #48	; 0x30
 8004a00:	701a      	strb	r2, [r3, #0]
	for (i = 0; i<32; i++)
 8004a02:	7ffb      	ldrb	r3, [r7, #31]
 8004a04:	3301      	adds	r3, #1
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	2b1f      	cmp	r3, #31
 8004a0c:	d9a8      	bls.n	8004960 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	77fb      	strb	r3, [r7, #31]
 8004a12:	e022      	b.n	8004a5a <initializeNodes+0x132>
	{
		fairways[0].address[i] = BlueAddress[i];
 8004a14:	7ffa      	ldrb	r2, [r7, #31]
 8004a16:	7ffb      	ldrb	r3, [r7, #31]
 8004a18:	f107 0120 	add.w	r1, r7, #32
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8004a22:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <initializeNodes+0x150>)
 8004a24:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8004a26:	7ffa      	ldrb	r2, [r7, #31]
 8004a28:	7ffb      	ldrb	r3, [r7, #31]
 8004a2a:	f107 0120 	add.w	r1, r7, #32
 8004a2e:	440a      	add	r2, r1
 8004a30:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8004a34:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <initializeNodes+0x150>)
 8004a36:	4413      	add	r3, r2
 8004a38:	460a      	mov	r2, r1
 8004a3a:	745a      	strb	r2, [r3, #17]
		fairways[2].address[i] = RedAddress[i];
 8004a3c:	7ffa      	ldrb	r2, [r7, #31]
 8004a3e:	7ffb      	ldrb	r3, [r7, #31]
 8004a40:	f107 0120 	add.w	r1, r7, #32
 8004a44:	440a      	add	r2, r1
 8004a46:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8004a4a:	4a0b      	ldr	r2, [pc, #44]	; (8004a78 <initializeNodes+0x150>)
 8004a4c:	4413      	add	r3, r2
 8004a4e:	460a      	mov	r2, r1
 8004a50:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	for (i= 0; i<8; i++)
 8004a54:	7ffb      	ldrb	r3, [r7, #31]
 8004a56:	3301      	adds	r3, #1
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	7ffb      	ldrb	r3, [r7, #31]
 8004a5c:	2b07      	cmp	r3, #7
 8004a5e:	d9d9      	bls.n	8004a14 <initializeNodes+0xec>
	}

	return;
 8004a60:	bf00      	nop
}
 8004a62:	3724      	adds	r7, #36	; 0x24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	0800acb8 	.word	0x0800acb8
 8004a70:	0800acc0 	.word	0x0800acc0
 8004a74:	0800acc8 	.word	0x0800acc8
 8004a78:	200025f8 	.word	0x200025f8

08004a7c <processATResponse>:

//Process Data
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void processATResponse(uint8_t *ATResponse)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	int nodeNum = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
	uint8_t battAsASCII[] = {0,0};
 8004a88:	2300      	movs	r3, #0
 8004a8a:	813b      	strh	r3, [r7, #8]

	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e04e      	b.n	8004b30 <processATResponse+0xb4>
		{
			int match = 1;
 8004a92:	2301      	movs	r3, #1
 8004a94:	613b      	str	r3, [r7, #16]
			//Compare the address in the API Frame to the address of our known nodes.
			//the address bytes in the API frame are 5-12
			//if we find a different byte, we know its the wrong address and do not have a match
			for (int j = 0; j<8; j++)
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e015      	b.n	8004ac8 <processATResponse+0x4c>
			{
				if (ATResponse[j+5] != (fairways[nodeNum]).address[j])
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3305      	adds	r3, #5
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	7819      	ldrb	r1, [r3, #0]
 8004aa6:	4826      	ldr	r0, [pc, #152]	; (8004b40 <processATResponse+0xc4>)
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	4413      	add	r3, r2
 8004ab0:	18c2      	adds	r2, r0, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	4299      	cmp	r1, r3
 8004aba:	d002      	beq.n	8004ac2 <processATResponse+0x46>
				{
					match = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
					break; //exit the loop, its not this node
 8004ac0:	e005      	b.n	8004ace <processATResponse+0x52>
			for (int j = 0; j<8; j++)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b07      	cmp	r3, #7
 8004acc:	dde6      	ble.n	8004a9c <processATResponse+0x20>
				}
			}

			if (match == 1)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d12a      	bne.n	8004b2a <processATResponse+0xae>
			{
				//get which data type it is
				//no longer need the first "IF" because the temp is now coming from an ADC
				//we will keep in so we could add ambient field temp in the future.
				if (ATResponse[15] == 0x25 && ATResponse[16] == 0x56) //if the AT command was "%V"
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	330f      	adds	r3, #15
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b25      	cmp	r3, #37	; 0x25
 8004adc:	d123      	bne.n	8004b26 <processATResponse+0xaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b56      	cmp	r3, #86	; 0x56
 8004ae6:	d11e      	bne.n	8004b26 <processATResponse+0xaa>
				{
					calcPercent(ATResponse[18], ATResponse[19], battAsASCII);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3312      	adds	r3, #18
 8004aec:	7818      	ldrb	r0, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3313      	adds	r3, #19
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f107 0208 	add.w	r2, r7, #8
 8004af8:	4619      	mov	r1, r3
 8004afa:	f000 fad5 	bl	80050a8 <calcPercent>
					fairways[nodeNum].battery[0] = battAsASCII[0];
 8004afe:	7a38      	ldrb	r0, [r7, #8]
 8004b00:	490f      	ldr	r1, [pc, #60]	; (8004b40 <processATResponse+0xc4>)
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	4413      	add	r3, r2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	4602      	mov	r2, r0
 8004b10:	701a      	strb	r2, [r3, #0]
					fairways[nodeNum].battery[0] = battAsASCII[0];
 8004b12:	7a38      	ldrb	r0, [r7, #8]
 8004b14:	490a      	ldr	r1, [pc, #40]	; (8004b40 <processATResponse+0xc4>)
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	4413      	add	r3, r2
 8004b1e:	440b      	add	r3, r1
 8004b20:	330c      	adds	r3, #12
 8004b22:	4602      	mov	r2, r0
 8004b24:	701a      	strb	r2, [r3, #0]
				else
				{	//if we got an unexpected AT Command Type, give up and try again next time data is transmitted
					//uartInterruptInit(26);
				}

				nodeNum = 255; //break the loop. Break would work too but this explicitly breaks the correct loop if i move things.
 8004b26:	23ff      	movs	r3, #255	; 0xff
 8004b28:	617b      	str	r3, [r7, #20]
	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b23      	cmp	r3, #35	; 0x23
 8004b34:	ddad      	ble.n	8004a92 <processATResponse+0x16>
			}
		}

  return;
 8004b36:	bf00      	nop
}
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200025f8 	.word	0x200025f8

08004b44 <processIO>:

void processIO(uint8_t *ioData)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	uint8_t nodeNumber = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	75fb      	strb	r3, [r7, #23]
	uint8_t	 match = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	75bb      	strb	r3, [r7, #22]

	uint8_t dataAsASCII[] = {0,0,0};
 8004b54:	4a55      	ldr	r2, [pc, #340]	; (8004cac <processIO+0x168>)
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	8019      	strh	r1, [r3, #0]
 8004b60:	3302      	adds	r3, #2
 8004b62:	0c12      	lsrs	r2, r2, #16
 8004b64:	701a      	strb	r2, [r3, #0]

	if(!verifyChecksum(ioData))
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f9b2 	bl	8004ed0 <verifyChecksum>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f000 8098 	beq.w	8004ca4 <processIO+0x160>
		//Determine which sensor it belongs to
		//get the address, if it exists, put the data into it
		//if the addres doesnt already exist then make a new object to put data into
		//for now we will just use the three that we have

		for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 8004b74:	2300      	movs	r3, #0
 8004b76:	75fb      	strb	r3, [r7, #23]
 8004b78:	e08b      	b.n	8004c92 <processIO+0x14e>
		{
			match = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75bb      	strb	r3, [r7, #22]
			//Compare the address in the API Frame to the address of our known nodes.
			//the address bytes in the API frame are 5-12
			//if we find a different byte, we know its the wrong address and do not have a match
			for (int j = 0; j<8; j++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e015      	b.n	8004bb0 <processIO+0x6c>
			{
				if (ioData[j+4] != (fairways[nodeNumber]).address[j])
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	3304      	adds	r3, #4
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	7819      	ldrb	r1, [r3, #0]
 8004b8e:	7dfa      	ldrb	r2, [r7, #23]
 8004b90:	4847      	ldr	r0, [pc, #284]	; (8004cb0 <processIO+0x16c>)
 8004b92:	4613      	mov	r3, r2
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	4413      	add	r3, r2
 8004b98:	18c2      	adds	r2, r0, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	4299      	cmp	r1, r3
 8004ba2:	d002      	beq.n	8004baa <processIO+0x66>
				{
					match = 0;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	75bb      	strb	r3, [r7, #22]
					break;//it is not this nodeNumer (j value)
 8004ba8:	e005      	b.n	8004bb6 <processIO+0x72>
			for (int j = 0; j<8; j++)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3301      	adds	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b07      	cmp	r3, #7
 8004bb4:	dde6      	ble.n	8004b84 <processIO+0x40>
				}
			}

			if (match == 1)
 8004bb6:	7dbb      	ldrb	r3, [r7, #22]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d167      	bne.n	8004c8c <processIO+0x148>
			{
				calcTemp(ioData[19], ioData[20], dataAsASCII);//put the temp values into a three byte array
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3313      	adds	r3, #19
 8004bc0:	7818      	ldrb	r0, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3314      	adds	r3, #20
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	f107 020c 	add.w	r2, r7, #12
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f000 f9e1 	bl	8004f94 <calcTemp>
				fairways[nodeNumber].temperature[0]	= dataAsASCII[0];
 8004bd2:	7dfa      	ldrb	r2, [r7, #23]
 8004bd4:	7b38      	ldrb	r0, [r7, #12]
 8004bd6:	4936      	ldr	r1, [pc, #216]	; (8004cb0 <processIO+0x16c>)
 8004bd8:	4613      	mov	r3, r2
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	4413      	add	r3, r2
 8004bde:	440b      	add	r3, r1
 8004be0:	330e      	adds	r3, #14
 8004be2:	4602      	mov	r2, r0
 8004be4:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].temperature[1]	= dataAsASCII[1];
 8004be6:	7dfa      	ldrb	r2, [r7, #23]
 8004be8:	7b78      	ldrb	r0, [r7, #13]
 8004bea:	4931      	ldr	r1, [pc, #196]	; (8004cb0 <processIO+0x16c>)
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	4413      	add	r3, r2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	330f      	adds	r3, #15
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].temperature[2]	= dataAsASCII[2];
 8004bfa:	7dfa      	ldrb	r2, [r7, #23]
 8004bfc:	7bb8      	ldrb	r0, [r7, #14]
 8004bfe:	492c      	ldr	r1, [pc, #176]	; (8004cb0 <processIO+0x16c>)
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	4413      	add	r3, r2
 8004c06:	440b      	add	r3, r1
 8004c08:	3310      	adds	r3, #16
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	701a      	strb	r2, [r3, #0]

				calcPercent(ioData[23], ioData[24], dataAsASCII);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3317      	adds	r3, #23
 8004c12:	7818      	ldrb	r0, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3318      	adds	r3, #24
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	f107 020c 	add.w	r2, r7, #12
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f000 fa42 	bl	80050a8 <calcPercent>
				fairways[nodeNumber].resistive[0]	= dataAsASCII[0];
 8004c24:	7dfa      	ldrb	r2, [r7, #23]
 8004c26:	7b38      	ldrb	r0, [r7, #12]
 8004c28:	4921      	ldr	r1, [pc, #132]	; (8004cb0 <processIO+0x16c>)
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	4413      	add	r3, r2
 8004c30:	440b      	add	r3, r1
 8004c32:	3308      	adds	r3, #8
 8004c34:	4602      	mov	r2, r0
 8004c36:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].resistive[1]	= dataAsASCII[1];
 8004c38:	7dfa      	ldrb	r2, [r7, #23]
 8004c3a:	7b78      	ldrb	r0, [r7, #13]
 8004c3c:	491c      	ldr	r1, [pc, #112]	; (8004cb0 <processIO+0x16c>)
 8004c3e:	4613      	mov	r3, r2
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	4413      	add	r3, r2
 8004c44:	440b      	add	r3, r1
 8004c46:	3309      	adds	r3, #9
 8004c48:	4602      	mov	r2, r0
 8004c4a:	701a      	strb	r2, [r3, #0]

				calcPercent(ioData[21], ioData[22], dataAsASCII);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3315      	adds	r3, #21
 8004c50:	7818      	ldrb	r0, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3316      	adds	r3, #22
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	f107 020c 	add.w	r2, r7, #12
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f000 fa23 	bl	80050a8 <calcPercent>
				fairways[nodeNumber].capacative[0]	= dataAsASCII[0];
 8004c62:	7dfa      	ldrb	r2, [r7, #23]
 8004c64:	7b38      	ldrb	r0, [r7, #12]
 8004c66:	4912      	ldr	r1, [pc, #72]	; (8004cb0 <processIO+0x16c>)
 8004c68:	4613      	mov	r3, r2
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	4413      	add	r3, r2
 8004c6e:	440b      	add	r3, r1
 8004c70:	330a      	adds	r3, #10
 8004c72:	4602      	mov	r2, r0
 8004c74:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].capacative[1]	= dataAsASCII[1];
 8004c76:	7dfa      	ldrb	r2, [r7, #23]
 8004c78:	7b78      	ldrb	r0, [r7, #13]
 8004c7a:	490d      	ldr	r1, [pc, #52]	; (8004cb0 <processIO+0x16c>)
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	4413      	add	r3, r2
 8004c82:	440b      	add	r3, r1
 8004c84:	330b      	adds	r3, #11
 8004c86:	4602      	mov	r2, r0
 8004c88:	701a      	strb	r2, [r3, #0]

				break;
 8004c8a:	e006      	b.n	8004c9a <processIO+0x156>
		for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	75fb      	strb	r3, [r7, #23]
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	2b23      	cmp	r3, #35	; 0x23
 8004c96:	f67f af70 	bls.w	8004b7a <processIO+0x36>
		}
	}
	//__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_TC);

	//uartInterruptInit(21);
	sendBattRequest(nodeNumber);
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f809 	bl	8004cb4 <sendBattRequest>

  return;
 8004ca2:	e000      	b.n	8004ca6 <processIO+0x162>
		return;//include an error report here if time permits
 8004ca4:	bf00      	nop
}
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	0800acd0 	.word	0x0800acd0
 8004cb0:	200025f8 	.word	0x200025f8

08004cb4 <sendBattRequest>:

//Send Data Requests
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void sendBattRequest(uint8_t nodeNumber)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
	uartBufferTX[0] = 0x7E; //startDelim
 8004cbe:	4b3f      	ldr	r3, [pc, #252]	; (8004dbc <sendBattRequest+0x108>)
 8004cc0:	227e      	movs	r2, #126	; 0x7e
 8004cc2:	701a      	strb	r2, [r3, #0]
	uartBufferTX[1] = 0x00; //length byte 1
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	; (8004dbc <sendBattRequest+0x108>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	705a      	strb	r2, [r3, #1]
	uartBufferTX[2] = 0x0F; //length byte 2
 8004cca:	4b3c      	ldr	r3, [pc, #240]	; (8004dbc <sendBattRequest+0x108>)
 8004ccc:	220f      	movs	r2, #15
 8004cce:	709a      	strb	r2, [r3, #2]
	uartBufferTX[3] = 0x17; //Frame Type
 8004cd0:	4b3a      	ldr	r3, [pc, #232]	; (8004dbc <sendBattRequest+0x108>)
 8004cd2:	2217      	movs	r2, #23
 8004cd4:	70da      	strb	r2, [r3, #3]
	uartBufferTX[4] = 0x01; //Frame ID
 8004cd6:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <sendBattRequest+0x108>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	711a      	strb	r2, [r3, #4]
	uartBufferTX[5] = 	fairways[nodeNumber].address[0]; //start of 64bit address
 8004cdc:	79fa      	ldrb	r2, [r7, #7]
 8004cde:	4938      	ldr	r1, [pc, #224]	; (8004dc0 <sendBattRequest+0x10c>)
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4413      	add	r3, r2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <sendBattRequest+0x108>)
 8004cec:	715a      	strb	r2, [r3, #5]
	uartBufferTX[6] = 	fairways[nodeNumber].address[1];
 8004cee:	79fa      	ldrb	r2, [r7, #7]
 8004cf0:	4933      	ldr	r1, [pc, #204]	; (8004dc0 <sendBattRequest+0x10c>)
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	4413      	add	r3, r2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	4b2f      	ldr	r3, [pc, #188]	; (8004dbc <sendBattRequest+0x108>)
 8004d00:	719a      	strb	r2, [r3, #6]
	uartBufferTX[7] = 	fairways[nodeNumber].address[2];
 8004d02:	79fa      	ldrb	r2, [r7, #7]
 8004d04:	492e      	ldr	r1, [pc, #184]	; (8004dc0 <sendBattRequest+0x10c>)
 8004d06:	4613      	mov	r3, r2
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4413      	add	r3, r2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3302      	adds	r3, #2
 8004d10:	781a      	ldrb	r2, [r3, #0]
 8004d12:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <sendBattRequest+0x108>)
 8004d14:	71da      	strb	r2, [r3, #7]
	uartBufferTX[8] = 	fairways[nodeNumber].address[3];
 8004d16:	79fa      	ldrb	r2, [r7, #7]
 8004d18:	4929      	ldr	r1, [pc, #164]	; (8004dc0 <sendBattRequest+0x10c>)
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	011b      	lsls	r3, r3, #4
 8004d1e:	4413      	add	r3, r2
 8004d20:	440b      	add	r3, r1
 8004d22:	3303      	adds	r3, #3
 8004d24:	781a      	ldrb	r2, [r3, #0]
 8004d26:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <sendBattRequest+0x108>)
 8004d28:	721a      	strb	r2, [r3, #8]
	uartBufferTX[9] = 	fairways[nodeNumber].address[4];
 8004d2a:	79fa      	ldrb	r2, [r7, #7]
 8004d2c:	4924      	ldr	r1, [pc, #144]	; (8004dc0 <sendBattRequest+0x10c>)
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	4413      	add	r3, r2
 8004d34:	440b      	add	r3, r1
 8004d36:	3304      	adds	r3, #4
 8004d38:	781a      	ldrb	r2, [r3, #0]
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <sendBattRequest+0x108>)
 8004d3c:	725a      	strb	r2, [r3, #9]
	uartBufferTX[10] =	fairways[nodeNumber].address[5];
 8004d3e:	79fa      	ldrb	r2, [r7, #7]
 8004d40:	491f      	ldr	r1, [pc, #124]	; (8004dc0 <sendBattRequest+0x10c>)
 8004d42:	4613      	mov	r3, r2
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	4413      	add	r3, r2
 8004d48:	440b      	add	r3, r1
 8004d4a:	3305      	adds	r3, #5
 8004d4c:	781a      	ldrb	r2, [r3, #0]
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <sendBattRequest+0x108>)
 8004d50:	729a      	strb	r2, [r3, #10]
	uartBufferTX[11] = 	fairways[nodeNumber].address[6];
 8004d52:	79fa      	ldrb	r2, [r7, #7]
 8004d54:	491a      	ldr	r1, [pc, #104]	; (8004dc0 <sendBattRequest+0x10c>)
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	4413      	add	r3, r2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3306      	adds	r3, #6
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	4b16      	ldr	r3, [pc, #88]	; (8004dbc <sendBattRequest+0x108>)
 8004d64:	72da      	strb	r2, [r3, #11]
	uartBufferTX[12] = 	fairways[nodeNumber].address[7]; //last of 64bit address
 8004d66:	79fa      	ldrb	r2, [r7, #7]
 8004d68:	4915      	ldr	r1, [pc, #84]	; (8004dc0 <sendBattRequest+0x10c>)
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	4413      	add	r3, r2
 8004d70:	440b      	add	r3, r1
 8004d72:	3307      	adds	r3, #7
 8004d74:	781a      	ldrb	r2, [r3, #0]
 8004d76:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <sendBattRequest+0x108>)
 8004d78:	731a      	strb	r2, [r3, #12]
	uartBufferTX[13] = 0xFF;//Start of 16 bit address
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <sendBattRequest+0x108>)
 8004d7c:	22ff      	movs	r2, #255	; 0xff
 8004d7e:	735a      	strb	r2, [r3, #13]
	uartBufferTX[14] = 0xFE;//End of 16 bit address
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <sendBattRequest+0x108>)
 8004d82:	22fe      	movs	r2, #254	; 0xfe
 8004d84:	739a      	strb	r2, [r3, #14]
	uartBufferTX[15] = 0x02;//Command Options - 0x02 means apply
 8004d86:	4b0d      	ldr	r3, [pc, #52]	; (8004dbc <sendBattRequest+0x108>)
 8004d88:	2202      	movs	r2, #2
 8004d8a:	73da      	strb	r2, [r3, #15]
	uartBufferTX[16] = 0x25;//AT Command Byte 1 - 0x25 is '%'
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <sendBattRequest+0x108>)
 8004d8e:	2225      	movs	r2, #37	; 0x25
 8004d90:	741a      	strb	r2, [r3, #16]
	uartBufferTX[17] = 0x56;//AT Command Byte 2 - 0x56 is 'V'
 8004d92:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <sendBattRequest+0x108>)
 8004d94:	2256      	movs	r2, #86	; 0x56
 8004d96:	745a      	strb	r2, [r3, #17]
	uartBufferTX[18] = generateChecksum(uartBufferTX);//Checksum (as calculated by XCTU)
 8004d98:	4808      	ldr	r0, [pc, #32]	; (8004dbc <sendBattRequest+0x108>)
 8004d9a:	f000 f8ca 	bl	8004f32 <generateChecksum>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <sendBattRequest+0x108>)
 8004da4:	749a      	strb	r2, [r3, #18]

	HAL_UART_Transmit(&huart3, uartBufferTX, 19, 1);
 8004da6:	2301      	movs	r3, #1
 8004da8:	2213      	movs	r2, #19
 8004daa:	4904      	ldr	r1, [pc, #16]	; (8004dbc <sendBattRequest+0x108>)
 8004dac:	4805      	ldr	r0, [pc, #20]	; (8004dc4 <sendBattRequest+0x110>)
 8004dae:	f002 fd3e 	bl	800782e <HAL_UART_Transmit>
	return;
 8004db2:	bf00      	nop
}
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	2000294c 	.word	0x2000294c
 8004dc0:	200025f8 	.word	0x200025f8
 8004dc4:	20002528 	.word	0x20002528

08004dc8 <sensorToGateway>:
	HAL_UART_Transmit(&huart3, uartBufferTX, 19, 1);
	return;
}

void sensorToGateway(uint8_t nodeNumber)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	71fb      	strb	r3, [r7, #7]

        uartBufferTX[0] = 0x7E; //startDelim
 8004dd2:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <sensorToGateway+0xf8>)
 8004dd4:	227e      	movs	r2, #126	; 0x7e
 8004dd6:	701a      	strb	r2, [r3, #0]
        uartBufferTX[1] = (nodeNumber+0x30); //startDelim
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	3330      	adds	r3, #48	; 0x30
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4b38      	ldr	r3, [pc, #224]	; (8004ec0 <sensorToGateway+0xf8>)
 8004de0:	705a      	strb	r2, [r3, #1]
        uartBufferTX[2] = fairways[nodeNumber].temperature[0];//send temp
 8004de2:	79fa      	ldrb	r2, [r7, #7]
 8004de4:	4937      	ldr	r1, [pc, #220]	; (8004ec4 <sensorToGateway+0xfc>)
 8004de6:	4613      	mov	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	4413      	add	r3, r2
 8004dec:	440b      	add	r3, r1
 8004dee:	330e      	adds	r3, #14
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	4b33      	ldr	r3, [pc, #204]	; (8004ec0 <sensorToGateway+0xf8>)
 8004df4:	709a      	strb	r2, [r3, #2]
        uartBufferTX[3] = fairways[nodeNumber].temperature[1];
 8004df6:	79fa      	ldrb	r2, [r7, #7]
 8004df8:	4932      	ldr	r1, [pc, #200]	; (8004ec4 <sensorToGateway+0xfc>)
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	4413      	add	r3, r2
 8004e00:	440b      	add	r3, r1
 8004e02:	330f      	adds	r3, #15
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	4b2e      	ldr	r3, [pc, #184]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e08:	70da      	strb	r2, [r3, #3]
        uartBufferTX[4] = fairways[nodeNumber].temperature[2];
 8004e0a:	79fa      	ldrb	r2, [r7, #7]
 8004e0c:	492d      	ldr	r1, [pc, #180]	; (8004ec4 <sensorToGateway+0xfc>)
 8004e0e:	4613      	mov	r3, r2
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	4413      	add	r3, r2
 8004e14:	440b      	add	r3, r1
 8004e16:	3310      	adds	r3, #16
 8004e18:	781a      	ldrb	r2, [r3, #0]
 8004e1a:	4b29      	ldr	r3, [pc, #164]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e1c:	711a      	strb	r2, [r3, #4]
        uartBufferTX[5] = fairways[nodeNumber].resistive[0];//send salinity
 8004e1e:	79fa      	ldrb	r2, [r7, #7]
 8004e20:	4928      	ldr	r1, [pc, #160]	; (8004ec4 <sensorToGateway+0xfc>)
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	4413      	add	r3, r2
 8004e28:	440b      	add	r3, r1
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e30:	715a      	strb	r2, [r3, #5]
        uartBufferTX[6] = fairways[nodeNumber].resistive[1];
 8004e32:	79fa      	ldrb	r2, [r7, #7]
 8004e34:	4923      	ldr	r1, [pc, #140]	; (8004ec4 <sensorToGateway+0xfc>)
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	3309      	adds	r3, #9
 8004e40:	781a      	ldrb	r2, [r3, #0]
 8004e42:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e44:	719a      	strb	r2, [r3, #6]
        uartBufferTX[7] = fairways[nodeNumber].capacative[0];//send soil moisture
 8004e46:	79fa      	ldrb	r2, [r7, #7]
 8004e48:	491e      	ldr	r1, [pc, #120]	; (8004ec4 <sensorToGateway+0xfc>)
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	4413      	add	r3, r2
 8004e50:	440b      	add	r3, r1
 8004e52:	330a      	adds	r3, #10
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e58:	71da      	strb	r2, [r3, #7]
        uartBufferTX[8] = fairways[nodeNumber].capacative[1];
 8004e5a:	79fa      	ldrb	r2, [r7, #7]
 8004e5c:	4919      	ldr	r1, [pc, #100]	; (8004ec4 <sensorToGateway+0xfc>)
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	4413      	add	r3, r2
 8004e64:	440b      	add	r3, r1
 8004e66:	330b      	adds	r3, #11
 8004e68:	781a      	ldrb	r2, [r3, #0]
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e6c:	721a      	strb	r2, [r3, #8]
        uartBufferTX[9] = fairways[nodeNumber].battery[0];//send battery level
 8004e6e:	79fa      	ldrb	r2, [r7, #7]
 8004e70:	4914      	ldr	r1, [pc, #80]	; (8004ec4 <sensorToGateway+0xfc>)
 8004e72:	4613      	mov	r3, r2
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	4413      	add	r3, r2
 8004e78:	440b      	add	r3, r1
 8004e7a:	330c      	adds	r3, #12
 8004e7c:	781a      	ldrb	r2, [r3, #0]
 8004e7e:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e80:	725a      	strb	r2, [r3, #9]
        uartBufferTX[10] = fairways[nodeNumber].battery[1];
 8004e82:	79fa      	ldrb	r2, [r7, #7]
 8004e84:	490f      	ldr	r1, [pc, #60]	; (8004ec4 <sensorToGateway+0xfc>)
 8004e86:	4613      	mov	r3, r2
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	4413      	add	r3, r2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	330d      	adds	r3, #13
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e94:	729a      	strb	r2, [r3, #10]
        uartBufferTX[11] = liters[0];//send water used in L
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <sensorToGateway+0x100>)
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	4b08      	ldr	r3, [pc, #32]	; (8004ec0 <sensorToGateway+0xf8>)
 8004e9e:	72da      	strb	r2, [r3, #11]
        uartBufferTX[12] = liters[1];
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <sensorToGateway+0x100>)
 8004ea2:	885b      	ldrh	r3, [r3, #2]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <sensorToGateway+0xf8>)
 8004ea8:	731a      	strb	r2, [r3, #12]

        HAL_UART_Transmit(&huart1, uartBufferTX, 13, 1000);
 8004eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004eae:	220d      	movs	r2, #13
 8004eb0:	4903      	ldr	r1, [pc, #12]	; (8004ec0 <sensorToGateway+0xf8>)
 8004eb2:	4806      	ldr	r0, [pc, #24]	; (8004ecc <sensorToGateway+0x104>)
 8004eb4:	f002 fcbb 	bl	800782e <HAL_UART_Transmit>

return;
 8004eb8:	bf00      	nop
}
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	2000294c 	.word	0x2000294c
 8004ec4:	200025f8 	.word	0x200025f8
 8004ec8:	200025a8 	.word	0x200025a8
 8004ecc:	20002568 	.word	0x20002568

08004ed0 <verifyChecksum>:
//Checksum Functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t verifyChecksum(uint8_t *ioData)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	uint16_t lengthOfData = ioData[1] * 256 + ioData[2]; //this value should always be 17
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3301      	adds	r3, #1
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4413      	add	r3, r2
 8004eee:	81fb      	strh	r3, [r7, #14]
	uint16_t checkSumCompare = 0; //calculate the check sum and see if it matches the value recieved
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	82fb      	strh	r3, [r7, #22]
	/* to verify the checksum:
	 * Add all bytes including the checksum; do not include the delimiter and length.
	 * If the checksum is correct, the last two digits on the far right of the sum equal 0xFF.
	 */

	for (int i = 0; i<=lengthOfData; i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	e00b      	b.n	8004f12 <verifyChecksum+0x42>
	{	//i<=lengthOfData includes checksum value, as opposed to i<lengthOfData which does not
		checkSumCompare += ioData[i+3]; //i+3 becasue we skip the delim and length values
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	3303      	adds	r3, #3
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4413      	add	r3, r2
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	8afb      	ldrh	r3, [r7, #22]
 8004f08:	4413      	add	r3, r2
 8004f0a:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i<=lengthOfData; i++)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	89fb      	ldrh	r3, [r7, #14]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	ddef      	ble.n	8004efa <verifyChecksum+0x2a>
	}

	if ((checkSumCompare & 0xFF) == 0xFF) //clears all bits except lowest 8 then compares
 8004f1a:	8afb      	ldrh	r3, [r7, #22]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2bff      	cmp	r3, #255	; 0xff
 8004f20:	d101      	bne.n	8004f26 <verifyChecksum+0x56>
	{
		return 1;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <verifyChecksum+0x58>
	}
	else
	{
		return 0;
 8004f26:	2300      	movs	r3, #0
	}
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr

08004f32 <generateChecksum>:

uint8_t generateChecksum(uint8_t *frame)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
	 * Add all bytes of the packet, except the start delimiter 0x7E and the length (the second and third bytes).
	 * Keep only the lowest 8 bits from the result.
   	 * Subtract this quantity from 0xFF.
   	 */

	uint16_t length = frame[1]*256 + frame[2];
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	021b      	lsls	r3, r3, #8
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3302      	adds	r3, #2
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4413      	add	r3, r2
 8004f50:	817b      	strh	r3, [r7, #10]
	uint8_t i = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	73fb      	strb	r3, [r7, #15]
	uint16_t sum= 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	81bb      	strh	r3, [r7, #12]

	for (i=0; i<length; i++)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
 8004f5e:	e00b      	b.n	8004f78 <generateChecksum+0x46>
	{
		sum += frame[i+3];
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	3303      	adds	r3, #3
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4413      	add	r3, r2
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	89bb      	ldrh	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	81bb      	strh	r3, [r7, #12]
	for (i=0; i<length; i++)
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	3301      	adds	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	897a      	ldrh	r2, [r7, #10]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d8ee      	bhi.n	8004f60 <generateChecksum+0x2e>
		//sum = sum & 0xFF;//we only need the last two bits in the end
		//this clears off the high numbers that we dont need so we can use
		//a smaller data type
	}

	return (0xFF - sum);
 8004f82:	89bb      	ldrh	r3, [r7, #12]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	b2db      	uxtb	r3, r3
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr

08004f94 <calcTemp>:

//Calculations
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void calcTemp(uint8_t ADC0_19, uint8_t ADC0_20, uint8_t *threeByteArray)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	603a      	str	r2, [r7, #0]
 8004f9e:	71fb      	strb	r3, [r7, #7]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	71bb      	strb	r3, [r7, #6]
	float ADC = ADC0_19*256 + ADC0_20; //wrt real ground, range of 0 (0V) to 1023 (2.5V)
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	021a      	lsls	r2, r3, #8
 8004fa8:	79bb      	ldrb	r3, [r7, #6]
 8004faa:	4413      	add	r3, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fb fdf5 	bl	8000b9c <__aeabi_i2f>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	613b      	str	r3, [r7, #16]
	ADC = (ADC/1023)*2.5;
 8004fb6:	4938      	ldr	r1, [pc, #224]	; (8005098 <calcTemp+0x104>)
 8004fb8:	6938      	ldr	r0, [r7, #16]
 8004fba:	f7fb fef7 	bl	8000dac <__aeabi_fdiv>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	4936      	ldr	r1, [pc, #216]	; (800509c <calcTemp+0x108>)
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fb fe3e 	bl	8000c44 <__aeabi_fmul>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	613b      	str	r3, [r7, #16]
	int virtualGround = 1;//virtual ground is 1V ish
 8004fcc:	2301      	movs	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
	ADC = ADC - virtualGround;//wrt to virtual ground now
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f7fb fde3 	bl	8000b9c <__aeabi_i2f>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6938      	ldr	r0, [r7, #16]
 8004fdc:	f7fb fd28 	bl	8000a30 <__aeabi_fsub>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	613b      	str	r3, [r7, #16]
	ADC = ADC*100; // same as dividing by 0.01 mV/degree
 8004fe4:	492e      	ldr	r1, [pc, #184]	; (80050a0 <calcTemp+0x10c>)
 8004fe6:	6938      	ldr	r0, [r7, #16]
 8004fe8:	f7fb fe2c 	bl	8000c44 <__aeabi_fmul>
 8004fec:	4603      	mov	r3, r0
 8004fee:	613b      	str	r3, [r7, #16]
	int temperature = (int)ADC;//cast into uint16_t
 8004ff0:	6938      	ldr	r0, [r7, #16]
 8004ff2:	f7fb ff77 	bl	8000ee4 <__aeabi_f2iz>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	617b      	str	r3, [r7, #20]

	//we will assume the temperature is in the range of (-99, 99) because if its not, the grass is dead and the sensors dont work anyway
	if (temperature >= -99 && temperature <=99)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8005000:	db3b      	blt.n	800507a <calcTemp+0xe6>
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	2b63      	cmp	r3, #99	; 0x63
 8005006:	dc38      	bgt.n	800507a <calcTemp+0xe6>
	{
		if (temperature <0)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	da06      	bge.n	800501c <calcTemp+0x88>
		{
			threeByteArray[0] = 0x31;//1 means negative
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2231      	movs	r2, #49	; 0x31
 8005012:	701a      	strb	r2, [r3, #0]
			temperature *= -1;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	425b      	negs	r3, r3
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e002      	b.n	8005022 <calcTemp+0x8e>
		}
		else
		{
			threeByteArray[0] = 0x30;//0 means positive
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2230      	movs	r2, #48	; 0x30
 8005020:	701a      	strb	r2, [r3, #0]
		}
		threeByteArray[1] = temperature/10; //get the tens digit from 0 to 9
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	4a1f      	ldr	r2, [pc, #124]	; (80050a4 <calcTemp+0x110>)
 8005026:	fb82 1203 	smull	r1, r2, r2, r3
 800502a:	1092      	asrs	r2, r2, #2
 800502c:	17db      	asrs	r3, r3, #31
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
		threeByteArray[2] = temperature%10; //get the remainder from 0 to 9
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <calcTemp+0x110>)
 800503c:	fb83 1302 	smull	r1, r3, r3, r2
 8005040:	1099      	asrs	r1, r3, #2
 8005042:	17d3      	asrs	r3, r2, #31
 8005044:	1ac9      	subs	r1, r1, r3
 8005046:	460b      	mov	r3, r1
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	1ad1      	subs	r1, r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	3302      	adds	r3, #2
 8005054:	b2ca      	uxtb	r2, r1
 8005056:	701a      	strb	r2, [r3, #0]
		//turn the values into the hex value representing the ASCII symbol of that digit
		//^^this sentence is why I will never reccomend digi products
		//^^because why should I have to do this?
		threeByteArray[1] += 0x30;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	3301      	adds	r3, #1
 800505c:	781a      	ldrb	r2, [r3, #0]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	3301      	adds	r3, #1
 8005062:	3230      	adds	r2, #48	; 0x30
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
		threeByteArray[2] += 0x30;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	3302      	adds	r3, #2
 800506c:	781a      	ldrb	r2, [r3, #0]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	3302      	adds	r3, #2
 8005072:	3230      	adds	r2, #48	; 0x30
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	e00a      	b.n	8005090 <calcTemp+0xfc>
	}
	else //(The case of righteous fires cleansing the earth or hell froze over)
	{
		threeByteArray[0] = 0x2; //two means buggered Data
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2202      	movs	r2, #2
 800507e:	701a      	strb	r2, [r3, #0]
		threeByteArray[1] = 0x36; //arbitrary
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	3301      	adds	r3, #1
 8005084:	2236      	movs	r2, #54	; 0x36
 8005086:	701a      	strb	r2, [r3, #0]
		threeByteArray[2] = 0x39; //arbitrary
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	3302      	adds	r3, #2
 800508c:	2239      	movs	r2, #57	; 0x39
 800508e:	701a      	strb	r2, [r3, #0]
	}

	return;
 8005090:	bf00      	nop
}
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	447fc000 	.word	0x447fc000
 800509c:	40200000 	.word	0x40200000
 80050a0:	42c80000 	.word	0x42c80000
 80050a4:	66666667 	.word	0x66666667

080050a8 <calcPercent>:

void calcPercent(uint8_t ADC_A, uint8_t ADC_B, uint8_t *threeByteArray)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	603a      	str	r2, [r7, #0]
 80050b2:	71fb      	strb	r3, [r7, #7]
 80050b4:	460b      	mov	r3, r1
 80050b6:	71bb      	strb	r3, [r7, #6]
	//The function will convert the ADC value to a percentage based on the available range
	//then break the percentage down into a two digit int
	//the two digit int will be separated
	//the separated values will be replaced by their ascii representations

	float ADC = ADC_A*256 + ADC_B; //wrt real ground, range of 0 (0V) to 1023 (2.5V)
 80050b8:	79fb      	ldrb	r3, [r7, #7]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	79bb      	ldrb	r3, [r7, #6]
 80050be:	4413      	add	r3, r2
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fb fd6b 	bl	8000b9c <__aeabi_i2f>
 80050c6:	4603      	mov	r3, r0
 80050c8:	60fb      	str	r3, [r7, #12]
	ADC = (ADC/1023)*100; //divide by the full range, multiply by 100 to get the percent
 80050ca:	491e      	ldr	r1, [pc, #120]	; (8005144 <calcPercent+0x9c>)
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f7fb fe6d 	bl	8000dac <__aeabi_fdiv>
 80050d2:	4603      	mov	r3, r0
 80050d4:	491c      	ldr	r1, [pc, #112]	; (8005148 <calcPercent+0xa0>)
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb fdb4 	bl	8000c44 <__aeabi_fmul>
 80050dc:	4603      	mov	r3, r0
 80050de:	60fb      	str	r3, [r7, #12]
	int intADC = (int) ADC;
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f7fb feff 	bl	8000ee4 <__aeabi_f2iz>
 80050e6:	4603      	mov	r3, r0
 80050e8:	60bb      	str	r3, [r7, #8]

	threeByteArray[0] = intADC/10; //get the 10s digit
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a17      	ldr	r2, [pc, #92]	; (800514c <calcPercent+0xa4>)
 80050ee:	fb82 1203 	smull	r1, r2, r2, r3
 80050f2:	1092      	asrs	r2, r2, #2
 80050f4:	17db      	asrs	r3, r3, #31
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	701a      	strb	r2, [r3, #0]
	threeByteArray[1] = intADC%10; //get the ones digit
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4b12      	ldr	r3, [pc, #72]	; (800514c <calcPercent+0xa4>)
 8005102:	fb83 1302 	smull	r1, r3, r3, r2
 8005106:	1099      	asrs	r1, r3, #2
 8005108:	17d3      	asrs	r3, r2, #31
 800510a:	1ac9      	subs	r1, r1, r3
 800510c:	460b      	mov	r3, r1
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	1ad1      	subs	r1, r2, r3
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	b2ca      	uxtb	r2, r1
 800511c:	701a      	strb	r2, [r3, #0]

	threeByteArray[0] += 0x30;//gives the hex value of the ascii representation of the digit
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	3330      	adds	r3, #48	; 0x30
 8005124:	b2da      	uxtb	r2, r3
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	701a      	strb	r2, [r3, #0]
	threeByteArray[1] += 0x30;//gives the hex value of the ascii representation of the digit
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	3230      	adds	r2, #48	; 0x30
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]

	return;
 800513a:	bf00      	nop

}
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	447fc000 	.word	0x447fc000
 8005148:	42c80000 	.word	0x42c80000
 800514c:	66666667 	.word	0x66666667

08005150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005156:	4b18      	ldr	r3, [pc, #96]	; (80051b8 <HAL_MspInit+0x68>)
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	4a17      	ldr	r2, [pc, #92]	; (80051b8 <HAL_MspInit+0x68>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	6193      	str	r3, [r2, #24]
 8005162:	4b15      	ldr	r3, [pc, #84]	; (80051b8 <HAL_MspInit+0x68>)
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	60bb      	str	r3, [r7, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_MspInit+0x68>)
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	4a11      	ldr	r2, [pc, #68]	; (80051b8 <HAL_MspInit+0x68>)
 8005174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005178:	61d3      	str	r3, [r2, #28]
 800517a:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <HAL_MspInit+0x68>)
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005182:	607b      	str	r3, [r7, #4]
 8005184:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005186:	2200      	movs	r2, #0
 8005188:	210f      	movs	r1, #15
 800518a:	f06f 0001 	mvn.w	r0, #1
 800518e:	f000 fed2 	bl	8005f36 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005192:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <HAL_MspInit+0x6c>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	4a04      	ldr	r2, [pc, #16]	; (80051bc <HAL_MspInit+0x6c>)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40010000 	.word	0x40010000

080051c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c8:	f107 0310 	add.w	r3, r7, #16
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	605a      	str	r2, [r3, #4]
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a14      	ldr	r2, [pc, #80]	; (800522c <HAL_ADC_MspInit+0x6c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d121      	bne.n	8005224 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <HAL_ADC_MspInit+0x70>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	4a12      	ldr	r2, [pc, #72]	; (8005230 <HAL_ADC_MspInit+0x70>)
 80051e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051ea:	6193      	str	r3, [r2, #24]
 80051ec:	4b10      	ldr	r3, [pc, #64]	; (8005230 <HAL_ADC_MspInit+0x70>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051f8:	4b0d      	ldr	r3, [pc, #52]	; (8005230 <HAL_ADC_MspInit+0x70>)
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	4a0c      	ldr	r2, [pc, #48]	; (8005230 <HAL_ADC_MspInit+0x70>)
 80051fe:	f043 0310 	orr.w	r3, r3, #16
 8005202:	6193      	str	r3, [r2, #24]
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <HAL_ADC_MspInit+0x70>)
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005210:	2320      	movs	r3, #32
 8005212:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005214:	2303      	movs	r3, #3
 8005216:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005218:	f107 0310 	add.w	r3, r7, #16
 800521c:	4619      	mov	r1, r3
 800521e:	4805      	ldr	r0, [pc, #20]	; (8005234 <HAL_ADC_MspInit+0x74>)
 8005220:	f000 feb4 	bl	8005f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005224:	bf00      	nop
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40012400 	.word	0x40012400
 8005230:	40021000 	.word	0x40021000
 8005234:	40011000 	.word	0x40011000

08005238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a12      	ldr	r2, [pc, #72]	; (8005290 <HAL_TIM_Base_MspInit+0x58>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d10c      	bne.n	8005264 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800524a:	4b12      	ldr	r3, [pc, #72]	; (8005294 <HAL_TIM_Base_MspInit+0x5c>)
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	4a11      	ldr	r2, [pc, #68]	; (8005294 <HAL_TIM_Base_MspInit+0x5c>)
 8005250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005254:	6193      	str	r3, [r2, #24]
 8005256:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <HAL_TIM_Base_MspInit+0x5c>)
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005262:	e010      	b.n	8005286 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d10b      	bne.n	8005286 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <HAL_TIM_Base_MspInit+0x5c>)
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4a08      	ldr	r2, [pc, #32]	; (8005294 <HAL_TIM_Base_MspInit+0x5c>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	61d3      	str	r3, [r2, #28]
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_TIM_Base_MspInit+0x5c>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	68bb      	ldr	r3, [r7, #8]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40021000 	.word	0x40021000

08005298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08a      	sub	sp, #40	; 0x28
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a0:	f107 0318 	add.w	r3, r7, #24
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a38      	ldr	r2, [pc, #224]	; (8005394 <HAL_UART_MspInit+0xfc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d132      	bne.n	800531e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052b8:	4b37      	ldr	r3, [pc, #220]	; (8005398 <HAL_UART_MspInit+0x100>)
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	4a36      	ldr	r2, [pc, #216]	; (8005398 <HAL_UART_MspInit+0x100>)
 80052be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052c2:	6193      	str	r3, [r2, #24]
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_UART_MspInit+0x100>)
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d0:	4b31      	ldr	r3, [pc, #196]	; (8005398 <HAL_UART_MspInit+0x100>)
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	4a30      	ldr	r2, [pc, #192]	; (8005398 <HAL_UART_MspInit+0x100>)
 80052d6:	f043 0304 	orr.w	r3, r3, #4
 80052da:	6193      	str	r3, [r2, #24]
 80052dc:	4b2e      	ldr	r3, [pc, #184]	; (8005398 <HAL_UART_MspInit+0x100>)
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ee:	2302      	movs	r3, #2
 80052f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052f2:	2303      	movs	r3, #3
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f6:	f107 0318 	add.w	r3, r7, #24
 80052fa:	4619      	mov	r1, r3
 80052fc:	4827      	ldr	r0, [pc, #156]	; (800539c <HAL_UART_MspInit+0x104>)
 80052fe:	f000 fe45 	bl	8005f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530c:	2300      	movs	r3, #0
 800530e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005310:	f107 0318 	add.w	r3, r7, #24
 8005314:	4619      	mov	r1, r3
 8005316:	4821      	ldr	r0, [pc, #132]	; (800539c <HAL_UART_MspInit+0x104>)
 8005318:	f000 fe38 	bl	8005f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800531c:	e036      	b.n	800538c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <HAL_UART_MspInit+0x108>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d131      	bne.n	800538c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005328:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <HAL_UART_MspInit+0x100>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <HAL_UART_MspInit+0x100>)
 800532e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005332:	61d3      	str	r3, [r2, #28]
 8005334:	4b18      	ldr	r3, [pc, #96]	; (8005398 <HAL_UART_MspInit+0x100>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005340:	4b15      	ldr	r3, [pc, #84]	; (8005398 <HAL_UART_MspInit+0x100>)
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	4a14      	ldr	r2, [pc, #80]	; (8005398 <HAL_UART_MspInit+0x100>)
 8005346:	f043 0308 	orr.w	r3, r3, #8
 800534a:	6193      	str	r3, [r2, #24]
 800534c:	4b12      	ldr	r3, [pc, #72]	; (8005398 <HAL_UART_MspInit+0x100>)
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800535c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535e:	2302      	movs	r3, #2
 8005360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005362:	2303      	movs	r3, #3
 8005364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005366:	f107 0318 	add.w	r3, r7, #24
 800536a:	4619      	mov	r1, r3
 800536c:	480d      	ldr	r0, [pc, #52]	; (80053a4 <HAL_UART_MspInit+0x10c>)
 800536e:	f000 fe0d 	bl	8005f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005378:	2300      	movs	r3, #0
 800537a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800537c:	2300      	movs	r3, #0
 800537e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005380:	f107 0318 	add.w	r3, r7, #24
 8005384:	4619      	mov	r1, r3
 8005386:	4807      	ldr	r0, [pc, #28]	; (80053a4 <HAL_UART_MspInit+0x10c>)
 8005388:	f000 fe00 	bl	8005f8c <HAL_GPIO_Init>
}
 800538c:	bf00      	nop
 800538e:	3728      	adds	r7, #40	; 0x28
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40013800 	.word	0x40013800
 8005398:	40021000 	.word	0x40021000
 800539c:	40010800 	.word	0x40010800
 80053a0:	40004800 	.word	0x40004800
 80053a4:	40010c00 	.word	0x40010c00

080053a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80053b8:	2200      	movs	r2, #0
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	201e      	movs	r0, #30
 80053be:	f000 fdba 	bl	8005f36 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80053c2:	201e      	movs	r0, #30
 80053c4:	f000 fdd3 	bl	8005f6e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80053c8:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <HAL_InitTick+0xa0>)
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_InitTick+0xa0>)
 80053ce:	f043 0304 	orr.w	r3, r3, #4
 80053d2:	61d3      	str	r3, [r2, #28]
 80053d4:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <HAL_InitTick+0xa0>)
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80053e0:	f107 0210 	add.w	r2, r7, #16
 80053e4:	f107 0314 	add.w	r3, r7, #20
 80053e8:	4611      	mov	r1, r2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f001 fba0 	bl	8006b30 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80053f0:	f001 fb76 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 80053f4:	4603      	mov	r3, r0
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fc:	4a13      	ldr	r2, [pc, #76]	; (800544c <HAL_InitTick+0xa4>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0c9b      	lsrs	r3, r3, #18
 8005404:	3b01      	subs	r3, #1
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8005408:	4b11      	ldr	r3, [pc, #68]	; (8005450 <HAL_InitTick+0xa8>)
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <HAL_InitTick+0xac>)
 800540c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <HAL_InitTick+0xa8>)
 8005410:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005414:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8005416:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <HAL_InitTick+0xa8>)
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <HAL_InitTick+0xa8>)
 800541e:	2200      	movs	r2, #0
 8005420:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <HAL_InitTick+0xa8>)
 8005424:	2200      	movs	r2, #0
 8005426:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8005428:	4809      	ldr	r0, [pc, #36]	; (8005450 <HAL_InitTick+0xa8>)
 800542a:	f001 fd49 	bl	8006ec0 <HAL_TIM_Base_Init>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8005434:	4806      	ldr	r0, [pc, #24]	; (8005450 <HAL_InitTick+0xa8>)
 8005436:	f001 fe03 	bl	8007040 <HAL_TIM_Base_Start_IT>
 800543a:	4603      	mov	r3, r0
 800543c:	e000      	b.n	8005440 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
}
 8005440:	4618      	mov	r0, r3
 8005442:	3730      	adds	r7, #48	; 0x30
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	431bde83 	.word	0x431bde83
 8005450:	20002980 	.word	0x20002980
 8005454:	40000800 	.word	0x40000800

08005458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800545c:	e7fe      	b.n	800545c <NMI_Handler+0x4>

0800545e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800545e:	b480      	push	{r7}
 8005460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005462:	e7fe      	b.n	8005462 <HardFault_Handler+0x4>

08005464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005468:	e7fe      	b.n	8005468 <MemManage_Handler+0x4>

0800546a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800546e:	e7fe      	b.n	800546e <BusFault_Handler+0x4>

08005470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005474:	e7fe      	b.n	8005474 <UsageFault_Handler+0x4>

08005476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005476:	b480      	push	{r7}
 8005478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	46bd      	mov	sp, r7
 800547e:	bc80      	pop	{r7}
 8005480:	4770      	bx	lr
	...

08005484 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005488:	4802      	ldr	r0, [pc, #8]	; (8005494 <TIM4_IRQHandler+0x10>)
 800548a:	f001 fe2b 	bl	80070e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800548e:	bf00      	nop
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	20002980 	.word	0x20002980

08005498 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800549c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80054a0:	f000 ff28 	bl	80062f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054ac:	bf00      	nop
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80054b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80054b6:	e003      	b.n	80054c0 <LoopCopyDataInit>

080054b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80054ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80054bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80054be:	3104      	adds	r1, #4

080054c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80054c0:	480a      	ldr	r0, [pc, #40]	; (80054ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80054c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80054c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80054c8:	d3f6      	bcc.n	80054b8 <CopyDataInit>
  ldr r2, =_sbss
 80054ca:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80054cc:	e002      	b.n	80054d4 <LoopFillZerobss>

080054ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80054ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80054d0:	f842 3b04 	str.w	r3, [r2], #4

080054d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80054d4:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80054d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80054d8:	d3f9      	bcc.n	80054ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80054da:	f7ff ffe5 	bl	80054a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054de:	f005 f953 	bl	800a788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80054e2:	f7fd f8eb 	bl	80026bc <main>
  bx lr
 80054e6:	4770      	bx	lr
  ldr r3, =_sidata
 80054e8:	0800ae98 	.word	0x0800ae98
  ldr r0, =_sdata
 80054ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80054f0:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80054f4:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80054f8:	20002a0c 	.word	0x20002a0c

080054fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80054fc:	e7fe      	b.n	80054fc <ADC1_2_IRQHandler>
	...

08005500 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <HAL_Init+0x28>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a07      	ldr	r2, [pc, #28]	; (8005528 <HAL_Init+0x28>)
 800550a:	f043 0310 	orr.w	r3, r3, #16
 800550e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005510:	2003      	movs	r0, #3
 8005512:	f000 fd05 	bl	8005f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005516:	2000      	movs	r0, #0
 8005518:	f7ff ff46 	bl	80053a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800551c:	f7ff fe18 	bl	8005150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	40022000 	.word	0x40022000

0800552c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_IncTick+0x1c>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	461a      	mov	r2, r3
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_IncTick+0x20>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4413      	add	r3, r2
 800553c:	4a03      	ldr	r2, [pc, #12]	; (800554c <HAL_IncTick+0x20>)
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	20000008 	.word	0x20000008
 800554c:	200029c8 	.word	0x200029c8

08005550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return uwTick;
 8005554:	4b02      	ldr	r3, [pc, #8]	; (8005560 <HAL_GetTick+0x10>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	200029c8 	.word	0x200029c8

08005564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800556c:	f7ff fff0 	bl	8005550 <HAL_GetTick>
 8005570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d005      	beq.n	800558a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <HAL_Delay+0x44>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800558a:	bf00      	nop
 800558c:	f7ff ffe0 	bl	8005550 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	429a      	cmp	r2, r3
 800559a:	d8f7      	bhi.n	800558c <HAL_Delay+0x28>
  {
  }
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000008 	.word	0x20000008

080055ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80055bc:	2300      	movs	r3, #0
 80055be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0be      	b.n	800574c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff fde8 	bl	80051c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fbb1 	bl	8005d58 <ADC_ConversionStop_Disable>
 80055f6:	4603      	mov	r3, r0
 80055f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 8099 	bne.w	800573a <HAL_ADC_Init+0x18e>
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	2b00      	cmp	r3, #0
 800560c:	f040 8095 	bne.w	800573a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	f043 0202 	orr.w	r2, r3, #2
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800562c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7b1b      	ldrb	r3, [r3, #12]
 8005632:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005634:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	4313      	orrs	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005644:	d003      	beq.n	800564e <HAL_ADC_Init+0xa2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d102      	bne.n	8005654 <HAL_ADC_Init+0xa8>
 800564e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005652:	e000      	b.n	8005656 <HAL_ADC_Init+0xaa>
 8005654:	2300      	movs	r3, #0
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	7d1b      	ldrb	r3, [r3, #20]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d119      	bne.n	8005698 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	7b1b      	ldrb	r3, [r3, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	3b01      	subs	r3, #1
 8005672:	035a      	lsls	r2, r3, #13
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	e00b      	b.n	8005698 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005690:	f043 0201 	orr.w	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	689a      	ldr	r2, [r3, #8]
 80056b2:	4b28      	ldr	r3, [pc, #160]	; (8005754 <HAL_ADC_Init+0x1a8>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	430b      	orrs	r3, r1
 80056be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056c8:	d003      	beq.n	80056d2 <HAL_ADC_Init+0x126>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d104      	bne.n	80056dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	051b      	lsls	r3, r3, #20
 80056da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	4b18      	ldr	r3, [pc, #96]	; (8005758 <HAL_ADC_Init+0x1ac>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d10b      	bne.n	8005718 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570a:	f023 0303 	bic.w	r3, r3, #3
 800570e:	f043 0201 	orr.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005716:	e018      	b.n	800574a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571c:	f023 0312 	bic.w	r3, r3, #18
 8005720:	f043 0210 	orr.w	r2, r3, #16
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	f043 0201 	orr.w	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005738:	e007      	b.n	800574a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	f043 0210 	orr.w	r2, r3, #16
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800574a:	7dfb      	ldrb	r3, [r7, #23]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	ffe1f7fd 	.word	0xffe1f7fd
 8005758:	ff1f0efe 	.word	0xff1f0efe

0800575c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_ADC_Start+0x1a>
 8005772:	2302      	movs	r3, #2
 8005774:	e098      	b.n	80058a8 <HAL_ADC_Start+0x14c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa98 	bl	8005cb4 <ADC_Enable>
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f040 8087 	bne.w	800589e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005798:	f023 0301 	bic.w	r3, r3, #1
 800579c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a41      	ldr	r2, [pc, #260]	; (80058b0 <HAL_ADC_Start+0x154>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d105      	bne.n	80057ba <HAL_ADC_Start+0x5e>
 80057ae:	4b41      	ldr	r3, [pc, #260]	; (80058b4 <HAL_ADC_Start+0x158>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d115      	bne.n	80057e6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d026      	beq.n	8005822 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80057e4:	e01d      	b.n	8005822 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2f      	ldr	r2, [pc, #188]	; (80058b4 <HAL_ADC_Start+0x158>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_ADC_Start+0xaa>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2b      	ldr	r2, [pc, #172]	; (80058b0 <HAL_ADC_Start+0x154>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d10d      	bne.n	8005822 <HAL_ADC_Start+0xc6>
 8005806:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_ADC_Start+0x158>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800581a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	f023 0206 	bic.w	r2, r3, #6
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	62da      	str	r2, [r3, #44]	; 0x2c
 800583a:	e002      	b.n	8005842 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f06f 0202 	mvn.w	r2, #2
 8005852:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800585e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005862:	d113      	bne.n	800588c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005868:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <HAL_ADC_Start+0x154>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d105      	bne.n	800587a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <HAL_ADC_Start+0x158>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005876:	2b00      	cmp	r3, #0
 8005878:	d108      	bne.n	800588c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005888:	609a      	str	r2, [r3, #8]
 800588a:	e00c      	b.n	80058a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800589a:	609a      	str	r2, [r3, #8]
 800589c:	e003      	b.n	80058a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	40012800 	.word	0x40012800
 80058b4:	40012400 	.word	0x40012400

080058b8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80058c6:	2300      	movs	r3, #0
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80058ce:	f7ff fe3f 	bl	8005550 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e0c8      	b.n	8005a8c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d12a      	bne.n	800595e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005912:	2b00      	cmp	r3, #0
 8005914:	d123      	bne.n	800595e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005916:	e01a      	b.n	800594e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d016      	beq.n	800594e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <HAL_ADC_PollForConversion+0x7e>
 8005926:	f7ff fe13 	bl	8005550 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d20b      	bcs.n	800594e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	f043 0204 	orr.w	r2, r3, #4
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e09e      	b.n	8005a8c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0dd      	beq.n	8005918 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800595c:	e06c      	b.n	8005a38 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800595e:	4b4d      	ldr	r3, [pc, #308]	; (8005a94 <HAL_ADC_PollForConversion+0x1dc>)
 8005960:	681c      	ldr	r4, [r3, #0]
 8005962:	2002      	movs	r0, #2
 8005964:	f001 f9e8 	bl	8006d38 <HAL_RCCEx_GetPeriphCLKFreq>
 8005968:	4603      	mov	r3, r0
 800596a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6919      	ldr	r1, [r3, #16]
 8005974:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <HAL_ADC_PollForConversion+0x1e0>)
 8005976:	400b      	ands	r3, r1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d118      	bne.n	80059ae <HAL_ADC_PollForConversion+0xf6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68d9      	ldr	r1, [r3, #12]
 8005982:	4b46      	ldr	r3, [pc, #280]	; (8005a9c <HAL_ADC_PollForConversion+0x1e4>)
 8005984:	400b      	ands	r3, r1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d111      	bne.n	80059ae <HAL_ADC_PollForConversion+0xf6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6919      	ldr	r1, [r3, #16]
 8005990:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <HAL_ADC_PollForConversion+0x1e8>)
 8005992:	400b      	ands	r3, r1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d108      	bne.n	80059aa <HAL_ADC_PollForConversion+0xf2>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68d9      	ldr	r1, [r3, #12]
 800599e:	4b41      	ldr	r3, [pc, #260]	; (8005aa4 <HAL_ADC_PollForConversion+0x1ec>)
 80059a0:	400b      	ands	r3, r1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_ADC_PollForConversion+0xf2>
 80059a6:	2314      	movs	r3, #20
 80059a8:	e020      	b.n	80059ec <HAL_ADC_PollForConversion+0x134>
 80059aa:	2329      	movs	r3, #41	; 0x29
 80059ac:	e01e      	b.n	80059ec <HAL_ADC_PollForConversion+0x134>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6919      	ldr	r1, [r3, #16]
 80059b4:	4b3a      	ldr	r3, [pc, #232]	; (8005aa0 <HAL_ADC_PollForConversion+0x1e8>)
 80059b6:	400b      	ands	r3, r1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d106      	bne.n	80059ca <HAL_ADC_PollForConversion+0x112>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68d9      	ldr	r1, [r3, #12]
 80059c2:	4b38      	ldr	r3, [pc, #224]	; (8005aa4 <HAL_ADC_PollForConversion+0x1ec>)
 80059c4:	400b      	ands	r3, r1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <HAL_ADC_PollForConversion+0x12e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6919      	ldr	r1, [r3, #16]
 80059d0:	4b35      	ldr	r3, [pc, #212]	; (8005aa8 <HAL_ADC_PollForConversion+0x1f0>)
 80059d2:	400b      	ands	r3, r1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d108      	bne.n	80059ea <HAL_ADC_PollForConversion+0x132>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68d9      	ldr	r1, [r3, #12]
 80059de:	4b32      	ldr	r3, [pc, #200]	; (8005aa8 <HAL_ADC_PollForConversion+0x1f0>)
 80059e0:	400b      	ands	r3, r1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_ADC_PollForConversion+0x132>
 80059e6:	2354      	movs	r3, #84	; 0x54
 80059e8:	e000      	b.n	80059ec <HAL_ADC_PollForConversion+0x134>
 80059ea:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80059f2:	e01d      	b.n	8005a30 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fa:	d016      	beq.n	8005a2a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <HAL_ADC_PollForConversion+0x15a>
 8005a02:	f7ff fda5 	bl	8005550 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d20b      	bcs.n	8005a2a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	f043 0204 	orr.w	r2, r3, #4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e030      	b.n	8005a8c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d8dd      	bhi.n	80059f4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0212 	mvn.w	r2, #18
 8005a40:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005a58:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005a5c:	d115      	bne.n	8005a8a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d111      	bne.n	8005a8a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd90      	pop	{r4, r7, pc}
 8005a94:	20000000 	.word	0x20000000
 8005a98:	24924924 	.word	0x24924924
 8005a9c:	00924924 	.word	0x00924924
 8005aa0:	12492492 	.word	0x12492492
 8005aa4:	00492492 	.word	0x00492492
 8005aa8:	00249249 	.word	0x00249249

08005aac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x20>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e0dc      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x1da>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d81c      	bhi.n	8005b2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	3b05      	subs	r3, #5
 8005b06:	221f      	movs	r2, #31
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	4019      	ands	r1, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3b05      	subs	r3, #5
 8005b20:	fa00 f203 	lsl.w	r2, r0, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	635a      	str	r2, [r3, #52]	; 0x34
 8005b2c:	e03c      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b0c      	cmp	r3, #12
 8005b34:	d81c      	bhi.n	8005b70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	3b23      	subs	r3, #35	; 0x23
 8005b48:	221f      	movs	r2, #31
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	4019      	ands	r1, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	6818      	ldr	r0, [r3, #0]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	3b23      	subs	r3, #35	; 0x23
 8005b62:	fa00 f203 	lsl.w	r2, r0, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	631a      	str	r2, [r3, #48]	; 0x30
 8005b6e:	e01b      	b.n	8005ba8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	3b41      	subs	r3, #65	; 0x41
 8005b82:	221f      	movs	r2, #31
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	4019      	ands	r1, r3
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	685a      	ldr	r2, [r3, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	3b41      	subs	r3, #65	; 0x41
 8005b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d91c      	bls.n	8005bea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68d9      	ldr	r1, [r3, #12]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3b1e      	subs	r3, #30
 8005bc2:	2207      	movs	r2, #7
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	43db      	mvns	r3, r3
 8005bca:	4019      	ands	r1, r3
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	6898      	ldr	r0, [r3, #8]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	4413      	add	r3, r2
 8005bda:	3b1e      	subs	r3, #30
 8005bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	e019      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6919      	ldr	r1, [r3, #16]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	4413      	add	r3, r2
 8005bfa:	2207      	movs	r2, #7
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	4019      	ands	r1, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6898      	ldr	r0, [r3, #8]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	fa00 f203 	lsl.w	r2, r0, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d003      	beq.n	8005c2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005c2a:	2b11      	cmp	r3, #17
 8005c2c:	d132      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a1d      	ldr	r2, [pc, #116]	; (8005ca8 <HAL_ADC_ConfigChannel+0x1e4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d125      	bne.n	8005c84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d126      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005c54:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b10      	cmp	r3, #16
 8005c5c:	d11a      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c5e:	4b13      	ldr	r3, [pc, #76]	; (8005cac <HAL_ADC_ConfigChannel+0x1e8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a13      	ldr	r2, [pc, #76]	; (8005cb0 <HAL_ADC_ConfigChannel+0x1ec>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	0c9a      	lsrs	r2, r3, #18
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c74:	e002      	b.n	8005c7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f9      	bne.n	8005c76 <HAL_ADC_ConfigChannel+0x1b2>
 8005c82:	e007      	b.n	8005c94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c88:	f043 0220 	orr.w	r2, r3, #32
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr
 8005ca8:	40012400 	.word	0x40012400
 8005cac:	20000000 	.word	0x20000000
 8005cb0:	431bde83 	.word	0x431bde83

08005cb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d039      	beq.n	8005d46 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f042 0201 	orr.w	r2, r2, #1
 8005ce0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <ADC_Enable+0x9c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1b      	ldr	r2, [pc, #108]	; (8005d54 <ADC_Enable+0xa0>)
 8005ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cec:	0c9b      	lsrs	r3, r3, #18
 8005cee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005cf0:	e002      	b.n	8005cf8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f9      	bne.n	8005cf2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005cfe:	f7ff fc27 	bl	8005550 <HAL_GetTick>
 8005d02:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005d04:	e018      	b.n	8005d38 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005d06:	f7ff fc23 	bl	8005550 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d911      	bls.n	8005d38 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f043 0210 	orr.w	r2, r3, #16
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	f043 0201 	orr.w	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e007      	b.n	8005d48 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d1df      	bne.n	8005d06 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000000 	.word	0x20000000
 8005d54:	431bde83 	.word	0x431bde83

08005d58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d127      	bne.n	8005dc2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005d82:	f7ff fbe5 	bl	8005550 <HAL_GetTick>
 8005d86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005d88:	e014      	b.n	8005db4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005d8a:	f7ff fbe1 	bl	8005550 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d90d      	bls.n	8005db4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9c:	f043 0210 	orr.w	r2, r3, #16
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	f043 0201 	orr.w	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e007      	b.n	8005dc4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d0e3      	beq.n	8005d8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <__NVIC_SetPriorityGrouping+0x44>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005de8:	4013      	ands	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dfe:	4a04      	ldr	r2, [pc, #16]	; (8005e10 <__NVIC_SetPriorityGrouping+0x44>)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	60d3      	str	r3, [r2, #12]
}
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	e000ed00 	.word	0xe000ed00

08005e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e18:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <__NVIC_GetPriorityGrouping+0x18>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f003 0307 	and.w	r3, r3, #7
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	db0b      	blt.n	8005e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	f003 021f 	and.w	r2, r3, #31
 8005e48:	4906      	ldr	r1, [pc, #24]	; (8005e64 <__NVIC_EnableIRQ+0x34>)
 8005e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	2001      	movs	r0, #1
 8005e52:	fa00 f202 	lsl.w	r2, r0, r2
 8005e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bc80      	pop	{r7}
 8005e62:	4770      	bx	lr
 8005e64:	e000e100 	.word	0xe000e100

08005e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	6039      	str	r1, [r7, #0]
 8005e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	db0a      	blt.n	8005e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	490c      	ldr	r1, [pc, #48]	; (8005eb4 <__NVIC_SetPriority+0x4c>)
 8005e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e86:	0112      	lsls	r2, r2, #4
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e90:	e00a      	b.n	8005ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	4908      	ldr	r1, [pc, #32]	; (8005eb8 <__NVIC_SetPriority+0x50>)
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	3b04      	subs	r3, #4
 8005ea0:	0112      	lsls	r2, r2, #4
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	761a      	strb	r2, [r3, #24]
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	e000e100 	.word	0xe000e100
 8005eb8:	e000ed00 	.word	0xe000ed00

08005ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b089      	sub	sp, #36	; 0x24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f1c3 0307 	rsb	r3, r3, #7
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	bf28      	it	cs
 8005eda:	2304      	movcs	r3, #4
 8005edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	2b06      	cmp	r3, #6
 8005ee4:	d902      	bls.n	8005eec <NVIC_EncodePriority+0x30>
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	3b03      	subs	r3, #3
 8005eea:	e000      	b.n	8005eee <NVIC_EncodePriority+0x32>
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43da      	mvns	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	401a      	ands	r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f04:	f04f 31ff 	mov.w	r1, #4294967295
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0e:	43d9      	mvns	r1, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f14:	4313      	orrs	r3, r2
         );
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3724      	adds	r7, #36	; 0x24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bc80      	pop	{r7}
 8005f1e:	4770      	bx	lr

08005f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff4f 	bl	8005dcc <__NVIC_SetPriorityGrouping>
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f48:	f7ff ff64 	bl	8005e14 <__NVIC_GetPriorityGrouping>
 8005f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f7ff ffb2 	bl	8005ebc <NVIC_EncodePriority>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff ff81 	bl	8005e68 <__NVIC_SetPriority>
}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	4603      	mov	r3, r0
 8005f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff57 	bl	8005e30 <__NVIC_EnableIRQ>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b08b      	sub	sp, #44	; 0x2c
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f96:	2300      	movs	r3, #0
 8005f98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f9e:	e169      	b.n	8006274 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	f040 8158 	bne.w	800626e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4a9a      	ldr	r2, [pc, #616]	; (800622c <HAL_GPIO_Init+0x2a0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d05e      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005fc8:	4a98      	ldr	r2, [pc, #608]	; (800622c <HAL_GPIO_Init+0x2a0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d875      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005fce:	4a98      	ldr	r2, [pc, #608]	; (8006230 <HAL_GPIO_Init+0x2a4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d058      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005fd4:	4a96      	ldr	r2, [pc, #600]	; (8006230 <HAL_GPIO_Init+0x2a4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d86f      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005fda:	4a96      	ldr	r2, [pc, #600]	; (8006234 <HAL_GPIO_Init+0x2a8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d052      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005fe0:	4a94      	ldr	r2, [pc, #592]	; (8006234 <HAL_GPIO_Init+0x2a8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d869      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005fe6:	4a94      	ldr	r2, [pc, #592]	; (8006238 <HAL_GPIO_Init+0x2ac>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d04c      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005fec:	4a92      	ldr	r2, [pc, #584]	; (8006238 <HAL_GPIO_Init+0x2ac>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d863      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005ff2:	4a92      	ldr	r2, [pc, #584]	; (800623c <HAL_GPIO_Init+0x2b0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d046      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
 8005ff8:	4a90      	ldr	r2, [pc, #576]	; (800623c <HAL_GPIO_Init+0x2b0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d85d      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8005ffe:	2b12      	cmp	r3, #18
 8006000:	d82a      	bhi.n	8006058 <HAL_GPIO_Init+0xcc>
 8006002:	2b12      	cmp	r3, #18
 8006004:	d859      	bhi.n	80060ba <HAL_GPIO_Init+0x12e>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <HAL_GPIO_Init+0x80>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006087 	.word	0x08006087
 8006010:	08006061 	.word	0x08006061
 8006014:	08006073 	.word	0x08006073
 8006018:	080060b5 	.word	0x080060b5
 800601c:	080060bb 	.word	0x080060bb
 8006020:	080060bb 	.word	0x080060bb
 8006024:	080060bb 	.word	0x080060bb
 8006028:	080060bb 	.word	0x080060bb
 800602c:	080060bb 	.word	0x080060bb
 8006030:	080060bb 	.word	0x080060bb
 8006034:	080060bb 	.word	0x080060bb
 8006038:	080060bb 	.word	0x080060bb
 800603c:	080060bb 	.word	0x080060bb
 8006040:	080060bb 	.word	0x080060bb
 8006044:	080060bb 	.word	0x080060bb
 8006048:	080060bb 	.word	0x080060bb
 800604c:	080060bb 	.word	0x080060bb
 8006050:	08006069 	.word	0x08006069
 8006054:	0800607d 	.word	0x0800607d
 8006058:	4a79      	ldr	r2, [pc, #484]	; (8006240 <HAL_GPIO_Init+0x2b4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800605e:	e02c      	b.n	80060ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	623b      	str	r3, [r7, #32]
          break;
 8006066:	e029      	b.n	80060bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	3304      	adds	r3, #4
 800606e:	623b      	str	r3, [r7, #32]
          break;
 8006070:	e024      	b.n	80060bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	3308      	adds	r3, #8
 8006078:	623b      	str	r3, [r7, #32]
          break;
 800607a:	e01f      	b.n	80060bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	330c      	adds	r3, #12
 8006082:	623b      	str	r3, [r7, #32]
          break;
 8006084:	e01a      	b.n	80060bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d102      	bne.n	8006094 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800608e:	2304      	movs	r3, #4
 8006090:	623b      	str	r3, [r7, #32]
          break;
 8006092:	e013      	b.n	80060bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800609c:	2308      	movs	r3, #8
 800609e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	611a      	str	r2, [r3, #16]
          break;
 80060a6:	e009      	b.n	80060bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060a8:	2308      	movs	r3, #8
 80060aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	615a      	str	r2, [r3, #20]
          break;
 80060b2:	e003      	b.n	80060bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80060b4:	2300      	movs	r3, #0
 80060b6:	623b      	str	r3, [r7, #32]
          break;
 80060b8:	e000      	b.n	80060bc <HAL_GPIO_Init+0x130>
          break;
 80060ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2bff      	cmp	r3, #255	; 0xff
 80060c0:	d801      	bhi.n	80060c6 <HAL_GPIO_Init+0x13a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	e001      	b.n	80060ca <HAL_GPIO_Init+0x13e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	3304      	adds	r3, #4
 80060ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	2bff      	cmp	r3, #255	; 0xff
 80060d0:	d802      	bhi.n	80060d8 <HAL_GPIO_Init+0x14c>
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	e002      	b.n	80060de <HAL_GPIO_Init+0x152>
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	3b08      	subs	r3, #8
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	210f      	movs	r1, #15
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	401a      	ands	r2, r3
 80060f0:	6a39      	ldr	r1, [r7, #32]
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	431a      	orrs	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 80b1 	beq.w	800626e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800610c:	4b4d      	ldr	r3, [pc, #308]	; (8006244 <HAL_GPIO_Init+0x2b8>)
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	4a4c      	ldr	r2, [pc, #304]	; (8006244 <HAL_GPIO_Init+0x2b8>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6193      	str	r3, [r2, #24]
 8006118:	4b4a      	ldr	r3, [pc, #296]	; (8006244 <HAL_GPIO_Init+0x2b8>)
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006124:	4a48      	ldr	r2, [pc, #288]	; (8006248 <HAL_GPIO_Init+0x2bc>)
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	3302      	adds	r3, #2
 800612c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006130:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	220f      	movs	r2, #15
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	43db      	mvns	r3, r3
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a40      	ldr	r2, [pc, #256]	; (800624c <HAL_GPIO_Init+0x2c0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_GPIO_Init+0x1ec>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3f      	ldr	r2, [pc, #252]	; (8006250 <HAL_GPIO_Init+0x2c4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00d      	beq.n	8006174 <HAL_GPIO_Init+0x1e8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3e      	ldr	r2, [pc, #248]	; (8006254 <HAL_GPIO_Init+0x2c8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <HAL_GPIO_Init+0x1e4>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3d      	ldr	r2, [pc, #244]	; (8006258 <HAL_GPIO_Init+0x2cc>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d101      	bne.n	800616c <HAL_GPIO_Init+0x1e0>
 8006168:	2303      	movs	r3, #3
 800616a:	e006      	b.n	800617a <HAL_GPIO_Init+0x1ee>
 800616c:	2304      	movs	r3, #4
 800616e:	e004      	b.n	800617a <HAL_GPIO_Init+0x1ee>
 8006170:	2302      	movs	r3, #2
 8006172:	e002      	b.n	800617a <HAL_GPIO_Init+0x1ee>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <HAL_GPIO_Init+0x1ee>
 8006178:	2300      	movs	r3, #0
 800617a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800617c:	f002 0203 	and.w	r2, r2, #3
 8006180:	0092      	lsls	r2, r2, #2
 8006182:	4093      	lsls	r3, r2
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800618a:	492f      	ldr	r1, [pc, #188]	; (8006248 <HAL_GPIO_Init+0x2bc>)
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	089b      	lsrs	r3, r3, #2
 8006190:	3302      	adds	r3, #2
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d006      	beq.n	80061b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80061a4:	4b2d      	ldr	r3, [pc, #180]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	492c      	ldr	r1, [pc, #176]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	600b      	str	r3, [r1, #0]
 80061b0:	e006      	b.n	80061c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80061b2:	4b2a      	ldr	r3, [pc, #168]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	43db      	mvns	r3, r3
 80061ba:	4928      	ldr	r1, [pc, #160]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061bc:	4013      	ands	r3, r2
 80061be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d006      	beq.n	80061da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80061cc:	4b23      	ldr	r3, [pc, #140]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	4922      	ldr	r1, [pc, #136]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	604b      	str	r3, [r1, #4]
 80061d8:	e006      	b.n	80061e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80061da:	4b20      	ldr	r3, [pc, #128]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	491e      	ldr	r1, [pc, #120]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d006      	beq.n	8006202 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80061f4:	4b19      	ldr	r3, [pc, #100]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	4918      	ldr	r1, [pc, #96]	; (800625c <HAL_GPIO_Init+0x2d0>)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	608b      	str	r3, [r1, #8]
 8006200:	e006      	b.n	8006210 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006202:	4b16      	ldr	r3, [pc, #88]	; (800625c <HAL_GPIO_Init+0x2d0>)
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	43db      	mvns	r3, r3
 800620a:	4914      	ldr	r1, [pc, #80]	; (800625c <HAL_GPIO_Init+0x2d0>)
 800620c:	4013      	ands	r3, r2
 800620e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d021      	beq.n	8006260 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800621c:	4b0f      	ldr	r3, [pc, #60]	; (800625c <HAL_GPIO_Init+0x2d0>)
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	490e      	ldr	r1, [pc, #56]	; (800625c <HAL_GPIO_Init+0x2d0>)
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	4313      	orrs	r3, r2
 8006226:	60cb      	str	r3, [r1, #12]
 8006228:	e021      	b.n	800626e <HAL_GPIO_Init+0x2e2>
 800622a:	bf00      	nop
 800622c:	10320000 	.word	0x10320000
 8006230:	10310000 	.word	0x10310000
 8006234:	10220000 	.word	0x10220000
 8006238:	10210000 	.word	0x10210000
 800623c:	10120000 	.word	0x10120000
 8006240:	10110000 	.word	0x10110000
 8006244:	40021000 	.word	0x40021000
 8006248:	40010000 	.word	0x40010000
 800624c:	40010800 	.word	0x40010800
 8006250:	40010c00 	.word	0x40010c00
 8006254:	40011000 	.word	0x40011000
 8006258:	40011400 	.word	0x40011400
 800625c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <HAL_GPIO_Init+0x304>)
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	43db      	mvns	r3, r3
 8006268:	4909      	ldr	r1, [pc, #36]	; (8006290 <HAL_GPIO_Init+0x304>)
 800626a:	4013      	ands	r3, r2
 800626c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	3301      	adds	r3, #1
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	fa22 f303 	lsr.w	r3, r2, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	f47f ae8e 	bne.w	8005fa0 <HAL_GPIO_Init+0x14>
  }
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	372c      	adds	r7, #44	; 0x2c
 800628a:	46bd      	mov	sp, r7
 800628c:	bc80      	pop	{r7}
 800628e:	4770      	bx	lr
 8006290:	40010400 	.word	0x40010400

08006294 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	887b      	ldrh	r3, [r7, #2]
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
 80062b0:	e001      	b.n	80062b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr

080062c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	807b      	strh	r3, [r7, #2]
 80062ce:	4613      	mov	r3, r2
 80062d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062d2:	787b      	ldrb	r3, [r7, #1]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062d8:	887a      	ldrh	r2, [r7, #2]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80062de:	e003      	b.n	80062e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	041a      	lsls	r2, r3, #16
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	611a      	str	r2, [r3, #16]
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
	...

080062f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006300:	695a      	ldr	r2, [r3, #20]
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	4013      	ands	r3, r2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d006      	beq.n	8006318 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800630a:	4a05      	ldr	r2, [pc, #20]	; (8006320 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 f806 	bl	8006324 <HAL_GPIO_EXTI_Callback>
  }
}
 8006318:	bf00      	nop
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40010400 	.word	0x40010400

08006324 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e26c      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8087 	beq.w	8006466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006358:	4b92      	ldr	r3, [pc, #584]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 030c 	and.w	r3, r3, #12
 8006360:	2b04      	cmp	r3, #4
 8006362:	d00c      	beq.n	800637e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006364:	4b8f      	ldr	r3, [pc, #572]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b08      	cmp	r3, #8
 800636e:	d112      	bne.n	8006396 <HAL_RCC_OscConfig+0x5e>
 8006370:	4b8c      	ldr	r3, [pc, #560]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637c:	d10b      	bne.n	8006396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637e:	4b89      	ldr	r3, [pc, #548]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06c      	beq.n	8006464 <HAL_RCC_OscConfig+0x12c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d168      	bne.n	8006464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e246      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800639e:	d106      	bne.n	80063ae <HAL_RCC_OscConfig+0x76>
 80063a0:	4b80      	ldr	r3, [pc, #512]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a7f      	ldr	r2, [pc, #508]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	e02e      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x98>
 80063b6:	4b7b      	ldr	r3, [pc, #492]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7a      	ldr	r2, [pc, #488]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4b78      	ldr	r3, [pc, #480]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a77      	ldr	r2, [pc, #476]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e01d      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0xbc>
 80063da:	4b72      	ldr	r3, [pc, #456]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a71      	ldr	r2, [pc, #452]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b6f      	ldr	r3, [pc, #444]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a6e      	ldr	r2, [pc, #440]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e00b      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063f4:	4b6b      	ldr	r3, [pc, #428]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6a      	ldr	r2, [pc, #424]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4b68      	ldr	r3, [pc, #416]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a67      	ldr	r2, [pc, #412]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800640a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d013      	beq.n	800643c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006414:	f7ff f89c 	bl	8005550 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7ff f898 	bl	8005550 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	; 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e1fa      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642e:	4b5d      	ldr	r3, [pc, #372]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0xe4>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643c:	f7ff f888 	bl	8005550 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7ff f884 	bl	8005550 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	; 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e1e6      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006456:	4b53      	ldr	r3, [pc, #332]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x10c>
 8006462:	e000      	b.n	8006466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d063      	beq.n	800653a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006472:	4b4c      	ldr	r3, [pc, #304]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800647e:	4b49      	ldr	r3, [pc, #292]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f003 030c 	and.w	r3, r3, #12
 8006486:	2b08      	cmp	r3, #8
 8006488:	d11c      	bne.n	80064c4 <HAL_RCC_OscConfig+0x18c>
 800648a:	4b46      	ldr	r3, [pc, #280]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d116      	bne.n	80064c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006496:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_RCC_OscConfig+0x176>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d001      	beq.n	80064ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e1ba      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ae:	4b3d      	ldr	r3, [pc, #244]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	4939      	ldr	r1, [pc, #228]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c2:	e03a      	b.n	800653a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d020      	beq.n	800650e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064cc:	4b36      	ldr	r3, [pc, #216]	; (80065a8 <HAL_RCC_OscConfig+0x270>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d2:	f7ff f83d 	bl	8005550 <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064da:	f7ff f839 	bl	8005550 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e19b      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ec:	4b2d      	ldr	r3, [pc, #180]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f8:	4b2a      	ldr	r3, [pc, #168]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	4927      	ldr	r1, [pc, #156]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006508:	4313      	orrs	r3, r2
 800650a:	600b      	str	r3, [r1, #0]
 800650c:	e015      	b.n	800653a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800650e:	4b26      	ldr	r3, [pc, #152]	; (80065a8 <HAL_RCC_OscConfig+0x270>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7ff f81c 	bl	8005550 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800651c:	f7ff f818 	bl	8005550 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e17a      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d03a      	beq.n	80065bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d019      	beq.n	8006582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800654e:	4b17      	ldr	r3, [pc, #92]	; (80065ac <HAL_RCC_OscConfig+0x274>)
 8006550:	2201      	movs	r2, #1
 8006552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006554:	f7fe fffc 	bl	8005550 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800655c:	f7fe fff8 	bl	8005550 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e15a      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800657a:	2001      	movs	r0, #1
 800657c:	f000 fb08 	bl	8006b90 <RCC_Delay>
 8006580:	e01c      	b.n	80065bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006582:	4b0a      	ldr	r3, [pc, #40]	; (80065ac <HAL_RCC_OscConfig+0x274>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006588:	f7fe ffe2 	bl	8005550 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800658e:	e00f      	b.n	80065b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006590:	f7fe ffde 	bl	8005550 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d908      	bls.n	80065b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e140      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
 80065a2:	bf00      	nop
 80065a4:	40021000 	.word	0x40021000
 80065a8:	42420000 	.word	0x42420000
 80065ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b0:	4b9e      	ldr	r3, [pc, #632]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e9      	bne.n	8006590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80a6 	beq.w	8006716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ce:	4b97      	ldr	r3, [pc, #604]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10d      	bne.n	80065f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065da:	4b94      	ldr	r3, [pc, #592]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	4a93      	ldr	r2, [pc, #588]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80065e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e4:	61d3      	str	r3, [r2, #28]
 80065e6:	4b91      	ldr	r3, [pc, #580]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f6:	4b8e      	ldr	r3, [pc, #568]	; (8006830 <HAL_RCC_OscConfig+0x4f8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d118      	bne.n	8006634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006602:	4b8b      	ldr	r3, [pc, #556]	; (8006830 <HAL_RCC_OscConfig+0x4f8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a8a      	ldr	r2, [pc, #552]	; (8006830 <HAL_RCC_OscConfig+0x4f8>)
 8006608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800660c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800660e:	f7fe ff9f 	bl	8005550 <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006616:	f7fe ff9b 	bl	8005550 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b64      	cmp	r3, #100	; 0x64
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e0fd      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006628:	4b81      	ldr	r3, [pc, #516]	; (8006830 <HAL_RCC_OscConfig+0x4f8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d106      	bne.n	800664a <HAL_RCC_OscConfig+0x312>
 800663c:	4b7b      	ldr	r3, [pc, #492]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	4a7a      	ldr	r2, [pc, #488]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	6213      	str	r3, [r2, #32]
 8006648:	e02d      	b.n	80066a6 <HAL_RCC_OscConfig+0x36e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10c      	bne.n	800666c <HAL_RCC_OscConfig+0x334>
 8006652:	4b76      	ldr	r3, [pc, #472]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	4a75      	ldr	r2, [pc, #468]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	6213      	str	r3, [r2, #32]
 800665e:	4b73      	ldr	r3, [pc, #460]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	4a72      	ldr	r2, [pc, #456]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	6213      	str	r3, [r2, #32]
 800666a:	e01c      	b.n	80066a6 <HAL_RCC_OscConfig+0x36e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b05      	cmp	r3, #5
 8006672:	d10c      	bne.n	800668e <HAL_RCC_OscConfig+0x356>
 8006674:	4b6d      	ldr	r3, [pc, #436]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	4a6c      	ldr	r2, [pc, #432]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 800667a:	f043 0304 	orr.w	r3, r3, #4
 800667e:	6213      	str	r3, [r2, #32]
 8006680:	4b6a      	ldr	r3, [pc, #424]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	4a69      	ldr	r2, [pc, #420]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6213      	str	r3, [r2, #32]
 800668c:	e00b      	b.n	80066a6 <HAL_RCC_OscConfig+0x36e>
 800668e:	4b67      	ldr	r3, [pc, #412]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	4a66      	ldr	r2, [pc, #408]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	6213      	str	r3, [r2, #32]
 800669a:	4b64      	ldr	r3, [pc, #400]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4a63      	ldr	r2, [pc, #396]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80066a0:	f023 0304 	bic.w	r3, r3, #4
 80066a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d015      	beq.n	80066da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ae:	f7fe ff4f 	bl	8005550 <HAL_GetTick>
 80066b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b4:	e00a      	b.n	80066cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b6:	f7fe ff4b 	bl	8005550 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0ab      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066cc:	4b57      	ldr	r3, [pc, #348]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0ee      	beq.n	80066b6 <HAL_RCC_OscConfig+0x37e>
 80066d8:	e014      	b.n	8006704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066da:	f7fe ff39 	bl	8005550 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f7fe ff35 	bl	8005550 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e095      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f8:	4b4c      	ldr	r3, [pc, #304]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ee      	bne.n	80066e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d105      	bne.n	8006716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800670a:	4b48      	ldr	r3, [pc, #288]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4a47      	ldr	r2, [pc, #284]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8081 	beq.w	8006822 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006720:	4b42      	ldr	r3, [pc, #264]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b08      	cmp	r3, #8
 800672a:	d061      	beq.n	80067f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d146      	bne.n	80067c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006734:	4b3f      	ldr	r3, [pc, #252]	; (8006834 <HAL_RCC_OscConfig+0x4fc>)
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673a:	f7fe ff09 	bl	8005550 <HAL_GetTick>
 800673e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006740:	e008      	b.n	8006754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006742:	f7fe ff05 	bl	8005550 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e067      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006754:	4b35      	ldr	r3, [pc, #212]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f0      	bne.n	8006742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006768:	d108      	bne.n	800677c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800676a:	4b30      	ldr	r3, [pc, #192]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	492d      	ldr	r1, [pc, #180]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006778:	4313      	orrs	r3, r2
 800677a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800677c:	4b2b      	ldr	r3, [pc, #172]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a19      	ldr	r1, [r3, #32]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	430b      	orrs	r3, r1
 800678e:	4927      	ldr	r1, [pc, #156]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 8006790:	4313      	orrs	r3, r2
 8006792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006794:	4b27      	ldr	r3, [pc, #156]	; (8006834 <HAL_RCC_OscConfig+0x4fc>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679a:	f7fe fed9 	bl	8005550 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a2:	f7fe fed5 	bl	8005550 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e037      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067b4:	4b1d      	ldr	r3, [pc, #116]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <HAL_RCC_OscConfig+0x46a>
 80067c0:	e02f      	b.n	8006822 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <HAL_RCC_OscConfig+0x4fc>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c8:	f7fe fec2 	bl	8005550 <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d0:	f7fe febe 	bl	8005550 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e020      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067e2:	4b12      	ldr	r3, [pc, #72]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f0      	bne.n	80067d0 <HAL_RCC_OscConfig+0x498>
 80067ee:	e018      	b.n	8006822 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e013      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_RCC_OscConfig+0x4f4>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	429a      	cmp	r2, r3
 800680e:	d106      	bne.n	800681e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	429a      	cmp	r2, r3
 800681c:	d001      	beq.n	8006822 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40021000 	.word	0x40021000
 8006830:	40007000 	.word	0x40007000
 8006834:	42420060 	.word	0x42420060

08006838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0d0      	b.n	80069ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800684c:	4b6a      	ldr	r3, [pc, #424]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d910      	bls.n	800687c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685a:	4b67      	ldr	r3, [pc, #412]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f023 0207 	bic.w	r2, r3, #7
 8006862:	4965      	ldr	r1, [pc, #404]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	4313      	orrs	r3, r2
 8006868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686a:	4b63      	ldr	r3, [pc, #396]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d001      	beq.n	800687c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e0b8      	b.n	80069ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d020      	beq.n	80068ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006894:	4b59      	ldr	r3, [pc, #356]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	4a58      	ldr	r2, [pc, #352]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 800689a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800689e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068ac:	4b53      	ldr	r3, [pc, #332]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	4a52      	ldr	r2, [pc, #328]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80068b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068b8:	4b50      	ldr	r3, [pc, #320]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	494d      	ldr	r1, [pc, #308]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d040      	beq.n	8006958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d107      	bne.n	80068ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068de:	4b47      	ldr	r3, [pc, #284]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d115      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e07f      	b.n	80069ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d107      	bne.n	8006906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068f6:	4b41      	ldr	r3, [pc, #260]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e073      	b.n	80069ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006906:	4b3d      	ldr	r3, [pc, #244]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e06b      	b.n	80069ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006916:	4b39      	ldr	r3, [pc, #228]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f023 0203 	bic.w	r2, r3, #3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4936      	ldr	r1, [pc, #216]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 8006924:	4313      	orrs	r3, r2
 8006926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006928:	f7fe fe12 	bl	8005550 <HAL_GetTick>
 800692c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800692e:	e00a      	b.n	8006946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006930:	f7fe fe0e 	bl	8005550 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f241 3288 	movw	r2, #5000	; 0x1388
 800693e:	4293      	cmp	r3, r2
 8006940:	d901      	bls.n	8006946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e053      	b.n	80069ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006946:	4b2d      	ldr	r3, [pc, #180]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f003 020c 	and.w	r2, r3, #12
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	429a      	cmp	r2, r3
 8006956:	d1eb      	bne.n	8006930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006958:	4b27      	ldr	r3, [pc, #156]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d210      	bcs.n	8006988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b24      	ldr	r3, [pc, #144]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 0207 	bic.w	r2, r3, #7
 800696e:	4922      	ldr	r1, [pc, #136]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006976:	4b20      	ldr	r3, [pc, #128]	; (80069f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d001      	beq.n	8006988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e032      	b.n	80069ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	2b00      	cmp	r3, #0
 8006992:	d008      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006994:	4b19      	ldr	r3, [pc, #100]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4916      	ldr	r1, [pc, #88]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069b2:	4b12      	ldr	r3, [pc, #72]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	490e      	ldr	r1, [pc, #56]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069c6:	f000 f821 	bl	8006a0c <HAL_RCC_GetSysClockFreq>
 80069ca:	4602      	mov	r2, r0
 80069cc:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <HAL_RCC_ClockConfig+0x1c4>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	091b      	lsrs	r3, r3, #4
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	490a      	ldr	r1, [pc, #40]	; (8006a00 <HAL_RCC_ClockConfig+0x1c8>)
 80069d8:	5ccb      	ldrb	r3, [r1, r3]
 80069da:	fa22 f303 	lsr.w	r3, r2, r3
 80069de:	4a09      	ldr	r2, [pc, #36]	; (8006a04 <HAL_RCC_ClockConfig+0x1cc>)
 80069e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <HAL_RCC_ClockConfig+0x1d0>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe fcde 	bl	80053a8 <HAL_InitTick>

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40022000 	.word	0x40022000
 80069fc:	40021000 	.word	0x40021000
 8006a00:	0800ae74 	.word	0x0800ae74
 8006a04:	20000000 	.word	0x20000000
 8006a08:	20000004 	.word	0x20000004

08006a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a0c:	b490      	push	{r4, r7}
 8006a0e:	b08a      	sub	sp, #40	; 0x28
 8006a10:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a12:	4b2a      	ldr	r3, [pc, #168]	; (8006abc <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a14:	1d3c      	adds	r4, r7, #4
 8006a16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a1c:	f240 2301 	movw	r3, #513	; 0x201
 8006a20:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	61fb      	str	r3, [r7, #28]
 8006a26:	2300      	movs	r3, #0
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	2300      	movs	r3, #0
 8006a30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a36:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d002      	beq.n	8006a4c <HAL_RCC_GetSysClockFreq+0x40>
 8006a46:	2b08      	cmp	r3, #8
 8006a48:	d003      	beq.n	8006a52 <HAL_RCC_GetSysClockFreq+0x46>
 8006a4a:	e02d      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a4c:	4b1d      	ldr	r3, [pc, #116]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a4e:	623b      	str	r3, [r7, #32]
      break;
 8006a50:	e02d      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	0c9b      	lsrs	r3, r3, #18
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a5e:	4413      	add	r3, r2
 8006a60:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006a64:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d013      	beq.n	8006a98 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a70:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	0c5b      	lsrs	r3, r3, #17
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a7e:	4413      	add	r3, r2
 8006a80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006a84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4a0e      	ldr	r2, [pc, #56]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a8a:	fb02 f203 	mul.w	r2, r2, r3
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
 8006a96:	e004      	b.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	4a0b      	ldr	r2, [pc, #44]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a9c:	fb02 f303 	mul.w	r3, r2, r3
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	623b      	str	r3, [r7, #32]
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aaa:	623b      	str	r3, [r7, #32]
      break;
 8006aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	; 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc90      	pop	{r4, r7}
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	0800acd4 	.word	0x0800acd4
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	007a1200 	.word	0x007a1200
 8006ac8:	003d0900 	.word	0x003d0900

08006acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad0:	4b02      	ldr	r3, [pc, #8]	; (8006adc <HAL_RCC_GetHCLKFreq+0x10>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr
 8006adc:	20000000 	.word	0x20000000

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ae4:	f7ff fff2 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	0a1b      	lsrs	r3, r3, #8
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4903      	ldr	r1, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af6:	5ccb      	ldrb	r3, [r1, r3]
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40021000 	.word	0x40021000
 8006b04:	0800ae84 	.word	0x0800ae84

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b0c:	f7ff ffde 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	0adb      	lsrs	r3, r3, #11
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4903      	ldr	r1, [pc, #12]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1e:	5ccb      	ldrb	r3, [r1, r3]
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	0800ae84 	.word	0x0800ae84

08006b30 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	220f      	movs	r2, #15
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b40:	4b11      	ldr	r3, [pc, #68]	; (8006b88 <HAL_RCC_GetClockConfig+0x58>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 0203 	and.w	r2, r3, #3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b4c:	4b0e      	ldr	r3, [pc, #56]	; (8006b88 <HAL_RCC_GetClockConfig+0x58>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <HAL_RCC_GetClockConfig+0x58>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006b64:	4b08      	ldr	r3, [pc, #32]	; (8006b88 <HAL_RCC_GetClockConfig+0x58>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b72:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <HAL_RCC_GetClockConfig+0x5c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0207 	and.w	r2, r3, #7
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	40021000 	.word	0x40021000
 8006b8c:	40022000 	.word	0x40022000

08006b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <RCC_Delay+0x34>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <RCC_Delay+0x38>)
 8006b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba2:	0a5b      	lsrs	r3, r3, #9
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	fb02 f303 	mul.w	r3, r2, r3
 8006baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006bac:	bf00      	nop
  }
  while (Delay --);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1e5a      	subs	r2, r3, #1
 8006bb2:	60fa      	str	r2, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f9      	bne.n	8006bac <RCC_Delay+0x1c>
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr
 8006bc4:	20000000 	.word	0x20000000
 8006bc8:	10624dd3 	.word	0x10624dd3

08006bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d07d      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006be8:	2300      	movs	r3, #0
 8006bea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bec:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10d      	bne.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bf8:	4b4c      	ldr	r3, [pc, #304]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	4a4b      	ldr	r2, [pc, #300]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c02:	61d3      	str	r3, [r2, #28]
 8006c04:	4b49      	ldr	r3, [pc, #292]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0c:	60bb      	str	r3, [r7, #8]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c14:	4b46      	ldr	r3, [pc, #280]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d118      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c20:	4b43      	ldr	r3, [pc, #268]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a42      	ldr	r2, [pc, #264]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c2c:	f7fe fc90 	bl	8005550 <HAL_GetTick>
 8006c30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c32:	e008      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c34:	f7fe fc8c 	bl	8005550 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b64      	cmp	r3, #100	; 0x64
 8006c40:	d901      	bls.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e06d      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c46:	4b3a      	ldr	r3, [pc, #232]	; (8006d30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0f0      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c52:	4b36      	ldr	r3, [pc, #216]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d02e      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d027      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c70:	4b2e      	ldr	r3, [pc, #184]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c7a:	4b2e      	ldr	r3, [pc, #184]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c80:	4b2c      	ldr	r3, [pc, #176]	; (8006d34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c86:	4a29      	ldr	r2, [pc, #164]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d014      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c96:	f7fe fc5b 	bl	8005550 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9c:	e00a      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9e:	f7fe fc57 	bl	8005550 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e036      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb4:	4b1d      	ldr	r3, [pc, #116]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0ee      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4917      	ldr	r1, [pc, #92]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d105      	bne.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cd8:	4b14      	ldr	r3, [pc, #80]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	4a13      	ldr	r2, [pc, #76]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cf0:	4b0e      	ldr	r3, [pc, #56]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	490b      	ldr	r1, [pc, #44]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d0e:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	4904      	ldr	r1, [pc, #16]	; (8006d2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40021000 	.word	0x40021000
 8006d30:	40007000 	.word	0x40007000
 8006d34:	42420440 	.word	0x42420440

08006d38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b08d      	sub	sp, #52	; 0x34
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006d40:	4b5a      	ldr	r3, [pc, #360]	; (8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8006d42:	f107 040c 	add.w	r4, r7, #12
 8006d46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006d4c:	f240 2301 	movw	r3, #513	; 0x201
 8006d50:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
 8006d56:	2300      	movs	r3, #0
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	61fb      	str	r3, [r7, #28]
 8006d62:	2300      	movs	r3, #0
 8006d64:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b10      	cmp	r3, #16
 8006d6a:	d00a      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b10      	cmp	r3, #16
 8006d70:	f200 8091 	bhi.w	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d04c      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	d07c      	beq.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006d80:	e089      	b.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8006d82:	4b4b      	ldr	r3, [pc, #300]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006d88:	4b49      	ldr	r3, [pc, #292]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8082 	beq.w	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	0c9b      	lsrs	r3, r3, #18
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006da2:	4413      	add	r3, r2
 8006da4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006da8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d018      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006db4:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	0c5b      	lsrs	r3, r3, #17
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00d      	beq.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8006dd4:	4a37      	ldr	r2, [pc, #220]	; (8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	fb02 f303 	mul.w	r3, r2, r3
 8006de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006de4:	e004      	b.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	4a33      	ldr	r2, [pc, #204]	; (8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006df0:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dfc:	d102      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e02:	e04a      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	4a2c      	ldr	r2, [pc, #176]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8006e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e12:	e042      	b.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8006e14:	4b26      	ldr	r3, [pc, #152]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e24:	d108      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8006e30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e36:	e01f      	b.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e42:	d109      	bne.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006e44:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8006e50:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e56:	e00f      	b.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e62:	d11c      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d016      	beq.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8006e70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006e74:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e76:	e012      	b.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8006e78:	e011      	b.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006e7a:	f7ff fe45 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	0b9b      	lsrs	r3, r3, #14
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006e94:	e004      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006e96:	bf00      	nop
 8006e98:	e002      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e000      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8006e9e:	bf00      	nop
    }
  }
  return (frequency);
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3734      	adds	r7, #52	; 0x34
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd90      	pop	{r4, r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	0800ace4 	.word	0x0800ace4
 8006eb0:	40021000 	.word	0x40021000
 8006eb4:	007a1200 	.word	0x007a1200
 8006eb8:	003d0900 	.word	0x003d0900
 8006ebc:	aaaaaaab 	.word	0xaaaaaaab

08006ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e041      	b.n	8006f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d106      	bne.n	8006eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fe f9a6 	bl	8005238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3304      	adds	r3, #4
 8006efc:	4619      	mov	r1, r3
 8006efe:	4610      	mov	r0, r2
 8006f00:	f000 fae0 	bl	80074c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d001      	beq.n	8006f78 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e032      	b.n	8006fde <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <HAL_TIM_Base_Start+0x88>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x48>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f92:	d009      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x48>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a14      	ldr	r2, [pc, #80]	; (8006fec <HAL_TIM_Base_Start+0x8c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_TIM_Base_Start+0x48>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <HAL_TIM_Base_Start+0x90>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d111      	bne.n	8006fcc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b06      	cmp	r3, #6
 8006fb8:	d010      	beq.n	8006fdc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f042 0201 	orr.w	r2, r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fca:	e007      	b.n	8006fdc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f042 0201 	orr.w	r2, r2, #1
 8006fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40000400 	.word	0x40000400
 8006ff0:	40000800 	.word	0x40000800

08006ff4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	f241 1311 	movw	r3, #4369	; 0x1111
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d10f      	bne.n	800702c <HAL_TIM_Base_Stop+0x38>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6a1a      	ldr	r2, [r3, #32]
 8007012:	f240 4344 	movw	r3, #1092	; 0x444
 8007016:	4013      	ands	r3, r2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d107      	bne.n	800702c <HAL_TIM_Base_Stop+0x38>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0201 	bic.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	bc80      	pop	{r7}
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b01      	cmp	r3, #1
 8007052:	d001      	beq.n	8007058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e03a      	b.n	80070ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a18      	ldr	r2, [pc, #96]	; (80070d8 <HAL_TIM_Base_Start_IT+0x98>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00e      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x58>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007082:	d009      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x58>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a14      	ldr	r2, [pc, #80]	; (80070dc <HAL_TIM_Base_Start_IT+0x9c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d004      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x58>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d111      	bne.n	80070bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b06      	cmp	r3, #6
 80070a8:	d010      	beq.n	80070cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ba:	e007      	b.n	80070cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40000400 	.word	0x40000400
 80070e0:	40000800 	.word	0x40000800

080070e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d122      	bne.n	8007140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b02      	cmp	r3, #2
 8007106:	d11b      	bne.n	8007140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0202 	mvn.w	r2, #2
 8007110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f9b1 	bl	800748e <HAL_TIM_IC_CaptureCallback>
 800712c:	e005      	b.n	800713a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f9a4 	bl	800747c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f9b3 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b04      	cmp	r3, #4
 800714c:	d122      	bne.n	8007194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d11b      	bne.n	8007194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f06f 0204 	mvn.w	r2, #4
 8007164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f987 	bl	800748e <HAL_TIM_IC_CaptureCallback>
 8007180:	e005      	b.n	800718e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f97a 	bl	800747c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f989 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d122      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0308 	and.w	r3, r3, #8
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d11b      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0208 	mvn.w	r2, #8
 80071b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2204      	movs	r2, #4
 80071be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f95d 	bl	800748e <HAL_TIM_IC_CaptureCallback>
 80071d4:	e005      	b.n	80071e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f950 	bl	800747c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f95f 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d122      	bne.n	800723c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b10      	cmp	r3, #16
 8007202:	d11b      	bne.n	800723c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0210 	mvn.w	r2, #16
 800720c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2208      	movs	r2, #8
 8007212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f933 	bl	800748e <HAL_TIM_IC_CaptureCallback>
 8007228:	e005      	b.n	8007236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f926 	bl	800747c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f935 	bl	80074a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d10e      	bne.n	8007268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b01      	cmp	r3, #1
 8007256:	d107      	bne.n	8007268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0201 	mvn.w	r2, #1
 8007260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fd fb48 	bl	80048f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b80      	cmp	r3, #128	; 0x80
 8007274:	d10e      	bne.n	8007294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d107      	bne.n	8007294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fa77 	bl	8007782 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	d10e      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	d107      	bne.n	80072c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f8f9 	bl	80074b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0320 	and.w	r3, r3, #32
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d10e      	bne.n	80072ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f003 0320 	and.w	r3, r3, #32
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d107      	bne.n	80072ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0220 	mvn.w	r2, #32
 80072e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fa42 	bl	8007770 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072ec:	bf00      	nop
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_TIM_ConfigClockSource+0x18>
 8007308:	2302      	movs	r3, #2
 800730a:	e0b3      	b.n	8007474 <HAL_TIM_ConfigClockSource+0x180>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800732a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007332:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007344:	d03e      	beq.n	80073c4 <HAL_TIM_ConfigClockSource+0xd0>
 8007346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800734a:	f200 8087 	bhi.w	800745c <HAL_TIM_ConfigClockSource+0x168>
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007352:	f000 8085 	beq.w	8007460 <HAL_TIM_ConfigClockSource+0x16c>
 8007356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735a:	d87f      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x168>
 800735c:	2b70      	cmp	r3, #112	; 0x70
 800735e:	d01a      	beq.n	8007396 <HAL_TIM_ConfigClockSource+0xa2>
 8007360:	2b70      	cmp	r3, #112	; 0x70
 8007362:	d87b      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x168>
 8007364:	2b60      	cmp	r3, #96	; 0x60
 8007366:	d050      	beq.n	800740a <HAL_TIM_ConfigClockSource+0x116>
 8007368:	2b60      	cmp	r3, #96	; 0x60
 800736a:	d877      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x168>
 800736c:	2b50      	cmp	r3, #80	; 0x50
 800736e:	d03c      	beq.n	80073ea <HAL_TIM_ConfigClockSource+0xf6>
 8007370:	2b50      	cmp	r3, #80	; 0x50
 8007372:	d873      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x168>
 8007374:	2b40      	cmp	r3, #64	; 0x40
 8007376:	d058      	beq.n	800742a <HAL_TIM_ConfigClockSource+0x136>
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d86f      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x168>
 800737c:	2b30      	cmp	r3, #48	; 0x30
 800737e:	d064      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x156>
 8007380:	2b30      	cmp	r3, #48	; 0x30
 8007382:	d86b      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x168>
 8007384:	2b20      	cmp	r3, #32
 8007386:	d060      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x156>
 8007388:	2b20      	cmp	r3, #32
 800738a:	d867      	bhi.n	800745c <HAL_TIM_ConfigClockSource+0x168>
 800738c:	2b00      	cmp	r3, #0
 800738e:	d05c      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x156>
 8007390:	2b10      	cmp	r3, #16
 8007392:	d05a      	beq.n	800744a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007394:	e062      	b.n	800745c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6818      	ldr	r0, [r3, #0]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	6899      	ldr	r1, [r3, #8]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f000 f966 	bl	8007676 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	609a      	str	r2, [r3, #8]
      break;
 80073c2:	e04e      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	6899      	ldr	r1, [r3, #8]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f000 f94f 	bl	8007676 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	689a      	ldr	r2, [r3, #8]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073e6:	609a      	str	r2, [r3, #8]
      break;
 80073e8:	e03b      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6859      	ldr	r1, [r3, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	461a      	mov	r2, r3
 80073f8:	f000 f8c6 	bl	8007588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2150      	movs	r1, #80	; 0x50
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f91d 	bl	8007642 <TIM_ITRx_SetConfig>
      break;
 8007408:	e02b      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6818      	ldr	r0, [r3, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	6859      	ldr	r1, [r3, #4]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	461a      	mov	r2, r3
 8007418:	f000 f8e4 	bl	80075e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2160      	movs	r1, #96	; 0x60
 8007422:	4618      	mov	r0, r3
 8007424:	f000 f90d 	bl	8007642 <TIM_ITRx_SetConfig>
      break;
 8007428:	e01b      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	6859      	ldr	r1, [r3, #4]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	461a      	mov	r2, r3
 8007438:	f000 f8a6 	bl	8007588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2140      	movs	r1, #64	; 0x40
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f8fd 	bl	8007642 <TIM_ITRx_SetConfig>
      break;
 8007448:	e00b      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f000 f8f4 	bl	8007642 <TIM_ITRx_SetConfig>
        break;
 800745a:	e002      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800745c:	bf00      	nop
 800745e:	e000      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007460:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	bc80      	pop	{r7}
 800748c:	4770      	bx	lr

0800748e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	bc80      	pop	{r7}
 800749e:	4770      	bx	lr

080074a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr

080074b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a29      	ldr	r2, [pc, #164]	; (800757c <TIM_Base_SetConfig+0xb8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00b      	beq.n	80074f4 <TIM_Base_SetConfig+0x30>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074e2:	d007      	beq.n	80074f4 <TIM_Base_SetConfig+0x30>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a26      	ldr	r2, [pc, #152]	; (8007580 <TIM_Base_SetConfig+0xbc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d003      	beq.n	80074f4 <TIM_Base_SetConfig+0x30>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a25      	ldr	r2, [pc, #148]	; (8007584 <TIM_Base_SetConfig+0xc0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d108      	bne.n	8007506 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1c      	ldr	r2, [pc, #112]	; (800757c <TIM_Base_SetConfig+0xb8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00b      	beq.n	8007526 <TIM_Base_SetConfig+0x62>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007514:	d007      	beq.n	8007526 <TIM_Base_SetConfig+0x62>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a19      	ldr	r2, [pc, #100]	; (8007580 <TIM_Base_SetConfig+0xbc>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_Base_SetConfig+0x62>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a18      	ldr	r2, [pc, #96]	; (8007584 <TIM_Base_SetConfig+0xc0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d108      	bne.n	8007538 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800752c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a07      	ldr	r2, [pc, #28]	; (800757c <TIM_Base_SetConfig+0xb8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d103      	bne.n	800756c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	615a      	str	r2, [r3, #20]
}
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40000400 	.word	0x40000400
 8007584:	40000800 	.word	0x40000800

08007588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	f023 0201 	bic.w	r2, r3, #1
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	693a      	ldr	r2, [r7, #16]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f023 030a 	bic.w	r3, r3, #10
 80075c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	621a      	str	r2, [r3, #32]
}
 80075da:	bf00      	nop
 80075dc:	371c      	adds	r7, #28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bc80      	pop	{r7}
 80075e2:	4770      	bx	lr

080075e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	f023 0210 	bic.w	r2, r3, #16
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800760e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	031b      	lsls	r3, r3, #12
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	621a      	str	r2, [r3, #32]
}
 8007638:	bf00      	nop
 800763a:	371c      	adds	r7, #28
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr

08007642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007642:	b480      	push	{r7}
 8007644:	b085      	sub	sp, #20
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4313      	orrs	r3, r2
 8007660:	f043 0307 	orr.w	r3, r3, #7
 8007664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	609a      	str	r2, [r3, #8]
}
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	bc80      	pop	{r7}
 8007674:	4770      	bx	lr

08007676 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007676:	b480      	push	{r7}
 8007678:	b087      	sub	sp, #28
 800767a:	af00      	add	r7, sp, #0
 800767c:	60f8      	str	r0, [r7, #12]
 800767e:	60b9      	str	r1, [r7, #8]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007690:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	021a      	lsls	r2, r3, #8
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	431a      	orrs	r2, r3
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	4313      	orrs	r3, r2
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	609a      	str	r2, [r3, #8]
}
 80076aa:	bf00      	nop
 80076ac:	371c      	adds	r7, #28
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e046      	b.n	800775a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a16      	ldr	r2, [pc, #88]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d00e      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007718:	d009      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a12      	ldr	r2, [pc, #72]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d004      	beq.n	800772e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a10      	ldr	r2, [pc, #64]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d10c      	bne.n	8007748 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	4313      	orrs	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	bc80      	pop	{r7}
 8007762:	4770      	bx	lr
 8007764:	40012c00 	.word	0x40012c00
 8007768:	40000400 	.word	0x40000400
 800776c:	40000800 	.word	0x40000800

08007770 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e03f      	b.n	8007826 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fd fd6c 	bl	8005298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2224      	movs	r2, #36	; 0x24
 80077c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f9a3 	bl	8007b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	695a      	ldr	r2, [r3, #20]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800780c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2220      	movs	r2, #32
 8007818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b08a      	sub	sp, #40	; 0x28
 8007832:	af02      	add	r7, sp, #8
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	603b      	str	r3, [r7, #0]
 800783a:	4613      	mov	r3, r2
 800783c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b20      	cmp	r3, #32
 800784c:	d17c      	bne.n	8007948 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_UART_Transmit+0x2c>
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d101      	bne.n	800785e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e075      	b.n	800794a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_UART_Transmit+0x3e>
 8007868:	2302      	movs	r3, #2
 800786a:	e06e      	b.n	800794a <HAL_UART_Transmit+0x11c>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2221      	movs	r2, #33	; 0x21
 800787e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007882:	f7fd fe65 	bl	8005550 <HAL_GetTick>
 8007886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	88fa      	ldrh	r2, [r7, #6]
 800788c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789c:	d108      	bne.n	80078b0 <HAL_UART_Transmit+0x82>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d104      	bne.n	80078b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e003      	b.n	80078b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80078c0:	e02a      	b.n	8007918 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2200      	movs	r2, #0
 80078ca:	2180      	movs	r1, #128	; 0x80
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f8df 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e036      	b.n	800794a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10b      	bne.n	80078fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	3302      	adds	r3, #2
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	e007      	b.n	800790a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	781a      	ldrb	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	3301      	adds	r3, #1
 8007908:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1cf      	bne.n	80078c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2200      	movs	r2, #0
 800792a:	2140      	movs	r1, #64	; 0x40
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 f8af 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e006      	b.n	800794a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	e000      	b.n	800794a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007948:	2302      	movs	r3, #2
  }
}
 800794a:	4618      	mov	r0, r3
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b08a      	sub	sp, #40	; 0x28
 8007956:	af02      	add	r7, sp, #8
 8007958:	60f8      	str	r0, [r7, #12]
 800795a:	60b9      	str	r1, [r7, #8]
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b20      	cmp	r3, #32
 8007970:	f040 8089 	bne.w	8007a86 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_UART_Receive+0x2e>
 800797a:	88fb      	ldrh	r3, [r7, #6]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e081      	b.n	8007a88 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_UART_Receive+0x40>
 800798e:	2302      	movs	r3, #2
 8007990:	e07a      	b.n	8007a88 <HAL_UART_Receive+0x136>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2222      	movs	r2, #34	; 0x22
 80079a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80079a8:	f7fd fdd2 	bl	8005550 <HAL_GetTick>
 80079ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c2:	d108      	bne.n	80079d6 <HAL_UART_Receive+0x84>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d104      	bne.n	80079d6 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	61bb      	str	r3, [r7, #24]
 80079d4:	e003      	b.n	80079de <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80079e6:	e043      	b.n	8007a70 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2200      	movs	r2, #0
 80079f0:	2120      	movs	r1, #32
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f84c 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e042      	b.n	8007a88 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10c      	bne.n	8007a22 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a1a:	69bb      	ldr	r3, [r7, #24]
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	61bb      	str	r3, [r7, #24]
 8007a20:	e01f      	b.n	8007a62 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2a:	d007      	beq.n	8007a3c <HAL_UART_Receive+0xea>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <HAL_UART_Receive+0xf8>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d106      	bne.n	8007a4a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	701a      	strb	r2, [r3, #0]
 8007a48:	e008      	b.n	8007a5c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1b6      	bne.n	80079e8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	e000      	b.n	8007a88 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007a86:	2302      	movs	r3, #2
  }
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa0:	e02c      	b.n	8007afc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d028      	beq.n	8007afc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ab0:	f7fd fd4e 	bl	8005550 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d21d      	bcs.n	8007afc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ace:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0201 	bic.w	r2, r2, #1
 8007ade:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e00f      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d0c3      	beq.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b5e:	f023 030c 	bic.w	r3, r3, #12
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a2c      	ldr	r2, [pc, #176]	; (8007c38 <UART_SetConfig+0x114>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d103      	bne.n	8007b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b8c:	f7fe ffbc 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	e002      	b.n	8007b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b94:	f7fe ffa4 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 8007b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009a      	lsls	r2, r3, #2
 8007ba4:	441a      	add	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb0:	4a22      	ldr	r2, [pc, #136]	; (8007c3c <UART_SetConfig+0x118>)
 8007bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	0119      	lsls	r1, r3, #4
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009a      	lsls	r2, r3, #2
 8007bc4:	441a      	add	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bd0:	4b1a      	ldr	r3, [pc, #104]	; (8007c3c <UART_SetConfig+0x118>)
 8007bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8007bd6:	095b      	lsrs	r3, r3, #5
 8007bd8:	2064      	movs	r0, #100	; 0x64
 8007bda:	fb00 f303 	mul.w	r3, r0, r3
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	011b      	lsls	r3, r3, #4
 8007be2:	3332      	adds	r3, #50	; 0x32
 8007be4:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <UART_SetConfig+0x118>)
 8007be6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bea:	095b      	lsrs	r3, r3, #5
 8007bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bf0:	4419      	add	r1, r3
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009a      	lsls	r2, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <UART_SetConfig+0x118>)
 8007c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8007c0e:	095b      	lsrs	r3, r3, #5
 8007c10:	2064      	movs	r0, #100	; 0x64
 8007c12:	fb00 f303 	mul.w	r3, r0, r3
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	3332      	adds	r3, #50	; 0x32
 8007c1c:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <UART_SetConfig+0x118>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	40013800 	.word	0x40013800
 8007c3c:	51eb851f 	.word	0x51eb851f

08007c40 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c46:	f3ef 8305 	mrs	r3, IPSR
 8007c4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10f      	bne.n	8007c72 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c52:	f3ef 8310 	mrs	r3, PRIMASK
 8007c56:	607b      	str	r3, [r7, #4]
  return(result);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <osKernelInitialize+0x32>
 8007c5e:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <osKernelInitialize+0x60>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d109      	bne.n	8007c7a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c66:	f3ef 8311 	mrs	r3, BASEPRI
 8007c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007c72:	f06f 0305 	mvn.w	r3, #5
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	e00c      	b.n	8007c94 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <osKernelInitialize+0x60>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <osKernelInitialize+0x60>)
 8007c84:	2201      	movs	r2, #1
 8007c86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e002      	b.n	8007c94 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c94:	68fb      	ldr	r3, [r7, #12]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3714      	adds	r7, #20
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr
 8007ca0:	200000b0 	.word	0x200000b0

08007ca4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007caa:	f3ef 8305 	mrs	r3, IPSR
 8007cae:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d10f      	bne.n	8007cd6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cba:	607b      	str	r3, [r7, #4]
  return(result);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <osKernelStart+0x32>
 8007cc2:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <osKernelStart+0x64>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d109      	bne.n	8007cde <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cca:	f3ef 8311 	mrs	r3, BASEPRI
 8007cce:	603b      	str	r3, [r7, #0]
  return(result);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <osKernelStart+0x3a>
    stat = osErrorISR;
 8007cd6:	f06f 0305 	mvn.w	r3, #5
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e00e      	b.n	8007cfc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <osKernelStart+0x64>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d107      	bne.n	8007cf6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007ce6:	4b08      	ldr	r3, [pc, #32]	; (8007d08 <osKernelStart+0x64>)
 8007ce8:	2202      	movs	r2, #2
 8007cea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007cec:	f001 f93c 	bl	8008f68 <vTaskStartScheduler>
      stat = osOK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	e002      	b.n	8007cfc <osKernelStart+0x58>
    } else {
      stat = osError;
 8007cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cfa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200000b0 	.word	0x200000b0

08007d0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b092      	sub	sp, #72	; 0x48
 8007d10:	af04      	add	r7, sp, #16
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d1c:	f3ef 8305 	mrs	r3, IPSR
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f040 8094 	bne.w	8007e52 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d2e:	623b      	str	r3, [r7, #32]
  return(result);
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f040 808d 	bne.w	8007e52 <osThreadNew+0x146>
 8007d38:	4b48      	ldr	r3, [pc, #288]	; (8007e5c <osThreadNew+0x150>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d106      	bne.n	8007d4e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d40:	f3ef 8311 	mrs	r3, BASEPRI
 8007d44:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f040 8082 	bne.w	8007e52 <osThreadNew+0x146>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d07e      	beq.n	8007e52 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007d54:	2380      	movs	r3, #128	; 0x80
 8007d56:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007d58:	2318      	movs	r3, #24
 8007d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007d60:	f107 031b 	add.w	r3, r7, #27
 8007d64:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d045      	beq.n	8007dfe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <osThreadNew+0x74>
        name = attr->name;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d008      	beq.n	8007da6 <osThreadNew+0x9a>
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d96:	2b38      	cmp	r3, #56	; 0x38
 8007d98:	d805      	bhi.n	8007da6 <osThreadNew+0x9a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <osThreadNew+0x9e>
        return (NULL);
 8007da6:	2300      	movs	r3, #0
 8007da8:	e054      	b.n	8007e54 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	089b      	lsrs	r3, r3, #2
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00e      	beq.n	8007de0 <osThreadNew+0xd4>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	2b5b      	cmp	r3, #91	; 0x5b
 8007dc8:	d90a      	bls.n	8007de0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d006      	beq.n	8007de0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d002      	beq.n	8007de0 <osThreadNew+0xd4>
        mem = 1;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dde:	e010      	b.n	8007e02 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10c      	bne.n	8007e02 <osThreadNew+0xf6>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d108      	bne.n	8007e02 <osThreadNew+0xf6>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d104      	bne.n	8007e02 <osThreadNew+0xf6>
          mem = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dfc:	e001      	b.n	8007e02 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d110      	bne.n	8007e2a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e10:	9202      	str	r2, [sp, #8]
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fed6 	bl	8008bd0 <xTaskCreateStatic>
 8007e24:	4603      	mov	r3, r0
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e013      	b.n	8007e52 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d110      	bne.n	8007e52 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	f107 0314 	add.w	r3, r7, #20
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 ff20 	bl	8008c88 <xTaskCreate>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d001      	beq.n	8007e52 <osThreadNew+0x146>
          hTask = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e52:	697b      	ldr	r3, [r7, #20]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3738      	adds	r7, #56	; 0x38
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	200000b0 	.word	0x200000b0

08007e60 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e68:	f3ef 8305 	mrs	r3, IPSR
 8007e6c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e6e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10f      	bne.n	8007e94 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e74:	f3ef 8310 	mrs	r3, PRIMASK
 8007e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <osDelay+0x34>
 8007e80:	4b0d      	ldr	r3, [pc, #52]	; (8007eb8 <osDelay+0x58>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d109      	bne.n	8007e9c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e88:	f3ef 8311 	mrs	r3, BASEPRI
 8007e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <osDelay+0x3c>
    stat = osErrorISR;
 8007e94:	f06f 0305 	mvn.w	r3, #5
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e007      	b.n	8007eac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <osDelay+0x4c>
      vTaskDelay(ticks);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 f82a 	bl	8008f00 <vTaskDelay>
    }
  }

  return (stat);
 8007eac:	697b      	ldr	r3, [r7, #20]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	200000b0 	.word	0x200000b0

08007ebc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08c      	sub	sp, #48	; 0x30
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ecc:	f3ef 8305 	mrs	r3, IPSR
 8007ed0:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ed2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d16f      	bne.n	8007fb8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8007edc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d169      	bne.n	8007fb8 <osMessageQueueNew+0xfc>
 8007ee4:	4b37      	ldr	r3, [pc, #220]	; (8007fc4 <osMessageQueueNew+0x108>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d105      	bne.n	8007ef8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007eec:	f3ef 8311 	mrs	r3, BASEPRI
 8007ef0:	613b      	str	r3, [r7, #16]
  return(result);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d15f      	bne.n	8007fb8 <osMessageQueueNew+0xfc>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d05c      	beq.n	8007fb8 <osMessageQueueNew+0xfc>
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d059      	beq.n	8007fb8 <osMessageQueueNew+0xfc>
    mem = -1;
 8007f04:	f04f 33ff 	mov.w	r3, #4294967295
 8007f08:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d029      	beq.n	8007f64 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d012      	beq.n	8007f3e <osMessageQueueNew+0x82>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b4f      	cmp	r3, #79	; 0x4f
 8007f1e:	d90e      	bls.n	8007f3e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00a      	beq.n	8007f3e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	695a      	ldr	r2, [r3, #20]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d302      	bcc.n	8007f3e <osMessageQueueNew+0x82>
        mem = 1;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	623b      	str	r3, [r7, #32]
 8007f3c:	e014      	b.n	8007f68 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d110      	bne.n	8007f68 <osMessageQueueNew+0xac>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10c      	bne.n	8007f68 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d108      	bne.n	8007f68 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <osMessageQueueNew+0xac>
          mem = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	623b      	str	r3, [r7, #32]
 8007f62:	e001      	b.n	8007f68 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d10b      	bne.n	8007f86 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	2100      	movs	r1, #0
 8007f78:	9100      	str	r1, [sp, #0]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f000 f96d 	bl	800825c <xQueueGenericCreateStatic>
 8007f82:	6278      	str	r0, [r7, #36]	; 0x24
 8007f84:	e008      	b.n	8007f98 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d105      	bne.n	8007f98 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 f9da 	bl	800834a <xQueueGenericCreate>
 8007f96:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00c      	beq.n	8007fb8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <osMessageQueueNew+0xf0>
        name = attr->name;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	61fb      	str	r3, [r7, #28]
 8007faa:	e001      	b.n	8007fb0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007fb0:	69f9      	ldr	r1, [r7, #28]
 8007fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fb4:	f000 fdb0 	bl	8008b18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3728      	adds	r7, #40	; 0x28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200000b0 	.word	0x200000b0

08007fc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4a06      	ldr	r2, [pc, #24]	; (8007ff0 <vApplicationGetIdleTaskMemory+0x28>)
 8007fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	4a05      	ldr	r2, [pc, #20]	; (8007ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2280      	movs	r2, #128	; 0x80
 8007fe4:	601a      	str	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr
 8007ff0:	200000b4 	.word	0x200000b4
 8007ff4:	20000110 	.word	0x20000110

08007ff8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4a07      	ldr	r2, [pc, #28]	; (8008024 <vApplicationGetTimerTaskMemory+0x2c>)
 8008008:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	4a06      	ldr	r2, [pc, #24]	; (8008028 <vApplicationGetTimerTaskMemory+0x30>)
 800800e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008016:	601a      	str	r2, [r3, #0]
}
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	20000310 	.word	0x20000310
 8008028:	2000036c 	.word	0x2000036c

0800802c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f103 0208 	add.w	r2, r3, #8
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f04f 32ff 	mov.w	r2, #4294967295
 8008044:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f103 0208 	add.w	r2, r3, #8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f103 0208 	add.w	r2, r3, #8
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr

0800806a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800806a:	b480      	push	{r7}
 800806c:	b083      	sub	sp, #12
 800806e:	af00      	add	r7, sp, #0
 8008070:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr

08008082 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008082:	b480      	push	{r7}
 8008084:	b085      	sub	sp, #20
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	1c5a      	adds	r2, r3, #1
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	601a      	str	r2, [r3, #0]
}
 80080be:	bf00      	nop
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d103      	bne.n	80080e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	e00c      	b.n	8008102 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3308      	adds	r3, #8
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	e002      	b.n	80080f6 <vListInsert+0x2e>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d2f6      	bcs.n	80080f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]
}
 800812e:	bf00      	nop
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	bc80      	pop	{r7}
 8008136:	4770      	bx	lr

08008138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	6892      	ldr	r2, [r2, #8]
 800814e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6852      	ldr	r2, [r2, #4]
 8008158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d103      	bne.n	800816c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	1e5a      	subs	r2, r3, #1
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr
	...

0800818c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081b6:	f002 f809 	bl	800a1cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	68f9      	ldr	r1, [r7, #12]
 80081c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
 80081ca:	441a      	add	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e6:	3b01      	subs	r3, #1
 80081e8:	68f9      	ldr	r1, [r7, #12]
 80081ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081ec:	fb01 f303 	mul.w	r3, r1, r3
 80081f0:	441a      	add	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	22ff      	movs	r2, #255	; 0xff
 8008202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d114      	bne.n	8008236 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01a      	beq.n	800824a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3310      	adds	r3, #16
 8008218:	4618      	mov	r0, r3
 800821a:	f001 f92f 	bl	800947c <xTaskRemoveFromEventList>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d012      	beq.n	800824a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008224:	4b0c      	ldr	r3, [pc, #48]	; (8008258 <xQueueGenericReset+0xcc>)
 8008226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800822a:	601a      	str	r2, [r3, #0]
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	e009      	b.n	800824a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3310      	adds	r3, #16
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff fef6 	bl	800802c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3324      	adds	r3, #36	; 0x24
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff fef1 	bl	800802c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800824a:	f001 ffef 	bl	800a22c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800824e:	2301      	movs	r3, #1
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08e      	sub	sp, #56	; 0x38
 8008260:	af02      	add	r7, sp, #8
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	607a      	str	r2, [r7, #4]
 8008268:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800829e:	bf00      	nop
 80082a0:	e7fe      	b.n	80082a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <xQueueGenericCreateStatic+0x52>
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <xQueueGenericCreateStatic+0x56>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <xQueueGenericCreateStatic+0x58>
 80082b2:	2300      	movs	r3, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	623b      	str	r3, [r7, #32]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d102      	bne.n	80082da <xQueueGenericCreateStatic+0x7e>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <xQueueGenericCreateStatic+0x82>
 80082da:	2301      	movs	r3, #1
 80082dc:	e000      	b.n	80082e0 <xQueueGenericCreateStatic+0x84>
 80082de:	2300      	movs	r3, #0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10a      	bne.n	80082fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80082e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	61fb      	str	r3, [r7, #28]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082fa:	2350      	movs	r3, #80	; 0x50
 80082fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b50      	cmp	r3, #80	; 0x50
 8008302:	d00a      	beq.n	800831a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	61bb      	str	r3, [r7, #24]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800831e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00d      	beq.n	8008340 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800832c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	4613      	mov	r3, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	68b9      	ldr	r1, [r7, #8]
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 f843 	bl	80083c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008342:	4618      	mov	r0, r3
 8008344:	3730      	adds	r7, #48	; 0x30
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800834a:	b580      	push	{r7, lr}
 800834c:	b08a      	sub	sp, #40	; 0x28
 800834e:	af02      	add	r7, sp, #8
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	4613      	mov	r3, r2
 8008356:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d10a      	bne.n	8008374 <xQueueGenericCreate+0x2a>
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	613b      	str	r3, [r7, #16]
}
 8008370:	bf00      	nop
 8008372:	e7fe      	b.n	8008372 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800837a:	2300      	movs	r3, #0
 800837c:	61fb      	str	r3, [r7, #28]
 800837e:	e004      	b.n	800838a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	fb02 f303 	mul.w	r3, r2, r3
 8008388:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	3350      	adds	r3, #80	; 0x50
 800838e:	4618      	mov	r0, r3
 8008390:	f002 f81c 	bl	800a3cc <pvPortMalloc>
 8008394:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00f      	beq.n	80083bc <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	3350      	adds	r3, #80	; 0x50
 80083a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083aa:	79fa      	ldrb	r2, [r7, #7]
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4613      	mov	r3, r2
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f805 	bl	80083c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80083bc:	69bb      	ldr	r3, [r7, #24]
	}
 80083be:	4618      	mov	r0, r3
 80083c0:	3720      	adds	r7, #32
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d103      	bne.n	80083e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	e002      	b.n	80083e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083f4:	2101      	movs	r1, #1
 80083f6:	69b8      	ldr	r0, [r7, #24]
 80083f8:	f7ff fec8 	bl	800818c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	78fa      	ldrb	r2, [r7, #3]
 8008400:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008404:	bf00      	nop
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08e      	sub	sp, #56	; 0x38
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800841a:	2300      	movs	r3, #0
 800841c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <xQueueGenericSend+0x32>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d103      	bne.n	800844c <xQueueGenericSend+0x40>
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <xQueueGenericSend+0x44>
 800844c:	2301      	movs	r3, #1
 800844e:	e000      	b.n	8008452 <xQueueGenericSend+0x46>
 8008450:	2300      	movs	r3, #0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10a      	bne.n	800846c <xQueueGenericSend+0x60>
	__asm volatile
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008468:	bf00      	nop
 800846a:	e7fe      	b.n	800846a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d103      	bne.n	800847a <xQueueGenericSend+0x6e>
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008476:	2b01      	cmp	r3, #1
 8008478:	d101      	bne.n	800847e <xQueueGenericSend+0x72>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <xQueueGenericSend+0x74>
 800847e:	2300      	movs	r3, #0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10a      	bne.n	800849a <xQueueGenericSend+0x8e>
	__asm volatile
 8008484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	623b      	str	r3, [r7, #32]
}
 8008496:	bf00      	nop
 8008498:	e7fe      	b.n	8008498 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800849a:	f001 f9b1 	bl	8009800 <xTaskGetSchedulerState>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d102      	bne.n	80084aa <xQueueGenericSend+0x9e>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <xQueueGenericSend+0xa2>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <xQueueGenericSend+0xa4>
 80084ae:	2300      	movs	r3, #0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <xQueueGenericSend+0xbe>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	61fb      	str	r3, [r7, #28]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084ca:	f001 fe7f 	bl	800a1cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d302      	bcc.n	80084e0 <xQueueGenericSend+0xd4>
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d129      	bne.n	8008534 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084e6:	f000 fa07 	bl	80088f8 <prvCopyDataToQueue>
 80084ea:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d010      	beq.n	8008516 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	3324      	adds	r3, #36	; 0x24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 ffbf 	bl	800947c <xTaskRemoveFromEventList>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d013      	beq.n	800852c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008504:	4b3f      	ldr	r3, [pc, #252]	; (8008604 <xQueueGenericSend+0x1f8>)
 8008506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800850a:	601a      	str	r2, [r3, #0]
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	e00a      	b.n	800852c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	2b00      	cmp	r3, #0
 800851a:	d007      	beq.n	800852c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800851c:	4b39      	ldr	r3, [pc, #228]	; (8008604 <xQueueGenericSend+0x1f8>)
 800851e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008522:	601a      	str	r2, [r3, #0]
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800852c:	f001 fe7e 	bl	800a22c <vPortExitCritical>
				return pdPASS;
 8008530:	2301      	movs	r3, #1
 8008532:	e063      	b.n	80085fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d103      	bne.n	8008542 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800853a:	f001 fe77 	bl	800a22c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800853e:	2300      	movs	r3, #0
 8008540:	e05c      	b.n	80085fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008544:	2b00      	cmp	r3, #0
 8008546:	d106      	bne.n	8008556 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008548:	f107 0314 	add.w	r3, r7, #20
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fff9 	bl	8009544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008552:	2301      	movs	r3, #1
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008556:	f001 fe69 	bl	800a22c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800855a:	f000 fd6b 	bl	8009034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800855e:	f001 fe35 	bl	800a1cc <vPortEnterCritical>
 8008562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008568:	b25b      	sxtb	r3, r3
 800856a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856e:	d103      	bne.n	8008578 <xQueueGenericSend+0x16c>
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800857e:	b25b      	sxtb	r3, r3
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d103      	bne.n	800858e <xQueueGenericSend+0x182>
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800858e:	f001 fe4d 	bl	800a22c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008592:	1d3a      	adds	r2, r7, #4
 8008594:	f107 0314 	add.w	r3, r7, #20
 8008598:	4611      	mov	r1, r2
 800859a:	4618      	mov	r0, r3
 800859c:	f000 ffe8 	bl	8009570 <xTaskCheckForTimeOut>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d124      	bne.n	80085f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085a8:	f000 fa9e 	bl	8008ae8 <prvIsQueueFull>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d018      	beq.n	80085e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	3310      	adds	r3, #16
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	4611      	mov	r1, r2
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 ff0e 	bl	80093dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085c2:	f000 fa29 	bl	8008a18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085c6:	f000 fd43 	bl	8009050 <xTaskResumeAll>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f47f af7c 	bne.w	80084ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80085d2:	4b0c      	ldr	r3, [pc, #48]	; (8008604 <xQueueGenericSend+0x1f8>)
 80085d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	f3bf 8f4f 	dsb	sy
 80085de:	f3bf 8f6f 	isb	sy
 80085e2:	e772      	b.n	80084ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80085e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085e6:	f000 fa17 	bl	8008a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085ea:	f000 fd31 	bl	8009050 <xTaskResumeAll>
 80085ee:	e76c      	b.n	80084ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80085f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085f2:	f000 fa11 	bl	8008a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085f6:	f000 fd2b 	bl	8009050 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80085fa:	2300      	movs	r3, #0
		}
	}
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3738      	adds	r7, #56	; 0x38
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	e000ed04 	.word	0xe000ed04

08008608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08e      	sub	sp, #56	; 0x38
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d103      	bne.n	8008644 <xQueueGenericSendFromISR+0x3c>
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <xQueueGenericSendFromISR+0x40>
 8008644:	2301      	movs	r3, #1
 8008646:	e000      	b.n	800864a <xQueueGenericSendFromISR+0x42>
 8008648:	2300      	movs	r3, #0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	623b      	str	r3, [r7, #32]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d103      	bne.n	8008672 <xQueueGenericSendFromISR+0x6a>
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866e:	2b01      	cmp	r3, #1
 8008670:	d101      	bne.n	8008676 <xQueueGenericSendFromISR+0x6e>
 8008672:	2301      	movs	r3, #1
 8008674:	e000      	b.n	8008678 <xQueueGenericSendFromISR+0x70>
 8008676:	2300      	movs	r3, #0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	61fb      	str	r3, [r7, #28]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008692:	f001 fe5d 	bl	800a350 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008696:	f3ef 8211 	mrs	r2, BASEPRI
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	61ba      	str	r2, [r7, #24]
 80086ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d302      	bcc.n	80086c4 <xQueueGenericSendFromISR+0xbc>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d12c      	bne.n	800871e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086d4:	f000 f910 	bl	80088f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80086d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80086dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e0:	d112      	bne.n	8008708 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d016      	beq.n	8008718 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	3324      	adds	r3, #36	; 0x24
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fec4 	bl	800947c <xTaskRemoveFromEventList>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00e      	beq.n	8008718 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	e007      	b.n	8008718 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008708:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800870c:	3301      	adds	r3, #1
 800870e:	b2db      	uxtb	r3, r3
 8008710:	b25a      	sxtb	r2, r3
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008718:	2301      	movs	r3, #1
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800871c:	e001      	b.n	8008722 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800871e:	2300      	movs	r3, #0
 8008720:	637b      	str	r3, [r7, #52]	; 0x34
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800872c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800872e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008730:	4618      	mov	r0, r3
 8008732:	3738      	adds	r7, #56	; 0x38
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08c      	sub	sp, #48	; 0x30
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008744:	2300      	movs	r3, #0
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <xQueueReceive+0x30>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	623b      	str	r3, [r7, #32]
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d103      	bne.n	8008776 <xQueueReceive+0x3e>
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <xQueueReceive+0x42>
 8008776:	2301      	movs	r3, #1
 8008778:	e000      	b.n	800877c <xQueueReceive+0x44>
 800877a:	2300      	movs	r3, #0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xQueueReceive+0x5e>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	61fb      	str	r3, [r7, #28]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008796:	f001 f833 	bl	8009800 <xTaskGetSchedulerState>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d102      	bne.n	80087a6 <xQueueReceive+0x6e>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <xQueueReceive+0x72>
 80087a6:	2301      	movs	r3, #1
 80087a8:	e000      	b.n	80087ac <xQueueReceive+0x74>
 80087aa:	2300      	movs	r3, #0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10a      	bne.n	80087c6 <xQueueReceive+0x8e>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	61bb      	str	r3, [r7, #24]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80087c6:	f001 fd01 	bl	800a1cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d01f      	beq.n	8008816 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 f8f7 	bl	80089cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e0:	1e5a      	subs	r2, r3, #1
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00f      	beq.n	800880e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	3310      	adds	r3, #16
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fe42 	bl	800947c <xTaskRemoveFromEventList>
 80087f8:	4603      	mov	r3, r0
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d007      	beq.n	800880e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80087fe:	4b3d      	ldr	r3, [pc, #244]	; (80088f4 <xQueueReceive+0x1bc>)
 8008800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800880e:	f001 fd0d 	bl	800a22c <vPortExitCritical>
				return pdPASS;
 8008812:	2301      	movs	r3, #1
 8008814:	e069      	b.n	80088ea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d103      	bne.n	8008824 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800881c:	f001 fd06 	bl	800a22c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008820:	2300      	movs	r3, #0
 8008822:	e062      	b.n	80088ea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800882a:	f107 0310 	add.w	r3, r7, #16
 800882e:	4618      	mov	r0, r3
 8008830:	f000 fe88 	bl	8009544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008834:	2301      	movs	r3, #1
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008838:	f001 fcf8 	bl	800a22c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800883c:	f000 fbfa 	bl	8009034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008840:	f001 fcc4 	bl	800a1cc <vPortEnterCritical>
 8008844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800884a:	b25b      	sxtb	r3, r3
 800884c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008850:	d103      	bne.n	800885a <xQueueReceive+0x122>
 8008852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008860:	b25b      	sxtb	r3, r3
 8008862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008866:	d103      	bne.n	8008870 <xQueueReceive+0x138>
 8008868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008870:	f001 fcdc 	bl	800a22c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008874:	1d3a      	adds	r2, r7, #4
 8008876:	f107 0310 	add.w	r3, r7, #16
 800887a:	4611      	mov	r1, r2
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fe77 	bl	8009570 <xTaskCheckForTimeOut>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d123      	bne.n	80088d0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800888a:	f000 f917 	bl	8008abc <prvIsQueueEmpty>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d017      	beq.n	80088c4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	3324      	adds	r3, #36	; 0x24
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	4611      	mov	r1, r2
 800889c:	4618      	mov	r0, r3
 800889e:	f000 fd9d 	bl	80093dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80088a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088a4:	f000 f8b8 	bl	8008a18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80088a8:	f000 fbd2 	bl	8009050 <xTaskResumeAll>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d189      	bne.n	80087c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80088b2:	4b10      	ldr	r3, [pc, #64]	; (80088f4 <xQueueReceive+0x1bc>)
 80088b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	e780      	b.n	80087c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80088c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088c6:	f000 f8a7 	bl	8008a18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80088ca:	f000 fbc1 	bl	8009050 <xTaskResumeAll>
 80088ce:	e77a      	b.n	80087c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80088d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d2:	f000 f8a1 	bl	8008a18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80088d6:	f000 fbbb 	bl	8009050 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088dc:	f000 f8ee 	bl	8008abc <prvIsQueueEmpty>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f43f af6f 	beq.w	80087c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80088e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3730      	adds	r7, #48	; 0x30
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	e000ed04 	.word	0xe000ed04

080088f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008904:	2300      	movs	r3, #0
 8008906:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10d      	bne.n	8008932 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d14d      	bne.n	80089ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	4618      	mov	r0, r3
 8008924:	f000 ff8a 	bl	800983c <xTaskPriorityDisinherit>
 8008928:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	e043      	b.n	80089ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d119      	bne.n	800896c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6898      	ldr	r0, [r3, #8]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	461a      	mov	r2, r3
 8008942:	68b9      	ldr	r1, [r7, #8]
 8008944:	f001 ff44 	bl	800a7d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	441a      	add	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	429a      	cmp	r2, r3
 8008960:	d32b      	bcc.n	80089ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	609a      	str	r2, [r3, #8]
 800896a:	e026      	b.n	80089ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	68d8      	ldr	r0, [r3, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008974:	461a      	mov	r2, r3
 8008976:	68b9      	ldr	r1, [r7, #8]
 8008978:	f001 ff2a 	bl	800a7d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008984:	425b      	negs	r3, r3
 8008986:	441a      	add	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d207      	bcs.n	80089a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a0:	425b      	negs	r3, r3
 80089a2:	441a      	add	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d105      	bne.n	80089ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1c5a      	adds	r2, r3, #1
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80089c2:	697b      	ldr	r3, [r7, #20]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d018      	beq.n	8008a10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e6:	441a      	add	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d303      	bcc.n	8008a00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68d9      	ldr	r1, [r3, #12]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a08:	461a      	mov	r2, r3
 8008a0a:	6838      	ldr	r0, [r7, #0]
 8008a0c:	f001 fee0 	bl	800a7d0 <memcpy>
	}
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a20:	f001 fbd4 	bl	800a1cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a2c:	e011      	b.n	8008a52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d012      	beq.n	8008a5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	3324      	adds	r3, #36	; 0x24
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fd1e 	bl	800947c <xTaskRemoveFromEventList>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a46:	f000 fdf5 	bl	8009634 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a4a:	7bfb      	ldrb	r3, [r7, #15]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dce9      	bgt.n	8008a2e <prvUnlockQueue+0x16>
 8008a5a:	e000      	b.n	8008a5e <prvUnlockQueue+0x46>
					break;
 8008a5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	22ff      	movs	r2, #255	; 0xff
 8008a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a66:	f001 fbe1 	bl	800a22c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a6a:	f001 fbaf 	bl	800a1cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a76:	e011      	b.n	8008a9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d012      	beq.n	8008aa6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	3310      	adds	r3, #16
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fcf9 	bl	800947c <xTaskRemoveFromEventList>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a90:	f000 fdd0 	bl	8009634 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a94:	7bbb      	ldrb	r3, [r7, #14]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dce9      	bgt.n	8008a78 <prvUnlockQueue+0x60>
 8008aa4:	e000      	b.n	8008aa8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008aa6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	22ff      	movs	r2, #255	; 0xff
 8008aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008ab0:	f001 fbbc 	bl	800a22c <vPortExitCritical>
}
 8008ab4:	bf00      	nop
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ac4:	f001 fb82 	bl	800a1cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e001      	b.n	8008ada <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ada:	f001 fba7 	bl	800a22c <vPortExitCritical>

	return xReturn;
 8008ade:	68fb      	ldr	r3, [r7, #12]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008af0:	f001 fb6c 	bl	800a1cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d102      	bne.n	8008b06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]
 8008b04:	e001      	b.n	8008b0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b0a:	f001 fb8f 	bl	800a22c <vPortExitCritical>

	return xReturn;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	e014      	b.n	8008b52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008b28:	4a0e      	ldr	r2, [pc, #56]	; (8008b64 <vQueueAddToRegistry+0x4c>)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10b      	bne.n	8008b4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008b34:	490b      	ldr	r1, [pc, #44]	; (8008b64 <vQueueAddToRegistry+0x4c>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008b3e:	4a09      	ldr	r2, [pc, #36]	; (8008b64 <vQueueAddToRegistry+0x4c>)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	4413      	add	r3, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008b4a:	e006      	b.n	8008b5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b07      	cmp	r3, #7
 8008b56:	d9e7      	bls.n	8008b28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr
 8008b64:	200029cc 	.word	0x200029cc

08008b68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008b78:	f001 fb28 	bl	800a1cc <vPortEnterCritical>
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b82:	b25b      	sxtb	r3, r3
 8008b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b88:	d103      	bne.n	8008b92 <vQueueWaitForMessageRestricted+0x2a>
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b98:	b25b      	sxtb	r3, r3
 8008b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9e:	d103      	bne.n	8008ba8 <vQueueWaitForMessageRestricted+0x40>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ba8:	f001 fb40 	bl	800a22c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d106      	bne.n	8008bc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	3324      	adds	r3, #36	; 0x24
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fc31 	bl	8009424 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008bc2:	6978      	ldr	r0, [r7, #20]
 8008bc4:	f7ff ff28 	bl	8008a18 <prvUnlockQueue>
	}
 8008bc8:	bf00      	nop
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08e      	sub	sp, #56	; 0x38
 8008bd4:	af04      	add	r7, sp, #16
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10a      	bne.n	8008bfa <xTaskCreateStatic+0x2a>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	623b      	str	r3, [r7, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	e7fe      	b.n	8008bf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <xTaskCreateStatic+0x46>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	61fb      	str	r3, [r7, #28]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c16:	235c      	movs	r3, #92	; 0x5c
 8008c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b5c      	cmp	r3, #92	; 0x5c
 8008c1e:	d00a      	beq.n	8008c36 <xTaskCreateStatic+0x66>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	61bb      	str	r3, [r7, #24]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d01e      	beq.n	8008c7a <xTaskCreateStatic+0xaa>
 8008c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01b      	beq.n	8008c7a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c54:	2300      	movs	r3, #0
 8008c56:	9303      	str	r3, [sp, #12]
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	9302      	str	r3, [sp, #8]
 8008c5c:	f107 0314 	add.w	r3, r7, #20
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	68b9      	ldr	r1, [r7, #8]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 f850 	bl	8008d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c74:	f000 f8d4 	bl	8008e20 <prvAddNewTaskToReadyList>
 8008c78:	e001      	b.n	8008c7e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c7e:	697b      	ldr	r3, [r7, #20]
	}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3728      	adds	r7, #40	; 0x28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08c      	sub	sp, #48	; 0x30
 8008c8c:	af04      	add	r7, sp, #16
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	4613      	mov	r3, r2
 8008c96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 fb95 	bl	800a3cc <pvPortMalloc>
 8008ca2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00e      	beq.n	8008cc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008caa:	205c      	movs	r0, #92	; 0x5c
 8008cac:	f001 fb8e 	bl	800a3cc <pvPortMalloc>
 8008cb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8008cbe:	e005      	b.n	8008ccc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cc0:	6978      	ldr	r0, [r7, #20]
 8008cc2:	f001 fc47 	bl	800a554 <vPortFree>
 8008cc6:	e001      	b.n	8008ccc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d017      	beq.n	8008d02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	9303      	str	r3, [sp, #12]
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	9302      	str	r3, [sp, #8]
 8008ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68b9      	ldr	r1, [r7, #8]
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 f80e 	bl	8008d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008cf6:	69f8      	ldr	r0, [r7, #28]
 8008cf8:	f000 f892 	bl	8008e20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	61bb      	str	r3, [r7, #24]
 8008d00:	e002      	b.n	8008d08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d02:	f04f 33ff 	mov.w	r3, #4294967295
 8008d06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d08:	69bb      	ldr	r3, [r7, #24]
	}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b088      	sub	sp, #32
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	461a      	mov	r2, r3
 8008d2a:	21a5      	movs	r1, #165	; 0xa5
 8008d2c:	f001 fd5e 	bl	800a7ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	f023 0307 	bic.w	r3, r3, #7
 8008d48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00a      	beq.n	8008d6a <prvInitialiseNewTask+0x58>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	617b      	str	r3, [r7, #20]
}
 8008d66:	bf00      	nop
 8008d68:	e7fe      	b.n	8008d68 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	e012      	b.n	8008d96 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d70:	68ba      	ldr	r2, [r7, #8]
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	4413      	add	r3, r2
 8008d76:	7819      	ldrb	r1, [r3, #0]
 8008d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	3334      	adds	r3, #52	; 0x34
 8008d80:	460a      	mov	r2, r1
 8008d82:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	4413      	add	r3, r2
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d006      	beq.n	8008d9e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	3301      	adds	r3, #1
 8008d94:	61fb      	str	r3, [r7, #28]
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	2b0f      	cmp	r3, #15
 8008d9a:	d9e9      	bls.n	8008d70 <prvInitialiseNewTask+0x5e>
 8008d9c:	e000      	b.n	8008da0 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008d9e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008daa:	2b37      	cmp	r3, #55	; 0x37
 8008dac:	d901      	bls.n	8008db2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dae:	2337      	movs	r3, #55	; 0x37
 8008db0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008db6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dbc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff f94e 	bl	800806a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	3318      	adds	r3, #24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7ff f949 	bl	800806a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ddc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	2200      	movs	r2, #0
 8008df2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008dfc:	683a      	ldr	r2, [r7, #0]
 8008dfe:	68f9      	ldr	r1, [r7, #12]
 8008e00:	69b8      	ldr	r0, [r7, #24]
 8008e02:	f001 f8ef 	bl	8009fe4 <pxPortInitialiseStack>
 8008e06:	4602      	mov	r2, r0
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e18:	bf00      	nop
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e28:	f001 f9d0 	bl	800a1cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e2c:	4b2d      	ldr	r3, [pc, #180]	; (8008ee4 <prvAddNewTaskToReadyList+0xc4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3301      	adds	r3, #1
 8008e32:	4a2c      	ldr	r2, [pc, #176]	; (8008ee4 <prvAddNewTaskToReadyList+0xc4>)
 8008e34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e36:	4b2c      	ldr	r3, [pc, #176]	; (8008ee8 <prvAddNewTaskToReadyList+0xc8>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d109      	bne.n	8008e52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e3e:	4a2a      	ldr	r2, [pc, #168]	; (8008ee8 <prvAddNewTaskToReadyList+0xc8>)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e44:	4b27      	ldr	r3, [pc, #156]	; (8008ee4 <prvAddNewTaskToReadyList+0xc4>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d110      	bne.n	8008e6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e4c:	f000 fc16 	bl	800967c <prvInitialiseTaskLists>
 8008e50:	e00d      	b.n	8008e6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e52:	4b26      	ldr	r3, [pc, #152]	; (8008eec <prvAddNewTaskToReadyList+0xcc>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d109      	bne.n	8008e6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e5a:	4b23      	ldr	r3, [pc, #140]	; (8008ee8 <prvAddNewTaskToReadyList+0xc8>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d802      	bhi.n	8008e6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e68:	4a1f      	ldr	r2, [pc, #124]	; (8008ee8 <prvAddNewTaskToReadyList+0xc8>)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e6e:	4b20      	ldr	r3, [pc, #128]	; (8008ef0 <prvAddNewTaskToReadyList+0xd0>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <prvAddNewTaskToReadyList+0xd0>)
 8008e76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e78:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <prvAddNewTaskToReadyList+0xd0>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e84:	4b1b      	ldr	r3, [pc, #108]	; (8008ef4 <prvAddNewTaskToReadyList+0xd4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d903      	bls.n	8008e94 <prvAddNewTaskToReadyList+0x74>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e90:	4a18      	ldr	r2, [pc, #96]	; (8008ef4 <prvAddNewTaskToReadyList+0xd4>)
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e98:	4613      	mov	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4a15      	ldr	r2, [pc, #84]	; (8008ef8 <prvAddNewTaskToReadyList+0xd8>)
 8008ea2:	441a      	add	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	f7ff f8e9 	bl	8008082 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008eb0:	f001 f9bc 	bl	800a22c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008eb4:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <prvAddNewTaskToReadyList+0xcc>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00e      	beq.n	8008eda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ebc:	4b0a      	ldr	r3, [pc, #40]	; (8008ee8 <prvAddNewTaskToReadyList+0xc8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d207      	bcs.n	8008eda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008eca:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <prvAddNewTaskToReadyList+0xdc>)
 8008ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000c40 	.word	0x20000c40
 8008ee8:	2000076c 	.word	0x2000076c
 8008eec:	20000c4c 	.word	0x20000c4c
 8008ef0:	20000c5c 	.word	0x20000c5c
 8008ef4:	20000c48 	.word	0x20000c48
 8008ef8:	20000770 	.word	0x20000770
 8008efc:	e000ed04 	.word	0xe000ed04

08008f00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d017      	beq.n	8008f42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f12:	4b13      	ldr	r3, [pc, #76]	; (8008f60 <vTaskDelay+0x60>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <vTaskDelay+0x30>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	60bb      	str	r3, [r7, #8]
}
 8008f2c:	bf00      	nop
 8008f2e:	e7fe      	b.n	8008f2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f30:	f000 f880 	bl	8009034 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fcee 	bl	8009918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f3c:	f000 f888 	bl	8009050 <xTaskResumeAll>
 8008f40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d107      	bne.n	8008f58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <vTaskDelay+0x64>)
 8008f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000c68 	.word	0x20000c68
 8008f64:	e000ed04 	.word	0xe000ed04

08008f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	; 0x28
 8008f6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f76:	463a      	mov	r2, r7
 8008f78:	1d39      	adds	r1, r7, #4
 8008f7a:	f107 0308 	add.w	r3, r7, #8
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7ff f822 	bl	8007fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	9202      	str	r2, [sp, #8]
 8008f8c:	9301      	str	r3, [sp, #4]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	2300      	movs	r3, #0
 8008f94:	460a      	mov	r2, r1
 8008f96:	4921      	ldr	r1, [pc, #132]	; (800901c <vTaskStartScheduler+0xb4>)
 8008f98:	4821      	ldr	r0, [pc, #132]	; (8009020 <vTaskStartScheduler+0xb8>)
 8008f9a:	f7ff fe19 	bl	8008bd0 <xTaskCreateStatic>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	4a20      	ldr	r2, [pc, #128]	; (8009024 <vTaskStartScheduler+0xbc>)
 8008fa2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008fa4:	4b1f      	ldr	r3, [pc, #124]	; (8009024 <vTaskStartScheduler+0xbc>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008fac:	2301      	movs	r3, #1
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	e001      	b.n	8008fb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d102      	bne.n	8008fc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008fbc:	f000 fd00 	bl	80099c0 <xTimerCreateTimerTask>
 8008fc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d116      	bne.n	8008ff6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	613b      	str	r3, [r7, #16]
}
 8008fda:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fdc:	4b12      	ldr	r3, [pc, #72]	; (8009028 <vTaskStartScheduler+0xc0>)
 8008fde:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fe4:	4b11      	ldr	r3, [pc, #68]	; (800902c <vTaskStartScheduler+0xc4>)
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008fea:	4b11      	ldr	r3, [pc, #68]	; (8009030 <vTaskStartScheduler+0xc8>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ff0:	f001 f87a 	bl	800a0e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ff4:	e00e      	b.n	8009014 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d10a      	bne.n	8009014 <vTaskStartScheduler+0xac>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	60fb      	str	r3, [r7, #12]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <vTaskStartScheduler+0xaa>
}
 8009014:	bf00      	nop
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	0800acf4 	.word	0x0800acf4
 8009020:	0800964d 	.word	0x0800964d
 8009024:	20000c64 	.word	0x20000c64
 8009028:	20000c60 	.word	0x20000c60
 800902c:	20000c4c 	.word	0x20000c4c
 8009030:	20000c44 	.word	0x20000c44

08009034 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009034:	b480      	push	{r7}
 8009036:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009038:	4b04      	ldr	r3, [pc, #16]	; (800904c <vTaskSuspendAll+0x18>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3301      	adds	r3, #1
 800903e:	4a03      	ldr	r2, [pc, #12]	; (800904c <vTaskSuspendAll+0x18>)
 8009040:	6013      	str	r3, [r2, #0]
}
 8009042:	bf00      	nop
 8009044:	46bd      	mov	sp, r7
 8009046:	bc80      	pop	{r7}
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20000c68 	.word	0x20000c68

08009050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800905a:	2300      	movs	r3, #0
 800905c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800905e:	4b42      	ldr	r3, [pc, #264]	; (8009168 <xTaskResumeAll+0x118>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d10a      	bne.n	800907c <xTaskResumeAll+0x2c>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	603b      	str	r3, [r7, #0]
}
 8009078:	bf00      	nop
 800907a:	e7fe      	b.n	800907a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800907c:	f001 f8a6 	bl	800a1cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009080:	4b39      	ldr	r3, [pc, #228]	; (8009168 <xTaskResumeAll+0x118>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3b01      	subs	r3, #1
 8009086:	4a38      	ldr	r2, [pc, #224]	; (8009168 <xTaskResumeAll+0x118>)
 8009088:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800908a:	4b37      	ldr	r3, [pc, #220]	; (8009168 <xTaskResumeAll+0x118>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d162      	bne.n	8009158 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009092:	4b36      	ldr	r3, [pc, #216]	; (800916c <xTaskResumeAll+0x11c>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d05e      	beq.n	8009158 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800909a:	e02f      	b.n	80090fc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800909c:	4b34      	ldr	r3, [pc, #208]	; (8009170 <xTaskResumeAll+0x120>)
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3318      	adds	r3, #24
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff f845 	bl	8008138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3304      	adds	r3, #4
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff f840 	bl	8008138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090bc:	4b2d      	ldr	r3, [pc, #180]	; (8009174 <xTaskResumeAll+0x124>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d903      	bls.n	80090cc <xTaskResumeAll+0x7c>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c8:	4a2a      	ldr	r2, [pc, #168]	; (8009174 <xTaskResumeAll+0x124>)
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d0:	4613      	mov	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4413      	add	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4a27      	ldr	r2, [pc, #156]	; (8009178 <xTaskResumeAll+0x128>)
 80090da:	441a      	add	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3304      	adds	r3, #4
 80090e0:	4619      	mov	r1, r3
 80090e2:	4610      	mov	r0, r2
 80090e4:	f7fe ffcd 	bl	8008082 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4b23      	ldr	r3, [pc, #140]	; (800917c <xTaskResumeAll+0x12c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d302      	bcc.n	80090fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80090f6:	4b22      	ldr	r3, [pc, #136]	; (8009180 <xTaskResumeAll+0x130>)
 80090f8:	2201      	movs	r2, #1
 80090fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090fc:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <xTaskResumeAll+0x120>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1cb      	bne.n	800909c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800910a:	f000 fb55 	bl	80097b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800910e:	4b1d      	ldr	r3, [pc, #116]	; (8009184 <xTaskResumeAll+0x134>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d010      	beq.n	800913c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800911a:	f000 f845 	bl	80091a8 <xTaskIncrementTick>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009124:	4b16      	ldr	r3, [pc, #88]	; (8009180 <xTaskResumeAll+0x130>)
 8009126:	2201      	movs	r2, #1
 8009128:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3b01      	subs	r3, #1
 800912e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1f1      	bne.n	800911a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8009136:	4b13      	ldr	r3, [pc, #76]	; (8009184 <xTaskResumeAll+0x134>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800913c:	4b10      	ldr	r3, [pc, #64]	; (8009180 <xTaskResumeAll+0x130>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d009      	beq.n	8009158 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009144:	2301      	movs	r3, #1
 8009146:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009148:	4b0f      	ldr	r3, [pc, #60]	; (8009188 <xTaskResumeAll+0x138>)
 800914a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009158:	f001 f868 	bl	800a22c <vPortExitCritical>

	return xAlreadyYielded;
 800915c:	68bb      	ldr	r3, [r7, #8]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20000c68 	.word	0x20000c68
 800916c:	20000c40 	.word	0x20000c40
 8009170:	20000c00 	.word	0x20000c00
 8009174:	20000c48 	.word	0x20000c48
 8009178:	20000770 	.word	0x20000770
 800917c:	2000076c 	.word	0x2000076c
 8009180:	20000c54 	.word	0x20000c54
 8009184:	20000c50 	.word	0x20000c50
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009192:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <xTaskGetTickCount+0x18>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009198:	687b      	ldr	r3, [r7, #4]
}
 800919a:	4618      	mov	r0, r3
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr
 80091a4:	20000c44 	.word	0x20000c44

080091a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b086      	sub	sp, #24
 80091ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b2:	4b51      	ldr	r3, [pc, #324]	; (80092f8 <xTaskIncrementTick+0x150>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f040 808e 	bne.w	80092d8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091bc:	4b4f      	ldr	r3, [pc, #316]	; (80092fc <xTaskIncrementTick+0x154>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3301      	adds	r3, #1
 80091c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091c4:	4a4d      	ldr	r2, [pc, #308]	; (80092fc <xTaskIncrementTick+0x154>)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d120      	bne.n	8009212 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80091d0:	4b4b      	ldr	r3, [pc, #300]	; (8009300 <xTaskIncrementTick+0x158>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	603b      	str	r3, [r7, #0]
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <xTaskIncrementTick+0x46>
 80091f0:	4b43      	ldr	r3, [pc, #268]	; (8009300 <xTaskIncrementTick+0x158>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	60fb      	str	r3, [r7, #12]
 80091f6:	4b43      	ldr	r3, [pc, #268]	; (8009304 <xTaskIncrementTick+0x15c>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a41      	ldr	r2, [pc, #260]	; (8009300 <xTaskIncrementTick+0x158>)
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	4a41      	ldr	r2, [pc, #260]	; (8009304 <xTaskIncrementTick+0x15c>)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6013      	str	r3, [r2, #0]
 8009204:	4b40      	ldr	r3, [pc, #256]	; (8009308 <xTaskIncrementTick+0x160>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3301      	adds	r3, #1
 800920a:	4a3f      	ldr	r2, [pc, #252]	; (8009308 <xTaskIncrementTick+0x160>)
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	f000 fad3 	bl	80097b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009212:	4b3e      	ldr	r3, [pc, #248]	; (800930c <xTaskIncrementTick+0x164>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	429a      	cmp	r2, r3
 800921a:	d34e      	bcc.n	80092ba <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800921c:	4b38      	ldr	r3, [pc, #224]	; (8009300 <xTaskIncrementTick+0x158>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <xTaskIncrementTick+0x82>
 8009226:	2301      	movs	r3, #1
 8009228:	e000      	b.n	800922c <xTaskIncrementTick+0x84>
 800922a:	2300      	movs	r3, #0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009230:	4b36      	ldr	r3, [pc, #216]	; (800930c <xTaskIncrementTick+0x164>)
 8009232:	f04f 32ff 	mov.w	r2, #4294967295
 8009236:	601a      	str	r2, [r3, #0]
					break;
 8009238:	e03f      	b.n	80092ba <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800923a:	4b31      	ldr	r3, [pc, #196]	; (8009300 <xTaskIncrementTick+0x158>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d203      	bcs.n	800925a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009252:	4a2e      	ldr	r2, [pc, #184]	; (800930c <xTaskIncrementTick+0x164>)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6013      	str	r3, [r2, #0]
						break;
 8009258:	e02f      	b.n	80092ba <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	3304      	adds	r3, #4
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe ff6a 	bl	8008138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	3318      	adds	r3, #24
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe ff61 	bl	8008138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927a:	4b25      	ldr	r3, [pc, #148]	; (8009310 <xTaskIncrementTick+0x168>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d903      	bls.n	800928a <xTaskIncrementTick+0xe2>
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	4a22      	ldr	r2, [pc, #136]	; (8009310 <xTaskIncrementTick+0x168>)
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4a1f      	ldr	r2, [pc, #124]	; (8009314 <xTaskIncrementTick+0x16c>)
 8009298:	441a      	add	r2, r3
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	3304      	adds	r3, #4
 800929e:	4619      	mov	r1, r3
 80092a0:	4610      	mov	r0, r2
 80092a2:	f7fe feee 	bl	8008082 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092aa:	4b1b      	ldr	r3, [pc, #108]	; (8009318 <xTaskIncrementTick+0x170>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d3b3      	bcc.n	800921c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80092b4:	2301      	movs	r3, #1
 80092b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092b8:	e7b0      	b.n	800921c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092ba:	4b17      	ldr	r3, [pc, #92]	; (8009318 <xTaskIncrementTick+0x170>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c0:	4914      	ldr	r1, [pc, #80]	; (8009314 <xTaskIncrementTick+0x16c>)
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d907      	bls.n	80092e2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80092d2:	2301      	movs	r3, #1
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	e004      	b.n	80092e2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80092d8:	4b10      	ldr	r3, [pc, #64]	; (800931c <xTaskIncrementTick+0x174>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	4a0f      	ldr	r2, [pc, #60]	; (800931c <xTaskIncrementTick+0x174>)
 80092e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80092e2:	4b0f      	ldr	r3, [pc, #60]	; (8009320 <xTaskIncrementTick+0x178>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d001      	beq.n	80092ee <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80092ea:	2301      	movs	r3, #1
 80092ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80092ee:	697b      	ldr	r3, [r7, #20]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20000c68 	.word	0x20000c68
 80092fc:	20000c44 	.word	0x20000c44
 8009300:	20000bf8 	.word	0x20000bf8
 8009304:	20000bfc 	.word	0x20000bfc
 8009308:	20000c58 	.word	0x20000c58
 800930c:	20000c60 	.word	0x20000c60
 8009310:	20000c48 	.word	0x20000c48
 8009314:	20000770 	.word	0x20000770
 8009318:	2000076c 	.word	0x2000076c
 800931c:	20000c50 	.word	0x20000c50
 8009320:	20000c54 	.word	0x20000c54

08009324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800932a:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <vTaskSwitchContext+0xa4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d003      	beq.n	800933a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009332:	4b26      	ldr	r3, [pc, #152]	; (80093cc <vTaskSwitchContext+0xa8>)
 8009334:	2201      	movs	r2, #1
 8009336:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009338:	e041      	b.n	80093be <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800933a:	4b24      	ldr	r3, [pc, #144]	; (80093cc <vTaskSwitchContext+0xa8>)
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009340:	4b23      	ldr	r3, [pc, #140]	; (80093d0 <vTaskSwitchContext+0xac>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	e010      	b.n	800936a <vTaskSwitchContext+0x46>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10a      	bne.n	8009364 <vTaskSwitchContext+0x40>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	607b      	str	r3, [r7, #4]
}
 8009360:	bf00      	nop
 8009362:	e7fe      	b.n	8009362 <vTaskSwitchContext+0x3e>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3b01      	subs	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	491a      	ldr	r1, [pc, #104]	; (80093d4 <vTaskSwitchContext+0xb0>)
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0e4      	beq.n	8009348 <vTaskSwitchContext+0x24>
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	4613      	mov	r3, r2
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4a12      	ldr	r2, [pc, #72]	; (80093d4 <vTaskSwitchContext+0xb0>)
 800938a:	4413      	add	r3, r2
 800938c:	60bb      	str	r3, [r7, #8]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	605a      	str	r2, [r3, #4]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	3308      	adds	r3, #8
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d104      	bne.n	80093ae <vTaskSwitchContext+0x8a>
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	605a      	str	r2, [r3, #4]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	4a08      	ldr	r2, [pc, #32]	; (80093d8 <vTaskSwitchContext+0xb4>)
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	4a05      	ldr	r2, [pc, #20]	; (80093d0 <vTaskSwitchContext+0xac>)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6013      	str	r3, [r2, #0]
}
 80093be:	bf00      	nop
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bc80      	pop	{r7}
 80093c6:	4770      	bx	lr
 80093c8:	20000c68 	.word	0x20000c68
 80093cc:	20000c54 	.word	0x20000c54
 80093d0:	20000c48 	.word	0x20000c48
 80093d4:	20000770 	.word	0x20000770
 80093d8:	2000076c 	.word	0x2000076c

080093dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	60fb      	str	r3, [r7, #12]
}
 80093fe:	bf00      	nop
 8009400:	e7fe      	b.n	8009400 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009402:	4b07      	ldr	r3, [pc, #28]	; (8009420 <vTaskPlaceOnEventList+0x44>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3318      	adds	r3, #24
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7fe fe5c 	bl	80080c8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009410:	2101      	movs	r1, #1
 8009412:	6838      	ldr	r0, [r7, #0]
 8009414:	f000 fa80 	bl	8009918 <prvAddCurrentTaskToDelayedList>
}
 8009418:	bf00      	nop
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	2000076c 	.word	0x2000076c

08009424 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	617b      	str	r3, [r7, #20]
}
 8009448:	bf00      	nop
 800944a:	e7fe      	b.n	800944a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800944c:	4b0a      	ldr	r3, [pc, #40]	; (8009478 <vTaskPlaceOnEventListRestricted+0x54>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3318      	adds	r3, #24
 8009452:	4619      	mov	r1, r3
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f7fe fe14 	bl	8008082 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009460:	f04f 33ff 	mov.w	r3, #4294967295
 8009464:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	68b8      	ldr	r0, [r7, #8]
 800946a:	f000 fa55 	bl	8009918 <prvAddCurrentTaskToDelayedList>
	}
 800946e:	bf00      	nop
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	2000076c 	.word	0x2000076c

0800947c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b086      	sub	sp, #24
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10a      	bne.n	80094a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009496:	f383 8811 	msr	BASEPRI, r3
 800949a:	f3bf 8f6f 	isb	sy
 800949e:	f3bf 8f4f 	dsb	sy
 80094a2:	60fb      	str	r3, [r7, #12]
}
 80094a4:	bf00      	nop
 80094a6:	e7fe      	b.n	80094a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	3318      	adds	r3, #24
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe fe43 	bl	8008138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094b2:	4b1e      	ldr	r3, [pc, #120]	; (800952c <xTaskRemoveFromEventList+0xb0>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d11d      	bne.n	80094f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	3304      	adds	r3, #4
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fe3a 	bl	8008138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c8:	4b19      	ldr	r3, [pc, #100]	; (8009530 <xTaskRemoveFromEventList+0xb4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d903      	bls.n	80094d8 <xTaskRemoveFromEventList+0x5c>
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d4:	4a16      	ldr	r2, [pc, #88]	; (8009530 <xTaskRemoveFromEventList+0xb4>)
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	4613      	mov	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	4a13      	ldr	r2, [pc, #76]	; (8009534 <xTaskRemoveFromEventList+0xb8>)
 80094e6:	441a      	add	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7fe fdc7 	bl	8008082 <vListInsertEnd>
 80094f4:	e005      	b.n	8009502 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	3318      	adds	r3, #24
 80094fa:	4619      	mov	r1, r3
 80094fc:	480e      	ldr	r0, [pc, #56]	; (8009538 <xTaskRemoveFromEventList+0xbc>)
 80094fe:	f7fe fdc0 	bl	8008082 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <xTaskRemoveFromEventList+0xc0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	429a      	cmp	r2, r3
 800950e:	d905      	bls.n	800951c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009510:	2301      	movs	r3, #1
 8009512:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009514:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <xTaskRemoveFromEventList+0xc4>)
 8009516:	2201      	movs	r2, #1
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e001      	b.n	8009520 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800951c:	2300      	movs	r3, #0
 800951e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009520:	697b      	ldr	r3, [r7, #20]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20000c68 	.word	0x20000c68
 8009530:	20000c48 	.word	0x20000c48
 8009534:	20000770 	.word	0x20000770
 8009538:	20000c00 	.word	0x20000c00
 800953c:	2000076c 	.word	0x2000076c
 8009540:	20000c54 	.word	0x20000c54

08009544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <vTaskInternalSetTimeOutState+0x24>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <vTaskInternalSetTimeOutState+0x28>)
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	605a      	str	r2, [r3, #4]
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	bc80      	pop	{r7}
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	20000c58 	.word	0x20000c58
 800956c:	20000c44 	.word	0x20000c44

08009570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d10a      	bne.n	8009596 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	613b      	str	r3, [r7, #16]
}
 8009592:	bf00      	nop
 8009594:	e7fe      	b.n	8009594 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10a      	bne.n	80095b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	60fb      	str	r3, [r7, #12]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80095b2:	f000 fe0b 	bl	800a1cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095b6:	4b1d      	ldr	r3, [pc, #116]	; (800962c <xTaskCheckForTimeOut+0xbc>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	69ba      	ldr	r2, [r7, #24]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ce:	d102      	bne.n	80095d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	61fb      	str	r3, [r7, #28]
 80095d4:	e023      	b.n	800961e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4b15      	ldr	r3, [pc, #84]	; (8009630 <xTaskCheckForTimeOut+0xc0>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d007      	beq.n	80095f2 <xTaskCheckForTimeOut+0x82>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d302      	bcc.n	80095f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095ec:	2301      	movs	r3, #1
 80095ee:	61fb      	str	r3, [r7, #28]
 80095f0:	e015      	b.n	800961e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d20b      	bcs.n	8009614 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	1ad2      	subs	r2, r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ff9b 	bl	8009544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	61fb      	str	r3, [r7, #28]
 8009612:	e004      	b.n	800961e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2200      	movs	r2, #0
 8009618:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800961a:	2301      	movs	r3, #1
 800961c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800961e:	f000 fe05 	bl	800a22c <vPortExitCritical>

	return xReturn;
 8009622:	69fb      	ldr	r3, [r7, #28]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3720      	adds	r7, #32
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	20000c44 	.word	0x20000c44
 8009630:	20000c58 	.word	0x20000c58

08009634 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009638:	4b03      	ldr	r3, [pc, #12]	; (8009648 <vTaskMissedYield+0x14>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
}
 800963e:	bf00      	nop
 8009640:	46bd      	mov	sp, r7
 8009642:	bc80      	pop	{r7}
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	20000c54 	.word	0x20000c54

0800964c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009654:	f000 f852 	bl	80096fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009658:	4b06      	ldr	r3, [pc, #24]	; (8009674 <prvIdleTask+0x28>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d9f9      	bls.n	8009654 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009660:	4b05      	ldr	r3, [pc, #20]	; (8009678 <prvIdleTask+0x2c>)
 8009662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009670:	e7f0      	b.n	8009654 <prvIdleTask+0x8>
 8009672:	bf00      	nop
 8009674:	20000770 	.word	0x20000770
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009682:	2300      	movs	r3, #0
 8009684:	607b      	str	r3, [r7, #4]
 8009686:	e00c      	b.n	80096a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4a12      	ldr	r2, [pc, #72]	; (80096dc <prvInitialiseTaskLists+0x60>)
 8009694:	4413      	add	r3, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fcc8 	bl	800802c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3301      	adds	r3, #1
 80096a0:	607b      	str	r3, [r7, #4]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b37      	cmp	r3, #55	; 0x37
 80096a6:	d9ef      	bls.n	8009688 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096a8:	480d      	ldr	r0, [pc, #52]	; (80096e0 <prvInitialiseTaskLists+0x64>)
 80096aa:	f7fe fcbf 	bl	800802c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096ae:	480d      	ldr	r0, [pc, #52]	; (80096e4 <prvInitialiseTaskLists+0x68>)
 80096b0:	f7fe fcbc 	bl	800802c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096b4:	480c      	ldr	r0, [pc, #48]	; (80096e8 <prvInitialiseTaskLists+0x6c>)
 80096b6:	f7fe fcb9 	bl	800802c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ba:	480c      	ldr	r0, [pc, #48]	; (80096ec <prvInitialiseTaskLists+0x70>)
 80096bc:	f7fe fcb6 	bl	800802c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096c0:	480b      	ldr	r0, [pc, #44]	; (80096f0 <prvInitialiseTaskLists+0x74>)
 80096c2:	f7fe fcb3 	bl	800802c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <prvInitialiseTaskLists+0x78>)
 80096c8:	4a05      	ldr	r2, [pc, #20]	; (80096e0 <prvInitialiseTaskLists+0x64>)
 80096ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <prvInitialiseTaskLists+0x7c>)
 80096ce:	4a05      	ldr	r2, [pc, #20]	; (80096e4 <prvInitialiseTaskLists+0x68>)
 80096d0:	601a      	str	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000770 	.word	0x20000770
 80096e0:	20000bd0 	.word	0x20000bd0
 80096e4:	20000be4 	.word	0x20000be4
 80096e8:	20000c00 	.word	0x20000c00
 80096ec:	20000c14 	.word	0x20000c14
 80096f0:	20000c2c 	.word	0x20000c2c
 80096f4:	20000bf8 	.word	0x20000bf8
 80096f8:	20000bfc 	.word	0x20000bfc

080096fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009702:	e019      	b.n	8009738 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009704:	f000 fd62 	bl	800a1cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009708:	4b10      	ldr	r3, [pc, #64]	; (800974c <prvCheckTasksWaitingTermination+0x50>)
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fd0f 	bl	8008138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800971a:	4b0d      	ldr	r3, [pc, #52]	; (8009750 <prvCheckTasksWaitingTermination+0x54>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3b01      	subs	r3, #1
 8009720:	4a0b      	ldr	r2, [pc, #44]	; (8009750 <prvCheckTasksWaitingTermination+0x54>)
 8009722:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <prvCheckTasksWaitingTermination+0x58>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3b01      	subs	r3, #1
 800972a:	4a0a      	ldr	r2, [pc, #40]	; (8009754 <prvCheckTasksWaitingTermination+0x58>)
 800972c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800972e:	f000 fd7d 	bl	800a22c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f810 	bl	8009758 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009738:	4b06      	ldr	r3, [pc, #24]	; (8009754 <prvCheckTasksWaitingTermination+0x58>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e1      	bne.n	8009704 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009740:	bf00      	nop
 8009742:	bf00      	nop
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	20000c14 	.word	0x20000c14
 8009750:	20000c40 	.word	0x20000c40
 8009754:	20000c28 	.word	0x20000c28

08009758 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009766:	2b00      	cmp	r3, #0
 8009768:	d108      	bne.n	800977c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976e:	4618      	mov	r0, r3
 8009770:	f000 fef0 	bl	800a554 <vPortFree>
				vPortFree( pxTCB );
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 feed 	bl	800a554 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800977a:	e018      	b.n	80097ae <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009782:	2b01      	cmp	r3, #1
 8009784:	d103      	bne.n	800978e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fee4 	bl	800a554 <vPortFree>
	}
 800978c:	e00f      	b.n	80097ae <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009794:	2b02      	cmp	r3, #2
 8009796:	d00a      	beq.n	80097ae <prvDeleteTCB+0x56>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	60fb      	str	r3, [r7, #12]
}
 80097aa:	bf00      	nop
 80097ac:	e7fe      	b.n	80097ac <prvDeleteTCB+0x54>
	}
 80097ae:	bf00      	nop
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097be:	4b0e      	ldr	r3, [pc, #56]	; (80097f8 <prvResetNextTaskUnblockTime+0x40>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <prvResetNextTaskUnblockTime+0x14>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <prvResetNextTaskUnblockTime+0x16>
 80097cc:	2300      	movs	r3, #0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d004      	beq.n	80097dc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097d2:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <prvResetNextTaskUnblockTime+0x44>)
 80097d4:	f04f 32ff 	mov.w	r2, #4294967295
 80097d8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097da:	e008      	b.n	80097ee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80097dc:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <prvResetNextTaskUnblockTime+0x40>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	4a04      	ldr	r2, [pc, #16]	; (80097fc <prvResetNextTaskUnblockTime+0x44>)
 80097ec:	6013      	str	r3, [r2, #0]
}
 80097ee:	bf00      	nop
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bc80      	pop	{r7}
 80097f6:	4770      	bx	lr
 80097f8:	20000bf8 	.word	0x20000bf8
 80097fc:	20000c60 	.word	0x20000c60

08009800 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009806:	4b0b      	ldr	r3, [pc, #44]	; (8009834 <xTaskGetSchedulerState+0x34>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800980e:	2301      	movs	r3, #1
 8009810:	607b      	str	r3, [r7, #4]
 8009812:	e008      	b.n	8009826 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009814:	4b08      	ldr	r3, [pc, #32]	; (8009838 <xTaskGetSchedulerState+0x38>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800981c:	2302      	movs	r3, #2
 800981e:	607b      	str	r3, [r7, #4]
 8009820:	e001      	b.n	8009826 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009822:	2300      	movs	r3, #0
 8009824:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009826:	687b      	ldr	r3, [r7, #4]
	}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	bc80      	pop	{r7}
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	20000c4c 	.word	0x20000c4c
 8009838:	20000c68 	.word	0x20000c68

0800983c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800983c:	b580      	push	{r7, lr}
 800983e:	b086      	sub	sp, #24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009848:	2300      	movs	r3, #0
 800984a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d056      	beq.n	8009900 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009852:	4b2e      	ldr	r3, [pc, #184]	; (800990c <xTaskPriorityDisinherit+0xd0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	429a      	cmp	r2, r3
 800985a:	d00a      	beq.n	8009872 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800985c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009860:	f383 8811 	msr	BASEPRI, r3
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	f3bf 8f4f 	dsb	sy
 800986c:	60fb      	str	r3, [r7, #12]
}
 800986e:	bf00      	nop
 8009870:	e7fe      	b.n	8009870 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	60bb      	str	r3, [r7, #8]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009894:	1e5a      	subs	r2, r3, #1
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d02c      	beq.n	8009900 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d128      	bne.n	8009900 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	3304      	adds	r3, #4
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fe fc40 	bl	8008138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d0:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <xTaskPriorityDisinherit+0xd4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d903      	bls.n	80098e0 <xTaskPriorityDisinherit+0xa4>
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	4a0c      	ldr	r2, [pc, #48]	; (8009910 <xTaskPriorityDisinherit+0xd4>)
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098e4:	4613      	mov	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4a09      	ldr	r2, [pc, #36]	; (8009914 <xTaskPriorityDisinherit+0xd8>)
 80098ee:	441a      	add	r2, r3
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	3304      	adds	r3, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	4610      	mov	r0, r2
 80098f8:	f7fe fbc3 	bl	8008082 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098fc:	2301      	movs	r3, #1
 80098fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009900:	697b      	ldr	r3, [r7, #20]
	}
 8009902:	4618      	mov	r0, r3
 8009904:	3718      	adds	r7, #24
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	2000076c 	.word	0x2000076c
 8009910:	20000c48 	.word	0x20000c48
 8009914:	20000770 	.word	0x20000770

08009918 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009922:	4b21      	ldr	r3, [pc, #132]	; (80099a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009928:	4b20      	ldr	r3, [pc, #128]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3304      	adds	r3, #4
 800992e:	4618      	mov	r0, r3
 8009930:	f7fe fc02 	bl	8008138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993a:	d10a      	bne.n	8009952 <prvAddCurrentTaskToDelayedList+0x3a>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d007      	beq.n	8009952 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009942:	4b1a      	ldr	r3, [pc, #104]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3304      	adds	r3, #4
 8009948:	4619      	mov	r1, r3
 800994a:	4819      	ldr	r0, [pc, #100]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800994c:	f7fe fb99 	bl	8008082 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009950:	e026      	b.n	80099a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4413      	add	r3, r2
 8009958:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800995a:	4b14      	ldr	r3, [pc, #80]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	429a      	cmp	r2, r3
 8009968:	d209      	bcs.n	800997e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800996a:	4b12      	ldr	r3, [pc, #72]	; (80099b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b0f      	ldr	r3, [pc, #60]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fe fba6 	bl	80080c8 <vListInsert>
}
 800997c:	e010      	b.n	80099a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800997e:	4b0e      	ldr	r3, [pc, #56]	; (80099b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <prvAddCurrentTaskToDelayedList+0x94>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7fe fb9c 	bl	80080c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009990:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	429a      	cmp	r2, r3
 8009998:	d202      	bcs.n	80099a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800999a:	4a08      	ldr	r2, [pc, #32]	; (80099bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	6013      	str	r3, [r2, #0]
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20000c44 	.word	0x20000c44
 80099ac:	2000076c 	.word	0x2000076c
 80099b0:	20000c2c 	.word	0x20000c2c
 80099b4:	20000bfc 	.word	0x20000bfc
 80099b8:	20000bf8 	.word	0x20000bf8
 80099bc:	20000c60 	.word	0x20000c60

080099c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b08a      	sub	sp, #40	; 0x28
 80099c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099c6:	2300      	movs	r3, #0
 80099c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099ca:	f000 facb 	bl	8009f64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099ce:	4b1c      	ldr	r3, [pc, #112]	; (8009a40 <xTimerCreateTimerTask+0x80>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d021      	beq.n	8009a1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099da:	2300      	movs	r3, #0
 80099dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099de:	1d3a      	adds	r2, r7, #4
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	f107 030c 	add.w	r3, r7, #12
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe fb05 	bl	8007ff8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	9202      	str	r2, [sp, #8]
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	2302      	movs	r3, #2
 80099fa:	9300      	str	r3, [sp, #0]
 80099fc:	2300      	movs	r3, #0
 80099fe:	460a      	mov	r2, r1
 8009a00:	4910      	ldr	r1, [pc, #64]	; (8009a44 <xTimerCreateTimerTask+0x84>)
 8009a02:	4811      	ldr	r0, [pc, #68]	; (8009a48 <xTimerCreateTimerTask+0x88>)
 8009a04:	f7ff f8e4 	bl	8008bd0 <xTaskCreateStatic>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	4a10      	ldr	r2, [pc, #64]	; (8009a4c <xTimerCreateTimerTask+0x8c>)
 8009a0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a0e:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <xTimerCreateTimerTask+0x8c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a16:	2301      	movs	r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	613b      	str	r3, [r7, #16]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a36:	697b      	ldr	r3, [r7, #20]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3718      	adds	r7, #24
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000c9c 	.word	0x20000c9c
 8009a44:	0800acfc 	.word	0x0800acfc
 8009a48:	08009b6d 	.word	0x08009b6d
 8009a4c:	20000ca0 	.word	0x20000ca0

08009a50 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	; 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10a      	bne.n	8009a7e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6c:	f383 8811 	msr	BASEPRI, r3
 8009a70:	f3bf 8f6f 	isb	sy
 8009a74:	f3bf 8f4f 	dsb	sy
 8009a78:	623b      	str	r3, [r7, #32]
}
 8009a7a:	bf00      	nop
 8009a7c:	e7fe      	b.n	8009a7c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ae8 <xTimerGenericCommand+0x98>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d02a      	beq.n	8009adc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b05      	cmp	r3, #5
 8009a96:	dc18      	bgt.n	8009aca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a98:	f7ff feb2 	bl	8009800 <xTaskGetSchedulerState>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d109      	bne.n	8009ab6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009aa2:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <xTimerGenericCommand+0x98>)
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	f107 0110 	add.w	r1, r7, #16
 8009aaa:	2300      	movs	r3, #0
 8009aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009aae:	f7fe fcad 	bl	800840c <xQueueGenericSend>
 8009ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ab4:	e012      	b.n	8009adc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <xTimerGenericCommand+0x98>)
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	f107 0110 	add.w	r1, r7, #16
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f7fe fca3 	bl	800840c <xQueueGenericSend>
 8009ac6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ac8:	e008      	b.n	8009adc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009aca:	4b07      	ldr	r3, [pc, #28]	; (8009ae8 <xTimerGenericCommand+0x98>)
 8009acc:	6818      	ldr	r0, [r3, #0]
 8009ace:	f107 0110 	add.w	r1, r7, #16
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	f7fe fd97 	bl	8008608 <xQueueGenericSendFromISR>
 8009ada:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3728      	adds	r7, #40	; 0x28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	20000c9c 	.word	0x20000c9c

08009aec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b088      	sub	sp, #32
 8009af0:	af02      	add	r7, sp, #8
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009af6:	4b1c      	ldr	r3, [pc, #112]	; (8009b68 <prvProcessExpiredTimer+0x7c>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	3304      	adds	r3, #4
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7fe fb17 	bl	8008138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	69db      	ldr	r3, [r3, #28]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d122      	bne.n	8009b58 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	699a      	ldr	r2, [r3, #24]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	18d1      	adds	r1, r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	6978      	ldr	r0, [r7, #20]
 8009b20:	f000 f8c8 	bl	8009cb4 <prvInsertTimerInActiveList>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d016      	beq.n	8009b58 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	2300      	movs	r3, #0
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	2100      	movs	r1, #0
 8009b34:	6978      	ldr	r0, [r7, #20]
 8009b36:	f7ff ff8b 	bl	8009a50 <xTimerGenericCommand>
 8009b3a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10a      	bne.n	8009b58 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	60fb      	str	r3, [r7, #12]
}
 8009b54:	bf00      	nop
 8009b56:	e7fe      	b.n	8009b56 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	6978      	ldr	r0, [r7, #20]
 8009b5e:	4798      	blx	r3
}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20000c94 	.word	0x20000c94

08009b6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b74:	f107 0308 	add.w	r3, r7, #8
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 f857 	bl	8009c2c <prvGetNextExpireTime>
 8009b7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4619      	mov	r1, r3
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f803 	bl	8009b90 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b8a:	f000 f8d5 	bl	8009d38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b8e:	e7f1      	b.n	8009b74 <prvTimerTask+0x8>

08009b90 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009b9a:	f7ff fa4b 	bl	8009034 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b9e:	f107 0308 	add.w	r3, r7, #8
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f000 f866 	bl	8009c74 <prvSampleTimeNow>
 8009ba8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d130      	bne.n	8009c12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d10a      	bne.n	8009bcc <prvProcessTimerOrBlockTask+0x3c>
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d806      	bhi.n	8009bcc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bbe:	f7ff fa47 	bl	8009050 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bc2:	68f9      	ldr	r1, [r7, #12]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff ff91 	bl	8009aec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009bca:	e024      	b.n	8009c16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d008      	beq.n	8009be4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bd2:	4b13      	ldr	r3, [pc, #76]	; (8009c20 <prvProcessTimerOrBlockTask+0x90>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bf0c      	ite	eq
 8009bdc:	2301      	moveq	r3, #1
 8009bde:	2300      	movne	r3, #0
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009be4:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <prvProcessTimerOrBlockTask+0x94>)
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f7fe ffb9 	bl	8008b68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009bf6:	f7ff fa2b 	bl	8009050 <xTaskResumeAll>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10a      	bne.n	8009c16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c00:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <prvProcessTimerOrBlockTask+0x98>)
 8009c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	f3bf 8f4f 	dsb	sy
 8009c0c:	f3bf 8f6f 	isb	sy
}
 8009c10:	e001      	b.n	8009c16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c12:	f7ff fa1d 	bl	8009050 <xTaskResumeAll>
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	20000c98 	.word	0x20000c98
 8009c24:	20000c9c 	.word	0x20000c9c
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <prvGetNextExpireTime+0x44>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bf0c      	ite	eq
 8009c3e:	2301      	moveq	r3, #1
 8009c40:	2300      	movne	r3, #0
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	461a      	mov	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c52:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <prvGetNextExpireTime+0x44>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	e001      	b.n	8009c62 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bc80      	pop	{r7}
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	20000c94 	.word	0x20000c94

08009c74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c7c:	f7ff fa86 	bl	800918c <xTaskGetTickCount>
 8009c80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c82:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <prvSampleTimeNow+0x3c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d205      	bcs.n	8009c98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009c8c:	f000 f908 	bl	8009ea0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	601a      	str	r2, [r3, #0]
 8009c96:	e002      	b.n	8009c9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009c9e:	4a04      	ldr	r2, [pc, #16]	; (8009cb0 <prvSampleTimeNow+0x3c>)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000ca4 	.word	0x20000ca4

08009cb4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d812      	bhi.n	8009d00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d302      	bcc.n	8009cee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	617b      	str	r3, [r7, #20]
 8009cec:	e01b      	b.n	8009d26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009cee:	4b10      	ldr	r3, [pc, #64]	; (8009d30 <prvInsertTimerInActiveList+0x7c>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	4610      	mov	r0, r2
 8009cfa:	f7fe f9e5 	bl	80080c8 <vListInsert>
 8009cfe:	e012      	b.n	8009d26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d206      	bcs.n	8009d16 <prvInsertTimerInActiveList+0x62>
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d302      	bcc.n	8009d16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d10:	2301      	movs	r3, #1
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e007      	b.n	8009d26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d16:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <prvInsertTimerInActiveList+0x80>)
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4610      	mov	r0, r2
 8009d22:	f7fe f9d1 	bl	80080c8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d26:	697b      	ldr	r3, [r7, #20]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	20000c98 	.word	0x20000c98
 8009d34:	20000c94 	.word	0x20000c94

08009d38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08e      	sub	sp, #56	; 0x38
 8009d3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d3e:	e09d      	b.n	8009e7c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da18      	bge.n	8009d78 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	3304      	adds	r3, #4
 8009d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	61fb      	str	r3, [r7, #28]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d6e:	6850      	ldr	r0, [r2, #4]
 8009d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d72:	6892      	ldr	r2, [r2, #8]
 8009d74:	4611      	mov	r1, r2
 8009d76:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	db7d      	blt.n	8009e7a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fe f9d2 	bl	8008138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d94:	463b      	mov	r3, r7
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff ff6c 	bl	8009c74 <prvSampleTimeNow>
 8009d9c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b09      	cmp	r3, #9
 8009da2:	d86b      	bhi.n	8009e7c <prvProcessReceivedCommands+0x144>
 8009da4:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <prvProcessReceivedCommands+0x74>)
 8009da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009daa:	bf00      	nop
 8009dac:	08009dd5 	.word	0x08009dd5
 8009db0:	08009dd5 	.word	0x08009dd5
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009e7d 	.word	0x08009e7d
 8009dbc:	08009e31 	.word	0x08009e31
 8009dc0:	08009e69 	.word	0x08009e69
 8009dc4:	08009dd5 	.word	0x08009dd5
 8009dc8:	08009dd5 	.word	0x08009dd5
 8009dcc:	08009e7d 	.word	0x08009e7d
 8009dd0:	08009e31 	.word	0x08009e31
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	18d1      	adds	r1, r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009de2:	f7ff ff67 	bl	8009cb4 <prvInsertTimerInActiveList>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d047      	beq.n	8009e7c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009df2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d13f      	bne.n	8009e7c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	441a      	add	r2, r3
 8009e04:	2300      	movs	r3, #0
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e0e:	f7ff fe1f 	bl	8009a50 <xTimerGenericCommand>
 8009e12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e14:	6a3b      	ldr	r3, [r7, #32]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d130      	bne.n	8009e7c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	61bb      	str	r3, [r7, #24]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10a      	bne.n	8009e54 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	617b      	str	r3, [r7, #20]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e56:	699a      	ldr	r2, [r3, #24]
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	18d1      	adds	r1, r2, r3
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e62:	f7ff ff27 	bl	8009cb4 <prvInsertTimerInActiveList>
					break;
 8009e66:	e009      	b.n	8009e7c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d104      	bne.n	8009e7c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8009e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e74:	f000 fb6e 	bl	800a554 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009e78:	e000      	b.n	8009e7c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009e7a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e7c:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <prvProcessReceivedCommands+0x164>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	1d39      	adds	r1, r7, #4
 8009e82:	2200      	movs	r2, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7fe fc57 	bl	8008738 <xQueueReceive>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f47f af57 	bne.w	8009d40 <prvProcessReceivedCommands+0x8>
	}
}
 8009e92:	bf00      	nop
 8009e94:	bf00      	nop
 8009e96:	3730      	adds	r7, #48	; 0x30
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20000c9c 	.word	0x20000c9c

08009ea0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ea6:	e045      	b.n	8009f34 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ea8:	4b2c      	ldr	r3, [pc, #176]	; (8009f5c <prvSwitchTimerLists+0xbc>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009eb2:	4b2a      	ldr	r3, [pc, #168]	; (8009f5c <prvSwitchTimerLists+0xbc>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe f939 	bl	8008138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	69db      	ldr	r3, [r3, #28]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d12e      	bne.n	8009f34 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	4413      	add	r3, r2
 8009ede:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d90e      	bls.n	8009f06 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ef4:	4b19      	ldr	r3, [pc, #100]	; (8009f5c <prvSwitchTimerLists+0xbc>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7fe f8e2 	bl	80080c8 <vListInsert>
 8009f04:	e016      	b.n	8009f34 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f06:	2300      	movs	r3, #0
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	2100      	movs	r1, #0
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f7ff fd9d 	bl	8009a50 <xTimerGenericCommand>
 8009f16:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <prvSwitchTimerLists+0x94>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	603b      	str	r3, [r7, #0]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f34:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <prvSwitchTimerLists+0xbc>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1b4      	bne.n	8009ea8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009f3e:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <prvSwitchTimerLists+0xbc>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009f44:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <prvSwitchTimerLists+0xc0>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a04      	ldr	r2, [pc, #16]	; (8009f5c <prvSwitchTimerLists+0xbc>)
 8009f4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009f4c:	4a04      	ldr	r2, [pc, #16]	; (8009f60 <prvSwitchTimerLists+0xc0>)
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	6013      	str	r3, [r2, #0]
}
 8009f52:	bf00      	nop
 8009f54:	3718      	adds	r7, #24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	20000c94 	.word	0x20000c94
 8009f60:	20000c98 	.word	0x20000c98

08009f64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009f6a:	f000 f92f 	bl	800a1cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009f6e:	4b15      	ldr	r3, [pc, #84]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d120      	bne.n	8009fb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009f76:	4814      	ldr	r0, [pc, #80]	; (8009fc8 <prvCheckForValidListAndQueue+0x64>)
 8009f78:	f7fe f858 	bl	800802c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009f7c:	4813      	ldr	r0, [pc, #76]	; (8009fcc <prvCheckForValidListAndQueue+0x68>)
 8009f7e:	f7fe f855 	bl	800802c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009f82:	4b13      	ldr	r3, [pc, #76]	; (8009fd0 <prvCheckForValidListAndQueue+0x6c>)
 8009f84:	4a10      	ldr	r2, [pc, #64]	; (8009fc8 <prvCheckForValidListAndQueue+0x64>)
 8009f86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009f88:	4b12      	ldr	r3, [pc, #72]	; (8009fd4 <prvCheckForValidListAndQueue+0x70>)
 8009f8a:	4a10      	ldr	r2, [pc, #64]	; (8009fcc <prvCheckForValidListAndQueue+0x68>)
 8009f8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009f8e:	2300      	movs	r3, #0
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <prvCheckForValidListAndQueue+0x74>)
 8009f94:	4a11      	ldr	r2, [pc, #68]	; (8009fdc <prvCheckForValidListAndQueue+0x78>)
 8009f96:	2110      	movs	r1, #16
 8009f98:	200a      	movs	r0, #10
 8009f9a:	f7fe f95f 	bl	800825c <xQueueGenericCreateStatic>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4a08      	ldr	r2, [pc, #32]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fa2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009fa4:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009fac:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <prvCheckForValidListAndQueue+0x60>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	490b      	ldr	r1, [pc, #44]	; (8009fe0 <prvCheckForValidListAndQueue+0x7c>)
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fdb0 	bl	8008b18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009fb8:	f000 f938 	bl	800a22c <vPortExitCritical>
}
 8009fbc:	bf00      	nop
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	20000c9c 	.word	0x20000c9c
 8009fc8:	20000c6c 	.word	0x20000c6c
 8009fcc:	20000c80 	.word	0x20000c80
 8009fd0:	20000c94 	.word	0x20000c94
 8009fd4:	20000c98 	.word	0x20000c98
 8009fd8:	20000d48 	.word	0x20000d48
 8009fdc:	20000ca8 	.word	0x20000ca8
 8009fe0:	0800ad04 	.word	0x0800ad04

08009fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	3b04      	subs	r3, #4
 800a002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f023 0201 	bic.w	r2, r3, #1
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3b04      	subs	r3, #4
 800a012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a014:	4a08      	ldr	r2, [pc, #32]	; (800a038 <pxPortInitialiseStack+0x54>)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3b14      	subs	r3, #20
 800a01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	3b20      	subs	r3, #32
 800a02a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	bc80      	pop	{r7}
 800a036:	4770      	bx	lr
 800a038:	0800a03d 	.word	0x0800a03d

0800a03c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a042:	2300      	movs	r3, #0
 800a044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a046:	4b12      	ldr	r3, [pc, #72]	; (800a090 <prvTaskExitError+0x54>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a04e:	d00a      	beq.n	800a066 <prvTaskExitError+0x2a>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	60fb      	str	r3, [r7, #12]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <prvTaskExitError+0x28>
	__asm volatile
 800a066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	60bb      	str	r3, [r7, #8]
}
 800a078:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a07a:	bf00      	nop
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d0fc      	beq.n	800a07c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	bc80      	pop	{r7}
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	2000000c 	.word	0x2000000c
	...

0800a0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a0a0:	4b07      	ldr	r3, [pc, #28]	; (800a0c0 <pxCurrentTCBConst2>)
 800a0a2:	6819      	ldr	r1, [r3, #0]
 800a0a4:	6808      	ldr	r0, [r1, #0]
 800a0a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a0aa:	f380 8809 	msr	PSP, r0
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f04f 0000 	mov.w	r0, #0
 800a0b6:	f380 8811 	msr	BASEPRI, r0
 800a0ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800a0be:	4770      	bx	lr

0800a0c0 <pxCurrentTCBConst2>:
 800a0c0:	2000076c 	.word	0x2000076c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0c4:	bf00      	nop
 800a0c6:	bf00      	nop

0800a0c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a0c8:	4806      	ldr	r0, [pc, #24]	; (800a0e4 <prvPortStartFirstTask+0x1c>)
 800a0ca:	6800      	ldr	r0, [r0, #0]
 800a0cc:	6800      	ldr	r0, [r0, #0]
 800a0ce:	f380 8808 	msr	MSP, r0
 800a0d2:	b662      	cpsie	i
 800a0d4:	b661      	cpsie	f
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	df00      	svc	0
 800a0e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0e2:	bf00      	nop
 800a0e4:	e000ed08 	.word	0xe000ed08

0800a0e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0ee:	4b32      	ldr	r3, [pc, #200]	; (800a1b8 <xPortStartScheduler+0xd0>)
 800a0f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	22ff      	movs	r2, #255	; 0xff
 800a0fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a108:	78fb      	ldrb	r3, [r7, #3]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a110:	b2da      	uxtb	r2, r3
 800a112:	4b2a      	ldr	r3, [pc, #168]	; (800a1bc <xPortStartScheduler+0xd4>)
 800a114:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a116:	4b2a      	ldr	r3, [pc, #168]	; (800a1c0 <xPortStartScheduler+0xd8>)
 800a118:	2207      	movs	r2, #7
 800a11a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a11c:	e009      	b.n	800a132 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a11e:	4b28      	ldr	r3, [pc, #160]	; (800a1c0 <xPortStartScheduler+0xd8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3b01      	subs	r3, #1
 800a124:	4a26      	ldr	r2, [pc, #152]	; (800a1c0 <xPortStartScheduler+0xd8>)
 800a126:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a13a:	2b80      	cmp	r3, #128	; 0x80
 800a13c:	d0ef      	beq.n	800a11e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a13e:	4b20      	ldr	r3, [pc, #128]	; (800a1c0 <xPortStartScheduler+0xd8>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f1c3 0307 	rsb	r3, r3, #7
 800a146:	2b04      	cmp	r3, #4
 800a148:	d00a      	beq.n	800a160 <xPortStartScheduler+0x78>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	60bb      	str	r3, [r7, #8]
}
 800a15c:	bf00      	nop
 800a15e:	e7fe      	b.n	800a15e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a160:	4b17      	ldr	r3, [pc, #92]	; (800a1c0 <xPortStartScheduler+0xd8>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	021b      	lsls	r3, r3, #8
 800a166:	4a16      	ldr	r2, [pc, #88]	; (800a1c0 <xPortStartScheduler+0xd8>)
 800a168:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a16a:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <xPortStartScheduler+0xd8>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a172:	4a13      	ldr	r2, [pc, #76]	; (800a1c0 <xPortStartScheduler+0xd8>)
 800a174:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a17e:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <xPortStartScheduler+0xdc>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a10      	ldr	r2, [pc, #64]	; (800a1c4 <xPortStartScheduler+0xdc>)
 800a184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a188:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a18a:	4b0e      	ldr	r3, [pc, #56]	; (800a1c4 <xPortStartScheduler+0xdc>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a0d      	ldr	r2, [pc, #52]	; (800a1c4 <xPortStartScheduler+0xdc>)
 800a190:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a194:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a196:	f000 f8b9 	bl	800a30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a19a:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <xPortStartScheduler+0xe0>)
 800a19c:	2200      	movs	r2, #0
 800a19e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1a0:	f7ff ff92 	bl	800a0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1a4:	f7ff f8be 	bl	8009324 <vTaskSwitchContext>
	prvTaskExitError();
 800a1a8:	f7ff ff48 	bl	800a03c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	e000e400 	.word	0xe000e400
 800a1bc:	20000d98 	.word	0x20000d98
 800a1c0:	20000d9c 	.word	0x20000d9c
 800a1c4:	e000ed20 	.word	0xe000ed20
 800a1c8:	2000000c 	.word	0x2000000c

0800a1cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	607b      	str	r3, [r7, #4]
}
 800a1e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1e6:	4b0f      	ldr	r3, [pc, #60]	; (800a224 <vPortEnterCritical+0x58>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	4a0d      	ldr	r2, [pc, #52]	; (800a224 <vPortEnterCritical+0x58>)
 800a1ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1f0:	4b0c      	ldr	r3, [pc, #48]	; (800a224 <vPortEnterCritical+0x58>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d10f      	bne.n	800a218 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1f8:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <vPortEnterCritical+0x5c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00a      	beq.n	800a218 <vPortEnterCritical+0x4c>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	603b      	str	r3, [r7, #0]
}
 800a214:	bf00      	nop
 800a216:	e7fe      	b.n	800a216 <vPortEnterCritical+0x4a>
	}
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bc80      	pop	{r7}
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	2000000c 	.word	0x2000000c
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a232:	4b11      	ldr	r3, [pc, #68]	; (800a278 <vPortExitCritical+0x4c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <vPortExitCritical+0x24>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	607b      	str	r3, [r7, #4]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a250:	4b09      	ldr	r3, [pc, #36]	; (800a278 <vPortExitCritical+0x4c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3b01      	subs	r3, #1
 800a256:	4a08      	ldr	r2, [pc, #32]	; (800a278 <vPortExitCritical+0x4c>)
 800a258:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a25a:	4b07      	ldr	r3, [pc, #28]	; (800a278 <vPortExitCritical+0x4c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d105      	bne.n	800a26e <vPortExitCritical+0x42>
 800a262:	2300      	movs	r3, #0
 800a264:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	f383 8811 	msr	BASEPRI, r3
}
 800a26c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a26e:	bf00      	nop
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr
 800a278:	2000000c 	.word	0x2000000c
 800a27c:	00000000 	.word	0x00000000

0800a280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a280:	f3ef 8009 	mrs	r0, PSP
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	4b0d      	ldr	r3, [pc, #52]	; (800a2c0 <pxCurrentTCBConst>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a290:	6010      	str	r0, [r2, #0]
 800a292:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a296:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a29a:	f380 8811 	msr	BASEPRI, r0
 800a29e:	f7ff f841 	bl	8009324 <vTaskSwitchContext>
 800a2a2:	f04f 0000 	mov.w	r0, #0
 800a2a6:	f380 8811 	msr	BASEPRI, r0
 800a2aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a2ae:	6819      	ldr	r1, [r3, #0]
 800a2b0:	6808      	ldr	r0, [r1, #0]
 800a2b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a2b6:	f380 8809 	msr	PSP, r0
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	4770      	bx	lr

0800a2c0 <pxCurrentTCBConst>:
 800a2c0:	2000076c 	.word	0x2000076c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop

0800a2c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	607b      	str	r3, [r7, #4]
}
 800a2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2e2:	f7fe ff61 	bl	80091a8 <xTaskIncrementTick>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <SysTick_Handler+0x40>)
 800a2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2f2:	601a      	str	r2, [r3, #0]
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	f383 8811 	msr	BASEPRI, r3
}
 800a2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a300:	bf00      	nop
 800a302:	3708      	adds	r7, #8
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	e000ed04 	.word	0xe000ed04

0800a30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a310:	4b0a      	ldr	r3, [pc, #40]	; (800a33c <vPortSetupTimerInterrupt+0x30>)
 800a312:	2200      	movs	r2, #0
 800a314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a316:	4b0a      	ldr	r3, [pc, #40]	; (800a340 <vPortSetupTimerInterrupt+0x34>)
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a31c:	4b09      	ldr	r3, [pc, #36]	; (800a344 <vPortSetupTimerInterrupt+0x38>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a09      	ldr	r2, [pc, #36]	; (800a348 <vPortSetupTimerInterrupt+0x3c>)
 800a322:	fba2 2303 	umull	r2, r3, r2, r3
 800a326:	099b      	lsrs	r3, r3, #6
 800a328:	4a08      	ldr	r2, [pc, #32]	; (800a34c <vPortSetupTimerInterrupt+0x40>)
 800a32a:	3b01      	subs	r3, #1
 800a32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a32e:	4b03      	ldr	r3, [pc, #12]	; (800a33c <vPortSetupTimerInterrupt+0x30>)
 800a330:	2207      	movs	r2, #7
 800a332:	601a      	str	r2, [r3, #0]
}
 800a334:	bf00      	nop
 800a336:	46bd      	mov	sp, r7
 800a338:	bc80      	pop	{r7}
 800a33a:	4770      	bx	lr
 800a33c:	e000e010 	.word	0xe000e010
 800a340:	e000e018 	.word	0xe000e018
 800a344:	20000000 	.word	0x20000000
 800a348:	10624dd3 	.word	0x10624dd3
 800a34c:	e000e014 	.word	0xe000e014

0800a350 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a356:	f3ef 8305 	mrs	r3, IPSR
 800a35a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b0f      	cmp	r3, #15
 800a360:	d914      	bls.n	800a38c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a362:	4a16      	ldr	r2, [pc, #88]	; (800a3bc <vPortValidateInterruptPriority+0x6c>)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4413      	add	r3, r2
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a36c:	4b14      	ldr	r3, [pc, #80]	; (800a3c0 <vPortValidateInterruptPriority+0x70>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	7afa      	ldrb	r2, [r7, #11]
 800a372:	429a      	cmp	r2, r3
 800a374:	d20a      	bcs.n	800a38c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	f383 8811 	msr	BASEPRI, r3
 800a37e:	f3bf 8f6f 	isb	sy
 800a382:	f3bf 8f4f 	dsb	sy
 800a386:	607b      	str	r3, [r7, #4]
}
 800a388:	bf00      	nop
 800a38a:	e7fe      	b.n	800a38a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a38c:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <vPortValidateInterruptPriority+0x74>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a394:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <vPortValidateInterruptPriority+0x78>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d90a      	bls.n	800a3b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	603b      	str	r3, [r7, #0]
}
 800a3ae:	bf00      	nop
 800a3b0:	e7fe      	b.n	800a3b0 <vPortValidateInterruptPriority+0x60>
	}
 800a3b2:	bf00      	nop
 800a3b4:	3714      	adds	r7, #20
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bc80      	pop	{r7}
 800a3ba:	4770      	bx	lr
 800a3bc:	e000e3f0 	.word	0xe000e3f0
 800a3c0:	20000d98 	.word	0x20000d98
 800a3c4:	e000ed0c 	.word	0xe000ed0c
 800a3c8:	20000d9c 	.word	0x20000d9c

0800a3cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08a      	sub	sp, #40	; 0x28
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3d8:	f7fe fe2c 	bl	8009034 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3dc:	4b58      	ldr	r3, [pc, #352]	; (800a540 <pvPortMalloc+0x174>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3e4:	f000 f910 	bl	800a608 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3e8:	4b56      	ldr	r3, [pc, #344]	; (800a544 <pvPortMalloc+0x178>)
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4013      	ands	r3, r2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f040 808e 	bne.w	800a512 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d01d      	beq.n	800a438 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3fc:	2208      	movs	r2, #8
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4413      	add	r3, r2
 800a402:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d014      	beq.n	800a438 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f023 0307 	bic.w	r3, r3, #7
 800a414:	3308      	adds	r3, #8
 800a416:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <pvPortMalloc+0x6c>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	f383 8811 	msr	BASEPRI, r3
 800a42a:	f3bf 8f6f 	isb	sy
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	617b      	str	r3, [r7, #20]
}
 800a434:	bf00      	nop
 800a436:	e7fe      	b.n	800a436 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d069      	beq.n	800a512 <pvPortMalloc+0x146>
 800a43e:	4b42      	ldr	r3, [pc, #264]	; (800a548 <pvPortMalloc+0x17c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	429a      	cmp	r2, r3
 800a446:	d864      	bhi.n	800a512 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a448:	4b40      	ldr	r3, [pc, #256]	; (800a54c <pvPortMalloc+0x180>)
 800a44a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a44c:	4b3f      	ldr	r3, [pc, #252]	; (800a54c <pvPortMalloc+0x180>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a452:	e004      	b.n	800a45e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d903      	bls.n	800a470 <pvPortMalloc+0xa4>
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1f1      	bne.n	800a454 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a470:	4b33      	ldr	r3, [pc, #204]	; (800a540 <pvPortMalloc+0x174>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a476:	429a      	cmp	r2, r3
 800a478:	d04b      	beq.n	800a512 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2208      	movs	r2, #8
 800a480:	4413      	add	r3, r2
 800a482:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	1ad2      	subs	r2, r2, r3
 800a494:	2308      	movs	r3, #8
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	429a      	cmp	r2, r3
 800a49a:	d91f      	bls.n	800a4dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a49c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	f003 0307 	and.w	r3, r3, #7
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <pvPortMalloc+0xf8>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	613b      	str	r3, [r7, #16]
}
 800a4c0:	bf00      	nop
 800a4c2:	e7fe      	b.n	800a4c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	1ad2      	subs	r2, r2, r3
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4d6:	69b8      	ldr	r0, [r7, #24]
 800a4d8:	f000 f8f8 	bl	800a6cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <pvPortMalloc+0x17c>)
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	4a18      	ldr	r2, [pc, #96]	; (800a548 <pvPortMalloc+0x17c>)
 800a4e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4ea:	4b17      	ldr	r3, [pc, #92]	; (800a548 <pvPortMalloc+0x17c>)
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4b18      	ldr	r3, [pc, #96]	; (800a550 <pvPortMalloc+0x184>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d203      	bcs.n	800a4fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4f6:	4b14      	ldr	r3, [pc, #80]	; (800a548 <pvPortMalloc+0x17c>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a15      	ldr	r2, [pc, #84]	; (800a550 <pvPortMalloc+0x184>)
 800a4fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	4b10      	ldr	r3, [pc, #64]	; (800a544 <pvPortMalloc+0x178>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	431a      	orrs	r2, r3
 800a508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a512:	f7fe fd9d 	bl	8009050 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	f003 0307 	and.w	r3, r3, #7
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <pvPortMalloc+0x16a>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	60fb      	str	r3, [r7, #12]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <pvPortMalloc+0x168>
	return pvReturn;
 800a536:	69fb      	ldr	r3, [r7, #28]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3728      	adds	r7, #40	; 0x28
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20002518 	.word	0x20002518
 800a544:	20002524 	.word	0x20002524
 800a548:	2000251c 	.word	0x2000251c
 800a54c:	20002510 	.word	0x20002510
 800a550:	20002520 	.word	0x20002520

0800a554 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d048      	beq.n	800a5f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a566:	2308      	movs	r3, #8
 800a568:	425b      	negs	r3, r3
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	4413      	add	r3, r2
 800a56e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	4b21      	ldr	r3, [pc, #132]	; (800a600 <vPortFree+0xac>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4013      	ands	r3, r2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10a      	bne.n	800a598 <vPortFree+0x44>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60fb      	str	r3, [r7, #12]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00a      	beq.n	800a5b6 <vPortFree+0x62>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	60bb      	str	r3, [r7, #8]
}
 800a5b2:	bf00      	nop
 800a5b4:	e7fe      	b.n	800a5b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	4b11      	ldr	r3, [pc, #68]	; (800a600 <vPortFree+0xac>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4013      	ands	r3, r2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d019      	beq.n	800a5f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d115      	bne.n	800a5f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	4b0b      	ldr	r3, [pc, #44]	; (800a600 <vPortFree+0xac>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	43db      	mvns	r3, r3
 800a5d6:	401a      	ands	r2, r3
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5dc:	f7fe fd2a 	bl	8009034 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	4b07      	ldr	r3, [pc, #28]	; (800a604 <vPortFree+0xb0>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	4a06      	ldr	r2, [pc, #24]	; (800a604 <vPortFree+0xb0>)
 800a5ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ee:	6938      	ldr	r0, [r7, #16]
 800a5f0:	f000 f86c 	bl	800a6cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a5f4:	f7fe fd2c 	bl	8009050 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5f8:	bf00      	nop
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	20002524 	.word	0x20002524
 800a604:	2000251c 	.word	0x2000251c

0800a608 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a60e:	f241 7370 	movw	r3, #6000	; 0x1770
 800a612:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a614:	4b27      	ldr	r3, [pc, #156]	; (800a6b4 <prvHeapInit+0xac>)
 800a616:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00c      	beq.n	800a63c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3307      	adds	r3, #7
 800a626:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f023 0307 	bic.w	r3, r3, #7
 800a62e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	1ad3      	subs	r3, r2, r3
 800a636:	4a1f      	ldr	r2, [pc, #124]	; (800a6b4 <prvHeapInit+0xac>)
 800a638:	4413      	add	r3, r2
 800a63a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a640:	4a1d      	ldr	r2, [pc, #116]	; (800a6b8 <prvHeapInit+0xb0>)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a646:	4b1c      	ldr	r3, [pc, #112]	; (800a6b8 <prvHeapInit+0xb0>)
 800a648:	2200      	movs	r2, #0
 800a64a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	4413      	add	r3, r2
 800a652:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a654:	2208      	movs	r2, #8
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	1a9b      	subs	r3, r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 0307 	bic.w	r3, r3, #7
 800a662:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4a15      	ldr	r2, [pc, #84]	; (800a6bc <prvHeapInit+0xb4>)
 800a668:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a66a:	4b14      	ldr	r3, [pc, #80]	; (800a6bc <prvHeapInit+0xb4>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2200      	movs	r2, #0
 800a670:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a672:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <prvHeapInit+0xb4>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2200      	movs	r2, #0
 800a678:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	1ad2      	subs	r2, r2, r3
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a688:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <prvHeapInit+0xb4>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	4a0a      	ldr	r2, [pc, #40]	; (800a6c0 <prvHeapInit+0xb8>)
 800a696:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	4a09      	ldr	r2, [pc, #36]	; (800a6c4 <prvHeapInit+0xbc>)
 800a69e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6a0:	4b09      	ldr	r3, [pc, #36]	; (800a6c8 <prvHeapInit+0xc0>)
 800a6a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6a6:	601a      	str	r2, [r3, #0]
}
 800a6a8:	bf00      	nop
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bc80      	pop	{r7}
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	20000da0 	.word	0x20000da0
 800a6b8:	20002510 	.word	0x20002510
 800a6bc:	20002518 	.word	0x20002518
 800a6c0:	20002520 	.word	0x20002520
 800a6c4:	2000251c 	.word	0x2000251c
 800a6c8:	20002524 	.word	0x20002524

0800a6cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6d4:	4b27      	ldr	r3, [pc, #156]	; (800a774 <prvInsertBlockIntoFreeList+0xa8>)
 800a6d6:	60fb      	str	r3, [r7, #12]
 800a6d8:	e002      	b.n	800a6e0 <prvInsertBlockIntoFreeList+0x14>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d8f7      	bhi.n	800a6da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	687a      	ldr	r2, [r7, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d108      	bne.n	800a70e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	685a      	ldr	r2, [r3, #4]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	441a      	add	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	441a      	add	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	d118      	bne.n	800a754 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	4b14      	ldr	r3, [pc, #80]	; (800a778 <prvInsertBlockIntoFreeList+0xac>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d00d      	beq.n	800a74a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	441a      	add	r2, r3
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	e008      	b.n	800a75c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a74a:	4b0b      	ldr	r3, [pc, #44]	; (800a778 <prvInsertBlockIntoFreeList+0xac>)
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	e003      	b.n	800a75c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	429a      	cmp	r2, r3
 800a762:	d002      	beq.n	800a76a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	bc80      	pop	{r7}
 800a772:	4770      	bx	lr
 800a774:	20002510 	.word	0x20002510
 800a778:	20002518 	.word	0x20002518

0800a77c <__errno>:
 800a77c:	4b01      	ldr	r3, [pc, #4]	; (800a784 <__errno+0x8>)
 800a77e:	6818      	ldr	r0, [r3, #0]
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	20000010 	.word	0x20000010

0800a788 <__libc_init_array>:
 800a788:	b570      	push	{r4, r5, r6, lr}
 800a78a:	2600      	movs	r6, #0
 800a78c:	4d0c      	ldr	r5, [pc, #48]	; (800a7c0 <__libc_init_array+0x38>)
 800a78e:	4c0d      	ldr	r4, [pc, #52]	; (800a7c4 <__libc_init_array+0x3c>)
 800a790:	1b64      	subs	r4, r4, r5
 800a792:	10a4      	asrs	r4, r4, #2
 800a794:	42a6      	cmp	r6, r4
 800a796:	d109      	bne.n	800a7ac <__libc_init_array+0x24>
 800a798:	f000 fa22 	bl	800abe0 <_init>
 800a79c:	2600      	movs	r6, #0
 800a79e:	4d0a      	ldr	r5, [pc, #40]	; (800a7c8 <__libc_init_array+0x40>)
 800a7a0:	4c0a      	ldr	r4, [pc, #40]	; (800a7cc <__libc_init_array+0x44>)
 800a7a2:	1b64      	subs	r4, r4, r5
 800a7a4:	10a4      	asrs	r4, r4, #2
 800a7a6:	42a6      	cmp	r6, r4
 800a7a8:	d105      	bne.n	800a7b6 <__libc_init_array+0x2e>
 800a7aa:	bd70      	pop	{r4, r5, r6, pc}
 800a7ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b0:	4798      	blx	r3
 800a7b2:	3601      	adds	r6, #1
 800a7b4:	e7ee      	b.n	800a794 <__libc_init_array+0xc>
 800a7b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ba:	4798      	blx	r3
 800a7bc:	3601      	adds	r6, #1
 800a7be:	e7f2      	b.n	800a7a6 <__libc_init_array+0x1e>
 800a7c0:	0800ae90 	.word	0x0800ae90
 800a7c4:	0800ae90 	.word	0x0800ae90
 800a7c8:	0800ae90 	.word	0x0800ae90
 800a7cc:	0800ae94 	.word	0x0800ae94

0800a7d0 <memcpy>:
 800a7d0:	440a      	add	r2, r1
 800a7d2:	4291      	cmp	r1, r2
 800a7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7d8:	d100      	bne.n	800a7dc <memcpy+0xc>
 800a7da:	4770      	bx	lr
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7e2:	4291      	cmp	r1, r2
 800a7e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7e8:	d1f9      	bne.n	800a7de <memcpy+0xe>
 800a7ea:	bd10      	pop	{r4, pc}

0800a7ec <memset>:
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	4402      	add	r2, r0
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d100      	bne.n	800a7f6 <memset+0xa>
 800a7f4:	4770      	bx	lr
 800a7f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7fa:	e7f9      	b.n	800a7f0 <memset+0x4>

0800a7fc <log>:
 800a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fe:	4604      	mov	r4, r0
 800a800:	460d      	mov	r5, r1
 800a802:	f000 f835 	bl	800a870 <__ieee754_log>
 800a806:	4b17      	ldr	r3, [pc, #92]	; (800a864 <log+0x68>)
 800a808:	4606      	mov	r6, r0
 800a80a:	f993 3000 	ldrsb.w	r3, [r3]
 800a80e:	460f      	mov	r7, r1
 800a810:	3301      	adds	r3, #1
 800a812:	d01a      	beq.n	800a84a <log+0x4e>
 800a814:	4622      	mov	r2, r4
 800a816:	462b      	mov	r3, r5
 800a818:	4620      	mov	r0, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	f7f6 f8ee 	bl	80009fc <__aeabi_dcmpun>
 800a820:	b998      	cbnz	r0, 800a84a <log+0x4e>
 800a822:	2200      	movs	r2, #0
 800a824:	2300      	movs	r3, #0
 800a826:	4620      	mov	r0, r4
 800a828:	4629      	mov	r1, r5
 800a82a:	f7f6 f8dd 	bl	80009e8 <__aeabi_dcmpgt>
 800a82e:	b960      	cbnz	r0, 800a84a <log+0x4e>
 800a830:	2200      	movs	r2, #0
 800a832:	2300      	movs	r3, #0
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f6 f8ae 	bl	8000998 <__aeabi_dcmpeq>
 800a83c:	b140      	cbz	r0, 800a850 <log+0x54>
 800a83e:	f7ff ff9d 	bl	800a77c <__errno>
 800a842:	2322      	movs	r3, #34	; 0x22
 800a844:	2600      	movs	r6, #0
 800a846:	4f08      	ldr	r7, [pc, #32]	; (800a868 <log+0x6c>)
 800a848:	6003      	str	r3, [r0, #0]
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a850:	f7ff ff94 	bl	800a77c <__errno>
 800a854:	2321      	movs	r3, #33	; 0x21
 800a856:	6003      	str	r3, [r0, #0]
 800a858:	4804      	ldr	r0, [pc, #16]	; (800a86c <log+0x70>)
 800a85a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a85e:	f000 b9b9 	b.w	800abd4 <nan>
 800a862:	bf00      	nop
 800a864:	20000074 	.word	0x20000074
 800a868:	fff00000 	.word	0xfff00000
 800a86c:	0800ae8c 	.word	0x0800ae8c

0800a870 <__ieee754_log>:
 800a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a874:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	460d      	mov	r5, r1
 800a87e:	b087      	sub	sp, #28
 800a880:	da24      	bge.n	800a8cc <__ieee754_log+0x5c>
 800a882:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800a886:	4304      	orrs	r4, r0
 800a888:	d108      	bne.n	800a89c <__ieee754_log+0x2c>
 800a88a:	2200      	movs	r2, #0
 800a88c:	2300      	movs	r3, #0
 800a88e:	2000      	movs	r0, #0
 800a890:	49cb      	ldr	r1, [pc, #812]	; (800abc0 <__ieee754_log+0x350>)
 800a892:	f7f5 ff43 	bl	800071c <__aeabi_ddiv>
 800a896:	b007      	add	sp, #28
 800a898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89c:	2900      	cmp	r1, #0
 800a89e:	da04      	bge.n	800a8aa <__ieee754_log+0x3a>
 800a8a0:	f7f5 fc5a 	bl	8000158 <__aeabi_dsub>
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	e7f3      	b.n	800a892 <__ieee754_log+0x22>
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	4bc5      	ldr	r3, [pc, #788]	; (800abc4 <__ieee754_log+0x354>)
 800a8ae:	f7f5 fe0b 	bl	80004c8 <__aeabi_dmul>
 800a8b2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	49c2      	ldr	r1, [pc, #776]	; (800abc8 <__ieee754_log+0x358>)
 800a8be:	428d      	cmp	r5, r1
 800a8c0:	dd06      	ble.n	800a8d0 <__ieee754_log+0x60>
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f7f5 fc49 	bl	800015c <__adddf3>
 800a8ca:	e7e4      	b.n	800a896 <__ieee754_log+0x26>
 800a8cc:	2600      	movs	r6, #0
 800a8ce:	e7f5      	b.n	800a8bc <__ieee754_log+0x4c>
 800a8d0:	152c      	asrs	r4, r5, #20
 800a8d2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a8d6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800a8da:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a8de:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800a8e2:	4426      	add	r6, r4
 800a8e4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800a8e8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800a8ec:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800a8f0:	ea41 0305 	orr.w	r3, r1, r5
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	4bb4      	ldr	r3, [pc, #720]	; (800abcc <__ieee754_log+0x35c>)
 800a8fc:	f7f5 fc2c 	bl	8000158 <__aeabi_dsub>
 800a900:	1cab      	adds	r3, r5, #2
 800a902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a906:	2b02      	cmp	r3, #2
 800a908:	4682      	mov	sl, r0
 800a90a:	468b      	mov	fp, r1
 800a90c:	f04f 0200 	mov.w	r2, #0
 800a910:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800a914:	dc53      	bgt.n	800a9be <__ieee754_log+0x14e>
 800a916:	2300      	movs	r3, #0
 800a918:	f7f6 f83e 	bl	8000998 <__aeabi_dcmpeq>
 800a91c:	b1d0      	cbz	r0, 800a954 <__ieee754_log+0xe4>
 800a91e:	2c00      	cmp	r4, #0
 800a920:	f000 8122 	beq.w	800ab68 <__ieee754_log+0x2f8>
 800a924:	4620      	mov	r0, r4
 800a926:	f7f5 fd65 	bl	80003f4 <__aeabi_i2d>
 800a92a:	a391      	add	r3, pc, #580	; (adr r3, 800ab70 <__ieee754_log+0x300>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	4606      	mov	r6, r0
 800a932:	460f      	mov	r7, r1
 800a934:	f7f5 fdc8 	bl	80004c8 <__aeabi_dmul>
 800a938:	a38f      	add	r3, pc, #572	; (adr r3, 800ab78 <__ieee754_log+0x308>)
 800a93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93e:	4604      	mov	r4, r0
 800a940:	460d      	mov	r5, r1
 800a942:	4630      	mov	r0, r6
 800a944:	4639      	mov	r1, r7
 800a946:	f7f5 fdbf 	bl	80004c8 <__aeabi_dmul>
 800a94a:	4602      	mov	r2, r0
 800a94c:	460b      	mov	r3, r1
 800a94e:	4620      	mov	r0, r4
 800a950:	4629      	mov	r1, r5
 800a952:	e7b8      	b.n	800a8c6 <__ieee754_log+0x56>
 800a954:	a38a      	add	r3, pc, #552	; (adr r3, 800ab80 <__ieee754_log+0x310>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	4650      	mov	r0, sl
 800a95c:	4659      	mov	r1, fp
 800a95e:	f7f5 fdb3 	bl	80004c8 <__aeabi_dmul>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	2000      	movs	r0, #0
 800a968:	4999      	ldr	r1, [pc, #612]	; (800abd0 <__ieee754_log+0x360>)
 800a96a:	f7f5 fbf5 	bl	8000158 <__aeabi_dsub>
 800a96e:	4652      	mov	r2, sl
 800a970:	4606      	mov	r6, r0
 800a972:	460f      	mov	r7, r1
 800a974:	465b      	mov	r3, fp
 800a976:	4650      	mov	r0, sl
 800a978:	4659      	mov	r1, fp
 800a97a:	f7f5 fda5 	bl	80004c8 <__aeabi_dmul>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	4630      	mov	r0, r6
 800a984:	4639      	mov	r1, r7
 800a986:	f7f5 fd9f 	bl	80004c8 <__aeabi_dmul>
 800a98a:	4606      	mov	r6, r0
 800a98c:	460f      	mov	r7, r1
 800a98e:	b914      	cbnz	r4, 800a996 <__ieee754_log+0x126>
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	e0a2      	b.n	800aadc <__ieee754_log+0x26c>
 800a996:	4620      	mov	r0, r4
 800a998:	f7f5 fd2c 	bl	80003f4 <__aeabi_i2d>
 800a99c:	a374      	add	r3, pc, #464	; (adr r3, 800ab70 <__ieee754_log+0x300>)
 800a99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	f7f5 fd8f 	bl	80004c8 <__aeabi_dmul>
 800a9aa:	a373      	add	r3, pc, #460	; (adr r3, 800ab78 <__ieee754_log+0x308>)
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	460d      	mov	r5, r1
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	f7f5 fd86 	bl	80004c8 <__aeabi_dmul>
 800a9bc:	e0a7      	b.n	800ab0e <__ieee754_log+0x29e>
 800a9be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a9c2:	f7f5 fbcb 	bl	800015c <__adddf3>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	460b      	mov	r3, r1
 800a9ca:	4650      	mov	r0, sl
 800a9cc:	4659      	mov	r1, fp
 800a9ce:	f7f5 fea5 	bl	800071c <__aeabi_ddiv>
 800a9d2:	e9cd 0100 	strd	r0, r1, [sp]
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f7f5 fd0c 	bl	80003f4 <__aeabi_i2d>
 800a9dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	f7f5 fd6e 	bl	80004c8 <__aeabi_dmul>
 800a9ec:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a9f0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	9305      	str	r3, [sp, #20]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4606      	mov	r6, r0
 800a9fc:	460f      	mov	r7, r1
 800a9fe:	f7f5 fd63 	bl	80004c8 <__aeabi_dmul>
 800aa02:	a361      	add	r3, pc, #388	; (adr r3, 800ab88 <__ieee754_log+0x318>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	4680      	mov	r8, r0
 800aa0a:	4689      	mov	r9, r1
 800aa0c:	f7f5 fd5c 	bl	80004c8 <__aeabi_dmul>
 800aa10:	a35f      	add	r3, pc, #380	; (adr r3, 800ab90 <__ieee754_log+0x320>)
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	f7f5 fba1 	bl	800015c <__adddf3>
 800aa1a:	4642      	mov	r2, r8
 800aa1c:	464b      	mov	r3, r9
 800aa1e:	f7f5 fd53 	bl	80004c8 <__aeabi_dmul>
 800aa22:	a35d      	add	r3, pc, #372	; (adr r3, 800ab98 <__ieee754_log+0x328>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f7f5 fb98 	bl	800015c <__adddf3>
 800aa2c:	4642      	mov	r2, r8
 800aa2e:	464b      	mov	r3, r9
 800aa30:	f7f5 fd4a 	bl	80004c8 <__aeabi_dmul>
 800aa34:	a35a      	add	r3, pc, #360	; (adr r3, 800aba0 <__ieee754_log+0x330>)
 800aa36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3a:	f7f5 fb8f 	bl	800015c <__adddf3>
 800aa3e:	4632      	mov	r2, r6
 800aa40:	463b      	mov	r3, r7
 800aa42:	f7f5 fd41 	bl	80004c8 <__aeabi_dmul>
 800aa46:	a358      	add	r3, pc, #352	; (adr r3, 800aba8 <__ieee754_log+0x338>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	4640      	mov	r0, r8
 800aa52:	4649      	mov	r1, r9
 800aa54:	f7f5 fd38 	bl	80004c8 <__aeabi_dmul>
 800aa58:	a355      	add	r3, pc, #340	; (adr r3, 800abb0 <__ieee754_log+0x340>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	f7f5 fb7d 	bl	800015c <__adddf3>
 800aa62:	4642      	mov	r2, r8
 800aa64:	464b      	mov	r3, r9
 800aa66:	f7f5 fd2f 	bl	80004c8 <__aeabi_dmul>
 800aa6a:	a353      	add	r3, pc, #332	; (adr r3, 800abb8 <__ieee754_log+0x348>)
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f7f5 fb74 	bl	800015c <__adddf3>
 800aa74:	4642      	mov	r2, r8
 800aa76:	464b      	mov	r3, r9
 800aa78:	f7f5 fd26 	bl	80004c8 <__aeabi_dmul>
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	4602      	mov	r2, r0
 800aa80:	4639      	mov	r1, r7
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7f5 fb6a 	bl	800015c <__adddf3>
 800aa88:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800aa8c:	9b05      	ldr	r3, [sp, #20]
 800aa8e:	3551      	adds	r5, #81	; 0x51
 800aa90:	431d      	orrs	r5, r3
 800aa92:	2d00      	cmp	r5, #0
 800aa94:	4680      	mov	r8, r0
 800aa96:	4689      	mov	r9, r1
 800aa98:	dd48      	ble.n	800ab2c <__ieee754_log+0x2bc>
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	4b4c      	ldr	r3, [pc, #304]	; (800abd0 <__ieee754_log+0x360>)
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	4659      	mov	r1, fp
 800aaa2:	f7f5 fd11 	bl	80004c8 <__aeabi_dmul>
 800aaa6:	4652      	mov	r2, sl
 800aaa8:	465b      	mov	r3, fp
 800aaaa:	f7f5 fd0d 	bl	80004c8 <__aeabi_dmul>
 800aaae:	4602      	mov	r2, r0
 800aab0:	460b      	mov	r3, r1
 800aab2:	4606      	mov	r6, r0
 800aab4:	460f      	mov	r7, r1
 800aab6:	4640      	mov	r0, r8
 800aab8:	4649      	mov	r1, r9
 800aaba:	f7f5 fb4f 	bl	800015c <__adddf3>
 800aabe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aac2:	f7f5 fd01 	bl	80004c8 <__aeabi_dmul>
 800aac6:	4680      	mov	r8, r0
 800aac8:	4689      	mov	r9, r1
 800aaca:	b964      	cbnz	r4, 800aae6 <__ieee754_log+0x276>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4630      	mov	r0, r6
 800aad2:	4639      	mov	r1, r7
 800aad4:	f7f5 fb40 	bl	8000158 <__aeabi_dsub>
 800aad8:	4602      	mov	r2, r0
 800aada:	460b      	mov	r3, r1
 800aadc:	4650      	mov	r0, sl
 800aade:	4659      	mov	r1, fp
 800aae0:	f7f5 fb3a 	bl	8000158 <__aeabi_dsub>
 800aae4:	e6d7      	b.n	800a896 <__ieee754_log+0x26>
 800aae6:	a322      	add	r3, pc, #136	; (adr r3, 800ab70 <__ieee754_log+0x300>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaf0:	f7f5 fcea 	bl	80004c8 <__aeabi_dmul>
 800aaf4:	a320      	add	r3, pc, #128	; (adr r3, 800ab78 <__ieee754_log+0x308>)
 800aaf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafa:	4604      	mov	r4, r0
 800aafc:	460d      	mov	r5, r1
 800aafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab02:	f7f5 fce1 	bl	80004c8 <__aeabi_dmul>
 800ab06:	4642      	mov	r2, r8
 800ab08:	464b      	mov	r3, r9
 800ab0a:	f7f5 fb27 	bl	800015c <__adddf3>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4630      	mov	r0, r6
 800ab14:	4639      	mov	r1, r7
 800ab16:	f7f5 fb1f 	bl	8000158 <__aeabi_dsub>
 800ab1a:	4652      	mov	r2, sl
 800ab1c:	465b      	mov	r3, fp
 800ab1e:	f7f5 fb1b 	bl	8000158 <__aeabi_dsub>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	4620      	mov	r0, r4
 800ab28:	4629      	mov	r1, r5
 800ab2a:	e7d9      	b.n	800aae0 <__ieee754_log+0x270>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4650      	mov	r0, sl
 800ab32:	4659      	mov	r1, fp
 800ab34:	f7f5 fb10 	bl	8000158 <__aeabi_dsub>
 800ab38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab3c:	f7f5 fcc4 	bl	80004c8 <__aeabi_dmul>
 800ab40:	4606      	mov	r6, r0
 800ab42:	460f      	mov	r7, r1
 800ab44:	2c00      	cmp	r4, #0
 800ab46:	f43f af23 	beq.w	800a990 <__ieee754_log+0x120>
 800ab4a:	a309      	add	r3, pc, #36	; (adr r3, 800ab70 <__ieee754_log+0x300>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab54:	f7f5 fcb8 	bl	80004c8 <__aeabi_dmul>
 800ab58:	a307      	add	r3, pc, #28	; (adr r3, 800ab78 <__ieee754_log+0x308>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	4604      	mov	r4, r0
 800ab60:	460d      	mov	r5, r1
 800ab62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab66:	e727      	b.n	800a9b8 <__ieee754_log+0x148>
 800ab68:	2000      	movs	r0, #0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	e693      	b.n	800a896 <__ieee754_log+0x26>
 800ab6e:	bf00      	nop
 800ab70:	fee00000 	.word	0xfee00000
 800ab74:	3fe62e42 	.word	0x3fe62e42
 800ab78:	35793c76 	.word	0x35793c76
 800ab7c:	3dea39ef 	.word	0x3dea39ef
 800ab80:	55555555 	.word	0x55555555
 800ab84:	3fd55555 	.word	0x3fd55555
 800ab88:	df3e5244 	.word	0xdf3e5244
 800ab8c:	3fc2f112 	.word	0x3fc2f112
 800ab90:	96cb03de 	.word	0x96cb03de
 800ab94:	3fc74664 	.word	0x3fc74664
 800ab98:	94229359 	.word	0x94229359
 800ab9c:	3fd24924 	.word	0x3fd24924
 800aba0:	55555593 	.word	0x55555593
 800aba4:	3fe55555 	.word	0x3fe55555
 800aba8:	d078c69f 	.word	0xd078c69f
 800abac:	3fc39a09 	.word	0x3fc39a09
 800abb0:	1d8e78af 	.word	0x1d8e78af
 800abb4:	3fcc71c5 	.word	0x3fcc71c5
 800abb8:	9997fa04 	.word	0x9997fa04
 800abbc:	3fd99999 	.word	0x3fd99999
 800abc0:	c3500000 	.word	0xc3500000
 800abc4:	43500000 	.word	0x43500000
 800abc8:	7fefffff 	.word	0x7fefffff
 800abcc:	3ff00000 	.word	0x3ff00000
 800abd0:	3fe00000 	.word	0x3fe00000

0800abd4 <nan>:
 800abd4:	2000      	movs	r0, #0
 800abd6:	4901      	ldr	r1, [pc, #4]	; (800abdc <nan+0x8>)
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	7ff80000 	.word	0x7ff80000

0800abe0 <_init>:
 800abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe2:	bf00      	nop
 800abe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe6:	bc08      	pop	{r3}
 800abe8:	469e      	mov	lr, r3
 800abea:	4770      	bx	lr

0800abec <_fini>:
 800abec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abee:	bf00      	nop
 800abf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf2:	bc08      	pop	{r3}
 800abf4:	469e      	mov	lr, r3
 800abf6:	4770      	bx	lr
