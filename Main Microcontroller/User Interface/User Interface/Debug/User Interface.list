
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f08  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c4  080092c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080092c4  080092c4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092c4  080092c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c4  080092c4  000192c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080092cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000293c  20000010  080092dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  080092dc  0002294c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e81  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ba  00000000  00000000  00039eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003ea88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018db2  00000000  00000000  0003fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cb7  00000000  00000000  00058bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982b3  00000000  00000000  0006f889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107b3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005770  00000000  00000000  00107b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08009000 	.word	0x08009000

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08009000 	.word	0x08009000

08000150 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2b3a      	cmp	r3, #58	; 0x3a
 800015e:	d13b      	bne.n	80001d8 <letter+0x88>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48d5      	ldr	r0, [pc, #852]	; (80004bc <letter+0x36c>)
 8000168:	f004 fb4f 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000172:	48d3      	ldr	r0, [pc, #844]	; (80004c0 <letter+0x370>)
 8000174:	f004 fb49 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017e:	48d0      	ldr	r0, [pc, #832]	; (80004c0 <letter+0x370>)
 8000180:	f004 fb43 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000184:	2200      	movs	r2, #0
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	48cd      	ldr	r0, [pc, #820]	; (80004c0 <letter+0x370>)
 800018a:	f004 fb3e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800018e:	2201      	movs	r2, #1
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	48cb      	ldr	r0, [pc, #812]	; (80004c0 <letter+0x370>)
 8000194:	f004 fb39 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000198:	2201      	movs	r2, #1
 800019a:	2180      	movs	r1, #128	; 0x80
 800019c:	48c9      	ldr	r0, [pc, #804]	; (80004c4 <letter+0x374>)
 800019e:	f004 fb34 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a8:	48c6      	ldr	r0, [pc, #792]	; (80004c4 <letter+0x374>)
 80001aa:	f004 fb2e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b4:	48c3      	ldr	r0, [pc, #780]	; (80004c4 <letter+0x374>)
 80001b6:	f004 fb28 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c0:	48c0      	ldr	r0, [pc, #768]	; (80004c4 <letter+0x374>)
 80001c2:	f004 fb22 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	48bb      	ldr	r0, [pc, #748]	; (80004bc <letter+0x36c>)
 80001ce:	f004 fb1c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80001d2:	2002      	movs	r0, #2
 80001d4:	f003 fc6a 	bl	8003aac <HAL_Delay>
	}
	if(L == '-')
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b2d      	cmp	r3, #45	; 0x2d
 80001dc:	d13b      	bne.n	8000256 <letter+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e4:	48b5      	ldr	r0, [pc, #724]	; (80004bc <letter+0x36c>)
 80001e6:	f004 fb10 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f0:	48b3      	ldr	r0, [pc, #716]	; (80004c0 <letter+0x370>)
 80001f2:	f004 fb0a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	48b0      	ldr	r0, [pc, #704]	; (80004c0 <letter+0x370>)
 80001fe:	f004 fb04 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000202:	2201      	movs	r2, #1
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	48ae      	ldr	r0, [pc, #696]	; (80004c0 <letter+0x370>)
 8000208:	f004 faff 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800020c:	2201      	movs	r2, #1
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	48ab      	ldr	r0, [pc, #684]	; (80004c0 <letter+0x370>)
 8000212:	f004 fafa 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000216:	2200      	movs	r2, #0
 8000218:	2180      	movs	r1, #128	; 0x80
 800021a:	48aa      	ldr	r0, [pc, #680]	; (80004c4 <letter+0x374>)
 800021c:	f004 faf5 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000226:	48a7      	ldr	r0, [pc, #668]	; (80004c4 <letter+0x374>)
 8000228:	f004 faef 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000232:	48a4      	ldr	r0, [pc, #656]	; (80004c4 <letter+0x374>)
 8000234:	f004 fae9 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023e:	48a1      	ldr	r0, [pc, #644]	; (80004c4 <letter+0x374>)
 8000240:	f004 fae3 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	489c      	ldr	r0, [pc, #624]	; (80004bc <letter+0x36c>)
 800024c:	f004 fadd 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000250:	2002      	movs	r0, #2
 8000252:	f003 fc2b 	bl	8003aac <HAL_Delay>
	}
	if(L == ' ')
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b20      	cmp	r3, #32
 800025a:	d13b      	bne.n	80002d4 <letter+0x184>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4896      	ldr	r0, [pc, #600]	; (80004bc <letter+0x36c>)
 8000264:	f004 fad1 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026e:	4894      	ldr	r0, [pc, #592]	; (80004c0 <letter+0x370>)
 8000270:	f004 facb 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027a:	4891      	ldr	r0, [pc, #580]	; (80004c0 <letter+0x370>)
 800027c:	f004 fac5 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	488e      	ldr	r0, [pc, #568]	; (80004c0 <letter+0x370>)
 8000286:	f004 fac0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800028a:	2200      	movs	r2, #0
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	488c      	ldr	r0, [pc, #560]	; (80004c0 <letter+0x370>)
 8000290:	f004 fabb 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000294:	2200      	movs	r2, #0
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	488a      	ldr	r0, [pc, #552]	; (80004c4 <letter+0x374>)
 800029a:	f004 fab6 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4887      	ldr	r0, [pc, #540]	; (80004c4 <letter+0x374>)
 80002a6:	f004 fab0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4884      	ldr	r0, [pc, #528]	; (80004c4 <letter+0x374>)
 80002b2:	f004 faaa 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	4881      	ldr	r0, [pc, #516]	; (80004c4 <letter+0x374>)
 80002be:	f004 faa4 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	487c      	ldr	r0, [pc, #496]	; (80004bc <letter+0x36c>)
 80002ca:	f004 fa9e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80002ce:	2002      	movs	r0, #2
 80002d0:	f003 fbec 	bl	8003aac <HAL_Delay>
	}
	if(L == '/')
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b2f      	cmp	r3, #47	; 0x2f
 80002d8:	d13b      	bne.n	8000352 <letter+0x202>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e0:	4876      	ldr	r0, [pc, #472]	; (80004bc <letter+0x36c>)
 80002e2:	f004 fa92 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	4874      	ldr	r0, [pc, #464]	; (80004c0 <letter+0x370>)
 80002ee:	f004 fa8c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	4871      	ldr	r0, [pc, #452]	; (80004c0 <letter+0x370>)
 80002fa:	f004 fa86 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	486f      	ldr	r0, [pc, #444]	; (80004c0 <letter+0x370>)
 8000304:	f004 fa81 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000308:	2201      	movs	r2, #1
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	486c      	ldr	r0, [pc, #432]	; (80004c0 <letter+0x370>)
 800030e:	f004 fa7c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000312:	2200      	movs	r2, #0
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	486b      	ldr	r0, [pc, #428]	; (80004c4 <letter+0x374>)
 8000318:	f004 fa77 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4868      	ldr	r0, [pc, #416]	; (80004c4 <letter+0x374>)
 8000324:	f004 fa71 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	4865      	ldr	r0, [pc, #404]	; (80004c4 <letter+0x374>)
 8000330:	f004 fa6b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033a:	4862      	ldr	r0, [pc, #392]	; (80004c4 <letter+0x374>)
 800033c:	f004 fa65 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	485d      	ldr	r0, [pc, #372]	; (80004bc <letter+0x36c>)
 8000348:	f004 fa5f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800034c:	2002      	movs	r0, #2
 800034e:	f003 fbad 	bl	8003aac <HAL_Delay>
	}
	if(L == '!')
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b21      	cmp	r3, #33	; 0x21
 8000356:	d138      	bne.n	80003ca <letter+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4857      	ldr	r0, [pc, #348]	; (80004bc <letter+0x36c>)
 8000360:	f004 fa53 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036a:	4855      	ldr	r0, [pc, #340]	; (80004c0 <letter+0x370>)
 800036c:	f004 fa4d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000376:	4852      	ldr	r0, [pc, #328]	; (80004c0 <letter+0x370>)
 8000378:	f004 fa47 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800037c:	2200      	movs	r2, #0
 800037e:	2140      	movs	r1, #64	; 0x40
 8000380:	484f      	ldr	r0, [pc, #316]	; (80004c0 <letter+0x370>)
 8000382:	f004 fa42 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000386:	2200      	movs	r2, #0
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	484d      	ldr	r0, [pc, #308]	; (80004c0 <letter+0x370>)
 800038c:	f004 fa3d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	484b      	ldr	r0, [pc, #300]	; (80004c4 <letter+0x374>)
 8000396:	f004 fa38 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4848      	ldr	r0, [pc, #288]	; (80004c4 <letter+0x374>)
 80003a2:	f004 fa32 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4845      	ldr	r0, [pc, #276]	; (80004c4 <letter+0x374>)
 80003ae:	f004 fa2c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b8:	4842      	ldr	r0, [pc, #264]	; (80004c4 <letter+0x374>)
 80003ba:	f004 fa26 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c4:	483d      	ldr	r0, [pc, #244]	; (80004bc <letter+0x36c>)
 80003c6:	f004 fa20 	bl	800480a <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b3f      	cmp	r3, #63	; 0x3f
 80003ce:	d13b      	bne.n	8000448 <letter+0x2f8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	4839      	ldr	r0, [pc, #228]	; (80004bc <letter+0x36c>)
 80003d8:	f004 fa17 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e2:	4837      	ldr	r0, [pc, #220]	; (80004c0 <letter+0x370>)
 80003e4:	f004 fa11 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4834      	ldr	r0, [pc, #208]	; (80004c0 <letter+0x370>)
 80003f0:	f004 fa0b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80003f4:	2201      	movs	r2, #1
 80003f6:	2140      	movs	r1, #64	; 0x40
 80003f8:	4831      	ldr	r0, [pc, #196]	; (80004c0 <letter+0x370>)
 80003fa:	f004 fa06 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80003fe:	2201      	movs	r2, #1
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <letter+0x370>)
 8000404:	f004 fa01 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000408:	2201      	movs	r2, #1
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	482d      	ldr	r0, [pc, #180]	; (80004c4 <letter+0x374>)
 800040e:	f004 f9fc 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	482a      	ldr	r0, [pc, #168]	; (80004c4 <letter+0x374>)
 800041a:	f004 f9f6 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	4827      	ldr	r0, [pc, #156]	; (80004c4 <letter+0x374>)
 8000426:	f004 f9f0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000430:	4824      	ldr	r0, [pc, #144]	; (80004c4 <letter+0x374>)
 8000432:	f004 f9ea 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	481f      	ldr	r0, [pc, #124]	; (80004bc <letter+0x36c>)
 800043e:	f004 f9e4 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000442:	2002      	movs	r0, #2
 8000444:	f003 fb32 	bl	8003aac <HAL_Delay>
	}
	if(L == '*')
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b2a      	cmp	r3, #42	; 0x2a
 800044c:	d142      	bne.n	80004d4 <letter+0x384>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	4819      	ldr	r0, [pc, #100]	; (80004bc <letter+0x36c>)
 8000456:	f004 f9d8 	bl	800480a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4817      	ldr	r0, [pc, #92]	; (80004c0 <letter+0x370>)
 8000462:	f004 f9d2 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <letter+0x370>)
 800046e:	f004 f9cc 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000472:	2200      	movs	r2, #0
 8000474:	2140      	movs	r1, #64	; 0x40
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <letter+0x370>)
 8000478:	f004 f9c7 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800047c:	2201      	movs	r2, #1
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <letter+0x370>)
 8000482:	f004 f9c2 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000486:	2200      	movs	r2, #0
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <letter+0x374>)
 800048c:	f004 f9bd 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <letter+0x374>)
 8000498:	f004 f9b7 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <letter+0x374>)
 80004a4:	f004 f9b1 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <letter+0x374>)
 80004b0:	f004 f9ab 	bl	800480a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	e005      	b.n	80004c8 <letter+0x378>
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40010800 	.word	0x40010800
 80004c8:	48d5      	ldr	r0, [pc, #852]	; (8000820 <letter+0x6d0>)
 80004ca:	f004 f99e 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f003 faec 	bl	8003aac <HAL_Delay>
	}
	if(L == '#')
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b23      	cmp	r3, #35	; 0x23
 80004d8:	d13b      	bne.n	8000552 <letter+0x402>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	48cf      	ldr	r0, [pc, #828]	; (8000820 <letter+0x6d0>)
 80004e2:	f004 f992 	bl	800480a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	48cd      	ldr	r0, [pc, #820]	; (8000824 <letter+0x6d4>)
 80004ee:	f004 f98c 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f8:	48ca      	ldr	r0, [pc, #808]	; (8000824 <letter+0x6d4>)
 80004fa:	f004 f986 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	48c8      	ldr	r0, [pc, #800]	; (8000824 <letter+0x6d4>)
 8000504:	f004 f981 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	48c5      	ldr	r0, [pc, #788]	; (8000824 <letter+0x6d4>)
 800050e:	f004 f97c 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000512:	2200      	movs	r2, #0
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	48c4      	ldr	r0, [pc, #784]	; (8000828 <letter+0x6d8>)
 8000518:	f004 f977 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000522:	48c1      	ldr	r0, [pc, #772]	; (8000828 <letter+0x6d8>)
 8000524:	f004 f971 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	48be      	ldr	r0, [pc, #760]	; (8000828 <letter+0x6d8>)
 8000530:	f004 f96b 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053a:	48bb      	ldr	r0, [pc, #748]	; (8000828 <letter+0x6d8>)
 800053c:	f004 f965 	bl	800480a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	48b6      	ldr	r0, [pc, #728]	; (8000820 <letter+0x6d0>)
 8000548:	f004 f95f 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 800054c:	2002      	movs	r0, #2
 800054e:	f003 faad 	bl	8003aac <HAL_Delay>
	}
	if(L == 'a')
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b61      	cmp	r3, #97	; 0x61
 8000556:	d13b      	bne.n	80005d0 <letter+0x480>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	48b0      	ldr	r0, [pc, #704]	; (8000820 <letter+0x6d0>)
 8000560:	f004 f953 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	48ae      	ldr	r0, [pc, #696]	; (8000824 <letter+0x6d4>)
 800056c:	f004 f94d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	48ab      	ldr	r0, [pc, #684]	; (8000824 <letter+0x6d4>)
 8000578:	f004 f947 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	48a8      	ldr	r0, [pc, #672]	; (8000824 <letter+0x6d4>)
 8000582:	f004 f942 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	48a6      	ldr	r0, [pc, #664]	; (8000824 <letter+0x6d4>)
 800058c:	f004 f93d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000590:	2200      	movs	r2, #0
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	48a4      	ldr	r0, [pc, #656]	; (8000828 <letter+0x6d8>)
 8000596:	f004 f938 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	48a1      	ldr	r0, [pc, #644]	; (8000828 <letter+0x6d8>)
 80005a2:	f004 f932 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	489e      	ldr	r0, [pc, #632]	; (8000828 <letter+0x6d8>)
 80005ae:	f004 f92c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	489b      	ldr	r0, [pc, #620]	; (8000828 <letter+0x6d8>)
 80005ba:	f004 f926 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4896      	ldr	r0, [pc, #600]	; (8000820 <letter+0x6d0>)
 80005c6:	f004 f920 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80005ca:	2002      	movs	r0, #2
 80005cc:	f003 fa6e 	bl	8003aac <HAL_Delay>
	}
	if(L == 'b')
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b62      	cmp	r3, #98	; 0x62
 80005d4:	d13b      	bne.n	800064e <letter+0x4fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4890      	ldr	r0, [pc, #576]	; (8000820 <letter+0x6d0>)
 80005de:	f004 f914 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e8:	488e      	ldr	r0, [pc, #568]	; (8000824 <letter+0x6d4>)
 80005ea:	f004 f90e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	488b      	ldr	r0, [pc, #556]	; (8000824 <letter+0x6d4>)
 80005f6:	f004 f908 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4889      	ldr	r0, [pc, #548]	; (8000824 <letter+0x6d4>)
 8000600:	f004 f903 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4886      	ldr	r0, [pc, #536]	; (8000824 <letter+0x6d4>)
 800060a:	f004 f8fe 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4885      	ldr	r0, [pc, #532]	; (8000828 <letter+0x6d8>)
 8000614:	f004 f8f9 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4882      	ldr	r0, [pc, #520]	; (8000828 <letter+0x6d8>)
 8000620:	f004 f8f3 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	487f      	ldr	r0, [pc, #508]	; (8000828 <letter+0x6d8>)
 800062c:	f004 f8ed 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000636:	487c      	ldr	r0, [pc, #496]	; (8000828 <letter+0x6d8>)
 8000638:	f004 f8e7 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4877      	ldr	r0, [pc, #476]	; (8000820 <letter+0x6d0>)
 8000644:	f004 f8e1 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000648:	2002      	movs	r0, #2
 800064a:	f003 fa2f 	bl	8003aac <HAL_Delay>
	}
	if(L == 'C')
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b43      	cmp	r3, #67	; 0x43
 8000652:	d13b      	bne.n	80006cc <letter+0x57c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4871      	ldr	r0, [pc, #452]	; (8000820 <letter+0x6d0>)
 800065c:	f004 f8d5 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	486f      	ldr	r0, [pc, #444]	; (8000824 <letter+0x6d4>)
 8000668:	f004 f8cf 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <letter+0x6d4>)
 8000674:	f004 f8c9 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000678:	2200      	movs	r2, #0
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4869      	ldr	r0, [pc, #420]	; (8000824 <letter+0x6d4>)
 800067e:	f004 f8c4 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000682:	2200      	movs	r2, #0
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4867      	ldr	r0, [pc, #412]	; (8000824 <letter+0x6d4>)
 8000688:	f004 f8bf 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800068c:	2200      	movs	r2, #0
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4865      	ldr	r0, [pc, #404]	; (8000828 <letter+0x6d8>)
 8000692:	f004 f8ba 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4862      	ldr	r0, [pc, #392]	; (8000828 <letter+0x6d8>)
 800069e:	f004 f8b4 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	485f      	ldr	r0, [pc, #380]	; (8000828 <letter+0x6d8>)
 80006aa:	f004 f8ae 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b4:	485c      	ldr	r0, [pc, #368]	; (8000828 <letter+0x6d8>)
 80006b6:	f004 f8a8 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	4857      	ldr	r0, [pc, #348]	; (8000820 <letter+0x6d0>)
 80006c2:	f004 f8a2 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f003 f9f0 	bl	8003aac <HAL_Delay>
	}
	if(L == 'c')
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b63      	cmp	r3, #99	; 0x63
 80006d0:	d13b      	bne.n	800074a <letter+0x5fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4851      	ldr	r0, [pc, #324]	; (8000820 <letter+0x6d0>)
 80006da:	f004 f896 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e4:	484f      	ldr	r0, [pc, #316]	; (8000824 <letter+0x6d4>)
 80006e6:	f004 f890 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	484c      	ldr	r0, [pc, #304]	; (8000824 <letter+0x6d4>)
 80006f2:	f004 f88a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	484a      	ldr	r0, [pc, #296]	; (8000824 <letter+0x6d4>)
 80006fc:	f004 f885 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000700:	2200      	movs	r2, #0
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	4847      	ldr	r0, [pc, #284]	; (8000824 <letter+0x6d4>)
 8000706:	f004 f880 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4846      	ldr	r0, [pc, #280]	; (8000828 <letter+0x6d8>)
 8000710:	f004 f87b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	4843      	ldr	r0, [pc, #268]	; (8000828 <letter+0x6d8>)
 800071c:	f004 f875 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000726:	4840      	ldr	r0, [pc, #256]	; (8000828 <letter+0x6d8>)
 8000728:	f004 f86f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	483d      	ldr	r0, [pc, #244]	; (8000828 <letter+0x6d8>)
 8000734:	f004 f869 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4838      	ldr	r0, [pc, #224]	; (8000820 <letter+0x6d0>)
 8000740:	f004 f863 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000744:	2002      	movs	r0, #2
 8000746:	f003 f9b1 	bl	8003aac <HAL_Delay>
	}
	if(L == 'd')
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b64      	cmp	r3, #100	; 0x64
 800074e:	d13b      	bne.n	80007c8 <letter+0x678>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <letter+0x6d0>)
 8000758:	f004 f857 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000762:	4830      	ldr	r0, [pc, #192]	; (8000824 <letter+0x6d4>)
 8000764:	f004 f851 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	482d      	ldr	r0, [pc, #180]	; (8000824 <letter+0x6d4>)
 8000770:	f004 f84b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	482a      	ldr	r0, [pc, #168]	; (8000824 <letter+0x6d4>)
 800077a:	f004 f846 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <letter+0x6d4>)
 8000784:	f004 f841 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <letter+0x6d8>)
 800078e:	f004 f83c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <letter+0x6d8>)
 800079a:	f004 f836 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <letter+0x6d8>)
 80007a6:	f004 f830 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b0:	481d      	ldr	r0, [pc, #116]	; (8000828 <letter+0x6d8>)
 80007b2:	f004 f82a 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <letter+0x6d0>)
 80007be:	f004 f824 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f003 f972 	bl	8003aac <HAL_Delay>
	}
	if(L == 'E')
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b45      	cmp	r3, #69	; 0x45
 80007cc:	d143      	bne.n	8000856 <letter+0x706>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <letter+0x6d0>)
 80007d6:	f004 f818 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <letter+0x6d4>)
 80007e2:	f004 f812 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <letter+0x6d4>)
 80007ee:	f004 f80c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80007f2:	2201      	movs	r2, #1
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <letter+0x6d4>)
 80007f8:	f004 f807 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <letter+0x6d4>)
 8000802:	f004 f802 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <letter+0x6d8>)
 800080c:	f003 fffd 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <letter+0x6d8>)
 8000818:	f003 fff7 	bl	800480a <HAL_GPIO_WritePin>
 800081c:	e006      	b.n	800082c <letter+0x6dc>
 800081e:	bf00      	nop
 8000820:	40010c00 	.word	0x40010c00
 8000824:	40011000 	.word	0x40011000
 8000828:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	48d4      	ldr	r0, [pc, #848]	; (8000b84 <letter+0xa34>)
 8000834:	f003 ffe9 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083e:	48d1      	ldr	r0, [pc, #836]	; (8000b84 <letter+0xa34>)
 8000840:	f003 ffe3 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	48cf      	ldr	r0, [pc, #828]	; (8000b88 <letter+0xa38>)
 800084c:	f003 ffdd 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000850:	2002      	movs	r0, #2
 8000852:	f003 f92b 	bl	8003aac <HAL_Delay>
	}
	if(L == 'e')
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b65      	cmp	r3, #101	; 0x65
 800085a:	d13b      	bne.n	80008d4 <letter+0x784>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	48c9      	ldr	r0, [pc, #804]	; (8000b88 <letter+0xa38>)
 8000864:	f003 ffd1 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	48c7      	ldr	r0, [pc, #796]	; (8000b8c <letter+0xa3c>)
 8000870:	f003 ffcb 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	48c4      	ldr	r0, [pc, #784]	; (8000b8c <letter+0xa3c>)
 800087c:	f003 ffc5 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	48c1      	ldr	r0, [pc, #772]	; (8000b8c <letter+0xa3c>)
 8000886:	f003 ffc0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800088a:	2200      	movs	r2, #0
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	48bf      	ldr	r0, [pc, #764]	; (8000b8c <letter+0xa3c>)
 8000890:	f003 ffbb 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	48ba      	ldr	r0, [pc, #744]	; (8000b84 <letter+0xa34>)
 800089a:	f003 ffb6 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	48b7      	ldr	r0, [pc, #732]	; (8000b84 <letter+0xa34>)
 80008a6:	f003 ffb0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	48b4      	ldr	r0, [pc, #720]	; (8000b84 <letter+0xa34>)
 80008b2:	f003 ffaa 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008bc:	48b1      	ldr	r0, [pc, #708]	; (8000b84 <letter+0xa34>)
 80008be:	f003 ffa4 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	48af      	ldr	r0, [pc, #700]	; (8000b88 <letter+0xa38>)
 80008ca:	f003 ff9e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80008ce:	2002      	movs	r0, #2
 80008d0:	f003 f8ec 	bl	8003aac <HAL_Delay>
	}
	if(L == 'f')
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b66      	cmp	r3, #102	; 0x66
 80008d8:	d13b      	bne.n	8000952 <letter+0x802>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	48a9      	ldr	r0, [pc, #676]	; (8000b88 <letter+0xa38>)
 80008e2:	f003 ff92 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	48a7      	ldr	r0, [pc, #668]	; (8000b8c <letter+0xa3c>)
 80008ee:	f003 ff8c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	48a4      	ldr	r0, [pc, #656]	; (8000b8c <letter+0xa3c>)
 80008fa:	f003 ff86 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80008fe:	2201      	movs	r2, #1
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	48a2      	ldr	r0, [pc, #648]	; (8000b8c <letter+0xa3c>)
 8000904:	f003 ff81 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	489f      	ldr	r0, [pc, #636]	; (8000b8c <letter+0xa3c>)
 800090e:	f003 ff7c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000912:	2200      	movs	r2, #0
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	489b      	ldr	r0, [pc, #620]	; (8000b84 <letter+0xa34>)
 8000918:	f003 ff77 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	4898      	ldr	r0, [pc, #608]	; (8000b84 <letter+0xa34>)
 8000924:	f003 ff71 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092e:	4895      	ldr	r0, [pc, #596]	; (8000b84 <letter+0xa34>)
 8000930:	f003 ff6b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	4892      	ldr	r0, [pc, #584]	; (8000b84 <letter+0xa34>)
 800093c:	f003 ff65 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4890      	ldr	r0, [pc, #576]	; (8000b88 <letter+0xa38>)
 8000948:	f003 ff5f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800094c:	2002      	movs	r0, #2
 800094e:	f003 f8ad 	bl	8003aac <HAL_Delay>
	}
	if(L == 'G')
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b47      	cmp	r3, #71	; 0x47
 8000956:	d13b      	bne.n	80009d0 <letter+0x880>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	488a      	ldr	r0, [pc, #552]	; (8000b88 <letter+0xa38>)
 8000960:	f003 ff53 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096a:	4888      	ldr	r0, [pc, #544]	; (8000b8c <letter+0xa3c>)
 800096c:	f003 ff4d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4885      	ldr	r0, [pc, #532]	; (8000b8c <letter+0xa3c>)
 8000978:	f003 ff47 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800097c:	2201      	movs	r2, #1
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	4882      	ldr	r0, [pc, #520]	; (8000b8c <letter+0xa3c>)
 8000982:	f003 ff42 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4880      	ldr	r0, [pc, #512]	; (8000b8c <letter+0xa3c>)
 800098c:	f003 ff3d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	; (8000b84 <letter+0xa34>)
 8000996:	f003 ff38 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	4878      	ldr	r0, [pc, #480]	; (8000b84 <letter+0xa34>)
 80009a2:	f003 ff32 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ac:	4875      	ldr	r0, [pc, #468]	; (8000b84 <letter+0xa34>)
 80009ae:	f003 ff2c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b8:	4872      	ldr	r0, [pc, #456]	; (8000b84 <letter+0xa34>)
 80009ba:	f003 ff26 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4870      	ldr	r0, [pc, #448]	; (8000b88 <letter+0xa38>)
 80009c6:	f003 ff20 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f003 f86e 	bl	8003aac <HAL_Delay>
	}
	if(L == 'g')
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b67      	cmp	r3, #103	; 0x67
 80009d4:	d13b      	bne.n	8000a4e <letter+0x8fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	486a      	ldr	r0, [pc, #424]	; (8000b88 <letter+0xa38>)
 80009de:	f003 ff14 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	4868      	ldr	r0, [pc, #416]	; (8000b8c <letter+0xa3c>)
 80009ea:	f003 ff0e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4865      	ldr	r0, [pc, #404]	; (8000b8c <letter+0xa3c>)
 80009f6:	f003 ff08 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4863      	ldr	r0, [pc, #396]	; (8000b8c <letter+0xa3c>)
 8000a00:	f003 ff03 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	4860      	ldr	r0, [pc, #384]	; (8000b8c <letter+0xa3c>)
 8000a0a:	f003 fefe 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	485c      	ldr	r0, [pc, #368]	; (8000b84 <letter+0xa34>)
 8000a14:	f003 fef9 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4859      	ldr	r0, [pc, #356]	; (8000b84 <letter+0xa34>)
 8000a20:	f003 fef3 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4856      	ldr	r0, [pc, #344]	; (8000b84 <letter+0xa34>)
 8000a2c:	f003 feed 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a36:	4853      	ldr	r0, [pc, #332]	; (8000b84 <letter+0xa34>)
 8000a38:	f003 fee7 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4851      	ldr	r0, [pc, #324]	; (8000b88 <letter+0xa38>)
 8000a44:	f003 fee1 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f003 f82f 	bl	8003aac <HAL_Delay>
	}
	if(L == 'I')
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b49      	cmp	r3, #73	; 0x49
 8000a52:	d13b      	bne.n	8000acc <letter+0x97c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	484b      	ldr	r0, [pc, #300]	; (8000b88 <letter+0xa38>)
 8000a5c:	f003 fed5 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	4849      	ldr	r0, [pc, #292]	; (8000b8c <letter+0xa3c>)
 8000a68:	f003 fecf 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a72:	4846      	ldr	r0, [pc, #280]	; (8000b8c <letter+0xa3c>)
 8000a74:	f003 fec9 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4843      	ldr	r0, [pc, #268]	; (8000b8c <letter+0xa3c>)
 8000a7e:	f003 fec4 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000a82:	2201      	movs	r2, #1
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	4841      	ldr	r0, [pc, #260]	; (8000b8c <letter+0xa3c>)
 8000a88:	f003 febf 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	483c      	ldr	r0, [pc, #240]	; (8000b84 <letter+0xa34>)
 8000a92:	f003 feba 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4839      	ldr	r0, [pc, #228]	; (8000b84 <letter+0xa34>)
 8000a9e:	f003 feb4 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <letter+0xa34>)
 8000aaa:	f003 feae 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <letter+0xa34>)
 8000ab6:	f003 fea8 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <letter+0xa38>)
 8000ac2:	f003 fea2 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f002 fff0 	bl	8003aac <HAL_Delay>
	}
	if(L == 'i')
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b69      	cmp	r3, #105	; 0x69
 8000ad0:	d13b      	bne.n	8000b4a <letter+0x9fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	482b      	ldr	r0, [pc, #172]	; (8000b88 <letter+0xa38>)
 8000ada:	f003 fe96 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	4829      	ldr	r0, [pc, #164]	; (8000b8c <letter+0xa3c>)
 8000ae6:	f003 fe90 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4826      	ldr	r0, [pc, #152]	; (8000b8c <letter+0xa3c>)
 8000af2:	f003 fe8a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000af6:	2200      	movs	r2, #0
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	4824      	ldr	r0, [pc, #144]	; (8000b8c <letter+0xa3c>)
 8000afc:	f003 fe85 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <letter+0xa3c>)
 8000b06:	f003 fe80 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <letter+0xa34>)
 8000b10:	f003 fe7b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	481a      	ldr	r0, [pc, #104]	; (8000b84 <letter+0xa34>)
 8000b1c:	f003 fe75 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <letter+0xa34>)
 8000b28:	f003 fe6f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <letter+0xa34>)
 8000b34:	f003 fe69 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <letter+0xa38>)
 8000b40:	f003 fe63 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f002 ffb1 	bl	8003aac <HAL_Delay>
	}
	if(L == 'l')
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b6c      	cmp	r3, #108	; 0x6c
 8000b4e:	d142      	bne.n	8000bd6 <letter+0xa86>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b56:	480c      	ldr	r0, [pc, #48]	; (8000b88 <letter+0xa38>)
 8000b58:	f003 fe57 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <letter+0xa3c>)
 8000b64:	f003 fe51 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <letter+0xa3c>)
 8000b70:	f003 fe4b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <letter+0xa3c>)
 8000b7a:	f003 fe46 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	e005      	b.n	8000b90 <letter+0xa40>
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	48d4      	ldr	r0, [pc, #848]	; (8000ee4 <letter+0xd94>)
 8000b92:	f003 fe3a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b96:	2200      	movs	r2, #0
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	48d3      	ldr	r0, [pc, #844]	; (8000ee8 <letter+0xd98>)
 8000b9c:	f003 fe35 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	48d0      	ldr	r0, [pc, #832]	; (8000ee8 <letter+0xd98>)
 8000ba8:	f003 fe2f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	48cd      	ldr	r0, [pc, #820]	; (8000ee8 <letter+0xd98>)
 8000bb4:	f003 fe29 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	48ca      	ldr	r0, [pc, #808]	; (8000ee8 <letter+0xd98>)
 8000bc0:	f003 fe23 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	48c8      	ldr	r0, [pc, #800]	; (8000eec <letter+0xd9c>)
 8000bcc:	f003 fe1d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f002 ff6b 	bl	8003aac <HAL_Delay>
	}
	if(L == 'm')
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b6d      	cmp	r3, #109	; 0x6d
 8000bda:	d13b      	bne.n	8000c54 <letter+0xb04>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be2:	48c2      	ldr	r0, [pc, #776]	; (8000eec <letter+0xd9c>)
 8000be4:	f003 fe11 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	48bd      	ldr	r0, [pc, #756]	; (8000ee4 <letter+0xd94>)
 8000bf0:	f003 fe0b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	48ba      	ldr	r0, [pc, #744]	; (8000ee4 <letter+0xd94>)
 8000bfc:	f003 fe05 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c00:	2201      	movs	r2, #1
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	48b7      	ldr	r0, [pc, #732]	; (8000ee4 <letter+0xd94>)
 8000c06:	f003 fe00 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	48b5      	ldr	r0, [pc, #724]	; (8000ee4 <letter+0xd94>)
 8000c10:	f003 fdfb 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	48b3      	ldr	r0, [pc, #716]	; (8000ee8 <letter+0xd98>)
 8000c1a:	f003 fdf6 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	48b0      	ldr	r0, [pc, #704]	; (8000ee8 <letter+0xd98>)
 8000c26:	f003 fdf0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	48ad      	ldr	r0, [pc, #692]	; (8000ee8 <letter+0xd98>)
 8000c32:	f003 fdea 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	48aa      	ldr	r0, [pc, #680]	; (8000ee8 <letter+0xd98>)
 8000c3e:	f003 fde4 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	48a8      	ldr	r0, [pc, #672]	; (8000eec <letter+0xd9c>)
 8000c4a:	f003 fdde 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f002 ff2c 	bl	8003aac <HAL_Delay>
	}
	if(L == 'N')
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b4e      	cmp	r3, #78	; 0x4e
 8000c58:	d13b      	bne.n	8000cd2 <letter+0xb82>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	48a2      	ldr	r0, [pc, #648]	; (8000eec <letter+0xd9c>)
 8000c62:	f003 fdd2 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	489d      	ldr	r0, [pc, #628]	; (8000ee4 <letter+0xd94>)
 8000c6e:	f003 fdcc 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	489a      	ldr	r0, [pc, #616]	; (8000ee4 <letter+0xd94>)
 8000c7a:	f003 fdc6 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4898      	ldr	r0, [pc, #608]	; (8000ee4 <letter+0xd94>)
 8000c84:	f003 fdc1 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <letter+0xd94>)
 8000c8e:	f003 fdbc 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c92:	2200      	movs	r2, #0
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4894      	ldr	r0, [pc, #592]	; (8000ee8 <letter+0xd98>)
 8000c98:	f003 fdb7 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca2:	4891      	ldr	r0, [pc, #580]	; (8000ee8 <letter+0xd98>)
 8000ca4:	f003 fdb1 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	488e      	ldr	r0, [pc, #568]	; (8000ee8 <letter+0xd98>)
 8000cb0:	f003 fdab 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	488b      	ldr	r0, [pc, #556]	; (8000ee8 <letter+0xd98>)
 8000cbc:	f003 fda5 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4889      	ldr	r0, [pc, #548]	; (8000eec <letter+0xd9c>)
 8000cc8:	f003 fd9f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f002 feed 	bl	8003aac <HAL_Delay>
	}
	if(L == 'n')
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8000cd6:	d13b      	bne.n	8000d50 <letter+0xc00>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4883      	ldr	r0, [pc, #524]	; (8000eec <letter+0xd9c>)
 8000ce0:	f003 fd93 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	487e      	ldr	r0, [pc, #504]	; (8000ee4 <letter+0xd94>)
 8000cec:	f003 fd8d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	487b      	ldr	r0, [pc, #492]	; (8000ee4 <letter+0xd94>)
 8000cf8:	f003 fd87 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4878      	ldr	r0, [pc, #480]	; (8000ee4 <letter+0xd94>)
 8000d02:	f003 fd82 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d06:	2201      	movs	r2, #1
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4876      	ldr	r0, [pc, #472]	; (8000ee4 <letter+0xd94>)
 8000d0c:	f003 fd7d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d10:	2200      	movs	r2, #0
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4874      	ldr	r0, [pc, #464]	; (8000ee8 <letter+0xd98>)
 8000d16:	f003 fd78 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4871      	ldr	r0, [pc, #452]	; (8000ee8 <letter+0xd98>)
 8000d22:	f003 fd72 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	486e      	ldr	r0, [pc, #440]	; (8000ee8 <letter+0xd98>)
 8000d2e:	f003 fd6c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	486b      	ldr	r0, [pc, #428]	; (8000ee8 <letter+0xd98>)
 8000d3a:	f003 fd66 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <letter+0xd9c>)
 8000d46:	f003 fd60 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f002 feae 	bl	8003aac <HAL_Delay>
	}
	if(L == 'O')
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b4f      	cmp	r3, #79	; 0x4f
 8000d54:	d13b      	bne.n	8000dce <letter+0xc7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5c:	4863      	ldr	r0, [pc, #396]	; (8000eec <letter+0xd9c>)
 8000d5e:	f003 fd54 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d68:	485e      	ldr	r0, [pc, #376]	; (8000ee4 <letter+0xd94>)
 8000d6a:	f003 fd4e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <letter+0xd94>)
 8000d76:	f003 fd48 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2140      	movs	r1, #64	; 0x40
 8000d7e:	4859      	ldr	r0, [pc, #356]	; (8000ee4 <letter+0xd94>)
 8000d80:	f003 fd43 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4856      	ldr	r0, [pc, #344]	; (8000ee4 <letter+0xd94>)
 8000d8a:	f003 fd3e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4855      	ldr	r0, [pc, #340]	; (8000ee8 <letter+0xd98>)
 8000d94:	f003 fd39 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4852      	ldr	r0, [pc, #328]	; (8000ee8 <letter+0xd98>)
 8000da0:	f003 fd33 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	484f      	ldr	r0, [pc, #316]	; (8000ee8 <letter+0xd98>)
 8000dac:	f003 fd2d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db6:	484c      	ldr	r0, [pc, #304]	; (8000ee8 <letter+0xd98>)
 8000db8:	f003 fd27 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	484a      	ldr	r0, [pc, #296]	; (8000eec <letter+0xd9c>)
 8000dc4:	f003 fd21 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f002 fe6f 	bl	8003aac <HAL_Delay>
	}
	if(L == 'o')
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b6f      	cmp	r3, #111	; 0x6f
 8000dd2:	d13b      	bne.n	8000e4c <letter+0xcfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4844      	ldr	r0, [pc, #272]	; (8000eec <letter+0xd9c>)
 8000ddc:	f003 fd15 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <letter+0xd94>)
 8000de8:	f003 fd0f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <letter+0xd94>)
 8000df4:	f003 fd09 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <letter+0xd94>)
 8000dfe:	f003 fd04 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000e02:	2201      	movs	r2, #1
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <letter+0xd94>)
 8000e08:	f003 fcff 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <letter+0xd98>)
 8000e12:	f003 fcfa 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <letter+0xd98>)
 8000e1e:	f003 fcf4 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <letter+0xd98>)
 8000e2a:	f003 fcee 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	482c      	ldr	r0, [pc, #176]	; (8000ee8 <letter+0xd98>)
 8000e36:	f003 fce8 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <letter+0xd9c>)
 8000e42:	f003 fce2 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f002 fe30 	bl	8003aac <HAL_Delay>
	}
	if(L == 'P')
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b50      	cmp	r3, #80	; 0x50
 8000e50:	d13b      	bne.n	8000eca <letter+0xd7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4824      	ldr	r0, [pc, #144]	; (8000eec <letter+0xd9c>)
 8000e5a:	f003 fcd6 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <letter+0xd94>)
 8000e66:	f003 fcd0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <letter+0xd94>)
 8000e72:	f003 fcca 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000e76:	2200      	movs	r2, #0
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <letter+0xd94>)
 8000e7c:	f003 fcc5 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <letter+0xd94>)
 8000e86:	f003 fcc0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <letter+0xd98>)
 8000e90:	f003 fcbb 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9a:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <letter+0xd98>)
 8000e9c:	f003 fcb5 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <letter+0xd98>)
 8000ea8:	f003 fcaf 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <letter+0xd98>)
 8000eb4:	f003 fca9 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <letter+0xd9c>)
 8000ec0:	f003 fca3 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f002 fdf1 	bl	8003aac <HAL_Delay>
	}
	if(L == 'Q')
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b51      	cmp	r3, #81	; 0x51
 8000ece:	d142      	bne.n	8000f56 <letter+0xe06>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <letter+0xd9c>)
 8000ed8:	f003 fc97 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	e005      	b.n	8000ef0 <letter+0xda0>
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	48d5      	ldr	r0, [pc, #852]	; (8001248 <letter+0x10f8>)
 8000ef2:	f003 fc8a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	48d2      	ldr	r0, [pc, #840]	; (8001248 <letter+0x10f8>)
 8000efe:	f003 fc84 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f02:	2200      	movs	r2, #0
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	48d0      	ldr	r0, [pc, #832]	; (8001248 <letter+0x10f8>)
 8000f08:	f003 fc7f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	48cd      	ldr	r0, [pc, #820]	; (8001248 <letter+0x10f8>)
 8000f12:	f003 fc7a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f16:	2201      	movs	r2, #1
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	48cc      	ldr	r0, [pc, #816]	; (800124c <letter+0x10fc>)
 8000f1c:	f003 fc75 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	48c9      	ldr	r0, [pc, #804]	; (800124c <letter+0x10fc>)
 8000f28:	f003 fc6f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	48c6      	ldr	r0, [pc, #792]	; (800124c <letter+0x10fc>)
 8000f34:	f003 fc69 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	48c3      	ldr	r0, [pc, #780]	; (800124c <letter+0x10fc>)
 8000f40:	f003 fc63 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	48c1      	ldr	r0, [pc, #772]	; (8001250 <letter+0x1100>)
 8000f4c:	f003 fc5d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f002 fdab 	bl	8003aac <HAL_Delay>
	}
	if(L == 'r')
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b72      	cmp	r3, #114	; 0x72
 8000f5a:	d13b      	bne.n	8000fd4 <letter+0xe84>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	48bb      	ldr	r0, [pc, #748]	; (8001250 <letter+0x1100>)
 8000f64:	f003 fc51 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	48b6      	ldr	r0, [pc, #728]	; (8001248 <letter+0x10f8>)
 8000f70:	f003 fc4b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	48b3      	ldr	r0, [pc, #716]	; (8001248 <letter+0x10f8>)
 8000f7c:	f003 fc45 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	48b0      	ldr	r0, [pc, #704]	; (8001248 <letter+0x10f8>)
 8000f86:	f003 fc40 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	48ae      	ldr	r0, [pc, #696]	; (8001248 <letter+0x10f8>)
 8000f90:	f003 fc3b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f94:	2201      	movs	r2, #1
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	48ac      	ldr	r0, [pc, #688]	; (800124c <letter+0x10fc>)
 8000f9a:	f003 fc36 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	48a9      	ldr	r0, [pc, #676]	; (800124c <letter+0x10fc>)
 8000fa6:	f003 fc30 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	48a6      	ldr	r0, [pc, #664]	; (800124c <letter+0x10fc>)
 8000fb2:	f003 fc2a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	48a3      	ldr	r0, [pc, #652]	; (800124c <letter+0x10fc>)
 8000fbe:	f003 fc24 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	48a1      	ldr	r0, [pc, #644]	; (8001250 <letter+0x1100>)
 8000fca:	f003 fc1e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f002 fd6c 	bl	8003aac <HAL_Delay>
	}
	if(L == 's')
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b73      	cmp	r3, #115	; 0x73
 8000fd8:	d13b      	bne.n	8001052 <letter+0xf02>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	489b      	ldr	r0, [pc, #620]	; (8001250 <letter+0x1100>)
 8000fe2:	f003 fc12 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4896      	ldr	r0, [pc, #600]	; (8001248 <letter+0x10f8>)
 8000fee:	f003 fc0c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4893      	ldr	r0, [pc, #588]	; (8001248 <letter+0x10f8>)
 8000ffa:	f003 fc06 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ffe:	2200      	movs	r2, #0
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	4891      	ldr	r0, [pc, #580]	; (8001248 <letter+0x10f8>)
 8001004:	f003 fc01 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001008:	2200      	movs	r2, #0
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	488e      	ldr	r0, [pc, #568]	; (8001248 <letter+0x10f8>)
 800100e:	f003 fbfc 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	488d      	ldr	r0, [pc, #564]	; (800124c <letter+0x10fc>)
 8001018:	f003 fbf7 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	488a      	ldr	r0, [pc, #552]	; (800124c <letter+0x10fc>)
 8001024:	f003 fbf1 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4887      	ldr	r0, [pc, #540]	; (800124c <letter+0x10fc>)
 8001030:	f003 fbeb 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4884      	ldr	r0, [pc, #528]	; (800124c <letter+0x10fc>)
 800103c:	f003 fbe5 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	4882      	ldr	r0, [pc, #520]	; (8001250 <letter+0x1100>)
 8001048:	f003 fbdf 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800104c:	2002      	movs	r0, #2
 800104e:	f002 fd2d 	bl	8003aac <HAL_Delay>
	}
	if(L == 'T')
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b54      	cmp	r3, #84	; 0x54
 8001056:	d13b      	bne.n	80010d0 <letter+0xf80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	487c      	ldr	r0, [pc, #496]	; (8001250 <letter+0x1100>)
 8001060:	f003 fbd3 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4877      	ldr	r0, [pc, #476]	; (8001248 <letter+0x10f8>)
 800106c:	f003 fbcd 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4874      	ldr	r0, [pc, #464]	; (8001248 <letter+0x10f8>)
 8001078:	f003 fbc7 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800107c:	2201      	movs	r2, #1
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4871      	ldr	r0, [pc, #452]	; (8001248 <letter+0x10f8>)
 8001082:	f003 fbc2 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	486f      	ldr	r0, [pc, #444]	; (8001248 <letter+0x10f8>)
 800108c:	f003 fbbd 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	486d      	ldr	r0, [pc, #436]	; (800124c <letter+0x10fc>)
 8001096:	f003 fbb8 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	486a      	ldr	r0, [pc, #424]	; (800124c <letter+0x10fc>)
 80010a2:	f003 fbb2 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	4867      	ldr	r0, [pc, #412]	; (800124c <letter+0x10fc>)
 80010ae:	f003 fbac 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4864      	ldr	r0, [pc, #400]	; (800124c <letter+0x10fc>)
 80010ba:	f003 fba6 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	4862      	ldr	r0, [pc, #392]	; (8001250 <letter+0x1100>)
 80010c6:	f003 fba0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f002 fcee 	bl	8003aac <HAL_Delay>
	}
	if(L == 't')
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b74      	cmp	r3, #116	; 0x74
 80010d4:	d13b      	bne.n	800114e <letter+0xffe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010dc:	485c      	ldr	r0, [pc, #368]	; (8001250 <letter+0x1100>)
 80010de:	f003 fb94 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4857      	ldr	r0, [pc, #348]	; (8001248 <letter+0x10f8>)
 80010ea:	f003 fb8e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4854      	ldr	r0, [pc, #336]	; (8001248 <letter+0x10f8>)
 80010f6:	f003 fb88 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80010fa:	2201      	movs	r2, #1
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4852      	ldr	r0, [pc, #328]	; (8001248 <letter+0x10f8>)
 8001100:	f003 fb83 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001104:	2200      	movs	r2, #0
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	484f      	ldr	r0, [pc, #316]	; (8001248 <letter+0x10f8>)
 800110a:	f003 fb7e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800110e:	2201      	movs	r2, #1
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	484e      	ldr	r0, [pc, #312]	; (800124c <letter+0x10fc>)
 8001114:	f003 fb79 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	484b      	ldr	r0, [pc, #300]	; (800124c <letter+0x10fc>)
 8001120:	f003 fb73 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	4848      	ldr	r0, [pc, #288]	; (800124c <letter+0x10fc>)
 800112c:	f003 fb6d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	4845      	ldr	r0, [pc, #276]	; (800124c <letter+0x10fc>)
 8001138:	f003 fb67 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4843      	ldr	r0, [pc, #268]	; (8001250 <letter+0x1100>)
 8001144:	f003 fb61 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001148:	2002      	movs	r0, #2
 800114a:	f002 fcaf 	bl	8003aac <HAL_Delay>
	}
	if(L == 'u')
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b75      	cmp	r3, #117	; 0x75
 8001152:	d13b      	bne.n	80011cc <letter+0x107c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	483d      	ldr	r0, [pc, #244]	; (8001250 <letter+0x1100>)
 800115c:	f003 fb55 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <letter+0x10f8>)
 8001168:	f003 fb4f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4835      	ldr	r0, [pc, #212]	; (8001248 <letter+0x10f8>)
 8001174:	f003 fb49 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001178:	2201      	movs	r2, #1
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	4832      	ldr	r0, [pc, #200]	; (8001248 <letter+0x10f8>)
 800117e:	f003 fb44 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001182:	2200      	movs	r2, #0
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4830      	ldr	r0, [pc, #192]	; (8001248 <letter+0x10f8>)
 8001188:	f003 fb3f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800118c:	2201      	movs	r2, #1
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <letter+0x10fc>)
 8001192:	f003 fb3a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	482b      	ldr	r0, [pc, #172]	; (800124c <letter+0x10fc>)
 800119e:	f003 fb34 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <letter+0x10fc>)
 80011aa:	f003 fb2e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4825      	ldr	r0, [pc, #148]	; (800124c <letter+0x10fc>)
 80011b6:	f003 fb28 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <letter+0x1100>)
 80011c2:	f003 fb22 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80011c6:	2002      	movs	r0, #2
 80011c8:	f002 fc70 	bl	8003aac <HAL_Delay>
	}
	if(L == 'v')
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b76      	cmp	r3, #118	; 0x76
 80011d0:	d142      	bne.n	8001258 <letter+0x1108>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <letter+0x1100>)
 80011da:	f003 fb16 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <letter+0x10f8>)
 80011e6:	f003 fb10 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f0:	4815      	ldr	r0, [pc, #84]	; (8001248 <letter+0x10f8>)
 80011f2:	f003 fb0a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80011f6:	2201      	movs	r2, #1
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <letter+0x10f8>)
 80011fc:	f003 fb05 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001200:	2200      	movs	r2, #0
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <letter+0x10f8>)
 8001206:	f003 fb00 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800120a:	2201      	movs	r2, #1
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <letter+0x10fc>)
 8001210:	f003 fafb 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <letter+0x10fc>)
 800121c:	f003 faf5 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <letter+0x10fc>)
 8001228:	f003 faef 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <letter+0x10fc>)
 8001234:	f003 fae9 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <letter+0x1100>)
 8001240:	f003 fae3 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001244:	2002      	movs	r0, #2
 8001246:	e005      	b.n	8001254 <letter+0x1104>
 8001248:	40011000 	.word	0x40011000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	f002 fc2a 	bl	8003aac <HAL_Delay>
	}
	if(L == 'W')
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b57      	cmp	r3, #87	; 0x57
 800125c:	d13b      	bne.n	80012d6 <letter+0x1186>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	48d5      	ldr	r0, [pc, #852]	; (80015bc <letter+0x146c>)
 8001266:	f003 fad0 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	48d3      	ldr	r0, [pc, #844]	; (80015c0 <letter+0x1470>)
 8001272:	f003 faca 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	48d0      	ldr	r0, [pc, #832]	; (80015c0 <letter+0x1470>)
 800127e:	f003 fac4 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	48ce      	ldr	r0, [pc, #824]	; (80015c0 <letter+0x1470>)
 8001288:	f003 fabf 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800128c:	2200      	movs	r2, #0
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	48cb      	ldr	r0, [pc, #812]	; (80015c0 <letter+0x1470>)
 8001292:	f003 faba 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	48ca      	ldr	r0, [pc, #808]	; (80015c4 <letter+0x1474>)
 800129c:	f003 fab5 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	48c7      	ldr	r0, [pc, #796]	; (80015c4 <letter+0x1474>)
 80012a8:	f003 faaf 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b2:	48c4      	ldr	r0, [pc, #784]	; (80015c4 <letter+0x1474>)
 80012b4:	f003 faa9 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	48c1      	ldr	r0, [pc, #772]	; (80015c4 <letter+0x1474>)
 80012c0:	f003 faa3 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	48bc      	ldr	r0, [pc, #752]	; (80015bc <letter+0x146c>)
 80012cc:	f003 fa9d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f002 fbeb 	bl	8003aac <HAL_Delay>
	}
	if(L == 'w')
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b77      	cmp	r3, #119	; 0x77
 80012da:	d13b      	bne.n	8001354 <letter+0x1204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	48b6      	ldr	r0, [pc, #728]	; (80015bc <letter+0x146c>)
 80012e4:	f003 fa91 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	48b4      	ldr	r0, [pc, #720]	; (80015c0 <letter+0x1470>)
 80012f0:	f003 fa8b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	48b1      	ldr	r0, [pc, #708]	; (80015c0 <letter+0x1470>)
 80012fc:	f003 fa85 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	48ae      	ldr	r0, [pc, #696]	; (80015c0 <letter+0x1470>)
 8001306:	f003 fa80 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	48ac      	ldr	r0, [pc, #688]	; (80015c0 <letter+0x1470>)
 8001310:	f003 fa7b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001314:	2201      	movs	r2, #1
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	48aa      	ldr	r0, [pc, #680]	; (80015c4 <letter+0x1474>)
 800131a:	f003 fa76 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	48a7      	ldr	r0, [pc, #668]	; (80015c4 <letter+0x1474>)
 8001326:	f003 fa70 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	48a4      	ldr	r0, [pc, #656]	; (80015c4 <letter+0x1474>)
 8001332:	f003 fa6a 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	48a1      	ldr	r0, [pc, #644]	; (80015c4 <letter+0x1474>)
 800133e:	f003 fa64 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	489c      	ldr	r0, [pc, #624]	; (80015bc <letter+0x146c>)
 800134a:	f003 fa5e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800134e:	2002      	movs	r0, #2
 8001350:	f002 fbac 	bl	8003aac <HAL_Delay>
	}
	if(L == 'y')
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b79      	cmp	r3, #121	; 0x79
 8001358:	d13b      	bne.n	80013d2 <letter+0x1282>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4896      	ldr	r0, [pc, #600]	; (80015bc <letter+0x146c>)
 8001362:	f003 fa52 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	4894      	ldr	r0, [pc, #592]	; (80015c0 <letter+0x1470>)
 800136e:	f003 fa4c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	4891      	ldr	r0, [pc, #580]	; (80015c0 <letter+0x1470>)
 800137a:	f003 fa46 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	488f      	ldr	r0, [pc, #572]	; (80015c0 <letter+0x1470>)
 8001384:	f003 fa41 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001388:	2201      	movs	r2, #1
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	488c      	ldr	r0, [pc, #560]	; (80015c0 <letter+0x1470>)
 800138e:	f003 fa3c 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	488b      	ldr	r0, [pc, #556]	; (80015c4 <letter+0x1474>)
 8001398:	f003 fa37 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4888      	ldr	r0, [pc, #544]	; (80015c4 <letter+0x1474>)
 80013a4:	f003 fa31 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	4885      	ldr	r0, [pc, #532]	; (80015c4 <letter+0x1474>)
 80013b0:	f003 fa2b 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ba:	4882      	ldr	r0, [pc, #520]	; (80015c4 <letter+0x1474>)
 80013bc:	f003 fa25 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	487d      	ldr	r0, [pc, #500]	; (80015bc <letter+0x146c>)
 80013c8:	f003 fa1f 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f002 fb6d 	bl	8003aac <HAL_Delay>
	}
	if(L == '0')
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b30      	cmp	r3, #48	; 0x30
 80013d6:	d13b      	bne.n	8001450 <letter+0x1300>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4877      	ldr	r0, [pc, #476]	; (80015bc <letter+0x146c>)
 80013e0:	f003 fa13 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	4875      	ldr	r0, [pc, #468]	; (80015c0 <letter+0x1470>)
 80013ec:	f003 fa0d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4872      	ldr	r0, [pc, #456]	; (80015c0 <letter+0x1470>)
 80013f8:	f003 fa07 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	486f      	ldr	r0, [pc, #444]	; (80015c0 <letter+0x1470>)
 8001402:	f003 fa02 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001406:	2200      	movs	r2, #0
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	486d      	ldr	r0, [pc, #436]	; (80015c0 <letter+0x1470>)
 800140c:	f003 f9fd 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001410:	2201      	movs	r2, #1
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	486b      	ldr	r0, [pc, #428]	; (80015c4 <letter+0x1474>)
 8001416:	f003 f9f8 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001420:	4868      	ldr	r0, [pc, #416]	; (80015c4 <letter+0x1474>)
 8001422:	f003 f9f2 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	4865      	ldr	r0, [pc, #404]	; (80015c4 <letter+0x1474>)
 800142e:	f003 f9ec 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001438:	4862      	ldr	r0, [pc, #392]	; (80015c4 <letter+0x1474>)
 800143a:	f003 f9e6 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	485d      	ldr	r0, [pc, #372]	; (80015bc <letter+0x146c>)
 8001446:	f003 f9e0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800144a:	2002      	movs	r0, #2
 800144c:	f002 fb2e 	bl	8003aac <HAL_Delay>
	}
	if(L == '1')
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b31      	cmp	r3, #49	; 0x31
 8001454:	d13b      	bne.n	80014ce <letter+0x137e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4857      	ldr	r0, [pc, #348]	; (80015bc <letter+0x146c>)
 800145e:	f003 f9d4 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4855      	ldr	r0, [pc, #340]	; (80015c0 <letter+0x1470>)
 800146a:	f003 f9ce 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	4852      	ldr	r0, [pc, #328]	; (80015c0 <letter+0x1470>)
 8001476:	f003 f9c8 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800147a:	2200      	movs	r2, #0
 800147c:	2140      	movs	r1, #64	; 0x40
 800147e:	4850      	ldr	r0, [pc, #320]	; (80015c0 <letter+0x1470>)
 8001480:	f003 f9c3 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	484d      	ldr	r0, [pc, #308]	; (80015c0 <letter+0x1470>)
 800148a:	f003 f9be 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800148e:	2201      	movs	r2, #1
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	484c      	ldr	r0, [pc, #304]	; (80015c4 <letter+0x1474>)
 8001494:	f003 f9b9 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4849      	ldr	r0, [pc, #292]	; (80015c4 <letter+0x1474>)
 80014a0:	f003 f9b3 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014aa:	4846      	ldr	r0, [pc, #280]	; (80015c4 <letter+0x1474>)
 80014ac:	f003 f9ad 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4843      	ldr	r0, [pc, #268]	; (80015c4 <letter+0x1474>)
 80014b8:	f003 f9a7 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	483e      	ldr	r0, [pc, #248]	; (80015bc <letter+0x146c>)
 80014c4:	f003 f9a1 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f002 faef 	bl	8003aac <HAL_Delay>
	}
	if(L == '2')
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b32      	cmp	r3, #50	; 0x32
 80014d2:	d138      	bne.n	8001546 <letter+0x13f6>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	4838      	ldr	r0, [pc, #224]	; (80015bc <letter+0x146c>)
 80014dc:	f003 f995 	bl	800480a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4836      	ldr	r0, [pc, #216]	; (80015c0 <letter+0x1470>)
 80014e8:	f003 f98f 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f2:	4833      	ldr	r0, [pc, #204]	; (80015c0 <letter+0x1470>)
 80014f4:	f003 f989 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	4830      	ldr	r0, [pc, #192]	; (80015c0 <letter+0x1470>)
 80014fe:	f003 f984 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	482e      	ldr	r0, [pc, #184]	; (80015c0 <letter+0x1470>)
 8001508:	f003 f97f 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	482c      	ldr	r0, [pc, #176]	; (80015c4 <letter+0x1474>)
 8001512:	f003 f97a 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4829      	ldr	r0, [pc, #164]	; (80015c4 <letter+0x1474>)
 800151e:	f003 f974 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001528:	4826      	ldr	r0, [pc, #152]	; (80015c4 <letter+0x1474>)
 800152a:	f003 f96e 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001534:	4823      	ldr	r0, [pc, #140]	; (80015c4 <letter+0x1474>)
 8001536:	f003 f968 	bl	800480a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	481e      	ldr	r0, [pc, #120]	; (80015bc <letter+0x146c>)
 8001542:	f003 f962 	bl	800480a <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b33      	cmp	r3, #51	; 0x33
 800154a:	d143      	bne.n	80015d4 <letter+0x1484>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	481a      	ldr	r0, [pc, #104]	; (80015bc <letter+0x146c>)
 8001554:	f003 f959 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <letter+0x1470>)
 8001560:	f003 f953 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	4815      	ldr	r0, [pc, #84]	; (80015c0 <letter+0x1470>)
 800156c:	f003 f94d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001570:	2200      	movs	r2, #0
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <letter+0x1470>)
 8001576:	f003 f948 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <letter+0x1470>)
 8001580:	f003 f943 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001584:	2201      	movs	r2, #1
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	480e      	ldr	r0, [pc, #56]	; (80015c4 <letter+0x1474>)
 800158a:	f003 f93e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <letter+0x1474>)
 8001596:	f003 f938 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <letter+0x1474>)
 80015a2:	f003 f932 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <letter+0x1474>)
 80015ae:	f003 f92c 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b8:	e006      	b.n	80015c8 <letter+0x1478>
 80015ba:	bf00      	nop
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40010800 	.word	0x40010800
 80015c8:	48c1      	ldr	r0, [pc, #772]	; (80018d0 <letter+0x1780>)
 80015ca:	f003 f91e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f002 fa6c 	bl	8003aac <HAL_Delay>
	}
	if(L == '4')
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b34      	cmp	r3, #52	; 0x34
 80015d8:	d13b      	bne.n	8001652 <letter+0x1502>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e0:	48bb      	ldr	r0, [pc, #748]	; (80018d0 <letter+0x1780>)
 80015e2:	f003 f912 	bl	800480a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	48b9      	ldr	r0, [pc, #740]	; (80018d4 <letter+0x1784>)
 80015ee:	f003 f90c 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	48b6      	ldr	r0, [pc, #728]	; (80018d4 <letter+0x1784>)
 80015fa:	f003 f906 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80015fe:	2201      	movs	r2, #1
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	48b4      	ldr	r0, [pc, #720]	; (80018d4 <letter+0x1784>)
 8001604:	f003 f901 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001608:	2200      	movs	r2, #0
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	48b1      	ldr	r0, [pc, #708]	; (80018d4 <letter+0x1784>)
 800160e:	f003 f8fc 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001612:	2201      	movs	r2, #1
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	48b0      	ldr	r0, [pc, #704]	; (80018d8 <letter+0x1788>)
 8001618:	f003 f8f7 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	48ad      	ldr	r0, [pc, #692]	; (80018d8 <letter+0x1788>)
 8001624:	f003 f8f1 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	48aa      	ldr	r0, [pc, #680]	; (80018d8 <letter+0x1788>)
 8001630:	f003 f8eb 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163a:	48a7      	ldr	r0, [pc, #668]	; (80018d8 <letter+0x1788>)
 800163c:	f003 f8e5 	bl	800480a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001646:	48a2      	ldr	r0, [pc, #648]	; (80018d0 <letter+0x1780>)
 8001648:	f003 f8df 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800164c:	2002      	movs	r0, #2
 800164e:	f002 fa2d 	bl	8003aac <HAL_Delay>
	}
	if(L == '5')
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b35      	cmp	r3, #53	; 0x35
 8001656:	d13b      	bne.n	80016d0 <letter+0x1580>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	489c      	ldr	r0, [pc, #624]	; (80018d0 <letter+0x1780>)
 8001660:	f003 f8d3 	bl	800480a <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166a:	489a      	ldr	r0, [pc, #616]	; (80018d4 <letter+0x1784>)
 800166c:	f003 f8cd 	bl	800480a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	4897      	ldr	r0, [pc, #604]	; (80018d4 <letter+0x1784>)
 8001678:	f003 f8c7 	bl	800480a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4894      	ldr	r0, [pc, #592]	; (80018d4 <letter+0x1784>)
 8001682:	f003 f8c2 	bl	800480a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001686:	2200      	movs	r2, #0
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	4892      	ldr	r0, [pc, #584]	; (80018d4 <letter+0x1784>)
 800168c:	f003 f8bd 	bl	800480a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001690:	2201      	movs	r2, #1
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	4890      	ldr	r0, [pc, #576]	; (80018d8 <letter+0x1788>)
 8001696:	f003 f8b8 	bl	800480a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	488d      	ldr	r0, [pc, #564]	; (80018d8 <letter+0x1788>)
 80016a2:	f003 f8b2 	bl	800480a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ac:	488a      	ldr	r0, [pc, #552]	; (80018d8 <letter+0x1788>)
 80016ae:	f003 f8ac 	bl	800480a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b8:	4887      	ldr	r0, [pc, #540]	; (80018d8 <letter+0x1788>)
 80016ba:	f003 f8a6 	bl	800480a <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4882      	ldr	r0, [pc, #520]	; (80018d0 <letter+0x1780>)
 80016c6:	f003 f8a0 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f002 f9ee 	bl	8003aac <HAL_Delay>
	}
	if(L == '6')
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b36      	cmp	r3, #54	; 0x36
 80016d4:	d13b      	bne.n	800174e <letter+0x15fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016dc:	487c      	ldr	r0, [pc, #496]	; (80018d0 <letter+0x1780>)
 80016de:	f003 f894 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e8:	487a      	ldr	r0, [pc, #488]	; (80018d4 <letter+0x1784>)
 80016ea:	f003 f88e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4877      	ldr	r0, [pc, #476]	; (80018d4 <letter+0x1784>)
 80016f6:	f003 f888 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016fa:	2201      	movs	r2, #1
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4875      	ldr	r0, [pc, #468]	; (80018d4 <letter+0x1784>)
 8001700:	f003 f883 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4872      	ldr	r0, [pc, #456]	; (80018d4 <letter+0x1784>)
 800170a:	f003 f87e 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800170e:	2201      	movs	r2, #1
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4871      	ldr	r0, [pc, #452]	; (80018d8 <letter+0x1788>)
 8001714:	f003 f879 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171e:	486e      	ldr	r0, [pc, #440]	; (80018d8 <letter+0x1788>)
 8001720:	f003 f873 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	486b      	ldr	r0, [pc, #428]	; (80018d8 <letter+0x1788>)
 800172c:	f003 f86d 	bl	800480a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001736:	4868      	ldr	r0, [pc, #416]	; (80018d8 <letter+0x1788>)
 8001738:	f003 f867 	bl	800480a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	4863      	ldr	r0, [pc, #396]	; (80018d0 <letter+0x1780>)
 8001744:	f003 f861 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001748:	2002      	movs	r0, #2
 800174a:	f002 f9af 	bl	8003aac <HAL_Delay>
	}
	if(L == '7')
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b37      	cmp	r3, #55	; 0x37
 8001752:	d13b      	bne.n	80017cc <letter+0x167c>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	485d      	ldr	r0, [pc, #372]	; (80018d0 <letter+0x1780>)
 800175c:	f003 f855 	bl	800480a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	485b      	ldr	r0, [pc, #364]	; (80018d4 <letter+0x1784>)
 8001768:	f003 f84f 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001772:	4858      	ldr	r0, [pc, #352]	; (80018d4 <letter+0x1784>)
 8001774:	f003 f849 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001778:	2201      	movs	r2, #1
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	4855      	ldr	r0, [pc, #340]	; (80018d4 <letter+0x1784>)
 800177e:	f003 f844 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <letter+0x1784>)
 8001788:	f003 f83f 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800178c:	2201      	movs	r2, #1
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4851      	ldr	r0, [pc, #324]	; (80018d8 <letter+0x1788>)
 8001792:	f003 f83a 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	484e      	ldr	r0, [pc, #312]	; (80018d8 <letter+0x1788>)
 800179e:	f003 f834 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a8:	484b      	ldr	r0, [pc, #300]	; (80018d8 <letter+0x1788>)
 80017aa:	f003 f82e 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	4848      	ldr	r0, [pc, #288]	; (80018d8 <letter+0x1788>)
 80017b6:	f003 f828 	bl	800480a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c0:	4843      	ldr	r0, [pc, #268]	; (80018d0 <letter+0x1780>)
 80017c2:	f003 f822 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017c6:	2002      	movs	r0, #2
 80017c8:	f002 f970 	bl	8003aac <HAL_Delay>
	}
	if(L == '8')
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b38      	cmp	r3, #56	; 0x38
 80017d0:	d13b      	bne.n	800184a <letter+0x16fa>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d8:	483d      	ldr	r0, [pc, #244]	; (80018d0 <letter+0x1780>)
 80017da:	f003 f816 	bl	800480a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e4:	483b      	ldr	r0, [pc, #236]	; (80018d4 <letter+0x1784>)
 80017e6:	f003 f810 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4838      	ldr	r0, [pc, #224]	; (80018d4 <letter+0x1784>)
 80017f2:	f003 f80a 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4836      	ldr	r0, [pc, #216]	; (80018d4 <letter+0x1784>)
 80017fc:	f003 f805 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001800:	2201      	movs	r2, #1
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	4833      	ldr	r0, [pc, #204]	; (80018d4 <letter+0x1784>)
 8001806:	f003 f800 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800180a:	2201      	movs	r2, #1
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	4832      	ldr	r0, [pc, #200]	; (80018d8 <letter+0x1788>)
 8001810:	f002 fffb 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181a:	482f      	ldr	r0, [pc, #188]	; (80018d8 <letter+0x1788>)
 800181c:	f002 fff5 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001826:	482c      	ldr	r0, [pc, #176]	; (80018d8 <letter+0x1788>)
 8001828:	f002 ffef 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001832:	4829      	ldr	r0, [pc, #164]	; (80018d8 <letter+0x1788>)
 8001834:	f002 ffe9 	bl	800480a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <letter+0x1780>)
 8001840:	f002 ffe3 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001844:	2002      	movs	r0, #2
 8001846:	f002 f931 	bl	8003aac <HAL_Delay>
	}
	if(L =='9')
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b39      	cmp	r3, #57	; 0x39
 800184e:	d13b      	bne.n	80018c8 <letter+0x1778>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	481e      	ldr	r0, [pc, #120]	; (80018d0 <letter+0x1780>)
 8001858:	f002 ffd7 	bl	800480a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <letter+0x1784>)
 8001864:	f002 ffd1 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <letter+0x1784>)
 8001870:	f002 ffcb 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001874:	2200      	movs	r2, #0
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <letter+0x1784>)
 800187a:	f002 ffc6 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800187e:	2201      	movs	r2, #1
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <letter+0x1784>)
 8001884:	f002 ffc1 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001888:	2201      	movs	r2, #1
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <letter+0x1788>)
 800188e:	f002 ffbc 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <letter+0x1788>)
 800189a:	f002 ffb6 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <letter+0x1788>)
 80018a6:	f002 ffb0 	bl	800480a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <letter+0x1788>)
 80018b2:	f002 ffaa 	bl	800480a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <letter+0x1780>)
 80018be:	f002 ffa4 	bl	800480a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f002 f8f2 	bl	8003aac <HAL_Delay>
	}

}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010800 	.word	0x40010800

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e0:	f002 f8b2 	bl	8003a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e4:	f000 f8bc 	bl	8001a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e8:	f000 fa3e 	bl	8001d68 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018ec:	f000 f99c 	bl	8001c28 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80018f0:	f000 fa10 	bl	8001d14 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80018f4:	f000 f9e4 	bl	8001cc0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80018f8:	f000 f908 	bl	8001b0c <MX_ADC1_Init>
  MX_TIM1_Init();
 80018fc:	f000 f944 	bl	8001b88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001900:	f004 fc42 	bl	8006188 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8001904:	4a35      	ldr	r2, [pc, #212]	; (80019dc <main+0x100>)
 8001906:	2102      	movs	r1, #2
 8001908:	2008      	movs	r0, #8
 800190a:	f004 fd7b 	bl	8006404 <osMessageQueueNew>
 800190e:	4603      	mov	r3, r0
 8001910:	4a33      	ldr	r2, [pc, #204]	; (80019e0 <main+0x104>)
 8001912:	6013      	str	r3, [r2, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8001914:	4a33      	ldr	r2, [pc, #204]	; (80019e4 <main+0x108>)
 8001916:	2102      	movs	r1, #2
 8001918:	2008      	movs	r0, #8
 800191a:	f004 fd73 	bl	8006404 <osMessageQueueNew>
 800191e:	4603      	mov	r3, r0
 8001920:	4a31      	ldr	r2, [pc, #196]	; (80019e8 <main+0x10c>)
 8001922:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8001924:	4a31      	ldr	r2, [pc, #196]	; (80019ec <main+0x110>)
 8001926:	2102      	movs	r1, #2
 8001928:	2008      	movs	r0, #8
 800192a:	f004 fd6b 	bl	8006404 <osMessageQueueNew>
 800192e:	4603      	mov	r3, r0
 8001930:	4a2f      	ldr	r2, [pc, #188]	; (80019f0 <main+0x114>)
 8001932:	6013      	str	r3, [r2, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8001934:	4a2f      	ldr	r2, [pc, #188]	; (80019f4 <main+0x118>)
 8001936:	2102      	movs	r1, #2
 8001938:	2008      	movs	r0, #8
 800193a:	f004 fd63 	bl	8006404 <osMessageQueueNew>
 800193e:	4603      	mov	r3, r0
 8001940:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <main+0x11c>)
 8001942:	6013      	str	r3, [r2, #0]

  /* creation of WebsiteQueue */
  WebsiteQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WebsiteQueue_attributes);
 8001944:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <main+0x120>)
 8001946:	2102      	movs	r1, #2
 8001948:	2008      	movs	r0, #8
 800194a:	f004 fd5b 	bl	8006404 <osMessageQueueNew>
 800194e:	4603      	mov	r3, r0
 8001950:	4a2b      	ldr	r2, [pc, #172]	; (8001a00 <main+0x124>)
 8001952:	6013      	str	r3, [r2, #0]

  /* creation of Flow2Queue */
  Flow2QueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &Flow2Queue_attributes);
 8001954:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <main+0x128>)
 8001956:	2102      	movs	r1, #2
 8001958:	2010      	movs	r0, #16
 800195a:	f004 fd53 	bl	8006404 <osMessageQueueNew>
 800195e:	4603      	mov	r3, r0
 8001960:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <main+0x12c>)
 8001962:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 8001964:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <main+0x130>)
 8001966:	2100      	movs	r1, #0
 8001968:	4829      	ldr	r0, [pc, #164]	; (8001a10 <main+0x134>)
 800196a:	f004 fc73 	bl	8006254 <osThreadNew>
 800196e:	4603      	mov	r3, r0
 8001970:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <main+0x138>)
 8001972:	6013      	str	r3, [r2, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 8001974:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <main+0x13c>)
 8001976:	2100      	movs	r1, #0
 8001978:	4828      	ldr	r0, [pc, #160]	; (8001a1c <main+0x140>)
 800197a:	f004 fc6b 	bl	8006254 <osThreadNew>
 800197e:	4603      	mov	r3, r0
 8001980:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <main+0x144>)
 8001982:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 8001984:	4a27      	ldr	r2, [pc, #156]	; (8001a24 <main+0x148>)
 8001986:	2100      	movs	r1, #0
 8001988:	4827      	ldr	r0, [pc, #156]	; (8001a28 <main+0x14c>)
 800198a:	f004 fc63 	bl	8006254 <osThreadNew>
 800198e:	4603      	mov	r3, r0
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <main+0x150>)
 8001992:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <main+0x154>)
 8001996:	2100      	movs	r1, #0
 8001998:	4826      	ldr	r0, [pc, #152]	; (8001a34 <main+0x158>)
 800199a:	f004 fc5b 	bl	8006254 <osThreadNew>
 800199e:	4603      	mov	r3, r0
 80019a0:	4a25      	ldr	r2, [pc, #148]	; (8001a38 <main+0x15c>)
 80019a2:	6013      	str	r3, [r2, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 80019a4:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <main+0x160>)
 80019a6:	2100      	movs	r1, #0
 80019a8:	4825      	ldr	r0, [pc, #148]	; (8001a40 <main+0x164>)
 80019aa:	f004 fc53 	bl	8006254 <osThreadNew>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a24      	ldr	r2, [pc, #144]	; (8001a44 <main+0x168>)
 80019b2:	6013      	str	r3, [r2, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <main+0x16c>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4824      	ldr	r0, [pc, #144]	; (8001a4c <main+0x170>)
 80019ba:	f004 fc4b 	bl	8006254 <osThreadNew>
 80019be:	4603      	mov	r3, r0
 80019c0:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <main+0x174>)
 80019c2:	6013      	str	r3, [r2, #0]

  /* creation of WebsiteTask */
  WebsiteTaskHandle = osThreadNew(StartWebsiteTask, NULL, &WebsiteTask_attributes);
 80019c4:	4a23      	ldr	r2, [pc, #140]	; (8001a54 <main+0x178>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	4823      	ldr	r0, [pc, #140]	; (8001a58 <main+0x17c>)
 80019ca:	f004 fc43 	bl	8006254 <osThreadNew>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4a22      	ldr	r2, [pc, #136]	; (8001a5c <main+0x180>)
 80019d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019d4:	f004 fc0a 	bl	80061ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 80019d8:	e7fe      	b.n	80019d8 <main+0xfc>
 80019da:	bf00      	nop
 80019dc:	0800921c 	.word	0x0800921c
 80019e0:	2000255c 	.word	0x2000255c
 80019e4:	08009234 	.word	0x08009234
 80019e8:	20002838 	.word	0x20002838
 80019ec:	0800924c 	.word	0x0800924c
 80019f0:	20002558 	.word	0x20002558
 80019f4:	08009264 	.word	0x08009264
 80019f8:	20002564 	.word	0x20002564
 80019fc:	0800927c 	.word	0x0800927c
 8001a00:	200027e4 	.word	0x200027e4
 8001a04:	08009294 	.word	0x08009294
 8001a08:	200027ac 	.word	0x200027ac
 8001a0c:	08009120 	.word	0x08009120
 8001a10:	08002a01 	.word	0x08002a01
 8001a14:	20002560 	.word	0x20002560
 8001a18:	08009144 	.word	0x08009144
 8001a1c:	08002a29 	.word	0x08002a29
 8001a20:	200027e8 	.word	0x200027e8
 8001a24:	08009168 	.word	0x08009168
 8001a28:	08002d6d 	.word	0x08002d6d
 8001a2c:	20002888 	.word	0x20002888
 8001a30:	0800918c 	.word	0x0800918c
 8001a34:	08002d7d 	.word	0x08002d7d
 8001a38:	200027e0 	.word	0x200027e0
 8001a3c:	080091b0 	.word	0x080091b0
 8001a40:	08002f49 	.word	0x08002f49
 8001a44:	20002834 	.word	0x20002834
 8001a48:	080091d4 	.word	0x080091d4
 8001a4c:	08003421 	.word	0x08003421
 8001a50:	20002884 	.word	0x20002884
 8001a54:	080091f8 	.word	0x080091f8
 8001a58:	08003509 	.word	0x08003509
 8001a5c:	200027a8 	.word	0x200027a8

08001a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	; 0x50
 8001a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6a:	2228      	movs	r2, #40	; 0x28
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 fabe 	bl	8008ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a94:	2301      	movs	r3, #1
 8001a96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a98:	2310      	movs	r3, #16
 8001a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fee7 	bl	8004880 <HAL_RCC_OscConfig>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001ab8:	f001 fd74 	bl	80035a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abc:	230f      	movs	r3, #15
 8001abe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001acc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f003 f951 	bl	8004d80 <HAL_RCC_ClockConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ae4:	f001 fd5e 	bl	80035a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fb0e 	bl	8005114 <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001afe:	f001 fd51 	bl	80035a4 <Error_Handler>
  }
}
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	; 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b1e:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <MX_ADC1_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b28:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b36:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001b3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b48:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b4a:	f001 ffd3 	bl	8003af4 <HAL_ADC_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001b54:	f001 fd26 	bl	80035a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001b58:	230f      	movs	r3, #15
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_ADC1_Init+0x74>)
 8001b6a:	f002 fa4f 	bl	800400c <HAL_ADC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001b74:	f001 fd16 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200027b0 	.word	0x200027b0
 8001b84:	40012400 	.word	0x40012400

08001b88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001ba6:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <MX_TIM1_Init+0x9c>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc4:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd0:	4813      	ldr	r0, [pc, #76]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bd2:	f003 fc19 	bl	8005408 <HAL_TIM_Base_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bdc:	f001 fce2 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001bee:	f003 fe25 	bl	800583c <HAL_TIM_ConfigClockSource>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bf8:	f001 fcd4 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c04:	463b      	mov	r3, r7
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM1_Init+0x98>)
 8001c0a:	f003 fff7 	bl	8005bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c14:	f001 fcc6 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200027ec 	.word	0x200027ec
 8001c24:	40012c00 	.word	0x40012c00

08001c28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c6e:	f003 fbcb 	bl	8005408 <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c78:	f001 fc94 	bl	80035a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	4619      	mov	r1, r3
 8001c88:	480c      	ldr	r0, [pc, #48]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001c8a:	f003 fdd7 	bl	800583c <HAL_TIM_ConfigClockSource>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c94:	f001 fc86 	bl	80035a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_TIM2_Init+0x94>)
 8001ca6:	f003 ffa9 	bl	8005bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001cb0:	f001 fc78 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000283c 	.word	0x2000283c

08001cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <MX_USART1_UART_Init+0x50>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART1_UART_Init+0x4c>)
 8001cf8:	f003 fff0 	bl	8005cdc <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d02:	f001 fc4f 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200024e4 	.word	0x200024e4
 8001d10:	40013800 	.word	0x40013800

08001d14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <MX_USART3_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d4c:	f003 ffc6 	bl	8005cdc <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f001 fc25 	bl	80035a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200024a4 	.word	0x200024a4
 8001d64:	40004800 	.word	0x40004800

08001d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7c:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a64      	ldr	r2, [pc, #400]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d94:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a5e      	ldr	r2, [pc, #376]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001d9a:	f043 0320 	orr.w	r3, r3, #32
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <MX_GPIO_Init+0x1ac>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 8001de2:	484d      	ldr	r0, [pc, #308]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001de4:	f002 fd11 	bl	800480a <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001de8:	2200      	movs	r2, #0
 8001dea:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8001dee:	484b      	ldr	r0, [pc, #300]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001df0:	f002 fd0b 	bl	800480a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001df4:	2200      	movs	r2, #0
 8001df6:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001dfa:	4849      	ldr	r0, [pc, #292]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001dfc:	f002 fd05 	bl	800480a <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2104      	movs	r1, #4
 8001e04:	4847      	ldr	r0, [pc, #284]	; (8001f24 <MX_GPIO_Init+0x1bc>)
 8001e06:	f002 fd00 	bl	800480a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e10:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <MX_GPIO_Init+0x1c0>)
 8001e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0310 	add.w	r3, r7, #16
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4840      	ldr	r0, [pc, #256]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001e20:	f002 fb58 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e24:	2307      	movs	r3, #7
 8001e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	4619      	mov	r1, r3
 8001e36:	483a      	ldr	r0, [pc, #232]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001e38:	f002 fb4c 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2302      	movs	r3, #2
 8001e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4832      	ldr	r0, [pc, #200]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001e50:	f002 fb40 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001e54:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8001e58:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482a      	ldr	r0, [pc, #168]	; (8001f18 <MX_GPIO_Init+0x1b0>)
 8001e6e:	f002 fb31 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001e72:	2307      	movs	r3, #7
 8001e74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	4619      	mov	r1, r3
 8001e84:	4825      	ldr	r0, [pc, #148]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001e86:	f002 fb25 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001e8a:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8001e8e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481e      	ldr	r0, [pc, #120]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001ea4:	f002 fb16 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ea8:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001eac:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4817      	ldr	r0, [pc, #92]	; (8001f20 <MX_GPIO_Init+0x1b8>)
 8001ec2:	f002 fb07 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	4811      	ldr	r0, [pc, #68]	; (8001f24 <MX_GPIO_Init+0x1bc>)
 8001ede:	f002 faf9 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ee2:	2340      	movs	r3, #64	; 0x40
 8001ee4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <MX_GPIO_Init+0x1b4>)
 8001ef6:	f002 faed 	bl	80044d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001efa:	2200      	movs	r2, #0
 8001efc:	2105      	movs	r1, #5
 8001efe:	2028      	movs	r0, #40	; 0x28
 8001f00:	f002 fabd 	bl	800447e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f04:	2028      	movs	r0, #40	; 0x28
 8001f06:	f002 fad6 	bl	80044b6 <HAL_NVIC_EnableIRQ>

}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010800 	.word	0x40010800
 8001f1c:	40010c00 	.word	0x40010c00
 8001f20:	40011000 	.word	0x40011000
 8001f24:	40011400 	.word	0x40011400
 8001f28:	10110000 	.word	0x10110000

08001f2c <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8001f30:	2014      	movs	r0, #20
 8001f32:	f001 fdbb 	bl	8003aac <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3c:	4868      	ldr	r0, [pc, #416]	; (80020e0 <commandToLCD+0x1b4>)
 8001f3e:	f002 fc64 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f48:	4865      	ldr	r0, [pc, #404]	; (80020e0 <commandToLCD+0x1b4>)
 8001f4a:	f002 fc5e 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f54:	4862      	ldr	r0, [pc, #392]	; (80020e0 <commandToLCD+0x1b4>)
 8001f56:	f002 fc58 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f60:	4860      	ldr	r0, [pc, #384]	; (80020e4 <commandToLCD+0x1b8>)
 8001f62:	f002 fc52 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001f66:	2200      	movs	r2, #0
 8001f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6c:	485d      	ldr	r0, [pc, #372]	; (80020e4 <commandToLCD+0x1b8>)
 8001f6e:	f002 fc4c 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8001f72:	2200      	movs	r2, #0
 8001f74:	2140      	movs	r1, #64	; 0x40
 8001f76:	485b      	ldr	r0, [pc, #364]	; (80020e4 <commandToLCD+0x1b8>)
 8001f78:	f002 fc47 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	2180      	movs	r1, #128	; 0x80
 8001f80:	4858      	ldr	r0, [pc, #352]	; (80020e4 <commandToLCD+0x1b8>)
 8001f82:	f002 fc42 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8001f86:	2201      	movs	r2, #1
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	4857      	ldr	r0, [pc, #348]	; (80020e8 <commandToLCD+0x1bc>)
 8001f8c:	f002 fc3d 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f96:	4854      	ldr	r0, [pc, #336]	; (80020e8 <commandToLCD+0x1bc>)
 8001f98:	f002 fc37 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa2:	4851      	ldr	r0, [pc, #324]	; (80020e8 <commandToLCD+0x1bc>)
 8001fa4:	f002 fc31 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fae:	484e      	ldr	r0, [pc, #312]	; (80020e8 <commandToLCD+0x1bc>)
 8001fb0:	f002 fc2b 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fba:	4849      	ldr	r0, [pc, #292]	; (80020e0 <commandToLCD+0x1b4>)
 8001fbc:	f002 fc25 	bl	800480a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001fc0:	2005      	movs	r0, #5
 8001fc2:	f001 fd73 	bl	8003aac <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fcc:	4844      	ldr	r0, [pc, #272]	; (80020e0 <commandToLCD+0x1b4>)
 8001fce:	f002 fc1c 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd8:	4842      	ldr	r0, [pc, #264]	; (80020e4 <commandToLCD+0x1b8>)
 8001fda:	f002 fc16 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe4:	483f      	ldr	r0, [pc, #252]	; (80020e4 <commandToLCD+0x1b8>)
 8001fe6:	f002 fc10 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8001fea:	2201      	movs	r2, #1
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	483d      	ldr	r0, [pc, #244]	; (80020e4 <commandToLCD+0x1b8>)
 8001ff0:	f002 fc0b 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	483a      	ldr	r0, [pc, #232]	; (80020e4 <commandToLCD+0x1b8>)
 8001ffa:	f002 fc06 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001ffe:	2200      	movs	r2, #0
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	4839      	ldr	r0, [pc, #228]	; (80020e8 <commandToLCD+0x1bc>)
 8002004:	f002 fc01 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200e:	4836      	ldr	r0, [pc, #216]	; (80020e8 <commandToLCD+0x1bc>)
 8002010:	f002 fbfb 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201a:	4833      	ldr	r0, [pc, #204]	; (80020e8 <commandToLCD+0x1bc>)
 800201c:	f002 fbf5 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002026:	4830      	ldr	r0, [pc, #192]	; (80020e8 <commandToLCD+0x1bc>)
 8002028:	f002 fbef 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002032:	482b      	ldr	r0, [pc, #172]	; (80020e0 <commandToLCD+0x1b4>)
 8002034:	f002 fbe9 	bl	800480a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002038:	2005      	movs	r0, #5
 800203a:	f001 fd37 	bl	8003aac <HAL_Delay>


	clear();
 800203e:	f000 f927 	bl	8002290 <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002048:	4825      	ldr	r0, [pc, #148]	; (80020e0 <commandToLCD+0x1b4>)
 800204a:	f002 fbde 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002054:	4823      	ldr	r0, [pc, #140]	; (80020e4 <commandToLCD+0x1b8>)
 8002056:	f002 fbd8 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002060:	4820      	ldr	r0, [pc, #128]	; (80020e4 <commandToLCD+0x1b8>)
 8002062:	f002 fbd2 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8002066:	2201      	movs	r2, #1
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	481e      	ldr	r0, [pc, #120]	; (80020e4 <commandToLCD+0x1b8>)
 800206c:	f002 fbcd 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002070:	2200      	movs	r2, #0
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	481b      	ldr	r0, [pc, #108]	; (80020e4 <commandToLCD+0x1b8>)
 8002076:	f002 fbc8 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800207a:	2200      	movs	r2, #0
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	481a      	ldr	r0, [pc, #104]	; (80020e8 <commandToLCD+0x1bc>)
 8002080:	f002 fbc3 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 7180 	mov.w	r1, #256	; 0x100
 800208a:	4817      	ldr	r0, [pc, #92]	; (80020e8 <commandToLCD+0x1bc>)
 800208c:	f002 fbbd 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002096:	4814      	ldr	r0, [pc, #80]	; (80020e8 <commandToLCD+0x1bc>)
 8002098:	f002 fbb7 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800209c:	2200      	movs	r2, #0
 800209e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a2:	4811      	ldr	r0, [pc, #68]	; (80020e8 <commandToLCD+0x1bc>)
 80020a4:	f002 fbb1 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ae:	480c      	ldr	r0, [pc, #48]	; (80020e0 <commandToLCD+0x1b4>)
 80020b0:	f002 fbab 	bl	800480a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80020b4:	2005      	movs	r0, #5
 80020b6:	f001 fcf9 	bl	8003aac <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <commandToLCD+0x1b4>)
 80020c2:	f002 fba2 	bl	800480a <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 80020c6:	bf00      	nop
 80020c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <commandToLCD+0x1bc>)
 80020ce:	f002 fb85 	bl	80047dc <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d0f7      	beq.n	80020c8 <commandToLCD+0x19c>
	{}
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40010c00 	.word	0x40010c00
 80020e4:	40011000 	.word	0x40011000
 80020e8:	40010800 	.word	0x40010800

080020ec <printPassword>:
void printPassword(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80020f0:	2201      	movs	r2, #1
 80020f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f6:	4813      	ldr	r0, [pc, #76]	; (8002144 <printPassword+0x58>)
 80020f8:	f002 fb87 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80020fc:	2200      	movs	r2, #0
 80020fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002102:	4810      	ldr	r0, [pc, #64]	; (8002144 <printPassword+0x58>)
 8002104:	f002 fb81 	bl	800480a <HAL_GPIO_WritePin>
	letter('P');
 8002108:	2050      	movs	r0, #80	; 0x50
 800210a:	f7fe f821 	bl	8000150 <letter>
	letter('a');
 800210e:	2061      	movs	r0, #97	; 0x61
 8002110:	f7fe f81e 	bl	8000150 <letter>
	letter('s');
 8002114:	2073      	movs	r0, #115	; 0x73
 8002116:	f7fe f81b 	bl	8000150 <letter>
	letter('s');
 800211a:	2073      	movs	r0, #115	; 0x73
 800211c:	f7fe f818 	bl	8000150 <letter>
	letter('w');
 8002120:	2077      	movs	r0, #119	; 0x77
 8002122:	f7fe f815 	bl	8000150 <letter>
	letter('o');
 8002126:	206f      	movs	r0, #111	; 0x6f
 8002128:	f7fe f812 	bl	8000150 <letter>
	letter('r');
 800212c:	2072      	movs	r0, #114	; 0x72
 800212e:	f7fe f80f 	bl	8000150 <letter>
	letter('d');
 8002132:	2064      	movs	r0, #100	; 0x64
 8002134:	f7fe f80c 	bl	8000150 <letter>
	letter(':');
 8002138:	203a      	movs	r0, #58	; 0x3a
 800213a:	f7fe f809 	bl	8000150 <letter>
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40010c00 	.word	0x40010c00

08002148 <line1>:
void line1(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 800214c:	2200      	movs	r2, #0
 800214e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002152:	4823      	ldr	r0, [pc, #140]	; (80021e0 <line1+0x98>)
 8002154:	f002 fb59 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800215e:	4820      	ldr	r0, [pc, #128]	; (80021e0 <line1+0x98>)
 8002160:	f002 fb53 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002164:	2201      	movs	r2, #1
 8002166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216a:	481d      	ldr	r0, [pc, #116]	; (80021e0 <line1+0x98>)
 800216c:	f002 fb4d 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 8002170:	2200      	movs	r2, #0
 8002172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002176:	481b      	ldr	r0, [pc, #108]	; (80021e4 <line1+0x9c>)
 8002178:	f002 fb47 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002182:	4818      	ldr	r0, [pc, #96]	; (80021e4 <line1+0x9c>)
 8002184:	f002 fb41 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002188:	2200      	movs	r2, #0
 800218a:	2140      	movs	r1, #64	; 0x40
 800218c:	4815      	ldr	r0, [pc, #84]	; (80021e4 <line1+0x9c>)
 800218e:	f002 fb3c 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002192:	2200      	movs	r2, #0
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	4813      	ldr	r0, [pc, #76]	; (80021e4 <line1+0x9c>)
 8002198:	f002 fb37 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800219c:	2200      	movs	r2, #0
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	4811      	ldr	r0, [pc, #68]	; (80021e8 <line1+0xa0>)
 80021a2:	f002 fb32 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ac:	480e      	ldr	r0, [pc, #56]	; (80021e8 <line1+0xa0>)
 80021ae:	f002 fb2c 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80021b2:	2200      	movs	r2, #0
 80021b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <line1+0xa0>)
 80021ba:	f002 fb26 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c4:	4808      	ldr	r0, [pc, #32]	; (80021e8 <line1+0xa0>)
 80021c6:	f002 fb20 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d0:	4803      	ldr	r0, [pc, #12]	; (80021e0 <line1+0x98>)
 80021d2:	f002 fb1a 	bl	800480a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80021d6:	2005      	movs	r0, #5
 80021d8:	f001 fc68 	bl	8003aac <HAL_Delay>
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40010800 	.word	0x40010800

080021ec <line2>:
void line2(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 80021f0:	2200      	movs	r2, #0
 80021f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f6:	4823      	ldr	r0, [pc, #140]	; (8002284 <line2+0x98>)
 80021f8:	f002 fb07 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002202:	4820      	ldr	r0, [pc, #128]	; (8002284 <line2+0x98>)
 8002204:	f002 fb01 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002208:	2201      	movs	r2, #1
 800220a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220e:	481d      	ldr	r0, [pc, #116]	; (8002284 <line2+0x98>)
 8002210:	f002 fafb 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800221a:	481b      	ldr	r0, [pc, #108]	; (8002288 <line2+0x9c>)
 800221c:	f002 faf5 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002220:	2200      	movs	r2, #0
 8002222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002226:	4818      	ldr	r0, [pc, #96]	; (8002288 <line2+0x9c>)
 8002228:	f002 faef 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800222c:	2200      	movs	r2, #0
 800222e:	2140      	movs	r1, #64	; 0x40
 8002230:	4815      	ldr	r0, [pc, #84]	; (8002288 <line2+0x9c>)
 8002232:	f002 faea 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002236:	2200      	movs	r2, #0
 8002238:	2180      	movs	r1, #128	; 0x80
 800223a:	4813      	ldr	r0, [pc, #76]	; (8002288 <line2+0x9c>)
 800223c:	f002 fae5 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002240:	2200      	movs	r2, #0
 8002242:	2180      	movs	r1, #128	; 0x80
 8002244:	4811      	ldr	r0, [pc, #68]	; (800228c <line2+0xa0>)
 8002246:	f002 fae0 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002250:	480e      	ldr	r0, [pc, #56]	; (800228c <line2+0xa0>)
 8002252:	f002 fada 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002256:	2201      	movs	r2, #1
 8002258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800225c:	480b      	ldr	r0, [pc, #44]	; (800228c <line2+0xa0>)
 800225e:	f002 fad4 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 8002262:	2201      	movs	r2, #1
 8002264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <line2+0xa0>)
 800226a:	f002 face 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <line2+0x98>)
 8002276:	f002 fac8 	bl	800480a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800227a:	2005      	movs	r0, #5
 800227c:	f001 fc16 	bl	8003aac <HAL_Delay>
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40010c00 	.word	0x40010c00
 8002288:	40011000 	.word	0x40011000
 800228c:	40010800 	.word	0x40010800

08002290 <clear>:
void clear()
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002294:	2200      	movs	r2, #0
 8002296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800229a:	4823      	ldr	r0, [pc, #140]	; (8002328 <clear+0x98>)
 800229c:	f002 fab5 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80022a0:	2200      	movs	r2, #0
 80022a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a6:	4820      	ldr	r0, [pc, #128]	; (8002328 <clear+0x98>)
 80022a8:	f002 faaf 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80022ac:	2201      	movs	r2, #1
 80022ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022b2:	481d      	ldr	r0, [pc, #116]	; (8002328 <clear+0x98>)
 80022b4:	f002 faa9 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022be:	481b      	ldr	r0, [pc, #108]	; (800232c <clear+0x9c>)
 80022c0:	f002 faa3 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80022c4:	2200      	movs	r2, #0
 80022c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ca:	4818      	ldr	r0, [pc, #96]	; (800232c <clear+0x9c>)
 80022cc:	f002 fa9d 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80022d0:	2200      	movs	r2, #0
 80022d2:	2140      	movs	r1, #64	; 0x40
 80022d4:	4815      	ldr	r0, [pc, #84]	; (800232c <clear+0x9c>)
 80022d6:	f002 fa98 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80022da:	2200      	movs	r2, #0
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	4813      	ldr	r0, [pc, #76]	; (800232c <clear+0x9c>)
 80022e0:	f002 fa93 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80022e4:	2200      	movs	r2, #0
 80022e6:	2180      	movs	r1, #128	; 0x80
 80022e8:	4811      	ldr	r0, [pc, #68]	; (8002330 <clear+0xa0>)
 80022ea:	f002 fa8e 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <clear+0xa0>)
 80022f6:	f002 fa88 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <clear+0xa0>)
 8002302:	f002 fa82 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230c:	4808      	ldr	r0, [pc, #32]	; (8002330 <clear+0xa0>)
 800230e:	f002 fa7c 	bl	800480a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <clear+0x98>)
 800231a:	f002 fa76 	bl	800480a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800231e:	2005      	movs	r0, #5
 8002320:	f001 fbc4 	bl	8003aac <HAL_Delay>
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40010c00 	.word	0x40010c00
 800232c:	40011000 	.word	0x40011000
 8002330:	40010800 	.word	0x40010800

08002334 <correct>:
void correct()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002338:	2201      	movs	r2, #1
 800233a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800233e:	4811      	ldr	r0, [pc, #68]	; (8002384 <correct+0x50>)
 8002340:	f002 fa63 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800234a:	480e      	ldr	r0, [pc, #56]	; (8002384 <correct+0x50>)
 800234c:	f002 fa5d 	bl	800480a <HAL_GPIO_WritePin>
	letter('C');
 8002350:	2043      	movs	r0, #67	; 0x43
 8002352:	f7fd fefd 	bl	8000150 <letter>
	letter('o');
 8002356:	206f      	movs	r0, #111	; 0x6f
 8002358:	f7fd fefa 	bl	8000150 <letter>
	letter('r');
 800235c:	2072      	movs	r0, #114	; 0x72
 800235e:	f7fd fef7 	bl	8000150 <letter>
	letter('r');
 8002362:	2072      	movs	r0, #114	; 0x72
 8002364:	f7fd fef4 	bl	8000150 <letter>
	letter('e');
 8002368:	2065      	movs	r0, #101	; 0x65
 800236a:	f7fd fef1 	bl	8000150 <letter>
	letter('c');
 800236e:	2063      	movs	r0, #99	; 0x63
 8002370:	f7fd feee 	bl	8000150 <letter>
	letter('t');
 8002374:	2074      	movs	r0, #116	; 0x74
 8002376:	f7fd feeb 	bl	8000150 <letter>
	letter('!');
 800237a:	2021      	movs	r0, #33	; 0x21
 800237c:	f7fd fee8 	bl	8000150 <letter>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40010c00 	.word	0x40010c00

08002388 <getVal>:
int getVal(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	int count = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
	int val=0;
 8002392:	2300      	movs	r3, #0
 8002394:	603b      	str	r3, [r7, #0]
	while(count<1)
 8002396:	e165      	b.n	8002664 <getVal+0x2dc>
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 8002398:	2201      	movs	r2, #1
 800239a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239e:	48b6      	ldr	r0, [pc, #728]	; (8002678 <getVal+0x2f0>)
 80023a0:	f002 fa33 	bl	800480a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80023a4:	2104      	movs	r1, #4
 80023a6:	48b5      	ldr	r0, [pc, #724]	; (800267c <getVal+0x2f4>)
 80023a8:	f002 fa18 	bl	80047dc <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d112      	bne.n	80023d8 <getVal+0x50>
	  {
		  letter('1');
 80023b2:	2031      	movs	r0, #49	; 0x31
 80023b4:	f7fd fecc 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80023b8:	bf00      	nop
 80023ba:	2104      	movs	r1, #4
 80023bc:	48af      	ldr	r0, [pc, #700]	; (800267c <getVal+0x2f4>)
 80023be:	f002 fa0d 	bl	80047dc <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d0f8      	beq.n	80023ba <getVal+0x32>
		  {}
		  HAL_Delay(100);
 80023c8:	2064      	movs	r0, #100	; 0x64
 80023ca:	f001 fb6f 	bl	8003aac <HAL_Delay>
		  val = 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	603b      	str	r3, [r7, #0]
		  count++;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3301      	adds	r3, #1
 80023d6:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80023d8:	2102      	movs	r1, #2
 80023da:	48a8      	ldr	r0, [pc, #672]	; (800267c <getVal+0x2f4>)
 80023dc:	f002 f9fe 	bl	80047dc <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d112      	bne.n	800240c <getVal+0x84>
	  {
		  letter('2');
 80023e6:	2032      	movs	r0, #50	; 0x32
 80023e8:	f7fd feb2 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80023ec:	bf00      	nop
 80023ee:	2102      	movs	r1, #2
 80023f0:	48a2      	ldr	r0, [pc, #648]	; (800267c <getVal+0x2f4>)
 80023f2:	f002 f9f3 	bl	80047dc <HAL_GPIO_ReadPin>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d0f8      	beq.n	80023ee <getVal+0x66>
		  {}
		  HAL_Delay(100);
 80023fc:	2064      	movs	r0, #100	; 0x64
 80023fe:	f001 fb55 	bl	8003aac <HAL_Delay>
		  val = 2;
 8002402:	2302      	movs	r3, #2
 8002404:	603b      	str	r3, [r7, #0]
		  count++;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3301      	adds	r3, #1
 800240a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800240c:	2101      	movs	r1, #1
 800240e:	489b      	ldr	r0, [pc, #620]	; (800267c <getVal+0x2f4>)
 8002410:	f002 f9e4 	bl	80047dc <HAL_GPIO_ReadPin>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	d112      	bne.n	8002440 <getVal+0xb8>
	  {
		  letter('3');
 800241a:	2033      	movs	r0, #51	; 0x33
 800241c:	f7fd fe98 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002420:	bf00      	nop
 8002422:	2101      	movs	r1, #1
 8002424:	4895      	ldr	r0, [pc, #596]	; (800267c <getVal+0x2f4>)
 8002426:	f002 f9d9 	bl	80047dc <HAL_GPIO_ReadPin>
 800242a:	4603      	mov	r3, r0
 800242c:	2b01      	cmp	r3, #1
 800242e:	d0f8      	beq.n	8002422 <getVal+0x9a>
		  {}
		  HAL_Delay(100);
 8002430:	2064      	movs	r0, #100	; 0x64
 8002432:	f001 fb3b 	bl	8003aac <HAL_Delay>
		  val = 3;
 8002436:	2303      	movs	r3, #3
 8002438:	603b      	str	r3, [r7, #0]
		  count++;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	607b      	str	r3, [r7, #4]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002446:	488c      	ldr	r0, [pc, #560]	; (8002678 <getVal+0x2f0>)
 8002448:	f002 f9df 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 800244c:	2201      	movs	r2, #1
 800244e:	2104      	movs	r1, #4
 8002450:	488b      	ldr	r0, [pc, #556]	; (8002680 <getVal+0x2f8>)
 8002452:	f002 f9da 	bl	800480a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002456:	2104      	movs	r1, #4
 8002458:	4888      	ldr	r0, [pc, #544]	; (800267c <getVal+0x2f4>)
 800245a:	f002 f9bf 	bl	80047dc <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
 8002460:	2b01      	cmp	r3, #1
 8002462:	d112      	bne.n	800248a <getVal+0x102>
	  {
		  letter('4');
 8002464:	2034      	movs	r0, #52	; 0x34
 8002466:	f7fd fe73 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800246a:	bf00      	nop
 800246c:	2104      	movs	r1, #4
 800246e:	4883      	ldr	r0, [pc, #524]	; (800267c <getVal+0x2f4>)
 8002470:	f002 f9b4 	bl	80047dc <HAL_GPIO_ReadPin>
 8002474:	4603      	mov	r3, r0
 8002476:	2b01      	cmp	r3, #1
 8002478:	d0f8      	beq.n	800246c <getVal+0xe4>
		  {}
		  HAL_Delay(100);
 800247a:	2064      	movs	r0, #100	; 0x64
 800247c:	f001 fb16 	bl	8003aac <HAL_Delay>
		  val = 4;
 8002480:	2304      	movs	r3, #4
 8002482:	603b      	str	r3, [r7, #0]
		  count++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3301      	adds	r3, #1
 8002488:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800248a:	2102      	movs	r1, #2
 800248c:	487b      	ldr	r0, [pc, #492]	; (800267c <getVal+0x2f4>)
 800248e:	f002 f9a5 	bl	80047dc <HAL_GPIO_ReadPin>
 8002492:	4603      	mov	r3, r0
 8002494:	2b01      	cmp	r3, #1
 8002496:	d112      	bne.n	80024be <getVal+0x136>
	  {
		  letter('5');
 8002498:	2035      	movs	r0, #53	; 0x35
 800249a:	f7fd fe59 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800249e:	bf00      	nop
 80024a0:	2102      	movs	r1, #2
 80024a2:	4876      	ldr	r0, [pc, #472]	; (800267c <getVal+0x2f4>)
 80024a4:	f002 f99a 	bl	80047dc <HAL_GPIO_ReadPin>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d0f8      	beq.n	80024a0 <getVal+0x118>
		  {}
		  HAL_Delay(100);
 80024ae:	2064      	movs	r0, #100	; 0x64
 80024b0:	f001 fafc 	bl	8003aac <HAL_Delay>
		  val = 5;
 80024b4:	2305      	movs	r3, #5
 80024b6:	603b      	str	r3, [r7, #0]
		  count++;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3301      	adds	r3, #1
 80024bc:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80024be:	2101      	movs	r1, #1
 80024c0:	486e      	ldr	r0, [pc, #440]	; (800267c <getVal+0x2f4>)
 80024c2:	f002 f98b 	bl	80047dc <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d112      	bne.n	80024f2 <getVal+0x16a>
	  {
		  letter('6');
 80024cc:	2036      	movs	r0, #54	; 0x36
 80024ce:	f7fd fe3f 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80024d2:	bf00      	nop
 80024d4:	2101      	movs	r1, #1
 80024d6:	4869      	ldr	r0, [pc, #420]	; (800267c <getVal+0x2f4>)
 80024d8:	f002 f980 	bl	80047dc <HAL_GPIO_ReadPin>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d0f8      	beq.n	80024d4 <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 80024e2:	2064      	movs	r0, #100	; 0x64
 80024e4:	f001 fae2 	bl	8003aac <HAL_Delay>
		  val = 6;
 80024e8:	2306      	movs	r3, #6
 80024ea:	603b      	str	r3, [r7, #0]
		  count++;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3301      	adds	r3, #1
 80024f0:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 80024f2:	2200      	movs	r2, #0
 80024f4:	2104      	movs	r1, #4
 80024f6:	4862      	ldr	r0, [pc, #392]	; (8002680 <getVal+0x2f8>)
 80024f8:	f002 f987 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 80024fc:	2201      	movs	r2, #1
 80024fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002502:	485d      	ldr	r0, [pc, #372]	; (8002678 <getVal+0x2f0>)
 8002504:	f002 f981 	bl	800480a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002508:	2104      	movs	r1, #4
 800250a:	485c      	ldr	r0, [pc, #368]	; (800267c <getVal+0x2f4>)
 800250c:	f002 f966 	bl	80047dc <HAL_GPIO_ReadPin>
 8002510:	4603      	mov	r3, r0
 8002512:	2b01      	cmp	r3, #1
 8002514:	d112      	bne.n	800253c <getVal+0x1b4>
	  {
		  letter('7');
 8002516:	2037      	movs	r0, #55	; 0x37
 8002518:	f7fd fe1a 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800251c:	bf00      	nop
 800251e:	2104      	movs	r1, #4
 8002520:	4856      	ldr	r0, [pc, #344]	; (800267c <getVal+0x2f4>)
 8002522:	f002 f95b 	bl	80047dc <HAL_GPIO_ReadPin>
 8002526:	4603      	mov	r3, r0
 8002528:	2b01      	cmp	r3, #1
 800252a:	d0f8      	beq.n	800251e <getVal+0x196>
		  {}
		  HAL_Delay(100);
 800252c:	2064      	movs	r0, #100	; 0x64
 800252e:	f001 fabd 	bl	8003aac <HAL_Delay>
		  val = 7;
 8002532:	2307      	movs	r3, #7
 8002534:	603b      	str	r3, [r7, #0]
		  count++;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3301      	adds	r3, #1
 800253a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800253c:	2102      	movs	r1, #2
 800253e:	484f      	ldr	r0, [pc, #316]	; (800267c <getVal+0x2f4>)
 8002540:	f002 f94c 	bl	80047dc <HAL_GPIO_ReadPin>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d112      	bne.n	8002570 <getVal+0x1e8>
	  {
		  letter('8');
 800254a:	2038      	movs	r0, #56	; 0x38
 800254c:	f7fd fe00 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002550:	bf00      	nop
 8002552:	2102      	movs	r1, #2
 8002554:	4849      	ldr	r0, [pc, #292]	; (800267c <getVal+0x2f4>)
 8002556:	f002 f941 	bl	80047dc <HAL_GPIO_ReadPin>
 800255a:	4603      	mov	r3, r0
 800255c:	2b01      	cmp	r3, #1
 800255e:	d0f8      	beq.n	8002552 <getVal+0x1ca>
		  {}
		  HAL_Delay(100);
 8002560:	2064      	movs	r0, #100	; 0x64
 8002562:	f001 faa3 	bl	8003aac <HAL_Delay>
		  val = 8;
 8002566:	2308      	movs	r3, #8
 8002568:	603b      	str	r3, [r7, #0]
		  count++;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3301      	adds	r3, #1
 800256e:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002570:	2101      	movs	r1, #1
 8002572:	4842      	ldr	r0, [pc, #264]	; (800267c <getVal+0x2f4>)
 8002574:	f002 f932 	bl	80047dc <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d112      	bne.n	80025a4 <getVal+0x21c>
	  {
		  letter('9');
 800257e:	2039      	movs	r0, #57	; 0x39
 8002580:	f7fd fde6 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002584:	bf00      	nop
 8002586:	2101      	movs	r1, #1
 8002588:	483c      	ldr	r0, [pc, #240]	; (800267c <getVal+0x2f4>)
 800258a:	f002 f927 	bl	80047dc <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d0f8      	beq.n	8002586 <getVal+0x1fe>
		  {}
		  HAL_Delay(100);
 8002594:	2064      	movs	r0, #100	; 0x64
 8002596:	f001 fa89 	bl	8003aac <HAL_Delay>
		  val = 9;
 800259a:	2309      	movs	r3, #9
 800259c:	603b      	str	r3, [r7, #0]
		  count++;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3301      	adds	r3, #1
 80025a2:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025aa:	4833      	ldr	r0, [pc, #204]	; (8002678 <getVal+0x2f0>)
 80025ac:	f002 f92d 	bl	800480a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 80025b0:	2201      	movs	r2, #1
 80025b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b6:	4830      	ldr	r0, [pc, #192]	; (8002678 <getVal+0x2f0>)
 80025b8:	f002 f927 	bl	800480a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80025bc:	2104      	movs	r1, #4
 80025be:	482f      	ldr	r0, [pc, #188]	; (800267c <getVal+0x2f4>)
 80025c0:	f002 f90c 	bl	80047dc <HAL_GPIO_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d112      	bne.n	80025f0 <getVal+0x268>
	  {
		  letter('*');
 80025ca:	202a      	movs	r0, #42	; 0x2a
 80025cc:	f7fd fdc0 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80025d0:	bf00      	nop
 80025d2:	2104      	movs	r1, #4
 80025d4:	4829      	ldr	r0, [pc, #164]	; (800267c <getVal+0x2f4>)
 80025d6:	f002 f901 	bl	80047dc <HAL_GPIO_ReadPin>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d0f8      	beq.n	80025d2 <getVal+0x24a>
		  {}
		  HAL_Delay(100);
 80025e0:	2064      	movs	r0, #100	; 0x64
 80025e2:	f001 fa63 	bl	8003aac <HAL_Delay>
		  val = 10;
 80025e6:	230a      	movs	r3, #10
 80025e8:	603b      	str	r3, [r7, #0]
		  count++;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3301      	adds	r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80025f0:	2102      	movs	r1, #2
 80025f2:	4822      	ldr	r0, [pc, #136]	; (800267c <getVal+0x2f4>)
 80025f4:	f002 f8f2 	bl	80047dc <HAL_GPIO_ReadPin>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d112      	bne.n	8002624 <getVal+0x29c>
	  {
		  letter('0');
 80025fe:	2030      	movs	r0, #48	; 0x30
 8002600:	f7fd fda6 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002604:	bf00      	nop
 8002606:	2102      	movs	r1, #2
 8002608:	481c      	ldr	r0, [pc, #112]	; (800267c <getVal+0x2f4>)
 800260a:	f002 f8e7 	bl	80047dc <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	d0f8      	beq.n	8002606 <getVal+0x27e>
		  {}
		  HAL_Delay(100);
 8002614:	2064      	movs	r0, #100	; 0x64
 8002616:	f001 fa49 	bl	8003aac <HAL_Delay>
		  val = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
		  count++;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3301      	adds	r3, #1
 8002622:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002624:	2101      	movs	r1, #1
 8002626:	4815      	ldr	r0, [pc, #84]	; (800267c <getVal+0x2f4>)
 8002628:	f002 f8d8 	bl	80047dc <HAL_GPIO_ReadPin>
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	d112      	bne.n	8002658 <getVal+0x2d0>
	  {
		  letter('#');
 8002632:	2023      	movs	r0, #35	; 0x23
 8002634:	f7fd fd8c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002638:	bf00      	nop
 800263a:	2101      	movs	r1, #1
 800263c:	480f      	ldr	r0, [pc, #60]	; (800267c <getVal+0x2f4>)
 800263e:	f002 f8cd 	bl	80047dc <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	2b01      	cmp	r3, #1
 8002646:	d0f8      	beq.n	800263a <getVal+0x2b2>
		  {}
		  HAL_Delay(100);
 8002648:	2064      	movs	r0, #100	; 0x64
 800264a:	f001 fa2f 	bl	8003aac <HAL_Delay>
		  val = 11;
 800264e:	230b      	movs	r3, #11
 8002650:	603b      	str	r3, [r7, #0]
		  count++;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3301      	adds	r3, #1
 8002656:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 8002658:	2200      	movs	r2, #0
 800265a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265e:	4806      	ldr	r0, [pc, #24]	; (8002678 <getVal+0x2f0>)
 8002660:	f002 f8d3 	bl	800480a <HAL_GPIO_WritePin>
	while(count<1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f77f ae96 	ble.w	8002398 <getVal+0x10>
	}
	return val;
 800266c:	683b      	ldr	r3, [r7, #0]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40011000 	.word	0x40011000
 800267c:	40010c00 	.word	0x40010c00
 8002680:	40011400 	.word	0x40011400

08002684 <wrongPass>:
void wrongPass(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268e:	481a      	ldr	r0, [pc, #104]	; (80026f8 <wrongPass+0x74>)
 8002690:	f002 f8bb 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800269a:	4817      	ldr	r0, [pc, #92]	; (80026f8 <wrongPass+0x74>)
 800269c:	f002 f8b5 	bl	800480a <HAL_GPIO_WritePin>
	letter('W');
 80026a0:	2057      	movs	r0, #87	; 0x57
 80026a2:	f7fd fd55 	bl	8000150 <letter>
	letter('r');
 80026a6:	2072      	movs	r0, #114	; 0x72
 80026a8:	f7fd fd52 	bl	8000150 <letter>
	letter('o');
 80026ac:	206f      	movs	r0, #111	; 0x6f
 80026ae:	f7fd fd4f 	bl	8000150 <letter>
	letter('n');
 80026b2:	206e      	movs	r0, #110	; 0x6e
 80026b4:	f7fd fd4c 	bl	8000150 <letter>
	letter('g');
 80026b8:	2067      	movs	r0, #103	; 0x67
 80026ba:	f7fd fd49 	bl	8000150 <letter>
	letter(' ');
 80026be:	2020      	movs	r0, #32
 80026c0:	f7fd fd46 	bl	8000150 <letter>
	letter('P');
 80026c4:	2050      	movs	r0, #80	; 0x50
 80026c6:	f7fd fd43 	bl	8000150 <letter>
	letter('a');
 80026ca:	2061      	movs	r0, #97	; 0x61
 80026cc:	f7fd fd40 	bl	8000150 <letter>
	letter('s');
 80026d0:	2073      	movs	r0, #115	; 0x73
 80026d2:	f7fd fd3d 	bl	8000150 <letter>
	letter('s');
 80026d6:	2073      	movs	r0, #115	; 0x73
 80026d8:	f7fd fd3a 	bl	8000150 <letter>
	letter('w');
 80026dc:	2077      	movs	r0, #119	; 0x77
 80026de:	f7fd fd37 	bl	8000150 <letter>
	letter('o');
 80026e2:	206f      	movs	r0, #111	; 0x6f
 80026e4:	f7fd fd34 	bl	8000150 <letter>
	letter('r');
 80026e8:	2072      	movs	r0, #114	; 0x72
 80026ea:	f7fd fd31 	bl	8000150 <letter>
	letter('d');
 80026ee:	2064      	movs	r0, #100	; 0x64
 80026f0:	f7fd fd2e 	bl	8000150 <letter>
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40010c00 	.word	0x40010c00

080026fc <green>:
void green(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002700:	2201      	movs	r2, #1
 8002702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002706:	4814      	ldr	r0, [pc, #80]	; (8002758 <green+0x5c>)
 8002708:	f002 f87f 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800270c:	2200      	movs	r2, #0
 800270e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002712:	4811      	ldr	r0, [pc, #68]	; (8002758 <green+0x5c>)
 8002714:	f002 f879 	bl	800480a <HAL_GPIO_WritePin>
	letter('G');
 8002718:	2047      	movs	r0, #71	; 0x47
 800271a:	f7fd fd19 	bl	8000150 <letter>
	letter('r');
 800271e:	2072      	movs	r0, #114	; 0x72
 8002720:	f7fd fd16 	bl	8000150 <letter>
	letter('e');
 8002724:	2065      	movs	r0, #101	; 0x65
 8002726:	f7fd fd13 	bl	8000150 <letter>
	letter('e');
 800272a:	2065      	movs	r0, #101	; 0x65
 800272c:	f7fd fd10 	bl	8000150 <letter>
	letter('n');
 8002730:	206e      	movs	r0, #110	; 0x6e
 8002732:	f7fd fd0d 	bl	8000150 <letter>
	letter(' ');
 8002736:	2020      	movs	r0, #32
 8002738:	f7fd fd0a 	bl	8000150 <letter>
	letter('1');
 800273c:	2031      	movs	r0, #49	; 0x31
 800273e:	f7fd fd07 	bl	8000150 <letter>
	letter('-');
 8002742:	202d      	movs	r0, #45	; 0x2d
 8002744:	f7fd fd04 	bl	8000150 <letter>
	letter('3');
 8002748:	2033      	movs	r0, #51	; 0x33
 800274a:	f7fd fd01 	bl	8000150 <letter>
	letter(':');
 800274e:	203a      	movs	r0, #58	; 0x3a
 8002750:	f7fd fcfe 	bl	8000150 <letter>

}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40010c00 	.word	0x40010c00

0800275c <timer>:

void timer(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002760:	2201      	movs	r2, #1
 8002762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002766:	481a      	ldr	r0, [pc, #104]	; (80027d0 <timer+0x74>)
 8002768:	f002 f84f 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002772:	4817      	ldr	r0, [pc, #92]	; (80027d0 <timer+0x74>)
 8002774:	f002 f849 	bl	800480a <HAL_GPIO_WritePin>

	letter('T');
 8002778:	2054      	movs	r0, #84	; 0x54
 800277a:	f7fd fce9 	bl	8000150 <letter>
	letter('i');
 800277e:	2069      	movs	r0, #105	; 0x69
 8002780:	f7fd fce6 	bl	8000150 <letter>
	letter('m');
 8002784:	206d      	movs	r0, #109	; 0x6d
 8002786:	f7fd fce3 	bl	8000150 <letter>
	letter('e');
 800278a:	2065      	movs	r0, #101	; 0x65
 800278c:	f7fd fce0 	bl	8000150 <letter>
	letter(' ');
 8002790:	2020      	movs	r0, #32
 8002792:	f7fd fcdd 	bl	8000150 <letter>
	letter('0');
 8002796:	2030      	movs	r0, #48	; 0x30
 8002798:	f7fd fcda 	bl	8000150 <letter>
	letter('0');
 800279c:	2030      	movs	r0, #48	; 0x30
 800279e:	f7fd fcd7 	bl	8000150 <letter>
	letter('-');
 80027a2:	202d      	movs	r0, #45	; 0x2d
 80027a4:	f7fd fcd4 	bl	8000150 <letter>
	letter('6');
 80027a8:	2036      	movs	r0, #54	; 0x36
 80027aa:	f7fd fcd1 	bl	8000150 <letter>
	letter('0');
 80027ae:	2030      	movs	r0, #48	; 0x30
 80027b0:	f7fd fcce 	bl	8000150 <letter>
	letter('m');
 80027b4:	206d      	movs	r0, #109	; 0x6d
 80027b6:	f7fd fccb 	bl	8000150 <letter>
	letter('i');
 80027ba:	2069      	movs	r0, #105	; 0x69
 80027bc:	f7fd fcc8 	bl	8000150 <letter>
	letter('n');
 80027c0:	206e      	movs	r0, #110	; 0x6e
 80027c2:	f7fd fcc5 	bl	8000150 <letter>
	letter(':');
 80027c6:	203a      	movs	r0, #58	; 0x3a
 80027c8:	f7fd fcc2 	bl	8000150 <letter>

}
 80027cc:	bf00      	nop
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40010c00 	.word	0x40010c00

080027d4 <quit>:

void quit(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80027d8:	2201      	movs	r2, #1
 80027da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027de:	481d      	ldr	r0, [pc, #116]	; (8002854 <quit+0x80>)
 80027e0:	f002 f813 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027ea:	481a      	ldr	r0, [pc, #104]	; (8002854 <quit+0x80>)
 80027ec:	f002 f80d 	bl	800480a <HAL_GPIO_WritePin>

	letter('Q');
 80027f0:	2051      	movs	r0, #81	; 0x51
 80027f2:	f7fd fcad 	bl	8000150 <letter>
	letter('u');
 80027f6:	2075      	movs	r0, #117	; 0x75
 80027f8:	f7fd fcaa 	bl	8000150 <letter>
	letter('i');
 80027fc:	2069      	movs	r0, #105	; 0x69
 80027fe:	f7fd fca7 	bl	8000150 <letter>
	letter('t');
 8002802:	2074      	movs	r0, #116	; 0x74
 8002804:	f7fd fca4 	bl	8000150 <letter>
	letter('?');
 8002808:	203f      	movs	r0, #63	; 0x3f
 800280a:	f7fd fca1 	bl	8000150 <letter>
	letter(' ');
 800280e:	2020      	movs	r0, #32
 8002810:	f7fd fc9e 	bl	8000150 <letter>
	letter('y');
 8002814:	2079      	movs	r0, #121	; 0x79
 8002816:	f7fd fc9b 	bl	8000150 <letter>
	letter('e');
 800281a:	2065      	movs	r0, #101	; 0x65
 800281c:	f7fd fc98 	bl	8000150 <letter>
	letter('s');
 8002820:	2073      	movs	r0, #115	; 0x73
 8002822:	f7fd fc95 	bl	8000150 <letter>
	letter('-');
 8002826:	202d      	movs	r0, #45	; 0x2d
 8002828:	f7fd fc92 	bl	8000150 <letter>
	letter('1');
 800282c:	2031      	movs	r0, #49	; 0x31
 800282e:	f7fd fc8f 	bl	8000150 <letter>
	letter(' ');
 8002832:	2020      	movs	r0, #32
 8002834:	f7fd fc8c 	bl	8000150 <letter>
	letter('n');
 8002838:	206e      	movs	r0, #110	; 0x6e
 800283a:	f7fd fc89 	bl	8000150 <letter>
	letter('o');
 800283e:	206f      	movs	r0, #111	; 0x6f
 8002840:	f7fd fc86 	bl	8000150 <letter>
	letter('-');
 8002844:	202d      	movs	r0, #45	; 0x2d
 8002846:	f7fd fc83 	bl	8000150 <letter>
	letter('0');
 800284a:	2030      	movs	r0, #48	; 0x30
 800284c:	f7fd fc80 	bl	8000150 <letter>
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40010c00 	.word	0x40010c00

08002858 <onOffTime>:
void onOffTime(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800285c:	2201      	movs	r2, #1
 800285e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002862:	481e      	ldr	r0, [pc, #120]	; (80028dc <onOffTime+0x84>)
 8002864:	f001 ffd1 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800286e:	481b      	ldr	r0, [pc, #108]	; (80028dc <onOffTime+0x84>)
 8002870:	f001 ffcb 	bl	800480a <HAL_GPIO_WritePin>
	letter('0');
 8002874:	2030      	movs	r0, #48	; 0x30
 8002876:	f7fd fc6b 	bl	8000150 <letter>
	letter('-');
 800287a:	202d      	movs	r0, #45	; 0x2d
 800287c:	f7fd fc68 	bl	8000150 <letter>
	letter('O');
 8002880:	204f      	movs	r0, #79	; 0x4f
 8002882:	f7fd fc65 	bl	8000150 <letter>
	letter('n');
 8002886:	206e      	movs	r0, #110	; 0x6e
 8002888:	f7fd fc62 	bl	8000150 <letter>
	letter('/');
 800288c:	202f      	movs	r0, #47	; 0x2f
 800288e:	f7fd fc5f 	bl	8000150 <letter>
	letter('O');
 8002892:	204f      	movs	r0, #79	; 0x4f
 8002894:	f7fd fc5c 	bl	8000150 <letter>
	letter('f');
 8002898:	2066      	movs	r0, #102	; 0x66
 800289a:	f7fd fc59 	bl	8000150 <letter>
	letter('f');
 800289e:	2066      	movs	r0, #102	; 0x66
 80028a0:	f7fd fc56 	bl	8000150 <letter>
	letter(' ');
 80028a4:	2020      	movs	r0, #32
 80028a6:	f7fd fc53 	bl	8000150 <letter>
	letter('1');
 80028aa:	2031      	movs	r0, #49	; 0x31
 80028ac:	f7fd fc50 	bl	8000150 <letter>
	letter('-');
 80028b0:	202d      	movs	r0, #45	; 0x2d
 80028b2:	f7fd fc4d 	bl	8000150 <letter>
	letter('T');
 80028b6:	2054      	movs	r0, #84	; 0x54
 80028b8:	f7fd fc4a 	bl	8000150 <letter>
	letter('i');
 80028bc:	2069      	movs	r0, #105	; 0x69
 80028be:	f7fd fc47 	bl	8000150 <letter>
	letter('m');
 80028c2:	206d      	movs	r0, #109	; 0x6d
 80028c4:	f7fd fc44 	bl	8000150 <letter>
	letter('e');
 80028c8:	2065      	movs	r0, #101	; 0x65
 80028ca:	f7fd fc41 	bl	8000150 <letter>
	letter('r');
 80028ce:	2072      	movs	r0, #114	; 0x72
 80028d0:	f7fd fc3e 	bl	8000150 <letter>
	line2();
 80028d4:	f7ff fc8a 	bl	80021ec <line2>
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40010c00 	.word	0x40010c00

080028e0 <onOff>:
void onOff(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80028e4:	2201      	movs	r2, #1
 80028e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ea:	4816      	ldr	r0, [pc, #88]	; (8002944 <onOff+0x64>)
 80028ec:	f001 ff8d 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80028f0:	2200      	movs	r2, #0
 80028f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028f6:	4813      	ldr	r0, [pc, #76]	; (8002944 <onOff+0x64>)
 80028f8:	f001 ff87 	bl	800480a <HAL_GPIO_WritePin>
	letter('0');
 80028fc:	2030      	movs	r0, #48	; 0x30
 80028fe:	f7fd fc27 	bl	8000150 <letter>
	letter('-');
 8002902:	202d      	movs	r0, #45	; 0x2d
 8002904:	f7fd fc24 	bl	8000150 <letter>
	letter('O');
 8002908:	204f      	movs	r0, #79	; 0x4f
 800290a:	f7fd fc21 	bl	8000150 <letter>
	letter('n');
 800290e:	206e      	movs	r0, #110	; 0x6e
 8002910:	f7fd fc1e 	bl	8000150 <letter>
	letter(' ');
 8002914:	2020      	movs	r0, #32
 8002916:	f7fd fc1b 	bl	8000150 <letter>
	letter('1');
 800291a:	2031      	movs	r0, #49	; 0x31
 800291c:	f7fd fc18 	bl	8000150 <letter>
	letter('-');
 8002920:	202d      	movs	r0, #45	; 0x2d
 8002922:	f7fd fc15 	bl	8000150 <letter>
	letter('O');
 8002926:	204f      	movs	r0, #79	; 0x4f
 8002928:	f7fd fc12 	bl	8000150 <letter>
	letter('f');
 800292c:	2066      	movs	r0, #102	; 0x66
 800292e:	f7fd fc0f 	bl	8000150 <letter>
	letter('f');
 8002932:	2066      	movs	r0, #102	; 0x66
 8002934:	f7fd fc0c 	bl	8000150 <letter>
	letter(':');
 8002938:	203a      	movs	r0, #58	; 0x3a
 800293a:	f7fd fc09 	bl	8000150 <letter>

}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40010c00 	.word	0x40010c00

08002948 <error>:
void error(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800294c:	2201      	movs	r2, #1
 800294e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002952:	482a      	ldr	r0, [pc, #168]	; (80029fc <error+0xb4>)
 8002954:	f001 ff59 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002958:	2200      	movs	r2, #0
 800295a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800295e:	4827      	ldr	r0, [pc, #156]	; (80029fc <error+0xb4>)
 8002960:	f001 ff53 	bl	800480a <HAL_GPIO_WritePin>

	letter('E');
 8002964:	2045      	movs	r0, #69	; 0x45
 8002966:	f7fd fbf3 	bl	8000150 <letter>
	letter('r');
 800296a:	2072      	movs	r0, #114	; 0x72
 800296c:	f7fd fbf0 	bl	8000150 <letter>
	letter('r');
 8002970:	2072      	movs	r0, #114	; 0x72
 8002972:	f7fd fbed 	bl	8000150 <letter>
	letter('o');
 8002976:	206f      	movs	r0, #111	; 0x6f
 8002978:	f7fd fbea 	bl	8000150 <letter>
	letter('r');
 800297c:	2072      	movs	r0, #114	; 0x72
 800297e:	f7fd fbe7 	bl	8000150 <letter>
	letter(',');
 8002982:	202c      	movs	r0, #44	; 0x2c
 8002984:	f7fd fbe4 	bl	8000150 <letter>
	letter(' ');
 8002988:	2020      	movs	r0, #32
 800298a:	f7fd fbe1 	bl	8000150 <letter>
	letter('I');
 800298e:	2049      	movs	r0, #73	; 0x49
 8002990:	f7fd fbde 	bl	8000150 <letter>
	letter('n');
 8002994:	206e      	movs	r0, #110	; 0x6e
 8002996:	f7fd fbdb 	bl	8000150 <letter>
	letter('v');
 800299a:	2076      	movs	r0, #118	; 0x76
 800299c:	f7fd fbd8 	bl	8000150 <letter>
	letter('a');
 80029a0:	2061      	movs	r0, #97	; 0x61
 80029a2:	f7fd fbd5 	bl	8000150 <letter>
	letter('l');
 80029a6:	206c      	movs	r0, #108	; 0x6c
 80029a8:	f7fd fbd2 	bl	8000150 <letter>
	letter('i');
 80029ac:	2069      	movs	r0, #105	; 0x69
 80029ae:	f7fd fbcf 	bl	8000150 <letter>
	letter('d');
 80029b2:	2064      	movs	r0, #100	; 0x64
 80029b4:	f7fd fbcc 	bl	8000150 <letter>

	line2();
 80029b8:	f7ff fc18 	bl	80021ec <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80029bc:	2201      	movs	r2, #1
 80029be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c2:	480e      	ldr	r0, [pc, #56]	; (80029fc <error+0xb4>)
 80029c4:	f001 ff21 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80029c8:	2200      	movs	r2, #0
 80029ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ce:	480b      	ldr	r0, [pc, #44]	; (80029fc <error+0xb4>)
 80029d0:	f001 ff1b 	bl	800480a <HAL_GPIO_WritePin>
	letter('N');
 80029d4:	204e      	movs	r0, #78	; 0x4e
 80029d6:	f7fd fbbb 	bl	8000150 <letter>
	letter('u');
 80029da:	2075      	movs	r0, #117	; 0x75
 80029dc:	f7fd fbb8 	bl	8000150 <letter>
	letter('m');
 80029e0:	206d      	movs	r0, #109	; 0x6d
 80029e2:	f7fd fbb5 	bl	8000150 <letter>
	letter('b');
 80029e6:	2062      	movs	r0, #98	; 0x62
 80029e8:	f7fd fbb2 	bl	8000150 <letter>
	letter('e');
 80029ec:	2065      	movs	r0, #101	; 0x65
 80029ee:	f7fd fbaf 	bl	8000150 <letter>
	letter('r');
 80029f2:	2072      	movs	r0, #114	; 0x72
 80029f4:	f7fd fbac 	bl	8000150 <letter>
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40010c00 	.word	0x40010c00

08002a00 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 8002a08:	f000 fdd2 	bl	80035b0 <initializeNodes>
//	HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 10);
  for(;;)
  {

	  	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 100) == HAL_OK)
 8002a0c:	2364      	movs	r3, #100	; 0x64
 8002a0e:	221a      	movs	r2, #26
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <StartXbeeTask+0x20>)
 8002a12:	4804      	ldr	r0, [pc, #16]	; (8002a24 <StartXbeeTask+0x24>)
 8002a14:	f003 fa41 	bl	8005e9a <HAL_UART_Receive>
	  //						HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 1000);
	  //						break;
	  //					}
	  //				}
	    }
    osDelay(1);
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f003 fcc5 	bl	80063a8 <osDelay>
	  	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 100) == HAL_OK)
 8002a1e:	e7f5      	b.n	8002a0c <StartXbeeTask+0xc>
 8002a20:	20002524 	.word	0x20002524
 8002a24:	200024a4 	.word	0x200024a4

08002a28 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b088      	sub	sp, #32
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	uint16_t indc, m;

  for(;;)
  {

	commandToLCD();
 8002a30:	f7ff fa7c 	bl	8001f2c <commandToLCD>
	printPassword();
 8002a34:	f7ff fb5a 	bl	80020ec <printPassword>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a3e:	48c2      	ldr	r0, [pc, #776]	; (8002d48 <StartUserTask+0x320>)
 8002a40:	f001 fee3 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002a44:	2200      	movs	r2, #0
 8002a46:	2104      	movs	r1, #4
 8002a48:	48c0      	ldr	r0, [pc, #768]	; (8002d4c <StartUserTask+0x324>)
 8002a4a:	f001 fede 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a54:	48bc      	ldr	r0, [pc, #752]	; (8002d48 <StartUserTask+0x320>)
 8002a56:	f001 fed8 	bl	800480a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a60:	48b9      	ldr	r0, [pc, #740]	; (8002d48 <StartUserTask+0x320>)
 8002a62:	f001 fed2 	bl	800480a <HAL_GPIO_WritePin>

	for(int i = 0; i < 4; i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e00d      	b.n	8002a88 <StartUserTask+0x60>
	{
		num[i] = getVal();
 8002a6c:	f7ff fc8c 	bl	8002388 <getVal>
 8002a70:	4603      	mov	r3, r0
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	f107 0120 	add.w	r1, r7, #32
 8002a7c:	440b      	add	r3, r1
 8002a7e:	f823 2c14 	strh.w	r2, [r3, #-20]
	for(int i = 0; i < 4; i++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	ddee      	ble.n	8002a6c <StartUserTask+0x44>
	}
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8002a8e:	89bb      	ldrh	r3, [r7, #12]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	f040 815f 	bne.w	8002d54 <StartUserTask+0x32c>
 8002a96:	89fb      	ldrh	r3, [r7, #14]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	f040 815b 	bne.w	8002d54 <StartUserTask+0x32c>
 8002a9e:	8a3b      	ldrh	r3, [r7, #16]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	f040 8157 	bne.w	8002d54 <StartUserTask+0x32c>
 8002aa6:	8a7b      	ldrh	r3, [r7, #18]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	f040 8153 	bne.w	8002d54 <StartUserTask+0x32c>
	{
		clear();
 8002aae:	f7ff fbef 	bl	8002290 <clear>
		line1();
 8002ab2:	f7ff fb49 	bl	8002148 <line1>
		correct();
 8002ab6:	f7ff fc3d 	bl	8002334 <correct>
		HAL_Delay(1500);
 8002aba:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002abe:	f000 fff5 	bl	8003aac <HAL_Delay>
		num[6] = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	833b      	strh	r3, [r7, #24]
		while(num[6] == 0)
 8002ac6:	e13a      	b.n	8002d3e <StartUserTask+0x316>
		{
			commandToLCD();
 8002ac8:	f7ff fa30 	bl	8001f2c <commandToLCD>
			onOffTime();
 8002acc:	f7ff fec4 	bl	8002858 <onOffTime>
			num[0] = getVal();
 8002ad0:	f7ff fc5a 	bl	8002388 <getVal>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	81bb      	strh	r3, [r7, #12]
			while(num[0]< 0 || num[0] > 1)
 8002ada:	e010      	b.n	8002afe <StartUserTask+0xd6>
			{
				commandToLCD();
 8002adc:	f7ff fa26 	bl	8001f2c <commandToLCD>
				error();
 8002ae0:	f7ff ff32 	bl	8002948 <error>
				HAL_Delay(1500);
 8002ae4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ae8:	f000 ffe0 	bl	8003aac <HAL_Delay>
				commandToLCD();
 8002aec:	f7ff fa1e 	bl	8001f2c <commandToLCD>
				onOffTime();
 8002af0:	f7ff feb2 	bl	8002858 <onOffTime>
				num[0] = getVal();
 8002af4:	f7ff fc48 	bl	8002388 <getVal>
 8002af8:	4603      	mov	r3, r0
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	81bb      	strh	r3, [r7, #12]
			while(num[0]< 0 || num[0] > 1)
 8002afe:	89bb      	ldrh	r3, [r7, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d8eb      	bhi.n	8002adc <StartUserTask+0xb4>
			}
			if(num[0] == 0)
 8002b04:	89bb      	ldrh	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d179      	bne.n	8002bfe <StartUserTask+0x1d6>
			{
				m = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	813b      	strh	r3, [r7, #8]
				commandToLCD();
 8002b0e:	f7ff fa0d 	bl	8001f2c <commandToLCD>
				green();
 8002b12:	f7ff fdf3 	bl	80026fc <green>
				num[0] = getVal();
 8002b16:	f7ff fc37 	bl	8002388 <getVal>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002b20:	e010      	b.n	8002b44 <StartUserTask+0x11c>
				{
					commandToLCD();
 8002b22:	f7ff fa03 	bl	8001f2c <commandToLCD>
					error();
 8002b26:	f7ff ff0f 	bl	8002948 <error>
					HAL_Delay(1500);
 8002b2a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b2e:	f000 ffbd 	bl	8003aac <HAL_Delay>
					commandToLCD();
 8002b32:	f7ff f9fb 	bl	8001f2c <commandToLCD>
					green();
 8002b36:	f7ff fde1 	bl	80026fc <green>
					num[0] = getVal();
 8002b3a:	f7ff fc25 	bl	8002388 <getVal>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002b44:	89bb      	ldrh	r3, [r7, #12]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0eb      	beq.n	8002b22 <StartUserTask+0xfa>
 8002b4a:	89bb      	ldrh	r3, [r7, #12]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d8e8      	bhi.n	8002b22 <StartUserTask+0xfa>
				}
				indc = num[0];
 8002b50:	89bb      	ldrh	r3, [r7, #12]
 8002b52:	817b      	strh	r3, [r7, #10]
				line2();
 8002b54:	f7ff fb4a 	bl	80021ec <line2>
				onOff();
 8002b58:	f7ff fec2 	bl	80028e0 <onOff>
				num[0] = getVal();
 8002b5c:	f7ff fc14 	bl	8002388 <getVal>
 8002b60:	4603      	mov	r3, r0
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002b66:	e010      	b.n	8002b8a <StartUserTask+0x162>
				{
					commandToLCD();
 8002b68:	f7ff f9e0 	bl	8001f2c <commandToLCD>
					error();
 8002b6c:	f7ff feec 	bl	8002948 <error>
					HAL_Delay(1500);
 8002b70:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b74:	f000 ff9a 	bl	8003aac <HAL_Delay>
					commandToLCD();
 8002b78:	f7ff f9d8 	bl	8001f2c <commandToLCD>
					onOff();
 8002b7c:	f7ff feb0 	bl	80028e0 <onOff>
					num[0] = getVal();
 8002b80:	f7ff fc02 	bl	8002388 <getVal>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 0 || num[0] > 1)
 8002b8a:	89bb      	ldrh	r3, [r7, #12]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d8eb      	bhi.n	8002b68 <StartUserTask+0x140>
				}
				osMessageQueuePut(UserQueueHandle, &m, 1U, 0U);
 8002b90:	4b6f      	ldr	r3, [pc, #444]	; (8002d50 <StartUserTask+0x328>)
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	f107 0108 	add.w	r1, r7, #8
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f003 fcb8 	bl	8006510 <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &indc, 1U, 0U);//do something with green
 8002ba0:	4b6b      	ldr	r3, [pc, #428]	; (8002d50 <StartUserTask+0x328>)
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	f107 010a 	add.w	r1, r7, #10
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2201      	movs	r2, #1
 8002bac:	f003 fcb0 	bl	8006510 <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &num[0], 1U, 0U);//do something with state
 8002bb0:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <StartUserTask+0x328>)
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	f107 010c 	add.w	r1, r7, #12
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f003 fca8 	bl	8006510 <osMessageQueuePut>
				clear();
 8002bc0:	f7ff fb66 	bl	8002290 <clear>
				quit();
 8002bc4:	f7ff fe06 	bl	80027d4 <quit>
				num[5] = getVal();
 8002bc8:	f7ff fbde 	bl	8002388 <getVal>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002bd2:	e010      	b.n	8002bf6 <StartUserTask+0x1ce>
				{
					commandToLCD();
 8002bd4:	f7ff f9aa 	bl	8001f2c <commandToLCD>
					error();
 8002bd8:	f7ff feb6 	bl	8002948 <error>
					HAL_Delay(1500);
 8002bdc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002be0:	f000 ff64 	bl	8003aac <HAL_Delay>
					commandToLCD();
 8002be4:	f7ff f9a2 	bl	8001f2c <commandToLCD>
					quit();
 8002be8:	f7ff fdf4 	bl	80027d4 <quit>
					num[5] = getVal();
 8002bec:	f7ff fbcc 	bl	8002388 <getVal>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002bf6:	8afb      	ldrh	r3, [r7, #22]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d8eb      	bhi.n	8002bd4 <StartUserTask+0x1ac>
 8002bfc:	e09a      	b.n	8002d34 <StartUserTask+0x30c>
				}
			}
			else if(num[0] == 1)
 8002bfe:	89bb      	ldrh	r3, [r7, #12]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	f040 8097 	bne.w	8002d34 <StartUserTask+0x30c>
			{
				m = 2;
 8002c06:	2302      	movs	r3, #2
 8002c08:	813b      	strh	r3, [r7, #8]
				commandToLCD();
 8002c0a:	f7ff f98f 	bl	8001f2c <commandToLCD>
				green();
 8002c0e:	f7ff fd75 	bl	80026fc <green>
				num[0] = getVal();
 8002c12:	f7ff fbb9 	bl	8002388 <getVal>
 8002c16:	4603      	mov	r3, r0
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002c1c:	e010      	b.n	8002c40 <StartUserTask+0x218>
				{
					commandToLCD();
 8002c1e:	f7ff f985 	bl	8001f2c <commandToLCD>
					error();
 8002c22:	f7ff fe91 	bl	8002948 <error>
					HAL_Delay(1500);
 8002c26:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c2a:	f000 ff3f 	bl	8003aac <HAL_Delay>
					commandToLCD();
 8002c2e:	f7ff f97d 	bl	8001f2c <commandToLCD>
					green();
 8002c32:	f7ff fd63 	bl	80026fc <green>
					num[0] = getVal();
 8002c36:	f7ff fba7 	bl	8002388 <getVal>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	81bb      	strh	r3, [r7, #12]
				while(num[0]< 1 || num[0] > 3)
 8002c40:	89bb      	ldrh	r3, [r7, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0eb      	beq.n	8002c1e <StartUserTask+0x1f6>
 8002c46:	89bb      	ldrh	r3, [r7, #12]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d8e8      	bhi.n	8002c1e <StartUserTask+0x1f6>
				}
				indc = num[0];
 8002c4c:	89bb      	ldrh	r3, [r7, #12]
 8002c4e:	817b      	strh	r3, [r7, #10]
				line2();
 8002c50:	f7ff facc 	bl	80021ec <line2>
				timer();
 8002c54:	f7ff fd82 	bl	800275c <timer>
				num[0] = getVal();
 8002c58:	f7ff fb96 	bl	8002388 <getVal>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	81bb      	strh	r3, [r7, #12]
				num[1] = getVal();
 8002c62:	f7ff fb91 	bl	8002388 <getVal>
 8002c66:	4603      	mov	r3, r0
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	81fb      	strh	r3, [r7, #14]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8002c6c:	e015      	b.n	8002c9a <StartUserTask+0x272>
				{
					commandToLCD();
 8002c6e:	f7ff f95d 	bl	8001f2c <commandToLCD>
					error();
 8002c72:	f7ff fe69 	bl	8002948 <error>
					HAL_Delay(1500);
 8002c76:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c7a:	f000 ff17 	bl	8003aac <HAL_Delay>
					commandToLCD();
 8002c7e:	f7ff f955 	bl	8001f2c <commandToLCD>
					timer();
 8002c82:	f7ff fd6b 	bl	800275c <timer>
					num[0] = getVal();
 8002c86:	f7ff fb7f 	bl	8002388 <getVal>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	81bb      	strh	r3, [r7, #12]
					num[1] = getVal();
 8002c90:	f7ff fb7a 	bl	8002388 <getVal>
 8002c94:	4603      	mov	r3, r0
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	81fb      	strh	r3, [r7, #14]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8002c9a:	89bb      	ldrh	r3, [r7, #12]
 8002c9c:	2b06      	cmp	r3, #6
 8002c9e:	d8e6      	bhi.n	8002c6e <StartUserTask+0x246>
 8002ca0:	89fb      	ldrh	r3, [r7, #14]
 8002ca2:	2b09      	cmp	r3, #9
 8002ca4:	d8e3      	bhi.n	8002c6e <StartUserTask+0x246>
 8002ca6:	89bb      	ldrh	r3, [r7, #12]
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d102      	bne.n	8002cb2 <StartUserTask+0x28a>
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1dd      	bne.n	8002c6e <StartUserTask+0x246>
				}
				osMessageQueuePut(UserQueueHandle, &m, 1U, 0U);
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <StartUserTask+0x328>)
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	f107 0108 	add.w	r1, r7, #8
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f003 fc27 	bl	8006510 <osMessageQueuePut>
				osMessageQueuePut(UserQueueHandle, &indc, 1U, 0U);//do something with green and time
 8002cc2:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <StartUserTask+0x328>)
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	f107 010a 	add.w	r1, r7, #10
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f003 fc1f 	bl	8006510 <osMessageQueuePut>
				num[2] = num[1] + (num[0] * 10);
 8002cd2:	89fa      	ldrh	r2, [r7, #14]
 8002cd4:	89bb      	ldrh	r3, [r7, #12]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	0089      	lsls	r1, r1, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	823b      	strh	r3, [r7, #16]
				osMessageQueuePut(UserQueueHandle, &num[2], 1U, 0U);
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <StartUserTask+0x328>)
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	1d19      	adds	r1, r3, #4
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f003 fc0c 	bl	8006510 <osMessageQueuePut>

				clear();
 8002cf8:	f7ff faca 	bl	8002290 <clear>
				quit();
 8002cfc:	f7ff fd6a 	bl	80027d4 <quit>
				num[5] = getVal();
 8002d00:	f7ff fb42 	bl	8002388 <getVal>
 8002d04:	4603      	mov	r3, r0
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002d0a:	e010      	b.n	8002d2e <StartUserTask+0x306>
				{
					commandToLCD();
 8002d0c:	f7ff f90e 	bl	8001f2c <commandToLCD>
					error();
 8002d10:	f7ff fe1a 	bl	8002948 <error>
					HAL_Delay(1500);
 8002d14:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002d18:	f000 fec8 	bl	8003aac <HAL_Delay>
					commandToLCD();
 8002d1c:	f7ff f906 	bl	8001f2c <commandToLCD>
					quit();
 8002d20:	f7ff fd58 	bl	80027d4 <quit>
					num[5] = getVal();
 8002d24:	f7ff fb30 	bl	8002388 <getVal>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	82fb      	strh	r3, [r7, #22]
				while(num[5]< 0 || num[5] > 1)
 8002d2e:	8afb      	ldrh	r3, [r7, #22]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d8eb      	bhi.n	8002d0c <StartUserTask+0x2e4>
				}
			}
			if(num[5] == 1)
 8002d34:	8afb      	ldrh	r3, [r7, #22]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <StartUserTask+0x316>
			{
				num[6] = 5;
 8002d3a:	2305      	movs	r3, #5
 8002d3c:	833b      	strh	r3, [r7, #24]
		while(num[6] == 0)
 8002d3e:	8b3b      	ldrh	r3, [r7, #24]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f43f aec1 	beq.w	8002ac8 <StartUserTask+0xa0>
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8002d46:	e00d      	b.n	8002d64 <StartUserTask+0x33c>
 8002d48:	40011000 	.word	0x40011000
 8002d4c:	40011400 	.word	0x40011400
 8002d50:	20002564 	.word	0x20002564
			}
		}
	}
	else
	{
		line2();
 8002d54:	f7ff fa4a 	bl	80021ec <line2>
		wrongPass();
 8002d58:	f7ff fc94 	bl	8002684 <wrongPass>
		HAL_Delay(2000);
 8002d5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d60:	f000 fea4 	bl	8003aac <HAL_Delay>
	}
	osDelay(1);
 8002d64:	2001      	movs	r0, #1
 8002d66:	f003 fb1f 	bl	80063a8 <osDelay>
	commandToLCD();
 8002d6a:	e661      	b.n	8002a30 <StartUserTask+0x8>

08002d6c <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
//	  		else if(state == 1)
//	  		{
//	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//	  		}
//	  	}
    osDelay(1);
 8002d74:	2001      	movs	r0, #1
 8002d76:	f003 fb17 	bl	80063a8 <osDelay>
 8002d7a:	e7fb      	b.n	8002d74 <StartSolenoidTask+0x8>

08002d7c <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b09c      	sub	sp, #112	; 0x70
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWeatherTask */
	uint16_t period[20], raw[20];
	uint16_t tickstart, tickend, totalP, totalT, a, b;
	uint16_t Pcount = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	HAL_TIM_Base_Start(&htim2);
 8002d8a:	486a      	ldr	r0, [pc, #424]	; (8002f34 <StartWeatherTask+0x1b8>)
 8002d8c:	f002 fb8c 	bl	80054a8 <HAL_TIM_Base_Start>

  /* Infinite loop */
  for(;;)
  {
		while(Pcount < 20)
 8002d90:	e056      	b.n	8002e40 <StartWeatherTask+0xc4>
		{
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8002d92:	bf00      	nop
 8002d94:	2101      	movs	r1, #1
 8002d96:	4868      	ldr	r0, [pc, #416]	; (8002f38 <StartWeatherTask+0x1bc>)
 8002d98:	f001 fd20 	bl	80047dc <HAL_GPIO_ReadPin>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f8      	beq.n	8002d94 <StartWeatherTask+0x18>
			{}
			tickstart = __HAL_TIM_GET_COUNTER(&htim2);
 8002da2:	4b64      	ldr	r3, [pc, #400]	; (8002f34 <StartWeatherTask+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1)
 8002dac:	bf00      	nop
 8002dae:	2101      	movs	r1, #1
 8002db0:	4861      	ldr	r0, [pc, #388]	; (8002f38 <StartWeatherTask+0x1bc>)
 8002db2:	f001 fd13 	bl	80047dc <HAL_GPIO_ReadPin>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d0f8      	beq.n	8002dae <StartWeatherTask+0x32>
			{}
			while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8002dbc:	bf00      	nop
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	485d      	ldr	r0, [pc, #372]	; (8002f38 <StartWeatherTask+0x1bc>)
 8002dc2:	f001 fd0b 	bl	80047dc <HAL_GPIO_ReadPin>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f8      	beq.n	8002dbe <StartWeatherTask+0x42>
			{}
			tickend = __HAL_TIM_GET_COUNTER(&htim2);
 8002dcc:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <StartWeatherTask+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
			if(tickend > tickstart)
 8002dd6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002dda:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d90e      	bls.n	8002e00 <StartWeatherTask+0x84>
				period[Pcount] = tickend - tickstart;
 8002de2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002de6:	f8b7 105c 	ldrh.w	r1, [r7, #92]	; 0x5c
 8002dea:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002dee:	1a8a      	subs	r2, r1, r2
 8002df0:	b292      	uxth	r2, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002df8:	440b      	add	r3, r1
 8002dfa:	f823 2c3c 	strh.w	r2, [r3, #-60]
 8002dfe:	e00f      	b.n	8002e20 <StartWeatherTask+0xa4>
			else
				period[Pcount] = (65535 - tickstart) + tickend;
 8002e00:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002e04:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002e10:	3a01      	subs	r2, #1
 8002e12:	b292      	uxth	r2, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f823 2c3c 	strh.w	r2, [r3, #-60]

			if(period[Pcount]< 1000)
 8002e20:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8002e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e34:	d204      	bcs.n	8002e40 <StartWeatherTask+0xc4>
				Pcount++;
 8002e36:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		while(Pcount < 20)
 8002e40:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8002e44:	2b13      	cmp	r3, #19
 8002e46:	d9a4      	bls.n	8002d92 <StartWeatherTask+0x16>
		}

		for(int i = 0; i < 20; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e4c:	e016      	b.n	8002e7c <StartWeatherTask+0x100>
		{
			HAL_ADC_Start(&hadc1);
 8002e4e:	483b      	ldr	r0, [pc, #236]	; (8002f3c <StartWeatherTask+0x1c0>)
 8002e50:	f000 ff28 	bl	8003ca4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	4838      	ldr	r0, [pc, #224]	; (8002f3c <StartWeatherTask+0x1c0>)
 8002e5a:	f000 ffd1 	bl	8003e00 <HAL_ADC_PollForConversion>
			raw[i] = HAL_ADC_GetValue(&hadc1);
 8002e5e:	4837      	ldr	r0, [pc, #220]	; (8002f3c <StartWeatherTask+0x1c0>)
 8002e60:	f001 f8c8 	bl	8003ff4 <HAL_ADC_GetValue>
 8002e64:	4603      	mov	r3, r0
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002e70:	440b      	add	r3, r1
 8002e72:	f823 2c64 	strh.w	r2, [r3, #-100]
		for(int i = 0; i < 20; i++)
 8002e76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e78:	3301      	adds	r3, #1
 8002e7a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e7e:	2b13      	cmp	r3, #19
 8002e80:	dde5      	ble.n	8002e4e <StartWeatherTask+0xd2>
		}

		Pcount = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		totalT = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	813b      	strh	r3, [r7, #8]
		totalP = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	817b      	strh	r3, [r7, #10]
		for(int i = 0; i < 20; i++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	663b      	str	r3, [r7, #96]	; 0x60
 8002e94:	e018      	b.n	8002ec8 <StartWeatherTask+0x14c>
		{
			totalT = totalT +raw[i];
 8002e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f833 2c64 	ldrh.w	r2, [r3, #-100]
 8002ea4:	893b      	ldrh	r3, [r7, #8]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	813b      	strh	r3, [r7, #8]
			totalP = totalP +period[i];
 8002eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	817b      	strh	r3, [r7, #10]
		for(int i = 0; i < 20; i++)
 8002ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ec8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002eca:	2b13      	cmp	r3, #19
 8002ecc:	dde3      	ble.n	8002e96 <StartWeatherTask+0x11a>
		}
		totalT = totalT/20;
 8002ece:	893b      	ldrh	r3, [r7, #8]
 8002ed0:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <StartWeatherTask+0x1c4>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	813b      	strh	r3, [r7, #8]
		totalP = totalP/20;
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <StartWeatherTask+0x1c4>)
 8002ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	817b      	strh	r3, [r7, #10]
		if(a != totalT || b != totalP)
 8002eea:	893b      	ldrh	r3, [r7, #8]
 8002eec:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d104      	bne.n	8002efe <StartWeatherTask+0x182>
 8002ef4:	897b      	ldrh	r3, [r7, #10]
 8002ef6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d015      	beq.n	8002f2a <StartWeatherTask+0x1ae>
		{
			osMessageQueuePut(WeatherQueueHandle, &totalT, 1U, 0U);
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <StartWeatherTask+0x1c8>)
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	f107 0108 	add.w	r1, r7, #8
 8002f06:	2300      	movs	r3, #0
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f003 fb01 	bl	8006510 <osMessageQueuePut>
			osMessageQueuePut(WeatherQueueHandle, &totalP, 1U, 0U);
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <StartWeatherTask+0x1c8>)
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f107 010a 	add.w	r1, r7, #10
 8002f16:	2300      	movs	r3, #0
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f003 faf9 	bl	8006510 <osMessageQueuePut>
			a = totalT;
 8002f1e:	893b      	ldrh	r3, [r7, #8]
 8002f20:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			b = totalP;
 8002f24:	897b      	ldrh	r3, [r7, #10]
 8002f26:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
		}
    osDelay(30);
 8002f2a:	201e      	movs	r0, #30
 8002f2c:	f003 fa3c 	bl	80063a8 <osDelay>
		while(Pcount < 20)
 8002f30:	e786      	b.n	8002e40 <StartWeatherTask+0xc4>
 8002f32:	bf00      	nop
 8002f34:	2000283c 	.word	0x2000283c
 8002f38:	40011000 	.word	0x40011000
 8002f3c:	200027b0 	.word	0x200027b0
 8002f40:	cccccccd 	.word	0xcccccccd
 8002f44:	20002838 	.word	0x20002838

08002f48 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b09a      	sub	sp, #104	; 0x68
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlowTask */
  	uint16_t o[3] = {1,1,1};
 8002f50:	4aa5      	ldr	r2, [pc, #660]	; (80031e8 <StartFlowTask+0x2a0>)
 8002f52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f5a:	6018      	str	r0, [r3, #0]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	8019      	strh	r1, [r3, #0]
  	uint16_t C[20];
  	uint16_t tickS, tickL, temp, f1, f2, f3, m;
  	uint16_t F = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  	uint16_t L = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  	uint16_t total = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	489d      	ldr	r0, [pc, #628]	; (80031ec <StartFlowTask+0x2a4>)
 8002f76:	f001 fc31 	bl	80047dc <HAL_GPIO_ReadPin>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	f040 80a8 	bne.w	80030d2 <StartFlowTask+0x18a>
 8002f82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	f040 80a4 	bne.w	80030d2 <StartFlowTask+0x18a>
	  {
		  m = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 8002f8e:	2300      	movs	r3, #0
 8002f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f92:	e066      	b.n	8003062 <StartFlowTask+0x11a>
		  {
			  HAL_TIM_Base_Start(&htim1);
 8002f94:	4896      	ldr	r0, [pc, #600]	; (80031f0 <StartFlowTask+0x2a8>)
 8002f96:	f002 fa87 	bl	80054a8 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 8002f9a:	4b95      	ldr	r3, [pc, #596]	; (80031f0 <StartFlowTask+0x2a8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 8002fa4:	e04c      	b.n	8003040 <StartFlowTask+0xf8>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b7
 8002fa6:	2104      	movs	r1, #4
 8002fa8:	4892      	ldr	r0, [pc, #584]	; (80031f4 <StartFlowTask+0x2ac>)
 8002faa:	f001 fc17 	bl	80047dc <HAL_GPIO_ReadPin>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 8002fb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d115      	bne.n	8002fe8 <StartFlowTask+0xa0>
 8002fbc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002fc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d00f      	beq.n	8002fe8 <StartFlowTask+0xa0>
				  {
					  C[j]++;
 8002fc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002fe2:	440b      	add	r3, r1
 8002fe4:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 8002fe8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8002ff0:	4b7f      	ldr	r3, [pc, #508]	; (80031f0 <StartFlowTask+0x2a8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 8002ffa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002ffe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003002:	429a      	cmp	r2, r3
 8003004:	d20d      	bcs.n	8003022 <StartFlowTask+0xda>
					  total = total + temp + (65535 - tickL);
 8003006:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800300a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800300e:	4413      	add	r3, r2
 8003010:	b29a      	uxth	r2, r3
 8003012:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003020:	e00a      	b.n	8003038 <StartFlowTask+0xf0>

				  else
					  total = total+ temp - tickL;
 8003022:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003026:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800302a:	4413      	add	r3, r2
 800302c:	b29a      	uxth	r2, r3
 800302e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 8003038:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800303c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 8003040:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003044:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	4a6b      	ldr	r2, [pc, #428]	; (80031f8 <StartFlowTask+0x2b0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	ddaa      	ble.n	8002fa6 <StartFlowTask+0x5e>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8003050:	4867      	ldr	r0, [pc, #412]	; (80031f0 <StartFlowTask+0x2a8>)
 8003052:	f002 fa73 	bl	800553c <HAL_TIM_Base_Stop>
			  total = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  for(int j =0; j < 20; j++)
 800305c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800305e:	3301      	adds	r3, #1
 8003060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003064:	2b13      	cmp	r3, #19
 8003066:	dd95      	ble.n	8002f94 <StartFlowTask+0x4c>
		  }
		  for(int j =0; j < 20; j++)
 8003068:	2300      	movs	r3, #0
 800306a:	65bb      	str	r3, [r7, #88]	; 0x58
 800306c:	e015      	b.n	800309a <StartFlowTask+0x152>
		  {
			  f1 = f1 + C[j];
 800306e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003076:	4413      	add	r3, r2
 8003078:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 800307c:	8a7b      	ldrh	r3, [r7, #18]
 800307e:	4413      	add	r3, r2
 8003080:	b29b      	uxth	r3, r3
 8003082:	827b      	strh	r3, [r7, #18]
			  C[j] = 0;
 8003084:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800308c:	4413      	add	r3, r2
 800308e:	2200      	movs	r2, #0
 8003090:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 8003094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003096:	3301      	adds	r3, #1
 8003098:	65bb      	str	r3, [r7, #88]	; 0x58
 800309a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800309c:	2b13      	cmp	r3, #19
 800309e:	dde6      	ble.n	800306e <StartFlowTask+0x126>
		  }
		  f1 = f1 / 100;
 80030a0:	8a7b      	ldrh	r3, [r7, #18]
 80030a2:	4a56      	ldr	r2, [pc, #344]	; (80031fc <StartFlowTask+0x2b4>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	827b      	strh	r3, [r7, #18]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 80030ae:	4b54      	ldr	r3, [pc, #336]	; (8003200 <StartFlowTask+0x2b8>)
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	f107 010c 	add.w	r1, r7, #12
 80030b6:	2300      	movs	r3, #0
 80030b8:	2201      	movs	r2, #1
 80030ba:	f003 fa29 	bl	8006510 <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f1, 1U, 0U);
 80030be:	4b50      	ldr	r3, [pc, #320]	; (8003200 <StartFlowTask+0x2b8>)
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f107 0112 	add.w	r1, r7, #18
 80030c6:	2300      	movs	r3, #0
 80030c8:	2201      	movs	r2, #1
 80030ca:	f003 fa21 	bl	8006510 <osMessageQueuePut>
		  o[0] = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[0] == 0)
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	4845      	ldr	r0, [pc, #276]	; (80031ec <StartFlowTask+0x2a4>)
 80030d6:	f001 fb81 	bl	80047dc <HAL_GPIO_ReadPin>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d104      	bne.n	80030ea <StartFlowTask+0x1a2>
 80030e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <StartFlowTask+0x1a2>
	  {
		  o[0] = 1;
 80030e6:	2301      	movs	r3, #1
 80030e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1 && o[1] == 1)
 80030ea:	2120      	movs	r1, #32
 80030ec:	483f      	ldr	r0, [pc, #252]	; (80031ec <StartFlowTask+0x2a4>)
 80030ee:	f001 fb75 	bl	80047dc <HAL_GPIO_ReadPin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 80b7 	bne.w	8003268 <StartFlowTask+0x320>
 80030fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 80b3 	bne.w	8003268 <StartFlowTask+0x320>
	  {
		  m = 2;
 8003102:	2302      	movs	r3, #2
 8003104:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 8003106:	2300      	movs	r3, #0
 8003108:	657b      	str	r3, [r7, #84]	; 0x54
 800310a:	e066      	b.n	80031da <StartFlowTask+0x292>
		  {
			  HAL_TIM_Base_Start(&htim1);
 800310c:	4838      	ldr	r0, [pc, #224]	; (80031f0 <StartFlowTask+0x2a8>)
 800310e:	f002 f9cb 	bl	80054a8 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 8003112:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <StartFlowTask+0x2a8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 800311c:	e04c      	b.n	80031b8 <StartFlowTask+0x270>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);//b5
 800311e:	2102      	movs	r1, #2
 8003120:	4834      	ldr	r0, [pc, #208]	; (80031f4 <StartFlowTask+0x2ac>)
 8003122:	f001 fb5b 	bl	80047dc <HAL_GPIO_ReadPin>
 8003126:	4603      	mov	r3, r0
 8003128:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 800312c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003130:	2b01      	cmp	r3, #1
 8003132:	d115      	bne.n	8003160 <StartFlowTask+0x218>
 8003134:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003138:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800313c:	429a      	cmp	r2, r3
 800313e:	d00f      	beq.n	8003160 <StartFlowTask+0x218>
				  {
					  C[j]++;
 8003140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003148:	4413      	add	r3, r2
 800314a:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 800314e:	3301      	adds	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800315a:	440b      	add	r3, r1
 800315c:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 8003160:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003164:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8003168:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <StartFlowTask+0x2a8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 8003172:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8003176:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800317a:	429a      	cmp	r2, r3
 800317c:	d20d      	bcs.n	800319a <StartFlowTask+0x252>
					  total = total + temp + (65535 - tickL);
 800317e:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003182:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003186:	4413      	add	r3, r2
 8003188:	b29a      	uxth	r2, r3
 800318a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003198:	e00a      	b.n	80031b0 <StartFlowTask+0x268>

				  else
					  total = total+ temp - tickL;
 800319a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800319e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80031a2:	4413      	add	r3, r2
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 80031b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80031b4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 80031b8:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80031bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <StartFlowTask+0x2b0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	ddaa      	ble.n	800311e <StartFlowTask+0x1d6>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 80031c8:	4809      	ldr	r0, [pc, #36]	; (80031f0 <StartFlowTask+0x2a8>)
 80031ca:	f002 f9b7 	bl	800553c <HAL_TIM_Base_Stop>
			  total = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  for(int j =0; j < 20; j++)
 80031d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d6:	3301      	adds	r3, #1
 80031d8:	657b      	str	r3, [r7, #84]	; 0x54
 80031da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031dc:	2b13      	cmp	r3, #19
 80031de:	dd95      	ble.n	800310c <StartFlowTask+0x1c4>
		  }
		  for(int j =0; j < 20; j++)
 80031e0:	2300      	movs	r3, #0
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
 80031e4:	e024      	b.n	8003230 <StartFlowTask+0x2e8>
 80031e6:	bf00      	nop
 80031e8:	080090c8 	.word	0x080090c8
 80031ec:	40010c00 	.word	0x40010c00
 80031f0:	200027ec 	.word	0x200027ec
 80031f4:	40011000 	.word	0x40011000
 80031f8:	0004fffa 	.word	0x0004fffa
 80031fc:	51eb851f 	.word	0x51eb851f
 8003200:	2000255c 	.word	0x2000255c
		  {
			  f2 = f2 + C[j];
 8003204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800320c:	4413      	add	r3, r2
 800320e:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8003212:	8a3b      	ldrh	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	823b      	strh	r3, [r7, #16]
			  C[j] = 0;
 800321a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003222:	4413      	add	r3, r2
 8003224:	2200      	movs	r2, #0
 8003226:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 800322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322c:	3301      	adds	r3, #1
 800322e:	653b      	str	r3, [r7, #80]	; 0x50
 8003230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003232:	2b13      	cmp	r3, #19
 8003234:	dde6      	ble.n	8003204 <StartFlowTask+0x2bc>
		  }
		  f2 = f2 / 100;
 8003236:	8a3b      	ldrh	r3, [r7, #16]
 8003238:	4a73      	ldr	r2, [pc, #460]	; (8003408 <StartFlowTask+0x4c0>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	b29b      	uxth	r3, r3
 8003242:	823b      	strh	r3, [r7, #16]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 8003244:	4b71      	ldr	r3, [pc, #452]	; (800340c <StartFlowTask+0x4c4>)
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	f107 010c 	add.w	r1, r7, #12
 800324c:	2300      	movs	r3, #0
 800324e:	2201      	movs	r2, #1
 8003250:	f003 f95e 	bl	8006510 <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f2, 1U, 0U);
 8003254:	4b6d      	ldr	r3, [pc, #436]	; (800340c <StartFlowTask+0x4c4>)
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	f107 0110 	add.w	r1, r7, #16
 800325c:	2300      	movs	r3, #0
 800325e:	2201      	movs	r2, #1
 8003260:	f003 f956 	bl	8006510 <osMessageQueuePut>
		  o[1] = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0 && o[1] == 0)
 8003268:	2120      	movs	r1, #32
 800326a:	4869      	ldr	r0, [pc, #420]	; (8003410 <StartFlowTask+0x4c8>)
 800326c:	f001 fab6 	bl	80047dc <HAL_GPIO_ReadPin>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d104      	bne.n	8003280 <StartFlowTask+0x338>
 8003276:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <StartFlowTask+0x338>
	  {
		  o[1] = 1;
 800327c:	2301      	movs	r3, #1
 800327e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[2] == 1)
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	4863      	ldr	r0, [pc, #396]	; (8003410 <StartFlowTask+0x4c8>)
 8003284:	f001 faaa 	bl	80047dc <HAL_GPIO_ReadPin>
 8003288:	4603      	mov	r3, r0
 800328a:	2b01      	cmp	r3, #1
 800328c:	f040 80aa 	bne.w	80033e4 <StartFlowTask+0x49c>
 8003290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 80a5 	bne.w	80033e4 <StartFlowTask+0x49c>
	  {
		  m = 3;
 800329a:	2303      	movs	r3, #3
 800329c:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 800329e:	2300      	movs	r3, #0
 80032a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032a2:	e066      	b.n	8003372 <StartFlowTask+0x42a>
		  {
			  HAL_TIM_Base_Start(&htim1);
 80032a4:	485b      	ldr	r0, [pc, #364]	; (8003414 <StartFlowTask+0x4cc>)
 80032a6:	f002 f8ff 	bl	80054a8 <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 80032aa:	4b5a      	ldr	r3, [pc, #360]	; (8003414 <StartFlowTask+0x4cc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 80032b4:	e04c      	b.n	8003350 <StartFlowTask+0x408>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b4
 80032b6:	2104      	movs	r1, #4
 80032b8:	4857      	ldr	r0, [pc, #348]	; (8003418 <StartFlowTask+0x4d0>)
 80032ba:	f001 fa8f 	bl	80047dc <HAL_GPIO_ReadPin>
 80032be:	4603      	mov	r3, r0
 80032c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 80032c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d115      	bne.n	80032f8 <StartFlowTask+0x3b0>
 80032cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80032d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d00f      	beq.n	80032f8 <StartFlowTask+0x3b0>
				  {
					  C[j]++;
 80032d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80032e0:	4413      	add	r3, r2
 80032e2:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80032e6:	3301      	adds	r3, #1
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80032f2:	440b      	add	r3, r1
 80032f4:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 80032f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032fc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8003300:	4b44      	ldr	r3, [pc, #272]	; (8003414 <StartFlowTask+0x4cc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 800330a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800330e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003312:	429a      	cmp	r2, r3
 8003314:	d20d      	bcs.n	8003332 <StartFlowTask+0x3ea>
					  total = total + temp + (65535 - tickL);
 8003316:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800331a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800331e:	4413      	add	r3, r2
 8003320:	b29a      	uxth	r2, r3
 8003322:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003330:	e00a      	b.n	8003348 <StartFlowTask+0x400>

				  else
					  total = total+ temp - tickL;
 8003332:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003336:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800333a:	4413      	add	r3, r2
 800333c:	b29a      	uxth	r2, r3
 800333e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 8003348:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800334c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 8003350:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003354:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	4a30      	ldr	r2, [pc, #192]	; (800341c <StartFlowTask+0x4d4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	ddaa      	ble.n	80032b6 <StartFlowTask+0x36e>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8003360:	482c      	ldr	r0, [pc, #176]	; (8003414 <StartFlowTask+0x4cc>)
 8003362:	f002 f8eb 	bl	800553c <HAL_TIM_Base_Stop>
			  total = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  for(int j =0; j < 20; j++)
 800336c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336e:	3301      	adds	r3, #1
 8003370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003374:	2b13      	cmp	r3, #19
 8003376:	dd95      	ble.n	80032a4 <StartFlowTask+0x35c>
		  }
		  for(int j =0; j < 20; j++)
 8003378:	2300      	movs	r3, #0
 800337a:	64bb      	str	r3, [r7, #72]	; 0x48
 800337c:	e015      	b.n	80033aa <StartFlowTask+0x462>
		  {
			  f1 = f1 + C[j];
 800337e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003386:	4413      	add	r3, r2
 8003388:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 800338c:	8a7b      	ldrh	r3, [r7, #18]
 800338e:	4413      	add	r3, r2
 8003390:	b29b      	uxth	r3, r3
 8003392:	827b      	strh	r3, [r7, #18]
			  C[j] = 0;
 8003394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800339c:	4413      	add	r3, r2
 800339e:	2200      	movs	r2, #0
 80033a0:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 80033a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a6:	3301      	adds	r3, #1
 80033a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80033aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ac:	2b13      	cmp	r3, #19
 80033ae:	dde6      	ble.n	800337e <StartFlowTask+0x436>
		  }
		  f3 = f3 / 100;
 80033b0:	89fb      	ldrh	r3, [r7, #14]
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <StartFlowTask+0x4c0>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	81fb      	strh	r3, [r7, #14]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <StartFlowTask+0x4c4>)
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	f107 010c 	add.w	r1, r7, #12
 80033c6:	2300      	movs	r3, #0
 80033c8:	2201      	movs	r2, #1
 80033ca:	f003 f8a1 	bl	8006510 <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f3, 1U, 0U);
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <StartFlowTask+0x4c4>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f107 010e 	add.w	r1, r7, #14
 80033d6:	2300      	movs	r3, #0
 80033d8:	2201      	movs	r2, #1
 80033da:	f003 f899 	bl	8006510 <osMessageQueuePut>
		  o[2] = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[2] == 0)
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	480a      	ldr	r0, [pc, #40]	; (8003410 <StartFlowTask+0x4c8>)
 80033e8:	f001 f9f8 	bl	80047dc <HAL_GPIO_ReadPin>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <StartFlowTask+0x4b8>
 80033f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <StartFlowTask+0x4b8>
	  {
		  o[2] = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  }

	  osDelay(1);
 8003400:	2001      	movs	r0, #1
 8003402:	f002 ffd1 	bl	80063a8 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 8003406:	e5b4      	b.n	8002f72 <StartFlowTask+0x2a>
 8003408:	51eb851f 	.word	0x51eb851f
 800340c:	2000255c 	.word	0x2000255c
 8003410:	40010c00 	.word	0x40010c00
 8003414:	200027ec 	.word	0x200027ec
 8003418:	40011000 	.word	0x40011000
 800341c:	0004fffa 	.word	0x0004fffa

08003420 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	; 0x28
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
	uint16_t userOverride[3], Weather[2], Web[2], Flow[3];
	uint16_t input;
	uint16_t C =0;
 8003428:	2300      	movs	r3, #0
 800342a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Infinite loop */
  for(;;)
  {
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 800342c:	e00a      	b.n	8003444 <StartProcessingTask+0x24>
	  {//when receiving data put it in this array
		  userOverride[C] = input;
 800342e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003430:	89fa      	ldrh	r2, [r7, #14]
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003438:	440b      	add	r3, r1
 800343a:	f823 2c08 	strh.w	r2, [r3, #-8]
		  C++;
 800343e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003440:	3301      	adds	r3, #1
 8003442:	84fb      	strh	r3, [r7, #38]	; 0x26
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 8003444:	4b2c      	ldr	r3, [pc, #176]	; (80034f8 <StartProcessingTask+0xd8>)
 8003446:	6818      	ldr	r0, [r3, #0]
 8003448:	f107 010e 	add.w	r1, r7, #14
 800344c:	2300      	movs	r3, #0
 800344e:	2200      	movs	r2, #0
 8003450:	f003 f8d2 	bl	80065f8 <osMessageQueueGet>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0e9      	beq.n	800342e <StartProcessingTask+0xe>
	  }
	  C = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	84fb      	strh	r3, [r7, #38]	; 0x26
	  while(osMessageQueueGet(WeatherQueueHandle, &input, NULL, 0U ) == osOK)
 800345e:	e00a      	b.n	8003476 <StartProcessingTask+0x56>
	  {//when receiving data put it in this array
		  Weather[C] = input;
 8003460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003462:	89fa      	ldrh	r2, [r7, #14]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800346a:	440b      	add	r3, r1
 800346c:	f823 2c0c 	strh.w	r2, [r3, #-12]
		  C++;
 8003470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003472:	3301      	adds	r3, #1
 8003474:	84fb      	strh	r3, [r7, #38]	; 0x26
	  while(osMessageQueueGet(WeatherQueueHandle, &input, NULL, 0U ) == osOK)
 8003476:	4b21      	ldr	r3, [pc, #132]	; (80034fc <StartProcessingTask+0xdc>)
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	f107 010e 	add.w	r1, r7, #14
 800347e:	2300      	movs	r3, #0
 8003480:	2200      	movs	r2, #0
 8003482:	f003 f8b9 	bl	80065f8 <osMessageQueueGet>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0e9      	beq.n	8003460 <StartProcessingTask+0x40>
	  }
	  C = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	84fb      	strh	r3, [r7, #38]	; 0x26
	  while(osMessageQueueGet(WebsiteQueueHandle, &input, NULL, 0U ) == osOK)
 8003490:	e00a      	b.n	80034a8 <StartProcessingTask+0x88>
	  {//when receiving data put it in this array
		  Web[C] = input;
 8003492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003494:	89fa      	ldrh	r2, [r7, #14]
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800349c:	440b      	add	r3, r1
 800349e:	f823 2c10 	strh.w	r2, [r3, #-16]
		  C++;
 80034a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034a4:	3301      	adds	r3, #1
 80034a6:	84fb      	strh	r3, [r7, #38]	; 0x26
	  while(osMessageQueueGet(WebsiteQueueHandle, &input, NULL, 0U ) == osOK)
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <StartProcessingTask+0xe0>)
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	f107 010e 	add.w	r1, r7, #14
 80034b0:	2300      	movs	r3, #0
 80034b2:	2200      	movs	r2, #0
 80034b4:	f003 f8a0 	bl	80065f8 <osMessageQueueGet>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0e9      	beq.n	8003492 <StartProcessingTask+0x72>
	  }
	  C = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	  while(osMessageQueueGet(FlowQueueHandle, &input, NULL, 0U ) == osOK)
 80034c2:	e00a      	b.n	80034da <StartProcessingTask+0xba>
	  {//when receiving data put it in this array
		  Flow[C] = input;
 80034c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034c6:	89fa      	ldrh	r2, [r7, #14]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80034ce:	440b      	add	r3, r1
 80034d0:	f823 2c18 	strh.w	r2, [r3, #-24]
		  C++;
 80034d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034d6:	3301      	adds	r3, #1
 80034d8:	84fb      	strh	r3, [r7, #38]	; 0x26
	  while(osMessageQueueGet(FlowQueueHandle, &input, NULL, 0U ) == osOK)
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <StartProcessingTask+0xe4>)
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	f107 010e 	add.w	r1, r7, #14
 80034e2:	2300      	movs	r3, #0
 80034e4:	2200      	movs	r2, #0
 80034e6:	f003 f887 	bl	80065f8 <osMessageQueueGet>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0e9      	beq.n	80034c4 <StartProcessingTask+0xa4>
	  }

    osDelay(1);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f002 ff59 	bl	80063a8 <osDelay>
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 80034f6:	e7a5      	b.n	8003444 <StartProcessingTask+0x24>
 80034f8:	20002564 	.word	0x20002564
 80034fc:	20002838 	.word	0x20002838
 8003500:	200027e4 	.word	0x200027e4
 8003504:	2000255c 	.word	0x2000255c

08003508 <StartWebsiteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebsiteTask */
void StartWebsiteTask(void *argument)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b09e      	sub	sp, #120	; 0x78
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	uint16_t water, input;
	uint8_t BufferRX[50], BufferTX[50];
  /* Infinite loop */
  for(;;)
  {
	  if(osMessageQueueGet(SolenoidQueueHandle, &input, NULL, 0U ) == osOK)
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <StartWebsiteTask+0x6c>)
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8003518:	2300      	movs	r3, #0
 800351a:	2200      	movs	r2, #0
 800351c:	f003 f86c 	bl	80065f8 <osMessageQueueGet>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10f      	bne.n	8003546 <StartWebsiteTask+0x3e>
	  {//when receiving data put it in this array
		  water = water + input;
 8003526:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800352a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800352e:	4413      	add	r3, r2
 8003530:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  HAL_UART_Transmit(&huart1, water, 13, 1000);//*********also send Colton's info************
 8003534:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8003538:	4619      	mov	r1, r3
 800353a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800353e:	220d      	movs	r2, #13
 8003540:	480d      	ldr	r0, [pc, #52]	; (8003578 <StartWebsiteTask+0x70>)
 8003542:	f002 fc18 	bl	8005d76 <HAL_UART_Transmit>
	  }
	  if(HAL_UART_Receive(&huart1, BufferRX, 5, 100) == HAL_OK)
 8003546:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800354a:	2364      	movs	r3, #100	; 0x64
 800354c:	2205      	movs	r2, #5
 800354e:	480a      	ldr	r0, [pc, #40]	; (8003578 <StartWebsiteTask+0x70>)
 8003550:	f002 fca3 	bl	8005e9a <HAL_UART_Receive>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d107      	bne.n	800356a <StartWebsiteTask+0x62>
  	  {
  		osMessageQueuePut(WebsiteQueueHandle, &BufferRX, 1U, 0U);
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <StartWebsiteTask+0x74>)
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003562:	2300      	movs	r3, #0
 8003564:	2201      	movs	r2, #1
 8003566:	f002 ffd3 	bl	8006510 <osMessageQueuePut>
  	  }
    osDelay(1);
 800356a:	2001      	movs	r0, #1
 800356c:	f002 ff1c 	bl	80063a8 <osDelay>
	  if(osMessageQueueGet(SolenoidQueueHandle, &input, NULL, 0U ) == osOK)
 8003570:	e7ce      	b.n	8003510 <StartWebsiteTask+0x8>
 8003572:	bf00      	nop
 8003574:	20002558 	.word	0x20002558
 8003578:	200024e4 	.word	0x200024e4
 800357c:	200027e4 	.word	0x200027e4

08003580 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003592:	f000 fa6f 	bl	8003a74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40000800 	.word	0x40000800

080035a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035a8:	b672      	cpsid	i
}
 80035aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035ac:	e7fe      	b.n	80035ac <Error_Handler+0x8>
	...

080035b0 <initializeNodes>:
 */

#include "sensorObjects.h"

void initializeNodes()
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 80035b6:	4a34      	ldr	r2, [pc, #208]	; (8003688 <initializeNodes+0xd8>)
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 80035c4:	4a31      	ldr	r2, [pc, #196]	; (800368c <initializeNodes+0xdc>)
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ce:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <initializeNodes+0xe0>)
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035da:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e01e      	b.n	8003626 <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 80035e8:	7ffb      	ldrb	r3, [r7, #31]
 80035ea:	4a2a      	ldr	r2, [pc, #168]	; (8003694 <initializeNodes+0xe4>)
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	4413      	add	r3, r2
 80035f0:	330c      	adds	r3, #12
 80035f2:	2200      	movs	r2, #0
 80035f4:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 80035f6:	7ffb      	ldrb	r3, [r7, #31]
 80035f8:	4a26      	ldr	r2, [pc, #152]	; (8003694 <initializeNodes+0xe4>)
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	4413      	add	r3, r2
 80035fe:	330a      	adds	r3, #10
 8003600:	2200      	movs	r2, #0
 8003602:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8003604:	7ffb      	ldrb	r3, [r7, #31]
 8003606:	4a23      	ldr	r2, [pc, #140]	; (8003694 <initializeNodes+0xe4>)
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	3308      	adds	r3, #8
 800360e:	2200      	movs	r2, #0
 8003610:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <initializeNodes+0xe4>)
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	4413      	add	r3, r2
 800361a:	330e      	adds	r3, #14
 800361c:	2200      	movs	r2, #0
 800361e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 8003620:	7ffb      	ldrb	r3, [r7, #31]
 8003622:	3301      	adds	r3, #1
 8003624:	77fb      	strb	r3, [r7, #31]
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	2b1f      	cmp	r3, #31
 800362a:	d9dd      	bls.n	80035e8 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e022      	b.n	8003678 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 8003632:	7ffa      	ldrb	r2, [r7, #31]
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	f107 0120 	add.w	r1, r7, #32
 800363a:	440a      	add	r2, r1
 800363c:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8003640:	4a14      	ldr	r2, [pc, #80]	; (8003694 <initializeNodes+0xe4>)
 8003642:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8003644:	7ffa      	ldrb	r2, [r7, #31]
 8003646:	7ffb      	ldrb	r3, [r7, #31]
 8003648:	f107 0120 	add.w	r1, r7, #32
 800364c:	440a      	add	r2, r1
 800364e:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8003652:	4a10      	ldr	r2, [pc, #64]	; (8003694 <initializeNodes+0xe4>)
 8003654:	4413      	add	r3, r2
 8003656:	460a      	mov	r2, r1
 8003658:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 800365a:	7ffa      	ldrb	r2, [r7, #31]
 800365c:	7ffb      	ldrb	r3, [r7, #31]
 800365e:	f107 0120 	add.w	r1, r7, #32
 8003662:	440a      	add	r2, r1
 8003664:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <initializeNodes+0xe4>)
 800366a:	4413      	add	r3, r2
 800366c:	460a      	mov	r2, r1
 800366e:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 8003672:	7ffb      	ldrb	r3, [r7, #31]
 8003674:	3301      	adds	r3, #1
 8003676:	77fb      	strb	r3, [r7, #31]
 8003678:	7ffb      	ldrb	r3, [r7, #31]
 800367a:	2b07      	cmp	r3, #7
 800367c:	d9d9      	bls.n	8003632 <initializeNodes+0x82>
	}

	return;
 800367e:	bf00      	nop
}
 8003680:	3724      	adds	r7, #36	; 0x24
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	080090d0 	.word	0x080090d0
 800368c:	080090d8 	.word	0x080090d8
 8003690:	080090e0 	.word	0x080090e0
 8003694:	20002568 	.word	0x20002568

08003698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800369e:	4b18      	ldr	r3, [pc, #96]	; (8003700 <HAL_MspInit+0x68>)
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	4a17      	ldr	r2, [pc, #92]	; (8003700 <HAL_MspInit+0x68>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6193      	str	r3, [r2, #24]
 80036aa:	4b15      	ldr	r3, [pc, #84]	; (8003700 <HAL_MspInit+0x68>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_MspInit+0x68>)
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	4a11      	ldr	r2, [pc, #68]	; (8003700 <HAL_MspInit+0x68>)
 80036bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c0:	61d3      	str	r3, [r2, #28]
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_MspInit+0x68>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	210f      	movs	r1, #15
 80036d2:	f06f 0001 	mvn.w	r0, #1
 80036d6:	f000 fed2 	bl	800447e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_MspInit+0x6c>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_MspInit+0x6c>)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f6:	bf00      	nop
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	40010000 	.word	0x40010000

08003708 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0310 	add.w	r3, r7, #16
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <HAL_ADC_MspInit+0x6c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d121      	bne.n	800376c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003728:	4b13      	ldr	r3, [pc, #76]	; (8003778 <HAL_ADC_MspInit+0x70>)
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	4a12      	ldr	r2, [pc, #72]	; (8003778 <HAL_ADC_MspInit+0x70>)
 800372e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003732:	6193      	str	r3, [r2, #24]
 8003734:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_ADC_MspInit+0x70>)
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003740:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <HAL_ADC_MspInit+0x70>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <HAL_ADC_MspInit+0x70>)
 8003746:	f043 0310 	orr.w	r3, r3, #16
 800374a:	6193      	str	r3, [r2, #24]
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <HAL_ADC_MspInit+0x70>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0310 	and.w	r3, r3, #16
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003758:	2320      	movs	r3, #32
 800375a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375c:	2303      	movs	r3, #3
 800375e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003760:	f107 0310 	add.w	r3, r7, #16
 8003764:	4619      	mov	r1, r3
 8003766:	4805      	ldr	r0, [pc, #20]	; (800377c <HAL_ADC_MspInit+0x74>)
 8003768:	f000 feb4 	bl	80044d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800376c:	bf00      	nop
 800376e:	3720      	adds	r7, #32
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012400 	.word	0x40012400
 8003778:	40021000 	.word	0x40021000
 800377c:	40011000 	.word	0x40011000

08003780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <HAL_TIM_Base_MspInit+0x58>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d10c      	bne.n	80037ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_TIM_Base_MspInit+0x5c>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	4a11      	ldr	r2, [pc, #68]	; (80037dc <HAL_TIM_Base_MspInit+0x5c>)
 8003798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800379c:	6193      	str	r3, [r2, #24]
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <HAL_TIM_Base_MspInit+0x5c>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80037aa:	e010      	b.n	80037ce <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b4:	d10b      	bne.n	80037ce <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_TIM_Base_MspInit+0x5c>)
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	4a08      	ldr	r2, [pc, #32]	; (80037dc <HAL_TIM_Base_MspInit+0x5c>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	61d3      	str	r3, [r2, #28]
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_TIM_Base_MspInit+0x5c>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
}
 80037ce:	bf00      	nop
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40021000 	.word	0x40021000

080037e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e8:	f107 0318 	add.w	r3, r7, #24
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a38      	ldr	r2, [pc, #224]	; (80038dc <HAL_UART_MspInit+0xfc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d132      	bne.n	8003866 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003800:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <HAL_UART_MspInit+0x100>)
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	4a36      	ldr	r2, [pc, #216]	; (80038e0 <HAL_UART_MspInit+0x100>)
 8003806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380a:	6193      	str	r3, [r2, #24]
 800380c:	4b34      	ldr	r3, [pc, #208]	; (80038e0 <HAL_UART_MspInit+0x100>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_UART_MspInit+0x100>)
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	4a30      	ldr	r2, [pc, #192]	; (80038e0 <HAL_UART_MspInit+0x100>)
 800381e:	f043 0304 	orr.w	r3, r3, #4
 8003822:	6193      	str	r3, [r2, #24]
 8003824:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <HAL_UART_MspInit+0x100>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003836:	2302      	movs	r3, #2
 8003838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800383a:	2303      	movs	r3, #3
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383e:	f107 0318 	add.w	r3, r7, #24
 8003842:	4619      	mov	r1, r3
 8003844:	4827      	ldr	r0, [pc, #156]	; (80038e4 <HAL_UART_MspInit+0x104>)
 8003846:	f000 fe45 	bl	80044d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800384a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800384e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	f107 0318 	add.w	r3, r7, #24
 800385c:	4619      	mov	r1, r3
 800385e:	4821      	ldr	r0, [pc, #132]	; (80038e4 <HAL_UART_MspInit+0x104>)
 8003860:	f000 fe38 	bl	80044d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003864:	e036      	b.n	80038d4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1f      	ldr	r2, [pc, #124]	; (80038e8 <HAL_UART_MspInit+0x108>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d131      	bne.n	80038d4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_UART_MspInit+0x100>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4a1a      	ldr	r2, [pc, #104]	; (80038e0 <HAL_UART_MspInit+0x100>)
 8003876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387a:	61d3      	str	r3, [r2, #28]
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_UART_MspInit+0x100>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003888:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_UART_MspInit+0x100>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	4a14      	ldr	r2, [pc, #80]	; (80038e0 <HAL_UART_MspInit+0x100>)
 800388e:	f043 0308 	orr.w	r3, r3, #8
 8003892:	6193      	str	r3, [r2, #24]
 8003894:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <HAL_UART_MspInit+0x100>)
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	f003 0308 	and.w	r3, r3, #8
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038aa:	2303      	movs	r3, #3
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ae:	f107 0318 	add.w	r3, r7, #24
 80038b2:	4619      	mov	r1, r3
 80038b4:	480d      	ldr	r0, [pc, #52]	; (80038ec <HAL_UART_MspInit+0x10c>)
 80038b6:	f000 fe0d 	bl	80044d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c8:	f107 0318 	add.w	r3, r7, #24
 80038cc:	4619      	mov	r1, r3
 80038ce:	4807      	ldr	r0, [pc, #28]	; (80038ec <HAL_UART_MspInit+0x10c>)
 80038d0:	f000 fe00 	bl	80044d4 <HAL_GPIO_Init>
}
 80038d4:	bf00      	nop
 80038d6:	3728      	adds	r7, #40	; 0x28
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40013800 	.word	0x40013800
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40010800 	.word	0x40010800
 80038e8:	40004800 	.word	0x40004800
 80038ec:	40010c00 	.word	0x40010c00

080038f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08c      	sub	sp, #48	; 0x30
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8003900:	2200      	movs	r2, #0
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	201e      	movs	r0, #30
 8003906:	f000 fdba 	bl	800447e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800390a:	201e      	movs	r0, #30
 800390c:	f000 fdd3 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003910:	4b1f      	ldr	r3, [pc, #124]	; (8003990 <HAL_InitTick+0xa0>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <HAL_InitTick+0xa0>)
 8003916:	f043 0304 	orr.w	r3, r3, #4
 800391a:	61d3      	str	r3, [r2, #28]
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <HAL_InitTick+0xa0>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003928:	f107 0210 	add.w	r2, r7, #16
 800392c:	f107 0314 	add.w	r3, r7, #20
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f001 fba0 	bl	8005078 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003938:	f001 fb76 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 800393c:	4603      	mov	r3, r0
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003944:	4a13      	ldr	r2, [pc, #76]	; (8003994 <HAL_InitTick+0xa4>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	0c9b      	lsrs	r3, r3, #18
 800394c:	3b01      	subs	r3, #1
 800394e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_InitTick+0xa8>)
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <HAL_InitTick+0xac>)
 8003954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_InitTick+0xa8>)
 8003958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800395c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800395e:	4a0e      	ldr	r2, [pc, #56]	; (8003998 <HAL_InitTick+0xa8>)
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <HAL_InitTick+0xa8>)
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_InitTick+0xa8>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003970:	4809      	ldr	r0, [pc, #36]	; (8003998 <HAL_InitTick+0xa8>)
 8003972:	f001 fd49 	bl	8005408 <HAL_TIM_Base_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800397c:	4806      	ldr	r0, [pc, #24]	; (8003998 <HAL_InitTick+0xa8>)
 800397e:	f001 fe03 	bl	8005588 <HAL_TIM_Base_Start_IT>
 8003982:	4603      	mov	r3, r0
 8003984:	e000      	b.n	8003988 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
}
 8003988:	4618      	mov	r0, r3
 800398a:	3730      	adds	r7, #48	; 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40021000 	.word	0x40021000
 8003994:	431bde83 	.word	0x431bde83
 8003998:	200028c0 	.word	0x200028c0
 800399c:	40000800 	.word	0x40000800

080039a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039a4:	e7fe      	b.n	80039a4 <NMI_Handler+0x4>

080039a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039a6:	b480      	push	{r7}
 80039a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039aa:	e7fe      	b.n	80039aa <HardFault_Handler+0x4>

080039ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b0:	e7fe      	b.n	80039b0 <MemManage_Handler+0x4>

080039b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039b2:	b480      	push	{r7}
 80039b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b6:	e7fe      	b.n	80039b6 <BusFault_Handler+0x4>

080039b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039bc:	e7fe      	b.n	80039bc <UsageFault_Handler+0x4>

080039be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
	...

080039cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <TIM4_IRQHandler+0x10>)
 80039d2:	f001 fe2b 	bl	800562c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200028c0 	.word	0x200028c0

080039e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80039e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80039e8:	f000 ff28 	bl	800483c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr

080039fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80039fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80039fe:	e003      	b.n	8003a08 <LoopCopyDataInit>

08003a00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003a02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003a04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003a06:	3104      	adds	r1, #4

08003a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003a08:	480a      	ldr	r0, [pc, #40]	; (8003a34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003a0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003a0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003a10:	d3f6      	bcc.n	8003a00 <CopyDataInit>
  ldr r2, =_sbss
 8003a12:	4a0a      	ldr	r2, [pc, #40]	; (8003a3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003a14:	e002      	b.n	8003a1c <LoopFillZerobss>

08003a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003a16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003a18:	f842 3b04 	str.w	r3, [r2], #4

08003a1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003a1c:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003a1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003a20:	d3f9      	bcc.n	8003a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a22:	f7ff ffe5 	bl	80039f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a26:	f005 fab1 	bl	8008f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a2a:	f7fd ff57 	bl	80018dc <main>
  bx lr
 8003a2e:	4770      	bx	lr
  ldr r3, =_sidata
 8003a30:	080092cc 	.word	0x080092cc
  ldr r0, =_sdata
 8003a34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003a38:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003a3c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003a40:	2000294c 	.word	0x2000294c

08003a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a44:	e7fe      	b.n	8003a44 <ADC1_2_IRQHandler>
	...

08003a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_Init+0x28>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <HAL_Init+0x28>)
 8003a52:	f043 0310 	orr.w	r3, r3, #16
 8003a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a58:	2003      	movs	r0, #3
 8003a5a:	f000 fd05 	bl	8004468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7ff ff46 	bl	80038f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a64:	f7ff fe18 	bl	8003698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40022000 	.word	0x40022000

08003a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_IncTick+0x1c>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_IncTick+0x20>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	4a03      	ldr	r2, [pc, #12]	; (8003a94 <HAL_IncTick+0x20>)
 8003a86:	6013      	str	r3, [r2, #0]
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	20000008 	.word	0x20000008
 8003a94:	20002908 	.word	0x20002908

08003a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <HAL_GetTick+0x10>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20002908 	.word	0x20002908

08003aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7ff fff0 	bl	8003a98 <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d005      	beq.n	8003ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_Delay+0x44>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ad2:	bf00      	nop
 8003ad4:	f7ff ffe0 	bl	8003a98 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d8f7      	bhi.n	8003ad4 <HAL_Delay+0x28>
  {
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000008 	.word	0x20000008

08003af4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e0be      	b.n	8003c94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff fde8 	bl	8003708 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fbb1 	bl	80042a0 <ADC_ConversionStop_Disable>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 8099 	bne.w	8003c82 <HAL_ADC_Init+0x18e>
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f040 8095 	bne.w	8003c82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b60:	f023 0302 	bic.w	r3, r3, #2
 8003b64:	f043 0202 	orr.w	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7b1b      	ldrb	r3, [r3, #12]
 8003b7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003b7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b8c:	d003      	beq.n	8003b96 <HAL_ADC_Init+0xa2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d102      	bne.n	8003b9c <HAL_ADC_Init+0xa8>
 8003b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b9a:	e000      	b.n	8003b9e <HAL_ADC_Init+0xaa>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7d1b      	ldrb	r3, [r3, #20]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d119      	bne.n	8003be0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7b1b      	ldrb	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	035a      	lsls	r2, r3, #13
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	e00b      	b.n	8003be0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	f043 0220 	orr.w	r2, r3, #32
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f043 0201 	orr.w	r2, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	4b28      	ldr	r3, [pc, #160]	; (8003c9c <HAL_ADC_Init+0x1a8>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	430b      	orrs	r3, r1
 8003c06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c10:	d003      	beq.n	8003c1a <HAL_ADC_Init+0x126>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d104      	bne.n	8003c24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	051b      	lsls	r3, r3, #20
 8003c22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	4b18      	ldr	r3, [pc, #96]	; (8003ca0 <HAL_ADC_Init+0x1ac>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d10b      	bne.n	8003c60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c5e:	e018      	b.n	8003c92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c64:	f023 0312 	bic.w	r3, r3, #18
 8003c68:	f043 0210 	orr.w	r2, r3, #16
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003c80:	e007      	b.n	8003c92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c86:	f043 0210 	orr.w	r2, r3, #16
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	ffe1f7fd 	.word	0xffe1f7fd
 8003ca0:	ff1f0efe 	.word	0xff1f0efe

08003ca4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_Start+0x1a>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e098      	b.n	8003df0 <HAL_ADC_Start+0x14c>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa98 	bl	80041fc <ADC_Enable>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 8087 	bne.w	8003de6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a41      	ldr	r2, [pc, #260]	; (8003df8 <HAL_ADC_Start+0x154>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d105      	bne.n	8003d02 <HAL_ADC_Start+0x5e>
 8003cf6:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_ADC_Start+0x158>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d115      	bne.n	8003d2e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d026      	beq.n	8003d6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d2c:	e01d      	b.n	8003d6a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a2f      	ldr	r2, [pc, #188]	; (8003dfc <HAL_ADC_Start+0x158>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d004      	beq.n	8003d4e <HAL_ADC_Start+0xaa>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_ADC_Start+0x154>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d10d      	bne.n	8003d6a <HAL_ADC_Start+0xc6>
 8003d4e:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_ADC_Start+0x158>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	f023 0206 	bic.w	r2, r3, #6
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d82:	e002      	b.n	8003d8a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f06f 0202 	mvn.w	r2, #2
 8003d9a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003da6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003daa:	d113      	bne.n	8003dd4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <HAL_ADC_Start+0x154>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d105      	bne.n	8003dc2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_ADC_Start+0x158>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d108      	bne.n	8003dd4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	e00c      	b.n	8003dee <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	e003      	b.n	8003dee <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40012800 	.word	0x40012800
 8003dfc:	40012400 	.word	0x40012400

08003e00 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003e00:	b590      	push	{r4, r7, lr}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e16:	f7ff fe3f 	bl	8003a98 <HAL_GetTick>
 8003e1a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	f043 0220 	orr.w	r2, r3, #32
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0c8      	b.n	8003fd4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d12a      	bne.n	8003ea6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d123      	bne.n	8003ea6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003e5e:	e01a      	b.n	8003e96 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d016      	beq.n	8003e96 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d007      	beq.n	8003e7e <HAL_ADC_PollForConversion+0x7e>
 8003e6e:	f7ff fe13 	bl	8003a98 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d20b      	bcs.n	8003e96 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e82:	f043 0204 	orr.w	r2, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e09e      	b.n	8003fd4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0dd      	beq.n	8003e60 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003ea4:	e06c      	b.n	8003f80 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003ea6:	4b4d      	ldr	r3, [pc, #308]	; (8003fdc <HAL_ADC_PollForConversion+0x1dc>)
 8003ea8:	681c      	ldr	r4, [r3, #0]
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f001 f9e8 	bl	8005280 <HAL_RCCEx_GetPeriphCLKFreq>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6919      	ldr	r1, [r3, #16]
 8003ebc:	4b48      	ldr	r3, [pc, #288]	; (8003fe0 <HAL_ADC_PollForConversion+0x1e0>)
 8003ebe:	400b      	ands	r3, r1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d118      	bne.n	8003ef6 <HAL_ADC_PollForConversion+0xf6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68d9      	ldr	r1, [r3, #12]
 8003eca:	4b46      	ldr	r3, [pc, #280]	; (8003fe4 <HAL_ADC_PollForConversion+0x1e4>)
 8003ecc:	400b      	ands	r3, r1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d111      	bne.n	8003ef6 <HAL_ADC_PollForConversion+0xf6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6919      	ldr	r1, [r3, #16]
 8003ed8:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <HAL_ADC_PollForConversion+0x1e8>)
 8003eda:	400b      	ands	r3, r1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d108      	bne.n	8003ef2 <HAL_ADC_PollForConversion+0xf2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68d9      	ldr	r1, [r3, #12]
 8003ee6:	4b41      	ldr	r3, [pc, #260]	; (8003fec <HAL_ADC_PollForConversion+0x1ec>)
 8003ee8:	400b      	ands	r3, r1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_PollForConversion+0xf2>
 8003eee:	2314      	movs	r3, #20
 8003ef0:	e020      	b.n	8003f34 <HAL_ADC_PollForConversion+0x134>
 8003ef2:	2329      	movs	r3, #41	; 0x29
 8003ef4:	e01e      	b.n	8003f34 <HAL_ADC_PollForConversion+0x134>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6919      	ldr	r1, [r3, #16]
 8003efc:	4b3a      	ldr	r3, [pc, #232]	; (8003fe8 <HAL_ADC_PollForConversion+0x1e8>)
 8003efe:	400b      	ands	r3, r1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_ADC_PollForConversion+0x112>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68d9      	ldr	r1, [r3, #12]
 8003f0a:	4b38      	ldr	r3, [pc, #224]	; (8003fec <HAL_ADC_PollForConversion+0x1ec>)
 8003f0c:	400b      	ands	r3, r1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <HAL_ADC_PollForConversion+0x12e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6919      	ldr	r1, [r3, #16]
 8003f18:	4b35      	ldr	r3, [pc, #212]	; (8003ff0 <HAL_ADC_PollForConversion+0x1f0>)
 8003f1a:	400b      	ands	r3, r1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d108      	bne.n	8003f32 <HAL_ADC_PollForConversion+0x132>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68d9      	ldr	r1, [r3, #12]
 8003f26:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <HAL_ADC_PollForConversion+0x1f0>)
 8003f28:	400b      	ands	r3, r1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_PollForConversion+0x132>
 8003f2e:	2354      	movs	r3, #84	; 0x54
 8003f30:	e000      	b.n	8003f34 <HAL_ADC_PollForConversion+0x134>
 8003f32:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003f34:	fb02 f303 	mul.w	r3, r2, r3
 8003f38:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003f3a:	e01d      	b.n	8003f78 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d016      	beq.n	8003f72 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <HAL_ADC_PollForConversion+0x15a>
 8003f4a:	f7ff fda5 	bl	8003a98 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d20b      	bcs.n	8003f72 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	f043 0204 	orr.w	r2, r3, #4
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e030      	b.n	8003fd4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3301      	adds	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d8dd      	bhi.n	8003f3c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0212 	mvn.w	r2, #18
 8003f88:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003fa0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003fa4:	d115      	bne.n	8003fd2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d111      	bne.n	8003fd2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d105      	bne.n	8003fd2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	24924924 	.word	0x24924924
 8003fe4:	00924924 	.word	0x00924924
 8003fe8:	12492492 	.word	0x12492492
 8003fec:	00492492 	.word	0x00492492
 8003ff0:	00249249 	.word	0x00249249

08003ff4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr

0800400c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800401a:	2300      	movs	r3, #0
 800401c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_ADC_ConfigChannel+0x20>
 8004028:	2302      	movs	r3, #2
 800402a:	e0dc      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x1da>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b06      	cmp	r3, #6
 800403a:	d81c      	bhi.n	8004076 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	3b05      	subs	r3, #5
 800404e:	221f      	movs	r2, #31
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	4019      	ands	r1, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	3b05      	subs	r3, #5
 8004068:	fa00 f203 	lsl.w	r2, r0, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	635a      	str	r2, [r3, #52]	; 0x34
 8004074:	e03c      	b.n	80040f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d81c      	bhi.n	80040b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	3b23      	subs	r3, #35	; 0x23
 8004090:	221f      	movs	r2, #31
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	4019      	ands	r1, r3
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	3b23      	subs	r3, #35	; 0x23
 80040aa:	fa00 f203 	lsl.w	r2, r0, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	631a      	str	r2, [r3, #48]	; 0x30
 80040b6:	e01b      	b.n	80040f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	3b41      	subs	r3, #65	; 0x41
 80040ca:	221f      	movs	r2, #31
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	4019      	ands	r1, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	3b41      	subs	r3, #65	; 0x41
 80040e4:	fa00 f203 	lsl.w	r2, r0, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d91c      	bls.n	8004132 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68d9      	ldr	r1, [r3, #12]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	4413      	add	r3, r2
 8004108:	3b1e      	subs	r3, #30
 800410a:	2207      	movs	r2, #7
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	4019      	ands	r1, r3
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6898      	ldr	r0, [r3, #8]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	3b1e      	subs	r3, #30
 8004124:	fa00 f203 	lsl.w	r2, r0, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	60da      	str	r2, [r3, #12]
 8004130:	e019      	b.n	8004166 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6919      	ldr	r1, [r3, #16]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4613      	mov	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	4413      	add	r3, r2
 8004142:	2207      	movs	r2, #7
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	4019      	ands	r1, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6898      	ldr	r0, [r3, #8]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	fa00 f203 	lsl.w	r2, r0, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b10      	cmp	r3, #16
 800416c:	d003      	beq.n	8004176 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004172:	2b11      	cmp	r3, #17
 8004174:	d132      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1d      	ldr	r2, [pc, #116]	; (80041f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d125      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d126      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800419c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d11a      	bne.n	80041dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041a6:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a13      	ldr	r2, [pc, #76]	; (80041f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	0c9a      	lsrs	r2, r3, #18
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041bc:	e002      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f9      	bne.n	80041be <HAL_ADC_ConfigChannel+0x1b2>
 80041ca:	e007      	b.n	80041dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	f043 0220 	orr.w	r2, r3, #32
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr
 80041f0:	40012400 	.word	0x40012400
 80041f4:	20000000 	.word	0x20000000
 80041f8:	431bde83 	.word	0x431bde83

080041fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b01      	cmp	r3, #1
 8004218:	d039      	beq.n	800428e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <ADC_Enable+0x9c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1b      	ldr	r2, [pc, #108]	; (800429c <ADC_Enable+0xa0>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	0c9b      	lsrs	r3, r3, #18
 8004236:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004238:	e002      	b.n	8004240 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3b01      	subs	r3, #1
 800423e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1f9      	bne.n	800423a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004246:	f7ff fc27 	bl	8003a98 <HAL_GetTick>
 800424a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800424c:	e018      	b.n	8004280 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800424e:	f7ff fc23 	bl	8003a98 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d911      	bls.n	8004280 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004260:	f043 0210 	orr.w	r2, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e007      	b.n	8004290 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d1df      	bne.n	800424e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000000 	.word	0x20000000
 800429c:	431bde83 	.word	0x431bde83

080042a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d127      	bne.n	800430a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80042ca:	f7ff fbe5 	bl	8003a98 <HAL_GetTick>
 80042ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80042d0:	e014      	b.n	80042fc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042d2:	f7ff fbe1 	bl	8003a98 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d90d      	bls.n	80042fc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	f043 0210 	orr.w	r2, r3, #16
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f043 0201 	orr.w	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e007      	b.n	800430c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b01      	cmp	r3, #1
 8004308:	d0e3      	beq.n	80042d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <__NVIC_SetPriorityGrouping+0x44>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004330:	4013      	ands	r3, r2
 8004332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800433c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004346:	4a04      	ldr	r2, [pc, #16]	; (8004358 <__NVIC_SetPriorityGrouping+0x44>)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	60d3      	str	r3, [r2, #12]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <__NVIC_GetPriorityGrouping+0x18>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	f003 0307 	and.w	r3, r3, #7
}
 800436a:	4618      	mov	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	2b00      	cmp	r3, #0
 8004388:	db0b      	blt.n	80043a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	4906      	ldr	r1, [pc, #24]	; (80043ac <__NVIC_EnableIRQ+0x34>)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2001      	movs	r0, #1
 800439a:	fa00 f202 	lsl.w	r2, r0, r2
 800439e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	e000e100 	.word	0xe000e100

080043b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	4603      	mov	r3, r0
 80043b8:	6039      	str	r1, [r7, #0]
 80043ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	db0a      	blt.n	80043da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	490c      	ldr	r1, [pc, #48]	; (80043fc <__NVIC_SetPriority+0x4c>)
 80043ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ce:	0112      	lsls	r2, r2, #4
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	440b      	add	r3, r1
 80043d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043d8:	e00a      	b.n	80043f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4908      	ldr	r1, [pc, #32]	; (8004400 <__NVIC_SetPriority+0x50>)
 80043e0:	79fb      	ldrb	r3, [r7, #7]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	3b04      	subs	r3, #4
 80043e8:	0112      	lsls	r2, r2, #4
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	440b      	add	r3, r1
 80043ee:	761a      	strb	r2, [r3, #24]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	e000e100 	.word	0xe000e100
 8004400:	e000ed00 	.word	0xe000ed00

08004404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004404:	b480      	push	{r7}
 8004406:	b089      	sub	sp, #36	; 0x24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f1c3 0307 	rsb	r3, r3, #7
 800441e:	2b04      	cmp	r3, #4
 8004420:	bf28      	it	cs
 8004422:	2304      	movcs	r3, #4
 8004424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	3304      	adds	r3, #4
 800442a:	2b06      	cmp	r3, #6
 800442c:	d902      	bls.n	8004434 <NVIC_EncodePriority+0x30>
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3b03      	subs	r3, #3
 8004432:	e000      	b.n	8004436 <NVIC_EncodePriority+0x32>
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	fa02 f303 	lsl.w	r3, r2, r3
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	401a      	ands	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800444c:	f04f 31ff 	mov.w	r1, #4294967295
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	43d9      	mvns	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	4313      	orrs	r3, r2
         );
}
 800445e:	4618      	mov	r0, r3
 8004460:	3724      	adds	r7, #36	; 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ff4f 	bl	8004314 <__NVIC_SetPriorityGrouping>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af00      	add	r7, sp, #0
 8004484:	4603      	mov	r3, r0
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004490:	f7ff ff64 	bl	800435c <__NVIC_GetPriorityGrouping>
 8004494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	6978      	ldr	r0, [r7, #20]
 800449c:	f7ff ffb2 	bl	8004404 <NVIC_EncodePriority>
 80044a0:	4602      	mov	r2, r0
 80044a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff81 	bl	80043b0 <__NVIC_SetPriority>
}
 80044ae:	bf00      	nop
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff57 	bl	8004378 <__NVIC_EnableIRQ>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b08b      	sub	sp, #44	; 0x2c
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044e2:	2300      	movs	r3, #0
 80044e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044e6:	e169      	b.n	80047bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044e8:	2201      	movs	r2, #1
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	429a      	cmp	r2, r3
 8004502:	f040 8158 	bne.w	80047b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	4a9a      	ldr	r2, [pc, #616]	; (8004774 <HAL_GPIO_Init+0x2a0>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d05e      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 8004510:	4a98      	ldr	r2, [pc, #608]	; (8004774 <HAL_GPIO_Init+0x2a0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d875      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 8004516:	4a98      	ldr	r2, [pc, #608]	; (8004778 <HAL_GPIO_Init+0x2a4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d058      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 800451c:	4a96      	ldr	r2, [pc, #600]	; (8004778 <HAL_GPIO_Init+0x2a4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d86f      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 8004522:	4a96      	ldr	r2, [pc, #600]	; (800477c <HAL_GPIO_Init+0x2a8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d052      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 8004528:	4a94      	ldr	r2, [pc, #592]	; (800477c <HAL_GPIO_Init+0x2a8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d869      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 800452e:	4a94      	ldr	r2, [pc, #592]	; (8004780 <HAL_GPIO_Init+0x2ac>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d04c      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 8004534:	4a92      	ldr	r2, [pc, #584]	; (8004780 <HAL_GPIO_Init+0x2ac>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d863      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 800453a:	4a92      	ldr	r2, [pc, #584]	; (8004784 <HAL_GPIO_Init+0x2b0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d046      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
 8004540:	4a90      	ldr	r2, [pc, #576]	; (8004784 <HAL_GPIO_Init+0x2b0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d85d      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 8004546:	2b12      	cmp	r3, #18
 8004548:	d82a      	bhi.n	80045a0 <HAL_GPIO_Init+0xcc>
 800454a:	2b12      	cmp	r3, #18
 800454c:	d859      	bhi.n	8004602 <HAL_GPIO_Init+0x12e>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <HAL_GPIO_Init+0x80>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	080045cf 	.word	0x080045cf
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080045bb 	.word	0x080045bb
 8004560:	080045fd 	.word	0x080045fd
 8004564:	08004603 	.word	0x08004603
 8004568:	08004603 	.word	0x08004603
 800456c:	08004603 	.word	0x08004603
 8004570:	08004603 	.word	0x08004603
 8004574:	08004603 	.word	0x08004603
 8004578:	08004603 	.word	0x08004603
 800457c:	08004603 	.word	0x08004603
 8004580:	08004603 	.word	0x08004603
 8004584:	08004603 	.word	0x08004603
 8004588:	08004603 	.word	0x08004603
 800458c:	08004603 	.word	0x08004603
 8004590:	08004603 	.word	0x08004603
 8004594:	08004603 	.word	0x08004603
 8004598:	080045b1 	.word	0x080045b1
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	4a79      	ldr	r2, [pc, #484]	; (8004788 <HAL_GPIO_Init+0x2b4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045a6:	e02c      	b.n	8004602 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	623b      	str	r3, [r7, #32]
          break;
 80045ae:	e029      	b.n	8004604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	3304      	adds	r3, #4
 80045b6:	623b      	str	r3, [r7, #32]
          break;
 80045b8:	e024      	b.n	8004604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	3308      	adds	r3, #8
 80045c0:	623b      	str	r3, [r7, #32]
          break;
 80045c2:	e01f      	b.n	8004604 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	330c      	adds	r3, #12
 80045ca:	623b      	str	r3, [r7, #32]
          break;
 80045cc:	e01a      	b.n	8004604 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045d6:	2304      	movs	r3, #4
 80045d8:	623b      	str	r3, [r7, #32]
          break;
 80045da:	e013      	b.n	8004604 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d105      	bne.n	80045f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045e4:	2308      	movs	r3, #8
 80045e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	611a      	str	r2, [r3, #16]
          break;
 80045ee:	e009      	b.n	8004604 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045f0:	2308      	movs	r3, #8
 80045f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	615a      	str	r2, [r3, #20]
          break;
 80045fa:	e003      	b.n	8004604 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045fc:	2300      	movs	r3, #0
 80045fe:	623b      	str	r3, [r7, #32]
          break;
 8004600:	e000      	b.n	8004604 <HAL_GPIO_Init+0x130>
          break;
 8004602:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	2bff      	cmp	r3, #255	; 0xff
 8004608:	d801      	bhi.n	800460e <HAL_GPIO_Init+0x13a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	e001      	b.n	8004612 <HAL_GPIO_Init+0x13e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3304      	adds	r3, #4
 8004612:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2bff      	cmp	r3, #255	; 0xff
 8004618:	d802      	bhi.n	8004620 <HAL_GPIO_Init+0x14c>
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	e002      	b.n	8004626 <HAL_GPIO_Init+0x152>
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	3b08      	subs	r3, #8
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	210f      	movs	r1, #15
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	fa01 f303 	lsl.w	r3, r1, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	401a      	ands	r2, r3
 8004638:	6a39      	ldr	r1, [r7, #32]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	431a      	orrs	r2, r3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 80b1 	beq.w	80047b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004654:	4b4d      	ldr	r3, [pc, #308]	; (800478c <HAL_GPIO_Init+0x2b8>)
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	4a4c      	ldr	r2, [pc, #304]	; (800478c <HAL_GPIO_Init+0x2b8>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6193      	str	r3, [r2, #24]
 8004660:	4b4a      	ldr	r3, [pc, #296]	; (800478c <HAL_GPIO_Init+0x2b8>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800466c:	4a48      	ldr	r2, [pc, #288]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	3302      	adds	r3, #2
 8004674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004678:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	220f      	movs	r2, #15
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	43db      	mvns	r3, r3
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	4013      	ands	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a40      	ldr	r2, [pc, #256]	; (8004794 <HAL_GPIO_Init+0x2c0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <HAL_GPIO_Init+0x1ec>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a3f      	ldr	r2, [pc, #252]	; (8004798 <HAL_GPIO_Init+0x2c4>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00d      	beq.n	80046bc <HAL_GPIO_Init+0x1e8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3e      	ldr	r2, [pc, #248]	; (800479c <HAL_GPIO_Init+0x2c8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d007      	beq.n	80046b8 <HAL_GPIO_Init+0x1e4>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3d      	ldr	r2, [pc, #244]	; (80047a0 <HAL_GPIO_Init+0x2cc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_GPIO_Init+0x1e0>
 80046b0:	2303      	movs	r3, #3
 80046b2:	e006      	b.n	80046c2 <HAL_GPIO_Init+0x1ee>
 80046b4:	2304      	movs	r3, #4
 80046b6:	e004      	b.n	80046c2 <HAL_GPIO_Init+0x1ee>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e002      	b.n	80046c2 <HAL_GPIO_Init+0x1ee>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_GPIO_Init+0x1ee>
 80046c0:	2300      	movs	r3, #0
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	f002 0203 	and.w	r2, r2, #3
 80046c8:	0092      	lsls	r2, r2, #2
 80046ca:	4093      	lsls	r3, r2
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046d2:	492f      	ldr	r1, [pc, #188]	; (8004790 <HAL_GPIO_Init+0x2bc>)
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	3302      	adds	r3, #2
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80046ec:	4b2d      	ldr	r3, [pc, #180]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	492c      	ldr	r1, [pc, #176]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80046fa:	4b2a      	ldr	r3, [pc, #168]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	43db      	mvns	r3, r3
 8004702:	4928      	ldr	r1, [pc, #160]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 8004704:	4013      	ands	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d006      	beq.n	8004722 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004714:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	4922      	ldr	r1, [pc, #136]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	4313      	orrs	r3, r2
 800471e:	604b      	str	r3, [r1, #4]
 8004720:	e006      	b.n	8004730 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004722:	4b20      	ldr	r3, [pc, #128]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	43db      	mvns	r3, r3
 800472a:	491e      	ldr	r1, [pc, #120]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 800472c:	4013      	ands	r3, r2
 800472e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d006      	beq.n	800474a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800473c:	4b19      	ldr	r3, [pc, #100]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	4918      	ldr	r1, [pc, #96]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	4313      	orrs	r3, r2
 8004746:	608b      	str	r3, [r1, #8]
 8004748:	e006      	b.n	8004758 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	43db      	mvns	r3, r3
 8004752:	4914      	ldr	r1, [pc, #80]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 8004754:	4013      	ands	r3, r2
 8004756:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d021      	beq.n	80047a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004764:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	490e      	ldr	r1, [pc, #56]	; (80047a4 <HAL_GPIO_Init+0x2d0>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	60cb      	str	r3, [r1, #12]
 8004770:	e021      	b.n	80047b6 <HAL_GPIO_Init+0x2e2>
 8004772:	bf00      	nop
 8004774:	10320000 	.word	0x10320000
 8004778:	10310000 	.word	0x10310000
 800477c:	10220000 	.word	0x10220000
 8004780:	10210000 	.word	0x10210000
 8004784:	10120000 	.word	0x10120000
 8004788:	10110000 	.word	0x10110000
 800478c:	40021000 	.word	0x40021000
 8004790:	40010000 	.word	0x40010000
 8004794:	40010800 	.word	0x40010800
 8004798:	40010c00 	.word	0x40010c00
 800479c:	40011000 	.word	0x40011000
 80047a0:	40011400 	.word	0x40011400
 80047a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_GPIO_Init+0x304>)
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	4909      	ldr	r1, [pc, #36]	; (80047d8 <HAL_GPIO_Init+0x304>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	3301      	adds	r3, #1
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f47f ae8e 	bne.w	80044e8 <HAL_GPIO_Init+0x14>
  }
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	372c      	adds	r7, #44	; 0x2c
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	40010400 	.word	0x40010400

080047dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e001      	b.n	80047fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	807b      	strh	r3, [r7, #2]
 8004816:	4613      	mov	r3, r2
 8004818:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800481a:	787b      	ldrb	r3, [r7, #1]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004820:	887a      	ldrh	r2, [r7, #2]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004826:	e003      	b.n	8004830 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	041a      	lsls	r2, r3, #16
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	611a      	str	r2, [r3, #16]
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr
	...

0800483c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	4013      	ands	r3, r2
 800484e:	2b00      	cmp	r3, #0
 8004850:	d006      	beq.n	8004860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004852:	4a05      	ldr	r2, [pc, #20]	; (8004868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004858:	88fb      	ldrh	r3, [r7, #6]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f806 	bl	800486c <HAL_GPIO_EXTI_Callback>
  }
}
 8004860:	bf00      	nop
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40010400 	.word	0x40010400

0800486c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e26c      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 8087 	beq.w	80049ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048a0:	4b92      	ldr	r3, [pc, #584]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d00c      	beq.n	80048c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048ac:	4b8f      	ldr	r3, [pc, #572]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d112      	bne.n	80048de <HAL_RCC_OscConfig+0x5e>
 80048b8:	4b8c      	ldr	r3, [pc, #560]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c4:	d10b      	bne.n	80048de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c6:	4b89      	ldr	r3, [pc, #548]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d06c      	beq.n	80049ac <HAL_RCC_OscConfig+0x12c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d168      	bne.n	80049ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e246      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d106      	bne.n	80048f6 <HAL_RCC_OscConfig+0x76>
 80048e8:	4b80      	ldr	r3, [pc, #512]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a7f      	ldr	r2, [pc, #508]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80048ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	e02e      	b.n	8004954 <HAL_RCC_OscConfig+0xd4>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10c      	bne.n	8004918 <HAL_RCC_OscConfig+0x98>
 80048fe:	4b7b      	ldr	r3, [pc, #492]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a7a      	ldr	r2, [pc, #488]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b78      	ldr	r3, [pc, #480]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a77      	ldr	r2, [pc, #476]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004910:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e01d      	b.n	8004954 <HAL_RCC_OscConfig+0xd4>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0xbc>
 8004922:	4b72      	ldr	r3, [pc, #456]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a71      	ldr	r2, [pc, #452]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b6f      	ldr	r3, [pc, #444]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a6e      	ldr	r2, [pc, #440]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e00b      	b.n	8004954 <HAL_RCC_OscConfig+0xd4>
 800493c:	4b6b      	ldr	r3, [pc, #428]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6a      	ldr	r2, [pc, #424]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b68      	ldr	r3, [pc, #416]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a67      	ldr	r2, [pc, #412]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 800494e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d013      	beq.n	8004984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7ff f89c 	bl	8003a98 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7ff f898 	bl	8003a98 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1fa      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b5d      	ldr	r3, [pc, #372]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0xe4>
 8004982:	e014      	b.n	80049ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7ff f888 	bl	8003a98 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800498c:	f7ff f884 	bl	8003a98 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e1e6      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499e:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0x10c>
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d063      	beq.n	8004a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ba:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049c6:	4b49      	ldr	r3, [pc, #292]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d11c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x18c>
 80049d2:	4b46      	ldr	r3, [pc, #280]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d116      	bne.n	8004a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049de:	4b43      	ldr	r3, [pc, #268]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_RCC_OscConfig+0x176>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d001      	beq.n	80049f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e1ba      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f6:	4b3d      	ldr	r3, [pc, #244]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4939      	ldr	r1, [pc, #228]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0a:	e03a      	b.n	8004a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d020      	beq.n	8004a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a14:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_RCC_OscConfig+0x270>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1a:	f7ff f83d 	bl	8003a98 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a22:	f7ff f839 	bl	8003a98 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e19b      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a34:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a40:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4927      	ldr	r1, [pc, #156]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]
 8004a54:	e015      	b.n	8004a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a56:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <HAL_RCC_OscConfig+0x270>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5c:	f7ff f81c 	bl	8003a98 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a64:	f7ff f818 	bl	8003a98 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e17a      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a76:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d03a      	beq.n	8004b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d019      	beq.n	8004aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a96:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9c:	f7fe fffc 	bl	8003a98 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa4:	f7fe fff8 	bl	8003a98 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e15a      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab6:	4b0d      	ldr	r3, [pc, #52]	; (8004aec <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	f000 fb08 	bl	80050d8 <RCC_Delay>
 8004ac8:	e01c      	b.n	8004b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_RCC_OscConfig+0x274>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad0:	f7fe ffe2 	bl	8003a98 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad6:	e00f      	b.n	8004af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fe ffde 	bl	8003a98 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d908      	bls.n	8004af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e140      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	42420000 	.word	0x42420000
 8004af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	4b9e      	ldr	r3, [pc, #632]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e9      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80a6 	beq.w	8004c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b16:	4b97      	ldr	r3, [pc, #604]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10d      	bne.n	8004b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	4b94      	ldr	r3, [pc, #592]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	4a93      	ldr	r2, [pc, #588]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	61d3      	str	r3, [r2, #28]
 8004b2e:	4b91      	ldr	r3, [pc, #580]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3e:	4b8e      	ldr	r3, [pc, #568]	; (8004d78 <HAL_RCC_OscConfig+0x4f8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d118      	bne.n	8004b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b4a:	4b8b      	ldr	r3, [pc, #556]	; (8004d78 <HAL_RCC_OscConfig+0x4f8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a8a      	ldr	r2, [pc, #552]	; (8004d78 <HAL_RCC_OscConfig+0x4f8>)
 8004b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b56:	f7fe ff9f 	bl	8003a98 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5e:	f7fe ff9b 	bl	8003a98 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b64      	cmp	r3, #100	; 0x64
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0fd      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b70:	4b81      	ldr	r3, [pc, #516]	; (8004d78 <HAL_RCC_OscConfig+0x4f8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0f0      	beq.n	8004b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_OscConfig+0x312>
 8004b84:	4b7b      	ldr	r3, [pc, #492]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	4a7a      	ldr	r2, [pc, #488]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004b8a:	f043 0301 	orr.w	r3, r3, #1
 8004b8e:	6213      	str	r3, [r2, #32]
 8004b90:	e02d      	b.n	8004bee <HAL_RCC_OscConfig+0x36e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10c      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x334>
 8004b9a:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	4a75      	ldr	r2, [pc, #468]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004ba0:	f023 0301 	bic.w	r3, r3, #1
 8004ba4:	6213      	str	r3, [r2, #32]
 8004ba6:	4b73      	ldr	r3, [pc, #460]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	4a72      	ldr	r2, [pc, #456]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004bac:	f023 0304 	bic.w	r3, r3, #4
 8004bb0:	6213      	str	r3, [r2, #32]
 8004bb2:	e01c      	b.n	8004bee <HAL_RCC_OscConfig+0x36e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	2b05      	cmp	r3, #5
 8004bba:	d10c      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x356>
 8004bbc:	4b6d      	ldr	r3, [pc, #436]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	4a6c      	ldr	r2, [pc, #432]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004bc2:	f043 0304 	orr.w	r3, r3, #4
 8004bc6:	6213      	str	r3, [r2, #32]
 8004bc8:	4b6a      	ldr	r3, [pc, #424]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	4a69      	ldr	r2, [pc, #420]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	6213      	str	r3, [r2, #32]
 8004bd4:	e00b      	b.n	8004bee <HAL_RCC_OscConfig+0x36e>
 8004bd6:	4b67      	ldr	r3, [pc, #412]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4a66      	ldr	r2, [pc, #408]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	6213      	str	r3, [r2, #32]
 8004be2:	4b64      	ldr	r3, [pc, #400]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4a63      	ldr	r2, [pc, #396]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d015      	beq.n	8004c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf6:	f7fe ff4f 	bl	8003a98 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fe ff4b 	bl	8003a98 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0ab      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c14:	4b57      	ldr	r3, [pc, #348]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ee      	beq.n	8004bfe <HAL_RCC_OscConfig+0x37e>
 8004c20:	e014      	b.n	8004c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c22:	f7fe ff39 	bl	8003a98 <HAL_GetTick>
 8004c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c2a:	f7fe ff35 	bl	8003a98 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e095      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c40:	4b4c      	ldr	r3, [pc, #304]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1ee      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d105      	bne.n	8004c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c52:	4b48      	ldr	r3, [pc, #288]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4a47      	ldr	r2, [pc, #284]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004c58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8081 	beq.w	8004d6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c68:	4b42      	ldr	r3, [pc, #264]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d061      	beq.n	8004d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d146      	bne.n	8004d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7c:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_RCC_OscConfig+0x4fc>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fe ff09 	bl	8003a98 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8a:	f7fe ff05 	bl	8003a98 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e067      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c9c:	4b35      	ldr	r3, [pc, #212]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cb0:	d108      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cb2:	4b30      	ldr	r3, [pc, #192]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	492d      	ldr	r1, [pc, #180]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a19      	ldr	r1, [r3, #32]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	4927      	ldr	r1, [pc, #156]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cdc:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <HAL_RCC_OscConfig+0x4fc>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce2:	f7fe fed9 	bl	8003a98 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cea:	f7fe fed5 	bl	8003a98 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e037      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x46a>
 8004d08:	e02f      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0a:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_RCC_OscConfig+0x4fc>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fe fec2 	bl	8003a98 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fe febe 	bl	8003a98 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e020      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d2a:	4b12      	ldr	r3, [pc, #72]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x498>
 8004d36:	e018      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e013      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d44:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <HAL_RCC_OscConfig+0x4f4>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	42420060 	.word	0x42420060

08004d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0d0      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d94:	4b6a      	ldr	r3, [pc, #424]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d910      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	4b67      	ldr	r3, [pc, #412]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f023 0207 	bic.w	r2, r3, #7
 8004daa:	4965      	ldr	r1, [pc, #404]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	4b63      	ldr	r3, [pc, #396]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0b8      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ddc:	4b59      	ldr	r3, [pc, #356]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a58      	ldr	r2, [pc, #352]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004de2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df4:	4b53      	ldr	r3, [pc, #332]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	4a52      	ldr	r2, [pc, #328]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e00:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	494d      	ldr	r1, [pc, #308]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d040      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	4b47      	ldr	r3, [pc, #284]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d115      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e07f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3e:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e073      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4e:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e06b      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5e:	4b39      	ldr	r3, [pc, #228]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f023 0203 	bic.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4936      	ldr	r1, [pc, #216]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e70:	f7fe fe12 	bl	8003a98 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e78:	f7fe fe0e 	bl	8003a98 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e053      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	4b2d      	ldr	r3, [pc, #180]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 020c 	and.w	r2, r3, #12
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d1eb      	bne.n	8004e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b27      	ldr	r3, [pc, #156]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d210      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 0207 	bic.w	r2, r3, #7
 8004eb6:	4922      	ldr	r1, [pc, #136]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e032      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004edc:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4916      	ldr	r1, [pc, #88]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	490e      	ldr	r1, [pc, #56]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f0e:	f000 f821 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8004f12:	4602      	mov	r2, r0
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	490a      	ldr	r1, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	5ccb      	ldrb	r3, [r1, r3]
 8004f22:	fa22 f303 	lsr.w	r3, r2, r3
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <HAL_RCC_ClockConfig+0x1cc>)
 8004f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_ClockConfig+0x1d0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fcde 	bl	80038f0 <HAL_InitTick>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40022000 	.word	0x40022000
 8004f44:	40021000 	.word	0x40021000
 8004f48:	080092ac 	.word	0x080092ac
 8004f4c:	20000000 	.word	0x20000000
 8004f50:	20000004 	.word	0x20000004

08004f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f54:	b490      	push	{r4, r7}
 8004f56:	b08a      	sub	sp, #40	; 0x28
 8004f58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f5a:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f5c:	1d3c      	adds	r4, r7, #4
 8004f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f64:	f240 2301 	movw	r3, #513	; 0x201
 8004f68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	61fb      	str	r3, [r7, #28]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	2300      	movs	r3, #0
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f7e:	4b22      	ldr	r3, [pc, #136]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d002      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0x40>
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d003      	beq.n	8004f9a <HAL_RCC_GetSysClockFreq+0x46>
 8004f92:	e02d      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f94:	4b1d      	ldr	r3, [pc, #116]	; (800500c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f96:	623b      	str	r3, [r7, #32]
      break;
 8004f98:	e02d      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	0c9b      	lsrs	r3, r3, #18
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004fac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d013      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fb8:	4b13      	ldr	r3, [pc, #76]	; (8005008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	0c5b      	lsrs	r3, r3, #17
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004fcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	4a0e      	ldr	r2, [pc, #56]	; (800500c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fd2:	fb02 f203 	mul.w	r2, r2, r3
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fde:	e004      	b.n	8004fea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4a0b      	ldr	r2, [pc, #44]	; (8005010 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fe4:	fb02 f303 	mul.w	r3, r2, r3
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	623b      	str	r3, [r7, #32]
      break;
 8004fee:	e002      	b.n	8004ff6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ff2:	623b      	str	r3, [r7, #32]
      break;
 8004ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3728      	adds	r7, #40	; 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc90      	pop	{r4, r7}
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	080090e8 	.word	0x080090e8
 8005008:	40021000 	.word	0x40021000
 800500c:	007a1200 	.word	0x007a1200
 8005010:	003d0900 	.word	0x003d0900

08005014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005018:	4b02      	ldr	r3, [pc, #8]	; (8005024 <HAL_RCC_GetHCLKFreq+0x10>)
 800501a:	681b      	ldr	r3, [r3, #0]
}
 800501c:	4618      	mov	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr
 8005024:	20000000 	.word	0x20000000

08005028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800502c:	f7ff fff2 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005030:	4602      	mov	r2, r0
 8005032:	4b05      	ldr	r3, [pc, #20]	; (8005048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	4903      	ldr	r1, [pc, #12]	; (800504c <HAL_RCC_GetPCLK1Freq+0x24>)
 800503e:	5ccb      	ldrb	r3, [r1, r3]
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000
 800504c:	080092bc 	.word	0x080092bc

08005050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005054:	f7ff ffde 	bl	8005014 <HAL_RCC_GetHCLKFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	0adb      	lsrs	r3, r3, #11
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4903      	ldr	r1, [pc, #12]	; (8005074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	080092bc 	.word	0x080092bc

08005078 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	220f      	movs	r2, #15
 8005086:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005088:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_RCC_GetClockConfig+0x58>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f003 0203 	and.w	r2, r3, #3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <HAL_RCC_GetClockConfig+0x58>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCC_GetClockConfig+0x58>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80050ac:	4b08      	ldr	r3, [pc, #32]	; (80050d0 <HAL_RCC_GetClockConfig+0x58>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050ba:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0207 	and.w	r2, r3, #7
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr
 80050d0:	40021000 	.word	0x40021000
 80050d4:	40022000 	.word	0x40022000

080050d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <RCC_Delay+0x34>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <RCC_Delay+0x38>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	0a5b      	lsrs	r3, r3, #9
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050f4:	bf00      	nop
  }
  while (Delay --);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	1e5a      	subs	r2, r3, #1
 80050fa:	60fa      	str	r2, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f9      	bne.n	80050f4 <RCC_Delay+0x1c>
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	20000000 	.word	0x20000000
 8005110:	10624dd3 	.word	0x10624dd3

08005114 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d07d      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005130:	2300      	movs	r3, #0
 8005132:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005134:	4b4f      	ldr	r3, [pc, #316]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10d      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005140:	4b4c      	ldr	r3, [pc, #304]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	4a4b      	ldr	r2, [pc, #300]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514a:	61d3      	str	r3, [r2, #28]
 800514c:	4b49      	ldr	r3, [pc, #292]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005158:	2301      	movs	r3, #1
 800515a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	4b46      	ldr	r3, [pc, #280]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d118      	bne.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005168:	4b43      	ldr	r3, [pc, #268]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a42      	ldr	r2, [pc, #264]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005174:	f7fe fc90 	bl	8003a98 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517a:	e008      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517c:	f7fe fc8c 	bl	8003a98 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e06d      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518e:	4b3a      	ldr	r3, [pc, #232]	; (8005278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800519a:	4b36      	ldr	r3, [pc, #216]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d02e      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d027      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051b8:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051c2:	4b2e      	ldr	r3, [pc, #184]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051c8:	4b2c      	ldr	r3, [pc, #176]	; (800527c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051ce:	4a29      	ldr	r2, [pc, #164]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d014      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051de:	f7fe fc5b 	bl	8003a98 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e4:	e00a      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e6:	f7fe fc57 	bl	8003a98 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d901      	bls.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e036      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fc:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0ee      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4917      	ldr	r1, [pc, #92]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005216:	4313      	orrs	r3, r2
 8005218:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d105      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005220:	4b14      	ldr	r3, [pc, #80]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4a13      	ldr	r2, [pc, #76]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005238:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	490b      	ldr	r1, [pc, #44]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005246:	4313      	orrs	r3, r2
 8005248:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	4904      	ldr	r1, [pc, #16]	; (8005274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40021000 	.word	0x40021000
 8005278:	40007000 	.word	0x40007000
 800527c:	42420440 	.word	0x42420440

08005280 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005280:	b590      	push	{r4, r7, lr}
 8005282:	b08d      	sub	sp, #52	; 0x34
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005288:	4b5a      	ldr	r3, [pc, #360]	; (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800528a:	f107 040c 	add.w	r4, r7, #12
 800528e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005294:	f240 2301 	movw	r3, #513	; 0x201
 8005298:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	2300      	movs	r3, #0
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a2:	2300      	movs	r3, #0
 80052a4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	2300      	movs	r3, #0
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d00a      	beq.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	f200 8091 	bhi.w	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d04c      	beq.n	800535c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d07c      	beq.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80052c8:	e089      	b.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80052ca:	4b4b      	ldr	r3, [pc, #300]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80052d0:	4b49      	ldr	r3, [pc, #292]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8082 	beq.w	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	0c9b      	lsrs	r3, r3, #18
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80052ea:	4413      	add	r3, r2
 80052ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80052f0:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d018      	beq.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80052fc:	4b3e      	ldr	r3, [pc, #248]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	0c5b      	lsrs	r3, r3, #17
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800530a:	4413      	add	r3, r2
 800530c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00d      	beq.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800531c:	4a37      	ldr	r2, [pc, #220]	; (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	fbb2 f2f3 	udiv	r2, r2, r3
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	fb02 f303 	mul.w	r3, r2, r3
 800532a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800532c:	e004      	b.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	4a33      	ldr	r2, [pc, #204]	; (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005338:	4b2f      	ldr	r3, [pc, #188]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005344:	d102      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8005346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005348:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800534a:	e04a      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	4a2c      	ldr	r2, [pc, #176]	; (8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800535a:	e042      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 800535c:	4b26      	ldr	r3, [pc, #152]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536c:	d108      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8005378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
 800537e:	e01f      	b.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538a:	d109      	bne.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800538c:	4b1a      	ldr	r3, [pc, #104]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8005398:	f649 4340 	movw	r3, #40000	; 0x9c40
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	e00f      	b.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053aa:	d11c      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80053ac:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d016      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80053b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80053be:	e012      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80053c0:	e011      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80053c2:	f7ff fe45 	bl	8005050 <HAL_RCC_GetPCLK2Freq>
 80053c6:	4602      	mov	r2, r0
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	0b9b      	lsrs	r3, r3, #14
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	3301      	adds	r3, #1
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80053dc:	e004      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80053e6:	bf00      	nop
    }
  }
  return (frequency);
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3734      	adds	r7, #52	; 0x34
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd90      	pop	{r4, r7, pc}
 80053f2:	bf00      	nop
 80053f4:	080090f8 	.word	0x080090f8
 80053f8:	40021000 	.word	0x40021000
 80053fc:	007a1200 	.word	0x007a1200
 8005400:	003d0900 	.word	0x003d0900
 8005404:	aaaaaaab 	.word	0xaaaaaaab

08005408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e041      	b.n	800549e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fe f9a6 	bl	8003780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f000 fae0 	bl	8005a0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d001      	beq.n	80054c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e032      	b.n	8005526 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_TIM_Base_Start+0x88>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_TIM_Base_Start+0x48>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054da:	d009      	beq.n	80054f0 <HAL_TIM_Base_Start+0x48>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a14      	ldr	r2, [pc, #80]	; (8005534 <HAL_TIM_Base_Start+0x8c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_TIM_Base_Start+0x48>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a13      	ldr	r2, [pc, #76]	; (8005538 <HAL_TIM_Base_Start+0x90>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d111      	bne.n	8005514 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d010      	beq.n	8005524 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005512:	e007      	b.n	8005524 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f042 0201 	orr.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800

0800553c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	f241 1311 	movw	r3, #4369	; 0x1111
 800554e:	4013      	ands	r3, r2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10f      	bne.n	8005574 <HAL_TIM_Base_Stop+0x38>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	f240 4344 	movw	r3, #1092	; 0x444
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d107      	bne.n	8005574 <HAL_TIM_Base_Stop+0x38>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d001      	beq.n	80055a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e03a      	b.n	8005616 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <HAL_TIM_Base_Start_IT+0x98>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00e      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x58>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d009      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x58>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_TIM_Base_Start_IT+0x9c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <HAL_TIM_Base_Start_IT+0x58>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a13      	ldr	r2, [pc, #76]	; (8005628 <HAL_TIM_Base_Start_IT+0xa0>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d111      	bne.n	8005604 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b06      	cmp	r3, #6
 80055f0:	d010      	beq.n	8005614 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005602:	e007      	b.n	8005614 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	40012c00 	.word	0x40012c00
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800

0800562c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d122      	bne.n	8005688 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b02      	cmp	r3, #2
 800564e:	d11b      	bne.n	8005688 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0202 	mvn.w	r2, #2
 8005658:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f9b1 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9a4 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f9b3 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b04      	cmp	r3, #4
 8005694:	d122      	bne.n	80056dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0304 	and.w	r3, r3, #4
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d11b      	bne.n	80056dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0204 	mvn.w	r2, #4
 80056ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f987 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f97a 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f989 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0308 	and.w	r3, r3, #8
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0208 	mvn.w	r2, #8
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2204      	movs	r2, #4
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f95d 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f950 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f95f 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0310 	and.w	r3, r3, #16
 800573a:	2b10      	cmp	r3, #16
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b10      	cmp	r3, #16
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0210 	mvn.w	r2, #16
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2208      	movs	r2, #8
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f933 	bl	80059d6 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f926 	bl	80059c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f935 	bl	80059e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10e      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d107      	bne.n	80057b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0201 	mvn.w	r2, #1
 80057a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fd fee8 	bl	8003580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d10e      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d107      	bne.n	80057dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa77 	bl	8005cca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d10e      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d107      	bne.n	8005808 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8f9 	bl	80059fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b20      	cmp	r3, #32
 8005814:	d10e      	bne.n	8005834 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b20      	cmp	r3, #32
 8005822:	d107      	bne.n	8005834 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0220 	mvn.w	r2, #32
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa42 	bl	8005cb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_TIM_ConfigClockSource+0x18>
 8005850:	2302      	movs	r3, #2
 8005852:	e0b3      	b.n	80059bc <HAL_TIM_ConfigClockSource+0x180>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005872:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588c:	d03e      	beq.n	800590c <HAL_TIM_ConfigClockSource+0xd0>
 800588e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005892:	f200 8087 	bhi.w	80059a4 <HAL_TIM_ConfigClockSource+0x168>
 8005896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589a:	f000 8085 	beq.w	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a2:	d87f      	bhi.n	80059a4 <HAL_TIM_ConfigClockSource+0x168>
 80058a4:	2b70      	cmp	r3, #112	; 0x70
 80058a6:	d01a      	beq.n	80058de <HAL_TIM_ConfigClockSource+0xa2>
 80058a8:	2b70      	cmp	r3, #112	; 0x70
 80058aa:	d87b      	bhi.n	80059a4 <HAL_TIM_ConfigClockSource+0x168>
 80058ac:	2b60      	cmp	r3, #96	; 0x60
 80058ae:	d050      	beq.n	8005952 <HAL_TIM_ConfigClockSource+0x116>
 80058b0:	2b60      	cmp	r3, #96	; 0x60
 80058b2:	d877      	bhi.n	80059a4 <HAL_TIM_ConfigClockSource+0x168>
 80058b4:	2b50      	cmp	r3, #80	; 0x50
 80058b6:	d03c      	beq.n	8005932 <HAL_TIM_ConfigClockSource+0xf6>
 80058b8:	2b50      	cmp	r3, #80	; 0x50
 80058ba:	d873      	bhi.n	80059a4 <HAL_TIM_ConfigClockSource+0x168>
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d058      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0x136>
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d86f      	bhi.n	80059a4 <HAL_TIM_ConfigClockSource+0x168>
 80058c4:	2b30      	cmp	r3, #48	; 0x30
 80058c6:	d064      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x156>
 80058c8:	2b30      	cmp	r3, #48	; 0x30
 80058ca:	d86b      	bhi.n	80059a4 <HAL_TIM_ConfigClockSource+0x168>
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d060      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x156>
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d867      	bhi.n	80059a4 <HAL_TIM_ConfigClockSource+0x168>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d05c      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x156>
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d05a      	beq.n	8005992 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80058dc:	e062      	b.n	80059a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6899      	ldr	r1, [r3, #8]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f000 f966 	bl	8005bbe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005900:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	609a      	str	r2, [r3, #8]
      break;
 800590a:	e04e      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	6899      	ldr	r1, [r3, #8]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f000 f94f 	bl	8005bbe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800592e:	609a      	str	r2, [r3, #8]
      break;
 8005930:	e03b      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6818      	ldr	r0, [r3, #0]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6859      	ldr	r1, [r3, #4]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	461a      	mov	r2, r3
 8005940:	f000 f8c6 	bl	8005ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2150      	movs	r1, #80	; 0x50
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f91d 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005950:	e02b      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6859      	ldr	r1, [r3, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	461a      	mov	r2, r3
 8005960:	f000 f8e4 	bl	8005b2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2160      	movs	r1, #96	; 0x60
 800596a:	4618      	mov	r0, r3
 800596c:	f000 f90d 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005970:	e01b      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6859      	ldr	r1, [r3, #4]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	461a      	mov	r2, r3
 8005980:	f000 f8a6 	bl	8005ad0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2140      	movs	r1, #64	; 0x40
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f8fd 	bl	8005b8a <TIM_ITRx_SetConfig>
      break;
 8005990:	e00b      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f000 f8f4 	bl	8005b8a <TIM_ITRx_SetConfig>
        break;
 80059a2:	e002      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ba:	2300      	movs	r3, #0
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr

080059d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr

080059fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a29      	ldr	r2, [pc, #164]	; (8005ac4 <TIM_Base_SetConfig+0xb8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <TIM_Base_SetConfig+0x30>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2a:	d007      	beq.n	8005a3c <TIM_Base_SetConfig+0x30>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <TIM_Base_SetConfig+0xbc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0x30>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a25      	ldr	r2, [pc, #148]	; (8005acc <TIM_Base_SetConfig+0xc0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d108      	bne.n	8005a4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1c      	ldr	r2, [pc, #112]	; (8005ac4 <TIM_Base_SetConfig+0xb8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00b      	beq.n	8005a6e <TIM_Base_SetConfig+0x62>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5c:	d007      	beq.n	8005a6e <TIM_Base_SetConfig+0x62>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <TIM_Base_SetConfig+0xbc>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d003      	beq.n	8005a6e <TIM_Base_SetConfig+0x62>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a18      	ldr	r2, [pc, #96]	; (8005acc <TIM_Base_SetConfig+0xc0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d108      	bne.n	8005a80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a07      	ldr	r2, [pc, #28]	; (8005ac4 <TIM_Base_SetConfig+0xb8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d103      	bne.n	8005ab4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	615a      	str	r2, [r3, #20]
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800

08005ad0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f023 0201 	bic.w	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 030a 	bic.w	r3, r3, #10
 8005b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f023 0210 	bic.w	r2, r3, #16
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	031b      	lsls	r3, r3, #12
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f043 0307 	orr.w	r3, r3, #7
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc80      	pop	{r7}
 8005bbc:	4770      	bx	lr

08005bbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b087      	sub	sp, #28
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	021a      	lsls	r2, r3, #8
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	609a      	str	r2, [r3, #8]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e046      	b.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a16      	ldr	r2, [pc, #88]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00e      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c60:	d009      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a12      	ldr	r2, [pc, #72]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d004      	beq.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a10      	ldr	r2, [pc, #64]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d10c      	bne.n	8005c90 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bc80      	pop	{r7}
 8005caa:	4770      	bx	lr
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40000800 	.word	0x40000800

08005cb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e03f      	b.n	8005d6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fd fd6c 	bl	80037e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2224      	movs	r2, #36	; 0x24
 8005d0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f9a3 	bl	800606c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68da      	ldr	r2, [r3, #12]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b08a      	sub	sp, #40	; 0x28
 8005d7a:	af02      	add	r7, sp, #8
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d17c      	bne.n	8005e90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_UART_Transmit+0x2c>
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e075      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UART_Transmit+0x3e>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e06e      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2221      	movs	r2, #33	; 0x21
 8005dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005dca:	f7fd fe65 	bl	8003a98 <HAL_GetTick>
 8005dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	88fa      	ldrh	r2, [r7, #6]
 8005dd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	88fa      	ldrh	r2, [r7, #6]
 8005dda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d108      	bne.n	8005df8 <HAL_UART_Transmit+0x82>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e003      	b.n	8005e00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005e08:	e02a      	b.n	8005e60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f8df 	bl	8005fd8 <UART_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e036      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	e007      	b.n	8005e52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1cf      	bne.n	8005e0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	2140      	movs	r1, #64	; 0x40
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f8af 	bl	8005fd8 <UART_WaitOnFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e006      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e000      	b.n	8005e92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
  }
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3720      	adds	r7, #32
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b08a      	sub	sp, #40	; 0x28
 8005e9e:	af02      	add	r7, sp, #8
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	f040 8089 	bne.w	8005fce <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <HAL_UART_Receive+0x2e>
 8005ec2:	88fb      	ldrh	r3, [r7, #6]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e081      	b.n	8005fd0 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Receive+0x40>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e07a      	b.n	8005fd0 <HAL_UART_Receive+0x136>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2222      	movs	r2, #34	; 0x22
 8005eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ef0:	f7fd fdd2 	bl	8003a98 <HAL_GetTick>
 8005ef4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	88fa      	ldrh	r2, [r7, #6]
 8005efa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	88fa      	ldrh	r2, [r7, #6]
 8005f00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0a:	d108      	bne.n	8005f1e <HAL_UART_Receive+0x84>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d104      	bne.n	8005f1e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	e003      	b.n	8005f26 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005f2e:	e043      	b.n	8005fb8 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	2120      	movs	r1, #32
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f84c 	bl	8005fd8 <UART_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e042      	b.n	8005fd0 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10c      	bne.n	8005f6a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	3302      	adds	r3, #2
 8005f66:	61bb      	str	r3, [r7, #24]
 8005f68:	e01f      	b.n	8005faa <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f72:	d007      	beq.n	8005f84 <HAL_UART_Receive+0xea>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <HAL_UART_Receive+0xf8>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d106      	bne.n	8005f92 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e008      	b.n	8005fa4 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1b6      	bne.n	8005f30 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3720      	adds	r7, #32
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fe8:	e02c      	b.n	8006044 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d028      	beq.n	8006044 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ff8:	f7fd fd4e 	bl	8003a98 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	d21d      	bcs.n	8006044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006016:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695a      	ldr	r2, [r3, #20]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0201 	bic.w	r2, r2, #1
 8006026:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e00f      	b.n	8006064 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4013      	ands	r3, r2
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	429a      	cmp	r2, r3
 8006052:	bf0c      	ite	eq
 8006054:	2301      	moveq	r3, #1
 8006056:	2300      	movne	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	461a      	mov	r2, r3
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	429a      	cmp	r2, r3
 8006060:	d0c3      	beq.n	8005fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060a6:	f023 030c 	bic.w	r3, r3, #12
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	430b      	orrs	r3, r1
 80060b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2c      	ldr	r2, [pc, #176]	; (8006180 <UART_SetConfig+0x114>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d103      	bne.n	80060dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80060d4:	f7fe ffbc 	bl	8005050 <HAL_RCC_GetPCLK2Freq>
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	e002      	b.n	80060e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80060dc:	f7fe ffa4 	bl	8005028 <HAL_RCC_GetPCLK1Freq>
 80060e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009a      	lsls	r2, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	4a22      	ldr	r2, [pc, #136]	; (8006184 <UART_SetConfig+0x118>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	0119      	lsls	r1, r3, #4
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009a      	lsls	r2, r3, #2
 800610c:	441a      	add	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	fbb2 f2f3 	udiv	r2, r2, r3
 8006118:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <UART_SetConfig+0x118>)
 800611a:	fba3 0302 	umull	r0, r3, r3, r2
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	2064      	movs	r0, #100	; 0x64
 8006122:	fb00 f303 	mul.w	r3, r0, r3
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	3332      	adds	r3, #50	; 0x32
 800612c:	4a15      	ldr	r2, [pc, #84]	; (8006184 <UART_SetConfig+0x118>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006138:	4419      	add	r1, r3
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4613      	mov	r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4413      	add	r3, r2
 8006142:	009a      	lsls	r2, r3, #2
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <UART_SetConfig+0x118>)
 8006152:	fba3 0302 	umull	r0, r3, r3, r2
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	2064      	movs	r0, #100	; 0x64
 800615a:	fb00 f303 	mul.w	r3, r0, r3
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	3332      	adds	r3, #50	; 0x32
 8006164:	4a07      	ldr	r2, [pc, #28]	; (8006184 <UART_SetConfig+0x118>)
 8006166:	fba2 2303 	umull	r2, r3, r2, r3
 800616a:	095b      	lsrs	r3, r3, #5
 800616c:	f003 020f 	and.w	r2, r3, #15
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	440a      	add	r2, r1
 8006176:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40013800 	.word	0x40013800
 8006184:	51eb851f 	.word	0x51eb851f

08006188 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800618e:	f3ef 8305 	mrs	r3, IPSR
 8006192:	60bb      	str	r3, [r7, #8]
  return(result);
 8006194:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10f      	bne.n	80061ba <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800619a:	f3ef 8310 	mrs	r3, PRIMASK
 800619e:	607b      	str	r3, [r7, #4]
  return(result);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <osKernelInitialize+0x32>
 80061a6:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <osKernelInitialize+0x60>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d109      	bne.n	80061c2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061ae:	f3ef 8311 	mrs	r3, BASEPRI
 80061b2:	603b      	str	r3, [r7, #0]
  return(result);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80061ba:	f06f 0305 	mvn.w	r3, #5
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	e00c      	b.n	80061dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <osKernelInitialize+0x60>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d105      	bne.n	80061d6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <osKernelInitialize+0x60>)
 80061cc:	2201      	movs	r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e002      	b.n	80061dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80061d6:	f04f 33ff 	mov.w	r3, #4294967295
 80061da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061dc:	68fb      	ldr	r3, [r7, #12]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr
 80061e8:	2000002c 	.word	0x2000002c

080061ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f2:	f3ef 8305 	mrs	r3, IPSR
 80061f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80061f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10f      	bne.n	800621e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006202:	607b      	str	r3, [r7, #4]
  return(result);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d109      	bne.n	800621e <osKernelStart+0x32>
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <osKernelStart+0x64>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d109      	bne.n	8006226 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006212:	f3ef 8311 	mrs	r3, BASEPRI
 8006216:	603b      	str	r3, [r7, #0]
  return(result);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <osKernelStart+0x3a>
    stat = osErrorISR;
 800621e:	f06f 0305 	mvn.w	r3, #5
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e00e      	b.n	8006244 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <osKernelStart+0x64>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d107      	bne.n	800623e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800622e:	4b08      	ldr	r3, [pc, #32]	; (8006250 <osKernelStart+0x64>)
 8006230:	2202      	movs	r2, #2
 8006232:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006234:	f001 faa2 	bl	800777c <vTaskStartScheduler>
      stat = osOK;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e002      	b.n	8006244 <osKernelStart+0x58>
    } else {
      stat = osError;
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
 8006242:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006244:	68fb      	ldr	r3, [r7, #12]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	2000002c 	.word	0x2000002c

08006254 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006254:	b580      	push	{r7, lr}
 8006256:	b092      	sub	sp, #72	; 0x48
 8006258:	af04      	add	r7, sp, #16
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006264:	f3ef 8305 	mrs	r3, IPSR
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8094 	bne.w	800639a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006272:	f3ef 8310 	mrs	r3, PRIMASK
 8006276:	623b      	str	r3, [r7, #32]
  return(result);
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 808d 	bne.w	800639a <osThreadNew+0x146>
 8006280:	4b48      	ldr	r3, [pc, #288]	; (80063a4 <osThreadNew+0x150>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d106      	bne.n	8006296 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006288:	f3ef 8311 	mrs	r3, BASEPRI
 800628c:	61fb      	str	r3, [r7, #28]
  return(result);
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f040 8082 	bne.w	800639a <osThreadNew+0x146>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d07e      	beq.n	800639a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80062a0:	2318      	movs	r3, #24
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80062a4:	2300      	movs	r3, #0
 80062a6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80062a8:	f107 031b 	add.w	r3, r7, #27
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d045      	beq.n	8006346 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <osThreadNew+0x74>
        name = attr->name;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <osThreadNew+0x9a>
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2b38      	cmp	r3, #56	; 0x38
 80062e0:	d805      	bhi.n	80062ee <osThreadNew+0x9a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <osThreadNew+0x9e>
        return (NULL);
 80062ee:	2300      	movs	r3, #0
 80062f0:	e054      	b.n	800639c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	089b      	lsrs	r3, r3, #2
 8006300:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00e      	beq.n	8006328 <osThreadNew+0xd4>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b5b      	cmp	r3, #91	; 0x5b
 8006310:	d90a      	bls.n	8006328 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006316:	2b00      	cmp	r3, #0
 8006318:	d006      	beq.n	8006328 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <osThreadNew+0xd4>
        mem = 1;
 8006322:	2301      	movs	r3, #1
 8006324:	62bb      	str	r3, [r7, #40]	; 0x28
 8006326:	e010      	b.n	800634a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10c      	bne.n	800634a <osThreadNew+0xf6>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d108      	bne.n	800634a <osThreadNew+0xf6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <osThreadNew+0xf6>
          mem = 0;
 8006340:	2300      	movs	r3, #0
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28
 8006344:	e001      	b.n	800634a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	2b01      	cmp	r3, #1
 800634e:	d110      	bne.n	8006372 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006358:	9202      	str	r2, [sp, #8]
 800635a:	9301      	str	r3, [sp, #4]
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006364:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f001 f83c 	bl	80073e4 <xTaskCreateStatic>
 800636c:	4603      	mov	r3, r0
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	e013      	b.n	800639a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	2b00      	cmp	r3, #0
 8006376:	d110      	bne.n	800639a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	b29a      	uxth	r2, r3
 800637c:	f107 0314 	add.w	r3, r7, #20
 8006380:	9301      	str	r3, [sp, #4]
 8006382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f001 f886 	bl	800749c <xTaskCreate>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d001      	beq.n	800639a <osThreadNew+0x146>
          hTask = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800639a:	697b      	ldr	r3, [r7, #20]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3738      	adds	r7, #56	; 0x38
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000002c 	.word	0x2000002c

080063a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b0:	f3ef 8305 	mrs	r3, IPSR
 80063b4:	613b      	str	r3, [r7, #16]
  return(result);
 80063b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10f      	bne.n	80063dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063bc:	f3ef 8310 	mrs	r3, PRIMASK
 80063c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d109      	bne.n	80063dc <osDelay+0x34>
 80063c8:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <osDelay+0x58>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d109      	bne.n	80063e4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063d0:	f3ef 8311 	mrs	r3, BASEPRI
 80063d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <osDelay+0x3c>
    stat = osErrorISR;
 80063dc:	f06f 0305 	mvn.w	r3, #5
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e007      	b.n	80063f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f990 	bl	8007714 <vTaskDelay>
    }
  }

  return (stat);
 80063f4:	697b      	ldr	r3, [r7, #20]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	2000002c 	.word	0x2000002c

08006404 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	; 0x30
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006414:	f3ef 8305 	mrs	r3, IPSR
 8006418:	61bb      	str	r3, [r7, #24]
  return(result);
 800641a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800641c:	2b00      	cmp	r3, #0
 800641e:	d16f      	bne.n	8006500 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006420:	f3ef 8310 	mrs	r3, PRIMASK
 8006424:	617b      	str	r3, [r7, #20]
  return(result);
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d169      	bne.n	8006500 <osMessageQueueNew+0xfc>
 800642c:	4b37      	ldr	r3, [pc, #220]	; (800650c <osMessageQueueNew+0x108>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b02      	cmp	r3, #2
 8006432:	d105      	bne.n	8006440 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006434:	f3ef 8311 	mrs	r3, BASEPRI
 8006438:	613b      	str	r3, [r7, #16]
  return(result);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d15f      	bne.n	8006500 <osMessageQueueNew+0xfc>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d05c      	beq.n	8006500 <osMessageQueueNew+0xfc>
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d059      	beq.n	8006500 <osMessageQueueNew+0xfc>
    mem = -1;
 800644c:	f04f 33ff 	mov.w	r3, #4294967295
 8006450:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d029      	beq.n	80064ac <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d012      	beq.n	8006486 <osMessageQueueNew+0x82>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b4f      	cmp	r3, #79	; 0x4f
 8006466:	d90e      	bls.n	8006486 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00a      	beq.n	8006486 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	fb01 f303 	mul.w	r3, r1, r3
 800647c:	429a      	cmp	r2, r3
 800647e:	d302      	bcc.n	8006486 <osMessageQueueNew+0x82>
        mem = 1;
 8006480:	2301      	movs	r3, #1
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	e014      	b.n	80064b0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d110      	bne.n	80064b0 <osMessageQueueNew+0xac>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10c      	bne.n	80064b0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800649a:	2b00      	cmp	r3, #0
 800649c:	d108      	bne.n	80064b0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <osMessageQueueNew+0xac>
          mem = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	e001      	b.n	80064b0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d10b      	bne.n	80064ce <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	2100      	movs	r1, #0
 80064c0:	9100      	str	r1, [sp, #0]
 80064c2:	68b9      	ldr	r1, [r7, #8]
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fa53 	bl	8006970 <xQueueGenericCreateStatic>
 80064ca:	6278      	str	r0, [r7, #36]	; 0x24
 80064cc:	e008      	b.n	80064e0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80064d4:	2200      	movs	r2, #0
 80064d6:	68b9      	ldr	r1, [r7, #8]
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fac0 	bl	8006a5e <xQueueGenericCreate>
 80064de:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <osMessageQueueNew+0xf0>
        name = attr->name;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	61fb      	str	r3, [r7, #28]
 80064f2:	e001      	b.n	80064f8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064fc:	f000 ff16 	bl	800732c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006502:	4618      	mov	r0, r3
 8006504:	3728      	adds	r7, #40	; 0x28
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	2000002c 	.word	0x2000002c

08006510 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	; 0x28
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006524:	2300      	movs	r3, #0
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006528:	f3ef 8305 	mrs	r3, IPSR
 800652c:	61fb      	str	r3, [r7, #28]
  return(result);
 800652e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10f      	bne.n	8006554 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006534:	f3ef 8310 	mrs	r3, PRIMASK
 8006538:	61bb      	str	r3, [r7, #24]
  return(result);
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d109      	bne.n	8006554 <osMessageQueuePut+0x44>
 8006540:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <osMessageQueuePut+0xe0>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d12e      	bne.n	80065a6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006548:	f3ef 8311 	mrs	r3, BASEPRI
 800654c:	617b      	str	r3, [r7, #20]
  return(result);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d028      	beq.n	80065a6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <osMessageQueuePut+0x56>
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <osMessageQueuePut+0x56>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006566:	f06f 0303 	mvn.w	r3, #3
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800656c:	e039      	b.n	80065e2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006572:	f107 0210 	add.w	r2, r7, #16
 8006576:	2300      	movs	r3, #0
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	6a38      	ldr	r0, [r7, #32]
 800657c:	f000 fbce 	bl	8006d1c <xQueueGenericSendFromISR>
 8006580:	4603      	mov	r3, r0
 8006582:	2b01      	cmp	r3, #1
 8006584:	d003      	beq.n	800658e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006586:	f06f 0302 	mvn.w	r3, #2
 800658a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800658c:	e029      	b.n	80065e2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d026      	beq.n	80065e2 <osMessageQueuePut+0xd2>
 8006594:	4b17      	ldr	r3, [pc, #92]	; (80065f4 <osMessageQueuePut+0xe4>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065a4:	e01d      	b.n	80065e2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <osMessageQueuePut+0xa2>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d103      	bne.n	80065ba <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80065b2:	f06f 0303 	mvn.w	r3, #3
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
 80065b8:	e014      	b.n	80065e4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80065ba:	2300      	movs	r3, #0
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	6a38      	ldr	r0, [r7, #32]
 80065c2:	f000 faad 	bl	8006b20 <xQueueGenericSend>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d00b      	beq.n	80065e4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80065d2:	f06f 0301 	mvn.w	r3, #1
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
 80065d8:	e004      	b.n	80065e4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80065da:	f06f 0302 	mvn.w	r3, #2
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
 80065e0:	e000      	b.n	80065e4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065e2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3728      	adds	r7, #40	; 0x28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	2000002c 	.word	0x2000002c
 80065f4:	e000ed04 	.word	0xe000ed04

080065f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800660a:	2300      	movs	r3, #0
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800660e:	f3ef 8305 	mrs	r3, IPSR
 8006612:	61fb      	str	r3, [r7, #28]
  return(result);
 8006614:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10f      	bne.n	800663a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800661a:	f3ef 8310 	mrs	r3, PRIMASK
 800661e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <osMessageQueueGet+0x42>
 8006626:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <osMessageQueueGet+0xdc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b02      	cmp	r3, #2
 800662c:	d12e      	bne.n	800668c <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800662e:	f3ef 8311 	mrs	r3, BASEPRI
 8006632:	617b      	str	r3, [r7, #20]
  return(result);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d028      	beq.n	800668c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <osMessageQueueGet+0x54>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <osMessageQueueGet+0x54>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800664c:	f06f 0303 	mvn.w	r3, #3
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006652:	e038      	b.n	80066c6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006654:	2300      	movs	r3, #0
 8006656:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006658:	f107 0310 	add.w	r3, r7, #16
 800665c:	461a      	mov	r2, r3
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	6a38      	ldr	r0, [r7, #32]
 8006662:	f000 fcd3 	bl	800700c <xQueueReceiveFromISR>
 8006666:	4603      	mov	r3, r0
 8006668:	2b01      	cmp	r3, #1
 800666a:	d003      	beq.n	8006674 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800666c:	f06f 0302 	mvn.w	r3, #2
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006672:	e028      	b.n	80066c6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d025      	beq.n	80066c6 <osMessageQueueGet+0xce>
 800667a:	4b17      	ldr	r3, [pc, #92]	; (80066d8 <osMessageQueueGet+0xe0>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800668a:	e01c      	b.n	80066c6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <osMessageQueueGet+0xa0>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d103      	bne.n	80066a0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006698:	f06f 0303 	mvn.w	r3, #3
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
 800669e:	e013      	b.n	80066c8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80066a0:	683a      	ldr	r2, [r7, #0]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	6a38      	ldr	r0, [r7, #32]
 80066a6:	f000 fbd1 	bl	8006e4c <xQueueReceive>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d00b      	beq.n	80066c8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80066b6:	f06f 0301 	mvn.w	r3, #1
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
 80066bc:	e004      	b.n	80066c8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80066be:	f06f 0302 	mvn.w	r3, #2
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
 80066c4:	e000      	b.n	80066c8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3728      	adds	r7, #40	; 0x28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	2000002c 	.word	0x2000002c
 80066d8:	e000ed04 	.word	0xe000ed04

080066dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a06      	ldr	r2, [pc, #24]	; (8006704 <vApplicationGetIdleTaskMemory+0x28>)
 80066ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4a05      	ldr	r2, [pc, #20]	; (8006708 <vApplicationGetIdleTaskMemory+0x2c>)
 80066f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2280      	movs	r2, #128	; 0x80
 80066f8:	601a      	str	r2, [r3, #0]
}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr
 8006704:	20000030 	.word	0x20000030
 8006708:	2000008c 	.word	0x2000008c

0800670c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a07      	ldr	r2, [pc, #28]	; (8006738 <vApplicationGetTimerTaskMemory+0x2c>)
 800671c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	4a06      	ldr	r2, [pc, #24]	; (800673c <vApplicationGetTimerTaskMemory+0x30>)
 8006722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800672a:	601a      	str	r2, [r3, #0]
}
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	2000028c 	.word	0x2000028c
 800673c:	200002e8 	.word	0x200002e8

08006740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f103 0208 	add.w	r2, r3, #8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f04f 32ff 	mov.w	r2, #4294967295
 8006758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f103 0208 	add.w	r2, r3, #8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f103 0208 	add.w	r2, r3, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr

0800677e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	bc80      	pop	{r7}
 8006794:	4770      	bx	lr

08006796 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
 800679e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	601a      	str	r2, [r3, #0]
}
 80067d2:	bf00      	nop
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f2:	d103      	bne.n	80067fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	e00c      	b.n	8006816 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3308      	adds	r3, #8
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	e002      	b.n	800680a <vListInsert+0x2e>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	60fb      	str	r3, [r7, #12]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68ba      	ldr	r2, [r7, #8]
 8006812:	429a      	cmp	r2, r3
 8006814:	d2f6      	bcs.n	8006804 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	601a      	str	r2, [r3, #0]
}
 8006842:	bf00      	nop
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	bc80      	pop	{r7}
 800684a:	4770      	bx	lr

0800684c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	6892      	ldr	r2, [r2, #8]
 8006862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6852      	ldr	r2, [r2, #4]
 800686c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	d103      	bne.n	8006880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	1e5a      	subs	r2, r3, #1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr
	...

080068a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068ca:	f002 f887 	bl	80089dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068da:	fb01 f303 	mul.w	r3, r1, r3
 80068de:	441a      	add	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fa:	3b01      	subs	r3, #1
 80068fc:	68f9      	ldr	r1, [r7, #12]
 80068fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006900:	fb01 f303 	mul.w	r3, r1, r3
 8006904:	441a      	add	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	22ff      	movs	r2, #255	; 0xff
 800690e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	22ff      	movs	r2, #255	; 0xff
 8006916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d114      	bne.n	800694a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d01a      	beq.n	800695e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3310      	adds	r3, #16
 800692c:	4618      	mov	r0, r3
 800692e:	f001 f9af 	bl	8007c90 <xTaskRemoveFromEventList>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d012      	beq.n	800695e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <xQueueGenericReset+0xcc>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	e009      	b.n	800695e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3310      	adds	r3, #16
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fef6 	bl	8006740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3324      	adds	r3, #36	; 0x24
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fef1 	bl	8006740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800695e:	f002 f86d 	bl	8008a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006962:	2301      	movs	r3, #1
}
 8006964:	4618      	mov	r0, r3
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08e      	sub	sp, #56	; 0x38
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d10a      	bne.n	80069b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069b2:	bf00      	nop
 80069b4:	e7fe      	b.n	80069b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <xQueueGenericCreateStatic+0x52>
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <xQueueGenericCreateStatic+0x56>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <xQueueGenericCreateStatic+0x58>
 80069c6:	2300      	movs	r3, #0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	623b      	str	r3, [r7, #32]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <xQueueGenericCreateStatic+0x7e>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <xQueueGenericCreateStatic+0x82>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <xQueueGenericCreateStatic+0x84>
 80069f2:	2300      	movs	r3, #0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10a      	bne.n	8006a0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80069f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fc:	f383 8811 	msr	BASEPRI, r3
 8006a00:	f3bf 8f6f 	isb	sy
 8006a04:	f3bf 8f4f 	dsb	sy
 8006a08:	61fb      	str	r3, [r7, #28]
}
 8006a0a:	bf00      	nop
 8006a0c:	e7fe      	b.n	8006a0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a0e:	2350      	movs	r3, #80	; 0x50
 8006a10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b50      	cmp	r3, #80	; 0x50
 8006a16:	d00a      	beq.n	8006a2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	61bb      	str	r3, [r7, #24]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00d      	beq.n	8006a54 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a40:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 f843 	bl	8006ada <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3730      	adds	r7, #48	; 0x30
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b08a      	sub	sp, #40	; 0x28
 8006a62:	af02      	add	r7, sp, #8
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	613b      	str	r3, [r7, #16]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	e004      	b.n	8006a9e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	fb02 f303 	mul.w	r3, r2, r3
 8006a9c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	3350      	adds	r3, #80	; 0x50
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f002 f89a 	bl	8008bdc <pvPortMalloc>
 8006aa8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d00f      	beq.n	8006ad0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	3350      	adds	r3, #80	; 0x50
 8006ab4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006abe:	79fa      	ldrb	r2, [r7, #7]
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	68b9      	ldr	r1, [r7, #8]
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f805 	bl	8006ada <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	e002      	b.n	8006afc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b08:	2101      	movs	r1, #1
 8006b0a:	69b8      	ldr	r0, [r7, #24]
 8006b0c:	f7ff fec8 	bl	80068a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	78fa      	ldrb	r2, [r7, #3]
 8006b14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b18:	bf00      	nop
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	; 0x38
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <xQueueGenericSend+0x32>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <xQueueGenericSend+0x40>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <xQueueGenericSend+0x44>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <xQueueGenericSend+0x46>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <xQueueGenericSend+0x60>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <xQueueGenericSend+0x6e>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <xQueueGenericSend+0x72>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <xQueueGenericSend+0x74>
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10a      	bne.n	8006bae <xQueueGenericSend+0x8e>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	623b      	str	r3, [r7, #32]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bae:	f001 fa31 	bl	8008014 <xTaskGetSchedulerState>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d102      	bne.n	8006bbe <xQueueGenericSend+0x9e>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <xQueueGenericSend+0xa2>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <xQueueGenericSend+0xa4>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <xQueueGenericSend+0xbe>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	61fb      	str	r3, [r7, #28]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bde:	f001 fefd 	bl	80089dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <xQueueGenericSend+0xd4>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d129      	bne.n	8006c48 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bfa:	f000 fa87 	bl	800710c <prvCopyDataToQueue>
 8006bfe:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d010      	beq.n	8006c2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	3324      	adds	r3, #36	; 0x24
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 f83f 	bl	8007c90 <xTaskRemoveFromEventList>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d013      	beq.n	8006c40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c18:	4b3f      	ldr	r3, [pc, #252]	; (8006d18 <xQueueGenericSend+0x1f8>)
 8006c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	e00a      	b.n	8006c40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c30:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <xQueueGenericSend+0x1f8>)
 8006c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c40:	f001 fefc 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e063      	b.n	8006d10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d103      	bne.n	8006c56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c4e:	f001 fef5 	bl	8008a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	e05c      	b.n	8006d10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d106      	bne.n	8006c6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c5c:	f107 0314 	add.w	r3, r7, #20
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 f879 	bl	8007d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c6a:	f001 fee7 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c6e:	f000 fdeb 	bl	8007848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c72:	f001 feb3 	bl	80089dc <vPortEnterCritical>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	d103      	bne.n	8006c8c <xQueueGenericSend+0x16c>
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c92:	b25b      	sxtb	r3, r3
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSend+0x182>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca2:	f001 fecb 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ca6:	1d3a      	adds	r2, r7, #4
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 f868 	bl	8007d84 <xTaskCheckForTimeOut>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d124      	bne.n	8006d04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbc:	f000 fb1e 	bl	80072fc <prvIsQueueFull>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d018      	beq.n	8006cf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	3310      	adds	r3, #16
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4611      	mov	r1, r2
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 ff8e 	bl	8007bf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd6:	f000 faa9 	bl	800722c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cda:	f000 fdc3 	bl	8007864 <xTaskResumeAll>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f47f af7c 	bne.w	8006bde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006ce6:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <xQueueGenericSend+0x1f8>)
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	e772      	b.n	8006bde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cfa:	f000 fa97 	bl	800722c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cfe:	f000 fdb1 	bl	8007864 <xTaskResumeAll>
 8006d02:	e76c      	b.n	8006bde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d06:	f000 fa91 	bl	800722c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d0a:	f000 fdab 	bl	8007864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d0e:	2300      	movs	r3, #0
		}
	}
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3738      	adds	r7, #56	; 0x38
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	e000ed04 	.word	0xe000ed04

08006d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	; 0x38
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d103      	bne.n	8006d58 <xQueueGenericSendFromISR+0x3c>
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <xQueueGenericSendFromISR+0x40>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <xQueueGenericSendFromISR+0x42>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	623b      	str	r3, [r7, #32]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d103      	bne.n	8006d86 <xQueueGenericSendFromISR+0x6a>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <xQueueGenericSendFromISR+0x6e>
 8006d86:	2301      	movs	r3, #1
 8006d88:	e000      	b.n	8006d8c <xQueueGenericSendFromISR+0x70>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10a      	bne.n	8006da6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	61fb      	str	r3, [r7, #28]
}
 8006da2:	bf00      	nop
 8006da4:	e7fe      	b.n	8006da4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006da6:	f001 fedb 	bl	8008b60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006daa:	f3ef 8211 	mrs	r2, BASEPRI
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	61ba      	str	r2, [r7, #24]
 8006dc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <xQueueGenericSendFromISR+0xbc>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d12c      	bne.n	8006e32 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006de8:	f000 f990 	bl	800710c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df4:	d112      	bne.n	8006e1c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	4618      	mov	r0, r3
 8006e04:	f000 ff44 	bl	8007c90 <xTaskRemoveFromEventList>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00e      	beq.n	8006e2c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e007      	b.n	8006e2c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e20:	3301      	adds	r3, #1
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	b25a      	sxtb	r2, r3
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e30:	e001      	b.n	8006e36 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	637b      	str	r3, [r7, #52]	; 0x34
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3738      	adds	r7, #56	; 0x38
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <xQueueReceive+0x30>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	623b      	str	r3, [r7, #32]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <xQueueReceive+0x3e>
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <xQueueReceive+0x42>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <xQueueReceive+0x44>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xQueueReceive+0x5e>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	61fb      	str	r3, [r7, #28]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eaa:	f001 f8b3 	bl	8008014 <xTaskGetSchedulerState>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <xQueueReceive+0x6e>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <xQueueReceive+0x72>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <xQueueReceive+0x74>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xQueueReceive+0x8e>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	61bb      	str	r3, [r7, #24]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eda:	f001 fd7f 	bl	80089dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01f      	beq.n	8006f2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eee:	f000 f977 	bl	80071e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	1e5a      	subs	r2, r3, #1
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00f      	beq.n	8006f22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	3310      	adds	r3, #16
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fec2 	bl	8007c90 <xTaskRemoveFromEventList>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f12:	4b3d      	ldr	r3, [pc, #244]	; (8007008 <xQueueReceive+0x1bc>)
 8006f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f22:	f001 fd8b 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e069      	b.n	8006ffe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d103      	bne.n	8006f38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f30:	f001 fd84 	bl	8008a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f34:	2300      	movs	r3, #0
 8006f36:	e062      	b.n	8006ffe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f3e:	f107 0310 	add.w	r3, r7, #16
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 ff08 	bl	8007d58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f4c:	f001 fd76 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f50:	f000 fc7a 	bl	8007848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f54:	f001 fd42 	bl	80089dc <vPortEnterCritical>
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d103      	bne.n	8006f6e <xQueueReceive+0x122>
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d103      	bne.n	8006f84 <xQueueReceive+0x138>
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f84:	f001 fd5a 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f88:	1d3a      	adds	r2, r7, #4
 8006f8a:	f107 0310 	add.w	r3, r7, #16
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fef7 	bl	8007d84 <xTaskCheckForTimeOut>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d123      	bne.n	8006fe4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9e:	f000 f997 	bl	80072d0 <prvIsQueueEmpty>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	3324      	adds	r3, #36	; 0x24
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fe1d 	bl	8007bf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb8:	f000 f938 	bl	800722c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fbc:	f000 fc52 	bl	8007864 <xTaskResumeAll>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d189      	bne.n	8006eda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006fc6:	4b10      	ldr	r3, [pc, #64]	; (8007008 <xQueueReceive+0x1bc>)
 8006fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	e780      	b.n	8006eda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fda:	f000 f927 	bl	800722c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fde:	f000 fc41 	bl	8007864 <xTaskResumeAll>
 8006fe2:	e77a      	b.n	8006eda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe6:	f000 f921 	bl	800722c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fea:	f000 fc3b 	bl	8007864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff0:	f000 f96e 	bl	80072d0 <prvIsQueueEmpty>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f43f af6f 	beq.w	8006eda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3730      	adds	r7, #48	; 0x30
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08e      	sub	sp, #56	; 0x38
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701e:	2b00      	cmp	r3, #0
 8007020:	d10a      	bne.n	8007038 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	623b      	str	r3, [r7, #32]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d103      	bne.n	8007046 <xQueueReceiveFromISR+0x3a>
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <xQueueReceiveFromISR+0x3e>
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <xQueueReceiveFromISR+0x40>
 800704a:	2300      	movs	r3, #0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	61fb      	str	r3, [r7, #28]
}
 8007062:	bf00      	nop
 8007064:	e7fe      	b.n	8007064 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007066:	f001 fd7b 	bl	8008b60 <vPortValidateInterruptPriority>
	__asm volatile
 800706a:	f3ef 8211 	mrs	r2, BASEPRI
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	61ba      	str	r2, [r7, #24]
 8007080:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007082:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	2b00      	cmp	r3, #0
 8007090:	d02f      	beq.n	80070f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070a0:	f000 f89e 	bl	80071e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	1e5a      	subs	r2, r3, #1
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80070ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d112      	bne.n	80070dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d016      	beq.n	80070ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	3310      	adds	r3, #16
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fde4 	bl	8007c90 <xTaskRemoveFromEventList>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00e      	beq.n	80070ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e007      	b.n	80070ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070e0:	3301      	adds	r3, #1
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	b25a      	sxtb	r2, r3
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80070ec:	2301      	movs	r3, #1
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
 80070f0:	e001      	b.n	80070f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f383 8811 	msr	BASEPRI, r3
}
 8007100:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007104:	4618      	mov	r0, r3
 8007106:	3738      	adds	r7, #56	; 0x38
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10d      	bne.n	8007146 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d14d      	bne.n	80071ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 ff8a 	bl	8008050 <xTaskPriorityDisinherit>
 800713c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	e043      	b.n	80071ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d119      	bne.n	8007180 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6898      	ldr	r0, [r3, #8]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007154:	461a      	mov	r2, r3
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	f001 ff3c 	bl	8008fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	689a      	ldr	r2, [r3, #8]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	441a      	add	r2, r3
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	429a      	cmp	r2, r3
 8007174:	d32b      	bcc.n	80071ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	609a      	str	r2, [r3, #8]
 800717e:	e026      	b.n	80071ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68d8      	ldr	r0, [r3, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	461a      	mov	r2, r3
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	f001 ff22 	bl	8008fd4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	425b      	negs	r3, r3
 800719a:	441a      	add	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d207      	bcs.n	80071bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	425b      	negs	r3, r3
 80071b6:	441a      	add	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d105      	bne.n	80071ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1c5a      	adds	r2, r3, #1
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071d6:	697b      	ldr	r3, [r7, #20]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d018      	beq.n	8007224 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	441a      	add	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	d303      	bcc.n	8007214 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68d9      	ldr	r1, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	461a      	mov	r2, r3
 800721e:	6838      	ldr	r0, [r7, #0]
 8007220:	f001 fed8 	bl	8008fd4 <memcpy>
	}
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007234:	f001 fbd2 	bl	80089dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800723e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007240:	e011      	b.n	8007266 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	d012      	beq.n	8007270 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3324      	adds	r3, #36	; 0x24
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fd1e 	bl	8007c90 <xTaskRemoveFromEventList>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800725a:	f000 fdf5 	bl	8007e48 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
 8007260:	3b01      	subs	r3, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800726a:	2b00      	cmp	r3, #0
 800726c:	dce9      	bgt.n	8007242 <prvUnlockQueue+0x16>
 800726e:	e000      	b.n	8007272 <prvUnlockQueue+0x46>
					break;
 8007270:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800727a:	f001 fbdf 	bl	8008a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800727e:	f001 fbad 	bl	80089dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007288:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800728a:	e011      	b.n	80072b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d012      	beq.n	80072ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3310      	adds	r3, #16
 8007298:	4618      	mov	r0, r3
 800729a:	f000 fcf9 	bl	8007c90 <xTaskRemoveFromEventList>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072a4:	f000 fdd0 	bl	8007e48 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	dce9      	bgt.n	800728c <prvUnlockQueue+0x60>
 80072b8:	e000      	b.n	80072bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80072ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	22ff      	movs	r2, #255	; 0xff
 80072c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80072c4:	f001 fbba 	bl	8008a3c <vPortExitCritical>
}
 80072c8:	bf00      	nop
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072d8:	f001 fb80 	bl	80089dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d102      	bne.n	80072ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072e4:	2301      	movs	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	e001      	b.n	80072ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072ee:	f001 fba5 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 80072f2:	68fb      	ldr	r3, [r7, #12]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007304:	f001 fb6a 	bl	80089dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007310:	429a      	cmp	r2, r3
 8007312:	d102      	bne.n	800731a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007314:	2301      	movs	r3, #1
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	e001      	b.n	800731e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800731e:	f001 fb8d 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8007322:	68fb      	ldr	r3, [r7, #12]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e014      	b.n	8007366 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800733c:	4a0e      	ldr	r2, [pc, #56]	; (8007378 <vQueueAddToRegistry+0x4c>)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007348:	490b      	ldr	r1, [pc, #44]	; (8007378 <vQueueAddToRegistry+0x4c>)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007352:	4a09      	ldr	r2, [pc, #36]	; (8007378 <vQueueAddToRegistry+0x4c>)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	4413      	add	r3, r2
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800735e:	e006      	b.n	800736e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3301      	adds	r3, #1
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b07      	cmp	r3, #7
 800736a:	d9e7      	bls.n	800733c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr
 8007378:	2000290c 	.word	0x2000290c

0800737c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800738c:	f001 fb26 	bl	80089dc <vPortEnterCritical>
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007396:	b25b      	sxtb	r3, r3
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d103      	bne.n	80073a6 <vQueueWaitForMessageRestricted+0x2a>
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ac:	b25b      	sxtb	r3, r3
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d103      	bne.n	80073bc <vQueueWaitForMessageRestricted+0x40>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073bc:	f001 fb3e 	bl	8008a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	3324      	adds	r3, #36	; 0x24
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 fc31 	bl	8007c38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80073d6:	6978      	ldr	r0, [r7, #20]
 80073d8:	f7ff ff28 	bl	800722c <prvUnlockQueue>
	}
 80073dc:	bf00      	nop
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b08e      	sub	sp, #56	; 0x38
 80073e8:	af04      	add	r7, sp, #16
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10a      	bne.n	800740e <xTaskCreateStatic+0x2a>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	623b      	str	r3, [r7, #32]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <xTaskCreateStatic+0x46>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	61fb      	str	r3, [r7, #28]
}
 8007426:	bf00      	nop
 8007428:	e7fe      	b.n	8007428 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800742a:	235c      	movs	r3, #92	; 0x5c
 800742c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	2b5c      	cmp	r3, #92	; 0x5c
 8007432:	d00a      	beq.n	800744a <xTaskCreateStatic+0x66>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	61bb      	str	r3, [r7, #24]
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01e      	beq.n	800748e <xTaskCreateStatic+0xaa>
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	2b00      	cmp	r3, #0
 8007454:	d01b      	beq.n	800748e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800745e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	2202      	movs	r2, #2
 8007464:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007468:	2300      	movs	r3, #0
 800746a:	9303      	str	r3, [sp, #12]
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	9302      	str	r3, [sp, #8]
 8007470:	f107 0314 	add.w	r3, r7, #20
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	68b9      	ldr	r1, [r7, #8]
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 f850 	bl	8007526 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007488:	f000 f8d4 	bl	8007634 <prvAddNewTaskToReadyList>
 800748c:	e001      	b.n	8007492 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007492:	697b      	ldr	r3, [r7, #20]
	}
 8007494:	4618      	mov	r0, r3
 8007496:	3728      	adds	r7, #40	; 0x28
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08c      	sub	sp, #48	; 0x30
 80074a0:	af04      	add	r7, sp, #16
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ac:	88fb      	ldrh	r3, [r7, #6]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 fb93 	bl	8008bdc <pvPortMalloc>
 80074b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00e      	beq.n	80074dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80074be:	205c      	movs	r0, #92	; 0x5c
 80074c0:	f001 fb8c 	bl	8008bdc <pvPortMalloc>
 80074c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30
 80074d2:	e005      	b.n	80074e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074d4:	6978      	ldr	r0, [r7, #20]
 80074d6:	f001 fc45 	bl	8008d64 <vPortFree>
 80074da:	e001      	b.n	80074e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d017      	beq.n	8007516 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	2300      	movs	r3, #0
 80074f2:	9303      	str	r3, [sp, #12]
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	9302      	str	r3, [sp, #8]
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f80e 	bl	8007526 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800750a:	69f8      	ldr	r0, [r7, #28]
 800750c:	f000 f892 	bl	8007634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007510:	2301      	movs	r3, #1
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	e002      	b.n	800751c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007516:	f04f 33ff 	mov.w	r3, #4294967295
 800751a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800751c:	69bb      	ldr	r3, [r7, #24]
	}
 800751e:	4618      	mov	r0, r3
 8007520:	3720      	adds	r7, #32
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b088      	sub	sp, #32
 800752a:	af00      	add	r7, sp, #0
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
 8007532:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	461a      	mov	r2, r3
 800753e:	21a5      	movs	r1, #165	; 0xa5
 8007540:	f001 fd56 	bl	8008ff0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800754e:	3b01      	subs	r3, #1
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	f023 0307 	bic.w	r3, r3, #7
 800755c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <prvInitialiseNewTask+0x58>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	617b      	str	r3, [r7, #20]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
 8007582:	e012      	b.n	80075aa <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	7819      	ldrb	r1, [r3, #0]
 800758c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	3334      	adds	r3, #52	; 0x34
 8007594:	460a      	mov	r2, r1
 8007596:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d006      	beq.n	80075b2 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	3301      	adds	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	2b0f      	cmp	r3, #15
 80075ae:	d9e9      	bls.n	8007584 <prvInitialiseNewTask+0x5e>
 80075b0:	e000      	b.n	80075b4 <prvInitialiseNewTask+0x8e>
		{
			break;
 80075b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075be:	2b37      	cmp	r3, #55	; 0x37
 80075c0:	d901      	bls.n	80075c6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075c2:	2337      	movs	r3, #55	; 0x37
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	2200      	movs	r2, #0
 80075d6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	3304      	adds	r3, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff f8ce 	bl	800677e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	3318      	adds	r3, #24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff f8c9 	bl	800677e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007600:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	2200      	movs	r2, #0
 8007606:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	69b8      	ldr	r0, [r7, #24]
 8007616:	f001 f8ef 	bl	80087f8 <pxPortInitialiseStack>
 800761a:	4602      	mov	r2, r0
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d002      	beq.n	800762c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800762a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800762c:	bf00      	nop
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800763c:	f001 f9ce 	bl	80089dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007640:	4b2d      	ldr	r3, [pc, #180]	; (80076f8 <prvAddNewTaskToReadyList+0xc4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	4a2c      	ldr	r2, [pc, #176]	; (80076f8 <prvAddNewTaskToReadyList+0xc4>)
 8007648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800764a:	4b2c      	ldr	r3, [pc, #176]	; (80076fc <prvAddNewTaskToReadyList+0xc8>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007652:	4a2a      	ldr	r2, [pc, #168]	; (80076fc <prvAddNewTaskToReadyList+0xc8>)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007658:	4b27      	ldr	r3, [pc, #156]	; (80076f8 <prvAddNewTaskToReadyList+0xc4>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d110      	bne.n	8007682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007660:	f000 fc16 	bl	8007e90 <prvInitialiseTaskLists>
 8007664:	e00d      	b.n	8007682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007666:	4b26      	ldr	r3, [pc, #152]	; (8007700 <prvAddNewTaskToReadyList+0xcc>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800766e:	4b23      	ldr	r3, [pc, #140]	; (80076fc <prvAddNewTaskToReadyList+0xc8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	429a      	cmp	r2, r3
 800767a:	d802      	bhi.n	8007682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800767c:	4a1f      	ldr	r2, [pc, #124]	; (80076fc <prvAddNewTaskToReadyList+0xc8>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007682:	4b20      	ldr	r3, [pc, #128]	; (8007704 <prvAddNewTaskToReadyList+0xd0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	4a1e      	ldr	r2, [pc, #120]	; (8007704 <prvAddNewTaskToReadyList+0xd0>)
 800768a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800768c:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <prvAddNewTaskToReadyList+0xd0>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <prvAddNewTaskToReadyList+0xd4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	429a      	cmp	r2, r3
 800769e:	d903      	bls.n	80076a8 <prvAddNewTaskToReadyList+0x74>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a4:	4a18      	ldr	r2, [pc, #96]	; (8007708 <prvAddNewTaskToReadyList+0xd4>)
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ac:	4613      	mov	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	4413      	add	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4a15      	ldr	r2, [pc, #84]	; (800770c <prvAddNewTaskToReadyList+0xd8>)
 80076b6:	441a      	add	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f7ff f869 	bl	8006796 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076c4:	f001 f9ba 	bl	8008a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076c8:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <prvAddNewTaskToReadyList+0xcc>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00e      	beq.n	80076ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <prvAddNewTaskToReadyList+0xc8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	429a      	cmp	r2, r3
 80076dc:	d207      	bcs.n	80076ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076de:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <prvAddNewTaskToReadyList+0xdc>)
 80076e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	20000bbc 	.word	0x20000bbc
 80076fc:	200006e8 	.word	0x200006e8
 8007700:	20000bc8 	.word	0x20000bc8
 8007704:	20000bd8 	.word	0x20000bd8
 8007708:	20000bc4 	.word	0x20000bc4
 800770c:	200006ec 	.word	0x200006ec
 8007710:	e000ed04 	.word	0xe000ed04

08007714 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d017      	beq.n	8007756 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <vTaskDelay+0x60>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <vTaskDelay+0x30>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	60bb      	str	r3, [r7, #8]
}
 8007740:	bf00      	nop
 8007742:	e7fe      	b.n	8007742 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007744:	f000 f880 	bl	8007848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007748:	2100      	movs	r1, #0
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fcee 	bl	800812c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007750:	f000 f888 	bl	8007864 <xTaskResumeAll>
 8007754:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d107      	bne.n	800776c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <vTaskDelay+0x64>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800776c:	bf00      	nop
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}
 8007774:	20000be4 	.word	0x20000be4
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800778a:	463a      	mov	r2, r7
 800778c:	1d39      	adds	r1, r7, #4
 800778e:	f107 0308 	add.w	r3, r7, #8
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe ffa2 	bl	80066dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	9202      	str	r2, [sp, #8]
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	2300      	movs	r3, #0
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	2300      	movs	r3, #0
 80077a8:	460a      	mov	r2, r1
 80077aa:	4921      	ldr	r1, [pc, #132]	; (8007830 <vTaskStartScheduler+0xb4>)
 80077ac:	4821      	ldr	r0, [pc, #132]	; (8007834 <vTaskStartScheduler+0xb8>)
 80077ae:	f7ff fe19 	bl	80073e4 <xTaskCreateStatic>
 80077b2:	4603      	mov	r3, r0
 80077b4:	4a20      	ldr	r2, [pc, #128]	; (8007838 <vTaskStartScheduler+0xbc>)
 80077b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077b8:	4b1f      	ldr	r3, [pc, #124]	; (8007838 <vTaskStartScheduler+0xbc>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077c0:	2301      	movs	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	e001      	b.n	80077ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d102      	bne.n	80077d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077d0:	f000 fd00 	bl	80081d4 <xTimerCreateTimerTask>
 80077d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d116      	bne.n	800780a <vTaskStartScheduler+0x8e>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	613b      	str	r3, [r7, #16]
}
 80077ee:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <vTaskStartScheduler+0xc0>)
 80077f2:	f04f 32ff 	mov.w	r2, #4294967295
 80077f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077f8:	4b11      	ldr	r3, [pc, #68]	; (8007840 <vTaskStartScheduler+0xc4>)
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80077fe:	4b11      	ldr	r3, [pc, #68]	; (8007844 <vTaskStartScheduler+0xc8>)
 8007800:	2200      	movs	r2, #0
 8007802:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007804:	f001 f878 	bl	80088f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007808:	e00e      	b.n	8007828 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d10a      	bne.n	8007828 <vTaskStartScheduler+0xac>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60fb      	str	r3, [r7, #12]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <vTaskStartScheduler+0xaa>
}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	08009108 	.word	0x08009108
 8007834:	08007e61 	.word	0x08007e61
 8007838:	20000be0 	.word	0x20000be0
 800783c:	20000bdc 	.word	0x20000bdc
 8007840:	20000bc8 	.word	0x20000bc8
 8007844:	20000bc0 	.word	0x20000bc0

08007848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <vTaskSuspendAll+0x18>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	4a03      	ldr	r2, [pc, #12]	; (8007860 <vTaskSuspendAll+0x18>)
 8007854:	6013      	str	r3, [r2, #0]
}
 8007856:	bf00      	nop
 8007858:	46bd      	mov	sp, r7
 800785a:	bc80      	pop	{r7}
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20000be4 	.word	0x20000be4

08007864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007872:	4b42      	ldr	r3, [pc, #264]	; (800797c <xTaskResumeAll+0x118>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <xTaskResumeAll+0x2c>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	603b      	str	r3, [r7, #0]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007890:	f001 f8a4 	bl	80089dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007894:	4b39      	ldr	r3, [pc, #228]	; (800797c <xTaskResumeAll+0x118>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3b01      	subs	r3, #1
 800789a:	4a38      	ldr	r2, [pc, #224]	; (800797c <xTaskResumeAll+0x118>)
 800789c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789e:	4b37      	ldr	r3, [pc, #220]	; (800797c <xTaskResumeAll+0x118>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d162      	bne.n	800796c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078a6:	4b36      	ldr	r3, [pc, #216]	; (8007980 <xTaskResumeAll+0x11c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d05e      	beq.n	800796c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ae:	e02f      	b.n	8007910 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80078b0:	4b34      	ldr	r3, [pc, #208]	; (8007984 <xTaskResumeAll+0x120>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3318      	adds	r3, #24
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe ffc5 	bl	800684c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7fe ffc0 	bl	800684c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d0:	4b2d      	ldr	r3, [pc, #180]	; (8007988 <xTaskResumeAll+0x124>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d903      	bls.n	80078e0 <xTaskResumeAll+0x7c>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078dc:	4a2a      	ldr	r2, [pc, #168]	; (8007988 <xTaskResumeAll+0x124>)
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4a27      	ldr	r2, [pc, #156]	; (800798c <xTaskResumeAll+0x128>)
 80078ee:	441a      	add	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7fe ff4d 	bl	8006796 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007900:	4b23      	ldr	r3, [pc, #140]	; (8007990 <xTaskResumeAll+0x12c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	429a      	cmp	r2, r3
 8007908:	d302      	bcc.n	8007910 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800790a:	4b22      	ldr	r3, [pc, #136]	; (8007994 <xTaskResumeAll+0x130>)
 800790c:	2201      	movs	r2, #1
 800790e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007910:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <xTaskResumeAll+0x120>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1cb      	bne.n	80078b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800791e:	f000 fb55 	bl	8007fcc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007922:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <xTaskResumeAll+0x134>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d010      	beq.n	8007950 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800792e:	f000 f845 	bl	80079bc <xTaskIncrementTick>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007938:	4b16      	ldr	r3, [pc, #88]	; (8007994 <xTaskResumeAll+0x130>)
 800793a:	2201      	movs	r2, #1
 800793c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3b01      	subs	r3, #1
 8007942:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1f1      	bne.n	800792e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800794a:	4b13      	ldr	r3, [pc, #76]	; (8007998 <xTaskResumeAll+0x134>)
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007950:	4b10      	ldr	r3, [pc, #64]	; (8007994 <xTaskResumeAll+0x130>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d009      	beq.n	800796c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007958:	2301      	movs	r3, #1
 800795a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800795c:	4b0f      	ldr	r3, [pc, #60]	; (800799c <xTaskResumeAll+0x138>)
 800795e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800796c:	f001 f866 	bl	8008a3c <vPortExitCritical>

	return xAlreadyYielded;
 8007970:	68bb      	ldr	r3, [r7, #8]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000be4 	.word	0x20000be4
 8007980:	20000bbc 	.word	0x20000bbc
 8007984:	20000b7c 	.word	0x20000b7c
 8007988:	20000bc4 	.word	0x20000bc4
 800798c:	200006ec 	.word	0x200006ec
 8007990:	200006e8 	.word	0x200006e8
 8007994:	20000bd0 	.word	0x20000bd0
 8007998:	20000bcc 	.word	0x20000bcc
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079a6:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <xTaskGetTickCount+0x18>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079ac:	687b      	ldr	r3, [r7, #4]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr
 80079b8:	20000bc0 	.word	0x20000bc0

080079bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c6:	4b51      	ldr	r3, [pc, #324]	; (8007b0c <xTaskIncrementTick+0x150>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 808e 	bne.w	8007aec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079d0:	4b4f      	ldr	r3, [pc, #316]	; (8007b10 <xTaskIncrementTick+0x154>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079d8:	4a4d      	ldr	r2, [pc, #308]	; (8007b10 <xTaskIncrementTick+0x154>)
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d120      	bne.n	8007a26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079e4:	4b4b      	ldr	r3, [pc, #300]	; (8007b14 <xTaskIncrementTick+0x158>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00a      	beq.n	8007a04 <xTaskIncrementTick+0x48>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	603b      	str	r3, [r7, #0]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <xTaskIncrementTick+0x46>
 8007a04:	4b43      	ldr	r3, [pc, #268]	; (8007b14 <xTaskIncrementTick+0x158>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	4b43      	ldr	r3, [pc, #268]	; (8007b18 <xTaskIncrementTick+0x15c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a41      	ldr	r2, [pc, #260]	; (8007b14 <xTaskIncrementTick+0x158>)
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	4a41      	ldr	r2, [pc, #260]	; (8007b18 <xTaskIncrementTick+0x15c>)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	4b40      	ldr	r3, [pc, #256]	; (8007b1c <xTaskIncrementTick+0x160>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	4a3f      	ldr	r2, [pc, #252]	; (8007b1c <xTaskIncrementTick+0x160>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	f000 fad3 	bl	8007fcc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a26:	4b3e      	ldr	r3, [pc, #248]	; (8007b20 <xTaskIncrementTick+0x164>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d34e      	bcc.n	8007ace <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a30:	4b38      	ldr	r3, [pc, #224]	; (8007b14 <xTaskIncrementTick+0x158>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <xTaskIncrementTick+0x82>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e000      	b.n	8007a40 <xTaskIncrementTick+0x84>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a44:	4b36      	ldr	r3, [pc, #216]	; (8007b20 <xTaskIncrementTick+0x164>)
 8007a46:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4a:	601a      	str	r2, [r3, #0]
					break;
 8007a4c:	e03f      	b.n	8007ace <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a4e:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <xTaskIncrementTick+0x158>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d203      	bcs.n	8007a6e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a66:	4a2e      	ldr	r2, [pc, #184]	; (8007b20 <xTaskIncrementTick+0x164>)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6013      	str	r3, [r2, #0]
						break;
 8007a6c:	e02f      	b.n	8007ace <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7fe feea 	bl	800684c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3318      	adds	r3, #24
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fe fee1 	bl	800684c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8e:	4b25      	ldr	r3, [pc, #148]	; (8007b24 <xTaskIncrementTick+0x168>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d903      	bls.n	8007a9e <xTaskIncrementTick+0xe2>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	4a22      	ldr	r2, [pc, #136]	; (8007b24 <xTaskIncrementTick+0x168>)
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4a1f      	ldr	r2, [pc, #124]	; (8007b28 <xTaskIncrementTick+0x16c>)
 8007aac:	441a      	add	r2, r3
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f7fe fe6e 	bl	8006796 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abe:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <xTaskIncrementTick+0x170>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d3b3      	bcc.n	8007a30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007acc:	e7b0      	b.n	8007a30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ace:	4b17      	ldr	r3, [pc, #92]	; (8007b2c <xTaskIncrementTick+0x170>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad4:	4914      	ldr	r1, [pc, #80]	; (8007b28 <xTaskIncrementTick+0x16c>)
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d907      	bls.n	8007af6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	e004      	b.n	8007af6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007aec:	4b10      	ldr	r3, [pc, #64]	; (8007b30 <xTaskIncrementTick+0x174>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3301      	adds	r3, #1
 8007af2:	4a0f      	ldr	r2, [pc, #60]	; (8007b30 <xTaskIncrementTick+0x174>)
 8007af4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007af6:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <xTaskIncrementTick+0x178>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007afe:	2301      	movs	r3, #1
 8007b00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b02:	697b      	ldr	r3, [r7, #20]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000be4 	.word	0x20000be4
 8007b10:	20000bc0 	.word	0x20000bc0
 8007b14:	20000b74 	.word	0x20000b74
 8007b18:	20000b78 	.word	0x20000b78
 8007b1c:	20000bd4 	.word	0x20000bd4
 8007b20:	20000bdc 	.word	0x20000bdc
 8007b24:	20000bc4 	.word	0x20000bc4
 8007b28:	200006ec 	.word	0x200006ec
 8007b2c:	200006e8 	.word	0x200006e8
 8007b30:	20000bcc 	.word	0x20000bcc
 8007b34:	20000bd0 	.word	0x20000bd0

08007b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b3e:	4b27      	ldr	r3, [pc, #156]	; (8007bdc <vTaskSwitchContext+0xa4>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b46:	4b26      	ldr	r3, [pc, #152]	; (8007be0 <vTaskSwitchContext+0xa8>)
 8007b48:	2201      	movs	r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b4c:	e041      	b.n	8007bd2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b4e:	4b24      	ldr	r3, [pc, #144]	; (8007be0 <vTaskSwitchContext+0xa8>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b54:	4b23      	ldr	r3, [pc, #140]	; (8007be4 <vTaskSwitchContext+0xac>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	e010      	b.n	8007b7e <vTaskSwitchContext+0x46>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	607b      	str	r3, [r7, #4]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <vTaskSwitchContext+0x3e>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]
 8007b7e:	491a      	ldr	r1, [pc, #104]	; (8007be8 <vTaskSwitchContext+0xb0>)
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0e4      	beq.n	8007b5c <vTaskSwitchContext+0x24>
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4a12      	ldr	r2, [pc, #72]	; (8007be8 <vTaskSwitchContext+0xb0>)
 8007b9e:	4413      	add	r3, r2
 8007ba0:	60bb      	str	r3, [r7, #8]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	605a      	str	r2, [r3, #4]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d104      	bne.n	8007bc2 <vTaskSwitchContext+0x8a>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	605a      	str	r2, [r3, #4]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	4a08      	ldr	r2, [pc, #32]	; (8007bec <vTaskSwitchContext+0xb4>)
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	4a05      	ldr	r2, [pc, #20]	; (8007be4 <vTaskSwitchContext+0xac>)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6013      	str	r3, [r2, #0]
}
 8007bd2:	bf00      	nop
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr
 8007bdc:	20000be4 	.word	0x20000be4
 8007be0:	20000bd0 	.word	0x20000bd0
 8007be4:	20000bc4 	.word	0x20000bc4
 8007be8:	200006ec 	.word	0x200006ec
 8007bec:	200006e8 	.word	0x200006e8

08007bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10a      	bne.n	8007c16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	60fb      	str	r3, [r7, #12]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c16:	4b07      	ldr	r3, [pc, #28]	; (8007c34 <vTaskPlaceOnEventList+0x44>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3318      	adds	r3, #24
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fe fddc 	bl	80067dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c24:	2101      	movs	r1, #1
 8007c26:	6838      	ldr	r0, [r7, #0]
 8007c28:	f000 fa80 	bl	800812c <prvAddCurrentTaskToDelayedList>
}
 8007c2c:	bf00      	nop
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	200006e8 	.word	0x200006e8

08007c38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	617b      	str	r3, [r7, #20]
}
 8007c5c:	bf00      	nop
 8007c5e:	e7fe      	b.n	8007c5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c60:	4b0a      	ldr	r3, [pc, #40]	; (8007c8c <vTaskPlaceOnEventListRestricted+0x54>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3318      	adds	r3, #24
 8007c66:	4619      	mov	r1, r3
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7fe fd94 	bl	8006796 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c74:	f04f 33ff 	mov.w	r3, #4294967295
 8007c78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	68b8      	ldr	r0, [r7, #8]
 8007c7e:	f000 fa55 	bl	800812c <prvAddCurrentTaskToDelayedList>
	}
 8007c82:	bf00      	nop
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	200006e8 	.word	0x200006e8

08007c90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10a      	bne.n	8007cbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	60fb      	str	r3, [r7, #12]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3318      	adds	r3, #24
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fe fdc3 	bl	800684c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cc6:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <xTaskRemoveFromEventList+0xb0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d11d      	bne.n	8007d0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fdba 	bl	800684c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cdc:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <xTaskRemoveFromEventList+0xb4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d903      	bls.n	8007cec <xTaskRemoveFromEventList+0x5c>
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	4a16      	ldr	r2, [pc, #88]	; (8007d44 <xTaskRemoveFromEventList+0xb4>)
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4a13      	ldr	r2, [pc, #76]	; (8007d48 <xTaskRemoveFromEventList+0xb8>)
 8007cfa:	441a      	add	r2, r3
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4619      	mov	r1, r3
 8007d02:	4610      	mov	r0, r2
 8007d04:	f7fe fd47 	bl	8006796 <vListInsertEnd>
 8007d08:	e005      	b.n	8007d16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3318      	adds	r3, #24
 8007d0e:	4619      	mov	r1, r3
 8007d10:	480e      	ldr	r0, [pc, #56]	; (8007d4c <xTaskRemoveFromEventList+0xbc>)
 8007d12:	f7fe fd40 	bl	8006796 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1a:	4b0d      	ldr	r3, [pc, #52]	; (8007d50 <xTaskRemoveFromEventList+0xc0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d905      	bls.n	8007d30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d24:	2301      	movs	r3, #1
 8007d26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <xTaskRemoveFromEventList+0xc4>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e001      	b.n	8007d34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d34:	697b      	ldr	r3, [r7, #20]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000be4 	.word	0x20000be4
 8007d44:	20000bc4 	.word	0x20000bc4
 8007d48:	200006ec 	.word	0x200006ec
 8007d4c:	20000b7c 	.word	0x20000b7c
 8007d50:	200006e8 	.word	0x200006e8
 8007d54:	20000bd0 	.word	0x20000bd0

08007d58 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d60:	4b06      	ldr	r3, [pc, #24]	; (8007d7c <vTaskInternalSetTimeOutState+0x24>)
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d68:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <vTaskInternalSetTimeOutState+0x28>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	605a      	str	r2, [r3, #4]
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000bd4 	.word	0x20000bd4
 8007d80:	20000bc0 	.word	0x20000bc0

08007d84 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b088      	sub	sp, #32
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10a      	bne.n	8007daa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	613b      	str	r3, [r7, #16]
}
 8007da6:	bf00      	nop
 8007da8:	e7fe      	b.n	8007da8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10a      	bne.n	8007dc6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dc6:	f000 fe09 	bl	80089dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dca:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <xTaskCheckForTimeOut+0xbc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d102      	bne.n	8007dea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	e023      	b.n	8007e32 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <xTaskCheckForTimeOut+0xc0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d007      	beq.n	8007e06 <xTaskCheckForTimeOut+0x82>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d302      	bcc.n	8007e06 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e00:	2301      	movs	r3, #1
 8007e02:	61fb      	str	r3, [r7, #28]
 8007e04:	e015      	b.n	8007e32 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d20b      	bcs.n	8007e28 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	1ad2      	subs	r2, r2, r3
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff ff9b 	bl	8007d58 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	e004      	b.n	8007e32 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e32:	f000 fe03 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8007e36:	69fb      	ldr	r3, [r7, #28]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20000bc0 	.word	0x20000bc0
 8007e44:	20000bd4 	.word	0x20000bd4

08007e48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e48:	b480      	push	{r7}
 8007e4a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <vTaskMissedYield+0x14>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	601a      	str	r2, [r3, #0]
}
 8007e52:	bf00      	nop
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bc80      	pop	{r7}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	20000bd0 	.word	0x20000bd0

08007e60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e68:	f000 f852 	bl	8007f10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <prvIdleTask+0x28>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d9f9      	bls.n	8007e68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <prvIdleTask+0x2c>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e84:	e7f0      	b.n	8007e68 <prvIdleTask+0x8>
 8007e86:	bf00      	nop
 8007e88:	200006ec 	.word	0x200006ec
 8007e8c:	e000ed04 	.word	0xe000ed04

08007e90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e96:	2300      	movs	r3, #0
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	e00c      	b.n	8007eb6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4a12      	ldr	r2, [pc, #72]	; (8007ef0 <prvInitialiseTaskLists+0x60>)
 8007ea8:	4413      	add	r3, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fe fc48 	bl	8006740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	607b      	str	r3, [r7, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b37      	cmp	r3, #55	; 0x37
 8007eba:	d9ef      	bls.n	8007e9c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ebc:	480d      	ldr	r0, [pc, #52]	; (8007ef4 <prvInitialiseTaskLists+0x64>)
 8007ebe:	f7fe fc3f 	bl	8006740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ec2:	480d      	ldr	r0, [pc, #52]	; (8007ef8 <prvInitialiseTaskLists+0x68>)
 8007ec4:	f7fe fc3c 	bl	8006740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ec8:	480c      	ldr	r0, [pc, #48]	; (8007efc <prvInitialiseTaskLists+0x6c>)
 8007eca:	f7fe fc39 	bl	8006740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ece:	480c      	ldr	r0, [pc, #48]	; (8007f00 <prvInitialiseTaskLists+0x70>)
 8007ed0:	f7fe fc36 	bl	8006740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ed4:	480b      	ldr	r0, [pc, #44]	; (8007f04 <prvInitialiseTaskLists+0x74>)
 8007ed6:	f7fe fc33 	bl	8006740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <prvInitialiseTaskLists+0x78>)
 8007edc:	4a05      	ldr	r2, [pc, #20]	; (8007ef4 <prvInitialiseTaskLists+0x64>)
 8007ede:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ee0:	4b0a      	ldr	r3, [pc, #40]	; (8007f0c <prvInitialiseTaskLists+0x7c>)
 8007ee2:	4a05      	ldr	r2, [pc, #20]	; (8007ef8 <prvInitialiseTaskLists+0x68>)
 8007ee4:	601a      	str	r2, [r3, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	200006ec 	.word	0x200006ec
 8007ef4:	20000b4c 	.word	0x20000b4c
 8007ef8:	20000b60 	.word	0x20000b60
 8007efc:	20000b7c 	.word	0x20000b7c
 8007f00:	20000b90 	.word	0x20000b90
 8007f04:	20000ba8 	.word	0x20000ba8
 8007f08:	20000b74 	.word	0x20000b74
 8007f0c:	20000b78 	.word	0x20000b78

08007f10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f16:	e019      	b.n	8007f4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f18:	f000 fd60 	bl	80089dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f1c:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <prvCheckTasksWaitingTermination+0x50>)
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fe fc8f 	bl	800684c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <prvCheckTasksWaitingTermination+0x54>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	4a0b      	ldr	r2, [pc, #44]	; (8007f64 <prvCheckTasksWaitingTermination+0x54>)
 8007f36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f38:	4b0b      	ldr	r3, [pc, #44]	; (8007f68 <prvCheckTasksWaitingTermination+0x58>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	4a0a      	ldr	r2, [pc, #40]	; (8007f68 <prvCheckTasksWaitingTermination+0x58>)
 8007f40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f42:	f000 fd7b 	bl	8008a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f810 	bl	8007f6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f4c:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <prvCheckTasksWaitingTermination+0x58>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e1      	bne.n	8007f18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000b90 	.word	0x20000b90
 8007f64:	20000bbc 	.word	0x20000bbc
 8007f68:	20000ba4 	.word	0x20000ba4

08007f6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d108      	bne.n	8007f90 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 feee 	bl	8008d64 <vPortFree>
				vPortFree( pxTCB );
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 feeb 	bl	8008d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f8e:	e018      	b.n	8007fc2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d103      	bne.n	8007fa2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fee2 	bl	8008d64 <vPortFree>
	}
 8007fa0:	e00f      	b.n	8007fc2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d00a      	beq.n	8007fc2 <prvDeleteTCB+0x56>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <prvDeleteTCB+0x54>
	}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fd2:	4b0e      	ldr	r3, [pc, #56]	; (800800c <prvResetNextTaskUnblockTime+0x40>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <prvResetNextTaskUnblockTime+0x14>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <prvResetNextTaskUnblockTime+0x16>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d004      	beq.n	8007ff0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fe6:	4b0a      	ldr	r3, [pc, #40]	; (8008010 <prvResetNextTaskUnblockTime+0x44>)
 8007fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fee:	e008      	b.n	8008002 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <prvResetNextTaskUnblockTime+0x40>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	4a04      	ldr	r2, [pc, #16]	; (8008010 <prvResetNextTaskUnblockTime+0x44>)
 8008000:	6013      	str	r3, [r2, #0]
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	bc80      	pop	{r7}
 800800a:	4770      	bx	lr
 800800c:	20000b74 	.word	0x20000b74
 8008010:	20000bdc 	.word	0x20000bdc

08008014 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800801a:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <xTaskGetSchedulerState+0x34>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d102      	bne.n	8008028 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008022:	2301      	movs	r3, #1
 8008024:	607b      	str	r3, [r7, #4]
 8008026:	e008      	b.n	800803a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008028:	4b08      	ldr	r3, [pc, #32]	; (800804c <xTaskGetSchedulerState+0x38>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008030:	2302      	movs	r3, #2
 8008032:	607b      	str	r3, [r7, #4]
 8008034:	e001      	b.n	800803a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008036:	2300      	movs	r3, #0
 8008038:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800803a:	687b      	ldr	r3, [r7, #4]
	}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	20000bc8 	.word	0x20000bc8
 800804c:	20000be4 	.word	0x20000be4

08008050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800805c:	2300      	movs	r3, #0
 800805e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d056      	beq.n	8008114 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008066:	4b2e      	ldr	r3, [pc, #184]	; (8008120 <xTaskPriorityDisinherit+0xd0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	429a      	cmp	r2, r3
 800806e:	d00a      	beq.n	8008086 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60fb      	str	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808a:	2b00      	cmp	r3, #0
 800808c:	d10a      	bne.n	80080a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008092:	f383 8811 	msr	BASEPRI, r3
 8008096:	f3bf 8f6f 	isb	sy
 800809a:	f3bf 8f4f 	dsb	sy
 800809e:	60bb      	str	r3, [r7, #8]
}
 80080a0:	bf00      	nop
 80080a2:	e7fe      	b.n	80080a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a8:	1e5a      	subs	r2, r3, #1
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d02c      	beq.n	8008114 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d128      	bne.n	8008114 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	3304      	adds	r3, #4
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fbc0 	bl	800684c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <xTaskPriorityDisinherit+0xd4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d903      	bls.n	80080f4 <xTaskPriorityDisinherit+0xa4>
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f0:	4a0c      	ldr	r2, [pc, #48]	; (8008124 <xTaskPriorityDisinherit+0xd4>)
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f8:	4613      	mov	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4a09      	ldr	r2, [pc, #36]	; (8008128 <xTaskPriorityDisinherit+0xd8>)
 8008102:	441a      	add	r2, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	3304      	adds	r3, #4
 8008108:	4619      	mov	r1, r3
 800810a:	4610      	mov	r0, r2
 800810c:	f7fe fb43 	bl	8006796 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008110:	2301      	movs	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008114:	697b      	ldr	r3, [r7, #20]
	}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	200006e8 	.word	0x200006e8
 8008124:	20000bc4 	.word	0x20000bc4
 8008128:	200006ec 	.word	0x200006ec

0800812c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008136:	4b21      	ldr	r3, [pc, #132]	; (80081bc <prvAddCurrentTaskToDelayedList+0x90>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800813c:	4b20      	ldr	r3, [pc, #128]	; (80081c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3304      	adds	r3, #4
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fb82 	bl	800684c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d10a      	bne.n	8008166 <prvAddCurrentTaskToDelayedList+0x3a>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d007      	beq.n	8008166 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008156:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3304      	adds	r3, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4819      	ldr	r0, [pc, #100]	; (80081c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008160:	f7fe fb19 	bl	8006796 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008164:	e026      	b.n	80081b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4413      	add	r3, r2
 800816c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800816e:	4b14      	ldr	r3, [pc, #80]	; (80081c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008176:	68ba      	ldr	r2, [r7, #8]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	429a      	cmp	r2, r3
 800817c:	d209      	bcs.n	8008192 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800817e:	4b12      	ldr	r3, [pc, #72]	; (80081c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3304      	adds	r3, #4
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f7fe fb26 	bl	80067dc <vListInsert>
}
 8008190:	e010      	b.n	80081b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008192:	4b0e      	ldr	r3, [pc, #56]	; (80081cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	4b0a      	ldr	r3, [pc, #40]	; (80081c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	3304      	adds	r3, #4
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f7fe fb1c 	bl	80067dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d202      	bcs.n	80081b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081ae:	4a08      	ldr	r2, [pc, #32]	; (80081d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6013      	str	r3, [r2, #0]
}
 80081b4:	bf00      	nop
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000bc0 	.word	0x20000bc0
 80081c0:	200006e8 	.word	0x200006e8
 80081c4:	20000ba8 	.word	0x20000ba8
 80081c8:	20000b78 	.word	0x20000b78
 80081cc:	20000b74 	.word	0x20000b74
 80081d0:	20000bdc 	.word	0x20000bdc

080081d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081de:	f000 facb 	bl	8008778 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081e2:	4b1c      	ldr	r3, [pc, #112]	; (8008254 <xTimerCreateTimerTask+0x80>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d021      	beq.n	800822e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081f2:	1d3a      	adds	r2, r7, #4
 80081f4:	f107 0108 	add.w	r1, r7, #8
 80081f8:	f107 030c 	add.w	r3, r7, #12
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fe fa85 	bl	800670c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	9202      	str	r2, [sp, #8]
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	2302      	movs	r3, #2
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	2300      	movs	r3, #0
 8008212:	460a      	mov	r2, r1
 8008214:	4910      	ldr	r1, [pc, #64]	; (8008258 <xTimerCreateTimerTask+0x84>)
 8008216:	4811      	ldr	r0, [pc, #68]	; (800825c <xTimerCreateTimerTask+0x88>)
 8008218:	f7ff f8e4 	bl	80073e4 <xTaskCreateStatic>
 800821c:	4603      	mov	r3, r0
 800821e:	4a10      	ldr	r2, [pc, #64]	; (8008260 <xTimerCreateTimerTask+0x8c>)
 8008220:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <xTimerCreateTimerTask+0x8c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800822a:	2301      	movs	r3, #1
 800822c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	613b      	str	r3, [r7, #16]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800824a:	697b      	ldr	r3, [r7, #20]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000c18 	.word	0x20000c18
 8008258:	08009110 	.word	0x08009110
 800825c:	08008381 	.word	0x08008381
 8008260:	20000c1c 	.word	0x20000c1c

08008264 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08a      	sub	sp, #40	; 0x28
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008272:	2300      	movs	r3, #0
 8008274:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10a      	bne.n	8008292 <xTimerGenericCommand+0x2e>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	623b      	str	r3, [r7, #32]
}
 800828e:	bf00      	nop
 8008290:	e7fe      	b.n	8008290 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008292:	4b1a      	ldr	r3, [pc, #104]	; (80082fc <xTimerGenericCommand+0x98>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d02a      	beq.n	80082f0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	dc18      	bgt.n	80082de <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082ac:	f7ff feb2 	bl	8008014 <xTaskGetSchedulerState>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d109      	bne.n	80082ca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <xTimerGenericCommand+0x98>)
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	f107 0110 	add.w	r1, r7, #16
 80082be:	2300      	movs	r3, #0
 80082c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c2:	f7fe fc2d 	bl	8006b20 <xQueueGenericSend>
 80082c6:	6278      	str	r0, [r7, #36]	; 0x24
 80082c8:	e012      	b.n	80082f0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082ca:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <xTimerGenericCommand+0x98>)
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f107 0110 	add.w	r1, r7, #16
 80082d2:	2300      	movs	r3, #0
 80082d4:	2200      	movs	r2, #0
 80082d6:	f7fe fc23 	bl	8006b20 <xQueueGenericSend>
 80082da:	6278      	str	r0, [r7, #36]	; 0x24
 80082dc:	e008      	b.n	80082f0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082de:	4b07      	ldr	r3, [pc, #28]	; (80082fc <xTimerGenericCommand+0x98>)
 80082e0:	6818      	ldr	r0, [r3, #0]
 80082e2:	f107 0110 	add.w	r1, r7, #16
 80082e6:	2300      	movs	r3, #0
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	f7fe fd17 	bl	8006d1c <xQueueGenericSendFromISR>
 80082ee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3728      	adds	r7, #40	; 0x28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	20000c18 	.word	0x20000c18

08008300 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b088      	sub	sp, #32
 8008304:	af02      	add	r7, sp, #8
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800830a:	4b1c      	ldr	r3, [pc, #112]	; (800837c <prvProcessExpiredTimer+0x7c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	3304      	adds	r3, #4
 8008318:	4618      	mov	r0, r3
 800831a:	f7fe fa97 	bl	800684c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	2b01      	cmp	r3, #1
 8008324:	d122      	bne.n	800836c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	18d1      	adds	r1, r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	6978      	ldr	r0, [r7, #20]
 8008334:	f000 f8c8 	bl	80084c8 <prvInsertTimerInActiveList>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d016      	beq.n	800836c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800833e:	2300      	movs	r3, #0
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	2300      	movs	r3, #0
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	2100      	movs	r1, #0
 8008348:	6978      	ldr	r0, [r7, #20]
 800834a:	f7ff ff8b 	bl	8008264 <xTimerGenericCommand>
 800834e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	60fb      	str	r3, [r7, #12]
}
 8008368:	bf00      	nop
 800836a:	e7fe      	b.n	800836a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	6978      	ldr	r0, [r7, #20]
 8008372:	4798      	blx	r3
}
 8008374:	bf00      	nop
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000c10 	.word	0x20000c10

08008380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008388:	f107 0308 	add.w	r3, r7, #8
 800838c:	4618      	mov	r0, r3
 800838e:	f000 f857 	bl	8008440 <prvGetNextExpireTime>
 8008392:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	4619      	mov	r1, r3
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 f803 	bl	80083a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800839e:	f000 f8d5 	bl	800854c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083a2:	e7f1      	b.n	8008388 <prvTimerTask+0x8>

080083a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80083ae:	f7ff fa4b 	bl	8007848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083b2:	f107 0308 	add.w	r3, r7, #8
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f866 	bl	8008488 <prvSampleTimeNow>
 80083bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d130      	bne.n	8008426 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <prvProcessTimerOrBlockTask+0x3c>
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d806      	bhi.n	80083e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083d2:	f7ff fa47 	bl	8007864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083d6:	68f9      	ldr	r1, [r7, #12]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff ff91 	bl	8008300 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083de:	e024      	b.n	800842a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d008      	beq.n	80083f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083e6:	4b13      	ldr	r3, [pc, #76]	; (8008434 <prvProcessTimerOrBlockTask+0x90>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bf0c      	ite	eq
 80083f0:	2301      	moveq	r3, #1
 80083f2:	2300      	movne	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083f8:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <prvProcessTimerOrBlockTask+0x94>)
 80083fa:	6818      	ldr	r0, [r3, #0]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4619      	mov	r1, r3
 8008406:	f7fe ffb9 	bl	800737c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800840a:	f7ff fa2b 	bl	8007864 <xTaskResumeAll>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008414:	4b09      	ldr	r3, [pc, #36]	; (800843c <prvProcessTimerOrBlockTask+0x98>)
 8008416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	f3bf 8f6f 	isb	sy
}
 8008424:	e001      	b.n	800842a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008426:	f7ff fa1d 	bl	8007864 <xTaskResumeAll>
}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000c14 	.word	0x20000c14
 8008438:	20000c18 	.word	0x20000c18
 800843c:	e000ed04 	.word	0xe000ed04

08008440 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008448:	4b0e      	ldr	r3, [pc, #56]	; (8008484 <prvGetNextExpireTime+0x44>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	bf0c      	ite	eq
 8008452:	2301      	moveq	r3, #1
 8008454:	2300      	movne	r3, #0
 8008456:	b2db      	uxtb	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d105      	bne.n	8008472 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008466:	4b07      	ldr	r3, [pc, #28]	; (8008484 <prvGetNextExpireTime+0x44>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	60fb      	str	r3, [r7, #12]
 8008470:	e001      	b.n	8008476 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008476:	68fb      	ldr	r3, [r7, #12]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000c10 	.word	0x20000c10

08008488 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008490:	f7ff fa86 	bl	80079a0 <xTaskGetTickCount>
 8008494:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <prvSampleTimeNow+0x3c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	429a      	cmp	r2, r3
 800849e:	d205      	bcs.n	80084ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084a0:	f000 f908 	bl	80086b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	601a      	str	r2, [r3, #0]
 80084aa:	e002      	b.n	80084b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80084b2:	4a04      	ldr	r2, [pc, #16]	; (80084c4 <prvSampleTimeNow+0x3c>)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084b8:	68fb      	ldr	r3, [r7, #12]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	20000c20 	.word	0x20000c20

080084c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d812      	bhi.n	8008514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	1ad2      	subs	r2, r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	699b      	ldr	r3, [r3, #24]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d302      	bcc.n	8008502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084fc:	2301      	movs	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	e01b      	b.n	800853a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008502:	4b10      	ldr	r3, [pc, #64]	; (8008544 <prvInsertTimerInActiveList+0x7c>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3304      	adds	r3, #4
 800850a:	4619      	mov	r1, r3
 800850c:	4610      	mov	r0, r2
 800850e:	f7fe f965 	bl	80067dc <vListInsert>
 8008512:	e012      	b.n	800853a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d206      	bcs.n	800852a <prvInsertTimerInActiveList+0x62>
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	d302      	bcc.n	800852a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008524:	2301      	movs	r3, #1
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e007      	b.n	800853a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800852a:	4b07      	ldr	r3, [pc, #28]	; (8008548 <prvInsertTimerInActiveList+0x80>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3304      	adds	r3, #4
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f7fe f951 	bl	80067dc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800853a:	697b      	ldr	r3, [r7, #20]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000c14 	.word	0x20000c14
 8008548:	20000c10 	.word	0x20000c10

0800854c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08e      	sub	sp, #56	; 0x38
 8008550:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008552:	e09d      	b.n	8008690 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	da18      	bge.n	800858c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800855a:	1d3b      	adds	r3, r7, #4
 800855c:	3304      	adds	r3, #4
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10a      	bne.n	800857c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	61fb      	str	r3, [r7, #28]
}
 8008578:	bf00      	nop
 800857a:	e7fe      	b.n	800857a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008582:	6850      	ldr	r0, [r2, #4]
 8008584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008586:	6892      	ldr	r2, [r2, #8]
 8008588:	4611      	mov	r1, r2
 800858a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	db7d      	blt.n	800868e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800859e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a0:	3304      	adds	r3, #4
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe f952 	bl	800684c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085a8:	463b      	mov	r3, r7
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7ff ff6c 	bl	8008488 <prvSampleTimeNow>
 80085b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b09      	cmp	r3, #9
 80085b6:	d86b      	bhi.n	8008690 <prvProcessReceivedCommands+0x144>
 80085b8:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <prvProcessReceivedCommands+0x74>)
 80085ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085be:	bf00      	nop
 80085c0:	080085e9 	.word	0x080085e9
 80085c4:	080085e9 	.word	0x080085e9
 80085c8:	080085e9 	.word	0x080085e9
 80085cc:	08008691 	.word	0x08008691
 80085d0:	08008645 	.word	0x08008645
 80085d4:	0800867d 	.word	0x0800867d
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	080085e9 	.word	0x080085e9
 80085e0:	08008691 	.word	0x08008691
 80085e4:	08008645 	.word	0x08008645
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	18d1      	adds	r1, r2, r3
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f6:	f7ff ff67 	bl	80084c8 <prvInsertTimerInActiveList>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d047      	beq.n	8008690 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008606:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d13f      	bne.n	8008690 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	699b      	ldr	r3, [r3, #24]
 8008616:	441a      	add	r2, r3
 8008618:	2300      	movs	r3, #0
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2300      	movs	r3, #0
 800861e:	2100      	movs	r1, #0
 8008620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008622:	f7ff fe1f 	bl	8008264 <xTimerGenericCommand>
 8008626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d130      	bne.n	8008690 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	61bb      	str	r3, [r7, #24]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800864a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	617b      	str	r3, [r7, #20]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	699a      	ldr	r2, [r3, #24]
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	18d1      	adds	r1, r2, r3
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008676:	f7ff ff27 	bl	80084c8 <prvInsertTimerInActiveList>
					break;
 800867a:	e009      	b.n	8008690 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008682:	2b00      	cmp	r3, #0
 8008684:	d104      	bne.n	8008690 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008688:	f000 fb6c 	bl	8008d64 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800868c:	e000      	b.n	8008690 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800868e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008690:	4b07      	ldr	r3, [pc, #28]	; (80086b0 <prvProcessReceivedCommands+0x164>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	1d39      	adds	r1, r7, #4
 8008696:	2200      	movs	r2, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f7fe fbd7 	bl	8006e4c <xQueueReceive>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f47f af57 	bne.w	8008554 <prvProcessReceivedCommands+0x8>
	}
}
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	3730      	adds	r7, #48	; 0x30
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20000c18 	.word	0x20000c18

080086b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ba:	e045      	b.n	8008748 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086bc:	4b2c      	ldr	r3, [pc, #176]	; (8008770 <prvSwitchTimerLists+0xbc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086c6:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <prvSwitchTimerLists+0xbc>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe f8b9 	bl	800684c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d12e      	bne.n	8008748 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	4413      	add	r3, r2
 80086f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d90e      	bls.n	800871a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008708:	4b19      	ldr	r3, [pc, #100]	; (8008770 <prvSwitchTimerLists+0xbc>)
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3304      	adds	r3, #4
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f7fe f862 	bl	80067dc <vListInsert>
 8008718:	e016      	b.n	8008748 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800871a:	2300      	movs	r3, #0
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2300      	movs	r3, #0
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	2100      	movs	r1, #0
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7ff fd9d 	bl	8008264 <xTimerGenericCommand>
 800872a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10a      	bne.n	8008748 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	603b      	str	r3, [r7, #0]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008748:	4b09      	ldr	r3, [pc, #36]	; (8008770 <prvSwitchTimerLists+0xbc>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1b4      	bne.n	80086bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008752:	4b07      	ldr	r3, [pc, #28]	; (8008770 <prvSwitchTimerLists+0xbc>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008758:	4b06      	ldr	r3, [pc, #24]	; (8008774 <prvSwitchTimerLists+0xc0>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a04      	ldr	r2, [pc, #16]	; (8008770 <prvSwitchTimerLists+0xbc>)
 800875e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008760:	4a04      	ldr	r2, [pc, #16]	; (8008774 <prvSwitchTimerLists+0xc0>)
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	6013      	str	r3, [r2, #0]
}
 8008766:	bf00      	nop
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000c10 	.word	0x20000c10
 8008774:	20000c14 	.word	0x20000c14

08008778 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800877e:	f000 f92d 	bl	80089dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008782:	4b15      	ldr	r3, [pc, #84]	; (80087d8 <prvCheckForValidListAndQueue+0x60>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d120      	bne.n	80087cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800878a:	4814      	ldr	r0, [pc, #80]	; (80087dc <prvCheckForValidListAndQueue+0x64>)
 800878c:	f7fd ffd8 	bl	8006740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008790:	4813      	ldr	r0, [pc, #76]	; (80087e0 <prvCheckForValidListAndQueue+0x68>)
 8008792:	f7fd ffd5 	bl	8006740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008796:	4b13      	ldr	r3, [pc, #76]	; (80087e4 <prvCheckForValidListAndQueue+0x6c>)
 8008798:	4a10      	ldr	r2, [pc, #64]	; (80087dc <prvCheckForValidListAndQueue+0x64>)
 800879a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800879c:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <prvCheckForValidListAndQueue+0x70>)
 800879e:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <prvCheckForValidListAndQueue+0x68>)
 80087a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087a2:	2300      	movs	r3, #0
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	4b11      	ldr	r3, [pc, #68]	; (80087ec <prvCheckForValidListAndQueue+0x74>)
 80087a8:	4a11      	ldr	r2, [pc, #68]	; (80087f0 <prvCheckForValidListAndQueue+0x78>)
 80087aa:	2110      	movs	r1, #16
 80087ac:	200a      	movs	r0, #10
 80087ae:	f7fe f8df 	bl	8006970 <xQueueGenericCreateStatic>
 80087b2:	4603      	mov	r3, r0
 80087b4:	4a08      	ldr	r2, [pc, #32]	; (80087d8 <prvCheckForValidListAndQueue+0x60>)
 80087b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087b8:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <prvCheckForValidListAndQueue+0x60>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d005      	beq.n	80087cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087c0:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <prvCheckForValidListAndQueue+0x60>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	490b      	ldr	r1, [pc, #44]	; (80087f4 <prvCheckForValidListAndQueue+0x7c>)
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fdb0 	bl	800732c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087cc:	f000 f936 	bl	8008a3c <vPortExitCritical>
}
 80087d0:	bf00      	nop
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000c18 	.word	0x20000c18
 80087dc:	20000be8 	.word	0x20000be8
 80087e0:	20000bfc 	.word	0x20000bfc
 80087e4:	20000c10 	.word	0x20000c10
 80087e8:	20000c14 	.word	0x20000c14
 80087ec:	20000cc4 	.word	0x20000cc4
 80087f0:	20000c24 	.word	0x20000c24
 80087f4:	08009118 	.word	0x08009118

080087f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3b04      	subs	r3, #4
 8008808:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3b04      	subs	r3, #4
 8008816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f023 0201 	bic.w	r2, r3, #1
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3b04      	subs	r3, #4
 8008826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008828:	4a08      	ldr	r2, [pc, #32]	; (800884c <pxPortInitialiseStack+0x54>)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3b14      	subs	r3, #20
 8008832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3b20      	subs	r3, #32
 800883e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008840:	68fb      	ldr	r3, [r7, #12]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr
 800884c:	08008851 	.word	0x08008851

08008850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008856:	2300      	movs	r3, #0
 8008858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800885a:	4b12      	ldr	r3, [pc, #72]	; (80088a4 <prvTaskExitError+0x54>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008862:	d00a      	beq.n	800887a <prvTaskExitError+0x2a>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	60fb      	str	r3, [r7, #12]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <prvTaskExitError+0x28>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	60bb      	str	r3, [r7, #8]
}
 800888c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800888e:	bf00      	nop
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0fc      	beq.n	8008890 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008896:	bf00      	nop
 8008898:	bf00      	nop
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	bc80      	pop	{r7}
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	2000000c 	.word	0x2000000c
	...

080088b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <pxCurrentTCBConst2>)
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	6808      	ldr	r0, [r1, #0]
 80088b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088ba:	f380 8809 	msr	PSP, r0
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8811 	msr	BASEPRI, r0
 80088ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80088ce:	4770      	bx	lr

080088d0 <pxCurrentTCBConst2>:
 80088d0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80088d8:	4806      	ldr	r0, [pc, #24]	; (80088f4 <prvPortStartFirstTask+0x1c>)
 80088da:	6800      	ldr	r0, [r0, #0]
 80088dc:	6800      	ldr	r0, [r0, #0]
 80088de:	f380 8808 	msr	MSP, r0
 80088e2:	b662      	cpsie	i
 80088e4:	b661      	cpsie	f
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	df00      	svc	0
 80088f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088f2:	bf00      	nop
 80088f4:	e000ed08 	.word	0xe000ed08

080088f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088fe:	4b32      	ldr	r3, [pc, #200]	; (80089c8 <xPortStartScheduler+0xd0>)
 8008900:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	22ff      	movs	r2, #255	; 0xff
 800890e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008920:	b2da      	uxtb	r2, r3
 8008922:	4b2a      	ldr	r3, [pc, #168]	; (80089cc <xPortStartScheduler+0xd4>)
 8008924:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008926:	4b2a      	ldr	r3, [pc, #168]	; (80089d0 <xPortStartScheduler+0xd8>)
 8008928:	2207      	movs	r2, #7
 800892a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800892c:	e009      	b.n	8008942 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800892e:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <xPortStartScheduler+0xd8>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3b01      	subs	r3, #1
 8008934:	4a26      	ldr	r2, [pc, #152]	; (80089d0 <xPortStartScheduler+0xd8>)
 8008936:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	b2db      	uxtb	r3, r3
 8008940:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800894a:	2b80      	cmp	r3, #128	; 0x80
 800894c:	d0ef      	beq.n	800892e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800894e:	4b20      	ldr	r3, [pc, #128]	; (80089d0 <xPortStartScheduler+0xd8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f1c3 0307 	rsb	r3, r3, #7
 8008956:	2b04      	cmp	r3, #4
 8008958:	d00a      	beq.n	8008970 <xPortStartScheduler+0x78>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	60bb      	str	r3, [r7, #8]
}
 800896c:	bf00      	nop
 800896e:	e7fe      	b.n	800896e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008970:	4b17      	ldr	r3, [pc, #92]	; (80089d0 <xPortStartScheduler+0xd8>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	021b      	lsls	r3, r3, #8
 8008976:	4a16      	ldr	r2, [pc, #88]	; (80089d0 <xPortStartScheduler+0xd8>)
 8008978:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800897a:	4b15      	ldr	r3, [pc, #84]	; (80089d0 <xPortStartScheduler+0xd8>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008982:	4a13      	ldr	r2, [pc, #76]	; (80089d0 <xPortStartScheduler+0xd8>)
 8008984:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	b2da      	uxtb	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800898e:	4b11      	ldr	r3, [pc, #68]	; (80089d4 <xPortStartScheduler+0xdc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a10      	ldr	r2, [pc, #64]	; (80089d4 <xPortStartScheduler+0xdc>)
 8008994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008998:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800899a:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <xPortStartScheduler+0xdc>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a0d      	ldr	r2, [pc, #52]	; (80089d4 <xPortStartScheduler+0xdc>)
 80089a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089a6:	f000 f8b9 	bl	8008b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089aa:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <xPortStartScheduler+0xe0>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089b0:	f7ff ff92 	bl	80088d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089b4:	f7ff f8c0 	bl	8007b38 <vTaskSwitchContext>
	prvTaskExitError();
 80089b8:	f7ff ff4a 	bl	8008850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	e000e400 	.word	0xe000e400
 80089cc:	20000d14 	.word	0x20000d14
 80089d0:	20000d18 	.word	0x20000d18
 80089d4:	e000ed20 	.word	0xe000ed20
 80089d8:	2000000c 	.word	0x2000000c

080089dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	607b      	str	r3, [r7, #4]
}
 80089f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089f6:	4b0f      	ldr	r3, [pc, #60]	; (8008a34 <vPortEnterCritical+0x58>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	4a0d      	ldr	r2, [pc, #52]	; (8008a34 <vPortEnterCritical+0x58>)
 80089fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a00:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <vPortEnterCritical+0x58>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d10f      	bne.n	8008a28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a08:	4b0b      	ldr	r3, [pc, #44]	; (8008a38 <vPortEnterCritical+0x5c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	603b      	str	r3, [r7, #0]
}
 8008a24:	bf00      	nop
 8008a26:	e7fe      	b.n	8008a26 <vPortEnterCritical+0x4a>
	}
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bc80      	pop	{r7}
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	2000000c 	.word	0x2000000c
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <vPortExitCritical+0x4c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <vPortExitCritical+0x24>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	607b      	str	r3, [r7, #4]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a60:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <vPortExitCritical+0x4c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3b01      	subs	r3, #1
 8008a66:	4a08      	ldr	r2, [pc, #32]	; (8008a88 <vPortExitCritical+0x4c>)
 8008a68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a6a:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <vPortExitCritical+0x4c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d105      	bne.n	8008a7e <vPortExitCritical+0x42>
 8008a72:	2300      	movs	r3, #0
 8008a74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	f383 8811 	msr	BASEPRI, r3
}
 8008a7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bc80      	pop	{r7}
 8008a86:	4770      	bx	lr
 8008a88:	2000000c 	.word	0x2000000c
 8008a8c:	00000000 	.word	0x00000000

08008a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a90:	f3ef 8009 	mrs	r0, PSP
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	4b0d      	ldr	r3, [pc, #52]	; (8008ad0 <pxCurrentTCBConst>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008aa0:	6010      	str	r0, [r2, #0]
 8008aa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008aa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008aaa:	f380 8811 	msr	BASEPRI, r0
 8008aae:	f7ff f843 	bl	8007b38 <vTaskSwitchContext>
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f380 8811 	msr	BASEPRI, r0
 8008aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008abe:	6819      	ldr	r1, [r3, #0]
 8008ac0:	6808      	ldr	r0, [r1, #0]
 8008ac2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ac6:	f380 8809 	msr	PSP, r0
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	4770      	bx	lr

08008ad0 <pxCurrentTCBConst>:
 8008ad0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop

08008ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	607b      	str	r3, [r7, #4]
}
 8008af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008af2:	f7fe ff63 	bl	80079bc <xTaskIncrementTick>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008afc:	4b06      	ldr	r3, [pc, #24]	; (8008b18 <SysTick_Handler+0x40>)
 8008afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	2300      	movs	r3, #0
 8008b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f383 8811 	msr	BASEPRI, r3
}
 8008b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b20:	4b0a      	ldr	r3, [pc, #40]	; (8008b4c <vPortSetupTimerInterrupt+0x30>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b26:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <vPortSetupTimerInterrupt+0x34>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b2c:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <vPortSetupTimerInterrupt+0x38>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a09      	ldr	r2, [pc, #36]	; (8008b58 <vPortSetupTimerInterrupt+0x3c>)
 8008b32:	fba2 2303 	umull	r2, r3, r2, r3
 8008b36:	099b      	lsrs	r3, r3, #6
 8008b38:	4a08      	ldr	r2, [pc, #32]	; (8008b5c <vPortSetupTimerInterrupt+0x40>)
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b3e:	4b03      	ldr	r3, [pc, #12]	; (8008b4c <vPortSetupTimerInterrupt+0x30>)
 8008b40:	2207      	movs	r2, #7
 8008b42:	601a      	str	r2, [r3, #0]
}
 8008b44:	bf00      	nop
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr
 8008b4c:	e000e010 	.word	0xe000e010
 8008b50:	e000e018 	.word	0xe000e018
 8008b54:	20000000 	.word	0x20000000
 8008b58:	10624dd3 	.word	0x10624dd3
 8008b5c:	e000e014 	.word	0xe000e014

08008b60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b66:	f3ef 8305 	mrs	r3, IPSR
 8008b6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b0f      	cmp	r3, #15
 8008b70:	d914      	bls.n	8008b9c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b72:	4a16      	ldr	r2, [pc, #88]	; (8008bcc <vPortValidateInterruptPriority+0x6c>)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b7c:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <vPortValidateInterruptPriority+0x70>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	7afa      	ldrb	r2, [r7, #11]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d20a      	bcs.n	8008b9c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	607b      	str	r3, [r7, #4]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b9c:	4b0d      	ldr	r3, [pc, #52]	; (8008bd4 <vPortValidateInterruptPriority+0x74>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ba4:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <vPortValidateInterruptPriority+0x78>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d90a      	bls.n	8008bc2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	603b      	str	r3, [r7, #0]
}
 8008bbe:	bf00      	nop
 8008bc0:	e7fe      	b.n	8008bc0 <vPortValidateInterruptPriority+0x60>
	}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr
 8008bcc:	e000e3f0 	.word	0xe000e3f0
 8008bd0:	20000d14 	.word	0x20000d14
 8008bd4:	e000ed0c 	.word	0xe000ed0c
 8008bd8:	20000d18 	.word	0x20000d18

08008bdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	; 0x28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008be8:	f7fe fe2e 	bl	8007848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bec:	4b58      	ldr	r3, [pc, #352]	; (8008d50 <pvPortMalloc+0x174>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bf4:	f000 f910 	bl	8008e18 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bf8:	4b56      	ldr	r3, [pc, #344]	; (8008d54 <pvPortMalloc+0x178>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4013      	ands	r3, r2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f040 808e 	bne.w	8008d22 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01d      	beq.n	8008c48 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c0c:	2208      	movs	r2, #8
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4413      	add	r3, r2
 8008c12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d014      	beq.n	8008c48 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f023 0307 	bic.w	r3, r3, #7
 8008c24:	3308      	adds	r3, #8
 8008c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <pvPortMalloc+0x6c>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	617b      	str	r3, [r7, #20]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d069      	beq.n	8008d22 <pvPortMalloc+0x146>
 8008c4e:	4b42      	ldr	r3, [pc, #264]	; (8008d58 <pvPortMalloc+0x17c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d864      	bhi.n	8008d22 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c58:	4b40      	ldr	r3, [pc, #256]	; (8008d5c <pvPortMalloc+0x180>)
 8008c5a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c5c:	4b3f      	ldr	r3, [pc, #252]	; (8008d5c <pvPortMalloc+0x180>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c62:	e004      	b.n	8008c6e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d903      	bls.n	8008c80 <pvPortMalloc+0xa4>
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1f1      	bne.n	8008c64 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c80:	4b33      	ldr	r3, [pc, #204]	; (8008d50 <pvPortMalloc+0x174>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d04b      	beq.n	8008d22 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2208      	movs	r2, #8
 8008c90:	4413      	add	r3, r2
 8008c92:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	1ad2      	subs	r2, r2, r3
 8008ca4:	2308      	movs	r3, #8
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d91f      	bls.n	8008cec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <pvPortMalloc+0xf8>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	613b      	str	r3, [r7, #16]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	1ad2      	subs	r2, r2, r3
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ce6:	69b8      	ldr	r0, [r7, #24]
 8008ce8:	f000 f8f8 	bl	8008edc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cec:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <pvPortMalloc+0x17c>)
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	4a18      	ldr	r2, [pc, #96]	; (8008d58 <pvPortMalloc+0x17c>)
 8008cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cfa:	4b17      	ldr	r3, [pc, #92]	; (8008d58 <pvPortMalloc+0x17c>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	4b18      	ldr	r3, [pc, #96]	; (8008d60 <pvPortMalloc+0x184>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d203      	bcs.n	8008d0e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <pvPortMalloc+0x17c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a15      	ldr	r2, [pc, #84]	; (8008d60 <pvPortMalloc+0x184>)
 8008d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	4b10      	ldr	r3, [pc, #64]	; (8008d54 <pvPortMalloc+0x178>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	431a      	orrs	r2, r3
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d22:	f7fe fd9f 	bl	8007864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d00a      	beq.n	8008d46 <pvPortMalloc+0x16a>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60fb      	str	r3, [r7, #12]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <pvPortMalloc+0x168>
	return pvReturn;
 8008d46:	69fb      	ldr	r3, [r7, #28]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	; 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20002494 	.word	0x20002494
 8008d54:	200024a0 	.word	0x200024a0
 8008d58:	20002498 	.word	0x20002498
 8008d5c:	2000248c 	.word	0x2000248c
 8008d60:	2000249c 	.word	0x2000249c

08008d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d048      	beq.n	8008e08 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d76:	2308      	movs	r3, #8
 8008d78:	425b      	negs	r3, r3
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	685a      	ldr	r2, [r3, #4]
 8008d88:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <vPortFree+0xac>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <vPortFree+0x44>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	60fb      	str	r3, [r7, #12]
}
 8008da4:	bf00      	nop
 8008da6:	e7fe      	b.n	8008da6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00a      	beq.n	8008dc6 <vPortFree+0x62>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	60bb      	str	r3, [r7, #8]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	4b11      	ldr	r3, [pc, #68]	; (8008e10 <vPortFree+0xac>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d019      	beq.n	8008e08 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d115      	bne.n	8008e08 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	685a      	ldr	r2, [r3, #4]
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <vPortFree+0xac>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	43db      	mvns	r3, r3
 8008de6:	401a      	ands	r2, r3
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008dec:	f7fe fd2c 	bl	8007848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	685a      	ldr	r2, [r3, #4]
 8008df4:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <vPortFree+0xb0>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4413      	add	r3, r2
 8008dfa:	4a06      	ldr	r2, [pc, #24]	; (8008e14 <vPortFree+0xb0>)
 8008dfc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008dfe:	6938      	ldr	r0, [r7, #16]
 8008e00:	f000 f86c 	bl	8008edc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008e04:	f7fe fd2e 	bl	8007864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e08:	bf00      	nop
 8008e0a:	3718      	adds	r7, #24
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	200024a0 	.word	0x200024a0
 8008e14:	20002498 	.word	0x20002498

08008e18 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e1e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008e22:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e24:	4b27      	ldr	r3, [pc, #156]	; (8008ec4 <prvHeapInit+0xac>)
 8008e26:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00c      	beq.n	8008e4c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3307      	adds	r3, #7
 8008e36:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 0307 	bic.w	r3, r3, #7
 8008e3e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	4a1f      	ldr	r2, [pc, #124]	; (8008ec4 <prvHeapInit+0xac>)
 8008e48:	4413      	add	r3, r2
 8008e4a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e50:	4a1d      	ldr	r2, [pc, #116]	; (8008ec8 <prvHeapInit+0xb0>)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e56:	4b1c      	ldr	r3, [pc, #112]	; (8008ec8 <prvHeapInit+0xb0>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	4413      	add	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e64:	2208      	movs	r2, #8
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	1a9b      	subs	r3, r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 0307 	bic.w	r3, r3, #7
 8008e72:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4a15      	ldr	r2, [pc, #84]	; (8008ecc <prvHeapInit+0xb4>)
 8008e78:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e7a:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <prvHeapInit+0xb4>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e82:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <prvHeapInit+0xb4>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	1ad2      	subs	r2, r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e98:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <prvHeapInit+0xb4>)
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <prvHeapInit+0xb8>)
 8008ea6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	4a09      	ldr	r2, [pc, #36]	; (8008ed4 <prvHeapInit+0xbc>)
 8008eae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <prvHeapInit+0xc0>)
 8008eb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008eb6:	601a      	str	r2, [r3, #0]
}
 8008eb8:	bf00      	nop
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20000d1c 	.word	0x20000d1c
 8008ec8:	2000248c 	.word	0x2000248c
 8008ecc:	20002494 	.word	0x20002494
 8008ed0:	2000249c 	.word	0x2000249c
 8008ed4:	20002498 	.word	0x20002498
 8008ed8:	200024a0 	.word	0x200024a0

08008edc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ee4:	4b27      	ldr	r3, [pc, #156]	; (8008f84 <prvInsertBlockIntoFreeList+0xa8>)
 8008ee6:	60fb      	str	r3, [r7, #12]
 8008ee8:	e002      	b.n	8008ef0 <prvInsertBlockIntoFreeList+0x14>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d8f7      	bhi.n	8008eea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	4413      	add	r3, r2
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d108      	bne.n	8008f1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	441a      	add	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	441a      	add	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d118      	bne.n	8008f64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <prvInsertBlockIntoFreeList+0xac>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d00d      	beq.n	8008f5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	441a      	add	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	e008      	b.n	8008f6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f5a:	4b0b      	ldr	r3, [pc, #44]	; (8008f88 <prvInsertBlockIntoFreeList+0xac>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	e003      	b.n	8008f6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d002      	beq.n	8008f7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f7a:	bf00      	nop
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr
 8008f84:	2000248c 	.word	0x2000248c
 8008f88:	20002494 	.word	0x20002494

08008f8c <__libc_init_array>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	2600      	movs	r6, #0
 8008f90:	4d0c      	ldr	r5, [pc, #48]	; (8008fc4 <__libc_init_array+0x38>)
 8008f92:	4c0d      	ldr	r4, [pc, #52]	; (8008fc8 <__libc_init_array+0x3c>)
 8008f94:	1b64      	subs	r4, r4, r5
 8008f96:	10a4      	asrs	r4, r4, #2
 8008f98:	42a6      	cmp	r6, r4
 8008f9a:	d109      	bne.n	8008fb0 <__libc_init_array+0x24>
 8008f9c:	f000 f830 	bl	8009000 <_init>
 8008fa0:	2600      	movs	r6, #0
 8008fa2:	4d0a      	ldr	r5, [pc, #40]	; (8008fcc <__libc_init_array+0x40>)
 8008fa4:	4c0a      	ldr	r4, [pc, #40]	; (8008fd0 <__libc_init_array+0x44>)
 8008fa6:	1b64      	subs	r4, r4, r5
 8008fa8:	10a4      	asrs	r4, r4, #2
 8008faa:	42a6      	cmp	r6, r4
 8008fac:	d105      	bne.n	8008fba <__libc_init_array+0x2e>
 8008fae:	bd70      	pop	{r4, r5, r6, pc}
 8008fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb4:	4798      	blx	r3
 8008fb6:	3601      	adds	r6, #1
 8008fb8:	e7ee      	b.n	8008f98 <__libc_init_array+0xc>
 8008fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fbe:	4798      	blx	r3
 8008fc0:	3601      	adds	r6, #1
 8008fc2:	e7f2      	b.n	8008faa <__libc_init_array+0x1e>
 8008fc4:	080092c4 	.word	0x080092c4
 8008fc8:	080092c4 	.word	0x080092c4
 8008fcc:	080092c4 	.word	0x080092c4
 8008fd0:	080092c8 	.word	0x080092c8

08008fd4 <memcpy>:
 8008fd4:	440a      	add	r2, r1
 8008fd6:	4291      	cmp	r1, r2
 8008fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fdc:	d100      	bne.n	8008fe0 <memcpy+0xc>
 8008fde:	4770      	bx	lr
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fe6:	4291      	cmp	r1, r2
 8008fe8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fec:	d1f9      	bne.n	8008fe2 <memcpy+0xe>
 8008fee:	bd10      	pop	{r4, pc}

08008ff0 <memset>:
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	4402      	add	r2, r0
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d100      	bne.n	8008ffa <memset+0xa>
 8008ff8:	4770      	bx	lr
 8008ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8008ffe:	e7f9      	b.n	8008ff4 <memset+0x4>

08009000 <_init>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr

0800900c <_fini>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	bf00      	nop
 8009010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009012:	bc08      	pop	{r3}
 8009014:	469e      	mov	lr, r3
 8009016:	4770      	bx	lr
