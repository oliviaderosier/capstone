
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007464  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007574  08007574  00017574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b4  080077b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080077b4  080077b4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077b4  080077b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080077bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024f4  20000010  080077cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002504  080077cc  00022504  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177f2  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e54  00000000  00000000  0003782b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  0003a680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001268  00000000  00000000  0003ba40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018282  00000000  00000000  0003cca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ffb3  00000000  00000000  00054f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092efa  00000000  00000000  00064edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7dd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000520c  00000000  00000000  000f7e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	0800755c 	.word	0x0800755c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	0800755c 	.word	0x0800755c

08000150 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2b3a      	cmp	r3, #58	; 0x3a
 800015e:	d13c      	bne.n	80001da <letter+0x8a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48d6      	ldr	r0, [pc, #856]	; (80004c0 <letter+0x370>)
 8000168:	f003 fa75 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000172:	48d4      	ldr	r0, [pc, #848]	; (80004c4 <letter+0x374>)
 8000174:	f003 fa6f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017e:	48d1      	ldr	r0, [pc, #836]	; (80004c4 <letter+0x374>)
 8000180:	f003 fa69 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000184:	2200      	movs	r2, #0
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	48ce      	ldr	r0, [pc, #824]	; (80004c4 <letter+0x374>)
 800018a:	f003 fa64 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800018e:	2201      	movs	r2, #1
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	48cc      	ldr	r0, [pc, #816]	; (80004c4 <letter+0x374>)
 8000194:	f003 fa5f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	48ca      	ldr	r0, [pc, #808]	; (80004c8 <letter+0x378>)
 80001a0:	f003 fa59 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80001a4:	2201      	movs	r2, #1
 80001a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001aa:	48c7      	ldr	r0, [pc, #796]	; (80004c8 <letter+0x378>)
 80001ac:	f003 fa53 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b6:	48c4      	ldr	r0, [pc, #784]	; (80004c8 <letter+0x378>)
 80001b8:	f003 fa4d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c2:	48c1      	ldr	r0, [pc, #772]	; (80004c8 <letter+0x378>)
 80001c4:	f003 fa47 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	48bc      	ldr	r0, [pc, #752]	; (80004c0 <letter+0x370>)
 80001d0:	f003 fa41 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80001d4:	2002      	movs	r0, #2
 80001d6:	f002 ffcb 	bl	8003170 <HAL_Delay>
	}
	if(L == '-')
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2b2d      	cmp	r3, #45	; 0x2d
 80001de:	d13c      	bne.n	800025a <letter+0x10a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e6:	48b6      	ldr	r0, [pc, #728]	; (80004c0 <letter+0x370>)
 80001e8:	f003 fa35 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f2:	48b4      	ldr	r0, [pc, #720]	; (80004c4 <letter+0x374>)
 80001f4:	f003 fa2f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fe:	48b1      	ldr	r0, [pc, #708]	; (80004c4 <letter+0x374>)
 8000200:	f003 fa29 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000204:	2201      	movs	r2, #1
 8000206:	2140      	movs	r1, #64	; 0x40
 8000208:	48ae      	ldr	r0, [pc, #696]	; (80004c4 <letter+0x374>)
 800020a:	f003 fa24 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800020e:	2201      	movs	r2, #1
 8000210:	2180      	movs	r1, #128	; 0x80
 8000212:	48ac      	ldr	r0, [pc, #688]	; (80004c4 <letter+0x374>)
 8000214:	f003 fa1f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000218:	2200      	movs	r2, #0
 800021a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800021e:	48aa      	ldr	r0, [pc, #680]	; (80004c8 <letter+0x378>)
 8000220:	f003 fa19 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800022a:	48a7      	ldr	r0, [pc, #668]	; (80004c8 <letter+0x378>)
 800022c:	f003 fa13 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000236:	48a4      	ldr	r0, [pc, #656]	; (80004c8 <letter+0x378>)
 8000238:	f003 fa0d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000242:	48a1      	ldr	r0, [pc, #644]	; (80004c8 <letter+0x378>)
 8000244:	f003 fa07 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	489c      	ldr	r0, [pc, #624]	; (80004c0 <letter+0x370>)
 8000250:	f003 fa01 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000254:	2002      	movs	r0, #2
 8000256:	f002 ff8b 	bl	8003170 <HAL_Delay>
	}
	if(L == ' ')
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b20      	cmp	r3, #32
 800025e:	d13c      	bne.n	80002da <letter+0x18a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000266:	4896      	ldr	r0, [pc, #600]	; (80004c0 <letter+0x370>)
 8000268:	f003 f9f5 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000272:	4894      	ldr	r0, [pc, #592]	; (80004c4 <letter+0x374>)
 8000274:	f003 f9ef 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027e:	4891      	ldr	r0, [pc, #580]	; (80004c4 <letter+0x374>)
 8000280:	f003 f9e9 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000284:	2200      	movs	r2, #0
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	488e      	ldr	r0, [pc, #568]	; (80004c4 <letter+0x374>)
 800028a:	f003 f9e4 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800028e:	2200      	movs	r2, #0
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	488c      	ldr	r0, [pc, #560]	; (80004c4 <letter+0x374>)
 8000294:	f003 f9df 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029e:	488a      	ldr	r0, [pc, #552]	; (80004c8 <letter+0x378>)
 80002a0:	f003 f9d9 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	4887      	ldr	r0, [pc, #540]	; (80004c8 <letter+0x378>)
 80002ac:	f003 f9d3 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b6:	4884      	ldr	r0, [pc, #528]	; (80004c8 <letter+0x378>)
 80002b8:	f003 f9cd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c2:	4881      	ldr	r0, [pc, #516]	; (80004c8 <letter+0x378>)
 80002c4:	f003 f9c7 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ce:	487c      	ldr	r0, [pc, #496]	; (80004c0 <letter+0x370>)
 80002d0:	f003 f9c1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80002d4:	2002      	movs	r0, #2
 80002d6:	f002 ff4b 	bl	8003170 <HAL_Delay>
	}
	if(L == '/')
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b2f      	cmp	r3, #47	; 0x2f
 80002de:	d13c      	bne.n	800035a <letter+0x20a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	4876      	ldr	r0, [pc, #472]	; (80004c0 <letter+0x370>)
 80002e8:	f003 f9b5 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f2:	4874      	ldr	r0, [pc, #464]	; (80004c4 <letter+0x374>)
 80002f4:	f003 f9af 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	4871      	ldr	r0, [pc, #452]	; (80004c4 <letter+0x374>)
 8000300:	f003 f9a9 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000304:	2201      	movs	r2, #1
 8000306:	2140      	movs	r1, #64	; 0x40
 8000308:	486e      	ldr	r0, [pc, #440]	; (80004c4 <letter+0x374>)
 800030a:	f003 f9a4 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800030e:	2201      	movs	r2, #1
 8000310:	2180      	movs	r1, #128	; 0x80
 8000312:	486c      	ldr	r0, [pc, #432]	; (80004c4 <letter+0x374>)
 8000314:	f003 f99f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031e:	486a      	ldr	r0, [pc, #424]	; (80004c8 <letter+0x378>)
 8000320:	f003 f999 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032a:	4867      	ldr	r0, [pc, #412]	; (80004c8 <letter+0x378>)
 800032c:	f003 f993 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000336:	4864      	ldr	r0, [pc, #400]	; (80004c8 <letter+0x378>)
 8000338:	f003 f98d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000342:	4861      	ldr	r0, [pc, #388]	; (80004c8 <letter+0x378>)
 8000344:	f003 f987 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034e:	485c      	ldr	r0, [pc, #368]	; (80004c0 <letter+0x370>)
 8000350:	f003 f981 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000354:	2002      	movs	r0, #2
 8000356:	f002 ff0b 	bl	8003170 <HAL_Delay>
	}
	if(L == '!')
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b21      	cmp	r3, #33	; 0x21
 800035e:	d139      	bne.n	80003d4 <letter+0x284>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000366:	4856      	ldr	r0, [pc, #344]	; (80004c0 <letter+0x370>)
 8000368:	f003 f975 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000372:	4854      	ldr	r0, [pc, #336]	; (80004c4 <letter+0x374>)
 8000374:	f003 f96f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037e:	4851      	ldr	r0, [pc, #324]	; (80004c4 <letter+0x374>)
 8000380:	f003 f969 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000384:	2200      	movs	r2, #0
 8000386:	2140      	movs	r1, #64	; 0x40
 8000388:	484e      	ldr	r0, [pc, #312]	; (80004c4 <letter+0x374>)
 800038a:	f003 f964 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800038e:	2200      	movs	r2, #0
 8000390:	2180      	movs	r1, #128	; 0x80
 8000392:	484c      	ldr	r0, [pc, #304]	; (80004c4 <letter+0x374>)
 8000394:	f003 f95f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039e:	484a      	ldr	r0, [pc, #296]	; (80004c8 <letter+0x378>)
 80003a0:	f003 f959 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003aa:	4847      	ldr	r0, [pc, #284]	; (80004c8 <letter+0x378>)
 80003ac:	f003 f953 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b6:	4844      	ldr	r0, [pc, #272]	; (80004c8 <letter+0x378>)
 80003b8:	f003 f94d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c2:	4841      	ldr	r0, [pc, #260]	; (80004c8 <letter+0x378>)
 80003c4:	f003 f947 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	483c      	ldr	r0, [pc, #240]	; (80004c0 <letter+0x370>)
 80003d0:	f003 f941 	bl	8003656 <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2b3f      	cmp	r3, #63	; 0x3f
 80003d8:	d13c      	bne.n	8000454 <letter+0x304>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	4837      	ldr	r0, [pc, #220]	; (80004c0 <letter+0x370>)
 80003e2:	f003 f938 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ec:	4835      	ldr	r0, [pc, #212]	; (80004c4 <letter+0x374>)
 80003ee:	f003 f932 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f8:	4832      	ldr	r0, [pc, #200]	; (80004c4 <letter+0x374>)
 80003fa:	f003 f92c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80003fe:	2201      	movs	r2, #1
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	4830      	ldr	r0, [pc, #192]	; (80004c4 <letter+0x374>)
 8000404:	f003 f927 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000408:	2201      	movs	r2, #1
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	482d      	ldr	r0, [pc, #180]	; (80004c4 <letter+0x374>)
 800040e:	f003 f922 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	482b      	ldr	r0, [pc, #172]	; (80004c8 <letter+0x378>)
 800041a:	f003 f91c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	4828      	ldr	r0, [pc, #160]	; (80004c8 <letter+0x378>)
 8000426:	f003 f916 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000430:	4825      	ldr	r0, [pc, #148]	; (80004c8 <letter+0x378>)
 8000432:	f003 f910 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800043c:	4822      	ldr	r0, [pc, #136]	; (80004c8 <letter+0x378>)
 800043e:	f003 f90a 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	481d      	ldr	r0, [pc, #116]	; (80004c0 <letter+0x370>)
 800044a:	f003 f904 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800044e:	2002      	movs	r0, #2
 8000450:	f002 fe8e 	bl	8003170 <HAL_Delay>
	}
	if(L == '*')
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	2b2a      	cmp	r3, #42	; 0x2a
 8000458:	d144      	bne.n	80004e4 <letter+0x394>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	4817      	ldr	r0, [pc, #92]	; (80004c0 <letter+0x370>)
 8000462:	f003 f8f8 	bl	8003656 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	4815      	ldr	r0, [pc, #84]	; (80004c4 <letter+0x374>)
 800046e:	f003 f8f2 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	4812      	ldr	r0, [pc, #72]	; (80004c4 <letter+0x374>)
 800047a:	f003 f8ec 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	4810      	ldr	r0, [pc, #64]	; (80004c4 <letter+0x374>)
 8000484:	f003 f8e7 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000488:	2201      	movs	r2, #1
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <letter+0x374>)
 800048e:	f003 f8e2 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <letter+0x378>)
 800049a:	f003 f8dc 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800049e:	2201      	movs	r2, #1
 80004a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a4:	4808      	ldr	r0, [pc, #32]	; (80004c8 <letter+0x378>)
 80004a6:	f003 f8d6 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <letter+0x378>)
 80004b2:	f003 f8d0 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	e006      	b.n	80004cc <letter+0x37c>
 80004be:	bf00      	nop
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	48d5      	ldr	r0, [pc, #852]	; (8000824 <letter+0x6d4>)
 80004ce:	f003 f8c2 	bl	8003656 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	48d3      	ldr	r0, [pc, #844]	; (8000828 <letter+0x6d8>)
 80004da:	f003 f8bc 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80004de:	2002      	movs	r0, #2
 80004e0:	f002 fe46 	bl	8003170 <HAL_Delay>
	}
	if(L == '#')
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2b23      	cmp	r3, #35	; 0x23
 80004e8:	d13c      	bne.n	8000564 <letter+0x414>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f0:	48cd      	ldr	r0, [pc, #820]	; (8000828 <letter+0x6d8>)
 80004f2:	f003 f8b0 	bl	8003656 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fc:	48cb      	ldr	r0, [pc, #812]	; (800082c <letter+0x6dc>)
 80004fe:	f003 f8aa 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	48c8      	ldr	r0, [pc, #800]	; (800082c <letter+0x6dc>)
 800050a:	f003 f8a4 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800050e:	2200      	movs	r2, #0
 8000510:	2140      	movs	r1, #64	; 0x40
 8000512:	48c6      	ldr	r0, [pc, #792]	; (800082c <letter+0x6dc>)
 8000514:	f003 f89f 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	48c3      	ldr	r0, [pc, #780]	; (800082c <letter+0x6dc>)
 800051e:	f003 f89a 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	48be      	ldr	r0, [pc, #760]	; (8000824 <letter+0x6d4>)
 800052a:	f003 f894 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000534:	48bb      	ldr	r0, [pc, #748]	; (8000824 <letter+0x6d4>)
 8000536:	f003 f88e 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	48b8      	ldr	r0, [pc, #736]	; (8000824 <letter+0x6d4>)
 8000542:	f003 f888 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054c:	48b5      	ldr	r0, [pc, #724]	; (8000824 <letter+0x6d4>)
 800054e:	f003 f882 	bl	8003656 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000558:	48b3      	ldr	r0, [pc, #716]	; (8000828 <letter+0x6d8>)
 800055a:	f003 f87c 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 800055e:	2002      	movs	r0, #2
 8000560:	f002 fe06 	bl	8003170 <HAL_Delay>
	}
	if(L == 'a')
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b61      	cmp	r3, #97	; 0x61
 8000568:	d13c      	bne.n	80005e4 <letter+0x494>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	48ad      	ldr	r0, [pc, #692]	; (8000828 <letter+0x6d8>)
 8000572:	f003 f870 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	48ab      	ldr	r0, [pc, #684]	; (800082c <letter+0x6dc>)
 800057e:	f003 f86a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	48a8      	ldr	r0, [pc, #672]	; (800082c <letter+0x6dc>)
 800058a:	f003 f864 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800058e:	2200      	movs	r2, #0
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	48a6      	ldr	r0, [pc, #664]	; (800082c <letter+0x6dc>)
 8000594:	f003 f85f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000598:	2200      	movs	r2, #0
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	48a3      	ldr	r0, [pc, #652]	; (800082c <letter+0x6dc>)
 800059e:	f003 f85a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a8:	489e      	ldr	r0, [pc, #632]	; (8000824 <letter+0x6d4>)
 80005aa:	f003 f854 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b4:	489b      	ldr	r0, [pc, #620]	; (8000824 <letter+0x6d4>)
 80005b6:	f003 f84e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4898      	ldr	r0, [pc, #608]	; (8000824 <letter+0x6d4>)
 80005c2:	f003 f848 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	4895      	ldr	r0, [pc, #596]	; (8000824 <letter+0x6d4>)
 80005ce:	f003 f842 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	4893      	ldr	r0, [pc, #588]	; (8000828 <letter+0x6d8>)
 80005da:	f003 f83c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80005de:	2002      	movs	r0, #2
 80005e0:	f002 fdc6 	bl	8003170 <HAL_Delay>
	}
	if(L == 'b')
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b62      	cmp	r3, #98	; 0x62
 80005e8:	d13c      	bne.n	8000664 <letter+0x514>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	488d      	ldr	r0, [pc, #564]	; (8000828 <letter+0x6d8>)
 80005f2:	f003 f830 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	488b      	ldr	r0, [pc, #556]	; (800082c <letter+0x6dc>)
 80005fe:	f003 f82a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	4888      	ldr	r0, [pc, #544]	; (800082c <letter+0x6dc>)
 800060a:	f003 f824 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800060e:	2200      	movs	r2, #0
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	4886      	ldr	r0, [pc, #536]	; (800082c <letter+0x6dc>)
 8000614:	f003 f81f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000618:	2200      	movs	r2, #0
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	4883      	ldr	r0, [pc, #524]	; (800082c <letter+0x6dc>)
 800061e:	f003 f81a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	487e      	ldr	r0, [pc, #504]	; (8000824 <letter+0x6d4>)
 800062a:	f003 f814 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000634:	487b      	ldr	r0, [pc, #492]	; (8000824 <letter+0x6d4>)
 8000636:	f003 f80e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4878      	ldr	r0, [pc, #480]	; (8000824 <letter+0x6d4>)
 8000642:	f003 f808 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064c:	4875      	ldr	r0, [pc, #468]	; (8000824 <letter+0x6d4>)
 800064e:	f003 f802 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	4873      	ldr	r0, [pc, #460]	; (8000828 <letter+0x6d8>)
 800065a:	f002 fffc 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800065e:	2002      	movs	r0, #2
 8000660:	f002 fd86 	bl	8003170 <HAL_Delay>
	}
	if(L == 'C')
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b43      	cmp	r3, #67	; 0x43
 8000668:	d13c      	bne.n	80006e4 <letter+0x594>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	486d      	ldr	r0, [pc, #436]	; (8000828 <letter+0x6d8>)
 8000672:	f002 fff0 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	486b      	ldr	r0, [pc, #428]	; (800082c <letter+0x6dc>)
 800067e:	f002 ffea 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	4868      	ldr	r0, [pc, #416]	; (800082c <letter+0x6dc>)
 800068a:	f002 ffe4 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	4866      	ldr	r0, [pc, #408]	; (800082c <letter+0x6dc>)
 8000694:	f002 ffdf 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000698:	2200      	movs	r2, #0
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	4863      	ldr	r0, [pc, #396]	; (800082c <letter+0x6dc>)
 800069e:	f002 ffda 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a8:	485e      	ldr	r0, [pc, #376]	; (8000824 <letter+0x6d4>)
 80006aa:	f002 ffd4 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b4:	485b      	ldr	r0, [pc, #364]	; (8000824 <letter+0x6d4>)
 80006b6:	f002 ffce 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c0:	4858      	ldr	r0, [pc, #352]	; (8000824 <letter+0x6d4>)
 80006c2:	f002 ffc8 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	4855      	ldr	r0, [pc, #340]	; (8000824 <letter+0x6d4>)
 80006ce:	f002 ffc2 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4853      	ldr	r0, [pc, #332]	; (8000828 <letter+0x6d8>)
 80006da:	f002 ffbc 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80006de:	2002      	movs	r0, #2
 80006e0:	f002 fd46 	bl	8003170 <HAL_Delay>
	}
	if(L == 'c')
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b63      	cmp	r3, #99	; 0x63
 80006e8:	d13c      	bne.n	8000764 <letter+0x614>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	484d      	ldr	r0, [pc, #308]	; (8000828 <letter+0x6d8>)
 80006f2:	f002 ffb0 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	484b      	ldr	r0, [pc, #300]	; (800082c <letter+0x6dc>)
 80006fe:	f002 ffaa 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4848      	ldr	r0, [pc, #288]	; (800082c <letter+0x6dc>)
 800070a:	f002 ffa4 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800070e:	2200      	movs	r2, #0
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	4846      	ldr	r0, [pc, #280]	; (800082c <letter+0x6dc>)
 8000714:	f002 ff9f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000718:	2200      	movs	r2, #0
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	4843      	ldr	r0, [pc, #268]	; (800082c <letter+0x6dc>)
 800071e:	f002 ff9a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	483e      	ldr	r0, [pc, #248]	; (8000824 <letter+0x6d4>)
 800072a:	f002 ff94 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <letter+0x6d4>)
 8000736:	f002 ff8e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000740:	4838      	ldr	r0, [pc, #224]	; (8000824 <letter+0x6d4>)
 8000742:	f002 ff88 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074c:	4835      	ldr	r0, [pc, #212]	; (8000824 <letter+0x6d4>)
 800074e:	f002 ff82 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	4833      	ldr	r0, [pc, #204]	; (8000828 <letter+0x6d8>)
 800075a:	f002 ff7c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800075e:	2002      	movs	r0, #2
 8000760:	f002 fd06 	bl	8003170 <HAL_Delay>
	}
	if(L == 'd')
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b64      	cmp	r3, #100	; 0x64
 8000768:	d13c      	bne.n	80007e4 <letter+0x694>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	482d      	ldr	r0, [pc, #180]	; (8000828 <letter+0x6d8>)
 8000772:	f002 ff70 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077c:	482b      	ldr	r0, [pc, #172]	; (800082c <letter+0x6dc>)
 800077e:	f002 ff6a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	4828      	ldr	r0, [pc, #160]	; (800082c <letter+0x6dc>)
 800078a:	f002 ff64 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800078e:	2201      	movs	r2, #1
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4826      	ldr	r0, [pc, #152]	; (800082c <letter+0x6dc>)
 8000794:	f002 ff5f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <letter+0x6dc>)
 800079e:	f002 ff5a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a8:	481e      	ldr	r0, [pc, #120]	; (8000824 <letter+0x6d4>)
 80007aa:	f002 ff54 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b4:	481b      	ldr	r0, [pc, #108]	; (8000824 <letter+0x6d4>)
 80007b6:	f002 ff4e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c0:	4818      	ldr	r0, [pc, #96]	; (8000824 <letter+0x6d4>)
 80007c2:	f002 ff48 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <letter+0x6d4>)
 80007ce:	f002 ff42 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <letter+0x6d8>)
 80007da:	f002 ff3c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80007de:	2002      	movs	r0, #2
 80007e0:	f002 fcc6 	bl	8003170 <HAL_Delay>
	}
	if(L == 'E')
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b45      	cmp	r3, #69	; 0x45
 80007e8:	d143      	bne.n	8000872 <letter+0x722>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <letter+0x6d8>)
 80007f2:	f002 ff30 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <letter+0x6dc>)
 80007fe:	f002 ff2a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <letter+0x6dc>)
 800080a:	f002 ff24 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800080e:	2201      	movs	r2, #1
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <letter+0x6dc>)
 8000814:	f002 ff1f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000818:	2200      	movs	r2, #0
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <letter+0x6dc>)
 800081e:	f002 ff1a 	bl	8003656 <HAL_GPIO_WritePin>
 8000822:	e005      	b.n	8000830 <letter+0x6e0>
 8000824:	40010800 	.word	0x40010800
 8000828:	40010c00 	.word	0x40010c00
 800082c:	40011000 	.word	0x40011000
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	48d5      	ldr	r0, [pc, #852]	; (8000b8c <letter+0xa3c>)
 8000838:	f002 ff0d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	48d2      	ldr	r0, [pc, #840]	; (8000b8c <letter+0xa3c>)
 8000844:	f002 ff07 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084e:	48cf      	ldr	r0, [pc, #828]	; (8000b8c <letter+0xa3c>)
 8000850:	f002 ff01 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	48cc      	ldr	r0, [pc, #816]	; (8000b8c <letter+0xa3c>)
 800085c:	f002 fefb 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	48ca      	ldr	r0, [pc, #808]	; (8000b90 <letter+0xa40>)
 8000868:	f002 fef5 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800086c:	2002      	movs	r0, #2
 800086e:	f002 fc7f 	bl	8003170 <HAL_Delay>
	}
	if(L == 'e')
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b65      	cmp	r3, #101	; 0x65
 8000876:	d13c      	bne.n	80008f2 <letter+0x7a2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087e:	48c4      	ldr	r0, [pc, #784]	; (8000b90 <letter+0xa40>)
 8000880:	f002 fee9 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088a:	48c2      	ldr	r0, [pc, #776]	; (8000b94 <letter+0xa44>)
 800088c:	f002 fee3 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	48bf      	ldr	r0, [pc, #764]	; (8000b94 <letter+0xa44>)
 8000898:	f002 fedd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800089c:	2201      	movs	r2, #1
 800089e:	2140      	movs	r1, #64	; 0x40
 80008a0:	48bc      	ldr	r0, [pc, #752]	; (8000b94 <letter+0xa44>)
 80008a2:	f002 fed8 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80008a6:	2200      	movs	r2, #0
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	48ba      	ldr	r0, [pc, #744]	; (8000b94 <letter+0xa44>)
 80008ac:	f002 fed3 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b6:	48b5      	ldr	r0, [pc, #724]	; (8000b8c <letter+0xa3c>)
 80008b8:	f002 fecd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	48b2      	ldr	r0, [pc, #712]	; (8000b8c <letter+0xa3c>)
 80008c4:	f002 fec7 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ce:	48af      	ldr	r0, [pc, #700]	; (8000b8c <letter+0xa3c>)
 80008d0:	f002 fec1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008da:	48ac      	ldr	r0, [pc, #688]	; (8000b8c <letter+0xa3c>)
 80008dc:	f002 febb 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e6:	48aa      	ldr	r0, [pc, #680]	; (8000b90 <letter+0xa40>)
 80008e8:	f002 feb5 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80008ec:	2002      	movs	r0, #2
 80008ee:	f002 fc3f 	bl	8003170 <HAL_Delay>
	}
	if(L == 'f')
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b66      	cmp	r3, #102	; 0x66
 80008f6:	d13c      	bne.n	8000972 <letter+0x822>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fe:	48a4      	ldr	r0, [pc, #656]	; (8000b90 <letter+0xa40>)
 8000900:	f002 fea9 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090a:	48a2      	ldr	r0, [pc, #648]	; (8000b94 <letter+0xa44>)
 800090c:	f002 fea3 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	489f      	ldr	r0, [pc, #636]	; (8000b94 <letter+0xa44>)
 8000918:	f002 fe9d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	489c      	ldr	r0, [pc, #624]	; (8000b94 <letter+0xa44>)
 8000922:	f002 fe98 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000926:	2200      	movs	r2, #0
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	489a      	ldr	r0, [pc, #616]	; (8000b94 <letter+0xa44>)
 800092c:	f002 fe93 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	4895      	ldr	r0, [pc, #596]	; (8000b8c <letter+0xa3c>)
 8000938:	f002 fe8d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000942:	4892      	ldr	r0, [pc, #584]	; (8000b8c <letter+0xa3c>)
 8000944:	f002 fe87 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094e:	488f      	ldr	r0, [pc, #572]	; (8000b8c <letter+0xa3c>)
 8000950:	f002 fe81 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095a:	488c      	ldr	r0, [pc, #560]	; (8000b8c <letter+0xa3c>)
 800095c:	f002 fe7b 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	488a      	ldr	r0, [pc, #552]	; (8000b90 <letter+0xa40>)
 8000968:	f002 fe75 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800096c:	2002      	movs	r0, #2
 800096e:	f002 fbff 	bl	8003170 <HAL_Delay>
	}
	if(L == 'G')
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b47      	cmp	r3, #71	; 0x47
 8000976:	d13c      	bne.n	80009f2 <letter+0x8a2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4884      	ldr	r0, [pc, #528]	; (8000b90 <letter+0xa40>)
 8000980:	f002 fe69 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098a:	4882      	ldr	r0, [pc, #520]	; (8000b94 <letter+0xa44>)
 800098c:	f002 fe63 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	487f      	ldr	r0, [pc, #508]	; (8000b94 <letter+0xa44>)
 8000998:	f002 fe5d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800099c:	2201      	movs	r2, #1
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	487c      	ldr	r0, [pc, #496]	; (8000b94 <letter+0xa44>)
 80009a2:	f002 fe58 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80009a6:	2200      	movs	r2, #0
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	487a      	ldr	r0, [pc, #488]	; (8000b94 <letter+0xa44>)
 80009ac:	f002 fe53 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b6:	4875      	ldr	r0, [pc, #468]	; (8000b8c <letter+0xa3c>)
 80009b8:	f002 fe4d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	4872      	ldr	r0, [pc, #456]	; (8000b8c <letter+0xa3c>)
 80009c4:	f002 fe47 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ce:	486f      	ldr	r0, [pc, #444]	; (8000b8c <letter+0xa3c>)
 80009d0:	f002 fe41 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009da:	486c      	ldr	r0, [pc, #432]	; (8000b8c <letter+0xa3c>)
 80009dc:	f002 fe3b 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	486a      	ldr	r0, [pc, #424]	; (8000b90 <letter+0xa40>)
 80009e8:	f002 fe35 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f002 fbbf 	bl	8003170 <HAL_Delay>
	}
	if(L == 'g')
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b67      	cmp	r3, #103	; 0x67
 80009f6:	d13c      	bne.n	8000a72 <letter+0x922>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	4864      	ldr	r0, [pc, #400]	; (8000b90 <letter+0xa40>)
 8000a00:	f002 fe29 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0a:	4862      	ldr	r0, [pc, #392]	; (8000b94 <letter+0xa44>)
 8000a0c:	f002 fe23 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a16:	485f      	ldr	r0, [pc, #380]	; (8000b94 <letter+0xa44>)
 8000a18:	f002 fe1d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	485c      	ldr	r0, [pc, #368]	; (8000b94 <letter+0xa44>)
 8000a22:	f002 fe18 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a26:	2200      	movs	r2, #0
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	485a      	ldr	r0, [pc, #360]	; (8000b94 <letter+0xa44>)
 8000a2c:	f002 fe13 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4855      	ldr	r0, [pc, #340]	; (8000b8c <letter+0xa3c>)
 8000a38:	f002 fe0d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	4852      	ldr	r0, [pc, #328]	; (8000b8c <letter+0xa3c>)
 8000a44:	f002 fe07 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	484f      	ldr	r0, [pc, #316]	; (8000b8c <letter+0xa3c>)
 8000a50:	f002 fe01 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5a:	484c      	ldr	r0, [pc, #304]	; (8000b8c <letter+0xa3c>)
 8000a5c:	f002 fdfb 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	484a      	ldr	r0, [pc, #296]	; (8000b90 <letter+0xa40>)
 8000a68:	f002 fdf5 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f002 fb7f 	bl	8003170 <HAL_Delay>
	}
	if(L == 'I')
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b49      	cmp	r3, #73	; 0x49
 8000a76:	d13c      	bne.n	8000af2 <letter+0x9a2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	4844      	ldr	r0, [pc, #272]	; (8000b90 <letter+0xa40>)
 8000a80:	f002 fde9 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	4842      	ldr	r0, [pc, #264]	; (8000b94 <letter+0xa44>)
 8000a8c:	f002 fde3 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	483f      	ldr	r0, [pc, #252]	; (8000b94 <letter+0xa44>)
 8000a98:	f002 fddd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	483c      	ldr	r0, [pc, #240]	; (8000b94 <letter+0xa44>)
 8000aa2:	f002 fdd8 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	483a      	ldr	r0, [pc, #232]	; (8000b94 <letter+0xa44>)
 8000aac:	f002 fdd3 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	4835      	ldr	r0, [pc, #212]	; (8000b8c <letter+0xa3c>)
 8000ab8:	f002 fdcd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac2:	4832      	ldr	r0, [pc, #200]	; (8000b8c <letter+0xa3c>)
 8000ac4:	f002 fdc7 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ace:	482f      	ldr	r0, [pc, #188]	; (8000b8c <letter+0xa3c>)
 8000ad0:	f002 fdc1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	482c      	ldr	r0, [pc, #176]	; (8000b8c <letter+0xa3c>)
 8000adc:	f002 fdbb 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae6:	482a      	ldr	r0, [pc, #168]	; (8000b90 <letter+0xa40>)
 8000ae8:	f002 fdb5 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f002 fb3f 	bl	8003170 <HAL_Delay>
	}
	if(L == 'i')
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b69      	cmp	r3, #105	; 0x69
 8000af6:	d13c      	bne.n	8000b72 <letter+0xa22>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afe:	4824      	ldr	r0, [pc, #144]	; (8000b90 <letter+0xa40>)
 8000b00:	f002 fda9 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0a:	4822      	ldr	r0, [pc, #136]	; (8000b94 <letter+0xa44>)
 8000b0c:	f002 fda3 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	481f      	ldr	r0, [pc, #124]	; (8000b94 <letter+0xa44>)
 8000b18:	f002 fd9d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <letter+0xa44>)
 8000b22:	f002 fd98 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b26:	2201      	movs	r2, #1
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	481a      	ldr	r0, [pc, #104]	; (8000b94 <letter+0xa44>)
 8000b2c:	f002 fd93 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <letter+0xa3c>)
 8000b38:	f002 fd8d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b42:	4812      	ldr	r0, [pc, #72]	; (8000b8c <letter+0xa3c>)
 8000b44:	f002 fd87 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4e:	480f      	ldr	r0, [pc, #60]	; (8000b8c <letter+0xa3c>)
 8000b50:	f002 fd81 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <letter+0xa3c>)
 8000b5c:	f002 fd7b 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	480a      	ldr	r0, [pc, #40]	; (8000b90 <letter+0xa40>)
 8000b68:	f002 fd75 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f002 faff 	bl	8003170 <HAL_Delay>
	}
	if(L == 'l')
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b6c      	cmp	r3, #108	; 0x6c
 8000b76:	d143      	bne.n	8000c00 <letter+0xab0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <letter+0xa40>)
 8000b80:	f002 fd69 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8a:	e005      	b.n	8000b98 <letter+0xa48>
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00
 8000b94:	40011000 	.word	0x40011000
 8000b98:	48d6      	ldr	r0, [pc, #856]	; (8000ef4 <letter+0xda4>)
 8000b9a:	f002 fd5c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba4:	48d3      	ldr	r0, [pc, #844]	; (8000ef4 <letter+0xda4>)
 8000ba6:	f002 fd56 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000baa:	2201      	movs	r2, #1
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	48d1      	ldr	r0, [pc, #836]	; (8000ef4 <letter+0xda4>)
 8000bb0:	f002 fd51 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	48ce      	ldr	r0, [pc, #824]	; (8000ef4 <letter+0xda4>)
 8000bba:	f002 fd4c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc4:	48cc      	ldr	r0, [pc, #816]	; (8000ef8 <letter+0xda8>)
 8000bc6:	f002 fd46 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd0:	48c9      	ldr	r0, [pc, #804]	; (8000ef8 <letter+0xda8>)
 8000bd2:	f002 fd40 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bdc:	48c6      	ldr	r0, [pc, #792]	; (8000ef8 <letter+0xda8>)
 8000bde:	f002 fd3a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be8:	48c3      	ldr	r0, [pc, #780]	; (8000ef8 <letter+0xda8>)
 8000bea:	f002 fd34 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	48c1      	ldr	r0, [pc, #772]	; (8000efc <letter+0xdac>)
 8000bf6:	f002 fd2e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f002 fab8 	bl	8003170 <HAL_Delay>
	}
	if(L == 'm')
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b6d      	cmp	r3, #109	; 0x6d
 8000c04:	d13c      	bne.n	8000c80 <letter+0xb30>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	48bb      	ldr	r0, [pc, #748]	; (8000efc <letter+0xdac>)
 8000c0e:	f002 fd22 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	48b6      	ldr	r0, [pc, #728]	; (8000ef4 <letter+0xda4>)
 8000c1a:	f002 fd1c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	48b3      	ldr	r0, [pc, #716]	; (8000ef4 <letter+0xda4>)
 8000c26:	f002 fd16 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	48b1      	ldr	r0, [pc, #708]	; (8000ef4 <letter+0xda4>)
 8000c30:	f002 fd11 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c34:	2201      	movs	r2, #1
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	48ae      	ldr	r0, [pc, #696]	; (8000ef4 <letter+0xda4>)
 8000c3a:	f002 fd0c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c44:	48ac      	ldr	r0, [pc, #688]	; (8000ef8 <letter+0xda8>)
 8000c46:	f002 fd06 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	48a9      	ldr	r0, [pc, #676]	; (8000ef8 <letter+0xda8>)
 8000c52:	f002 fd00 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	48a6      	ldr	r0, [pc, #664]	; (8000ef8 <letter+0xda8>)
 8000c5e:	f002 fcfa 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c68:	48a3      	ldr	r0, [pc, #652]	; (8000ef8 <letter+0xda8>)
 8000c6a:	f002 fcf4 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c74:	48a1      	ldr	r0, [pc, #644]	; (8000efc <letter+0xdac>)
 8000c76:	f002 fcee 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f002 fa78 	bl	8003170 <HAL_Delay>
	}
	if(L == 'N')
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b4e      	cmp	r3, #78	; 0x4e
 8000c84:	d13c      	bne.n	8000d00 <letter+0xbb0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8c:	489b      	ldr	r0, [pc, #620]	; (8000efc <letter+0xdac>)
 8000c8e:	f002 fce2 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	4896      	ldr	r0, [pc, #600]	; (8000ef4 <letter+0xda4>)
 8000c9a:	f002 fcdc 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca4:	4893      	ldr	r0, [pc, #588]	; (8000ef4 <letter+0xda4>)
 8000ca6:	f002 fcd6 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000caa:	2201      	movs	r2, #1
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	4891      	ldr	r0, [pc, #580]	; (8000ef4 <letter+0xda4>)
 8000cb0:	f002 fcd1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	488e      	ldr	r0, [pc, #568]	; (8000ef4 <letter+0xda4>)
 8000cba:	f002 fccc 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	488c      	ldr	r0, [pc, #560]	; (8000ef8 <letter+0xda8>)
 8000cc6:	f002 fcc6 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd0:	4889      	ldr	r0, [pc, #548]	; (8000ef8 <letter+0xda8>)
 8000cd2:	f002 fcc0 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	4886      	ldr	r0, [pc, #536]	; (8000ef8 <letter+0xda8>)
 8000cde:	f002 fcba 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce8:	4883      	ldr	r0, [pc, #524]	; (8000ef8 <letter+0xda8>)
 8000cea:	f002 fcb4 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf4:	4881      	ldr	r0, [pc, #516]	; (8000efc <letter+0xdac>)
 8000cf6:	f002 fcae 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f002 fa38 	bl	8003170 <HAL_Delay>
	}
	if(L == 'n')
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b6e      	cmp	r3, #110	; 0x6e
 8000d04:	d13c      	bne.n	8000d80 <letter+0xc30>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0c:	487b      	ldr	r0, [pc, #492]	; (8000efc <letter+0xdac>)
 8000d0e:	f002 fca2 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	4876      	ldr	r0, [pc, #472]	; (8000ef4 <letter+0xda4>)
 8000d1a:	f002 fc9c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d24:	4873      	ldr	r0, [pc, #460]	; (8000ef4 <letter+0xda4>)
 8000d26:	f002 fc96 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4871      	ldr	r0, [pc, #452]	; (8000ef4 <letter+0xda4>)
 8000d30:	f002 fc91 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d34:	2201      	movs	r2, #1
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	486e      	ldr	r0, [pc, #440]	; (8000ef4 <letter+0xda4>)
 8000d3a:	f002 fc8c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d44:	486c      	ldr	r0, [pc, #432]	; (8000ef8 <letter+0xda8>)
 8000d46:	f002 fc86 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4869      	ldr	r0, [pc, #420]	; (8000ef8 <letter+0xda8>)
 8000d52:	f002 fc80 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5c:	4866      	ldr	r0, [pc, #408]	; (8000ef8 <letter+0xda8>)
 8000d5e:	f002 fc7a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d68:	4863      	ldr	r0, [pc, #396]	; (8000ef8 <letter+0xda8>)
 8000d6a:	f002 fc74 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d74:	4861      	ldr	r0, [pc, #388]	; (8000efc <letter+0xdac>)
 8000d76:	f002 fc6e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f002 f9f8 	bl	8003170 <HAL_Delay>
	}
	if(L == 'O')
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b4f      	cmp	r3, #79	; 0x4f
 8000d84:	d13c      	bne.n	8000e00 <letter+0xcb0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8c:	485b      	ldr	r0, [pc, #364]	; (8000efc <letter+0xdac>)
 8000d8e:	f002 fc62 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d98:	4856      	ldr	r0, [pc, #344]	; (8000ef4 <letter+0xda4>)
 8000d9a:	f002 fc5c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4853      	ldr	r0, [pc, #332]	; (8000ef4 <letter+0xda4>)
 8000da6:	f002 fc56 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000daa:	2201      	movs	r2, #1
 8000dac:	2140      	movs	r1, #64	; 0x40
 8000dae:	4851      	ldr	r0, [pc, #324]	; (8000ef4 <letter+0xda4>)
 8000db0:	f002 fc51 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000db4:	2201      	movs	r2, #1
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	484e      	ldr	r0, [pc, #312]	; (8000ef4 <letter+0xda4>)
 8000dba:	f002 fc4c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	484c      	ldr	r0, [pc, #304]	; (8000ef8 <letter+0xda8>)
 8000dc6:	f002 fc46 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <letter+0xda8>)
 8000dd2:	f002 fc40 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	4846      	ldr	r0, [pc, #280]	; (8000ef8 <letter+0xda8>)
 8000dde:	f002 fc3a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de8:	4843      	ldr	r0, [pc, #268]	; (8000ef8 <letter+0xda8>)
 8000dea:	f002 fc34 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	4841      	ldr	r0, [pc, #260]	; (8000efc <letter+0xdac>)
 8000df6:	f002 fc2e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f002 f9b8 	bl	8003170 <HAL_Delay>
	}
	if(L == 'o')
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b6f      	cmp	r3, #111	; 0x6f
 8000e04:	d13c      	bne.n	8000e80 <letter+0xd30>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	483b      	ldr	r0, [pc, #236]	; (8000efc <letter+0xdac>)
 8000e0e:	f002 fc22 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	4836      	ldr	r0, [pc, #216]	; (8000ef4 <letter+0xda4>)
 8000e1a:	f002 fc1c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	4833      	ldr	r0, [pc, #204]	; (8000ef4 <letter+0xda4>)
 8000e26:	f002 fc16 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	4831      	ldr	r0, [pc, #196]	; (8000ef4 <letter+0xda4>)
 8000e30:	f002 fc11 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000e34:	2201      	movs	r2, #1
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <letter+0xda4>)
 8000e3a:	f002 fc0c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e44:	482c      	ldr	r0, [pc, #176]	; (8000ef8 <letter+0xda8>)
 8000e46:	f002 fc06 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e50:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <letter+0xda8>)
 8000e52:	f002 fc00 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5c:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <letter+0xda8>)
 8000e5e:	f002 fbfa 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <letter+0xda8>)
 8000e6a:	f002 fbf4 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4821      	ldr	r0, [pc, #132]	; (8000efc <letter+0xdac>)
 8000e76:	f002 fbee 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f002 f978 	bl	8003170 <HAL_Delay>
	}
	if(L == 'P')
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b50      	cmp	r3, #80	; 0x50
 8000e84:	d144      	bne.n	8000f10 <letter+0xdc0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <letter+0xdac>)
 8000e8e:	f002 fbe2 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e98:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <letter+0xda4>)
 8000e9a:	f002 fbdc 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <letter+0xda4>)
 8000ea6:	f002 fbd6 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <letter+0xda4>)
 8000eb0:	f002 fbd1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <letter+0xda4>)
 8000eba:	f002 fbcc 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <letter+0xda8>)
 8000ec6:	f002 fbc6 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <letter+0xda8>)
 8000ed2:	f002 fbc0 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <letter+0xda8>)
 8000ede:	f002 fbba 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <letter+0xda8>)
 8000eea:	f002 fbb4 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000eee:	2200      	movs	r2, #0
 8000ef0:	e006      	b.n	8000f00 <letter+0xdb0>
 8000ef2:	bf00      	nop
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	48d5      	ldr	r0, [pc, #852]	; (800125c <letter+0x110c>)
 8000f06:	f002 fba6 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f002 f930 	bl	8003170 <HAL_Delay>
	}
	if(L == 'Q')
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b51      	cmp	r3, #81	; 0x51
 8000f14:	d13c      	bne.n	8000f90 <letter+0xe40>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1c:	48cf      	ldr	r0, [pc, #828]	; (800125c <letter+0x110c>)
 8000f1e:	f002 fb9a 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	48cd      	ldr	r0, [pc, #820]	; (8001260 <letter+0x1110>)
 8000f2a:	f002 fb94 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f34:	48ca      	ldr	r0, [pc, #808]	; (8001260 <letter+0x1110>)
 8000f36:	f002 fb8e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	48c8      	ldr	r0, [pc, #800]	; (8001260 <letter+0x1110>)
 8000f40:	f002 fb89 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	48c5      	ldr	r0, [pc, #788]	; (8001260 <letter+0x1110>)
 8000f4a:	f002 fb84 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	48c3      	ldr	r0, [pc, #780]	; (8001264 <letter+0x1114>)
 8000f56:	f002 fb7e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f60:	48c0      	ldr	r0, [pc, #768]	; (8001264 <letter+0x1114>)
 8000f62:	f002 fb78 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6c:	48bd      	ldr	r0, [pc, #756]	; (8001264 <letter+0x1114>)
 8000f6e:	f002 fb72 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f78:	48ba      	ldr	r0, [pc, #744]	; (8001264 <letter+0x1114>)
 8000f7a:	f002 fb6c 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f84:	48b5      	ldr	r0, [pc, #724]	; (800125c <letter+0x110c>)
 8000f86:	f002 fb66 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f002 f8f0 	bl	8003170 <HAL_Delay>
	}
	if(L == 'r')
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b72      	cmp	r3, #114	; 0x72
 8000f94:	d13c      	bne.n	8001010 <letter+0xec0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	48af      	ldr	r0, [pc, #700]	; (800125c <letter+0x110c>)
 8000f9e:	f002 fb5a 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa8:	48ad      	ldr	r0, [pc, #692]	; (8001260 <letter+0x1110>)
 8000faa:	f002 fb54 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb4:	48aa      	ldr	r0, [pc, #680]	; (8001260 <letter+0x1110>)
 8000fb6:	f002 fb4e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	48a8      	ldr	r0, [pc, #672]	; (8001260 <letter+0x1110>)
 8000fc0:	f002 fb49 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	48a5      	ldr	r0, [pc, #660]	; (8001260 <letter+0x1110>)
 8000fca:	f002 fb44 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	48a3      	ldr	r0, [pc, #652]	; (8001264 <letter+0x1114>)
 8000fd6:	f002 fb3e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	48a0      	ldr	r0, [pc, #640]	; (8001264 <letter+0x1114>)
 8000fe2:	f002 fb38 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fec:	489d      	ldr	r0, [pc, #628]	; (8001264 <letter+0x1114>)
 8000fee:	f002 fb32 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff8:	489a      	ldr	r0, [pc, #616]	; (8001264 <letter+0x1114>)
 8000ffa:	f002 fb2c 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001004:	4895      	ldr	r0, [pc, #596]	; (800125c <letter+0x110c>)
 8001006:	f002 fb26 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800100a:	2002      	movs	r0, #2
 800100c:	f002 f8b0 	bl	8003170 <HAL_Delay>
	}
	if(L == 's')
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b73      	cmp	r3, #115	; 0x73
 8001014:	d13c      	bne.n	8001090 <letter+0xf40>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101c:	488f      	ldr	r0, [pc, #572]	; (800125c <letter+0x110c>)
 800101e:	f002 fb1a 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	488d      	ldr	r0, [pc, #564]	; (8001260 <letter+0x1110>)
 800102a:	f002 fb14 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	488a      	ldr	r0, [pc, #552]	; (8001260 <letter+0x1110>)
 8001036:	f002 fb0e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4888      	ldr	r0, [pc, #544]	; (8001260 <letter+0x1110>)
 8001040:	f002 fb09 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001044:	2200      	movs	r2, #0
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	4885      	ldr	r0, [pc, #532]	; (8001260 <letter+0x1110>)
 800104a:	f002 fb04 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001054:	4883      	ldr	r0, [pc, #524]	; (8001264 <letter+0x1114>)
 8001056:	f002 fafe 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001060:	4880      	ldr	r0, [pc, #512]	; (8001264 <letter+0x1114>)
 8001062:	f002 faf8 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106c:	487d      	ldr	r0, [pc, #500]	; (8001264 <letter+0x1114>)
 800106e:	f002 faf2 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001078:	487a      	ldr	r0, [pc, #488]	; (8001264 <letter+0x1114>)
 800107a:	f002 faec 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4875      	ldr	r0, [pc, #468]	; (800125c <letter+0x110c>)
 8001086:	f002 fae6 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800108a:	2002      	movs	r0, #2
 800108c:	f002 f870 	bl	8003170 <HAL_Delay>
	}
	if(L == 'T')
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b54      	cmp	r3, #84	; 0x54
 8001094:	d13c      	bne.n	8001110 <letter+0xfc0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	486f      	ldr	r0, [pc, #444]	; (800125c <letter+0x110c>)
 800109e:	f002 fada 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	486d      	ldr	r0, [pc, #436]	; (8001260 <letter+0x1110>)
 80010aa:	f002 fad4 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	486a      	ldr	r0, [pc, #424]	; (8001260 <letter+0x1110>)
 80010b6:	f002 face 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80010ba:	2201      	movs	r2, #1
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	4868      	ldr	r0, [pc, #416]	; (8001260 <letter+0x1110>)
 80010c0:	f002 fac9 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80010c4:	2200      	movs	r2, #0
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	4865      	ldr	r0, [pc, #404]	; (8001260 <letter+0x1110>)
 80010ca:	f002 fac4 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	4863      	ldr	r0, [pc, #396]	; (8001264 <letter+0x1114>)
 80010d6:	f002 fabe 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e0:	4860      	ldr	r0, [pc, #384]	; (8001264 <letter+0x1114>)
 80010e2:	f002 fab8 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	485d      	ldr	r0, [pc, #372]	; (8001264 <letter+0x1114>)
 80010ee:	f002 fab2 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f8:	485a      	ldr	r0, [pc, #360]	; (8001264 <letter+0x1114>)
 80010fa:	f002 faac 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001104:	4855      	ldr	r0, [pc, #340]	; (800125c <letter+0x110c>)
 8001106:	f002 faa6 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800110a:	2002      	movs	r0, #2
 800110c:	f002 f830 	bl	8003170 <HAL_Delay>
	}
	if(L == 't')
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b74      	cmp	r3, #116	; 0x74
 8001114:	d13c      	bne.n	8001190 <letter+0x1040>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111c:	484f      	ldr	r0, [pc, #316]	; (800125c <letter+0x110c>)
 800111e:	f002 fa9a 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	484d      	ldr	r0, [pc, #308]	; (8001260 <letter+0x1110>)
 800112a:	f002 fa94 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001134:	484a      	ldr	r0, [pc, #296]	; (8001260 <letter+0x1110>)
 8001136:	f002 fa8e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800113a:	2201      	movs	r2, #1
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	4848      	ldr	r0, [pc, #288]	; (8001260 <letter+0x1110>)
 8001140:	f002 fa89 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001144:	2200      	movs	r2, #0
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4845      	ldr	r0, [pc, #276]	; (8001260 <letter+0x1110>)
 800114a:	f002 fa84 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001154:	4843      	ldr	r0, [pc, #268]	; (8001264 <letter+0x1114>)
 8001156:	f002 fa7e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001160:	4840      	ldr	r0, [pc, #256]	; (8001264 <letter+0x1114>)
 8001162:	f002 fa78 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	483d      	ldr	r0, [pc, #244]	; (8001264 <letter+0x1114>)
 800116e:	f002 fa72 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	483a      	ldr	r0, [pc, #232]	; (8001264 <letter+0x1114>)
 800117a:	f002 fa6c 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001184:	4835      	ldr	r0, [pc, #212]	; (800125c <letter+0x110c>)
 8001186:	f002 fa66 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800118a:	2002      	movs	r0, #2
 800118c:	f001 fff0 	bl	8003170 <HAL_Delay>
	}
	if(L == 'u')
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b75      	cmp	r3, #117	; 0x75
 8001194:	d13c      	bne.n	8001210 <letter+0x10c0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	482f      	ldr	r0, [pc, #188]	; (800125c <letter+0x110c>)
 800119e:	f002 fa5a 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a8:	482d      	ldr	r0, [pc, #180]	; (8001260 <letter+0x1110>)
 80011aa:	f002 fa54 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b4:	482a      	ldr	r0, [pc, #168]	; (8001260 <letter+0x1110>)
 80011b6:	f002 fa4e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80011ba:	2201      	movs	r2, #1
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	4828      	ldr	r0, [pc, #160]	; (8001260 <letter+0x1110>)
 80011c0:	f002 fa49 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80011c4:	2200      	movs	r2, #0
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	4825      	ldr	r0, [pc, #148]	; (8001260 <letter+0x1110>)
 80011ca:	f002 fa44 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d4:	4823      	ldr	r0, [pc, #140]	; (8001264 <letter+0x1114>)
 80011d6:	f002 fa3e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e0:	4820      	ldr	r0, [pc, #128]	; (8001264 <letter+0x1114>)
 80011e2:	f002 fa38 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ec:	481d      	ldr	r0, [pc, #116]	; (8001264 <letter+0x1114>)
 80011ee:	f002 fa32 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f8:	481a      	ldr	r0, [pc, #104]	; (8001264 <letter+0x1114>)
 80011fa:	f002 fa2c 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001204:	4815      	ldr	r0, [pc, #84]	; (800125c <letter+0x110c>)
 8001206:	f002 fa26 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800120a:	2002      	movs	r0, #2
 800120c:	f001 ffb0 	bl	8003170 <HAL_Delay>
	}
	if(L == 'v')
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b76      	cmp	r3, #118	; 0x76
 8001214:	d143      	bne.n	800129e <letter+0x114e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <letter+0x110c>)
 800121e:	f002 fa1a 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <letter+0x1110>)
 800122a:	f002 fa14 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <letter+0x1110>)
 8001236:	f002 fa0e 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800123a:	2201      	movs	r2, #1
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <letter+0x1110>)
 8001240:	f002 fa09 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <letter+0x1110>)
 800124a:	f002 fa04 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <letter+0x1114>)
 8001256:	f002 f9fe 	bl	8003656 <HAL_GPIO_WritePin>
 800125a:	e005      	b.n	8001268 <letter+0x1118>
 800125c:	40010c00 	.word	0x40010c00
 8001260:	40011000 	.word	0x40011000
 8001264:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	48d6      	ldr	r0, [pc, #856]	; (80015c8 <letter+0x1478>)
 8001270:	f002 f9f1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127a:	48d3      	ldr	r0, [pc, #844]	; (80015c8 <letter+0x1478>)
 800127c:	f002 f9eb 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001286:	48d0      	ldr	r0, [pc, #832]	; (80015c8 <letter+0x1478>)
 8001288:	f002 f9e5 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001292:	48ce      	ldr	r0, [pc, #824]	; (80015cc <letter+0x147c>)
 8001294:	f002 f9df 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001298:	2002      	movs	r0, #2
 800129a:	f001 ff69 	bl	8003170 <HAL_Delay>
	}
	if(L == 'W')
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b57      	cmp	r3, #87	; 0x57
 80012a2:	d13c      	bne.n	800131e <letter+0x11ce>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012aa:	48c8      	ldr	r0, [pc, #800]	; (80015cc <letter+0x147c>)
 80012ac:	f002 f9d3 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b6:	48c6      	ldr	r0, [pc, #792]	; (80015d0 <letter+0x1480>)
 80012b8:	f002 f9cd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c2:	48c3      	ldr	r0, [pc, #780]	; (80015d0 <letter+0x1480>)
 80012c4:	f002 f9c7 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80012c8:	2201      	movs	r2, #1
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	48c0      	ldr	r0, [pc, #768]	; (80015d0 <letter+0x1480>)
 80012ce:	f002 f9c2 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80012d2:	2200      	movs	r2, #0
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	48be      	ldr	r0, [pc, #760]	; (80015d0 <letter+0x1480>)
 80012d8:	f002 f9bd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e2:	48b9      	ldr	r0, [pc, #740]	; (80015c8 <letter+0x1478>)
 80012e4:	f002 f9b7 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ee:	48b6      	ldr	r0, [pc, #728]	; (80015c8 <letter+0x1478>)
 80012f0:	f002 f9b1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	48b3      	ldr	r0, [pc, #716]	; (80015c8 <letter+0x1478>)
 80012fc:	f002 f9ab 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001306:	48b0      	ldr	r0, [pc, #704]	; (80015c8 <letter+0x1478>)
 8001308:	f002 f9a5 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001312:	48ae      	ldr	r0, [pc, #696]	; (80015cc <letter+0x147c>)
 8001314:	f002 f99f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001318:	2002      	movs	r0, #2
 800131a:	f001 ff29 	bl	8003170 <HAL_Delay>
	}
	if(L == 'w')
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b77      	cmp	r3, #119	; 0x77
 8001322:	d13c      	bne.n	800139e <letter+0x124e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	48a8      	ldr	r0, [pc, #672]	; (80015cc <letter+0x147c>)
 800132c:	f002 f993 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001336:	48a6      	ldr	r0, [pc, #664]	; (80015d0 <letter+0x1480>)
 8001338:	f002 f98d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001342:	48a3      	ldr	r0, [pc, #652]	; (80015d0 <letter+0x1480>)
 8001344:	f002 f987 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001348:	2201      	movs	r2, #1
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	48a0      	ldr	r0, [pc, #640]	; (80015d0 <letter+0x1480>)
 800134e:	f002 f982 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001352:	2200      	movs	r2, #0
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	489e      	ldr	r0, [pc, #632]	; (80015d0 <letter+0x1480>)
 8001358:	f002 f97d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001362:	4899      	ldr	r0, [pc, #612]	; (80015c8 <letter+0x1478>)
 8001364:	f002 f977 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136e:	4896      	ldr	r0, [pc, #600]	; (80015c8 <letter+0x1478>)
 8001370:	f002 f971 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137a:	4893      	ldr	r0, [pc, #588]	; (80015c8 <letter+0x1478>)
 800137c:	f002 f96b 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001386:	4890      	ldr	r0, [pc, #576]	; (80015c8 <letter+0x1478>)
 8001388:	f002 f965 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001392:	488e      	ldr	r0, [pc, #568]	; (80015cc <letter+0x147c>)
 8001394:	f002 f95f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001398:	2002      	movs	r0, #2
 800139a:	f001 fee9 	bl	8003170 <HAL_Delay>
	}
	if(L == 'y')
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b79      	cmp	r3, #121	; 0x79
 80013a2:	d13c      	bne.n	800141e <letter+0x12ce>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013aa:	4888      	ldr	r0, [pc, #544]	; (80015cc <letter+0x147c>)
 80013ac:	f002 f953 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	4886      	ldr	r0, [pc, #536]	; (80015d0 <letter+0x1480>)
 80013b8:	f002 f94d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	4883      	ldr	r0, [pc, #524]	; (80015d0 <letter+0x1480>)
 80013c4:	f002 f947 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013c8:	2200      	movs	r2, #0
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	4880      	ldr	r0, [pc, #512]	; (80015d0 <letter+0x1480>)
 80013ce:	f002 f942 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80013d2:	2201      	movs	r2, #1
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	487e      	ldr	r0, [pc, #504]	; (80015d0 <letter+0x1480>)
 80013d8:	f002 f93d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e2:	4879      	ldr	r0, [pc, #484]	; (80015c8 <letter+0x1478>)
 80013e4:	f002 f937 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ee:	4876      	ldr	r0, [pc, #472]	; (80015c8 <letter+0x1478>)
 80013f0:	f002 f931 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4873      	ldr	r0, [pc, #460]	; (80015c8 <letter+0x1478>)
 80013fc:	f002 f92b 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	4870      	ldr	r0, [pc, #448]	; (80015c8 <letter+0x1478>)
 8001408:	f002 f925 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	486e      	ldr	r0, [pc, #440]	; (80015cc <letter+0x147c>)
 8001414:	f002 f91f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001418:	2002      	movs	r0, #2
 800141a:	f001 fea9 	bl	8003170 <HAL_Delay>
	}
	if(L == '0')
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b30      	cmp	r3, #48	; 0x30
 8001422:	d13c      	bne.n	800149e <letter+0x134e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142a:	4868      	ldr	r0, [pc, #416]	; (80015cc <letter+0x147c>)
 800142c:	f002 f913 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001436:	4866      	ldr	r0, [pc, #408]	; (80015d0 <letter+0x1480>)
 8001438:	f002 f90d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001442:	4863      	ldr	r0, [pc, #396]	; (80015d0 <letter+0x1480>)
 8001444:	f002 f907 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001448:	2200      	movs	r2, #0
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	4860      	ldr	r0, [pc, #384]	; (80015d0 <letter+0x1480>)
 800144e:	f002 f902 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001452:	2200      	movs	r2, #0
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	485e      	ldr	r0, [pc, #376]	; (80015d0 <letter+0x1480>)
 8001458:	f002 f8fd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001462:	4859      	ldr	r0, [pc, #356]	; (80015c8 <letter+0x1478>)
 8001464:	f002 f8f7 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146e:	4856      	ldr	r0, [pc, #344]	; (80015c8 <letter+0x1478>)
 8001470:	f002 f8f1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147a:	4853      	ldr	r0, [pc, #332]	; (80015c8 <letter+0x1478>)
 800147c:	f002 f8eb 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001486:	4850      	ldr	r0, [pc, #320]	; (80015c8 <letter+0x1478>)
 8001488:	f002 f8e5 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	484e      	ldr	r0, [pc, #312]	; (80015cc <letter+0x147c>)
 8001494:	f002 f8df 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001498:	2002      	movs	r0, #2
 800149a:	f001 fe69 	bl	8003170 <HAL_Delay>
	}
	if(L == '1')
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b31      	cmp	r3, #49	; 0x31
 80014a2:	d13c      	bne.n	800151e <letter+0x13ce>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	4848      	ldr	r0, [pc, #288]	; (80015cc <letter+0x147c>)
 80014ac:	f002 f8d3 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b6:	4846      	ldr	r0, [pc, #280]	; (80015d0 <letter+0x1480>)
 80014b8:	f002 f8cd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c2:	4843      	ldr	r0, [pc, #268]	; (80015d0 <letter+0x1480>)
 80014c4:	f002 f8c7 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80014c8:	2200      	movs	r2, #0
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	4840      	ldr	r0, [pc, #256]	; (80015d0 <letter+0x1480>)
 80014ce:	f002 f8c2 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80014d2:	2200      	movs	r2, #0
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	483e      	ldr	r0, [pc, #248]	; (80015d0 <letter+0x1480>)
 80014d8:	f002 f8bd 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e2:	4839      	ldr	r0, [pc, #228]	; (80015c8 <letter+0x1478>)
 80014e4:	f002 f8b7 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ee:	4836      	ldr	r0, [pc, #216]	; (80015c8 <letter+0x1478>)
 80014f0:	f002 f8b1 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fa:	4833      	ldr	r0, [pc, #204]	; (80015c8 <letter+0x1478>)
 80014fc:	f002 f8ab 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001506:	4830      	ldr	r0, [pc, #192]	; (80015c8 <letter+0x1478>)
 8001508:	f002 f8a5 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	482e      	ldr	r0, [pc, #184]	; (80015cc <letter+0x147c>)
 8001514:	f002 f89f 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001518:	2002      	movs	r0, #2
 800151a:	f001 fe29 	bl	8003170 <HAL_Delay>
	}
	if(L == '2')
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b32      	cmp	r3, #50	; 0x32
 8001522:	d139      	bne.n	8001598 <letter+0x1448>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	4828      	ldr	r0, [pc, #160]	; (80015cc <letter+0x147c>)
 800152c:	f002 f893 	bl	8003656 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001536:	4826      	ldr	r0, [pc, #152]	; (80015d0 <letter+0x1480>)
 8001538:	f002 f88d 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001542:	4823      	ldr	r0, [pc, #140]	; (80015d0 <letter+0x1480>)
 8001544:	f002 f887 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001548:	2200      	movs	r2, #0
 800154a:	2140      	movs	r1, #64	; 0x40
 800154c:	4820      	ldr	r0, [pc, #128]	; (80015d0 <letter+0x1480>)
 800154e:	f002 f882 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001552:	2200      	movs	r2, #0
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <letter+0x1480>)
 8001558:	f002 f87d 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001562:	4819      	ldr	r0, [pc, #100]	; (80015c8 <letter+0x1478>)
 8001564:	f002 f877 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156e:	4816      	ldr	r0, [pc, #88]	; (80015c8 <letter+0x1478>)
 8001570:	f002 f871 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <letter+0x1478>)
 800157c:	f002 f86b 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001586:	4810      	ldr	r0, [pc, #64]	; (80015c8 <letter+0x1478>)
 8001588:	f002 f865 	bl	8003656 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <letter+0x147c>)
 8001594:	f002 f85f 	bl	8003656 <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b33      	cmp	r3, #51	; 0x33
 800159c:	d144      	bne.n	8001628 <letter+0x14d8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <letter+0x147c>)
 80015a6:	f002 f856 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <letter+0x1480>)
 80015b2:	f002 f850 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <letter+0x1480>)
 80015be:	f002 f84a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80015c2:	2200      	movs	r2, #0
 80015c4:	e006      	b.n	80015d4 <letter+0x1484>
 80015c6:	bf00      	nop
 80015c8:	40010800 	.word	0x40010800
 80015cc:	40010c00 	.word	0x40010c00
 80015d0:	40011000 	.word	0x40011000
 80015d4:	2140      	movs	r1, #64	; 0x40
 80015d6:	48d6      	ldr	r0, [pc, #856]	; (8001930 <letter+0x17e0>)
 80015d8:	f002 f83d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80015dc:	2200      	movs	r2, #0
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	48d3      	ldr	r0, [pc, #844]	; (8001930 <letter+0x17e0>)
 80015e2:	f002 f838 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	48d1      	ldr	r0, [pc, #836]	; (8001934 <letter+0x17e4>)
 80015ee:	f002 f832 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	48ce      	ldr	r0, [pc, #824]	; (8001934 <letter+0x17e4>)
 80015fa:	f002 f82c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001604:	48cb      	ldr	r0, [pc, #812]	; (8001934 <letter+0x17e4>)
 8001606:	f002 f826 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001610:	48c8      	ldr	r0, [pc, #800]	; (8001934 <letter+0x17e4>)
 8001612:	f002 f820 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161c:	48c6      	ldr	r0, [pc, #792]	; (8001938 <letter+0x17e8>)
 800161e:	f002 f81a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001622:	2002      	movs	r0, #2
 8001624:	f001 fda4 	bl	8003170 <HAL_Delay>
	}
	if(L == '4')
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b34      	cmp	r3, #52	; 0x34
 800162c:	d13c      	bne.n	80016a8 <letter+0x1558>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001634:	48c0      	ldr	r0, [pc, #768]	; (8001938 <letter+0x17e8>)
 8001636:	f002 f80e 	bl	8003656 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	48bb      	ldr	r0, [pc, #748]	; (8001930 <letter+0x17e0>)
 8001642:	f002 f808 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	48b8      	ldr	r0, [pc, #736]	; (8001930 <letter+0x17e0>)
 800164e:	f002 f802 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001652:	2201      	movs	r2, #1
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	48b6      	ldr	r0, [pc, #728]	; (8001930 <letter+0x17e0>)
 8001658:	f001 fffd 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800165c:	2200      	movs	r2, #0
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	48b3      	ldr	r0, [pc, #716]	; (8001930 <letter+0x17e0>)
 8001662:	f001 fff8 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	48b1      	ldr	r0, [pc, #708]	; (8001934 <letter+0x17e4>)
 800166e:	f001 fff2 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	48ae      	ldr	r0, [pc, #696]	; (8001934 <letter+0x17e4>)
 800167a:	f001 ffec 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001684:	48ab      	ldr	r0, [pc, #684]	; (8001934 <letter+0x17e4>)
 8001686:	f001 ffe6 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001690:	48a8      	ldr	r0, [pc, #672]	; (8001934 <letter+0x17e4>)
 8001692:	f001 ffe0 	bl	8003656 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	48a6      	ldr	r0, [pc, #664]	; (8001938 <letter+0x17e8>)
 800169e:	f001 ffda 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016a2:	2002      	movs	r0, #2
 80016a4:	f001 fd64 	bl	8003170 <HAL_Delay>
	}
	if(L == '5')
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b35      	cmp	r3, #53	; 0x35
 80016ac:	d13c      	bne.n	8001728 <letter+0x15d8>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b4:	48a0      	ldr	r0, [pc, #640]	; (8001938 <letter+0x17e8>)
 80016b6:	f001 ffce 	bl	8003656 <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	489b      	ldr	r0, [pc, #620]	; (8001930 <letter+0x17e0>)
 80016c2:	f001 ffc8 	bl	8003656 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016cc:	4898      	ldr	r0, [pc, #608]	; (8001930 <letter+0x17e0>)
 80016ce:	f001 ffc2 	bl	8003656 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016d2:	2201      	movs	r2, #1
 80016d4:	2140      	movs	r1, #64	; 0x40
 80016d6:	4896      	ldr	r0, [pc, #600]	; (8001930 <letter+0x17e0>)
 80016d8:	f001 ffbd 	bl	8003656 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80016dc:	2200      	movs	r2, #0
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	4893      	ldr	r0, [pc, #588]	; (8001930 <letter+0x17e0>)
 80016e2:	f001 ffb8 	bl	8003656 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ec:	4891      	ldr	r0, [pc, #580]	; (8001934 <letter+0x17e4>)
 80016ee:	f001 ffb2 	bl	8003656 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f8:	488e      	ldr	r0, [pc, #568]	; (8001934 <letter+0x17e4>)
 80016fa:	f001 ffac 	bl	8003656 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001704:	488b      	ldr	r0, [pc, #556]	; (8001934 <letter+0x17e4>)
 8001706:	f001 ffa6 	bl	8003656 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001710:	4888      	ldr	r0, [pc, #544]	; (8001934 <letter+0x17e4>)
 8001712:	f001 ffa0 	bl	8003656 <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171c:	4886      	ldr	r0, [pc, #536]	; (8001938 <letter+0x17e8>)
 800171e:	f001 ff9a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001722:	2002      	movs	r0, #2
 8001724:	f001 fd24 	bl	8003170 <HAL_Delay>
	}
	if(L == '6')
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b36      	cmp	r3, #54	; 0x36
 800172c:	d13c      	bne.n	80017a8 <letter+0x1658>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800172e:	2201      	movs	r2, #1
 8001730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001734:	4880      	ldr	r0, [pc, #512]	; (8001938 <letter+0x17e8>)
 8001736:	f001 ff8e 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001740:	487b      	ldr	r0, [pc, #492]	; (8001930 <letter+0x17e0>)
 8001742:	f001 ff88 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	4878      	ldr	r0, [pc, #480]	; (8001930 <letter+0x17e0>)
 800174e:	f001 ff82 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001752:	2201      	movs	r2, #1
 8001754:	2140      	movs	r1, #64	; 0x40
 8001756:	4876      	ldr	r0, [pc, #472]	; (8001930 <letter+0x17e0>)
 8001758:	f001 ff7d 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800175c:	2200      	movs	r2, #0
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	4873      	ldr	r0, [pc, #460]	; (8001930 <letter+0x17e0>)
 8001762:	f001 ff78 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176c:	4871      	ldr	r0, [pc, #452]	; (8001934 <letter+0x17e4>)
 800176e:	f001 ff72 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	486e      	ldr	r0, [pc, #440]	; (8001934 <letter+0x17e4>)
 800177a:	f001 ff6c 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	486b      	ldr	r0, [pc, #428]	; (8001934 <letter+0x17e4>)
 8001786:	f001 ff66 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001790:	4868      	ldr	r0, [pc, #416]	; (8001934 <letter+0x17e4>)
 8001792:	f001 ff60 	bl	8003656 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179c:	4866      	ldr	r0, [pc, #408]	; (8001938 <letter+0x17e8>)
 800179e:	f001 ff5a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f001 fce4 	bl	8003170 <HAL_Delay>
	}
	if(L == '7')
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b37      	cmp	r3, #55	; 0x37
 80017ac:	d13c      	bne.n	8001828 <letter+0x16d8>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b4:	4860      	ldr	r0, [pc, #384]	; (8001938 <letter+0x17e8>)
 80017b6:	f001 ff4e 	bl	8003656 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c0:	485b      	ldr	r0, [pc, #364]	; (8001930 <letter+0x17e0>)
 80017c2:	f001 ff48 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80017c6:	2201      	movs	r2, #1
 80017c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017cc:	4858      	ldr	r0, [pc, #352]	; (8001930 <letter+0x17e0>)
 80017ce:	f001 ff42 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80017d2:	2201      	movs	r2, #1
 80017d4:	2140      	movs	r1, #64	; 0x40
 80017d6:	4856      	ldr	r0, [pc, #344]	; (8001930 <letter+0x17e0>)
 80017d8:	f001 ff3d 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80017dc:	2200      	movs	r2, #0
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	4853      	ldr	r0, [pc, #332]	; (8001930 <letter+0x17e0>)
 80017e2:	f001 ff38 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ec:	4851      	ldr	r0, [pc, #324]	; (8001934 <letter+0x17e4>)
 80017ee:	f001 ff32 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f8:	484e      	ldr	r0, [pc, #312]	; (8001934 <letter+0x17e4>)
 80017fa:	f001 ff2c 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001804:	484b      	ldr	r0, [pc, #300]	; (8001934 <letter+0x17e4>)
 8001806:	f001 ff26 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001810:	4848      	ldr	r0, [pc, #288]	; (8001934 <letter+0x17e4>)
 8001812:	f001 ff20 	bl	8003656 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181c:	4846      	ldr	r0, [pc, #280]	; (8001938 <letter+0x17e8>)
 800181e:	f001 ff1a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001822:	2002      	movs	r0, #2
 8001824:	f001 fca4 	bl	8003170 <HAL_Delay>
	}
	if(L == '8')
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b38      	cmp	r3, #56	; 0x38
 800182c:	d13c      	bne.n	80018a8 <letter+0x1758>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001834:	4840      	ldr	r0, [pc, #256]	; (8001938 <letter+0x17e8>)
 8001836:	f001 ff0e 	bl	8003656 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001840:	483b      	ldr	r0, [pc, #236]	; (8001930 <letter+0x17e0>)
 8001842:	f001 ff08 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184c:	4838      	ldr	r0, [pc, #224]	; (8001930 <letter+0x17e0>)
 800184e:	f001 ff02 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001852:	2200      	movs	r2, #0
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	4836      	ldr	r0, [pc, #216]	; (8001930 <letter+0x17e0>)
 8001858:	f001 fefd 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800185c:	2201      	movs	r2, #1
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	4833      	ldr	r0, [pc, #204]	; (8001930 <letter+0x17e0>)
 8001862:	f001 fef8 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186c:	4831      	ldr	r0, [pc, #196]	; (8001934 <letter+0x17e4>)
 800186e:	f001 fef2 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001878:	482e      	ldr	r0, [pc, #184]	; (8001934 <letter+0x17e4>)
 800187a:	f001 feec 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001884:	482b      	ldr	r0, [pc, #172]	; (8001934 <letter+0x17e4>)
 8001886:	f001 fee6 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001890:	4828      	ldr	r0, [pc, #160]	; (8001934 <letter+0x17e4>)
 8001892:	f001 fee0 	bl	8003656 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189c:	4826      	ldr	r0, [pc, #152]	; (8001938 <letter+0x17e8>)
 800189e:	f001 feda 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018a2:	2002      	movs	r0, #2
 80018a4:	f001 fc64 	bl	8003170 <HAL_Delay>
	}
	if(L =='9')
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b39      	cmp	r3, #57	; 0x39
 80018ac:	d13c      	bne.n	8001928 <letter+0x17d8>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b4:	4820      	ldr	r0, [pc, #128]	; (8001938 <letter+0x17e8>)
 80018b6:	f001 fece 	bl	8003656 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	481b      	ldr	r0, [pc, #108]	; (8001930 <letter+0x17e0>)
 80018c2:	f001 fec8 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <letter+0x17e0>)
 80018ce:	f001 fec2 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80018d2:	2200      	movs	r2, #0
 80018d4:	2140      	movs	r1, #64	; 0x40
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <letter+0x17e0>)
 80018d8:	f001 febd 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80018dc:	2201      	movs	r2, #1
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	4813      	ldr	r0, [pc, #76]	; (8001930 <letter+0x17e0>)
 80018e2:	f001 feb8 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80018e6:	2201      	movs	r2, #1
 80018e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ec:	4811      	ldr	r0, [pc, #68]	; (8001934 <letter+0x17e4>)
 80018ee:	f001 feb2 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <letter+0x17e4>)
 80018fa:	f001 feac 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <letter+0x17e4>)
 8001906:	f001 fea6 	bl	8003656 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <letter+0x17e4>)
 8001912:	f001 fea0 	bl	8003656 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191c:	4806      	ldr	r0, [pc, #24]	; (8001938 <letter+0x17e8>)
 800191e:	f001 fe9a 	bl	8003656 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001922:	2002      	movs	r0, #2
 8001924:	f001 fc24 	bl	8003170 <HAL_Delay>
	}

 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40011000 	.word	0x40011000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001940:	f001 fbe4 	bl	800310c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001944:	f000 f89e 	bl	8001a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001948:	f000 f97e 	bl	8001c48 <MX_GPIO_Init>
  MX_TIM2_Init();
 800194c:	f000 f8dc 	bl	8001b08 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001950:	f000 f950 	bl	8001bf4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001954:	f000 f924 	bl	8001ba0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001958:	f003 f86c 	bl	8004a34 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 800195c:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <main+0xd8>)
 800195e:	2102      	movs	r1, #2
 8001960:	2008      	movs	r0, #8
 8001962:	f003 f9a5 	bl	8004cb0 <osMessageQueueNew>
 8001966:	4602      	mov	r2, r0
 8001968:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <main+0xdc>)
 800196a:	601a      	str	r2, [r3, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <main+0xe0>)
 800196e:	2102      	movs	r1, #2
 8001970:	2008      	movs	r0, #8
 8001972:	f003 f99d 	bl	8004cb0 <osMessageQueueNew>
 8001976:	4602      	mov	r2, r0
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <main+0xe4>)
 800197a:	601a      	str	r2, [r3, #0]

  /* creation of XbeeQueue */
  XbeeQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &XbeeQueue_attributes);
 800197c:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <main+0xe8>)
 800197e:	2102      	movs	r1, #2
 8001980:	2008      	movs	r0, #8
 8001982:	f003 f995 	bl	8004cb0 <osMessageQueueNew>
 8001986:	4602      	mov	r2, r0
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <main+0xec>)
 800198a:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 800198c:	4a27      	ldr	r2, [pc, #156]	; (8001a2c <main+0xf0>)
 800198e:	2102      	movs	r1, #2
 8001990:	2008      	movs	r0, #8
 8001992:	f003 f98d 	bl	8004cb0 <osMessageQueueNew>
 8001996:	4602      	mov	r2, r0
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <main+0xf4>)
 800199a:	601a      	str	r2, [r3, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 800199c:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <main+0xf8>)
 800199e:	2102      	movs	r1, #2
 80019a0:	2008      	movs	r0, #8
 80019a2:	f003 f985 	bl	8004cb0 <osMessageQueueNew>
 80019a6:	4602      	mov	r2, r0
 80019a8:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <main+0xfc>)
 80019aa:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <main+0x100>)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4823      	ldr	r0, [pc, #140]	; (8001a40 <main+0x104>)
 80019b2:	f003 f8a5 	bl	8004b00 <osThreadNew>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <main+0x108>)
 80019ba:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 80019bc:	4a22      	ldr	r2, [pc, #136]	; (8001a48 <main+0x10c>)
 80019be:	2100      	movs	r1, #0
 80019c0:	4822      	ldr	r0, [pc, #136]	; (8001a4c <main+0x110>)
 80019c2:	f003 f89d 	bl	8004b00 <osThreadNew>
 80019c6:	4602      	mov	r2, r0
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <main+0x114>)
 80019ca:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 80019cc:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <main+0x118>)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4821      	ldr	r0, [pc, #132]	; (8001a58 <main+0x11c>)
 80019d2:	f003 f895 	bl	8004b00 <osThreadNew>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <main+0x120>)
 80019da:	601a      	str	r2, [r3, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <main+0x124>)
 80019de:	2100      	movs	r1, #0
 80019e0:	4820      	ldr	r0, [pc, #128]	; (8001a64 <main+0x128>)
 80019e2:	f003 f88d 	bl	8004b00 <osThreadNew>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <main+0x12c>)
 80019ea:	601a      	str	r2, [r3, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 80019ec:	4a1f      	ldr	r2, [pc, #124]	; (8001a6c <main+0x130>)
 80019ee:	2100      	movs	r1, #0
 80019f0:	481f      	ldr	r0, [pc, #124]	; (8001a70 <main+0x134>)
 80019f2:	f003 f885 	bl	8004b00 <osThreadNew>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <main+0x138>)
 80019fa:	601a      	str	r2, [r3, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 80019fc:	4a1e      	ldr	r2, [pc, #120]	; (8001a78 <main+0x13c>)
 80019fe:	2100      	movs	r1, #0
 8001a00:	481e      	ldr	r0, [pc, #120]	; (8001a7c <main+0x140>)
 8001a02:	f003 f87d 	bl	8004b00 <osThreadNew>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <main+0x144>)
 8001a0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a0c:	f003 f844 	bl	8004a98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 8001a10:	e7fe      	b.n	8001a10 <main+0xd4>
 8001a12:	bf00      	nop
 8001a14:	08007724 	.word	0x08007724
 8001a18:	2000213c 	.word	0x2000213c
 8001a1c:	0800773c 	.word	0x0800773c
 8001a20:	200023b0 	.word	0x200023b0
 8001a24:	08007754 	.word	0x08007754
 8001a28:	200023a8 	.word	0x200023a8
 8001a2c:	0800776c 	.word	0x0800776c
 8001a30:	20002138 	.word	0x20002138
 8001a34:	08007784 	.word	0x08007784
 8001a38:	20002144 	.word	0x20002144
 8001a3c:	0800764c 	.word	0x0800764c
 8001a40:	080029bd 	.word	0x080029bd
 8001a44:	20002140 	.word	0x20002140
 8001a48:	08007670 	.word	0x08007670
 8001a4c:	080029e5 	.word	0x080029e5
 8001a50:	200023a4 	.word	0x200023a4
 8001a54:	08007694 	.word	0x08007694
 8001a58:	08002c71 	.word	0x08002c71
 8001a5c:	20002440 	.word	0x20002440
 8001a60:	080076b8 	.word	0x080076b8
 8001a64:	08002c81 	.word	0x08002c81
 8001a68:	20002388 	.word	0x20002388
 8001a6c:	080076dc 	.word	0x080076dc
 8001a70:	08002ce5 	.word	0x08002ce5
 8001a74:	200023ac 	.word	0x200023ac
 8001a78:	08007700 	.word	0x08007700
 8001a7c:	08002cf5 	.word	0x08002cf5
 8001a80:	200023fc 	.word	0x200023fc

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b090      	sub	sp, #64	; 0x40
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 0318 	add.w	r3, r7, #24
 8001a8e:	2228      	movs	r2, #40	; 0x28
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 fd59 	bl	800754a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aae:	2310      	movs	r3, #16
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001aba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fe01 	bl	80036cc <HAL_RCC_OscConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ad0:	f001 f92a 	bl	8002d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2102      	movs	r1, #2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 f86c 	bl	8003bcc <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001afa:	f001 f915 	bl	8002d28 <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	3740      	adds	r7, #64	; 0x40
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b4c:	4813      	ldr	r0, [pc, #76]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b4e:	f002 fa09 	bl	8003f64 <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b58:	f001 f8e6 	bl	8002d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b6a:	f002 fbef 	bl	800434c <HAL_TIM_ConfigClockSource>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b74:	f001 f8d8 	bl	8002d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b86:	f002 fdb5 	bl	80046f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b90:	f001 f8ca 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200023b4 	.word	0x200023b4

08001ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <MX_USART2_UART_Init+0x50>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART2_UART_Init+0x4c>)
 8001bd8:	f002 fdfc 	bl	80047d4 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001be2:	f001 f8a1 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20002400 	.word	0x20002400
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <MX_USART3_UART_Init+0x50>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_USART3_UART_Init+0x4c>)
 8001c2c:	f002 fdd2 	bl	80047d4 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c36:	f001 f877 	bl	8002d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200020c0 	.word	0x200020c0
 8001c44:	40004800 	.word	0x40004800

08001c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4e:	f107 0310 	add.w	r3, r7, #16
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5c:	4b5f      	ldr	r3, [pc, #380]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a5e      	ldr	r2, [pc, #376]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c62:	f043 0310 	orr.w	r3, r3, #16
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b5c      	ldr	r3, [pc, #368]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c7a:	f043 0320 	orr.w	r3, r3, #32
 8001c7e:	6193      	str	r3, [r2, #24]
 8001c80:	4b56      	ldr	r3, [pc, #344]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	4a52      	ldr	r2, [pc, #328]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6193      	str	r3, [r2, #24]
 8001c98:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	4b4d      	ldr	r3, [pc, #308]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <MX_GPIO_Init+0x194>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8001cc2:	4847      	ldr	r0, [pc, #284]	; (8001de0 <MX_GPIO_Init+0x198>)
 8001cc4:	f001 fcc7 	bl	8003656 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8001cce:	4845      	ldr	r0, [pc, #276]	; (8001de4 <MX_GPIO_Init+0x19c>)
 8001cd0:	f001 fcc1 	bl	8003656 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001cda:	4843      	ldr	r0, [pc, #268]	; (8001de8 <MX_GPIO_Init+0x1a0>)
 8001cdc:	f001 fcbb 	bl	8003656 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4841      	ldr	r0, [pc, #260]	; (8001dec <MX_GPIO_Init+0x1a4>)
 8001ce6:	f001 fcb6 	bl	8003656 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cf0:	4b3f      	ldr	r3, [pc, #252]	; (8001df0 <MX_GPIO_Init+0x1a8>)
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	483a      	ldr	r0, [pc, #232]	; (8001de8 <MX_GPIO_Init+0x1a0>)
 8001d00:	f001 fb38 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d04:	2307      	movs	r3, #7
 8001d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	4619      	mov	r1, r3
 8001d16:	4834      	ldr	r0, [pc, #208]	; (8001de8 <MX_GPIO_Init+0x1a0>)
 8001d18:	f001 fb2c 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001d1c:	f44f 53f9 	mov.w	r3, #7968	; 0x1f20
 8001d20:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	4619      	mov	r1, r3
 8001d34:	482a      	ldr	r0, [pc, #168]	; (8001de0 <MX_GPIO_Init+0x198>)
 8001d36:	f001 fb1d 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4825      	ldr	r0, [pc, #148]	; (8001de4 <MX_GPIO_Init+0x19c>)
 8001d4e:	f001 fb11 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001d52:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8001d56:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2302      	movs	r3, #2
 8001d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	4619      	mov	r1, r3
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <MX_GPIO_Init+0x19c>)
 8001d6c:	f001 fb02 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001d70:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001d74:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d82:	f107 0310 	add.w	r3, r7, #16
 8001d86:	4619      	mov	r1, r3
 8001d88:	4817      	ldr	r0, [pc, #92]	; (8001de8 <MX_GPIO_Init+0x1a0>)
 8001d8a:	f001 faf3 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d8e:	2304      	movs	r3, #4
 8001d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	4619      	mov	r1, r3
 8001da4:	4811      	ldr	r0, [pc, #68]	; (8001dec <MX_GPIO_Init+0x1a4>)
 8001da6:	f001 fae5 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001daa:	2340      	movs	r3, #64	; 0x40
 8001dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db6:	f107 0310 	add.w	r3, r7, #16
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <MX_GPIO_Init+0x19c>)
 8001dbe:	f001 fad9 	bl	8003374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2105      	movs	r1, #5
 8001dc6:	2028      	movs	r0, #40	; 0x28
 8001dc8:	f001 faa9 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dcc:	2028      	movs	r0, #40	; 0x28
 8001dce:	f001 fac2 	bl	8003356 <HAL_NVIC_EnableIRQ>

}
 8001dd2:	bf00      	nop
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40011400 	.word	0x40011400
 8001df0:	10110000 	.word	0x10110000

08001df4 <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8001df8:	2014      	movs	r0, #20
 8001dfa:	f001 f9b9 	bl	8003170 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e04:	4869      	ldr	r0, [pc, #420]	; (8001fac <commandToLCD+0x1b8>)
 8001e06:	f001 fc26 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e10:	4866      	ldr	r0, [pc, #408]	; (8001fac <commandToLCD+0x1b8>)
 8001e12:	f001 fc20 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e16:	2201      	movs	r2, #1
 8001e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e1c:	4863      	ldr	r0, [pc, #396]	; (8001fac <commandToLCD+0x1b8>)
 8001e1e:	f001 fc1a 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e28:	4861      	ldr	r0, [pc, #388]	; (8001fb0 <commandToLCD+0x1bc>)
 8001e2a:	f001 fc14 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e34:	485e      	ldr	r0, [pc, #376]	; (8001fb0 <commandToLCD+0x1bc>)
 8001e36:	f001 fc0e 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2140      	movs	r1, #64	; 0x40
 8001e3e:	485c      	ldr	r0, [pc, #368]	; (8001fb0 <commandToLCD+0x1bc>)
 8001e40:	f001 fc09 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8001e44:	2201      	movs	r2, #1
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	4859      	ldr	r0, [pc, #356]	; (8001fb0 <commandToLCD+0x1bc>)
 8001e4a:	f001 fc04 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e54:	4857      	ldr	r0, [pc, #348]	; (8001fb4 <commandToLCD+0x1c0>)
 8001e56:	f001 fbfe 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e60:	4854      	ldr	r0, [pc, #336]	; (8001fb4 <commandToLCD+0x1c0>)
 8001e62:	f001 fbf8 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6c:	4851      	ldr	r0, [pc, #324]	; (8001fb4 <commandToLCD+0x1c0>)
 8001e6e:	f001 fbf2 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e78:	484e      	ldr	r0, [pc, #312]	; (8001fb4 <commandToLCD+0x1c0>)
 8001e7a:	f001 fbec 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e84:	4849      	ldr	r0, [pc, #292]	; (8001fac <commandToLCD+0x1b8>)
 8001e86:	f001 fbe6 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001e8a:	2005      	movs	r0, #5
 8001e8c:	f001 f970 	bl	8003170 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e90:	2201      	movs	r2, #1
 8001e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e96:	4845      	ldr	r0, [pc, #276]	; (8001fac <commandToLCD+0x1b8>)
 8001e98:	f001 fbdd 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ea2:	4843      	ldr	r0, [pc, #268]	; (8001fb0 <commandToLCD+0x1bc>)
 8001ea4:	f001 fbd7 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eae:	4840      	ldr	r0, [pc, #256]	; (8001fb0 <commandToLCD+0x1bc>)
 8001eb0:	f001 fbd1 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	483d      	ldr	r0, [pc, #244]	; (8001fb0 <commandToLCD+0x1bc>)
 8001eba:	f001 fbcc 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	483b      	ldr	r0, [pc, #236]	; (8001fb0 <commandToLCD+0x1bc>)
 8001ec4:	f001 fbc7 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ece:	4839      	ldr	r0, [pc, #228]	; (8001fb4 <commandToLCD+0x1c0>)
 8001ed0:	f001 fbc1 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eda:	4836      	ldr	r0, [pc, #216]	; (8001fb4 <commandToLCD+0x1c0>)
 8001edc:	f001 fbbb 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee6:	4833      	ldr	r0, [pc, #204]	; (8001fb4 <commandToLCD+0x1c0>)
 8001ee8:	f001 fbb5 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001eec:	2200      	movs	r2, #0
 8001eee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef2:	4830      	ldr	r0, [pc, #192]	; (8001fb4 <commandToLCD+0x1c0>)
 8001ef4:	f001 fbaf 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001efe:	482b      	ldr	r0, [pc, #172]	; (8001fac <commandToLCD+0x1b8>)
 8001f00:	f001 fba9 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001f04:	2005      	movs	r0, #5
 8001f06:	f001 f933 	bl	8003170 <HAL_Delay>


	clear();
 8001f0a:	f000 f92b 	bl	8002164 <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f14:	4825      	ldr	r0, [pc, #148]	; (8001fac <commandToLCD+0x1b8>)
 8001f16:	f001 fb9e 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f20:	4823      	ldr	r0, [pc, #140]	; (8001fb0 <commandToLCD+0x1bc>)
 8001f22:	f001 fb98 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f2c:	4820      	ldr	r0, [pc, #128]	; (8001fb0 <commandToLCD+0x1bc>)
 8001f2e:	f001 fb92 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8001f32:	2201      	movs	r2, #1
 8001f34:	2140      	movs	r1, #64	; 0x40
 8001f36:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <commandToLCD+0x1bc>)
 8001f38:	f001 fb8d 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	481b      	ldr	r0, [pc, #108]	; (8001fb0 <commandToLCD+0x1bc>)
 8001f42:	f001 fb88 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f4c:	4819      	ldr	r0, [pc, #100]	; (8001fb4 <commandToLCD+0x1c0>)
 8001f4e:	f001 fb82 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f58:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <commandToLCD+0x1c0>)
 8001f5a:	f001 fb7c 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <commandToLCD+0x1c0>)
 8001f66:	f001 fb76 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f70:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <commandToLCD+0x1c0>)
 8001f72:	f001 fb70 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <commandToLCD+0x1b8>)
 8001f7e:	f001 fb6a 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001f82:	2005      	movs	r0, #5
 8001f84:	f001 f8f4 	bl	8003170 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <commandToLCD+0x1b8>)
 8001f90:	f001 fb61 	bl	8003656 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 8001f94:	bf00      	nop
 8001f96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <commandToLCD+0x1c0>)
 8001f9c:	f001 fb44 	bl	8003628 <HAL_GPIO_ReadPin>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d0f7      	beq.n	8001f96 <commandToLCD+0x1a2>
	{}
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40010800 	.word	0x40010800

08001fb8 <printPassword>:
void printPassword(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fc2:	4813      	ldr	r0, [pc, #76]	; (8002010 <printPassword+0x58>)
 8001fc4:	f001 fb47 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fce:	4810      	ldr	r0, [pc, #64]	; (8002010 <printPassword+0x58>)
 8001fd0:	f001 fb41 	bl	8003656 <HAL_GPIO_WritePin>
	letter('P');
 8001fd4:	2050      	movs	r0, #80	; 0x50
 8001fd6:	f7fe f8bb 	bl	8000150 <letter>
	letter('a');
 8001fda:	2061      	movs	r0, #97	; 0x61
 8001fdc:	f7fe f8b8 	bl	8000150 <letter>
	letter('s');
 8001fe0:	2073      	movs	r0, #115	; 0x73
 8001fe2:	f7fe f8b5 	bl	8000150 <letter>
	letter('s');
 8001fe6:	2073      	movs	r0, #115	; 0x73
 8001fe8:	f7fe f8b2 	bl	8000150 <letter>
	letter('w');
 8001fec:	2077      	movs	r0, #119	; 0x77
 8001fee:	f7fe f8af 	bl	8000150 <letter>
	letter('o');
 8001ff2:	206f      	movs	r0, #111	; 0x6f
 8001ff4:	f7fe f8ac 	bl	8000150 <letter>
	letter('r');
 8001ff8:	2072      	movs	r0, #114	; 0x72
 8001ffa:	f7fe f8a9 	bl	8000150 <letter>
	letter('d');
 8001ffe:	2064      	movs	r0, #100	; 0x64
 8002000:	f7fe f8a6 	bl	8000150 <letter>
	letter(':');
 8002004:	203a      	movs	r0, #58	; 0x3a
 8002006:	f7fe f8a3 	bl	8000150 <letter>
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40010c00 	.word	0x40010c00

08002014 <line1>:
void line1(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800201e:	4824      	ldr	r0, [pc, #144]	; (80020b0 <line1+0x9c>)
 8002020:	f001 fb19 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002024:	2200      	movs	r2, #0
 8002026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800202a:	4821      	ldr	r0, [pc, #132]	; (80020b0 <line1+0x9c>)
 800202c:	f001 fb13 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002030:	2201      	movs	r2, #1
 8002032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002036:	481e      	ldr	r0, [pc, #120]	; (80020b0 <line1+0x9c>)
 8002038:	f001 fb0d 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002042:	481c      	ldr	r0, [pc, #112]	; (80020b4 <line1+0xa0>)
 8002044:	f001 fb07 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800204e:	4819      	ldr	r0, [pc, #100]	; (80020b4 <line1+0xa0>)
 8002050:	f001 fb01 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002054:	2200      	movs	r2, #0
 8002056:	2140      	movs	r1, #64	; 0x40
 8002058:	4816      	ldr	r0, [pc, #88]	; (80020b4 <line1+0xa0>)
 800205a:	f001 fafc 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800205e:	2200      	movs	r2, #0
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <line1+0xa0>)
 8002064:	f001 faf7 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206e:	4812      	ldr	r0, [pc, #72]	; (80020b8 <line1+0xa4>)
 8002070:	f001 faf1 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002074:	2200      	movs	r2, #0
 8002076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800207a:	480f      	ldr	r0, [pc, #60]	; (80020b8 <line1+0xa4>)
 800207c:	f001 faeb 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002080:	2200      	movs	r2, #0
 8002082:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002086:	480c      	ldr	r0, [pc, #48]	; (80020b8 <line1+0xa4>)
 8002088:	f001 fae5 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002092:	4809      	ldr	r0, [pc, #36]	; (80020b8 <line1+0xa4>)
 8002094:	f001 fadf 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002098:	2200      	movs	r2, #0
 800209a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800209e:	4804      	ldr	r0, [pc, #16]	; (80020b0 <line1+0x9c>)
 80020a0:	f001 fad9 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80020a4:	2005      	movs	r0, #5
 80020a6:	f001 f863 	bl	8003170 <HAL_Delay>
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40010c00 	.word	0x40010c00
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40010800 	.word	0x40010800

080020bc <line2>:
void line2(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 80020c0:	2200      	movs	r2, #0
 80020c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020c6:	4824      	ldr	r0, [pc, #144]	; (8002158 <line2+0x9c>)
 80020c8:	f001 fac5 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d2:	4821      	ldr	r0, [pc, #132]	; (8002158 <line2+0x9c>)
 80020d4:	f001 fabf 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80020d8:	2201      	movs	r2, #1
 80020da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020de:	481e      	ldr	r0, [pc, #120]	; (8002158 <line2+0x9c>)
 80020e0:	f001 fab9 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 80020e4:	2200      	movs	r2, #0
 80020e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ea:	481c      	ldr	r0, [pc, #112]	; (800215c <line2+0xa0>)
 80020ec:	f001 fab3 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80020f0:	2200      	movs	r2, #0
 80020f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f6:	4819      	ldr	r0, [pc, #100]	; (800215c <line2+0xa0>)
 80020f8:	f001 faad 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80020fc:	2200      	movs	r2, #0
 80020fe:	2140      	movs	r1, #64	; 0x40
 8002100:	4816      	ldr	r0, [pc, #88]	; (800215c <line2+0xa0>)
 8002102:	f001 faa8 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002106:	2200      	movs	r2, #0
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	4814      	ldr	r0, [pc, #80]	; (800215c <line2+0xa0>)
 800210c:	f001 faa3 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002116:	4812      	ldr	r0, [pc, #72]	; (8002160 <line2+0xa4>)
 8002118:	f001 fa9d 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800211c:	2200      	movs	r2, #0
 800211e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002122:	480f      	ldr	r0, [pc, #60]	; (8002160 <line2+0xa4>)
 8002124:	f001 fa97 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800212e:	480c      	ldr	r0, [pc, #48]	; (8002160 <line2+0xa4>)
 8002130:	f001 fa91 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 8002134:	2201      	movs	r2, #1
 8002136:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800213a:	4809      	ldr	r0, [pc, #36]	; (8002160 <line2+0xa4>)
 800213c:	f001 fa8b 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002140:	2200      	movs	r2, #0
 8002142:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002146:	4804      	ldr	r0, [pc, #16]	; (8002158 <line2+0x9c>)
 8002148:	f001 fa85 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800214c:	2005      	movs	r0, #5
 800214e:	f001 f80f 	bl	8003170 <HAL_Delay>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40010c00 	.word	0x40010c00
 800215c:	40011000 	.word	0x40011000
 8002160:	40010800 	.word	0x40010800

08002164 <clear>:
void clear()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800216e:	4824      	ldr	r0, [pc, #144]	; (8002200 <clear+0x9c>)
 8002170:	f001 fa71 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002174:	2200      	movs	r2, #0
 8002176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800217a:	4821      	ldr	r0, [pc, #132]	; (8002200 <clear+0x9c>)
 800217c:	f001 fa6b 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002180:	2201      	movs	r2, #1
 8002182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002186:	481e      	ldr	r0, [pc, #120]	; (8002200 <clear+0x9c>)
 8002188:	f001 fa65 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 800218c:	2201      	movs	r2, #1
 800218e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002192:	481c      	ldr	r0, [pc, #112]	; (8002204 <clear+0xa0>)
 8002194:	f001 fa5f 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800219e:	4819      	ldr	r0, [pc, #100]	; (8002204 <clear+0xa0>)
 80021a0:	f001 fa59 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80021a4:	2200      	movs	r2, #0
 80021a6:	2140      	movs	r1, #64	; 0x40
 80021a8:	4816      	ldr	r0, [pc, #88]	; (8002204 <clear+0xa0>)
 80021aa:	f001 fa54 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80021ae:	2200      	movs	r2, #0
 80021b0:	2180      	movs	r1, #128	; 0x80
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <clear+0xa0>)
 80021b4:	f001 fa4f 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021be:	4812      	ldr	r0, [pc, #72]	; (8002208 <clear+0xa4>)
 80021c0:	f001 fa49 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80021c4:	2200      	movs	r2, #0
 80021c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ca:	480f      	ldr	r0, [pc, #60]	; (8002208 <clear+0xa4>)
 80021cc:	f001 fa43 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80021d0:	2200      	movs	r2, #0
 80021d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d6:	480c      	ldr	r0, [pc, #48]	; (8002208 <clear+0xa4>)
 80021d8:	f001 fa3d 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e2:	4809      	ldr	r0, [pc, #36]	; (8002208 <clear+0xa4>)
 80021e4:	f001 fa37 	bl	8003656 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ee:	4804      	ldr	r0, [pc, #16]	; (8002200 <clear+0x9c>)
 80021f0:	f001 fa31 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80021f4:	2005      	movs	r0, #5
 80021f6:	f000 ffbb 	bl	8003170 <HAL_Delay>
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40010c00 	.word	0x40010c00
 8002204:	40011000 	.word	0x40011000
 8002208:	40010800 	.word	0x40010800

0800220c <correct>:
void correct()
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002210:	2201      	movs	r2, #1
 8002212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002216:	4811      	ldr	r0, [pc, #68]	; (800225c <correct+0x50>)
 8002218:	f001 fa1d 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800221c:	2200      	movs	r2, #0
 800221e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002222:	480e      	ldr	r0, [pc, #56]	; (800225c <correct+0x50>)
 8002224:	f001 fa17 	bl	8003656 <HAL_GPIO_WritePin>
	letter('C');
 8002228:	2043      	movs	r0, #67	; 0x43
 800222a:	f7fd ff91 	bl	8000150 <letter>
	letter('o');
 800222e:	206f      	movs	r0, #111	; 0x6f
 8002230:	f7fd ff8e 	bl	8000150 <letter>
	letter('r');
 8002234:	2072      	movs	r0, #114	; 0x72
 8002236:	f7fd ff8b 	bl	8000150 <letter>
	letter('r');
 800223a:	2072      	movs	r0, #114	; 0x72
 800223c:	f7fd ff88 	bl	8000150 <letter>
	letter('e');
 8002240:	2065      	movs	r0, #101	; 0x65
 8002242:	f7fd ff85 	bl	8000150 <letter>
	letter('c');
 8002246:	2063      	movs	r0, #99	; 0x63
 8002248:	f7fd ff82 	bl	8000150 <letter>
	letter('t');
 800224c:	2074      	movs	r0, #116	; 0x74
 800224e:	f7fd ff7f 	bl	8000150 <letter>
	letter('!');
 8002252:	2021      	movs	r0, #33	; 0x21
 8002254:	f7fd ff7c 	bl	8000150 <letter>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40010c00 	.word	0x40010c00

08002260 <getVal>:
void getVal(int max)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	count = 0;
 8002268:	4b01      	ldr	r3, [pc, #4]	; (8002270 <getVal+0x10>)
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
	while(count<max)
 800226e:	e1ba      	b.n	80025e6 <getVal+0x386>
 8002270:	2000002c 	.word	0x2000002c
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 8002274:	2201      	movs	r2, #1
 8002276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227a:	48c0      	ldr	r0, [pc, #768]	; (800257c <getVal+0x31c>)
 800227c:	f001 f9eb 	bl	8003656 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002280:	2104      	movs	r1, #4
 8002282:	48bf      	ldr	r0, [pc, #764]	; (8002580 <getVal+0x320>)
 8002284:	f001 f9d0 	bl	8003628 <HAL_GPIO_ReadPin>
 8002288:	4603      	mov	r3, r0
 800228a:	2b01      	cmp	r3, #1
 800228c:	d118      	bne.n	80022c0 <getVal+0x60>
	  {
		  letter('1');
 800228e:	2031      	movs	r0, #49	; 0x31
 8002290:	f7fd ff5e 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002294:	bf00      	nop
 8002296:	2104      	movs	r1, #4
 8002298:	48b9      	ldr	r0, [pc, #740]	; (8002580 <getVal+0x320>)
 800229a:	f001 f9c5 	bl	8003628 <HAL_GPIO_ReadPin>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d0f8      	beq.n	8002296 <getVal+0x36>
		  {}
		  HAL_Delay(100);
 80022a4:	2064      	movs	r0, #100	; 0x64
 80022a6:	f000 ff63 	bl	8003170 <HAL_Delay>
		  val[count] = 1;
 80022aa:	4bb6      	ldr	r3, [pc, #728]	; (8002584 <getVal+0x324>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4ab6      	ldr	r2, [pc, #728]	; (8002588 <getVal+0x328>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80022b6:	4bb3      	ldr	r3, [pc, #716]	; (8002584 <getVal+0x324>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4ab1      	ldr	r2, [pc, #708]	; (8002584 <getVal+0x324>)
 80022be:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80022c0:	2102      	movs	r1, #2
 80022c2:	48af      	ldr	r0, [pc, #700]	; (8002580 <getVal+0x320>)
 80022c4:	f001 f9b0 	bl	8003628 <HAL_GPIO_ReadPin>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d118      	bne.n	8002300 <getVal+0xa0>
	  {
		  letter('2');
 80022ce:	2032      	movs	r0, #50	; 0x32
 80022d0:	f7fd ff3e 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80022d4:	bf00      	nop
 80022d6:	2102      	movs	r1, #2
 80022d8:	48a9      	ldr	r0, [pc, #676]	; (8002580 <getVal+0x320>)
 80022da:	f001 f9a5 	bl	8003628 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d0f8      	beq.n	80022d6 <getVal+0x76>
		  {}
		  HAL_Delay(100);
 80022e4:	2064      	movs	r0, #100	; 0x64
 80022e6:	f000 ff43 	bl	8003170 <HAL_Delay>
		  val[count] = 2;
 80022ea:	4ba6      	ldr	r3, [pc, #664]	; (8002584 <getVal+0x324>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4aa6      	ldr	r2, [pc, #664]	; (8002588 <getVal+0x328>)
 80022f0:	2102      	movs	r1, #2
 80022f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80022f6:	4ba3      	ldr	r3, [pc, #652]	; (8002584 <getVal+0x324>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3301      	adds	r3, #1
 80022fc:	4aa1      	ldr	r2, [pc, #644]	; (8002584 <getVal+0x324>)
 80022fe:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002300:	2101      	movs	r1, #1
 8002302:	489f      	ldr	r0, [pc, #636]	; (8002580 <getVal+0x320>)
 8002304:	f001 f990 	bl	8003628 <HAL_GPIO_ReadPin>
 8002308:	4603      	mov	r3, r0
 800230a:	2b01      	cmp	r3, #1
 800230c:	d118      	bne.n	8002340 <getVal+0xe0>
	  {
		  letter('3');
 800230e:	2033      	movs	r0, #51	; 0x33
 8002310:	f7fd ff1e 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002314:	bf00      	nop
 8002316:	2101      	movs	r1, #1
 8002318:	4899      	ldr	r0, [pc, #612]	; (8002580 <getVal+0x320>)
 800231a:	f001 f985 	bl	8003628 <HAL_GPIO_ReadPin>
 800231e:	4603      	mov	r3, r0
 8002320:	2b01      	cmp	r3, #1
 8002322:	d0f8      	beq.n	8002316 <getVal+0xb6>
		  {}
		  HAL_Delay(100);
 8002324:	2064      	movs	r0, #100	; 0x64
 8002326:	f000 ff23 	bl	8003170 <HAL_Delay>
		  val[count] = 3;
 800232a:	4b96      	ldr	r3, [pc, #600]	; (8002584 <getVal+0x324>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a96      	ldr	r2, [pc, #600]	; (8002588 <getVal+0x328>)
 8002330:	2103      	movs	r1, #3
 8002332:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8002336:	4b93      	ldr	r3, [pc, #588]	; (8002584 <getVal+0x324>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3301      	adds	r3, #1
 800233c:	4a91      	ldr	r2, [pc, #580]	; (8002584 <getVal+0x324>)
 800233e:	6013      	str	r3, [r2, #0]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002340:	2200      	movs	r2, #0
 8002342:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002346:	488d      	ldr	r0, [pc, #564]	; (800257c <getVal+0x31c>)
 8002348:	f001 f985 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 800234c:	2201      	movs	r2, #1
 800234e:	2104      	movs	r1, #4
 8002350:	488e      	ldr	r0, [pc, #568]	; (800258c <getVal+0x32c>)
 8002352:	f001 f980 	bl	8003656 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002356:	2104      	movs	r1, #4
 8002358:	4889      	ldr	r0, [pc, #548]	; (8002580 <getVal+0x320>)
 800235a:	f001 f965 	bl	8003628 <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d118      	bne.n	8002396 <getVal+0x136>
	  {
		  letter('4');
 8002364:	2034      	movs	r0, #52	; 0x34
 8002366:	f7fd fef3 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800236a:	bf00      	nop
 800236c:	2104      	movs	r1, #4
 800236e:	4884      	ldr	r0, [pc, #528]	; (8002580 <getVal+0x320>)
 8002370:	f001 f95a 	bl	8003628 <HAL_GPIO_ReadPin>
 8002374:	4603      	mov	r3, r0
 8002376:	2b01      	cmp	r3, #1
 8002378:	d0f8      	beq.n	800236c <getVal+0x10c>
		  {}
		  HAL_Delay(100);
 800237a:	2064      	movs	r0, #100	; 0x64
 800237c:	f000 fef8 	bl	8003170 <HAL_Delay>
		  val[count] = 4;
 8002380:	4b80      	ldr	r3, [pc, #512]	; (8002584 <getVal+0x324>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a80      	ldr	r2, [pc, #512]	; (8002588 <getVal+0x328>)
 8002386:	2104      	movs	r1, #4
 8002388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 800238c:	4b7d      	ldr	r3, [pc, #500]	; (8002584 <getVal+0x324>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	3301      	adds	r3, #1
 8002392:	4a7c      	ldr	r2, [pc, #496]	; (8002584 <getVal+0x324>)
 8002394:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002396:	2102      	movs	r1, #2
 8002398:	4879      	ldr	r0, [pc, #484]	; (8002580 <getVal+0x320>)
 800239a:	f001 f945 	bl	8003628 <HAL_GPIO_ReadPin>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d118      	bne.n	80023d6 <getVal+0x176>
	  {
		  letter('5');
 80023a4:	2035      	movs	r0, #53	; 0x35
 80023a6:	f7fd fed3 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80023aa:	bf00      	nop
 80023ac:	2102      	movs	r1, #2
 80023ae:	4874      	ldr	r0, [pc, #464]	; (8002580 <getVal+0x320>)
 80023b0:	f001 f93a 	bl	8003628 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d0f8      	beq.n	80023ac <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 80023ba:	2064      	movs	r0, #100	; 0x64
 80023bc:	f000 fed8 	bl	8003170 <HAL_Delay>
		  val[count] = 5;
 80023c0:	4b70      	ldr	r3, [pc, #448]	; (8002584 <getVal+0x324>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a70      	ldr	r2, [pc, #448]	; (8002588 <getVal+0x328>)
 80023c6:	2105      	movs	r1, #5
 80023c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80023cc:	4b6d      	ldr	r3, [pc, #436]	; (8002584 <getVal+0x324>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3301      	adds	r3, #1
 80023d2:	4a6c      	ldr	r2, [pc, #432]	; (8002584 <getVal+0x324>)
 80023d4:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80023d6:	2101      	movs	r1, #1
 80023d8:	4869      	ldr	r0, [pc, #420]	; (8002580 <getVal+0x320>)
 80023da:	f001 f925 	bl	8003628 <HAL_GPIO_ReadPin>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d118      	bne.n	8002416 <getVal+0x1b6>
	  {
		  letter('6');
 80023e4:	2036      	movs	r0, #54	; 0x36
 80023e6:	f7fd feb3 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80023ea:	bf00      	nop
 80023ec:	2101      	movs	r1, #1
 80023ee:	4864      	ldr	r0, [pc, #400]	; (8002580 <getVal+0x320>)
 80023f0:	f001 f91a 	bl	8003628 <HAL_GPIO_ReadPin>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d0f8      	beq.n	80023ec <getVal+0x18c>
		  {}
		  HAL_Delay(100);
 80023fa:	2064      	movs	r0, #100	; 0x64
 80023fc:	f000 feb8 	bl	8003170 <HAL_Delay>
		  val[count] = 6;
 8002400:	4b60      	ldr	r3, [pc, #384]	; (8002584 <getVal+0x324>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a60      	ldr	r2, [pc, #384]	; (8002588 <getVal+0x328>)
 8002406:	2106      	movs	r1, #6
 8002408:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 800240c:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <getVal+0x324>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a5c      	ldr	r2, [pc, #368]	; (8002584 <getVal+0x324>)
 8002414:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002416:	2200      	movs	r2, #0
 8002418:	2104      	movs	r1, #4
 800241a:	485c      	ldr	r0, [pc, #368]	; (800258c <getVal+0x32c>)
 800241c:	f001 f91b 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 8002420:	2201      	movs	r2, #1
 8002422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002426:	4855      	ldr	r0, [pc, #340]	; (800257c <getVal+0x31c>)
 8002428:	f001 f915 	bl	8003656 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 800242c:	2104      	movs	r1, #4
 800242e:	4854      	ldr	r0, [pc, #336]	; (8002580 <getVal+0x320>)
 8002430:	f001 f8fa 	bl	8003628 <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b01      	cmp	r3, #1
 8002438:	d118      	bne.n	800246c <getVal+0x20c>
	  {
		  letter('7');
 800243a:	2037      	movs	r0, #55	; 0x37
 800243c:	f7fd fe88 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002440:	bf00      	nop
 8002442:	2104      	movs	r1, #4
 8002444:	484e      	ldr	r0, [pc, #312]	; (8002580 <getVal+0x320>)
 8002446:	f001 f8ef 	bl	8003628 <HAL_GPIO_ReadPin>
 800244a:	4603      	mov	r3, r0
 800244c:	2b01      	cmp	r3, #1
 800244e:	d0f8      	beq.n	8002442 <getVal+0x1e2>
		  {}
		  HAL_Delay(100);
 8002450:	2064      	movs	r0, #100	; 0x64
 8002452:	f000 fe8d 	bl	8003170 <HAL_Delay>
		  val[count] = 7;
 8002456:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <getVal+0x324>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a4b      	ldr	r2, [pc, #300]	; (8002588 <getVal+0x328>)
 800245c:	2107      	movs	r1, #7
 800245e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <getVal+0x324>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	4a46      	ldr	r2, [pc, #280]	; (8002584 <getVal+0x324>)
 800246a:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800246c:	2102      	movs	r1, #2
 800246e:	4844      	ldr	r0, [pc, #272]	; (8002580 <getVal+0x320>)
 8002470:	f001 f8da 	bl	8003628 <HAL_GPIO_ReadPin>
 8002474:	4603      	mov	r3, r0
 8002476:	2b01      	cmp	r3, #1
 8002478:	d118      	bne.n	80024ac <getVal+0x24c>
	  {
		  letter('8');
 800247a:	2038      	movs	r0, #56	; 0x38
 800247c:	f7fd fe68 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002480:	bf00      	nop
 8002482:	2102      	movs	r1, #2
 8002484:	483e      	ldr	r0, [pc, #248]	; (8002580 <getVal+0x320>)
 8002486:	f001 f8cf 	bl	8003628 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d0f8      	beq.n	8002482 <getVal+0x222>
		  {}
		  HAL_Delay(100);
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	f000 fe6d 	bl	8003170 <HAL_Delay>
		  val[count] = 8;
 8002496:	4b3b      	ldr	r3, [pc, #236]	; (8002584 <getVal+0x324>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a3b      	ldr	r2, [pc, #236]	; (8002588 <getVal+0x328>)
 800249c:	2108      	movs	r1, #8
 800249e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <getVal+0x324>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	4a36      	ldr	r2, [pc, #216]	; (8002584 <getVal+0x324>)
 80024aa:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80024ac:	2101      	movs	r1, #1
 80024ae:	4834      	ldr	r0, [pc, #208]	; (8002580 <getVal+0x320>)
 80024b0:	f001 f8ba 	bl	8003628 <HAL_GPIO_ReadPin>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d118      	bne.n	80024ec <getVal+0x28c>
	  {
		  letter('9');
 80024ba:	2039      	movs	r0, #57	; 0x39
 80024bc:	f7fd fe48 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80024c0:	bf00      	nop
 80024c2:	2101      	movs	r1, #1
 80024c4:	482e      	ldr	r0, [pc, #184]	; (8002580 <getVal+0x320>)
 80024c6:	f001 f8af 	bl	8003628 <HAL_GPIO_ReadPin>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d0f8      	beq.n	80024c2 <getVal+0x262>
		  {}
		  HAL_Delay(100);
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f000 fe4d 	bl	8003170 <HAL_Delay>
		  val[count] = 9;
 80024d6:	4b2b      	ldr	r3, [pc, #172]	; (8002584 <getVal+0x324>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2b      	ldr	r2, [pc, #172]	; (8002588 <getVal+0x328>)
 80024dc:	2109      	movs	r1, #9
 80024de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80024e2:	4b28      	ldr	r3, [pc, #160]	; (8002584 <getVal+0x324>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <getVal+0x324>)
 80024ea:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 80024ec:	2200      	movs	r2, #0
 80024ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f2:	4822      	ldr	r0, [pc, #136]	; (800257c <getVal+0x31c>)
 80024f4:	f001 f8af 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024fe:	481f      	ldr	r0, [pc, #124]	; (800257c <getVal+0x31c>)
 8002500:	f001 f8a9 	bl	8003656 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002504:	2104      	movs	r1, #4
 8002506:	481e      	ldr	r0, [pc, #120]	; (8002580 <getVal+0x320>)
 8002508:	f001 f88e 	bl	8003628 <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d118      	bne.n	8002544 <getVal+0x2e4>
	  {
		  letter('*');
 8002512:	202a      	movs	r0, #42	; 0x2a
 8002514:	f7fd fe1c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002518:	bf00      	nop
 800251a:	2104      	movs	r1, #4
 800251c:	4818      	ldr	r0, [pc, #96]	; (8002580 <getVal+0x320>)
 800251e:	f001 f883 	bl	8003628 <HAL_GPIO_ReadPin>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d0f8      	beq.n	800251a <getVal+0x2ba>
		  {}
		  HAL_Delay(100);
 8002528:	2064      	movs	r0, #100	; 0x64
 800252a:	f000 fe21 	bl	8003170 <HAL_Delay>
		  val[count] = 10;
 800252e:	4b15      	ldr	r3, [pc, #84]	; (8002584 <getVal+0x324>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <getVal+0x328>)
 8002534:	210a      	movs	r1, #10
 8002536:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 800253a:	4b12      	ldr	r3, [pc, #72]	; (8002584 <getVal+0x324>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	4a10      	ldr	r2, [pc, #64]	; (8002584 <getVal+0x324>)
 8002542:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002544:	2102      	movs	r1, #2
 8002546:	480e      	ldr	r0, [pc, #56]	; (8002580 <getVal+0x320>)
 8002548:	f001 f86e 	bl	8003628 <HAL_GPIO_ReadPin>
 800254c:	4603      	mov	r3, r0
 800254e:	2b01      	cmp	r3, #1
 8002550:	d123      	bne.n	800259a <getVal+0x33a>
	  {
		  letter('0');
 8002552:	2030      	movs	r0, #48	; 0x30
 8002554:	f7fd fdfc 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002558:	bf00      	nop
 800255a:	2102      	movs	r1, #2
 800255c:	4808      	ldr	r0, [pc, #32]	; (8002580 <getVal+0x320>)
 800255e:	f001 f863 	bl	8003628 <HAL_GPIO_ReadPin>
 8002562:	4603      	mov	r3, r0
 8002564:	2b01      	cmp	r3, #1
 8002566:	d0f8      	beq.n	800255a <getVal+0x2fa>
		  {}
		  HAL_Delay(100);
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	f000 fe01 	bl	8003170 <HAL_Delay>
		  val[count] = 0;
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <getVal+0x324>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a05      	ldr	r2, [pc, #20]	; (8002588 <getVal+0x328>)
 8002574:	2100      	movs	r1, #0
 8002576:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800257a:	e009      	b.n	8002590 <getVal+0x330>
 800257c:	40011000 	.word	0x40011000
 8002580:	40010c00 	.word	0x40010c00
 8002584:	2000002c 	.word	0x2000002c
 8002588:	2000238c 	.word	0x2000238c
 800258c:	40011400 	.word	0x40011400
		  count++;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <getVal+0x39c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	4a19      	ldr	r2, [pc, #100]	; (80025fc <getVal+0x39c>)
 8002598:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800259a:	2101      	movs	r1, #1
 800259c:	4818      	ldr	r0, [pc, #96]	; (8002600 <getVal+0x3a0>)
 800259e:	f001 f843 	bl	8003628 <HAL_GPIO_ReadPin>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d118      	bne.n	80025da <getVal+0x37a>
	  {
		  letter('#');
 80025a8:	2023      	movs	r0, #35	; 0x23
 80025aa:	f7fd fdd1 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80025ae:	bf00      	nop
 80025b0:	2101      	movs	r1, #1
 80025b2:	4813      	ldr	r0, [pc, #76]	; (8002600 <getVal+0x3a0>)
 80025b4:	f001 f838 	bl	8003628 <HAL_GPIO_ReadPin>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d0f8      	beq.n	80025b0 <getVal+0x350>
		  {}
		  HAL_Delay(100);
 80025be:	2064      	movs	r0, #100	; 0x64
 80025c0:	f000 fdd6 	bl	8003170 <HAL_Delay>
		  val[count] = 11;
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <getVal+0x39c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <getVal+0x3a4>)
 80025ca:	210b      	movs	r1, #11
 80025cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80025d0:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <getVal+0x39c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <getVal+0x39c>)
 80025d8:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 80025da:	2200      	movs	r2, #0
 80025dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025e0:	4809      	ldr	r0, [pc, #36]	; (8002608 <getVal+0x3a8>)
 80025e2:	f001 f838 	bl	8003656 <HAL_GPIO_WritePin>
	while(count<max)
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <getVal+0x39c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	f73f ae41 	bgt.w	8002274 <getVal+0x14>
	}
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000002c 	.word	0x2000002c
 8002600:	40010c00 	.word	0x40010c00
 8002604:	2000238c 	.word	0x2000238c
 8002608:	40011000 	.word	0x40011000

0800260c <wrongPass>:
void wrongPass(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002610:	2201      	movs	r2, #1
 8002612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002616:	481a      	ldr	r0, [pc, #104]	; (8002680 <wrongPass+0x74>)
 8002618:	f001 f81d 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002622:	4817      	ldr	r0, [pc, #92]	; (8002680 <wrongPass+0x74>)
 8002624:	f001 f817 	bl	8003656 <HAL_GPIO_WritePin>
	letter('W');
 8002628:	2057      	movs	r0, #87	; 0x57
 800262a:	f7fd fd91 	bl	8000150 <letter>
	letter('r');
 800262e:	2072      	movs	r0, #114	; 0x72
 8002630:	f7fd fd8e 	bl	8000150 <letter>
	letter('o');
 8002634:	206f      	movs	r0, #111	; 0x6f
 8002636:	f7fd fd8b 	bl	8000150 <letter>
	letter('n');
 800263a:	206e      	movs	r0, #110	; 0x6e
 800263c:	f7fd fd88 	bl	8000150 <letter>
	letter('g');
 8002640:	2067      	movs	r0, #103	; 0x67
 8002642:	f7fd fd85 	bl	8000150 <letter>
	letter(' ');
 8002646:	2020      	movs	r0, #32
 8002648:	f7fd fd82 	bl	8000150 <letter>
	letter('P');
 800264c:	2050      	movs	r0, #80	; 0x50
 800264e:	f7fd fd7f 	bl	8000150 <letter>
	letter('a');
 8002652:	2061      	movs	r0, #97	; 0x61
 8002654:	f7fd fd7c 	bl	8000150 <letter>
	letter('s');
 8002658:	2073      	movs	r0, #115	; 0x73
 800265a:	f7fd fd79 	bl	8000150 <letter>
	letter('s');
 800265e:	2073      	movs	r0, #115	; 0x73
 8002660:	f7fd fd76 	bl	8000150 <letter>
	letter('w');
 8002664:	2077      	movs	r0, #119	; 0x77
 8002666:	f7fd fd73 	bl	8000150 <letter>
	letter('o');
 800266a:	206f      	movs	r0, #111	; 0x6f
 800266c:	f7fd fd70 	bl	8000150 <letter>
	letter('r');
 8002670:	2072      	movs	r0, #114	; 0x72
 8002672:	f7fd fd6d 	bl	8000150 <letter>
	letter('d');
 8002676:	2064      	movs	r0, #100	; 0x64
 8002678:	f7fd fd6a 	bl	8000150 <letter>
}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40010c00 	.word	0x40010c00

08002684 <green>:
void green(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800268e:	4816      	ldr	r0, [pc, #88]	; (80026e8 <green+0x64>)
 8002690:	f000 ffe1 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800269a:	4813      	ldr	r0, [pc, #76]	; (80026e8 <green+0x64>)
 800269c:	f000 ffdb 	bl	8003656 <HAL_GPIO_WritePin>
	letter('G');
 80026a0:	2047      	movs	r0, #71	; 0x47
 80026a2:	f7fd fd55 	bl	8000150 <letter>
	letter('r');
 80026a6:	2072      	movs	r0, #114	; 0x72
 80026a8:	f7fd fd52 	bl	8000150 <letter>
	letter('e');
 80026ac:	2065      	movs	r0, #101	; 0x65
 80026ae:	f7fd fd4f 	bl	8000150 <letter>
	letter('e');
 80026b2:	2065      	movs	r0, #101	; 0x65
 80026b4:	f7fd fd4c 	bl	8000150 <letter>
	letter('n');
 80026b8:	206e      	movs	r0, #110	; 0x6e
 80026ba:	f7fd fd49 	bl	8000150 <letter>
	letter(' ');
 80026be:	2020      	movs	r0, #32
 80026c0:	f7fd fd46 	bl	8000150 <letter>
	letter('1');
 80026c4:	2031      	movs	r0, #49	; 0x31
 80026c6:	f7fd fd43 	bl	8000150 <letter>
	letter('-');
 80026ca:	202d      	movs	r0, #45	; 0x2d
 80026cc:	f7fd fd40 	bl	8000150 <letter>
	letter('3');
 80026d0:	2033      	movs	r0, #51	; 0x33
 80026d2:	f7fd fd3d 	bl	8000150 <letter>
	letter(':');
 80026d6:	203a      	movs	r0, #58	; 0x3a
 80026d8:	f7fd fd3a 	bl	8000150 <letter>

	getVal(1);
 80026dc:	2001      	movs	r0, #1
 80026de:	f7ff fdbf 	bl	8002260 <getVal>
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40010c00 	.word	0x40010c00

080026ec <timer>:

void timer(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80026f0:	2201      	movs	r2, #1
 80026f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f6:	481c      	ldr	r0, [pc, #112]	; (8002768 <timer+0x7c>)
 80026f8:	f000 ffad 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002702:	4819      	ldr	r0, [pc, #100]	; (8002768 <timer+0x7c>)
 8002704:	f000 ffa7 	bl	8003656 <HAL_GPIO_WritePin>

	letter('T');
 8002708:	2054      	movs	r0, #84	; 0x54
 800270a:	f7fd fd21 	bl	8000150 <letter>
	letter('i');
 800270e:	2069      	movs	r0, #105	; 0x69
 8002710:	f7fd fd1e 	bl	8000150 <letter>
	letter('m');
 8002714:	206d      	movs	r0, #109	; 0x6d
 8002716:	f7fd fd1b 	bl	8000150 <letter>
	letter('e');
 800271a:	2065      	movs	r0, #101	; 0x65
 800271c:	f7fd fd18 	bl	8000150 <letter>
	letter(' ');
 8002720:	2020      	movs	r0, #32
 8002722:	f7fd fd15 	bl	8000150 <letter>
	letter('0');
 8002726:	2030      	movs	r0, #48	; 0x30
 8002728:	f7fd fd12 	bl	8000150 <letter>
	letter('0');
 800272c:	2030      	movs	r0, #48	; 0x30
 800272e:	f7fd fd0f 	bl	8000150 <letter>
	letter('-');
 8002732:	202d      	movs	r0, #45	; 0x2d
 8002734:	f7fd fd0c 	bl	8000150 <letter>
	letter('6');
 8002738:	2036      	movs	r0, #54	; 0x36
 800273a:	f7fd fd09 	bl	8000150 <letter>
	letter('0');
 800273e:	2030      	movs	r0, #48	; 0x30
 8002740:	f7fd fd06 	bl	8000150 <letter>
	letter('m');
 8002744:	206d      	movs	r0, #109	; 0x6d
 8002746:	f7fd fd03 	bl	8000150 <letter>
	letter('i');
 800274a:	2069      	movs	r0, #105	; 0x69
 800274c:	f7fd fd00 	bl	8000150 <letter>
	letter('n');
 8002750:	206e      	movs	r0, #110	; 0x6e
 8002752:	f7fd fcfd 	bl	8000150 <letter>
	letter(':');
 8002756:	203a      	movs	r0, #58	; 0x3a
 8002758:	f7fd fcfa 	bl	8000150 <letter>

	getVal(2);
 800275c:	2002      	movs	r0, #2
 800275e:	f7ff fd7f 	bl	8002260 <getVal>
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40010c00 	.word	0x40010c00

0800276c <quit>:

void quit(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002776:	4822      	ldr	r0, [pc, #136]	; (8002800 <quit+0x94>)
 8002778:	f000 ff6d 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002782:	481f      	ldr	r0, [pc, #124]	; (8002800 <quit+0x94>)
 8002784:	f000 ff67 	bl	8003656 <HAL_GPIO_WritePin>

	letter('Q');
 8002788:	2051      	movs	r0, #81	; 0x51
 800278a:	f7fd fce1 	bl	8000150 <letter>
	letter('u');
 800278e:	2075      	movs	r0, #117	; 0x75
 8002790:	f7fd fcde 	bl	8000150 <letter>
	letter('i');
 8002794:	2069      	movs	r0, #105	; 0x69
 8002796:	f7fd fcdb 	bl	8000150 <letter>
	letter('t');
 800279a:	2074      	movs	r0, #116	; 0x74
 800279c:	f7fd fcd8 	bl	8000150 <letter>
	letter('?');
 80027a0:	203f      	movs	r0, #63	; 0x3f
 80027a2:	f7fd fcd5 	bl	8000150 <letter>
	letter(' ');
 80027a6:	2020      	movs	r0, #32
 80027a8:	f7fd fcd2 	bl	8000150 <letter>
	letter('y');
 80027ac:	2079      	movs	r0, #121	; 0x79
 80027ae:	f7fd fccf 	bl	8000150 <letter>
	letter('e');
 80027b2:	2065      	movs	r0, #101	; 0x65
 80027b4:	f7fd fccc 	bl	8000150 <letter>
	letter('s');
 80027b8:	2073      	movs	r0, #115	; 0x73
 80027ba:	f7fd fcc9 	bl	8000150 <letter>
	letter('-');
 80027be:	202d      	movs	r0, #45	; 0x2d
 80027c0:	f7fd fcc6 	bl	8000150 <letter>
	letter('1');
 80027c4:	2031      	movs	r0, #49	; 0x31
 80027c6:	f7fd fcc3 	bl	8000150 <letter>
	letter(' ');
 80027ca:	2020      	movs	r0, #32
 80027cc:	f7fd fcc0 	bl	8000150 <letter>
	letter('n');
 80027d0:	206e      	movs	r0, #110	; 0x6e
 80027d2:	f7fd fcbd 	bl	8000150 <letter>
	letter('o');
 80027d6:	206f      	movs	r0, #111	; 0x6f
 80027d8:	f7fd fcba 	bl	8000150 <letter>
	letter('-');
 80027dc:	202d      	movs	r0, #45	; 0x2d
 80027de:	f7fd fcb7 	bl	8000150 <letter>
	letter('0');
 80027e2:	2030      	movs	r0, #48	; 0x30
 80027e4:	f7fd fcb4 	bl	8000150 <letter>

	line2();
 80027e8:	f7ff fc68 	bl	80020bc <line2>
	getVal(1);
 80027ec:	2001      	movs	r0, #1
 80027ee:	f7ff fd37 	bl	8002260 <getVal>
	val[6] = val[0];
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <quit+0x98>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a03      	ldr	r2, [pc, #12]	; (8002804 <quit+0x98>)
 80027f8:	6193      	str	r3, [r2, #24]
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40010c00 	.word	0x40010c00
 8002804:	2000238c 	.word	0x2000238c

08002808 <onOffTime>:
void onOffTime(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800280c:	2201      	movs	r2, #1
 800280e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002812:	4820      	ldr	r0, [pc, #128]	; (8002894 <onOffTime+0x8c>)
 8002814:	f000 ff1f 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800281e:	481d      	ldr	r0, [pc, #116]	; (8002894 <onOffTime+0x8c>)
 8002820:	f000 ff19 	bl	8003656 <HAL_GPIO_WritePin>
	letter('0');
 8002824:	2030      	movs	r0, #48	; 0x30
 8002826:	f7fd fc93 	bl	8000150 <letter>
	letter('-');
 800282a:	202d      	movs	r0, #45	; 0x2d
 800282c:	f7fd fc90 	bl	8000150 <letter>
	letter('O');
 8002830:	204f      	movs	r0, #79	; 0x4f
 8002832:	f7fd fc8d 	bl	8000150 <letter>
	letter('n');
 8002836:	206e      	movs	r0, #110	; 0x6e
 8002838:	f7fd fc8a 	bl	8000150 <letter>
	letter('/');
 800283c:	202f      	movs	r0, #47	; 0x2f
 800283e:	f7fd fc87 	bl	8000150 <letter>
	letter('O');
 8002842:	204f      	movs	r0, #79	; 0x4f
 8002844:	f7fd fc84 	bl	8000150 <letter>
	letter('f');
 8002848:	2066      	movs	r0, #102	; 0x66
 800284a:	f7fd fc81 	bl	8000150 <letter>
	letter('f');
 800284e:	2066      	movs	r0, #102	; 0x66
 8002850:	f7fd fc7e 	bl	8000150 <letter>
	letter(' ');
 8002854:	2020      	movs	r0, #32
 8002856:	f7fd fc7b 	bl	8000150 <letter>
	letter('1');
 800285a:	2031      	movs	r0, #49	; 0x31
 800285c:	f7fd fc78 	bl	8000150 <letter>
	letter('-');
 8002860:	202d      	movs	r0, #45	; 0x2d
 8002862:	f7fd fc75 	bl	8000150 <letter>
	letter('T');
 8002866:	2054      	movs	r0, #84	; 0x54
 8002868:	f7fd fc72 	bl	8000150 <letter>
	letter('i');
 800286c:	2069      	movs	r0, #105	; 0x69
 800286e:	f7fd fc6f 	bl	8000150 <letter>
	letter('m');
 8002872:	206d      	movs	r0, #109	; 0x6d
 8002874:	f7fd fc6c 	bl	8000150 <letter>
	letter('e');
 8002878:	2065      	movs	r0, #101	; 0x65
 800287a:	f7fd fc69 	bl	8000150 <letter>
	letter('r');
 800287e:	2072      	movs	r0, #114	; 0x72
 8002880:	f7fd fc66 	bl	8000150 <letter>

	line2();
 8002884:	f7ff fc1a 	bl	80020bc <line2>
	getVal(1);
 8002888:	2001      	movs	r0, #1
 800288a:	f7ff fce9 	bl	8002260 <getVal>
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40010c00 	.word	0x40010c00

08002898 <onOff>:
void onOff(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800289c:	2201      	movs	r2, #1
 800289e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028a2:	4817      	ldr	r0, [pc, #92]	; (8002900 <onOff+0x68>)
 80028a4:	f000 fed7 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ae:	4814      	ldr	r0, [pc, #80]	; (8002900 <onOff+0x68>)
 80028b0:	f000 fed1 	bl	8003656 <HAL_GPIO_WritePin>
	letter('0');
 80028b4:	2030      	movs	r0, #48	; 0x30
 80028b6:	f7fd fc4b 	bl	8000150 <letter>
	letter('-');
 80028ba:	202d      	movs	r0, #45	; 0x2d
 80028bc:	f7fd fc48 	bl	8000150 <letter>
	letter('O');
 80028c0:	204f      	movs	r0, #79	; 0x4f
 80028c2:	f7fd fc45 	bl	8000150 <letter>
	letter('n');
 80028c6:	206e      	movs	r0, #110	; 0x6e
 80028c8:	f7fd fc42 	bl	8000150 <letter>
	letter(' ');
 80028cc:	2020      	movs	r0, #32
 80028ce:	f7fd fc3f 	bl	8000150 <letter>
	letter('1');
 80028d2:	2031      	movs	r0, #49	; 0x31
 80028d4:	f7fd fc3c 	bl	8000150 <letter>
	letter('-');
 80028d8:	202d      	movs	r0, #45	; 0x2d
 80028da:	f7fd fc39 	bl	8000150 <letter>
	letter('O');
 80028de:	204f      	movs	r0, #79	; 0x4f
 80028e0:	f7fd fc36 	bl	8000150 <letter>
	letter('f');
 80028e4:	2066      	movs	r0, #102	; 0x66
 80028e6:	f7fd fc33 	bl	8000150 <letter>
	letter('f');
 80028ea:	2066      	movs	r0, #102	; 0x66
 80028ec:	f7fd fc30 	bl	8000150 <letter>
	letter(':');
 80028f0:	203a      	movs	r0, #58	; 0x3a
 80028f2:	f7fd fc2d 	bl	8000150 <letter>

	getVal(1);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff fcb2 	bl	8002260 <getVal>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40010c00 	.word	0x40010c00

08002904 <error>:
void error(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002908:	2201      	movs	r2, #1
 800290a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800290e:	482a      	ldr	r0, [pc, #168]	; (80029b8 <error+0xb4>)
 8002910:	f000 fea1 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002914:	2200      	movs	r2, #0
 8002916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800291a:	4827      	ldr	r0, [pc, #156]	; (80029b8 <error+0xb4>)
 800291c:	f000 fe9b 	bl	8003656 <HAL_GPIO_WritePin>

	letter('E');
 8002920:	2045      	movs	r0, #69	; 0x45
 8002922:	f7fd fc15 	bl	8000150 <letter>
	letter('r');
 8002926:	2072      	movs	r0, #114	; 0x72
 8002928:	f7fd fc12 	bl	8000150 <letter>
	letter('r');
 800292c:	2072      	movs	r0, #114	; 0x72
 800292e:	f7fd fc0f 	bl	8000150 <letter>
	letter('o');
 8002932:	206f      	movs	r0, #111	; 0x6f
 8002934:	f7fd fc0c 	bl	8000150 <letter>
	letter('r');
 8002938:	2072      	movs	r0, #114	; 0x72
 800293a:	f7fd fc09 	bl	8000150 <letter>
	letter(',');
 800293e:	202c      	movs	r0, #44	; 0x2c
 8002940:	f7fd fc06 	bl	8000150 <letter>
	letter(' ');
 8002944:	2020      	movs	r0, #32
 8002946:	f7fd fc03 	bl	8000150 <letter>
	letter('I');
 800294a:	2049      	movs	r0, #73	; 0x49
 800294c:	f7fd fc00 	bl	8000150 <letter>
	letter('n');
 8002950:	206e      	movs	r0, #110	; 0x6e
 8002952:	f7fd fbfd 	bl	8000150 <letter>
	letter('v');
 8002956:	2076      	movs	r0, #118	; 0x76
 8002958:	f7fd fbfa 	bl	8000150 <letter>
	letter('a');
 800295c:	2061      	movs	r0, #97	; 0x61
 800295e:	f7fd fbf7 	bl	8000150 <letter>
	letter('l');
 8002962:	206c      	movs	r0, #108	; 0x6c
 8002964:	f7fd fbf4 	bl	8000150 <letter>
	letter('i');
 8002968:	2069      	movs	r0, #105	; 0x69
 800296a:	f7fd fbf1 	bl	8000150 <letter>
	letter('d');
 800296e:	2064      	movs	r0, #100	; 0x64
 8002970:	f7fd fbee 	bl	8000150 <letter>

	line2();
 8002974:	f7ff fba2 	bl	80020bc <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800297e:	480e      	ldr	r0, [pc, #56]	; (80029b8 <error+0xb4>)
 8002980:	f000 fe69 	bl	8003656 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002984:	2200      	movs	r2, #0
 8002986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800298a:	480b      	ldr	r0, [pc, #44]	; (80029b8 <error+0xb4>)
 800298c:	f000 fe63 	bl	8003656 <HAL_GPIO_WritePin>
	letter('N');
 8002990:	204e      	movs	r0, #78	; 0x4e
 8002992:	f7fd fbdd 	bl	8000150 <letter>
	letter('u');
 8002996:	2075      	movs	r0, #117	; 0x75
 8002998:	f7fd fbda 	bl	8000150 <letter>
	letter('m');
 800299c:	206d      	movs	r0, #109	; 0x6d
 800299e:	f7fd fbd7 	bl	8000150 <letter>
	letter('b');
 80029a2:	2062      	movs	r0, #98	; 0x62
 80029a4:	f7fd fbd4 	bl	8000150 <letter>
	letter('e');
 80029a8:	2065      	movs	r0, #101	; 0x65
 80029aa:	f7fd fbd1 	bl	8000150 <letter>
	letter('r');
 80029ae:	2072      	movs	r0, #114	; 0x72
 80029b0:	f7fd fbce 	bl	8000150 <letter>
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40010c00 	.word	0x40010c00

080029bc <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 80029c4:	f000 f9b4 	bl	8002d30 <initializeNodes>
	HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);
 80029c8:	221a      	movs	r2, #26
 80029ca:	4904      	ldr	r1, [pc, #16]	; (80029dc <StartXbeeTask+0x20>)
 80029cc:	4804      	ldr	r0, [pc, #16]	; (80029e0 <StartXbeeTask+0x24>)
 80029ce:	f001 ff4e 	bl	800486e <HAL_UART_Receive_IT>
  for(;;)
  {

    osDelay(1);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f002 f93e 	bl	8004c54 <osDelay>
 80029d8:	e7fb      	b.n	80029d2 <StartXbeeTask+0x16>
 80029da:	bf00      	nop
 80029dc:	20002104 	.word	0x20002104
 80029e0:	200020c0 	.word	0x200020c0

080029e4 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */
  while(1)
  {
	  val[6] = 0;
 80029ec:	4b9c      	ldr	r3, [pc, #624]	; (8002c60 <StartUserTask+0x27c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	619a      	str	r2, [r3, #24]
	  commandToLCD();
 80029f2:	f7ff f9ff 	bl	8001df4 <commandToLCD>
	  printPassword();
 80029f6:	f7ff fadf 	bl	8001fb8 <printPassword>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 80029fa:	2200      	movs	r2, #0
 80029fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a00:	4898      	ldr	r0, [pc, #608]	; (8002c64 <StartUserTask+0x280>)
 8002a02:	f000 fe28 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002a06:	2200      	movs	r2, #0
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4897      	ldr	r0, [pc, #604]	; (8002c68 <StartUserTask+0x284>)
 8002a0c:	f000 fe23 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002a10:	2200      	movs	r2, #0
 8002a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a16:	4893      	ldr	r0, [pc, #588]	; (8002c64 <StartUserTask+0x280>)
 8002a18:	f000 fe1d 	bl	8003656 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a22:	4890      	ldr	r0, [pc, #576]	; (8002c64 <StartUserTask+0x280>)
 8002a24:	f000 fe17 	bl	8003656 <HAL_GPIO_WritePin>

	  getVal(4);
 8002a28:	2004      	movs	r0, #4
 8002a2a:	f7ff fc19 	bl	8002260 <getVal>
	  if(val[0] == 1)
 8002a2e:	4b8c      	ldr	r3, [pc, #560]	; (8002c60 <StartUserTask+0x27c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	f040 810b 	bne.w	8002c4e <StartUserTask+0x26a>
	  {
		  if(val[1] == 2)
 8002a38:	4b89      	ldr	r3, [pc, #548]	; (8002c60 <StartUserTask+0x27c>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	f040 80fd 	bne.w	8002c3c <StartUserTask+0x258>
		  {
			  if(val[2] == 3)
 8002a42:	4b87      	ldr	r3, [pc, #540]	; (8002c60 <StartUserTask+0x27c>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	f040 80ef 	bne.w	8002c2a <StartUserTask+0x246>
			  {
				  if(val[3] == 4)
 8002a4c:	4b84      	ldr	r3, [pc, #528]	; (8002c60 <StartUserTask+0x27c>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	f040 80e1 	bne.w	8002c18 <StartUserTask+0x234>
				  {
					  clear();
 8002a56:	f7ff fb85 	bl	8002164 <clear>
					  line1();
 8002a5a:	f7ff fadb 	bl	8002014 <line1>
					  correct();
 8002a5e:	f7ff fbd5 	bl	800220c <correct>
					  HAL_Delay(1500);
 8002a62:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a66:	f000 fb83 	bl	8003170 <HAL_Delay>
					  while(val[6] == 0)
 8002a6a:	e0cf      	b.n	8002c0c <StartUserTask+0x228>
					  {
						  commandToLCD();
 8002a6c:	f7ff f9c2 	bl	8001df4 <commandToLCD>
						  onOffTime();
 8002a70:	f7ff feca 	bl	8002808 <onOffTime>
						  while(val[0]< 0 || val[0] > 1)
 8002a74:	e00b      	b.n	8002a8e <StartUserTask+0xaa>
						  {
							  commandToLCD();
 8002a76:	f7ff f9bd 	bl	8001df4 <commandToLCD>
							  error();
 8002a7a:	f7ff ff43 	bl	8002904 <error>
							  HAL_Delay(1500);
 8002a7e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a82:	f000 fb75 	bl	8003170 <HAL_Delay>
							  commandToLCD();
 8002a86:	f7ff f9b5 	bl	8001df4 <commandToLCD>
							  onOffTime();
 8002a8a:	f7ff febd 	bl	8002808 <onOffTime>
						  while(val[0]< 0 || val[0] > 1)
 8002a8e:	4b74      	ldr	r3, [pc, #464]	; (8002c60 <StartUserTask+0x27c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	dbef      	blt.n	8002a76 <StartUserTask+0x92>
 8002a96:	4b72      	ldr	r3, [pc, #456]	; (8002c60 <StartUserTask+0x27c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	dceb      	bgt.n	8002a76 <StartUserTask+0x92>
						  }
						  if(val[0] == 0)
 8002a9e:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <StartUserTask+0x27c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d14f      	bne.n	8002b46 <StartUserTask+0x162>
						  {
							  commandToLCD();
 8002aa6:	f7ff f9a5 	bl	8001df4 <commandToLCD>
							  green();
 8002aaa:	f7ff fdeb 	bl	8002684 <green>
							  while(val[0]< 1 || val[0] > 3)
 8002aae:	e00b      	b.n	8002ac8 <StartUserTask+0xe4>
							  {
								  commandToLCD();
 8002ab0:	f7ff f9a0 	bl	8001df4 <commandToLCD>
								  error();
 8002ab4:	f7ff ff26 	bl	8002904 <error>
								  HAL_Delay(1500);
 8002ab8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002abc:	f000 fb58 	bl	8003170 <HAL_Delay>
								  commandToLCD();
 8002ac0:	f7ff f998 	bl	8001df4 <commandToLCD>
								  green();
 8002ac4:	f7ff fdde 	bl	8002684 <green>
							  while(val[0]< 1 || val[0] > 3)
 8002ac8:	4b65      	ldr	r3, [pc, #404]	; (8002c60 <StartUserTask+0x27c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	ddef      	ble.n	8002ab0 <StartUserTask+0xcc>
 8002ad0:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <StartUserTask+0x27c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	dceb      	bgt.n	8002ab0 <StartUserTask+0xcc>
							  }
							  indc = val[0];///do something with val[0] aka green #
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <StartUserTask+0x27c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a63      	ldr	r2, [pc, #396]	; (8002c6c <StartUserTask+0x288>)
 8002ade:	6013      	str	r3, [r2, #0]
							  line2();
 8002ae0:	f7ff faec 	bl	80020bc <line2>
							  onOff();
 8002ae4:	f7ff fed8 	bl	8002898 <onOff>
							  while(val[0]< 0 || val[0] > 1)
 8002ae8:	e00b      	b.n	8002b02 <StartUserTask+0x11e>
							  {
								  commandToLCD();
 8002aea:	f7ff f983 	bl	8001df4 <commandToLCD>
								  error();
 8002aee:	f7ff ff09 	bl	8002904 <error>
								  HAL_Delay(1500);
 8002af2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002af6:	f000 fb3b 	bl	8003170 <HAL_Delay>
								  commandToLCD();
 8002afa:	f7ff f97b 	bl	8001df4 <commandToLCD>
								  onOff();
 8002afe:	f7ff fecb 	bl	8002898 <onOff>
							  while(val[0]< 0 || val[0] > 1)
 8002b02:	4b57      	ldr	r3, [pc, #348]	; (8002c60 <StartUserTask+0x27c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	dbef      	blt.n	8002aea <StartUserTask+0x106>
 8002b0a:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <StartUserTask+0x27c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	dceb      	bgt.n	8002aea <StartUserTask+0x106>
							  }
							  //onoff = val[0];///do something with val[0]
							  clear();
 8002b12:	f7ff fb27 	bl	8002164 <clear>
							  quit();
 8002b16:	f7ff fe29 	bl	800276c <quit>
							  while(val[0]< 0 || val[0] > 1)
 8002b1a:	e00b      	b.n	8002b34 <StartUserTask+0x150>
							  {
								  commandToLCD();
 8002b1c:	f7ff f96a 	bl	8001df4 <commandToLCD>
								  error();
 8002b20:	f7ff fef0 	bl	8002904 <error>
								  HAL_Delay(1500);
 8002b24:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b28:	f000 fb22 	bl	8003170 <HAL_Delay>
								  commandToLCD();
 8002b2c:	f7ff f962 	bl	8001df4 <commandToLCD>
								  quit();
 8002b30:	f7ff fe1c 	bl	800276c <quit>
							  while(val[0]< 0 || val[0] > 1)
 8002b34:	4b4a      	ldr	r3, [pc, #296]	; (8002c60 <StartUserTask+0x27c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	dbef      	blt.n	8002b1c <StartUserTask+0x138>
 8002b3c:	4b48      	ldr	r3, [pc, #288]	; (8002c60 <StartUserTask+0x27c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	dceb      	bgt.n	8002b1c <StartUserTask+0x138>
 8002b44:	e062      	b.n	8002c0c <StartUserTask+0x228>
							  }
						  }

						  else if(val[0] == 1)
 8002b46:	4b46      	ldr	r3, [pc, #280]	; (8002c60 <StartUserTask+0x27c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d15e      	bne.n	8002c0c <StartUserTask+0x228>
						  {

								  commandToLCD();
 8002b4e:	f7ff f951 	bl	8001df4 <commandToLCD>
								  green();
 8002b52:	f7ff fd97 	bl	8002684 <green>
								  while(val[0]< 1 || val[0] > 3)
 8002b56:	e00b      	b.n	8002b70 <StartUserTask+0x18c>
								  {
									  commandToLCD();
 8002b58:	f7ff f94c 	bl	8001df4 <commandToLCD>
									  error();
 8002b5c:	f7ff fed2 	bl	8002904 <error>
									  HAL_Delay(1500);
 8002b60:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b64:	f000 fb04 	bl	8003170 <HAL_Delay>
									  commandToLCD();
 8002b68:	f7ff f944 	bl	8001df4 <commandToLCD>
									  green();
 8002b6c:	f7ff fd8a 	bl	8002684 <green>
								  while(val[0]< 1 || val[0] > 3)
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <StartUserTask+0x27c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	ddef      	ble.n	8002b58 <StartUserTask+0x174>
 8002b78:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <StartUserTask+0x27c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	dceb      	bgt.n	8002b58 <StartUserTask+0x174>
								  }
								  indc = val[0];///do something with val[0] aka green #
 8002b80:	4b37      	ldr	r3, [pc, #220]	; (8002c60 <StartUserTask+0x27c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a39      	ldr	r2, [pc, #228]	; (8002c6c <StartUserTask+0x288>)
 8002b86:	6013      	str	r3, [r2, #0]
								  line2();
 8002b88:	f7ff fa98 	bl	80020bc <line2>
								  timer();
 8002b8c:	f7ff fdae 	bl	80026ec <timer>
								  while(val[0]< 0 || val[0] > 6 || val[1]< 0 || val[1] > 9 || (val[0]==6 && val[1]!=0))
 8002b90:	e00b      	b.n	8002baa <StartUserTask+0x1c6>
								  {
									  commandToLCD();
 8002b92:	f7ff f92f 	bl	8001df4 <commandToLCD>
									  error();
 8002b96:	f7ff feb5 	bl	8002904 <error>
									  HAL_Delay(1500);
 8002b9a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b9e:	f000 fae7 	bl	8003170 <HAL_Delay>
									  commandToLCD();
 8002ba2:	f7ff f927 	bl	8001df4 <commandToLCD>
									  timer();
 8002ba6:	f7ff fda1 	bl	80026ec <timer>
								  while(val[0]< 0 || val[0] > 6 || val[1]< 0 || val[1] > 9 || (val[0]==6 && val[1]!=0))
 8002baa:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <StartUserTask+0x27c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	dbef      	blt.n	8002b92 <StartUserTask+0x1ae>
 8002bb2:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <StartUserTask+0x27c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b06      	cmp	r3, #6
 8002bb8:	dceb      	bgt.n	8002b92 <StartUserTask+0x1ae>
 8002bba:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <StartUserTask+0x27c>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	dbe7      	blt.n	8002b92 <StartUserTask+0x1ae>
 8002bc2:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <StartUserTask+0x27c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b09      	cmp	r3, #9
 8002bc8:	dce3      	bgt.n	8002b92 <StartUserTask+0x1ae>
 8002bca:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <StartUserTask+0x27c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b06      	cmp	r3, #6
 8002bd0:	d103      	bne.n	8002bda <StartUserTask+0x1f6>
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <StartUserTask+0x27c>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1db      	bne.n	8002b92 <StartUserTask+0x1ae>
								  }
								  ///do something with val[0] and val[1]
								  clear();
 8002bda:	f7ff fac3 	bl	8002164 <clear>
								  quit();
 8002bde:	f7ff fdc5 	bl	800276c <quit>
								  while(val[0]< 0 || val[0] > 1)
 8002be2:	e00b      	b.n	8002bfc <StartUserTask+0x218>
								  {
									  commandToLCD();
 8002be4:	f7ff f906 	bl	8001df4 <commandToLCD>
									  error();
 8002be8:	f7ff fe8c 	bl	8002904 <error>
									  HAL_Delay(1500);
 8002bec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002bf0:	f000 fabe 	bl	8003170 <HAL_Delay>
									  commandToLCD();
 8002bf4:	f7ff f8fe 	bl	8001df4 <commandToLCD>
									  quit();
 8002bf8:	f7ff fdb8 	bl	800276c <quit>
								  while(val[0]< 0 || val[0] > 1)
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <StartUserTask+0x27c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	dbef      	blt.n	8002be4 <StartUserTask+0x200>
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <StartUserTask+0x27c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	dceb      	bgt.n	8002be4 <StartUserTask+0x200>
					  while(val[6] == 0)
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <StartUserTask+0x27c>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f43f af2b 	beq.w	8002a6c <StartUserTask+0x88>
 8002c16:	e6e9      	b.n	80029ec <StartUserTask+0x8>
						  }
					  }
				  }
				  else
				  {
					  line2();
 8002c18:	f7ff fa50 	bl	80020bc <line2>
					  wrongPass();
 8002c1c:	f7ff fcf6 	bl	800260c <wrongPass>
					  HAL_Delay(2000);
 8002c20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c24:	f000 faa4 	bl	8003170 <HAL_Delay>
 8002c28:	e6e0      	b.n	80029ec <StartUserTask+0x8>
				  }
			  }
			  else
			  {
				  line2();
 8002c2a:	f7ff fa47 	bl	80020bc <line2>
				  wrongPass();
 8002c2e:	f7ff fced 	bl	800260c <wrongPass>
				  HAL_Delay(2000);
 8002c32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c36:	f000 fa9b 	bl	8003170 <HAL_Delay>
 8002c3a:	e6d7      	b.n	80029ec <StartUserTask+0x8>
			  }
		  }
		  else
		  {
			  line2();
 8002c3c:	f7ff fa3e 	bl	80020bc <line2>
			  wrongPass();
 8002c40:	f7ff fce4 	bl	800260c <wrongPass>
			  HAL_Delay(2000);
 8002c44:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c48:	f000 fa92 	bl	8003170 <HAL_Delay>
 8002c4c:	e6ce      	b.n	80029ec <StartUserTask+0x8>
		  }
	  }
	  else
	  {
		  line2();
 8002c4e:	f7ff fa35 	bl	80020bc <line2>
		  wrongPass();
 8002c52:	f7ff fcdb 	bl	800260c <wrongPass>
		  HAL_Delay(2000);
 8002c56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c5a:	f000 fa89 	bl	8003170 <HAL_Delay>
	  val[6] = 0;
 8002c5e:	e6c5      	b.n	80029ec <StartUserTask+0x8>
 8002c60:	2000238c 	.word	0x2000238c
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40011400 	.word	0x40011400
 8002c6c:	20002100 	.word	0x20002100

08002c70 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
//	  		else if(state == 1)
//	  		{
//	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//	  		}
//	  	}
    osDelay(1);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f001 ffeb 	bl	8004c54 <osDelay>
 8002c7e:	e7fb      	b.n	8002c78 <StartSolenoidTask+0x8>

08002c80 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  for(;;)
  {
		uint32_t period;
		uint32_t tickstart;

		HAL_TIM_Base_Start(&htim2);
 8002c88:	4814      	ldr	r0, [pc, #80]	; (8002cdc <StartWeatherTask+0x5c>)
 8002c8a:	f001 f9bb 	bl	8004004 <HAL_TIM_Base_Start>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8002c8e:	bf00      	nop
 8002c90:	2101      	movs	r1, #1
 8002c92:	4813      	ldr	r0, [pc, #76]	; (8002ce0 <StartWeatherTask+0x60>)
 8002c94:	f000 fcc8 	bl	8003628 <HAL_GPIO_ReadPin>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f8      	beq.n	8002c90 <StartWeatherTask+0x10>
		{}
		tickstart = __HAL_TIM_GET_COUNTER(&htim2);
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <StartWeatherTask+0x5c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	60fb      	str	r3, [r7, #12]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1)
 8002ca6:	bf00      	nop
 8002ca8:	2101      	movs	r1, #1
 8002caa:	480d      	ldr	r0, [pc, #52]	; (8002ce0 <StartWeatherTask+0x60>)
 8002cac:	f000 fcbc 	bl	8003628 <HAL_GPIO_ReadPin>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d0f8      	beq.n	8002ca8 <StartWeatherTask+0x28>
		{}
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8002cb6:	bf00      	nop
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4809      	ldr	r0, [pc, #36]	; (8002ce0 <StartWeatherTask+0x60>)
 8002cbc:	f000 fcb4 	bl	8003628 <HAL_GPIO_ReadPin>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f8      	beq.n	8002cb8 <StartWeatherTask+0x38>
		{}
		period =  __HAL_TIM_GET_COUNTER(&htim2) - tickstart;
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <StartWeatherTask+0x5c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	60bb      	str	r3, [r7, #8]

    osDelay(1);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	f001 ffbe 	bl	8004c54 <osDelay>
  {
 8002cd8:	e7d6      	b.n	8002c88 <StartWeatherTask+0x8>
 8002cda:	bf00      	nop
 8002cdc:	200023b4 	.word	0x200023b4
 8002ce0:	40011000 	.word	0x40011000

08002ce4 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
//	  		L2=F2;
//	  		L3=F3;
//
//	  	}

    osDelay(1);
 8002cec:	2001      	movs	r0, #1
 8002cee:	f001 ffb1 	bl	8004c54 <osDelay>
 8002cf2:	e7fb      	b.n	8002cec <StartFlowTask+0x8>

08002cf4 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f001 ffa9 	bl	8004c54 <osDelay>
 8002d02:	e7fb      	b.n	8002cfc <StartProcessingTask+0x8>

08002d04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d16:	f000 fa0f 	bl	8003138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40000800 	.word	0x40000800

08002d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <Error_Handler+0x6>

08002d30 <initializeNodes>:
 *      Author: Colton Moore
 */
#include "sensorObjects.h"

void initializeNodes()
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 8002d36:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <initializeNodes+0xd8>)
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d40:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 8002d44:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <initializeNodes+0xdc>)
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d4e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 8002d52:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <initializeNodes+0xe0>)
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d5a:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	77fb      	strb	r3, [r7, #31]
 8002d66:	e01e      	b.n	8002da6 <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
 8002d6a:	4a2a      	ldr	r2, [pc, #168]	; (8002e14 <initializeNodes+0xe4>)
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	4413      	add	r3, r2
 8002d70:	330c      	adds	r3, #12
 8002d72:	2200      	movs	r2, #0
 8002d74:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 8002d76:	7ffb      	ldrb	r3, [r7, #31]
 8002d78:	4a26      	ldr	r2, [pc, #152]	; (8002e14 <initializeNodes+0xe4>)
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	4413      	add	r3, r2
 8002d7e:	330a      	adds	r3, #10
 8002d80:	2200      	movs	r2, #0
 8002d82:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
 8002d86:	4a23      	ldr	r2, [pc, #140]	; (8002e14 <initializeNodes+0xe4>)
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	2200      	movs	r2, #0
 8002d90:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 8002d92:	7ffb      	ldrb	r3, [r7, #31]
 8002d94:	4a1f      	ldr	r2, [pc, #124]	; (8002e14 <initializeNodes+0xe4>)
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	4413      	add	r3, r2
 8002d9a:	330e      	adds	r3, #14
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 8002da0:	7ffb      	ldrb	r3, [r7, #31]
 8002da2:	3301      	adds	r3, #1
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	2b1f      	cmp	r3, #31
 8002daa:	d9dd      	bls.n	8002d68 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e022      	b.n	8002df8 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 8002db2:	7ffa      	ldrb	r2, [r7, #31]
 8002db4:	7ffb      	ldrb	r3, [r7, #31]
 8002db6:	f107 0120 	add.w	r1, r7, #32
 8002dba:	440a      	add	r2, r1
 8002dbc:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <initializeNodes+0xe4>)
 8002dc2:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8002dc4:	7ffa      	ldrb	r2, [r7, #31]
 8002dc6:	7ffb      	ldrb	r3, [r7, #31]
 8002dc8:	f107 0120 	add.w	r1, r7, #32
 8002dcc:	440a      	add	r2, r1
 8002dce:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <initializeNodes+0xe4>)
 8002dd4:	4413      	add	r3, r2
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 8002dda:	7ffa      	ldrb	r2, [r7, #31]
 8002ddc:	7ffb      	ldrb	r3, [r7, #31]
 8002dde:	f107 0120 	add.w	r1, r7, #32
 8002de2:	440a      	add	r2, r1
 8002de4:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8002de8:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <initializeNodes+0xe4>)
 8002dea:	4413      	add	r3, r2
 8002dec:	460a      	mov	r2, r1
 8002dee:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	3301      	adds	r3, #1
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	7ffb      	ldrb	r3, [r7, #31]
 8002dfa:	2b07      	cmp	r3, #7
 8002dfc:	d9d9      	bls.n	8002db2 <initializeNodes+0x82>
	}

	return;
 8002dfe:	bf00      	nop
}
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	08007608 	.word	0x08007608
 8002e0c:	08007610 	.word	0x08007610
 8002e10:	08007618 	.word	0x08007618
 8002e14:	20002148 	.word	0x20002148

08002e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_MspInit+0x68>)
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	4a17      	ldr	r2, [pc, #92]	; (8002e80 <HAL_MspInit+0x68>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6193      	str	r3, [r2, #24]
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <HAL_MspInit+0x68>)
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_MspInit+0x68>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4a11      	ldr	r2, [pc, #68]	; (8002e80 <HAL_MspInit+0x68>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e40:	61d3      	str	r3, [r2, #28]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_MspInit+0x68>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	210f      	movs	r1, #15
 8002e52:	f06f 0001 	mvn.w	r0, #1
 8002e56:	f000 fa62 	bl	800331e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_MspInit+0x6c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <HAL_MspInit+0x6c>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e76:	bf00      	nop
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40010000 	.word	0x40010000

08002e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e98:	d10b      	bne.n	8002eb2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <HAL_TIM_Base_MspInit+0x34>)
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <HAL_TIM_Base_MspInit+0x34>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	61d3      	str	r3, [r2, #28]
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_TIM_Base_MspInit+0x34>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0318 	add.w	r3, r7, #24
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a31      	ldr	r2, [pc, #196]	; (8002fa0 <HAL_UART_MspInit+0xe0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d124      	bne.n	8002f2a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eea:	61d3      	str	r3, [r2, #28]
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4a29      	ldr	r2, [pc, #164]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002efe:	f043 0304 	orr.w	r3, r3, #4
 8002f02:	6193      	str	r3, [r2, #24]
 8002f04:	4b27      	ldr	r3, [pc, #156]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f10:	230c      	movs	r3, #12
 8002f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	f107 0318 	add.w	r3, r7, #24
 8002f20:	4619      	mov	r1, r3
 8002f22:	4821      	ldr	r0, [pc, #132]	; (8002fa8 <HAL_UART_MspInit+0xe8>)
 8002f24:	f000 fa26 	bl	8003374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f28:	e036      	b.n	8002f98 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1f      	ldr	r2, [pc, #124]	; (8002fac <HAL_UART_MspInit+0xec>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d131      	bne.n	8002f98 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f34:	4b1b      	ldr	r3, [pc, #108]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002f36:	69db      	ldr	r3, [r3, #28]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002f3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3e:	61d3      	str	r3, [r2, #28]
 8002f40:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4c:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4a14      	ldr	r2, [pc, #80]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	6193      	str	r3, [r2, #24]
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_UART_MspInit+0xe4>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f72:	f107 0318 	add.w	r3, r7, #24
 8002f76:	4619      	mov	r1, r3
 8002f78:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <HAL_UART_MspInit+0xf0>)
 8002f7a:	f000 f9fb 	bl	8003374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f84:	2300      	movs	r3, #0
 8002f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8c:	f107 0318 	add.w	r3, r7, #24
 8002f90:	4619      	mov	r1, r3
 8002f92:	4807      	ldr	r0, [pc, #28]	; (8002fb0 <HAL_UART_MspInit+0xf0>)
 8002f94:	f000 f9ee 	bl	8003374 <HAL_GPIO_Init>
}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40004400 	.word	0x40004400
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40010800 	.word	0x40010800
 8002fac:	40004800 	.word	0x40004800
 8002fb0:	40010c00 	.word	0x40010c00

08002fb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	201e      	movs	r0, #30
 8002fca:	f000 f9a8 	bl	800331e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fce:	201e      	movs	r0, #30
 8002fd0:	f000 f9c1 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002fd4:	4b1f      	ldr	r3, [pc, #124]	; (8003054 <HAL_InitTick+0xa0>)
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <HAL_InitTick+0xa0>)
 8002fda:	f043 0304 	orr.w	r3, r3, #4
 8002fde:	61d3      	str	r3, [r2, #28]
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_InitTick+0xa0>)
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fec:	f107 0210 	add.w	r2, r7, #16
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 ff66 	bl	8003ec8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ffc:	f000 ff3c 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8003000:	4603      	mov	r3, r0
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	4a13      	ldr	r2, [pc, #76]	; (8003058 <HAL_InitTick+0xa4>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0c9b      	lsrs	r3, r3, #18
 8003010:	3b01      	subs	r3, #1
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_InitTick+0xa8>)
 8003016:	4a12      	ldr	r2, [pc, #72]	; (8003060 <HAL_InitTick+0xac>)
 8003018:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_InitTick+0xa8>)
 800301c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003020:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003022:	4a0e      	ldr	r2, [pc, #56]	; (800305c <HAL_InitTick+0xa8>)
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <HAL_InitTick+0xa8>)
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800302e:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_InitTick+0xa8>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003034:	4809      	ldr	r0, [pc, #36]	; (800305c <HAL_InitTick+0xa8>)
 8003036:	f000 ff95 	bl	8003f64 <HAL_TIM_Base_Init>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003040:	4806      	ldr	r0, [pc, #24]	; (800305c <HAL_InitTick+0xa8>)
 8003042:	f001 f829 	bl	8004098 <HAL_TIM_Base_Start_IT>
 8003046:	4603      	mov	r3, r0
 8003048:	e000      	b.n	800304c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	3730      	adds	r7, #48	; 0x30
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	431bde83 	.word	0x431bde83
 800305c:	20002478 	.word	0x20002478
 8003060:	40000800 	.word	0x40000800

08003064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003068:	e7fe      	b.n	8003068 <NMI_Handler+0x4>

0800306a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <HardFault_Handler+0x4>

08003070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003074:	e7fe      	b.n	8003074 <MemManage_Handler+0x4>

08003076 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800307a:	e7fe      	b.n	800307a <BusFault_Handler+0x4>

0800307c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003080:	e7fe      	b.n	8003080 <UsageFault_Handler+0x4>

08003082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003082:	b480      	push	{r7}
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
	...

08003090 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <TIM4_IRQHandler+0x10>)
 8003096:	f001 f851 	bl	800413c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20002478 	.word	0x20002478

080030a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030ac:	f000 faec 	bl	8003688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80030c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80030c2:	e003      	b.n	80030cc <LoopCopyDataInit>

080030c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80030c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80030c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80030ca:	3104      	adds	r1, #4

080030cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80030cc:	480a      	ldr	r0, [pc, #40]	; (80030f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80030d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80030d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80030d4:	d3f6      	bcc.n	80030c4 <CopyDataInit>
  ldr r2, =_sbss
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80030d8:	e002      	b.n	80030e0 <LoopFillZerobss>

080030da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80030da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80030dc:	f842 3b04 	str.w	r3, [r2], #4

080030e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80030e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030e4:	d3f9      	bcc.n	80030da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80030e6:	f7ff ffe5 	bl	80030b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ea:	f004 f9ff 	bl	80074ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030ee:	f7fe fc25 	bl	800193c <main>
  bx lr
 80030f2:	4770      	bx	lr
  ldr r3, =_sidata
 80030f4:	080077bc 	.word	0x080077bc
  ldr r0, =_sdata
 80030f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030fc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003100:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003104:	20002504 	.word	0x20002504

08003108 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003108:	e7fe      	b.n	8003108 <ADC1_2_IRQHandler>
	...

0800310c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003110:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_Init+0x28>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a07      	ldr	r2, [pc, #28]	; (8003134 <HAL_Init+0x28>)
 8003116:	f043 0310 	orr.w	r3, r3, #16
 800311a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800311c:	2003      	movs	r0, #3
 800311e:	f000 f8f3 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003122:	2000      	movs	r0, #0
 8003124:	f7ff ff46 	bl	8002fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003128:	f7ff fe76 	bl	8002e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40022000 	.word	0x40022000

08003138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_IncTick+0x1c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_IncTick+0x20>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4413      	add	r3, r2
 8003148:	4a03      	ldr	r2, [pc, #12]	; (8003158 <HAL_IncTick+0x20>)
 800314a:	6013      	str	r3, [r2, #0]
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	20000008 	.word	0x20000008
 8003158:	200024c0 	.word	0x200024c0

0800315c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return uwTick;
 8003160:	4b02      	ldr	r3, [pc, #8]	; (800316c <HAL_GetTick+0x10>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr
 800316c:	200024c0 	.word	0x200024c0

08003170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff fff0 	bl	800315c <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d005      	beq.n	8003196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_Delay+0x40>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003196:	bf00      	nop
 8003198:	f7ff ffe0 	bl	800315c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d8f7      	bhi.n	8003198 <HAL_Delay+0x28>
  {
  }
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000008 	.word	0x20000008

080031b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d0:	4013      	ands	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <__NVIC_SetPriorityGrouping+0x44>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bc80      	pop	{r7}
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <__NVIC_GetPriorityGrouping+0x18>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	0a1b      	lsrs	r3, r3, #8
 8003206:	f003 0307 	and.w	r3, r3, #7
}
 800320a:	4618      	mov	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	4603      	mov	r3, r0
 8003220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	2b00      	cmp	r3, #0
 8003228:	db0b      	blt.n	8003242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	f003 021f 	and.w	r2, r3, #31
 8003230:	4906      	ldr	r1, [pc, #24]	; (800324c <__NVIC_EnableIRQ+0x34>)
 8003232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003236:	095b      	lsrs	r3, r3, #5
 8003238:	2001      	movs	r0, #1
 800323a:	fa00 f202 	lsl.w	r2, r0, r2
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100

08003250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	6039      	str	r1, [r7, #0]
 800325a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003260:	2b00      	cmp	r3, #0
 8003262:	db0a      	blt.n	800327a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	490c      	ldr	r1, [pc, #48]	; (800329c <__NVIC_SetPriority+0x4c>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	440b      	add	r3, r1
 8003274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003278:	e00a      	b.n	8003290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4908      	ldr	r1, [pc, #32]	; (80032a0 <__NVIC_SetPriority+0x50>)
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	3b04      	subs	r3, #4
 8003288:	0112      	lsls	r2, r2, #4
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	440b      	add	r3, r1
 800328e:	761a      	strb	r2, [r3, #24]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e100 	.word	0xe000e100
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f1c3 0307 	rsb	r3, r3, #7
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf28      	it	cs
 80032c2:	2304      	movcs	r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d902      	bls.n	80032d4 <NVIC_EncodePriority+0x30>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3b03      	subs	r3, #3
 80032d2:	e000      	b.n	80032d6 <NVIC_EncodePriority+0x32>
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d8:	f04f 32ff 	mov.w	r2, #4294967295
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	401a      	ands	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032ec:	f04f 31ff 	mov.w	r1, #4294967295
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	fa01 f303 	lsl.w	r3, r1, r3
 80032f6:	43d9      	mvns	r1, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	4313      	orrs	r3, r2
         );
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3724      	adds	r7, #36	; 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff4f 	bl	80031b4 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff64 	bl	80031fc <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ffb2 	bl	80032a4 <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff81 	bl	8003250 <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff57 	bl	8003218 <__NVIC_EnableIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b08b      	sub	sp, #44	; 0x2c
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003386:	e127      	b.n	80035d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003388:	2201      	movs	r2, #1
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 8116 	bne.w	80035d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b12      	cmp	r3, #18
 80033ac:	d034      	beq.n	8003418 <HAL_GPIO_Init+0xa4>
 80033ae:	2b12      	cmp	r3, #18
 80033b0:	d80d      	bhi.n	80033ce <HAL_GPIO_Init+0x5a>
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d02b      	beq.n	800340e <HAL_GPIO_Init+0x9a>
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d804      	bhi.n	80033c4 <HAL_GPIO_Init+0x50>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d031      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d01c      	beq.n	80033fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033c2:	e048      	b.n	8003456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d043      	beq.n	8003450 <HAL_GPIO_Init+0xdc>
 80033c8:	2b11      	cmp	r3, #17
 80033ca:	d01b      	beq.n	8003404 <HAL_GPIO_Init+0x90>
          break;
 80033cc:	e043      	b.n	8003456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033ce:	4a89      	ldr	r2, [pc, #548]	; (80035f4 <HAL_GPIO_Init+0x280>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d026      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033d4:	4a87      	ldr	r2, [pc, #540]	; (80035f4 <HAL_GPIO_Init+0x280>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d806      	bhi.n	80033e8 <HAL_GPIO_Init+0x74>
 80033da:	4a87      	ldr	r2, [pc, #540]	; (80035f8 <HAL_GPIO_Init+0x284>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d020      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033e0:	4a86      	ldr	r2, [pc, #536]	; (80035fc <HAL_GPIO_Init+0x288>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01d      	beq.n	8003422 <HAL_GPIO_Init+0xae>
          break;
 80033e6:	e036      	b.n	8003456 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033e8:	4a85      	ldr	r2, [pc, #532]	; (8003600 <HAL_GPIO_Init+0x28c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033ee:	4a85      	ldr	r2, [pc, #532]	; (8003604 <HAL_GPIO_Init+0x290>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d016      	beq.n	8003422 <HAL_GPIO_Init+0xae>
 80033f4:	4a84      	ldr	r2, [pc, #528]	; (8003608 <HAL_GPIO_Init+0x294>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0xae>
          break;
 80033fa:	e02c      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	623b      	str	r3, [r7, #32]
          break;
 8003402:	e028      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	3304      	adds	r3, #4
 800340a:	623b      	str	r3, [r7, #32]
          break;
 800340c:	e023      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	3308      	adds	r3, #8
 8003414:	623b      	str	r3, [r7, #32]
          break;
 8003416:	e01e      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	330c      	adds	r3, #12
 800341e:	623b      	str	r3, [r7, #32]
          break;
 8003420:	e019      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800342a:	2304      	movs	r3, #4
 800342c:	623b      	str	r3, [r7, #32]
          break;
 800342e:	e012      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003438:	2308      	movs	r3, #8
 800343a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	611a      	str	r2, [r3, #16]
          break;
 8003442:	e008      	b.n	8003456 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003444:	2308      	movs	r3, #8
 8003446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	615a      	str	r2, [r3, #20]
          break;
 800344e:	e002      	b.n	8003456 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003450:	2300      	movs	r3, #0
 8003452:	623b      	str	r3, [r7, #32]
          break;
 8003454:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2bff      	cmp	r3, #255	; 0xff
 800345a:	d801      	bhi.n	8003460 <HAL_GPIO_Init+0xec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	e001      	b.n	8003464 <HAL_GPIO_Init+0xf0>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2bff      	cmp	r3, #255	; 0xff
 800346a:	d802      	bhi.n	8003472 <HAL_GPIO_Init+0xfe>
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_Init+0x104>
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	3b08      	subs	r3, #8
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	210f      	movs	r1, #15
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43db      	mvns	r3, r3
 8003488:	401a      	ands	r2, r3
 800348a:	6a39      	ldr	r1, [r7, #32]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	431a      	orrs	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8096 	beq.w	80035d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034a6:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_GPIO_Init+0x298>)
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	4a58      	ldr	r2, [pc, #352]	; (800360c <HAL_GPIO_Init+0x298>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6193      	str	r3, [r2, #24]
 80034b2:	4b56      	ldr	r3, [pc, #344]	; (800360c <HAL_GPIO_Init+0x298>)
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034be:	4a54      	ldr	r2, [pc, #336]	; (8003610 <HAL_GPIO_Init+0x29c>)
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	089b      	lsrs	r3, r3, #2
 80034c4:	3302      	adds	r3, #2
 80034c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	220f      	movs	r2, #15
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4b      	ldr	r2, [pc, #300]	; (8003614 <HAL_GPIO_Init+0x2a0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_GPIO_Init+0x19e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4a      	ldr	r2, [pc, #296]	; (8003618 <HAL_GPIO_Init+0x2a4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00d      	beq.n	800350e <HAL_GPIO_Init+0x19a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a49      	ldr	r2, [pc, #292]	; (800361c <HAL_GPIO_Init+0x2a8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <HAL_GPIO_Init+0x196>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a48      	ldr	r2, [pc, #288]	; (8003620 <HAL_GPIO_Init+0x2ac>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_GPIO_Init+0x192>
 8003502:	2303      	movs	r3, #3
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x1a0>
 8003506:	2304      	movs	r3, #4
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x1a0>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x1a0>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x1a0>
 8003512:	2300      	movs	r3, #0
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003524:	493a      	ldr	r1, [pc, #232]	; (8003610 <HAL_GPIO_Init+0x29c>)
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800353e:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4938      	ldr	r1, [pc, #224]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
 800354a:	e006      	b.n	800355a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800354c:	4b35      	ldr	r3, [pc, #212]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	43db      	mvns	r3, r3
 8003554:	4933      	ldr	r1, [pc, #204]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003556:	4013      	ands	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003566:	4b2f      	ldr	r3, [pc, #188]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	492e      	ldr	r1, [pc, #184]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
 8003572:	e006      	b.n	8003582 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	43db      	mvns	r3, r3
 800357c:	4929      	ldr	r1, [pc, #164]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 800357e:	4013      	ands	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800358e:	4b25      	ldr	r3, [pc, #148]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	4924      	ldr	r1, [pc, #144]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
 800359a:	e006      	b.n	80035aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	491f      	ldr	r1, [pc, #124]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d006      	beq.n	80035c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	491a      	ldr	r1, [pc, #104]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60cb      	str	r3, [r1, #12]
 80035c2:	e006      	b.n	80035d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035c4:	4b17      	ldr	r3, [pc, #92]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4915      	ldr	r1, [pc, #84]	; (8003624 <HAL_GPIO_Init+0x2b0>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	3301      	adds	r3, #1
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f47f aed0 	bne.w	8003388 <HAL_GPIO_Init+0x14>
  }
}
 80035e8:	bf00      	nop
 80035ea:	372c      	adds	r7, #44	; 0x2c
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	10210000 	.word	0x10210000
 80035f8:	10110000 	.word	0x10110000
 80035fc:	10120000 	.word	0x10120000
 8003600:	10310000 	.word	0x10310000
 8003604:	10320000 	.word	0x10320000
 8003608:	10220000 	.word	0x10220000
 800360c:	40021000 	.word	0x40021000
 8003610:	40010000 	.word	0x40010000
 8003614:	40010800 	.word	0x40010800
 8003618:	40010c00 	.word	0x40010c00
 800361c:	40011000 	.word	0x40011000
 8003620:	40011400 	.word	0x40011400
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	887b      	ldrh	r3, [r7, #2]
 800363a:	4013      	ands	r3, r2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e001      	b.n	800364a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800364a:	7bfb      	ldrb	r3, [r7, #15]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	807b      	strh	r3, [r7, #2]
 8003662:	4613      	mov	r3, r2
 8003664:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003666:	787b      	ldrb	r3, [r7, #1]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800366c:	887a      	ldrh	r2, [r7, #2]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003672:	e003      	b.n	800367c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003674:	887b      	ldrh	r3, [r7, #2]
 8003676:	041a      	lsls	r2, r3, #16
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	611a      	str	r2, [r3, #16]
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
	...

08003688 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	88fb      	ldrh	r3, [r7, #6]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f806 	bl	80036b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40010400 	.word	0x40010400

080036b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e26c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8087 	beq.w	80037fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ec:	4b92      	ldr	r3, [pc, #584]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d00c      	beq.n	8003712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036f8:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d112      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
 8003704:	4b8c      	ldr	r3, [pc, #560]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d10b      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003712:	4b89      	ldr	r3, [pc, #548]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d06c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x12c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d168      	bne.n	80037f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e246      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x76>
 8003734:	4b80      	ldr	r3, [pc, #512]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7f      	ldr	r2, [pc, #508]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e02e      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x98>
 800374a:	4b7b      	ldr	r3, [pc, #492]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7a      	ldr	r2, [pc, #488]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b78      	ldr	r3, [pc, #480]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a77      	ldr	r2, [pc, #476]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e01d      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0xbc>
 800376e:	4b72      	ldr	r3, [pc, #456]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a71      	ldr	r2, [pc, #452]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b6f      	ldr	r3, [pc, #444]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6e      	ldr	r2, [pc, #440]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003788:	4b6b      	ldr	r3, [pc, #428]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a6a      	ldr	r2, [pc, #424]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b68      	ldr	r3, [pc, #416]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a67      	ldr	r2, [pc, #412]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7ff fcd8 	bl	800315c <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7ff fcd4 	bl	800315c <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1fa      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b5d      	ldr	r3, [pc, #372]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0xe4>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7ff fcc4 	bl	800315c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7ff fcc0 	bl	800315c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1e6      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x10c>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d063      	beq.n	80038ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003806:	4b4c      	ldr	r3, [pc, #304]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003812:	4b49      	ldr	r3, [pc, #292]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d11c      	bne.n	8003858 <HAL_RCC_OscConfig+0x18c>
 800381e:	4b46      	ldr	r3, [pc, #280]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x176>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e1ba      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4939      	ldr	r1, [pc, #228]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	e03a      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7ff fc79 	bl	800315c <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386e:	f7ff fc75 	bl	800315c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e19b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4927      	ldr	r1, [pc, #156]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]
 80038a0:	e015      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7ff fc58 	bl	800315c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b0:	f7ff fc54 	bl	800315c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e17a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d03a      	beq.n	8003950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d019      	beq.n	8003916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e2:	4b17      	ldr	r3, [pc, #92]	; (8003940 <HAL_RCC_OscConfig+0x274>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7ff fc38 	bl	800315c <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f0:	f7ff fc34 	bl	800315c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e15a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 fb0a 	bl	8003f28 <RCC_Delay>
 8003914:	e01c      	b.n	8003950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCC_OscConfig+0x274>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7ff fc1e 	bl	800315c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003922:	e00f      	b.n	8003944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7ff fc1a 	bl	800315c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d908      	bls.n	8003944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e140      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
 800393c:	42420000 	.word	0x42420000
 8003940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	4b9e      	ldr	r3, [pc, #632]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e9      	bne.n	8003924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80a6 	beq.w	8003aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003962:	4b97      	ldr	r3, [pc, #604]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	4b94      	ldr	r3, [pc, #592]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4a93      	ldr	r2, [pc, #588]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003978:	61d3      	str	r3, [r2, #28]
 800397a:	4b91      	ldr	r3, [pc, #580]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	4b8e      	ldr	r3, [pc, #568]	; (8003bc4 <HAL_RCC_OscConfig+0x4f8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d118      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_RCC_OscConfig+0x4f8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8a      	ldr	r2, [pc, #552]	; (8003bc4 <HAL_RCC_OscConfig+0x4f8>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7ff fbdb 	bl	800315c <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7ff fbd7 	bl	800315c <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	; 0x64
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0fd      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <HAL_RCC_OscConfig+0x4f8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x312>
 80039d0:	4b7b      	ldr	r3, [pc, #492]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4a7a      	ldr	r2, [pc, #488]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	e02d      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x334>
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a72      	ldr	r2, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6213      	str	r3, [r2, #32]
 80039fe:	e01c      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	d10c      	bne.n	8003a22 <HAL_RCC_OscConfig+0x356>
 8003a08:	4b6d      	ldr	r3, [pc, #436]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4a6c      	ldr	r2, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6213      	str	r3, [r2, #32]
 8003a14:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4a69      	ldr	r2, [pc, #420]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	e00b      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 8003a22:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a66      	ldr	r2, [pc, #408]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	4b64      	ldr	r3, [pc, #400]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a63      	ldr	r2, [pc, #396]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d015      	beq.n	8003a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7ff fb8b 	bl	800315c <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7ff fb87 	bl	800315c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0ab      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ee      	beq.n	8003a4a <HAL_RCC_OscConfig+0x37e>
 8003a6c:	e014      	b.n	8003a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7ff fb75 	bl	800315c <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7ff fb71 	bl	800315c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e095      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ee      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9e:	4b48      	ldr	r3, [pc, #288]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4a47      	ldr	r2, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8081 	beq.w	8003bb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab4:	4b42      	ldr	r3, [pc, #264]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d061      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d146      	bne.n	8003b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac8:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <HAL_RCC_OscConfig+0x4fc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7ff fb45 	bl	800315c <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7ff fb41 	bl	800315c <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e067      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	4b35      	ldr	r3, [pc, #212]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d108      	bne.n	8003b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003afe:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	492d      	ldr	r1, [pc, #180]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a19      	ldr	r1, [r3, #32]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	430b      	orrs	r3, r1
 8003b22:	4927      	ldr	r1, [pc, #156]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_OscConfig+0x4fc>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7ff fb15 	bl	800315c <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b36:	f7ff fb11 	bl	800315c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e037      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x46a>
 8003b54:	e02f      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <HAL_RCC_OscConfig+0x4fc>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7ff fafe 	bl	800315c <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b64:	f7ff fafa 	bl	800315c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e020      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x498>
 8003b82:	e018      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e013      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	42420060 	.word	0x42420060

08003bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0d0      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d910      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4965      	ldr	r1, [pc, #404]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d040      	beq.n	8003cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d115      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e073      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06b      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4936      	ldr	r1, [pc, #216]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7ff fa4e 	bl	800315c <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7ff fa4a 	bl	800315c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e053      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d210      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 0207 	bic.w	r2, r3, #7
 8003d02:	4922      	ldr	r1, [pc, #136]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f821 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4601      	mov	r1, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1cc>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff f91a 	bl	8002fb4 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	40021000 	.word	0x40021000
 8003d94:	0800779c 	.word	0x0800779c
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	20000004 	.word	0x20000004

08003da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	b490      	push	{r4, r7}
 8003da2:	b08a      	sub	sp, #40	; 0x28
 8003da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003da8:	1d3c      	adds	r4, r7, #4
 8003daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003db0:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d002      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_GetSysClockFreq+0x46>
 8003dde:	e02d      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003de2:	623b      	str	r3, [r7, #32]
      break;
 8003de4:	e02d      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	0c9b      	lsrs	r3, r3, #18
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003df2:	4413      	add	r3, r2
 8003df4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003df8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e04:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c5b      	lsrs	r3, r3, #17
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e12:	4413      	add	r3, r2
 8003e14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e1e:	fb02 f203 	mul.w	r2, r2, r3
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	e004      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	623b      	str	r3, [r7, #32]
      break;
 8003e3a:	e002      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e3e:	623b      	str	r3, [r7, #32]
      break;
 8003e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e42:	6a3b      	ldr	r3, [r7, #32]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	; 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc90      	pop	{r4, r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	08007620 	.word	0x08007620
 8003e54:	08007630 	.word	0x08007630
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	007a1200 	.word	0x007a1200
 8003e60:	003d0900 	.word	0x003d0900

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b02      	ldr	r3, [pc, #8]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	20000000 	.word	0x20000000

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	f7ff fff2 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e80:	4601      	mov	r1, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8e:	5cd3      	ldrb	r3, [r2, r3]
 8003e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	080077ac 	.word	0x080077ac

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea4:	f7ff ffde 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4601      	mov	r1, r0
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	0adb      	lsrs	r3, r3, #11
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4a03      	ldr	r2, [pc, #12]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb6:	5cd3      	ldrb	r3, [r2, r3]
 8003eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	080077ac 	.word	0x080077ac

08003ec8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	220f      	movs	r2, #15
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <HAL_RCC_GetClockConfig+0x58>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0203 	and.w	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ee4:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <HAL_RCC_GetClockConfig+0x58>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_GetClockConfig+0x58>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003efc:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <HAL_RCC_GetClockConfig+0x58>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	08db      	lsrs	r3, r3, #3
 8003f02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <HAL_RCC_GetClockConfig+0x5c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0207 	and.w	r2, r3, #7
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40022000 	.word	0x40022000

08003f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f30:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <RCC_Delay+0x34>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0a      	ldr	r2, [pc, #40]	; (8003f60 <RCC_Delay+0x38>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0a5b      	lsrs	r3, r3, #9
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f44:	bf00      	nop
  }
  while (Delay --);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1e5a      	subs	r2, r3, #1
 8003f4a:	60fa      	str	r2, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f9      	bne.n	8003f44 <RCC_Delay+0x1c>
}
 8003f50:	bf00      	nop
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	10624dd3 	.word	0x10624dd3

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e041      	b.n	8003ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fe ff7c 	bl	8002e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 faae 	bl	8004504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_TIM_Base_Start+0x88>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00e      	beq.n	800404c <HAL_TIM_Base_Start+0x48>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d009      	beq.n	800404c <HAL_TIM_Base_Start+0x48>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a14      	ldr	r2, [pc, #80]	; (8004090 <HAL_TIM_Base_Start+0x8c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_TIM_Base_Start+0x48>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_TIM_Base_Start+0x90>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d111      	bne.n	8004070 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b06      	cmp	r3, #6
 800405c:	d010      	beq.n	8004080 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406e:	e007      	b.n	8004080 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800

08004098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d001      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e03a      	b.n	8004126 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a18      	ldr	r2, [pc, #96]	; (8004130 <HAL_TIM_Base_Start_IT+0x98>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00e      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x58>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040da:	d009      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x58>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a14      	ldr	r2, [pc, #80]	; (8004134 <HAL_TIM_Base_Start_IT+0x9c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x58>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a13      	ldr	r2, [pc, #76]	; (8004138 <HAL_TIM_Base_Start_IT+0xa0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d111      	bne.n	8004114 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d010      	beq.n	8004124 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004112:	e007      	b.n	8004124 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800

0800413c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d122      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d11b      	bne.n	8004198 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0202 	mvn.w	r2, #2
 8004168:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9a4 	bl	80044cc <HAL_TIM_IC_CaptureCallback>
 8004184:	e005      	b.n	8004192 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f997 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f9a6 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d122      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d11b      	bne.n	80041ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0204 	mvn.w	r2, #4
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f97a 	bl	80044cc <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f96d 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f97c 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d122      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 0308 	and.w	r3, r3, #8
 8004204:	2b08      	cmp	r3, #8
 8004206:	d11b      	bne.n	8004240 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0208 	mvn.w	r2, #8
 8004210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2204      	movs	r2, #4
 8004216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f950 	bl	80044cc <HAL_TIM_IC_CaptureCallback>
 800422c:	e005      	b.n	800423a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f943 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f952 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	2b10      	cmp	r3, #16
 800424c:	d122      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2b10      	cmp	r3, #16
 800425a:	d11b      	bne.n	8004294 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f06f 0210 	mvn.w	r2, #16
 8004264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2208      	movs	r2, #8
 800426a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f926 	bl	80044cc <HAL_TIM_IC_CaptureCallback>
 8004280:	e005      	b.n	800428e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f919 	bl	80044ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f928 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fe fd22 	bl	8002d04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b80      	cmp	r3, #128	; 0x80
 80042cc:	d10e      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d107      	bne.n	80042ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fa6b 	bl	80047c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b40      	cmp	r3, #64	; 0x40
 80042f8:	d10e      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d107      	bne.n	8004318 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8ec 	bl	80044f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b20      	cmp	r3, #32
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d107      	bne.n	8004344 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0220 	mvn.w	r2, #32
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fa36 	bl	80047b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800435c:	2b01      	cmp	r3, #1
 800435e:	d101      	bne.n	8004364 <HAL_TIM_ConfigClockSource+0x18>
 8004360:	2302      	movs	r3, #2
 8004362:	e0a6      	b.n	80044b2 <HAL_TIM_ConfigClockSource+0x166>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004382:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800438a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d067      	beq.n	800446c <HAL_TIM_ConfigClockSource+0x120>
 800439c:	2b40      	cmp	r3, #64	; 0x40
 800439e:	d80b      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x6c>
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d073      	beq.n	800448c <HAL_TIM_ConfigClockSource+0x140>
 80043a4:	2b10      	cmp	r3, #16
 80043a6:	d802      	bhi.n	80043ae <HAL_TIM_ConfigClockSource+0x62>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d06f      	beq.n	800448c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043ac:	e078      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d06c      	beq.n	800448c <HAL_TIM_ConfigClockSource+0x140>
 80043b2:	2b30      	cmp	r3, #48	; 0x30
 80043b4:	d06a      	beq.n	800448c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043b6:	e073      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043b8:	2b70      	cmp	r3, #112	; 0x70
 80043ba:	d00d      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0x8c>
 80043bc:	2b70      	cmp	r3, #112	; 0x70
 80043be:	d804      	bhi.n	80043ca <HAL_TIM_ConfigClockSource+0x7e>
 80043c0:	2b50      	cmp	r3, #80	; 0x50
 80043c2:	d033      	beq.n	800442c <HAL_TIM_ConfigClockSource+0xe0>
 80043c4:	2b60      	cmp	r3, #96	; 0x60
 80043c6:	d041      	beq.n	800444c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80043c8:	e06a      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d066      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x152>
 80043d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d4:	d017      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80043d6:	e063      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6899      	ldr	r1, [r3, #8]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f000 f965 	bl	80046b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	609a      	str	r2, [r3, #8]
      break;
 8004404:	e04c      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6899      	ldr	r1, [r3, #8]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f000 f94e 	bl	80046b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004428:	609a      	str	r2, [r3, #8]
      break;
 800442a:	e039      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	461a      	mov	r2, r3
 800443a:	f000 f8c5 	bl	80045c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2150      	movs	r1, #80	; 0x50
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f91c 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 800444a:	e029      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	461a      	mov	r2, r3
 800445a:	f000 f8e3 	bl	8004624 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2160      	movs	r1, #96	; 0x60
 8004464:	4618      	mov	r0, r3
 8004466:	f000 f90c 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 800446a:	e019      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	461a      	mov	r2, r3
 800447a:	f000 f8a5 	bl	80045c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2140      	movs	r1, #64	; 0x40
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f8fc 	bl	8004682 <TIM_ITRx_SetConfig>
      break;
 800448a:	e009      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f000 f8f3 	bl	8004682 <TIM_ITRx_SetConfig>
        break;
 800449c:	e000      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800449e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
	...

08004504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a29      	ldr	r2, [pc, #164]	; (80045bc <TIM_Base_SetConfig+0xb8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00b      	beq.n	8004534 <TIM_Base_SetConfig+0x30>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004522:	d007      	beq.n	8004534 <TIM_Base_SetConfig+0x30>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <TIM_Base_SetConfig+0xbc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_Base_SetConfig+0x30>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <TIM_Base_SetConfig+0xc0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d108      	bne.n	8004546 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <TIM_Base_SetConfig+0xb8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00b      	beq.n	8004566 <TIM_Base_SetConfig+0x62>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d007      	beq.n	8004566 <TIM_Base_SetConfig+0x62>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a19      	ldr	r2, [pc, #100]	; (80045c0 <TIM_Base_SetConfig+0xbc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <TIM_Base_SetConfig+0x62>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <TIM_Base_SetConfig+0xc0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d108      	bne.n	8004578 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4313      	orrs	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a07      	ldr	r2, [pc, #28]	; (80045bc <TIM_Base_SetConfig+0xb8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d103      	bne.n	80045ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	615a      	str	r2, [r3, #20]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	40000400 	.word	0x40000400
 80045c4:	40000800 	.word	0x40000800

080045c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b087      	sub	sp, #28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f023 0201 	bic.w	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f023 030a 	bic.w	r3, r3, #10
 8004604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4313      	orrs	r3, r2
 800460c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	621a      	str	r2, [r3, #32]
}
 800461a:	bf00      	nop
 800461c:	371c      	adds	r7, #28
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f023 0210 	bic.w	r2, r3, #16
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800464e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	031b      	lsls	r3, r3, #12
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004660:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	621a      	str	r2, [r3, #32]
}
 8004678:	bf00      	nop
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004682:	b480      	push	{r7}
 8004684:	b085      	sub	sp, #20
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	f043 0307 	orr.w	r3, r3, #7
 80046a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b087      	sub	sp, #28
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]
 80046c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	021a      	lsls	r2, r3, #8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	431a      	orrs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4313      	orrs	r3, r2
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	609a      	str	r2, [r3, #8]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b085      	sub	sp, #20
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e046      	b.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004758:	d009      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a12      	ldr	r2, [pc, #72]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a10      	ldr	r2, [pc, #64]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10c      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4313      	orrs	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40000400 	.word	0x40000400
 80047ac:	40000800 	.word	0x40000800

080047b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e03f      	b.n	8004866 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fe fb60 	bl	8002ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2224      	movs	r2, #36	; 0x24
 8004804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f87d 	bl	8004918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	691a      	ldr	r2, [r3, #16]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800482c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800483c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800484c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	4613      	mov	r3, r2
 800487a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b20      	cmp	r3, #32
 8004886:	d140      	bne.n	800490a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_UART_Receive_IT+0x26>
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e039      	b.n	800490c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Receive_IT+0x38>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e032      	b.n	800490c <HAL_UART_Receive_IT+0x9e>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	88fa      	ldrh	r2, [r7, #6]
 80048be:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2222      	movs	r2, #34	; 0x22
 80048ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0220 	orr.w	r2, r2, #32
 8004904:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
	...

08004918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004952:	f023 030c 	bic.w	r3, r3, #12
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	430b      	orrs	r3, r1
 800495e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699a      	ldr	r2, [r3, #24]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a2c      	ldr	r2, [pc, #176]	; (8004a2c <UART_SetConfig+0x114>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d103      	bne.n	8004988 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004980:	f7ff fa8e 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	e002      	b.n	800498e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7ff fa76 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 800498c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009a      	lsls	r2, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a4:	4a22      	ldr	r2, [pc, #136]	; (8004a30 <UART_SetConfig+0x118>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	0119      	lsls	r1, r3, #4
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009a      	lsls	r2, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c4:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <UART_SetConfig+0x118>)
 80049c6:	fba3 0302 	umull	r0, r3, r3, r2
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	2064      	movs	r0, #100	; 0x64
 80049ce:	fb00 f303 	mul.w	r3, r0, r3
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	3332      	adds	r3, #50	; 0x32
 80049d8:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <UART_SetConfig+0x118>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049e4:	4419      	add	r1, r3
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4613      	mov	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	4413      	add	r3, r2
 80049ee:	009a      	lsls	r2, r3, #2
 80049f0:	441a      	add	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <UART_SetConfig+0x118>)
 80049fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2064      	movs	r0, #100	; 0x64
 8004a06:	fb00 f303 	mul.w	r3, r0, r3
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	011b      	lsls	r3, r3, #4
 8004a0e:	3332      	adds	r3, #50	; 0x32
 8004a10:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <UART_SetConfig+0x118>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	440a      	add	r2, r1
 8004a22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40013800 	.word	0x40013800
 8004a30:	51eb851f 	.word	0x51eb851f

08004a34 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a3a:	f3ef 8305 	mrs	r3, IPSR
 8004a3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a40:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10f      	bne.n	8004a66 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a46:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4a:	607b      	str	r3, [r7, #4]
  return(result);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <osKernelInitialize+0x32>
 8004a52:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <osKernelInitialize+0x60>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d109      	bne.n	8004a6e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a66:	f06f 0305 	mvn.w	r3, #5
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e00c      	b.n	8004a88 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <osKernelInitialize+0x60>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <osKernelInitialize+0x60>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e002      	b.n	8004a88 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004a82:	f04f 33ff 	mov.w	r3, #4294967295
 8004a86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a88:	68fb      	ldr	r3, [r7, #12]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	20000030 	.word	0x20000030

08004a98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a9e:	f3ef 8305 	mrs	r3, IPSR
 8004aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8004aae:	607b      	str	r3, [r7, #4]
  return(result);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <osKernelStart+0x32>
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <osKernelStart+0x64>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d109      	bne.n	8004ad2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004abe:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8004aca:	f06f 0305 	mvn.w	r3, #5
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e00e      	b.n	8004af0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <osKernelStart+0x64>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <osKernelStart+0x64>)
 8004adc:	2202      	movs	r2, #2
 8004ade:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ae0:	f001 f926 	bl	8005d30 <vTaskStartScheduler>
      stat = osOK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e002      	b.n	8004af0 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295
 8004aee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004af0:	68fb      	ldr	r3, [r7, #12]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000030 	.word	0x20000030

08004b00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b092      	sub	sp, #72	; 0x48
 8004b04:	af04      	add	r7, sp, #16
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b10:	f3ef 8305 	mrs	r3, IPSR
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f040 8094 	bne.w	8004c46 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b22:	623b      	str	r3, [r7, #32]
  return(result);
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 808d 	bne.w	8004c46 <osThreadNew+0x146>
 8004b2c:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <osThreadNew+0x150>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d106      	bne.n	8004b42 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b34:	f3ef 8311 	mrs	r3, BASEPRI
 8004b38:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f040 8082 	bne.w	8004c46 <osThreadNew+0x146>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d07e      	beq.n	8004c46 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004b4c:	2318      	movs	r3, #24
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004b50:	2300      	movs	r3, #0
 8004b52:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004b54:	f107 031b 	add.w	r3, r7, #27
 8004b58:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d045      	beq.n	8004bf2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <osThreadNew+0x74>
        name = attr->name;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <osThreadNew+0x9a>
 8004b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8a:	2b38      	cmp	r3, #56	; 0x38
 8004b8c:	d805      	bhi.n	8004b9a <osThreadNew+0x9a>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <osThreadNew+0x9e>
        return (NULL);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e054      	b.n	8004c48 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	089b      	lsrs	r3, r3, #2
 8004bac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00e      	beq.n	8004bd4 <osThreadNew+0xd4>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b5b      	cmp	r3, #91	; 0x5b
 8004bbc:	d90a      	bls.n	8004bd4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d006      	beq.n	8004bd4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <osThreadNew+0xd4>
        mem = 1;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd2:	e010      	b.n	8004bf6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10c      	bne.n	8004bf6 <osThreadNew+0xf6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d108      	bne.n	8004bf6 <osThreadNew+0xf6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <osThreadNew+0xf6>
          mem = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf0:	e001      	b.n	8004bf6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d110      	bne.n	8004c1e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c04:	9202      	str	r2, [sp, #8]
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fec4 	bl	80059a0 <xTaskCreateStatic>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e013      	b.n	8004c46 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d110      	bne.n	8004c46 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	f107 0314 	add.w	r3, r7, #20
 8004c2c:	9301      	str	r3, [sp, #4]
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 ff0b 	bl	8005a52 <xTaskCreate>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d001      	beq.n	8004c46 <osThreadNew+0x146>
          hTask = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c46:	697b      	ldr	r3, [r7, #20]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3738      	adds	r7, #56	; 0x38
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	20000030 	.word	0x20000030

08004c54 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c5c:	f3ef 8305 	mrs	r3, IPSR
 8004c60:	613b      	str	r3, [r7, #16]
  return(result);
 8004c62:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10f      	bne.n	8004c88 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c68:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <osDelay+0x34>
 8004c74:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <osDelay+0x58>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d109      	bne.n	8004c90 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c80:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <osDelay+0x3c>
    stat = osErrorISR;
 8004c88:	f06f 0305 	mvn.w	r3, #5
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e007      	b.n	8004ca0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 f814 	bl	8005cc8 <vTaskDelay>
    }
  }

  return (stat);
 8004ca0:	697b      	ldr	r3, [r7, #20]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000030 	.word	0x20000030

08004cb0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08c      	sub	sp, #48	; 0x30
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc0:	f3ef 8305 	mrs	r3, IPSR
 8004cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cc6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d170      	bne.n	8004dae <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ccc:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d16a      	bne.n	8004dae <osMessageQueueNew+0xfe>
 8004cd8:	4b37      	ldr	r3, [pc, #220]	; (8004db8 <osMessageQueueNew+0x108>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d105      	bne.n	8004cec <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ce4:	613b      	str	r3, [r7, #16]
  return(result);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d160      	bne.n	8004dae <osMessageQueueNew+0xfe>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d05d      	beq.n	8004dae <osMessageQueueNew+0xfe>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d05a      	beq.n	8004dae <osMessageQueueNew+0xfe>
    mem = -1;
 8004cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d029      	beq.n	8004d58 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d012      	beq.n	8004d32 <osMessageQueueNew+0x82>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b4f      	cmp	r3, #79	; 0x4f
 8004d12:	d90e      	bls.n	8004d32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <osMessageQueueNew+0x82>
        mem = 1;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	623b      	str	r3, [r7, #32]
 8004d30:	e014      	b.n	8004d5c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d110      	bne.n	8004d5c <osMessageQueueNew+0xac>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10c      	bne.n	8004d5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <osMessageQueueNew+0xac>
          mem = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	623b      	str	r3, [r7, #32]
 8004d56:	e001      	b.n	8004d5c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d10c      	bne.n	8004d7c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6899      	ldr	r1, [r3, #8]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f96c 	bl	8005050 <xQueueGenericCreateStatic>
 8004d78:	6278      	str	r0, [r7, #36]	; 0x24
 8004d7a:	e008      	b.n	8004d8e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d105      	bne.n	8004d8e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004d82:	2200      	movs	r2, #0
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f9d4 	bl	8005134 <xQueueGenericCreate>
 8004d8c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00c      	beq.n	8004dae <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <osMessageQueueNew+0xf2>
        name = attr->name;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	e001      	b.n	8004da6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004da6:	69f9      	ldr	r1, [r7, #28]
 8004da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004daa:	f000 fd9d 	bl	80058e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000030 	.word	0x20000030

08004dbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a06      	ldr	r2, [pc, #24]	; (8004de4 <vApplicationGetIdleTaskMemory+0x28>)
 8004dcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4a05      	ldr	r2, [pc, #20]	; (8004de8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004dd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2280      	movs	r2, #128	; 0x80
 8004dd8:	601a      	str	r2, [r3, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr
 8004de4:	20000034 	.word	0x20000034
 8004de8:	20000090 	.word	0x20000090

08004dec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4a07      	ldr	r2, [pc, #28]	; (8004e18 <vApplicationGetTimerTaskMemory+0x2c>)
 8004dfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a06      	ldr	r2, [pc, #24]	; (8004e1c <vApplicationGetTimerTaskMemory+0x30>)
 8004e02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000290 	.word	0x20000290
 8004e1c:	200002ec 	.word	0x200002ec

08004e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f103 0208 	add.w	r2, r3, #8
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f04f 32ff 	mov.w	r2, #4294967295
 8004e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f103 0208 	add.w	r2, r3, #8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f103 0208 	add.w	r2, r3, #8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc80      	pop	{r7}
 8004e5c:	4770      	bx	lr

08004e5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr

08004e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d103      	bne.n	8004edc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e00c      	b.n	8004ef6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e002      	b.n	8004eea <vListInsert+0x2e>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d2f6      	bcs.n	8004ee4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6892      	ldr	r2, [r2, #8]
 8004f42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6852      	ldr	r2, [r2, #4]
 8004f4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d103      	bne.n	8004f60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	1e5a      	subs	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr
	...

08004f80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d109      	bne.n	8004fa8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	e7fe      	b.n	8004fa6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004fa8:	f001 ffd6 	bl	8006f58 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb4:	68f9      	ldr	r1, [r7, #12]
 8004fb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
 8004fbc:	441a      	add	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	441a      	add	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	22ff      	movs	r2, #255	; 0xff
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	22ff      	movs	r2, #255	; 0xff
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d114      	bne.n	8005028 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d01a      	beq.n	800503c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3310      	adds	r3, #16
 800500a:	4618      	mov	r0, r3
 800500c:	f001 f914 	bl	8006238 <xTaskRemoveFromEventList>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d012      	beq.n	800503c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <xQueueGenericReset+0xcc>)
 8005018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	e009      	b.n	800503c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	3310      	adds	r3, #16
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff fef7 	bl	8004e20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3324      	adds	r3, #36	; 0x24
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fef2 	bl	8004e20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800503c:	f001 ffba 	bl	8006fb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005040:	2301      	movs	r3, #1
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	e000ed04 	.word	0xe000ed04

08005050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08e      	sub	sp, #56	; 0x38
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d109      	bne.n	8005078 <xQueueGenericCreateStatic+0x28>
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
 8005076:	e7fe      	b.n	8005076 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <xQueueGenericCreateStatic+0x42>
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
 8005090:	e7fe      	b.n	8005090 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <xQueueGenericCreateStatic+0x4e>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <xQueueGenericCreateStatic+0x52>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <xQueueGenericCreateStatic+0x54>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <xQueueGenericCreateStatic+0x6c>
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	e7fe      	b.n	80050ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <xQueueGenericCreateStatic+0x78>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <xQueueGenericCreateStatic+0x7c>
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <xQueueGenericCreateStatic+0x7e>
 80050cc:	2300      	movs	r3, #0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <xQueueGenericCreateStatic+0x96>
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	61fb      	str	r3, [r7, #28]
 80050e4:	e7fe      	b.n	80050e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050e6:	2350      	movs	r3, #80	; 0x50
 80050e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b50      	cmp	r3, #80	; 0x50
 80050ee:	d009      	beq.n	8005104 <xQueueGenericCreateStatic+0xb4>
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	e7fe      	b.n	8005102 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	4613      	mov	r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f842 	bl	80051ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800512a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800512c:	4618      	mov	r0, r3
 800512e:	3730      	adds	r7, #48	; 0x30
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	4613      	mov	r3, r2
 8005140:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <xQueueGenericCreate+0x28>
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	e7fe      	b.n	800515a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d102      	bne.n	8005168 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	e004      	b.n	8005172 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	fb02 f303 	mul.w	r3, r2, r3
 8005170:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3350      	adds	r3, #80	; 0x50
 8005176:	4618      	mov	r0, r3
 8005178:	f001 ffe4 	bl	8007144 <pvPortMalloc>
 800517c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00f      	beq.n	80051a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	3350      	adds	r3, #80	; 0x50
 8005188:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005192:	79fa      	ldrb	r2, [r7, #7]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f000 f805 	bl	80051ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80051a4:	69bb      	ldr	r3, [r7, #24]
	}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e002      	b.n	80051d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051dc:	2101      	movs	r1, #1
 80051de:	69b8      	ldr	r0, [r7, #24]
 80051e0:	f7ff fece 	bl	8004f80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08e      	sub	sp, #56	; 0x38
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005202:	2300      	movs	r3, #0
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <xQueueGenericSend+0x30>
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	62bb      	str	r3, [r7, #40]	; 0x28
 8005222:	e7fe      	b.n	8005222 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d103      	bne.n	8005232 <xQueueGenericSend+0x3e>
 800522a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <xQueueGenericSend+0x42>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <xQueueGenericSend+0x44>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d109      	bne.n	8005250 <xQueueGenericSend+0x5c>
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	e7fe      	b.n	800524e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d103      	bne.n	800525e <xQueueGenericSend+0x6a>
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <xQueueGenericSend+0x6e>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <xQueueGenericSend+0x70>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d109      	bne.n	800527c <xQueueGenericSend+0x88>
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	623b      	str	r3, [r7, #32]
 800527a:	e7fe      	b.n	800527a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800527c:	f001 f996 	bl	80065ac <xTaskGetSchedulerState>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <xQueueGenericSend+0x98>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <xQueueGenericSend+0x9c>
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <xQueueGenericSend+0x9e>
 8005290:	2300      	movs	r3, #0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <xQueueGenericSend+0xb6>
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	e7fe      	b.n	80052a8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052aa:	f001 fe55 	bl	8006f58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d302      	bcc.n	80052c0 <xQueueGenericSend+0xcc>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d129      	bne.n	8005314 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	68b9      	ldr	r1, [r7, #8]
 80052c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052c6:	f000 f9ff 	bl	80056c8 <prvCopyDataToQueue>
 80052ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d010      	beq.n	80052f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	3324      	adds	r3, #36	; 0x24
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 ffad 	bl	8006238 <xTaskRemoveFromEventList>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d013      	beq.n	800530c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052e4:	4b3f      	ldr	r3, [pc, #252]	; (80053e4 <xQueueGenericSend+0x1f0>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	e00a      	b.n	800530c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052fc:	4b39      	ldr	r3, [pc, #228]	; (80053e4 <xQueueGenericSend+0x1f0>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800530c:	f001 fe52 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 8005310:	2301      	movs	r3, #1
 8005312:	e063      	b.n	80053dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800531a:	f001 fe4b 	bl	8006fb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800531e:	2300      	movs	r3, #0
 8005320:	e05c      	b.n	80053dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005324:	2b00      	cmp	r3, #0
 8005326:	d106      	bne.n	8005336 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	4618      	mov	r0, r3
 800532e:	f000 ffe5 	bl	80062fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005332:	2301      	movs	r3, #1
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005336:	f001 fe3d 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800533a:	f000 fd5d 	bl	8005df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800533e:	f001 fe0b 	bl	8006f58 <vPortEnterCritical>
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005348:	b25b      	sxtb	r3, r3
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d103      	bne.n	8005358 <xQueueGenericSend+0x164>
 8005350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535e:	b25b      	sxtb	r3, r3
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005364:	d103      	bne.n	800536e <xQueueGenericSend+0x17a>
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800536e:	f001 fe21 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005372:	1d3a      	adds	r2, r7, #4
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	4611      	mov	r1, r2
 800537a:	4618      	mov	r0, r3
 800537c:	f000 ffd4 	bl	8006328 <xTaskCheckForTimeOut>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d124      	bne.n	80053d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005388:	f000 fa96 	bl	80058b8 <prvIsQueueFull>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d018      	beq.n	80053c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	3310      	adds	r3, #16
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	4611      	mov	r1, r2
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fefe 	bl	800619c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053a2:	f000 fa21 	bl	80057e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053a6:	f000 fd35 	bl	8005e14 <xTaskResumeAll>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f47f af7c 	bne.w	80052aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80053b2:	4b0c      	ldr	r3, [pc, #48]	; (80053e4 <xQueueGenericSend+0x1f0>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	e772      	b.n	80052aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c6:	f000 fa0f 	bl	80057e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ca:	f000 fd23 	bl	8005e14 <xTaskResumeAll>
 80053ce:	e76c      	b.n	80052aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d2:	f000 fa09 	bl	80057e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053d6:	f000 fd1d 	bl	8005e14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053da:	2300      	movs	r3, #0
		}
	}
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3738      	adds	r7, #56	; 0x38
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08e      	sub	sp, #56	; 0x38
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <xQueueGenericSendFromISR+0x2c>
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
 8005412:	e7fe      	b.n	8005412 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <xQueueGenericSendFromISR+0x3a>
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <xQueueGenericSendFromISR+0x3e>
 8005422:	2301      	movs	r3, #1
 8005424:	e000      	b.n	8005428 <xQueueGenericSendFromISR+0x40>
 8005426:	2300      	movs	r3, #0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <xQueueGenericSendFromISR+0x58>
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	623b      	str	r3, [r7, #32]
 800543e:	e7fe      	b.n	800543e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d103      	bne.n	800544e <xQueueGenericSendFromISR+0x66>
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <xQueueGenericSendFromISR+0x6a>
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <xQueueGenericSendFromISR+0x6c>
 8005452:	2300      	movs	r3, #0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <xQueueGenericSendFromISR+0x84>
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e7fe      	b.n	800546a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800546c:	f001 fe2e 	bl	80070cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005470:	f3ef 8211 	mrs	r2, BASEPRI
 8005474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	61ba      	str	r2, [r7, #24]
 8005486:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005488:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	429a      	cmp	r2, r3
 8005496:	d302      	bcc.n	800549e <xQueueGenericSendFromISR+0xb6>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d12c      	bne.n	80054f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ae:	f000 f90b 	bl	80056c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d112      	bne.n	80054e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d016      	beq.n	80054f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 feb5 	bl	8006238 <xTaskRemoveFromEventList>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00e      	beq.n	80054f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e007      	b.n	80054f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054e6:	3301      	adds	r3, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	b25a      	sxtb	r2, r3
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054f2:	2301      	movs	r3, #1
 80054f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80054f6:	e001      	b.n	80054fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005508:	4618      	mov	r0, r3
 800550a:	3738      	adds	r7, #56	; 0x38
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08c      	sub	sp, #48	; 0x30
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800551c:	2300      	movs	r3, #0
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <xQueueReceive+0x2e>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	e7fe      	b.n	800553c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <xQueueReceive+0x3c>
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <xQueueReceive+0x40>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <xQueueReceive+0x42>
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <xQueueReceive+0x5a>
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	e7fe      	b.n	8005568 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800556a:	f001 f81f 	bl	80065ac <xTaskGetSchedulerState>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <xQueueReceive+0x6a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <xQueueReceive+0x6e>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <xQueueReceive+0x70>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d109      	bne.n	8005598 <xQueueReceive+0x88>
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	e7fe      	b.n	8005596 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005598:	f001 fcde 	bl	8006f58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d01f      	beq.n	80055e8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ac:	f000 f8f6 	bl	800579c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	1e5a      	subs	r2, r3, #1
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00f      	beq.n	80055e0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	3310      	adds	r3, #16
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fe37 	bl	8006238 <xTaskRemoveFromEventList>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055d0:	4b3c      	ldr	r3, [pc, #240]	; (80056c4 <xQueueReceive+0x1b4>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055e0:	f001 fce8 	bl	8006fb4 <vPortExitCritical>
				return pdPASS;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e069      	b.n	80056bc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055ee:	f001 fce1 	bl	8006fb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e062      	b.n	80056bc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d106      	bne.n	800560a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055fc:	f107 0310 	add.w	r3, r7, #16
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fe7b 	bl	80062fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800560a:	f001 fcd3 	bl	8006fb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800560e:	f000 fbf3 	bl	8005df8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005612:	f001 fca1 	bl	8006f58 <vPortEnterCritical>
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800561c:	b25b      	sxtb	r3, r3
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d103      	bne.n	800562c <xQueueReceive+0x11c>
 8005624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005632:	b25b      	sxtb	r3, r3
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d103      	bne.n	8005642 <xQueueReceive+0x132>
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005642:	f001 fcb7 	bl	8006fb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005646:	1d3a      	adds	r2, r7, #4
 8005648:	f107 0310 	add.w	r3, r7, #16
 800564c:	4611      	mov	r1, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f000 fe6a 	bl	8006328 <xTaskCheckForTimeOut>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d123      	bne.n	80056a2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800565a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800565c:	f000 f916 	bl	800588c <prvIsQueueEmpty>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d017      	beq.n	8005696 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	3324      	adds	r3, #36	; 0x24
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	4611      	mov	r1, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fd94 	bl	800619c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005676:	f000 f8b7 	bl	80057e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800567a:	f000 fbcb 	bl	8005e14 <xTaskResumeAll>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d189      	bne.n	8005598 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005684:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <xQueueReceive+0x1b4>)
 8005686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	e780      	b.n	8005598 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005698:	f000 f8a6 	bl	80057e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800569c:	f000 fbba 	bl	8005e14 <xTaskResumeAll>
 80056a0:	e77a      	b.n	8005598 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a4:	f000 f8a0 	bl	80057e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056a8:	f000 fbb4 	bl	8005e14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ae:	f000 f8ed 	bl	800588c <prvIsQueueEmpty>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f43f af6f 	beq.w	8005598 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3730      	adds	r7, #48	; 0x30
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10d      	bne.n	8005702 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d14d      	bne.n	800578a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 ff78 	bl	80065e8 <xTaskPriorityDisinherit>
 80056f8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	605a      	str	r2, [r3, #4]
 8005700:	e043      	b.n	800578a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d119      	bne.n	800573c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6898      	ldr	r0, [r3, #8]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	461a      	mov	r2, r3
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	f001 ff0e 	bl	8007534 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	441a      	add	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	429a      	cmp	r2, r3
 8005730:	d32b      	bcc.n	800578a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	609a      	str	r2, [r3, #8]
 800573a:	e026      	b.n	800578a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	68d8      	ldr	r0, [r3, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	461a      	mov	r2, r3
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	f001 fef4 	bl	8007534 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	425b      	negs	r3, r3
 8005756:	441a      	add	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d207      	bcs.n	8005778 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	425b      	negs	r3, r3
 8005772:	441a      	add	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d105      	bne.n	800578a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	3b01      	subs	r3, #1
 8005788:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005792:	697b      	ldr	r3, [r7, #20]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d018      	beq.n	80057e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	441a      	add	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d303      	bcc.n	80057d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68d9      	ldr	r1, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	461a      	mov	r2, r3
 80057da:	6838      	ldr	r0, [r7, #0]
 80057dc:	f001 feaa 	bl	8007534 <memcpy>
	}
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057f0:	f001 fbb2 	bl	8006f58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057fc:	e011      	b.n	8005822 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	2b00      	cmp	r3, #0
 8005804:	d012      	beq.n	800582c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3324      	adds	r3, #36	; 0x24
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fd14 	bl	8006238 <xTaskRemoveFromEventList>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005816:	f000 fde7 	bl	80063e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800581a:	7bfb      	ldrb	r3, [r7, #15]
 800581c:	3b01      	subs	r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	dce9      	bgt.n	80057fe <prvUnlockQueue+0x16>
 800582a:	e000      	b.n	800582e <prvUnlockQueue+0x46>
					break;
 800582c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	22ff      	movs	r2, #255	; 0xff
 8005832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005836:	f001 fbbd 	bl	8006fb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800583a:	f001 fb8d 	bl	8006f58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005844:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005846:	e011      	b.n	800586c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d012      	beq.n	8005876 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3310      	adds	r3, #16
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fcef 	bl	8006238 <xTaskRemoveFromEventList>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005860:	f000 fdc2 	bl	80063e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	3b01      	subs	r3, #1
 8005868:	b2db      	uxtb	r3, r3
 800586a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800586c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005870:	2b00      	cmp	r3, #0
 8005872:	dce9      	bgt.n	8005848 <prvUnlockQueue+0x60>
 8005874:	e000      	b.n	8005878 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005876:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	22ff      	movs	r2, #255	; 0xff
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005880:	f001 fb98 	bl	8006fb4 <vPortExitCritical>
}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005894:	f001 fb60 	bl	8006f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	e001      	b.n	80058aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058aa:	f001 fb83 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 80058ae:	68fb      	ldr	r3, [r7, #12]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058c0:	f001 fb4a 	bl	8006f58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d102      	bne.n	80058d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	e001      	b.n	80058da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058da:	f001 fb6b 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 80058de:	68fb      	ldr	r3, [r7, #12]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e014      	b.n	8005922 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058f8:	4a0e      	ldr	r2, [pc, #56]	; (8005934 <vQueueAddToRegistry+0x4c>)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005904:	490b      	ldr	r1, [pc, #44]	; (8005934 <vQueueAddToRegistry+0x4c>)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <vQueueAddToRegistry+0x4c>)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4413      	add	r3, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800591a:	e005      	b.n	8005928 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b07      	cmp	r3, #7
 8005926:	d9e7      	bls.n	80058f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	200024c4 	.word	0x200024c4

08005938 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005948:	f001 fb06 	bl	8006f58 <vPortEnterCritical>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005952:	b25b      	sxtb	r3, r3
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d103      	bne.n	8005962 <vQueueWaitForMessageRestricted+0x2a>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005968:	b25b      	sxtb	r3, r3
 800596a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596e:	d103      	bne.n	8005978 <vQueueWaitForMessageRestricted+0x40>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005978:	f001 fb1c 	bl	8006fb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	2b00      	cmp	r3, #0
 8005982:	d106      	bne.n	8005992 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	3324      	adds	r3, #36	; 0x24
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fc29 	bl	80061e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005992:	6978      	ldr	r0, [r7, #20]
 8005994:	f7ff ff28 	bl	80057e8 <prvUnlockQueue>
	}
 8005998:	bf00      	nop
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08e      	sub	sp, #56	; 0x38
 80059a4:	af04      	add	r7, sp, #16
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <xTaskCreateStatic+0x28>
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	623b      	str	r3, [r7, #32]
 80059c6:	e7fe      	b.n	80059c6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <xTaskCreateStatic+0x42>
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	e7fe      	b.n	80059e0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059e2:	235c      	movs	r3, #92	; 0x5c
 80059e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b5c      	cmp	r3, #92	; 0x5c
 80059ea:	d009      	beq.n	8005a00 <xTaskCreateStatic+0x60>
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	e7fe      	b.n	80059fe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01e      	beq.n	8005a44 <xTaskCreateStatic+0xa4>
 8005a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01b      	beq.n	8005a44 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9303      	str	r3, [sp, #12]
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	9302      	str	r3, [sp, #8]
 8005a26:	f107 0314 	add.w	r3, r7, #20
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f850 	bl	8005adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a3e:	f000 f8d3 	bl	8005be8 <prvAddNewTaskToReadyList>
 8005a42:	e001      	b.n	8005a48 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a48:	697b      	ldr	r3, [r7, #20]
	}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3728      	adds	r7, #40	; 0x28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b08c      	sub	sp, #48	; 0x30
 8005a56:	af04      	add	r7, sp, #16
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	603b      	str	r3, [r7, #0]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 fb6c 	bl	8007144 <pvPortMalloc>
 8005a6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00e      	beq.n	8005a92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a74:	205c      	movs	r0, #92	; 0x5c
 8005a76:	f001 fb65 	bl	8007144 <pvPortMalloc>
 8005a7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
 8005a88:	e005      	b.n	8005a96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f001 fc1c 	bl	80072c8 <vPortFree>
 8005a90:	e001      	b.n	8005a96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d017      	beq.n	8005acc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005aa4:	88fa      	ldrh	r2, [r7, #6]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9303      	str	r3, [sp, #12]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	9302      	str	r3, [sp, #8]
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f80e 	bl	8005adc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ac0:	69f8      	ldr	r0, [r7, #28]
 8005ac2:	f000 f891 	bl	8005be8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e002      	b.n	8005ad2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	461a      	mov	r2, r3
 8005af4:	21a5      	movs	r1, #165	; 0xa5
 8005af6:	f001 fd28 	bl	800754a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b04:	3b01      	subs	r3, #1
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d009      	beq.n	8005b32 <prvInitialiseNewTask+0x56>
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	e7fe      	b.n	8005b30 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	e012      	b.n	8005b5e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	7819      	ldrb	r1, [r3, #0]
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	4413      	add	r3, r2
 8005b46:	3334      	adds	r3, #52	; 0x34
 8005b48:	460a      	mov	r2, r1
 8005b4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	4413      	add	r3, r2
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d006      	beq.n	8005b66 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b0f      	cmp	r3, #15
 8005b62:	d9e9      	bls.n	8005b38 <prvInitialiseNewTask+0x5c>
 8005b64:	e000      	b.n	8005b68 <prvInitialiseNewTask+0x8c>
		{
			break;
 8005b66:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b72:	2b37      	cmp	r3, #55	; 0x37
 8005b74:	d901      	bls.n	8005b7a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b76:	2337      	movs	r3, #55	; 0x37
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b88:	2200      	movs	r2, #0
 8005b8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	3304      	adds	r3, #4
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff f964 	bl	8004e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	3318      	adds	r3, #24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff f95f 	bl	8004e5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	2200      	movs	r2, #0
 8005bba:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	68f9      	ldr	r1, [r7, #12]
 8005bc8:	69b8      	ldr	r0, [r7, #24]
 8005bca:	f001 f8d7 	bl	8006d7c <pxPortInitialiseStack>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005be0:	bf00      	nop
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bf0:	f001 f9b2 	bl	8006f58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bf4:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <prvAddNewTaskToReadyList+0xc4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	4a2c      	ldr	r2, [pc, #176]	; (8005cac <prvAddNewTaskToReadyList+0xc4>)
 8005bfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bfe:	4b2c      	ldr	r3, [pc, #176]	; (8005cb0 <prvAddNewTaskToReadyList+0xc8>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c06:	4a2a      	ldr	r2, [pc, #168]	; (8005cb0 <prvAddNewTaskToReadyList+0xc8>)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c0c:	4b27      	ldr	r3, [pc, #156]	; (8005cac <prvAddNewTaskToReadyList+0xc4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d110      	bne.n	8005c36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c14:	f000 fc0c 	bl	8006430 <prvInitialiseTaskLists>
 8005c18:	e00d      	b.n	8005c36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c1a:	4b26      	ldr	r3, [pc, #152]	; (8005cb4 <prvAddNewTaskToReadyList+0xcc>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c22:	4b23      	ldr	r3, [pc, #140]	; (8005cb0 <prvAddNewTaskToReadyList+0xc8>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d802      	bhi.n	8005c36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c30:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <prvAddNewTaskToReadyList+0xc8>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c36:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <prvAddNewTaskToReadyList+0xd0>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <prvAddNewTaskToReadyList+0xd0>)
 8005c3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c40:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <prvAddNewTaskToReadyList+0xd0>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	; (8005cbc <prvAddNewTaskToReadyList+0xd4>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d903      	bls.n	8005c5c <prvAddNewTaskToReadyList+0x74>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	4a18      	ldr	r2, [pc, #96]	; (8005cbc <prvAddNewTaskToReadyList+0xd4>)
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <prvAddNewTaskToReadyList+0xd8>)
 8005c6a:	441a      	add	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f7ff f8ff 	bl	8004e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c78:	f001 f99c 	bl	8006fb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <prvAddNewTaskToReadyList+0xcc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00e      	beq.n	8005ca2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c84:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <prvAddNewTaskToReadyList+0xc8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d207      	bcs.n	8005ca2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <prvAddNewTaskToReadyList+0xdc>)
 8005c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000bc0 	.word	0x20000bc0
 8005cb0:	200006ec 	.word	0x200006ec
 8005cb4:	20000bcc 	.word	0x20000bcc
 8005cb8:	20000bdc 	.word	0x20000bdc
 8005cbc:	20000bc8 	.word	0x20000bc8
 8005cc0:	200006f0 	.word	0x200006f0
 8005cc4:	e000ed04 	.word	0xe000ed04

08005cc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d016      	beq.n	8005d08 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005cda:	4b13      	ldr	r3, [pc, #76]	; (8005d28 <vTaskDelay+0x60>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <vTaskDelay+0x2e>
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	e7fe      	b.n	8005cf4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005cf6:	f000 f87f 	bl	8005df8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fcdf 	bl	80066c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d02:	f000 f887 	bl	8005e14 <xTaskResumeAll>
 8005d06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d107      	bne.n	8005d1e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <vTaskDelay+0x64>)
 8005d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000be8 	.word	0x20000be8
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d3e:	463a      	mov	r2, r7
 8005d40:	1d39      	adds	r1, r7, #4
 8005d42:	f107 0308 	add.w	r3, r7, #8
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff f838 	bl	8004dbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	9202      	str	r2, [sp, #8]
 8005d54:	9301      	str	r3, [sp, #4]
 8005d56:	2300      	movs	r3, #0
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	460a      	mov	r2, r1
 8005d5e:	4920      	ldr	r1, [pc, #128]	; (8005de0 <vTaskStartScheduler+0xb0>)
 8005d60:	4820      	ldr	r0, [pc, #128]	; (8005de4 <vTaskStartScheduler+0xb4>)
 8005d62:	f7ff fe1d 	bl	80059a0 <xTaskCreateStatic>
 8005d66:	4602      	mov	r2, r0
 8005d68:	4b1f      	ldr	r3, [pc, #124]	; (8005de8 <vTaskStartScheduler+0xb8>)
 8005d6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d6c:	4b1e      	ldr	r3, [pc, #120]	; (8005de8 <vTaskStartScheduler+0xb8>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d74:	2301      	movs	r3, #1
 8005d76:	617b      	str	r3, [r7, #20]
 8005d78:	e001      	b.n	8005d7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d102      	bne.n	8005d8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d84:	f000 fcf0 	bl	8006768 <xTimerCreateTimerTask>
 8005d88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d115      	bne.n	8005dbc <vTaskStartScheduler+0x8c>
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <vTaskStartScheduler+0xbc>)
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005daa:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <vTaskStartScheduler+0xc0>)
 8005dac:	2201      	movs	r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005db0:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <vTaskStartScheduler+0xc4>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005db6:	f001 f85f 	bl	8006e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dba:	e00d      	b.n	8005dd8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc2:	d109      	bne.n	8005dd8 <vTaskStartScheduler+0xa8>
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	e7fe      	b.n	8005dd6 <vTaskStartScheduler+0xa6>
}
 8005dd8:	bf00      	nop
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	08007634 	.word	0x08007634
 8005de4:	08006401 	.word	0x08006401
 8005de8:	20000be4 	.word	0x20000be4
 8005dec:	20000be0 	.word	0x20000be0
 8005df0:	20000bcc 	.word	0x20000bcc
 8005df4:	20000bc4 	.word	0x20000bc4

08005df8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005dfc:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <vTaskSuspendAll+0x18>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	4a03      	ldr	r2, [pc, #12]	; (8005e10 <vTaskSuspendAll+0x18>)
 8005e04:	6013      	str	r3, [r2, #0]
}
 8005e06:	bf00      	nop
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	20000be8 	.word	0x20000be8

08005e14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e22:	4b41      	ldr	r3, [pc, #260]	; (8005f28 <xTaskResumeAll+0x114>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <xTaskResumeAll+0x2a>
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	e7fe      	b.n	8005e3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e3e:	f001 f88b 	bl	8006f58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e42:	4b39      	ldr	r3, [pc, #228]	; (8005f28 <xTaskResumeAll+0x114>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	4a37      	ldr	r2, [pc, #220]	; (8005f28 <xTaskResumeAll+0x114>)
 8005e4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4c:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <xTaskResumeAll+0x114>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d162      	bne.n	8005f1a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e54:	4b35      	ldr	r3, [pc, #212]	; (8005f2c <xTaskResumeAll+0x118>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05e      	beq.n	8005f1a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e5c:	e02f      	b.n	8005ebe <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005e5e:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <xTaskResumeAll+0x11c>)
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3318      	adds	r3, #24
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff f85e 	bl	8004f2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff f859 	bl	8004f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	4b2d      	ldr	r3, [pc, #180]	; (8005f34 <xTaskResumeAll+0x120>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d903      	bls.n	8005e8e <xTaskResumeAll+0x7a>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <xTaskResumeAll+0x120>)
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4a27      	ldr	r2, [pc, #156]	; (8005f38 <xTaskResumeAll+0x124>)
 8005e9c:	441a      	add	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3304      	adds	r3, #4
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f7fe ffe6 	bl	8004e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eae:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <xTaskResumeAll+0x128>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005eb8:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <xTaskResumeAll+0x12c>)
 8005eba:	2201      	movs	r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <xTaskResumeAll+0x11c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1cb      	bne.n	8005e5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ecc:	f000 fb4a 	bl	8006564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005ed0:	4b1c      	ldr	r3, [pc, #112]	; (8005f44 <xTaskResumeAll+0x130>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d010      	beq.n	8005efe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005edc:	f000 f844 	bl	8005f68 <xTaskIncrementTick>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005ee6:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <xTaskResumeAll+0x12c>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1f1      	bne.n	8005edc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005ef8:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <xTaskResumeAll+0x130>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <xTaskResumeAll+0x12c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d009      	beq.n	8005f1a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <xTaskResumeAll+0x134>)
 8005f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f1a:	f001 f84b 	bl	8006fb4 <vPortExitCritical>

	return xAlreadyYielded;
 8005f1e:	68bb      	ldr	r3, [r7, #8]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20000be8 	.word	0x20000be8
 8005f2c:	20000bc0 	.word	0x20000bc0
 8005f30:	20000b80 	.word	0x20000b80
 8005f34:	20000bc8 	.word	0x20000bc8
 8005f38:	200006f0 	.word	0x200006f0
 8005f3c:	200006ec 	.word	0x200006ec
 8005f40:	20000bd4 	.word	0x20000bd4
 8005f44:	20000bd0 	.word	0x20000bd0
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f52:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <xTaskGetTickCount+0x18>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f58:	687b      	ldr	r3, [r7, #4]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr
 8005f64:	20000bc4 	.word	0x20000bc4

08005f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f72:	4b51      	ldr	r3, [pc, #324]	; (80060b8 <xTaskIncrementTick+0x150>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 808d 	bne.w	8006096 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f7c:	4b4f      	ldr	r3, [pc, #316]	; (80060bc <xTaskIncrementTick+0x154>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3301      	adds	r3, #1
 8005f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f84:	4a4d      	ldr	r2, [pc, #308]	; (80060bc <xTaskIncrementTick+0x154>)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d11f      	bne.n	8005fd0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f90:	4b4b      	ldr	r3, [pc, #300]	; (80060c0 <xTaskIncrementTick+0x158>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <xTaskIncrementTick+0x46>
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	e7fe      	b.n	8005fac <xTaskIncrementTick+0x44>
 8005fae:	4b44      	ldr	r3, [pc, #272]	; (80060c0 <xTaskIncrementTick+0x158>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	4b43      	ldr	r3, [pc, #268]	; (80060c4 <xTaskIncrementTick+0x15c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a41      	ldr	r2, [pc, #260]	; (80060c0 <xTaskIncrementTick+0x158>)
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4a41      	ldr	r2, [pc, #260]	; (80060c4 <xTaskIncrementTick+0x15c>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	4b41      	ldr	r3, [pc, #260]	; (80060c8 <xTaskIncrementTick+0x160>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	4a3f      	ldr	r2, [pc, #252]	; (80060c8 <xTaskIncrementTick+0x160>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	f000 faca 	bl	8006564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fd0:	4b3e      	ldr	r3, [pc, #248]	; (80060cc <xTaskIncrementTick+0x164>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d34e      	bcc.n	8006078 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fda:	4b39      	ldr	r3, [pc, #228]	; (80060c0 <xTaskIncrementTick+0x158>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <xTaskIncrementTick+0x80>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e000      	b.n	8005fea <xTaskIncrementTick+0x82>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d004      	beq.n	8005ff8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	4b37      	ldr	r3, [pc, #220]	; (80060cc <xTaskIncrementTick+0x164>)
 8005ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff4:	601a      	str	r2, [r3, #0]
					break;
 8005ff6:	e03f      	b.n	8006078 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ff8:	4b31      	ldr	r3, [pc, #196]	; (80060c0 <xTaskIncrementTick+0x158>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d203      	bcs.n	8006018 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006010:	4a2e      	ldr	r2, [pc, #184]	; (80060cc <xTaskIncrementTick+0x164>)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6013      	str	r3, [r2, #0]
						break;
 8006016:	e02f      	b.n	8006078 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	3304      	adds	r3, #4
 800601c:	4618      	mov	r0, r3
 800601e:	f7fe ff85 	bl	8004f2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	3318      	adds	r3, #24
 800602e:	4618      	mov	r0, r3
 8006030:	f7fe ff7c 	bl	8004f2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006038:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <xTaskIncrementTick+0x168>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d903      	bls.n	8006048 <xTaskIncrementTick+0xe0>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006044:	4a22      	ldr	r2, [pc, #136]	; (80060d0 <xTaskIncrementTick+0x168>)
 8006046:	6013      	str	r3, [r2, #0]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <xTaskIncrementTick+0x16c>)
 8006056:	441a      	add	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fe ff09 	bl	8004e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <xTaskIncrementTick+0x170>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	429a      	cmp	r2, r3
 8006070:	d3b3      	bcc.n	8005fda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006072:	2301      	movs	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006076:	e7b0      	b.n	8005fda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <xTaskIncrementTick+0x170>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	4915      	ldr	r1, [pc, #84]	; (80060d4 <xTaskIncrementTick+0x16c>)
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d907      	bls.n	80060a0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e004      	b.n	80060a0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006096:	4b11      	ldr	r3, [pc, #68]	; (80060dc <xTaskIncrementTick+0x174>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3301      	adds	r3, #1
 800609c:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <xTaskIncrementTick+0x174>)
 800609e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <xTaskIncrementTick+0x178>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80060a8:	2301      	movs	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80060ac:	697b      	ldr	r3, [r7, #20]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000be8 	.word	0x20000be8
 80060bc:	20000bc4 	.word	0x20000bc4
 80060c0:	20000b78 	.word	0x20000b78
 80060c4:	20000b7c 	.word	0x20000b7c
 80060c8:	20000bd8 	.word	0x20000bd8
 80060cc:	20000be0 	.word	0x20000be0
 80060d0:	20000bc8 	.word	0x20000bc8
 80060d4:	200006f0 	.word	0x200006f0
 80060d8:	200006ec 	.word	0x200006ec
 80060dc:	20000bd0 	.word	0x20000bd0
 80060e0:	20000bd4 	.word	0x20000bd4

080060e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060ea:	4b27      	ldr	r3, [pc, #156]	; (8006188 <vTaskSwitchContext+0xa4>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060f2:	4b26      	ldr	r3, [pc, #152]	; (800618c <vTaskSwitchContext+0xa8>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060f8:	e040      	b.n	800617c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80060fa:	4b24      	ldr	r3, [pc, #144]	; (800618c <vTaskSwitchContext+0xa8>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006100:	4b23      	ldr	r3, [pc, #140]	; (8006190 <vTaskSwitchContext+0xac>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e00f      	b.n	8006128 <vTaskSwitchContext+0x44>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d109      	bne.n	8006122 <vTaskSwitchContext+0x3e>
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	e7fe      	b.n	8006120 <vTaskSwitchContext+0x3c>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3b01      	subs	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	491a      	ldr	r1, [pc, #104]	; (8006194 <vTaskSwitchContext+0xb0>)
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0e5      	beq.n	8006108 <vTaskSwitchContext+0x24>
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4613      	mov	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4a13      	ldr	r2, [pc, #76]	; (8006194 <vTaskSwitchContext+0xb0>)
 8006148:	4413      	add	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	605a      	str	r2, [r3, #4]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	3308      	adds	r3, #8
 800615e:	429a      	cmp	r2, r3
 8006160:	d104      	bne.n	800616c <vTaskSwitchContext+0x88>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	605a      	str	r2, [r3, #4]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	4a09      	ldr	r2, [pc, #36]	; (8006198 <vTaskSwitchContext+0xb4>)
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	4a06      	ldr	r2, [pc, #24]	; (8006190 <vTaskSwitchContext+0xac>)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6013      	str	r3, [r2, #0]
}
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	20000be8 	.word	0x20000be8
 800618c:	20000bd4 	.word	0x20000bd4
 8006190:	20000bc8 	.word	0x20000bc8
 8006194:	200006f0 	.word	0x200006f0
 8006198:	200006ec 	.word	0x200006ec

0800619c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <vTaskPlaceOnEventList+0x24>
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	e7fe      	b.n	80061be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <vTaskPlaceOnEventList+0x44>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3318      	adds	r3, #24
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fe fe77 	bl	8004ebc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061ce:	2101      	movs	r1, #1
 80061d0:	6838      	ldr	r0, [r7, #0]
 80061d2:	f000 fa75 	bl	80066c0 <prvAddCurrentTaskToDelayedList>
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	200006ec 	.word	0x200006ec

080061e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <vTaskPlaceOnEventListRestricted+0x26>
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e7fe      	b.n	8006208 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <vTaskPlaceOnEventListRestricted+0x50>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3318      	adds	r3, #24
 8006210:	4619      	mov	r1, r3
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f7fe fe2f 	bl	8004e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800621e:	f04f 33ff 	mov.w	r3, #4294967295
 8006222:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	68b8      	ldr	r0, [r7, #8]
 8006228:	f000 fa4a 	bl	80066c0 <prvAddCurrentTaskToDelayedList>
	}
 800622c:	bf00      	nop
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	200006ec 	.word	0x200006ec

08006238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d109      	bne.n	8006262 <xTaskRemoveFromEventList+0x2a>
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e7fe      	b.n	8006260 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	3318      	adds	r3, #24
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe fe60 	bl	8004f2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800626c:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <xTaskRemoveFromEventList+0xac>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d11d      	bne.n	80062b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	3304      	adds	r3, #4
 8006278:	4618      	mov	r0, r3
 800627a:	f7fe fe57 	bl	8004f2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006282:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <xTaskRemoveFromEventList+0xb0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d903      	bls.n	8006292 <xTaskRemoveFromEventList+0x5a>
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4a16      	ldr	r2, [pc, #88]	; (80062e8 <xTaskRemoveFromEventList+0xb0>)
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4a13      	ldr	r2, [pc, #76]	; (80062ec <xTaskRemoveFromEventList+0xb4>)
 80062a0:	441a      	add	r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7fe fde4 	bl	8004e76 <vListInsertEnd>
 80062ae:	e005      	b.n	80062bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	3318      	adds	r3, #24
 80062b4:	4619      	mov	r1, r3
 80062b6:	480e      	ldr	r0, [pc, #56]	; (80062f0 <xTaskRemoveFromEventList+0xb8>)
 80062b8:	f7fe fddd 	bl	8004e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <xTaskRemoveFromEventList+0xbc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d905      	bls.n	80062d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062ce:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <xTaskRemoveFromEventList+0xc0>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	e001      	b.n	80062da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80062da:	697b      	ldr	r3, [r7, #20]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000be8 	.word	0x20000be8
 80062e8:	20000bc8 	.word	0x20000bc8
 80062ec:	200006f0 	.word	0x200006f0
 80062f0:	20000b80 	.word	0x20000b80
 80062f4:	200006ec 	.word	0x200006ec
 80062f8:	20000bd4 	.word	0x20000bd4

080062fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <vTaskInternalSetTimeOutState+0x24>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800630c:	4b05      	ldr	r3, [pc, #20]	; (8006324 <vTaskInternalSetTimeOutState+0x28>)
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	605a      	str	r2, [r3, #4]
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000bd8 	.word	0x20000bd8
 8006324:	20000bc4 	.word	0x20000bc4

08006328 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b088      	sub	sp, #32
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <xTaskCheckForTimeOut+0x24>
 8006338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	613b      	str	r3, [r7, #16]
 800634a:	e7fe      	b.n	800634a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <xTaskCheckForTimeOut+0x3e>
 8006352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006356:	f383 8811 	msr	BASEPRI, r3
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	e7fe      	b.n	8006364 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006366:	f000 fdf7 	bl	8006f58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800636a:	4b1d      	ldr	r3, [pc, #116]	; (80063e0 <xTaskCheckForTimeOut+0xb8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006382:	d102      	bne.n	800638a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006384:	2300      	movs	r3, #0
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	e023      	b.n	80063d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b15      	ldr	r3, [pc, #84]	; (80063e4 <xTaskCheckForTimeOut+0xbc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d007      	beq.n	80063a6 <xTaskCheckForTimeOut+0x7e>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	429a      	cmp	r2, r3
 800639e:	d302      	bcc.n	80063a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063a0:	2301      	movs	r3, #1
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e015      	b.n	80063d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d20b      	bcs.n	80063c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	1ad2      	subs	r2, r2, r3
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f7ff ff9d 	bl	80062fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063c2:	2300      	movs	r3, #0
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	e004      	b.n	80063d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063ce:	2301      	movs	r3, #1
 80063d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063d2:	f000 fdef 	bl	8006fb4 <vPortExitCritical>

	return xReturn;
 80063d6:	69fb      	ldr	r3, [r7, #28]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000bc4 	.word	0x20000bc4
 80063e4:	20000bd8 	.word	0x20000bd8

080063e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <vTaskMissedYield+0x14>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000bd4 	.word	0x20000bd4

08006400 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006408:	f000 f852 	bl	80064b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <prvIdleTask+0x28>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d9f9      	bls.n	8006408 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006414:	4b05      	ldr	r3, [pc, #20]	; (800642c <prvIdleTask+0x2c>)
 8006416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641a:	601a      	str	r2, [r3, #0]
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006424:	e7f0      	b.n	8006408 <prvIdleTask+0x8>
 8006426:	bf00      	nop
 8006428:	200006f0 	.word	0x200006f0
 800642c:	e000ed04 	.word	0xe000ed04

08006430 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006436:	2300      	movs	r3, #0
 8006438:	607b      	str	r3, [r7, #4]
 800643a:	e00c      	b.n	8006456 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4a12      	ldr	r2, [pc, #72]	; (8006490 <prvInitialiseTaskLists+0x60>)
 8006448:	4413      	add	r3, r2
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fce8 	bl	8004e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3301      	adds	r3, #1
 8006454:	607b      	str	r3, [r7, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b37      	cmp	r3, #55	; 0x37
 800645a:	d9ef      	bls.n	800643c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800645c:	480d      	ldr	r0, [pc, #52]	; (8006494 <prvInitialiseTaskLists+0x64>)
 800645e:	f7fe fcdf 	bl	8004e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006462:	480d      	ldr	r0, [pc, #52]	; (8006498 <prvInitialiseTaskLists+0x68>)
 8006464:	f7fe fcdc 	bl	8004e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006468:	480c      	ldr	r0, [pc, #48]	; (800649c <prvInitialiseTaskLists+0x6c>)
 800646a:	f7fe fcd9 	bl	8004e20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800646e:	480c      	ldr	r0, [pc, #48]	; (80064a0 <prvInitialiseTaskLists+0x70>)
 8006470:	f7fe fcd6 	bl	8004e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006474:	480b      	ldr	r0, [pc, #44]	; (80064a4 <prvInitialiseTaskLists+0x74>)
 8006476:	f7fe fcd3 	bl	8004e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800647a:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <prvInitialiseTaskLists+0x78>)
 800647c:	4a05      	ldr	r2, [pc, #20]	; (8006494 <prvInitialiseTaskLists+0x64>)
 800647e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006480:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <prvInitialiseTaskLists+0x7c>)
 8006482:	4a05      	ldr	r2, [pc, #20]	; (8006498 <prvInitialiseTaskLists+0x68>)
 8006484:	601a      	str	r2, [r3, #0]
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200006f0 	.word	0x200006f0
 8006494:	20000b50 	.word	0x20000b50
 8006498:	20000b64 	.word	0x20000b64
 800649c:	20000b80 	.word	0x20000b80
 80064a0:	20000b94 	.word	0x20000b94
 80064a4:	20000bac 	.word	0x20000bac
 80064a8:	20000b78 	.word	0x20000b78
 80064ac:	20000b7c 	.word	0x20000b7c

080064b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064b6:	e019      	b.n	80064ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064b8:	f000 fd4e 	bl	8006f58 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80064bc:	4b0f      	ldr	r3, [pc, #60]	; (80064fc <prvCheckTasksWaitingTermination+0x4c>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe fd2f 	bl	8004f2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064ce:	4b0c      	ldr	r3, [pc, #48]	; (8006500 <prvCheckTasksWaitingTermination+0x50>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	4a0a      	ldr	r2, [pc, #40]	; (8006500 <prvCheckTasksWaitingTermination+0x50>)
 80064d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <prvCheckTasksWaitingTermination+0x54>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3b01      	subs	r3, #1
 80064de:	4a09      	ldr	r2, [pc, #36]	; (8006504 <prvCheckTasksWaitingTermination+0x54>)
 80064e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064e2:	f000 fd67 	bl	8006fb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f80e 	bl	8006508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <prvCheckTasksWaitingTermination+0x54>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e1      	bne.n	80064b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000b94 	.word	0x20000b94
 8006500:	20000bc0 	.word	0x20000bc0
 8006504:	20000ba8 	.word	0x20000ba8

08006508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006516:	2b00      	cmp	r3, #0
 8006518:	d108      	bne.n	800652c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fed2 	bl	80072c8 <vPortFree>
				vPortFree( pxTCB );
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fecf 	bl	80072c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800652a:	e017      	b.n	800655c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006532:	2b01      	cmp	r3, #1
 8006534:	d103      	bne.n	800653e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fec6 	bl	80072c8 <vPortFree>
	}
 800653c:	e00e      	b.n	800655c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006544:	2b02      	cmp	r3, #2
 8006546:	d009      	beq.n	800655c <prvDeleteTCB+0x54>
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	e7fe      	b.n	800655a <prvDeleteTCB+0x52>
	}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800656a:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <prvResetNextTaskUnblockTime+0x40>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <prvResetNextTaskUnblockTime+0x14>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <prvResetNextTaskUnblockTime+0x16>
 8006578:	2300      	movs	r3, #0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800657e:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <prvResetNextTaskUnblockTime+0x44>)
 8006580:	f04f 32ff 	mov.w	r2, #4294967295
 8006584:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006586:	e008      	b.n	800659a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <prvResetNextTaskUnblockTime+0x40>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4a04      	ldr	r2, [pc, #16]	; (80065a8 <prvResetNextTaskUnblockTime+0x44>)
 8006598:	6013      	str	r3, [r2, #0]
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr
 80065a4:	20000b78 	.word	0x20000b78
 80065a8:	20000be0 	.word	0x20000be0

080065ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <xTaskGetSchedulerState+0x34>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065ba:	2301      	movs	r3, #1
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	e008      	b.n	80065d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c0:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <xTaskGetSchedulerState+0x38>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d102      	bne.n	80065ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065c8:	2302      	movs	r3, #2
 80065ca:	607b      	str	r3, [r7, #4]
 80065cc:	e001      	b.n	80065d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065d2:	687b      	ldr	r3, [r7, #4]
	}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	20000bcc 	.word	0x20000bcc
 80065e4:	20000be8 	.word	0x20000be8

080065e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d054      	beq.n	80066a8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065fe:	4b2d      	ldr	r3, [pc, #180]	; (80066b4 <xTaskPriorityDisinherit+0xcc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	429a      	cmp	r2, r3
 8006606:	d009      	beq.n	800661c <xTaskPriorityDisinherit+0x34>
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	60fb      	str	r3, [r7, #12]
 800661a:	e7fe      	b.n	800661a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <xTaskPriorityDisinherit+0x50>
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	60bb      	str	r3, [r7, #8]
 8006636:	e7fe      	b.n	8006636 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663c:	1e5a      	subs	r2, r3, #1
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664a:	429a      	cmp	r2, r3
 800664c:	d02c      	beq.n	80066a8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006652:	2b00      	cmp	r3, #0
 8006654:	d128      	bne.n	80066a8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	3304      	adds	r3, #4
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe fc66 	bl	8004f2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <xTaskPriorityDisinherit+0xd0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d903      	bls.n	8006688 <xTaskPriorityDisinherit+0xa0>
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	4a0c      	ldr	r2, [pc, #48]	; (80066b8 <xTaskPriorityDisinherit+0xd0>)
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4a09      	ldr	r2, [pc, #36]	; (80066bc <xTaskPriorityDisinherit+0xd4>)
 8006696:	441a      	add	r2, r3
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	3304      	adds	r3, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	f7fe fbe9 	bl	8004e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066a8:	697b      	ldr	r3, [r7, #20]
	}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200006ec 	.word	0x200006ec
 80066b8:	20000bc8 	.word	0x20000bc8
 80066bc:	200006f0 	.word	0x200006f0

080066c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066ca:	4b21      	ldr	r3, [pc, #132]	; (8006750 <prvAddCurrentTaskToDelayedList+0x90>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066d0:	4b20      	ldr	r3, [pc, #128]	; (8006754 <prvAddCurrentTaskToDelayedList+0x94>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fc28 	bl	8004f2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d10a      	bne.n	80066fa <prvAddCurrentTaskToDelayedList+0x3a>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d007      	beq.n	80066fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ea:	4b1a      	ldr	r3, [pc, #104]	; (8006754 <prvAddCurrentTaskToDelayedList+0x94>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	4819      	ldr	r0, [pc, #100]	; (8006758 <prvAddCurrentTaskToDelayedList+0x98>)
 80066f4:	f7fe fbbf 	bl	8004e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066f8:	e026      	b.n	8006748 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4413      	add	r3, r2
 8006700:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006702:	4b14      	ldr	r3, [pc, #80]	; (8006754 <prvAddCurrentTaskToDelayedList+0x94>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	429a      	cmp	r2, r3
 8006710:	d209      	bcs.n	8006726 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006712:	4b12      	ldr	r3, [pc, #72]	; (800675c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <prvAddCurrentTaskToDelayedList+0x94>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3304      	adds	r3, #4
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f7fe fbcc 	bl	8004ebc <vListInsert>
}
 8006724:	e010      	b.n	8006748 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006726:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <prvAddCurrentTaskToDelayedList+0x94>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3304      	adds	r3, #4
 8006730:	4619      	mov	r1, r3
 8006732:	4610      	mov	r0, r2
 8006734:	f7fe fbc2 	bl	8004ebc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <prvAddCurrentTaskToDelayedList+0xa4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	429a      	cmp	r2, r3
 8006740:	d202      	bcs.n	8006748 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006742:	4a08      	ldr	r2, [pc, #32]	; (8006764 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6013      	str	r3, [r2, #0]
}
 8006748:	bf00      	nop
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000bc4 	.word	0x20000bc4
 8006754:	200006ec 	.word	0x200006ec
 8006758:	20000bac 	.word	0x20000bac
 800675c:	20000b7c 	.word	0x20000b7c
 8006760:	20000b78 	.word	0x20000b78
 8006764:	20000be0 	.word	0x20000be0

08006768 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	; 0x28
 800676c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800676e:	2300      	movs	r3, #0
 8006770:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006772:	f000 fac3 	bl	8006cfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006776:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <xTimerCreateTimerTask+0x80>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d021      	beq.n	80067c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006782:	2300      	movs	r3, #0
 8006784:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006786:	1d3a      	adds	r2, r7, #4
 8006788:	f107 0108 	add.w	r1, r7, #8
 800678c:	f107 030c 	add.w	r3, r7, #12
 8006790:	4618      	mov	r0, r3
 8006792:	f7fe fb2b 	bl	8004dec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	9202      	str	r2, [sp, #8]
 800679e:	9301      	str	r3, [sp, #4]
 80067a0:	2302      	movs	r3, #2
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	2300      	movs	r3, #0
 80067a6:	460a      	mov	r2, r1
 80067a8:	4910      	ldr	r1, [pc, #64]	; (80067ec <xTimerCreateTimerTask+0x84>)
 80067aa:	4811      	ldr	r0, [pc, #68]	; (80067f0 <xTimerCreateTimerTask+0x88>)
 80067ac:	f7ff f8f8 	bl	80059a0 <xTaskCreateStatic>
 80067b0:	4602      	mov	r2, r0
 80067b2:	4b10      	ldr	r3, [pc, #64]	; (80067f4 <xTimerCreateTimerTask+0x8c>)
 80067b4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80067b6:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <xTimerCreateTimerTask+0x8c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80067be:	2301      	movs	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <xTimerCreateTimerTask+0x74>
 80067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	e7fe      	b.n	80067da <xTimerCreateTimerTask+0x72>
	return xReturn;
 80067dc:	697b      	ldr	r3, [r7, #20]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000c1c 	.word	0x20000c1c
 80067ec:	0800763c 	.word	0x0800763c
 80067f0:	08006911 	.word	0x08006911
 80067f4:	20000c20 	.word	0x20000c20

080067f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
 8006804:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d109      	bne.n	8006824 <xTimerGenericCommand+0x2c>
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
 8006822:	e7fe      	b.n	8006822 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006824:	4b19      	ldr	r3, [pc, #100]	; (800688c <xTimerGenericCommand+0x94>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d02a      	beq.n	8006882 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b05      	cmp	r3, #5
 800683c:	dc18      	bgt.n	8006870 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800683e:	f7ff feb5 	bl	80065ac <xTaskGetSchedulerState>
 8006842:	4603      	mov	r3, r0
 8006844:	2b02      	cmp	r3, #2
 8006846:	d109      	bne.n	800685c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006848:	4b10      	ldr	r3, [pc, #64]	; (800688c <xTimerGenericCommand+0x94>)
 800684a:	6818      	ldr	r0, [r3, #0]
 800684c:	f107 0110 	add.w	r1, r7, #16
 8006850:	2300      	movs	r3, #0
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	f7fe fcce 	bl	80051f4 <xQueueGenericSend>
 8006858:	6278      	str	r0, [r7, #36]	; 0x24
 800685a:	e012      	b.n	8006882 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <xTimerGenericCommand+0x94>)
 800685e:	6818      	ldr	r0, [r3, #0]
 8006860:	f107 0110 	add.w	r1, r7, #16
 8006864:	2300      	movs	r3, #0
 8006866:	2200      	movs	r2, #0
 8006868:	f7fe fcc4 	bl	80051f4 <xQueueGenericSend>
 800686c:	6278      	str	r0, [r7, #36]	; 0x24
 800686e:	e008      	b.n	8006882 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006870:	4b06      	ldr	r3, [pc, #24]	; (800688c <xTimerGenericCommand+0x94>)
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	f107 0110 	add.w	r1, r7, #16
 8006878:	2300      	movs	r3, #0
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	f7fe fdb4 	bl	80053e8 <xQueueGenericSendFromISR>
 8006880:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006884:	4618      	mov	r0, r3
 8006886:	3728      	adds	r7, #40	; 0x28
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000c1c 	.word	0x20000c1c

08006890 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af02      	add	r7, sp, #8
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800689a:	4b1c      	ldr	r3, [pc, #112]	; (800690c <prvProcessExpiredTimer+0x7c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	3304      	adds	r3, #4
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe fb3f 	bl	8004f2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d121      	bne.n	80068fa <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	18d1      	adds	r1, r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	6978      	ldr	r0, [r7, #20]
 80068c4:	f000 f8c8 	bl	8006a58 <prvInsertTimerInActiveList>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d015      	beq.n	80068fa <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068ce:	2300      	movs	r3, #0
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	2300      	movs	r3, #0
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	2100      	movs	r1, #0
 80068d8:	6978      	ldr	r0, [r7, #20]
 80068da:	f7ff ff8d 	bl	80067f8 <xTimerGenericCommand>
 80068de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <prvProcessExpiredTimer+0x6a>
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e7fe      	b.n	80068f8 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	6978      	ldr	r0, [r7, #20]
 8006900:	4798      	blx	r3
}
 8006902:	bf00      	nop
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000c14 	.word	0x20000c14

08006910 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	4618      	mov	r0, r3
 800691e:	f000 f857 	bl	80069d0 <prvGetNextExpireTime>
 8006922:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4619      	mov	r1, r3
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f803 	bl	8006934 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800692e:	f000 f8d5 	bl	8006adc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006932:	e7f1      	b.n	8006918 <prvTimerTask+0x8>

08006934 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800693e:	f7ff fa5b 	bl	8005df8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006942:	f107 0308 	add.w	r3, r7, #8
 8006946:	4618      	mov	r0, r3
 8006948:	f000 f866 	bl	8006a18 <prvSampleTimeNow>
 800694c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d130      	bne.n	80069b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <prvProcessTimerOrBlockTask+0x3c>
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	429a      	cmp	r2, r3
 8006960:	d806      	bhi.n	8006970 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006962:	f7ff fa57 	bl	8005e14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff ff91 	bl	8006890 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800696e:	e024      	b.n	80069ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d008      	beq.n	8006988 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006976:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <prvProcessTimerOrBlockTask+0x90>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <prvProcessTimerOrBlockTask+0x94>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	4619      	mov	r1, r3
 8006996:	f7fe ffcf 	bl	8005938 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800699a:	f7ff fa3b 	bl	8005e14 <xTaskResumeAll>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10a      	bne.n	80069ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80069a4:	4b09      	ldr	r3, [pc, #36]	; (80069cc <prvProcessTimerOrBlockTask+0x98>)
 80069a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	f3bf 8f6f 	isb	sy
}
 80069b4:	e001      	b.n	80069ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80069b6:	f7ff fa2d 	bl	8005e14 <xTaskResumeAll>
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000c18 	.word	0x20000c18
 80069c8:	20000c1c 	.word	0x20000c1c
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069d0:	b480      	push	{r7}
 80069d2:	b085      	sub	sp, #20
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069d8:	4b0e      	ldr	r3, [pc, #56]	; (8006a14 <prvGetNextExpireTime+0x44>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bf0c      	ite	eq
 80069e2:	2301      	moveq	r3, #1
 80069e4:	2300      	movne	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d105      	bne.n	8006a02 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <prvGetNextExpireTime+0x44>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e001      	b.n	8006a06 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a06:	68fb      	ldr	r3, [r7, #12]
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	20000c14 	.word	0x20000c14

08006a18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a20:	f7ff fa94 	bl	8005f4c <xTaskGetTickCount>
 8006a24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <prvSampleTimeNow+0x3c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d205      	bcs.n	8006a3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a30:	f000 f904 	bl	8006c3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	e002      	b.n	8006a42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a42:	4a04      	ldr	r2, [pc, #16]	; (8006a54 <prvSampleTimeNow+0x3c>)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20000c24 	.word	0x20000c24

08006a58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d812      	bhi.n	8006aa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	1ad2      	subs	r2, r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d302      	bcc.n	8006a92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e01b      	b.n	8006aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <prvInsertTimerInActiveList+0x7c>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f7fe fa0d 	bl	8004ebc <vListInsert>
 8006aa2:	e012      	b.n	8006aca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d206      	bcs.n	8006aba <prvInsertTimerInActiveList+0x62>
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d302      	bcc.n	8006aba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e007      	b.n	8006aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006aba:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <prvInsertTimerInActiveList+0x80>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	f7fe f9f9 	bl	8004ebc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006aca:	697b      	ldr	r3, [r7, #20]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000c18 	.word	0x20000c18
 8006ad8:	20000c14 	.word	0x20000c14

08006adc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08e      	sub	sp, #56	; 0x38
 8006ae0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ae2:	e099      	b.n	8006c18 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da17      	bge.n	8006b1a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006aea:	1d3b      	adds	r3, r7, #4
 8006aec:	3304      	adds	r3, #4
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <prvProcessReceivedCommands+0x2e>
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e7fe      	b.n	8006b08 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b10:	6850      	ldr	r0, [r2, #4]
 8006b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b14:	6892      	ldr	r2, [r2, #8]
 8006b16:	4611      	mov	r1, r2
 8006b18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db7a      	blt.n	8006c16 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe f9fb 	bl	8004f2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b36:	463b      	mov	r3, r7
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7ff ff6d 	bl	8006a18 <prvSampleTimeNow>
 8006b3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b09      	cmp	r3, #9
 8006b44:	d868      	bhi.n	8006c18 <prvProcessReceivedCommands+0x13c>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <prvProcessReceivedCommands+0x70>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b75 	.word	0x08006b75
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b75 	.word	0x08006b75
 8006b58:	08006c19 	.word	0x08006c19
 8006b5c:	08006bcf 	.word	0x08006bcf
 8006b60:	08006c05 	.word	0x08006c05
 8006b64:	08006b75 	.word	0x08006b75
 8006b68:	08006b75 	.word	0x08006b75
 8006b6c:	08006c19 	.word	0x08006c19
 8006b70:	08006bcf 	.word	0x08006bcf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	18d1      	adds	r1, r2, r3
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b82:	f7ff ff69 	bl	8006a58 <prvInsertTimerInActiveList>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d045      	beq.n	8006c18 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b92:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d13d      	bne.n	8006c18 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	441a      	add	r2, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2100      	movs	r1, #0
 8006bac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bae:	f7ff fe23 	bl	80067f8 <xTimerGenericCommand>
 8006bb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d12e      	bne.n	8006c18 <prvProcessReceivedCommands+0x13c>
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	e7fe      	b.n	8006bcc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d109      	bne.n	8006bf0 <prvProcessReceivedCommands+0x114>
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	e7fe      	b.n	8006bee <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	18d1      	adds	r1, r2, r3
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfe:	f7ff ff2b 	bl	8006a58 <prvInsertTimerInActiveList>
					break;
 8006c02:	e009      	b.n	8006c18 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d104      	bne.n	8006c18 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c10:	f000 fb5a 	bl	80072c8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c14:	e000      	b.n	8006c18 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c16:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c18:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <prvProcessReceivedCommands+0x15c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	1d39      	adds	r1, r7, #4
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe fc75 	bl	8005510 <xQueueReceive>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f47f af5b 	bne.w	8006ae4 <prvProcessReceivedCommands+0x8>
	}
}
 8006c2e:	bf00      	nop
 8006c30:	3730      	adds	r7, #48	; 0x30
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000c1c 	.word	0x20000c1c

08006c3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c42:	e044      	b.n	8006cce <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c44:	4b2b      	ldr	r3, [pc, #172]	; (8006cf4 <prvSwitchTimerLists+0xb8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c4e:	4b29      	ldr	r3, [pc, #164]	; (8006cf4 <prvSwitchTimerLists+0xb8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe f965 	bl	8004f2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d12d      	bne.n	8006cce <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4413      	add	r3, r2
 8006c7a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d90e      	bls.n	8006ca2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c90:	4b18      	ldr	r3, [pc, #96]	; (8006cf4 <prvSwitchTimerLists+0xb8>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fe f90e 	bl	8004ebc <vListInsert>
 8006ca0:	e015      	b.n	8006cce <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	2100      	movs	r1, #0
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fda3 	bl	80067f8 <xTimerGenericCommand>
 8006cb2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <prvSwitchTimerLists+0x92>
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	e7fe      	b.n	8006ccc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cce:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <prvSwitchTimerLists+0xb8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1b5      	bne.n	8006c44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006cd8:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <prvSwitchTimerLists+0xb8>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006cde:	4b06      	ldr	r3, [pc, #24]	; (8006cf8 <prvSwitchTimerLists+0xbc>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <prvSwitchTimerLists+0xb8>)
 8006ce4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ce6:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <prvSwitchTimerLists+0xbc>)
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	6013      	str	r3, [r2, #0]
}
 8006cec:	bf00      	nop
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000c14 	.word	0x20000c14
 8006cf8:	20000c18 	.word	0x20000c18

08006cfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d02:	f000 f929 	bl	8006f58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d06:	4b15      	ldr	r3, [pc, #84]	; (8006d5c <prvCheckForValidListAndQueue+0x60>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d120      	bne.n	8006d50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d0e:	4814      	ldr	r0, [pc, #80]	; (8006d60 <prvCheckForValidListAndQueue+0x64>)
 8006d10:	f7fe f886 	bl	8004e20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d14:	4813      	ldr	r0, [pc, #76]	; (8006d64 <prvCheckForValidListAndQueue+0x68>)
 8006d16:	f7fe f883 	bl	8004e20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d1a:	4b13      	ldr	r3, [pc, #76]	; (8006d68 <prvCheckForValidListAndQueue+0x6c>)
 8006d1c:	4a10      	ldr	r2, [pc, #64]	; (8006d60 <prvCheckForValidListAndQueue+0x64>)
 8006d1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d20:	4b12      	ldr	r3, [pc, #72]	; (8006d6c <prvCheckForValidListAndQueue+0x70>)
 8006d22:	4a10      	ldr	r2, [pc, #64]	; (8006d64 <prvCheckForValidListAndQueue+0x68>)
 8006d24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d26:	2300      	movs	r3, #0
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <prvCheckForValidListAndQueue+0x74>)
 8006d2c:	4a11      	ldr	r2, [pc, #68]	; (8006d74 <prvCheckForValidListAndQueue+0x78>)
 8006d2e:	2110      	movs	r1, #16
 8006d30:	200a      	movs	r0, #10
 8006d32:	f7fe f98d 	bl	8005050 <xQueueGenericCreateStatic>
 8006d36:	4602      	mov	r2, r0
 8006d38:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <prvCheckForValidListAndQueue+0x60>)
 8006d3a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <prvCheckForValidListAndQueue+0x60>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <prvCheckForValidListAndQueue+0x60>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	490b      	ldr	r1, [pc, #44]	; (8006d78 <prvCheckForValidListAndQueue+0x7c>)
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe fdcc 	bl	80058e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d50:	f000 f930 	bl	8006fb4 <vPortExitCritical>
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000c1c 	.word	0x20000c1c
 8006d60:	20000bec 	.word	0x20000bec
 8006d64:	20000c00 	.word	0x20000c00
 8006d68:	20000c14 	.word	0x20000c14
 8006d6c:	20000c18 	.word	0x20000c18
 8006d70:	20000cc8 	.word	0x20000cc8
 8006d74:	20000c28 	.word	0x20000c28
 8006d78:	08007644 	.word	0x08007644

08006d7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3b04      	subs	r3, #4
 8006d8c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3b04      	subs	r3, #4
 8006d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f023 0201 	bic.w	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3b04      	subs	r3, #4
 8006daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dac:	4a08      	ldr	r2, [pc, #32]	; (8006dd0 <pxPortInitialiseStack+0x54>)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3b14      	subs	r3, #20
 8006db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b20      	subs	r3, #32
 8006dc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bc80      	pop	{r7}
 8006dce:	4770      	bx	lr
 8006dd0:	08006dd5 	.word	0x08006dd5

08006dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dde:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <prvTaskExitError+0x4c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de6:	d009      	beq.n	8006dfc <prvTaskExitError+0x28>
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e7fe      	b.n	8006dfa <prvTaskExitError+0x26>
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e0e:	bf00      	nop
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0fc      	beq.n	8006e10 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr
 8006e20:	2000000c 	.word	0x2000000c
	...

08006e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e30:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <pxCurrentTCBConst2>)
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	6808      	ldr	r0, [r1, #0]
 8006e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e3a:	f380 8809 	msr	PSP, r0
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f04f 0000 	mov.w	r0, #0
 8006e46:	f380 8811 	msr	BASEPRI, r0
 8006e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006e4e:	4770      	bx	lr

08006e50 <pxCurrentTCBConst2>:
 8006e50:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop

08006e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006e58:	4806      	ldr	r0, [pc, #24]	; (8006e74 <prvPortStartFirstTask+0x1c>)
 8006e5a:	6800      	ldr	r0, [r0, #0]
 8006e5c:	6800      	ldr	r0, [r0, #0]
 8006e5e:	f380 8808 	msr	MSP, r0
 8006e62:	b662      	cpsie	i
 8006e64:	b661      	cpsie	f
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	df00      	svc	0
 8006e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e72:	bf00      	nop
 8006e74:	e000ed08 	.word	0xe000ed08

08006e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e7e:	4b31      	ldr	r3, [pc, #196]	; (8006f44 <xPortStartScheduler+0xcc>)
 8006e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006ea0:	b2da      	uxtb	r2, r3
 8006ea2:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <xPortStartScheduler+0xd0>)
 8006ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ea6:	4b29      	ldr	r3, [pc, #164]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006ea8:	2207      	movs	r2, #7
 8006eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eac:	e009      	b.n	8006ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006eae:	4b27      	ldr	r3, [pc, #156]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	4a25      	ldr	r2, [pc, #148]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ec2:	78fb      	ldrb	r3, [r7, #3]
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b80      	cmp	r3, #128	; 0x80
 8006ecc:	d0ef      	beq.n	8006eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ece:	4b1f      	ldr	r3, [pc, #124]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f1c3 0307 	rsb	r3, r3, #7
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d009      	beq.n	8006eee <xPortStartScheduler+0x76>
 8006eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	60bb      	str	r3, [r7, #8]
 8006eec:	e7fe      	b.n	8006eec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006eee:	4b17      	ldr	r3, [pc, #92]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	021b      	lsls	r3, r3, #8
 8006ef4:	4a15      	ldr	r2, [pc, #84]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006ef6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ef8:	4b14      	ldr	r3, [pc, #80]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f00:	4a12      	ldr	r2, [pc, #72]	; (8006f4c <xPortStartScheduler+0xd4>)
 8006f02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f0c:	4b10      	ldr	r3, [pc, #64]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0f      	ldr	r2, [pc, #60]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006f12:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f18:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a0c      	ldr	r2, [pc, #48]	; (8006f50 <xPortStartScheduler+0xd8>)
 8006f1e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f24:	f000 f8b0 	bl	8007088 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <xPortStartScheduler+0xdc>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f2e:	f7ff ff93 	bl	8006e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f32:	f7ff f8d7 	bl	80060e4 <vTaskSwitchContext>
	prvTaskExitError();
 8006f36:	f7ff ff4d 	bl	8006dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	e000e400 	.word	0xe000e400
 8006f48:	20000d18 	.word	0x20000d18
 8006f4c:	20000d1c 	.word	0x20000d1c
 8006f50:	e000ed20 	.word	0xe000ed20
 8006f54:	2000000c 	.word	0x2000000c

08006f58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <vPortEnterCritical+0x54>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <vPortEnterCritical+0x54>)
 8006f78:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f7a:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <vPortEnterCritical+0x54>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d10e      	bne.n	8006fa0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <vPortEnterCritical+0x58>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d009      	beq.n	8006fa0 <vPortEnterCritical+0x48>
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	e7fe      	b.n	8006f9e <vPortEnterCritical+0x46>
	}
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	2000000c 	.word	0x2000000c
 8006fb0:	e000ed04 	.word	0xe000ed04

08006fb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fba:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <vPortExitCritical+0x48>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <vPortExitCritical+0x22>
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	e7fe      	b.n	8006fd4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006fd6:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <vPortExitCritical+0x48>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	4a07      	ldr	r2, [pc, #28]	; (8006ffc <vPortExitCritical+0x48>)
 8006fde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <vPortExitCritical+0x48>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <vPortExitCritical+0x3e>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr
 8006ffc:	2000000c 	.word	0x2000000c

08007000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007000:	f3ef 8009 	mrs	r0, PSP
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <pxCurrentTCBConst>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007010:	6010      	str	r0, [r2, #0]
 8007012:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007016:	f04f 0050 	mov.w	r0, #80	; 0x50
 800701a:	f380 8811 	msr	BASEPRI, r0
 800701e:	f7ff f861 	bl	80060e4 <vTaskSwitchContext>
 8007022:	f04f 0000 	mov.w	r0, #0
 8007026:	f380 8811 	msr	BASEPRI, r0
 800702a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	6808      	ldr	r0, [r1, #0]
 8007032:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007036:	f380 8809 	msr	PSP, r0
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	4770      	bx	lr

08007040 <pxCurrentTCBConst>:
 8007040:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop

08007048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007060:	f7fe ff82 	bl	8005f68 <xTaskIncrementTick>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800706a:	4b06      	ldr	r3, [pc, #24]	; (8007084 <SysTick_Handler+0x3c>)
 800706c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	2300      	movs	r3, #0
 8007074:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <vPortSetupTimerInterrupt+0x30>)
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007092:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <vPortSetupTimerInterrupt+0x34>)
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007098:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <vPortSetupTimerInterrupt+0x38>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a09      	ldr	r2, [pc, #36]	; (80070c4 <vPortSetupTimerInterrupt+0x3c>)
 800709e:	fba2 2303 	umull	r2, r3, r2, r3
 80070a2:	099b      	lsrs	r3, r3, #6
 80070a4:	4a08      	ldr	r2, [pc, #32]	; (80070c8 <vPortSetupTimerInterrupt+0x40>)
 80070a6:	3b01      	subs	r3, #1
 80070a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070aa:	4b03      	ldr	r3, [pc, #12]	; (80070b8 <vPortSetupTimerInterrupt+0x30>)
 80070ac:	2207      	movs	r2, #7
 80070ae:	601a      	str	r2, [r3, #0]
}
 80070b0:	bf00      	nop
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr
 80070b8:	e000e010 	.word	0xe000e010
 80070bc:	e000e018 	.word	0xe000e018
 80070c0:	20000000 	.word	0x20000000
 80070c4:	10624dd3 	.word	0x10624dd3
 80070c8:	e000e014 	.word	0xe000e014

080070cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070d2:	f3ef 8305 	mrs	r3, IPSR
 80070d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2b0f      	cmp	r3, #15
 80070dc:	d913      	bls.n	8007106 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070de:	4a15      	ldr	r2, [pc, #84]	; (8007134 <vPortValidateInterruptPriority+0x68>)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070e8:	4b13      	ldr	r3, [pc, #76]	; (8007138 <vPortValidateInterruptPriority+0x6c>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	7afa      	ldrb	r2, [r7, #11]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d209      	bcs.n	8007106 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	607b      	str	r3, [r7, #4]
 8007104:	e7fe      	b.n	8007104 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007106:	4b0d      	ldr	r3, [pc, #52]	; (800713c <vPortValidateInterruptPriority+0x70>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800710e:	4b0c      	ldr	r3, [pc, #48]	; (8007140 <vPortValidateInterruptPriority+0x74>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d909      	bls.n	800712a <vPortValidateInterruptPriority+0x5e>
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	e7fe      	b.n	8007128 <vPortValidateInterruptPriority+0x5c>
	}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr
 8007134:	e000e3f0 	.word	0xe000e3f0
 8007138:	20000d18 	.word	0x20000d18
 800713c:	e000ed0c 	.word	0xe000ed0c
 8007140:	20000d1c 	.word	0x20000d1c

08007144 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	; 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800714c:	2300      	movs	r3, #0
 800714e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007150:	f7fe fe52 	bl	8005df8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007154:	4b57      	ldr	r3, [pc, #348]	; (80072b4 <pvPortMalloc+0x170>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800715c:	f000 f90c 	bl	8007378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007160:	4b55      	ldr	r3, [pc, #340]	; (80072b8 <pvPortMalloc+0x174>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4013      	ands	r3, r2
 8007168:	2b00      	cmp	r3, #0
 800716a:	f040 808c 	bne.w	8007286 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01c      	beq.n	80071ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007174:	2208      	movs	r2, #8
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4413      	add	r3, r2
 800717a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	2b00      	cmp	r3, #0
 8007184:	d013      	beq.n	80071ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f023 0307 	bic.w	r3, r3, #7
 800718c:	3308      	adds	r3, #8
 800718e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	2b00      	cmp	r3, #0
 8007198:	d009      	beq.n	80071ae <pvPortMalloc+0x6a>
 800719a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	e7fe      	b.n	80071ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d068      	beq.n	8007286 <pvPortMalloc+0x142>
 80071b4:	4b41      	ldr	r3, [pc, #260]	; (80072bc <pvPortMalloc+0x178>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d863      	bhi.n	8007286 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071be:	4b40      	ldr	r3, [pc, #256]	; (80072c0 <pvPortMalloc+0x17c>)
 80071c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071c2:	4b3f      	ldr	r3, [pc, #252]	; (80072c0 <pvPortMalloc+0x17c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071c8:	e004      	b.n	80071d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80071ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d903      	bls.n	80071e6 <pvPortMalloc+0xa2>
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f1      	bne.n	80071ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071e6:	4b33      	ldr	r3, [pc, #204]	; (80072b4 <pvPortMalloc+0x170>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d04a      	beq.n	8007286 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2208      	movs	r2, #8
 80071f6:	4413      	add	r3, r2
 80071f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	1ad2      	subs	r2, r2, r3
 800720a:	2308      	movs	r3, #8
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	429a      	cmp	r2, r3
 8007210:	d91e      	bls.n	8007250 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4413      	add	r3, r2
 8007218:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	2b00      	cmp	r3, #0
 8007222:	d009      	beq.n	8007238 <pvPortMalloc+0xf4>
 8007224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	613b      	str	r3, [r7, #16]
 8007236:	e7fe      	b.n	8007236 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800724a:	69b8      	ldr	r0, [r7, #24]
 800724c:	f000 f8f6 	bl	800743c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007250:	4b1a      	ldr	r3, [pc, #104]	; (80072bc <pvPortMalloc+0x178>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	4a18      	ldr	r2, [pc, #96]	; (80072bc <pvPortMalloc+0x178>)
 800725c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800725e:	4b17      	ldr	r3, [pc, #92]	; (80072bc <pvPortMalloc+0x178>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4b18      	ldr	r3, [pc, #96]	; (80072c4 <pvPortMalloc+0x180>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	429a      	cmp	r2, r3
 8007268:	d203      	bcs.n	8007272 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800726a:	4b14      	ldr	r3, [pc, #80]	; (80072bc <pvPortMalloc+0x178>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a15      	ldr	r2, [pc, #84]	; (80072c4 <pvPortMalloc+0x180>)
 8007270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <pvPortMalloc+0x174>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	431a      	orrs	r2, r3
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007286:	f7fe fdc5 	bl	8005e14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <pvPortMalloc+0x164>
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	e7fe      	b.n	80072a6 <pvPortMalloc+0x162>
	return pvReturn;
 80072a8:	69fb      	ldr	r3, [r7, #28]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3728      	adds	r7, #40	; 0x28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	200020b0 	.word	0x200020b0
 80072b8:	200020bc 	.word	0x200020bc
 80072bc:	200020b4 	.word	0x200020b4
 80072c0:	200020a8 	.word	0x200020a8
 80072c4:	200020b8 	.word	0x200020b8

080072c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d046      	beq.n	8007368 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072da:	2308      	movs	r3, #8
 80072dc:	425b      	negs	r3, r3
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4413      	add	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	4b20      	ldr	r3, [pc, #128]	; (8007370 <vPortFree+0xa8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4013      	ands	r3, r2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <vPortFree+0x42>
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e7fe      	b.n	8007308 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <vPortFree+0x5e>
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	60bb      	str	r3, [r7, #8]
 8007324:	e7fe      	b.n	8007324 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	685a      	ldr	r2, [r3, #4]
 800732a:	4b11      	ldr	r3, [pc, #68]	; (8007370 <vPortFree+0xa8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4013      	ands	r3, r2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d019      	beq.n	8007368 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d115      	bne.n	8007368 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <vPortFree+0xa8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	43db      	mvns	r3, r3
 8007346:	401a      	ands	r2, r3
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800734c:	f7fe fd54 	bl	8005df8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	4b07      	ldr	r3, [pc, #28]	; (8007374 <vPortFree+0xac>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4413      	add	r3, r2
 800735a:	4a06      	ldr	r2, [pc, #24]	; (8007374 <vPortFree+0xac>)
 800735c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800735e:	6938      	ldr	r0, [r7, #16]
 8007360:	f000 f86c 	bl	800743c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007364:	f7fe fd56 	bl	8005e14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007368:	bf00      	nop
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	200020bc 	.word	0x200020bc
 8007374:	200020b4 	.word	0x200020b4

08007378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800737e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007384:	4b27      	ldr	r3, [pc, #156]	; (8007424 <prvHeapInit+0xac>)
 8007386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f003 0307 	and.w	r3, r3, #7
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00c      	beq.n	80073ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	3307      	adds	r3, #7
 8007396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0307 	bic.w	r3, r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <prvHeapInit+0xac>)
 80073a8:	4413      	add	r3, r2
 80073aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073b0:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <prvHeapInit+0xb0>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073b6:	4b1c      	ldr	r3, [pc, #112]	; (8007428 <prvHeapInit+0xb0>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	4413      	add	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073c4:	2208      	movs	r2, #8
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1a9b      	subs	r3, r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0307 	bic.w	r3, r3, #7
 80073d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4a15      	ldr	r2, [pc, #84]	; (800742c <prvHeapInit+0xb4>)
 80073d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <prvHeapInit+0xb4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2200      	movs	r2, #0
 80073e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <prvHeapInit+0xb4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	1ad2      	subs	r2, r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80073f8:	4b0c      	ldr	r3, [pc, #48]	; (800742c <prvHeapInit+0xb4>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	4a0a      	ldr	r2, [pc, #40]	; (8007430 <prvHeapInit+0xb8>)
 8007406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4a09      	ldr	r2, [pc, #36]	; (8007434 <prvHeapInit+0xbc>)
 800740e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <prvHeapInit+0xc0>)
 8007412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007416:	601a      	str	r2, [r3, #0]
}
 8007418:	bf00      	nop
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20000d20 	.word	0x20000d20
 8007428:	200020a8 	.word	0x200020a8
 800742c:	200020b0 	.word	0x200020b0
 8007430:	200020b8 	.word	0x200020b8
 8007434:	200020b4 	.word	0x200020b4
 8007438:	200020bc 	.word	0x200020bc

0800743c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007444:	4b27      	ldr	r3, [pc, #156]	; (80074e4 <prvInsertBlockIntoFreeList+0xa8>)
 8007446:	60fb      	str	r3, [r7, #12]
 8007448:	e002      	b.n	8007450 <prvInsertBlockIntoFreeList+0x14>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	429a      	cmp	r2, r3
 8007458:	d8f7      	bhi.n	800744a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4413      	add	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d108      	bne.n	800747e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	441a      	add	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	441a      	add	r2, r3
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	429a      	cmp	r2, r3
 8007490:	d118      	bne.n	80074c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <prvInsertBlockIntoFreeList+0xac>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d00d      	beq.n	80074ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	441a      	add	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e008      	b.n	80074cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074ba:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <prvInsertBlockIntoFreeList+0xac>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e003      	b.n	80074cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d002      	beq.n	80074da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074da:	bf00      	nop
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr
 80074e4:	200020a8 	.word	0x200020a8
 80074e8:	200020b0 	.word	0x200020b0

080074ec <__libc_init_array>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	2500      	movs	r5, #0
 80074f0:	4e0c      	ldr	r6, [pc, #48]	; (8007524 <__libc_init_array+0x38>)
 80074f2:	4c0d      	ldr	r4, [pc, #52]	; (8007528 <__libc_init_array+0x3c>)
 80074f4:	1ba4      	subs	r4, r4, r6
 80074f6:	10a4      	asrs	r4, r4, #2
 80074f8:	42a5      	cmp	r5, r4
 80074fa:	d109      	bne.n	8007510 <__libc_init_array+0x24>
 80074fc:	f000 f82e 	bl	800755c <_init>
 8007500:	2500      	movs	r5, #0
 8007502:	4e0a      	ldr	r6, [pc, #40]	; (800752c <__libc_init_array+0x40>)
 8007504:	4c0a      	ldr	r4, [pc, #40]	; (8007530 <__libc_init_array+0x44>)
 8007506:	1ba4      	subs	r4, r4, r6
 8007508:	10a4      	asrs	r4, r4, #2
 800750a:	42a5      	cmp	r5, r4
 800750c:	d105      	bne.n	800751a <__libc_init_array+0x2e>
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007514:	4798      	blx	r3
 8007516:	3501      	adds	r5, #1
 8007518:	e7ee      	b.n	80074f8 <__libc_init_array+0xc>
 800751a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800751e:	4798      	blx	r3
 8007520:	3501      	adds	r5, #1
 8007522:	e7f2      	b.n	800750a <__libc_init_array+0x1e>
 8007524:	080077b4 	.word	0x080077b4
 8007528:	080077b4 	.word	0x080077b4
 800752c:	080077b4 	.word	0x080077b4
 8007530:	080077b8 	.word	0x080077b8

08007534 <memcpy>:
 8007534:	b510      	push	{r4, lr}
 8007536:	1e43      	subs	r3, r0, #1
 8007538:	440a      	add	r2, r1
 800753a:	4291      	cmp	r1, r2
 800753c:	d100      	bne.n	8007540 <memcpy+0xc>
 800753e:	bd10      	pop	{r4, pc}
 8007540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007548:	e7f7      	b.n	800753a <memcpy+0x6>

0800754a <memset>:
 800754a:	4603      	mov	r3, r0
 800754c:	4402      	add	r2, r0
 800754e:	4293      	cmp	r3, r2
 8007550:	d100      	bne.n	8007554 <memset+0xa>
 8007552:	4770      	bx	lr
 8007554:	f803 1b01 	strb.w	r1, [r3], #1
 8007558:	e7f9      	b.n	800754e <memset+0x4>
	...

0800755c <_init>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr

08007568 <_fini>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	bf00      	nop
 800756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756e:	bc08      	pop	{r3}
 8007570:	469e      	mov	lr, r3
 8007572:	4770      	bx	lr
