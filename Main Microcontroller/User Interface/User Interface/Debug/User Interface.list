
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074fc  080074fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080074fc  080074fc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074fc  080074fc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007500  08007500  00017500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002494  20000010  08007514  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200024a4  08007514  000224a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f3b  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cb1  00000000  00000000  00036f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001358  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003af80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180c0  00000000  00000000  0003c190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f730  00000000  00000000  00054250  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092da2  00000000  00000000  00063980  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f6722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d8  00000000  00000000  000f67a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080072bc 	.word	0x080072bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080072bc 	.word	0x080072bc

08000150 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2b3a      	cmp	r3, #58	; 0x3a
 800015e:	d13c      	bne.n	80001da <letter+0x8a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48d6      	ldr	r0, [pc, #856]	; (80004c0 <letter+0x370>)
 8000168:	f003 f955 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000172:	48d4      	ldr	r0, [pc, #848]	; (80004c4 <letter+0x374>)
 8000174:	f003 f94f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017e:	48d1      	ldr	r0, [pc, #836]	; (80004c4 <letter+0x374>)
 8000180:	f003 f949 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000184:	2200      	movs	r2, #0
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	48ce      	ldr	r0, [pc, #824]	; (80004c4 <letter+0x374>)
 800018a:	f003 f944 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800018e:	2201      	movs	r2, #1
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	48cc      	ldr	r0, [pc, #816]	; (80004c4 <letter+0x374>)
 8000194:	f003 f93f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	48ca      	ldr	r0, [pc, #808]	; (80004c8 <letter+0x378>)
 80001a0:	f003 f939 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80001a4:	2201      	movs	r2, #1
 80001a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001aa:	48c7      	ldr	r0, [pc, #796]	; (80004c8 <letter+0x378>)
 80001ac:	f003 f933 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b6:	48c4      	ldr	r0, [pc, #784]	; (80004c8 <letter+0x378>)
 80001b8:	f003 f92d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c2:	48c1      	ldr	r0, [pc, #772]	; (80004c8 <letter+0x378>)
 80001c4:	f003 f927 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ce:	48bc      	ldr	r0, [pc, #752]	; (80004c0 <letter+0x370>)
 80001d0:	f003 f921 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80001d4:	2002      	movs	r0, #2
 80001d6:	f002 feab 	bl	8002f30 <HAL_Delay>
	}
	if(L == '-')
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	2b2d      	cmp	r3, #45	; 0x2d
 80001de:	d13c      	bne.n	800025a <letter+0x10a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e6:	48b6      	ldr	r0, [pc, #728]	; (80004c0 <letter+0x370>)
 80001e8:	f003 f915 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80001ec:	2201      	movs	r2, #1
 80001ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f2:	48b4      	ldr	r0, [pc, #720]	; (80004c4 <letter+0x374>)
 80001f4:	f003 f90f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fe:	48b1      	ldr	r0, [pc, #708]	; (80004c4 <letter+0x374>)
 8000200:	f003 f909 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000204:	2201      	movs	r2, #1
 8000206:	2140      	movs	r1, #64	; 0x40
 8000208:	48ae      	ldr	r0, [pc, #696]	; (80004c4 <letter+0x374>)
 800020a:	f003 f904 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800020e:	2201      	movs	r2, #1
 8000210:	2180      	movs	r1, #128	; 0x80
 8000212:	48ac      	ldr	r0, [pc, #688]	; (80004c4 <letter+0x374>)
 8000214:	f003 f8ff 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000218:	2200      	movs	r2, #0
 800021a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800021e:	48aa      	ldr	r0, [pc, #680]	; (80004c8 <letter+0x378>)
 8000220:	f003 f8f9 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800022a:	48a7      	ldr	r0, [pc, #668]	; (80004c8 <letter+0x378>)
 800022c:	f003 f8f3 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000230:	2200      	movs	r2, #0
 8000232:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000236:	48a4      	ldr	r0, [pc, #656]	; (80004c8 <letter+0x378>)
 8000238:	f003 f8ed 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800023c:	2200      	movs	r2, #0
 800023e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000242:	48a1      	ldr	r0, [pc, #644]	; (80004c8 <letter+0x378>)
 8000244:	f003 f8e7 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	489c      	ldr	r0, [pc, #624]	; (80004c0 <letter+0x370>)
 8000250:	f003 f8e1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000254:	2002      	movs	r0, #2
 8000256:	f002 fe6b 	bl	8002f30 <HAL_Delay>
	}
	if(L == ' ')
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	2b20      	cmp	r3, #32
 800025e:	d13c      	bne.n	80002da <letter+0x18a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000260:	2201      	movs	r2, #1
 8000262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000266:	4896      	ldr	r0, [pc, #600]	; (80004c0 <letter+0x370>)
 8000268:	f003 f8d5 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000272:	4894      	ldr	r0, [pc, #592]	; (80004c4 <letter+0x374>)
 8000274:	f003 f8cf 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027e:	4891      	ldr	r0, [pc, #580]	; (80004c4 <letter+0x374>)
 8000280:	f003 f8c9 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000284:	2200      	movs	r2, #0
 8000286:	2140      	movs	r1, #64	; 0x40
 8000288:	488e      	ldr	r0, [pc, #568]	; (80004c4 <letter+0x374>)
 800028a:	f003 f8c4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800028e:	2200      	movs	r2, #0
 8000290:	2180      	movs	r1, #128	; 0x80
 8000292:	488c      	ldr	r0, [pc, #560]	; (80004c4 <letter+0x374>)
 8000294:	f003 f8bf 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029e:	488a      	ldr	r0, [pc, #552]	; (80004c8 <letter+0x378>)
 80002a0:	f003 f8b9 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80002a4:	2201      	movs	r2, #1
 80002a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002aa:	4887      	ldr	r0, [pc, #540]	; (80004c8 <letter+0x378>)
 80002ac:	f003 f8b3 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b6:	4884      	ldr	r0, [pc, #528]	; (80004c8 <letter+0x378>)
 80002b8:	f003 f8ad 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c2:	4881      	ldr	r0, [pc, #516]	; (80004c8 <letter+0x378>)
 80002c4:	f003 f8a7 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ce:	487c      	ldr	r0, [pc, #496]	; (80004c0 <letter+0x370>)
 80002d0:	f003 f8a1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80002d4:	2002      	movs	r0, #2
 80002d6:	f002 fe2b 	bl	8002f30 <HAL_Delay>
	}
	if(L == '/')
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	2b2f      	cmp	r3, #47	; 0x2f
 80002de:	d13c      	bne.n	800035a <letter+0x20a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e6:	4876      	ldr	r0, [pc, #472]	; (80004c0 <letter+0x370>)
 80002e8:	f003 f895 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f2:	4874      	ldr	r0, [pc, #464]	; (80004c4 <letter+0x374>)
 80002f4:	f003 f88f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	4871      	ldr	r0, [pc, #452]	; (80004c4 <letter+0x374>)
 8000300:	f003 f889 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000304:	2201      	movs	r2, #1
 8000306:	2140      	movs	r1, #64	; 0x40
 8000308:	486e      	ldr	r0, [pc, #440]	; (80004c4 <letter+0x374>)
 800030a:	f003 f884 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800030e:	2201      	movs	r2, #1
 8000310:	2180      	movs	r1, #128	; 0x80
 8000312:	486c      	ldr	r0, [pc, #432]	; (80004c4 <letter+0x374>)
 8000314:	f003 f87f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031e:	486a      	ldr	r0, [pc, #424]	; (80004c8 <letter+0x378>)
 8000320:	f003 f879 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000324:	2201      	movs	r2, #1
 8000326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032a:	4867      	ldr	r0, [pc, #412]	; (80004c8 <letter+0x378>)
 800032c:	f003 f873 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000330:	2200      	movs	r2, #0
 8000332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000336:	4864      	ldr	r0, [pc, #400]	; (80004c8 <letter+0x378>)
 8000338:	f003 f86d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800033c:	2200      	movs	r2, #0
 800033e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000342:	4861      	ldr	r0, [pc, #388]	; (80004c8 <letter+0x378>)
 8000344:	f003 f867 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034e:	485c      	ldr	r0, [pc, #368]	; (80004c0 <letter+0x370>)
 8000350:	f003 f861 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000354:	2002      	movs	r0, #2
 8000356:	f002 fdeb 	bl	8002f30 <HAL_Delay>
	}
	if(L == '!')
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	2b21      	cmp	r3, #33	; 0x21
 800035e:	d139      	bne.n	80003d4 <letter+0x284>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000366:	4856      	ldr	r0, [pc, #344]	; (80004c0 <letter+0x370>)
 8000368:	f003 f855 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000372:	4854      	ldr	r0, [pc, #336]	; (80004c4 <letter+0x374>)
 8000374:	f003 f84f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037e:	4851      	ldr	r0, [pc, #324]	; (80004c4 <letter+0x374>)
 8000380:	f003 f849 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000384:	2200      	movs	r2, #0
 8000386:	2140      	movs	r1, #64	; 0x40
 8000388:	484e      	ldr	r0, [pc, #312]	; (80004c4 <letter+0x374>)
 800038a:	f003 f844 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800038e:	2200      	movs	r2, #0
 8000390:	2180      	movs	r1, #128	; 0x80
 8000392:	484c      	ldr	r0, [pc, #304]	; (80004c4 <letter+0x374>)
 8000394:	f003 f83f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800039e:	484a      	ldr	r0, [pc, #296]	; (80004c8 <letter+0x378>)
 80003a0:	f003 f839 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003aa:	4847      	ldr	r0, [pc, #284]	; (80004c8 <letter+0x378>)
 80003ac:	f003 f833 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b6:	4844      	ldr	r0, [pc, #272]	; (80004c8 <letter+0x378>)
 80003b8:	f003 f82d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80003bc:	2200      	movs	r2, #0
 80003be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c2:	4841      	ldr	r0, [pc, #260]	; (80004c8 <letter+0x378>)
 80003c4:	f003 f827 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	483c      	ldr	r0, [pc, #240]	; (80004c0 <letter+0x370>)
 80003d0:	f003 f821 	bl	8003416 <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2b3f      	cmp	r3, #63	; 0x3f
 80003d8:	d13c      	bne.n	8000454 <letter+0x304>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80003da:	2201      	movs	r2, #1
 80003dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e0:	4837      	ldr	r0, [pc, #220]	; (80004c0 <letter+0x370>)
 80003e2:	f003 f818 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ec:	4835      	ldr	r0, [pc, #212]	; (80004c4 <letter+0x374>)
 80003ee:	f003 f812 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f8:	4832      	ldr	r0, [pc, #200]	; (80004c4 <letter+0x374>)
 80003fa:	f003 f80c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80003fe:	2201      	movs	r2, #1
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	4830      	ldr	r0, [pc, #192]	; (80004c4 <letter+0x374>)
 8000404:	f003 f807 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000408:	2201      	movs	r2, #1
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	482d      	ldr	r0, [pc, #180]	; (80004c4 <letter+0x374>)
 800040e:	f003 f802 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000418:	482b      	ldr	r0, [pc, #172]	; (80004c8 <letter+0x378>)
 800041a:	f002 fffc 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000424:	4828      	ldr	r0, [pc, #160]	; (80004c8 <letter+0x378>)
 8000426:	f002 fff6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000430:	4825      	ldr	r0, [pc, #148]	; (80004c8 <letter+0x378>)
 8000432:	f002 fff0 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800043c:	4822      	ldr	r0, [pc, #136]	; (80004c8 <letter+0x378>)
 800043e:	f002 ffea 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	481d      	ldr	r0, [pc, #116]	; (80004c0 <letter+0x370>)
 800044a:	f002 ffe4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800044e:	2002      	movs	r0, #2
 8000450:	f002 fd6e 	bl	8002f30 <HAL_Delay>
	}
	if(L == '*')
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	2b2a      	cmp	r3, #42	; 0x2a
 8000458:	d144      	bne.n	80004e4 <letter+0x394>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	4817      	ldr	r0, [pc, #92]	; (80004c0 <letter+0x370>)
 8000462:	f002 ffd8 	bl	8003416 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 8000466:	2200      	movs	r2, #0
 8000468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800046c:	4815      	ldr	r0, [pc, #84]	; (80004c4 <letter+0x374>)
 800046e:	f002 ffd2 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000478:	4812      	ldr	r0, [pc, #72]	; (80004c4 <letter+0x374>)
 800047a:	f002 ffcc 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	4810      	ldr	r0, [pc, #64]	; (80004c4 <letter+0x374>)
 8000484:	f002 ffc7 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000488:	2201      	movs	r2, #1
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <letter+0x374>)
 800048e:	f002 ffc2 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000498:	480b      	ldr	r0, [pc, #44]	; (80004c8 <letter+0x378>)
 800049a:	f002 ffbc 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800049e:	2201      	movs	r2, #1
 80004a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a4:	4808      	ldr	r0, [pc, #32]	; (80004c8 <letter+0x378>)
 80004a6:	f002 ffb6 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b0:	4805      	ldr	r0, [pc, #20]	; (80004c8 <letter+0x378>)
 80004b2:	f002 ffb0 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	e006      	b.n	80004cc <letter+0x37c>
 80004be:	bf00      	nop
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	48d5      	ldr	r0, [pc, #852]	; (8000824 <letter+0x6d4>)
 80004ce:	f002 ffa2 	bl	8003416 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d8:	48d3      	ldr	r0, [pc, #844]	; (8000828 <letter+0x6d8>)
 80004da:	f002 ff9c 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80004de:	2002      	movs	r0, #2
 80004e0:	f002 fd26 	bl	8002f30 <HAL_Delay>
	}
	if(L == '#')
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	2b23      	cmp	r3, #35	; 0x23
 80004e8:	d13c      	bne.n	8000564 <letter+0x414>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f0:	48cd      	ldr	r0, [pc, #820]	; (8000828 <letter+0x6d8>)
 80004f2:	f002 ff90 	bl	8003416 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80004f6:	2201      	movs	r2, #1
 80004f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004fc:	48cb      	ldr	r0, [pc, #812]	; (800082c <letter+0x6dc>)
 80004fe:	f002 ff8a 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000508:	48c8      	ldr	r0, [pc, #800]	; (800082c <letter+0x6dc>)
 800050a:	f002 ff84 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800050e:	2200      	movs	r2, #0
 8000510:	2140      	movs	r1, #64	; 0x40
 8000512:	48c6      	ldr	r0, [pc, #792]	; (800082c <letter+0x6dc>)
 8000514:	f002 ff7f 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000518:	2200      	movs	r2, #0
 800051a:	2180      	movs	r1, #128	; 0x80
 800051c:	48c3      	ldr	r0, [pc, #780]	; (800082c <letter+0x6dc>)
 800051e:	f002 ff7a 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000528:	48be      	ldr	r0, [pc, #760]	; (8000824 <letter+0x6d4>)
 800052a:	f002 ff74 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000534:	48bb      	ldr	r0, [pc, #748]	; (8000824 <letter+0x6d4>)
 8000536:	f002 ff6e 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	48b8      	ldr	r0, [pc, #736]	; (8000824 <letter+0x6d4>)
 8000542:	f002 ff68 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054c:	48b5      	ldr	r0, [pc, #724]	; (8000824 <letter+0x6d4>)
 800054e:	f002 ff62 	bl	8003416 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000558:	48b3      	ldr	r0, [pc, #716]	; (8000828 <letter+0x6d8>)
 800055a:	f002 ff5c 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 800055e:	2002      	movs	r0, #2
 8000560:	f002 fce6 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'a')
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b61      	cmp	r3, #97	; 0x61
 8000568:	d13c      	bne.n	80005e4 <letter+0x494>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	48ad      	ldr	r0, [pc, #692]	; (8000828 <letter+0x6d8>)
 8000572:	f002 ff50 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800057c:	48ab      	ldr	r0, [pc, #684]	; (800082c <letter+0x6dc>)
 800057e:	f002 ff4a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	48a8      	ldr	r0, [pc, #672]	; (800082c <letter+0x6dc>)
 800058a:	f002 ff44 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800058e:	2200      	movs	r2, #0
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	48a6      	ldr	r0, [pc, #664]	; (800082c <letter+0x6dc>)
 8000594:	f002 ff3f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000598:	2200      	movs	r2, #0
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	48a3      	ldr	r0, [pc, #652]	; (800082c <letter+0x6dc>)
 800059e:	f002 ff3a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a8:	489e      	ldr	r0, [pc, #632]	; (8000824 <letter+0x6d4>)
 80005aa:	f002 ff34 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b4:	489b      	ldr	r0, [pc, #620]	; (8000824 <letter+0x6d4>)
 80005b6:	f002 ff2e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c0:	4898      	ldr	r0, [pc, #608]	; (8000824 <letter+0x6d4>)
 80005c2:	f002 ff28 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	4895      	ldr	r0, [pc, #596]	; (8000824 <letter+0x6d4>)
 80005ce:	f002 ff22 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	4893      	ldr	r0, [pc, #588]	; (8000828 <letter+0x6d8>)
 80005da:	f002 ff1c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80005de:	2002      	movs	r0, #2
 80005e0:	f002 fca6 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'b')
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	2b62      	cmp	r3, #98	; 0x62
 80005e8:	d13c      	bne.n	8000664 <letter+0x514>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f0:	488d      	ldr	r0, [pc, #564]	; (8000828 <letter+0x6d8>)
 80005f2:	f002 ff10 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	488b      	ldr	r0, [pc, #556]	; (800082c <letter+0x6dc>)
 80005fe:	f002 ff0a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	4888      	ldr	r0, [pc, #544]	; (800082c <letter+0x6dc>)
 800060a:	f002 ff04 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800060e:	2200      	movs	r2, #0
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	4886      	ldr	r0, [pc, #536]	; (800082c <letter+0x6dc>)
 8000614:	f002 feff 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000618:	2200      	movs	r2, #0
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	4883      	ldr	r0, [pc, #524]	; (800082c <letter+0x6dc>)
 800061e:	f002 fefa 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000628:	487e      	ldr	r0, [pc, #504]	; (8000824 <letter+0x6d4>)
 800062a:	f002 fef4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000634:	487b      	ldr	r0, [pc, #492]	; (8000824 <letter+0x6d4>)
 8000636:	f002 feee 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000640:	4878      	ldr	r0, [pc, #480]	; (8000824 <letter+0x6d4>)
 8000642:	f002 fee8 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064c:	4875      	ldr	r0, [pc, #468]	; (8000824 <letter+0x6d4>)
 800064e:	f002 fee2 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000658:	4873      	ldr	r0, [pc, #460]	; (8000828 <letter+0x6d8>)
 800065a:	f002 fedc 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800065e:	2002      	movs	r0, #2
 8000660:	f002 fc66 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'C')
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b43      	cmp	r3, #67	; 0x43
 8000668:	d13c      	bne.n	80006e4 <letter+0x594>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	486d      	ldr	r0, [pc, #436]	; (8000828 <letter+0x6d8>)
 8000672:	f002 fed0 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	486b      	ldr	r0, [pc, #428]	; (800082c <letter+0x6dc>)
 800067e:	f002 feca 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	4868      	ldr	r0, [pc, #416]	; (800082c <letter+0x6dc>)
 800068a:	f002 fec4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800068e:	2200      	movs	r2, #0
 8000690:	2140      	movs	r1, #64	; 0x40
 8000692:	4866      	ldr	r0, [pc, #408]	; (800082c <letter+0x6dc>)
 8000694:	f002 febf 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000698:	2200      	movs	r2, #0
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	4863      	ldr	r0, [pc, #396]	; (800082c <letter+0x6dc>)
 800069e:	f002 feba 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a8:	485e      	ldr	r0, [pc, #376]	; (8000824 <letter+0x6d4>)
 80006aa:	f002 feb4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b4:	485b      	ldr	r0, [pc, #364]	; (8000824 <letter+0x6d4>)
 80006b6:	f002 feae 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80006ba:	2201      	movs	r2, #1
 80006bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c0:	4858      	ldr	r0, [pc, #352]	; (8000824 <letter+0x6d4>)
 80006c2:	f002 fea8 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006cc:	4855      	ldr	r0, [pc, #340]	; (8000824 <letter+0x6d4>)
 80006ce:	f002 fea2 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4853      	ldr	r0, [pc, #332]	; (8000828 <letter+0x6d8>)
 80006da:	f002 fe9c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80006de:	2002      	movs	r0, #2
 80006e0:	f002 fc26 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'c')
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	2b63      	cmp	r3, #99	; 0x63
 80006e8:	d13c      	bne.n	8000764 <letter+0x614>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f0:	484d      	ldr	r0, [pc, #308]	; (8000828 <letter+0x6d8>)
 80006f2:	f002 fe90 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	484b      	ldr	r0, [pc, #300]	; (800082c <letter+0x6dc>)
 80006fe:	f002 fe8a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4848      	ldr	r0, [pc, #288]	; (800082c <letter+0x6dc>)
 800070a:	f002 fe84 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800070e:	2200      	movs	r2, #0
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	4846      	ldr	r0, [pc, #280]	; (800082c <letter+0x6dc>)
 8000714:	f002 fe7f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000718:	2200      	movs	r2, #0
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	4843      	ldr	r0, [pc, #268]	; (800082c <letter+0x6dc>)
 800071e:	f002 fe7a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000728:	483e      	ldr	r0, [pc, #248]	; (8000824 <letter+0x6d4>)
 800072a:	f002 fe74 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800072e:	2201      	movs	r2, #1
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <letter+0x6d4>)
 8000736:	f002 fe6e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000740:	4838      	ldr	r0, [pc, #224]	; (8000824 <letter+0x6d4>)
 8000742:	f002 fe68 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800074c:	4835      	ldr	r0, [pc, #212]	; (8000824 <letter+0x6d4>)
 800074e:	f002 fe62 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	4833      	ldr	r0, [pc, #204]	; (8000828 <letter+0x6d8>)
 800075a:	f002 fe5c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800075e:	2002      	movs	r0, #2
 8000760:	f002 fbe6 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'd')
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b64      	cmp	r3, #100	; 0x64
 8000768:	d13c      	bne.n	80007e4 <letter+0x694>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000770:	482d      	ldr	r0, [pc, #180]	; (8000828 <letter+0x6d8>)
 8000772:	f002 fe50 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077c:	482b      	ldr	r0, [pc, #172]	; (800082c <letter+0x6dc>)
 800077e:	f002 fe4a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	4828      	ldr	r0, [pc, #160]	; (800082c <letter+0x6dc>)
 800078a:	f002 fe44 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800078e:	2201      	movs	r2, #1
 8000790:	2140      	movs	r1, #64	; 0x40
 8000792:	4826      	ldr	r0, [pc, #152]	; (800082c <letter+0x6dc>)
 8000794:	f002 fe3f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000798:	2200      	movs	r2, #0
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <letter+0x6dc>)
 800079e:	f002 fe3a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a8:	481e      	ldr	r0, [pc, #120]	; (8000824 <letter+0x6d4>)
 80007aa:	f002 fe34 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b4:	481b      	ldr	r0, [pc, #108]	; (8000824 <letter+0x6d4>)
 80007b6:	f002 fe2e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80007ba:	2201      	movs	r2, #1
 80007bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c0:	4818      	ldr	r0, [pc, #96]	; (8000824 <letter+0x6d4>)
 80007c2:	f002 fe28 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80007c6:	2200      	movs	r2, #0
 80007c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007cc:	4815      	ldr	r0, [pc, #84]	; (8000824 <letter+0x6d4>)
 80007ce:	f002 fe22 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007d2:	2200      	movs	r2, #0
 80007d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <letter+0x6d8>)
 80007da:	f002 fe1c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80007de:	2002      	movs	r0, #2
 80007e0:	f002 fba6 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'E')
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b45      	cmp	r3, #69	; 0x45
 80007e8:	d143      	bne.n	8000872 <letter+0x722>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <letter+0x6d8>)
 80007f2:	f002 fe10 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 80007f6:	2201      	movs	r2, #1
 80007f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <letter+0x6dc>)
 80007fe:	f002 fe0a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <letter+0x6dc>)
 800080a:	f002 fe04 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800080e:	2201      	movs	r2, #1
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <letter+0x6dc>)
 8000814:	f002 fdff 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000818:	2200      	movs	r2, #0
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <letter+0x6dc>)
 800081e:	f002 fdfa 	bl	8003416 <HAL_GPIO_WritePin>
 8000822:	e005      	b.n	8000830 <letter+0x6e0>
 8000824:	40010800 	.word	0x40010800
 8000828:	40010c00 	.word	0x40010c00
 800082c:	40011000 	.word	0x40011000
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	48d5      	ldr	r0, [pc, #852]	; (8000b8c <letter+0xa3c>)
 8000838:	f002 fded 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	48d2      	ldr	r0, [pc, #840]	; (8000b8c <letter+0xa3c>)
 8000844:	f002 fde7 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800084e:	48cf      	ldr	r0, [pc, #828]	; (8000b8c <letter+0xa3c>)
 8000850:	f002 fde1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	48cc      	ldr	r0, [pc, #816]	; (8000b8c <letter+0xa3c>)
 800085c:	f002 fddb 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	48ca      	ldr	r0, [pc, #808]	; (8000b90 <letter+0xa40>)
 8000868:	f002 fdd5 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800086c:	2002      	movs	r0, #2
 800086e:	f002 fb5f 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'e')
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b65      	cmp	r3, #101	; 0x65
 8000876:	d13c      	bne.n	80008f2 <letter+0x7a2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087e:	48c4      	ldr	r0, [pc, #784]	; (8000b90 <letter+0xa40>)
 8000880:	f002 fdc9 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088a:	48c2      	ldr	r0, [pc, #776]	; (8000b94 <letter+0xa44>)
 800088c:	f002 fdc3 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	48bf      	ldr	r0, [pc, #764]	; (8000b94 <letter+0xa44>)
 8000898:	f002 fdbd 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800089c:	2201      	movs	r2, #1
 800089e:	2140      	movs	r1, #64	; 0x40
 80008a0:	48bc      	ldr	r0, [pc, #752]	; (8000b94 <letter+0xa44>)
 80008a2:	f002 fdb8 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80008a6:	2200      	movs	r2, #0
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	48ba      	ldr	r0, [pc, #744]	; (8000b94 <letter+0xa44>)
 80008ac:	f002 fdb3 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b6:	48b5      	ldr	r0, [pc, #724]	; (8000b8c <letter+0xa3c>)
 80008b8:	f002 fdad 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c2:	48b2      	ldr	r0, [pc, #712]	; (8000b8c <letter+0xa3c>)
 80008c4:	f002 fda7 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80008c8:	2201      	movs	r2, #1
 80008ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ce:	48af      	ldr	r0, [pc, #700]	; (8000b8c <letter+0xa3c>)
 80008d0:	f002 fda1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008da:	48ac      	ldr	r0, [pc, #688]	; (8000b8c <letter+0xa3c>)
 80008dc:	f002 fd9b 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e6:	48aa      	ldr	r0, [pc, #680]	; (8000b90 <letter+0xa40>)
 80008e8:	f002 fd95 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80008ec:	2002      	movs	r0, #2
 80008ee:	f002 fb1f 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'f')
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b66      	cmp	r3, #102	; 0x66
 80008f6:	d13c      	bne.n	8000972 <letter+0x822>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fe:	48a4      	ldr	r0, [pc, #656]	; (8000b90 <letter+0xa40>)
 8000900:	f002 fd89 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090a:	48a2      	ldr	r0, [pc, #648]	; (8000b94 <letter+0xa44>)
 800090c:	f002 fd83 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000916:	489f      	ldr	r0, [pc, #636]	; (8000b94 <letter+0xa44>)
 8000918:	f002 fd7d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	489c      	ldr	r0, [pc, #624]	; (8000b94 <letter+0xa44>)
 8000922:	f002 fd78 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000926:	2200      	movs	r2, #0
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	489a      	ldr	r0, [pc, #616]	; (8000b94 <letter+0xa44>)
 800092c:	f002 fd73 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000936:	4895      	ldr	r0, [pc, #596]	; (8000b8c <letter+0xa3c>)
 8000938:	f002 fd6d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000942:	4892      	ldr	r0, [pc, #584]	; (8000b8c <letter+0xa3c>)
 8000944:	f002 fd67 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094e:	488f      	ldr	r0, [pc, #572]	; (8000b8c <letter+0xa3c>)
 8000950:	f002 fd61 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095a:	488c      	ldr	r0, [pc, #560]	; (8000b8c <letter+0xa3c>)
 800095c:	f002 fd5b 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000966:	488a      	ldr	r0, [pc, #552]	; (8000b90 <letter+0xa40>)
 8000968:	f002 fd55 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800096c:	2002      	movs	r0, #2
 800096e:	f002 fadf 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'G')
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b47      	cmp	r3, #71	; 0x47
 8000976:	d13c      	bne.n	80009f2 <letter+0x8a2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4884      	ldr	r0, [pc, #528]	; (8000b90 <letter+0xa40>)
 8000980:	f002 fd49 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800098a:	4882      	ldr	r0, [pc, #520]	; (8000b94 <letter+0xa44>)
 800098c:	f002 fd43 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	487f      	ldr	r0, [pc, #508]	; (8000b94 <letter+0xa44>)
 8000998:	f002 fd3d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800099c:	2201      	movs	r2, #1
 800099e:	2140      	movs	r1, #64	; 0x40
 80009a0:	487c      	ldr	r0, [pc, #496]	; (8000b94 <letter+0xa44>)
 80009a2:	f002 fd38 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80009a6:	2200      	movs	r2, #0
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	487a      	ldr	r0, [pc, #488]	; (8000b94 <letter+0xa44>)
 80009ac:	f002 fd33 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009b6:	4875      	ldr	r0, [pc, #468]	; (8000b8c <letter+0xa3c>)
 80009b8:	f002 fd2d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	4872      	ldr	r0, [pc, #456]	; (8000b8c <letter+0xa3c>)
 80009c4:	f002 fd27 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80009c8:	2201      	movs	r2, #1
 80009ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ce:	486f      	ldr	r0, [pc, #444]	; (8000b8c <letter+0xa3c>)
 80009d0:	f002 fd21 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009da:	486c      	ldr	r0, [pc, #432]	; (8000b8c <letter+0xa3c>)
 80009dc:	f002 fd1b 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	486a      	ldr	r0, [pc, #424]	; (8000b90 <letter+0xa40>)
 80009e8:	f002 fd15 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f002 fa9f 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'g')
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b67      	cmp	r3, #103	; 0x67
 80009f6:	d13c      	bne.n	8000a72 <letter+0x922>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	4864      	ldr	r0, [pc, #400]	; (8000b90 <letter+0xa40>)
 8000a00:	f002 fd09 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0a:	4862      	ldr	r0, [pc, #392]	; (8000b94 <letter+0xa44>)
 8000a0c:	f002 fd03 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a16:	485f      	ldr	r0, [pc, #380]	; (8000b94 <letter+0xa44>)
 8000a18:	f002 fcfd 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2140      	movs	r1, #64	; 0x40
 8000a20:	485c      	ldr	r0, [pc, #368]	; (8000b94 <letter+0xa44>)
 8000a22:	f002 fcf8 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a26:	2200      	movs	r2, #0
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	485a      	ldr	r0, [pc, #360]	; (8000b94 <letter+0xa44>)
 8000a2c:	f002 fcf3 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a36:	4855      	ldr	r0, [pc, #340]	; (8000b8c <letter+0xa3c>)
 8000a38:	f002 fced 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a42:	4852      	ldr	r0, [pc, #328]	; (8000b8c <letter+0xa3c>)
 8000a44:	f002 fce7 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4e:	484f      	ldr	r0, [pc, #316]	; (8000b8c <letter+0xa3c>)
 8000a50:	f002 fce1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5a:	484c      	ldr	r0, [pc, #304]	; (8000b8c <letter+0xa3c>)
 8000a5c:	f002 fcdb 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	484a      	ldr	r0, [pc, #296]	; (8000b90 <letter+0xa40>)
 8000a68:	f002 fcd5 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f002 fa5f 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'I')
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b49      	cmp	r3, #73	; 0x49
 8000a76:	d13c      	bne.n	8000af2 <letter+0x9a2>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	4844      	ldr	r0, [pc, #272]	; (8000b90 <letter+0xa40>)
 8000a80:	f002 fcc9 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	4842      	ldr	r0, [pc, #264]	; (8000b94 <letter+0xa44>)
 8000a8c:	f002 fcc3 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	483f      	ldr	r0, [pc, #252]	; (8000b94 <letter+0xa44>)
 8000a98:	f002 fcbd 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	483c      	ldr	r0, [pc, #240]	; (8000b94 <letter+0xa44>)
 8000aa2:	f002 fcb8 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	483a      	ldr	r0, [pc, #232]	; (8000b94 <letter+0xa44>)
 8000aac:	f002 fcb3 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab6:	4835      	ldr	r0, [pc, #212]	; (8000b8c <letter+0xa3c>)
 8000ab8:	f002 fcad 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac2:	4832      	ldr	r0, [pc, #200]	; (8000b8c <letter+0xa3c>)
 8000ac4:	f002 fca7 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ace:	482f      	ldr	r0, [pc, #188]	; (8000b8c <letter+0xa3c>)
 8000ad0:	f002 fca1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ada:	482c      	ldr	r0, [pc, #176]	; (8000b8c <letter+0xa3c>)
 8000adc:	f002 fc9b 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae6:	482a      	ldr	r0, [pc, #168]	; (8000b90 <letter+0xa40>)
 8000ae8:	f002 fc95 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000aec:	2002      	movs	r0, #2
 8000aee:	f002 fa1f 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'i')
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b69      	cmp	r3, #105	; 0x69
 8000af6:	d13c      	bne.n	8000b72 <letter+0xa22>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afe:	4824      	ldr	r0, [pc, #144]	; (8000b90 <letter+0xa40>)
 8000b00:	f002 fc89 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0a:	4822      	ldr	r0, [pc, #136]	; (8000b94 <letter+0xa44>)
 8000b0c:	f002 fc83 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	481f      	ldr	r0, [pc, #124]	; (8000b94 <letter+0xa44>)
 8000b18:	f002 fc7d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2140      	movs	r1, #64	; 0x40
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <letter+0xa44>)
 8000b22:	f002 fc78 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b26:	2201      	movs	r2, #1
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	481a      	ldr	r0, [pc, #104]	; (8000b94 <letter+0xa44>)
 8000b2c:	f002 fc73 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <letter+0xa3c>)
 8000b38:	f002 fc6d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b42:	4812      	ldr	r0, [pc, #72]	; (8000b8c <letter+0xa3c>)
 8000b44:	f002 fc67 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4e:	480f      	ldr	r0, [pc, #60]	; (8000b8c <letter+0xa3c>)
 8000b50:	f002 fc61 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <letter+0xa3c>)
 8000b5c:	f002 fc5b 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	480a      	ldr	r0, [pc, #40]	; (8000b90 <letter+0xa40>)
 8000b68:	f002 fc55 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f002 f9df 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'l')
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	2b6c      	cmp	r3, #108	; 0x6c
 8000b76:	d143      	bne.n	8000c00 <letter+0xab0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <letter+0xa40>)
 8000b80:	f002 fc49 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8a:	e005      	b.n	8000b98 <letter+0xa48>
 8000b8c:	40010800 	.word	0x40010800
 8000b90:	40010c00 	.word	0x40010c00
 8000b94:	40011000 	.word	0x40011000
 8000b98:	48d6      	ldr	r0, [pc, #856]	; (8000ef4 <letter+0xda4>)
 8000b9a:	f002 fc3c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba4:	48d3      	ldr	r0, [pc, #844]	; (8000ef4 <letter+0xda4>)
 8000ba6:	f002 fc36 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000baa:	2201      	movs	r2, #1
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	48d1      	ldr	r0, [pc, #836]	; (8000ef4 <letter+0xda4>)
 8000bb0:	f002 fc31 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	48ce      	ldr	r0, [pc, #824]	; (8000ef4 <letter+0xda4>)
 8000bba:	f002 fc2c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bc4:	48cc      	ldr	r0, [pc, #816]	; (8000ef8 <letter+0xda8>)
 8000bc6:	f002 fc26 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd0:	48c9      	ldr	r0, [pc, #804]	; (8000ef8 <letter+0xda8>)
 8000bd2:	f002 fc20 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bdc:	48c6      	ldr	r0, [pc, #792]	; (8000ef8 <letter+0xda8>)
 8000bde:	f002 fc1a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be8:	48c3      	ldr	r0, [pc, #780]	; (8000ef8 <letter+0xda8>)
 8000bea:	f002 fc14 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf4:	48c1      	ldr	r0, [pc, #772]	; (8000efc <letter+0xdac>)
 8000bf6:	f002 fc0e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f002 f998 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'm')
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b6d      	cmp	r3, #109	; 0x6d
 8000c04:	d13c      	bne.n	8000c80 <letter+0xb30>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0c:	48bb      	ldr	r0, [pc, #748]	; (8000efc <letter+0xdac>)
 8000c0e:	f002 fc02 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	48b6      	ldr	r0, [pc, #728]	; (8000ef4 <letter+0xda4>)
 8000c1a:	f002 fbfc 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	48b3      	ldr	r0, [pc, #716]	; (8000ef4 <letter+0xda4>)
 8000c26:	f002 fbf6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2140      	movs	r1, #64	; 0x40
 8000c2e:	48b1      	ldr	r0, [pc, #708]	; (8000ef4 <letter+0xda4>)
 8000c30:	f002 fbf1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c34:	2201      	movs	r2, #1
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	48ae      	ldr	r0, [pc, #696]	; (8000ef4 <letter+0xda4>)
 8000c3a:	f002 fbec 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c44:	48ac      	ldr	r0, [pc, #688]	; (8000ef8 <letter+0xda8>)
 8000c46:	f002 fbe6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	48a9      	ldr	r0, [pc, #676]	; (8000ef8 <letter+0xda8>)
 8000c52:	f002 fbe0 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	48a6      	ldr	r0, [pc, #664]	; (8000ef8 <letter+0xda8>)
 8000c5e:	f002 fbda 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c68:	48a3      	ldr	r0, [pc, #652]	; (8000ef8 <letter+0xda8>)
 8000c6a:	f002 fbd4 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c74:	48a1      	ldr	r0, [pc, #644]	; (8000efc <letter+0xdac>)
 8000c76:	f002 fbce 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000c7a:	2002      	movs	r0, #2
 8000c7c:	f002 f958 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'N')
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	2b4e      	cmp	r3, #78	; 0x4e
 8000c84:	d13c      	bne.n	8000d00 <letter+0xbb0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c86:	2201      	movs	r2, #1
 8000c88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c8c:	489b      	ldr	r0, [pc, #620]	; (8000efc <letter+0xdac>)
 8000c8e:	f002 fbc2 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c98:	4896      	ldr	r0, [pc, #600]	; (8000ef4 <letter+0xda4>)
 8000c9a:	f002 fbbc 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca4:	4893      	ldr	r0, [pc, #588]	; (8000ef4 <letter+0xda4>)
 8000ca6:	f002 fbb6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000caa:	2201      	movs	r2, #1
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	4891      	ldr	r0, [pc, #580]	; (8000ef4 <letter+0xda4>)
 8000cb0:	f002 fbb1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	488e      	ldr	r0, [pc, #568]	; (8000ef4 <letter+0xda4>)
 8000cba:	f002 fbac 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc4:	488c      	ldr	r0, [pc, #560]	; (8000ef8 <letter+0xda8>)
 8000cc6:	f002 fba6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd0:	4889      	ldr	r0, [pc, #548]	; (8000ef8 <letter+0xda8>)
 8000cd2:	f002 fba0 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	4886      	ldr	r0, [pc, #536]	; (8000ef8 <letter+0xda8>)
 8000cde:	f002 fb9a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce8:	4883      	ldr	r0, [pc, #524]	; (8000ef8 <letter+0xda8>)
 8000cea:	f002 fb94 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf4:	4881      	ldr	r0, [pc, #516]	; (8000efc <letter+0xdac>)
 8000cf6:	f002 fb8e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f002 f918 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'n')
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	2b6e      	cmp	r3, #110	; 0x6e
 8000d04:	d13c      	bne.n	8000d80 <letter+0xc30>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d06:	2201      	movs	r2, #1
 8000d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0c:	487b      	ldr	r0, [pc, #492]	; (8000efc <letter+0xdac>)
 8000d0e:	f002 fb82 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d18:	4876      	ldr	r0, [pc, #472]	; (8000ef4 <letter+0xda4>)
 8000d1a:	f002 fb7c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d24:	4873      	ldr	r0, [pc, #460]	; (8000ef4 <letter+0xda4>)
 8000d26:	f002 fb76 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4871      	ldr	r0, [pc, #452]	; (8000ef4 <letter+0xda4>)
 8000d30:	f002 fb71 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d34:	2201      	movs	r2, #1
 8000d36:	2180      	movs	r1, #128	; 0x80
 8000d38:	486e      	ldr	r0, [pc, #440]	; (8000ef4 <letter+0xda4>)
 8000d3a:	f002 fb6c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d44:	486c      	ldr	r0, [pc, #432]	; (8000ef8 <letter+0xda8>)
 8000d46:	f002 fb66 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d50:	4869      	ldr	r0, [pc, #420]	; (8000ef8 <letter+0xda8>)
 8000d52:	f002 fb60 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d5c:	4866      	ldr	r0, [pc, #408]	; (8000ef8 <letter+0xda8>)
 8000d5e:	f002 fb5a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d68:	4863      	ldr	r0, [pc, #396]	; (8000ef8 <letter+0xda8>)
 8000d6a:	f002 fb54 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d74:	4861      	ldr	r0, [pc, #388]	; (8000efc <letter+0xdac>)
 8000d76:	f002 fb4e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f002 f8d8 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'O')
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b4f      	cmp	r3, #79	; 0x4f
 8000d84:	d13c      	bne.n	8000e00 <letter+0xcb0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8c:	485b      	ldr	r0, [pc, #364]	; (8000efc <letter+0xdac>)
 8000d8e:	f002 fb42 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d98:	4856      	ldr	r0, [pc, #344]	; (8000ef4 <letter+0xda4>)
 8000d9a:	f002 fb3c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da4:	4853      	ldr	r0, [pc, #332]	; (8000ef4 <letter+0xda4>)
 8000da6:	f002 fb36 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000daa:	2201      	movs	r2, #1
 8000dac:	2140      	movs	r1, #64	; 0x40
 8000dae:	4851      	ldr	r0, [pc, #324]	; (8000ef4 <letter+0xda4>)
 8000db0:	f002 fb31 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000db4:	2201      	movs	r2, #1
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	484e      	ldr	r0, [pc, #312]	; (8000ef4 <letter+0xda4>)
 8000dba:	f002 fb2c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	484c      	ldr	r0, [pc, #304]	; (8000ef8 <letter+0xda8>)
 8000dc6:	f002 fb26 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	4849      	ldr	r0, [pc, #292]	; (8000ef8 <letter+0xda8>)
 8000dd2:	f002 fb20 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	4846      	ldr	r0, [pc, #280]	; (8000ef8 <letter+0xda8>)
 8000dde:	f002 fb1a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de8:	4843      	ldr	r0, [pc, #268]	; (8000ef8 <letter+0xda8>)
 8000dea:	f002 fb14 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df4:	4841      	ldr	r0, [pc, #260]	; (8000efc <letter+0xdac>)
 8000df6:	f002 fb0e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f002 f898 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'o')
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b6f      	cmp	r3, #111	; 0x6f
 8000e04:	d13c      	bne.n	8000e80 <letter+0xd30>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0c:	483b      	ldr	r0, [pc, #236]	; (8000efc <letter+0xdac>)
 8000e0e:	f002 fb02 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	4836      	ldr	r0, [pc, #216]	; (8000ef4 <letter+0xda4>)
 8000e1a:	f002 fafc 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	4833      	ldr	r0, [pc, #204]	; (8000ef4 <letter+0xda4>)
 8000e26:	f002 faf6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	4831      	ldr	r0, [pc, #196]	; (8000ef4 <letter+0xda4>)
 8000e30:	f002 faf1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000e34:	2201      	movs	r2, #1
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	482e      	ldr	r0, [pc, #184]	; (8000ef4 <letter+0xda4>)
 8000e3a:	f002 faec 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e44:	482c      	ldr	r0, [pc, #176]	; (8000ef8 <letter+0xda8>)
 8000e46:	f002 fae6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e50:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <letter+0xda8>)
 8000e52:	f002 fae0 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e5c:	4826      	ldr	r0, [pc, #152]	; (8000ef8 <letter+0xda8>)
 8000e5e:	f002 fada 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e68:	4823      	ldr	r0, [pc, #140]	; (8000ef8 <letter+0xda8>)
 8000e6a:	f002 fad4 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4821      	ldr	r0, [pc, #132]	; (8000efc <letter+0xdac>)
 8000e76:	f002 face 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f002 f858 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'P')
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b50      	cmp	r3, #80	; 0x50
 8000e84:	d144      	bne.n	8000f10 <letter+0xdc0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <letter+0xdac>)
 8000e8e:	f002 fac2 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e98:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <letter+0xda4>)
 8000e9a:	f002 fabc 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <letter+0xda4>)
 8000ea6:	f002 fab6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <letter+0xda4>)
 8000eb0:	f002 fab1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2180      	movs	r1, #128	; 0x80
 8000eb8:	480e      	ldr	r0, [pc, #56]	; (8000ef4 <letter+0xda4>)
 8000eba:	f002 faac 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <letter+0xda8>)
 8000ec6:	f002 faa6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <letter+0xda8>)
 8000ed2:	f002 faa0 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <letter+0xda8>)
 8000ede:	f002 fa9a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <letter+0xda8>)
 8000eea:	f002 fa94 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000eee:	2200      	movs	r2, #0
 8000ef0:	e006      	b.n	8000f00 <letter+0xdb0>
 8000ef2:	bf00      	nop
 8000ef4:	40011000 	.word	0x40011000
 8000ef8:	40010800 	.word	0x40010800
 8000efc:	40010c00 	.word	0x40010c00
 8000f00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f04:	48d5      	ldr	r0, [pc, #852]	; (800125c <letter+0x110c>)
 8000f06:	f002 fa86 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f002 f810 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'Q')
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b51      	cmp	r3, #81	; 0x51
 8000f14:	d13c      	bne.n	8000f90 <letter+0xe40>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1c:	48cf      	ldr	r0, [pc, #828]	; (800125c <letter+0x110c>)
 8000f1e:	f002 fa7a 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	48cd      	ldr	r0, [pc, #820]	; (8001260 <letter+0x1110>)
 8000f2a:	f002 fa74 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f34:	48ca      	ldr	r0, [pc, #808]	; (8001260 <letter+0x1110>)
 8000f36:	f002 fa6e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	48c8      	ldr	r0, [pc, #800]	; (8001260 <letter+0x1110>)
 8000f40:	f002 fa69 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	48c5      	ldr	r0, [pc, #788]	; (8001260 <letter+0x1110>)
 8000f4a:	f002 fa64 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	48c3      	ldr	r0, [pc, #780]	; (8001264 <letter+0x1114>)
 8000f56:	f002 fa5e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f60:	48c0      	ldr	r0, [pc, #768]	; (8001264 <letter+0x1114>)
 8000f62:	f002 fa58 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f66:	2201      	movs	r2, #1
 8000f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f6c:	48bd      	ldr	r0, [pc, #756]	; (8001264 <letter+0x1114>)
 8000f6e:	f002 fa52 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f78:	48ba      	ldr	r0, [pc, #744]	; (8001264 <letter+0x1114>)
 8000f7a:	f002 fa4c 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f84:	48b5      	ldr	r0, [pc, #724]	; (800125c <letter+0x110c>)
 8000f86:	f002 fa46 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f001 ffd0 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'r')
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b72      	cmp	r3, #114	; 0x72
 8000f94:	d13c      	bne.n	8001010 <letter+0xec0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f96:	2201      	movs	r2, #1
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	48af      	ldr	r0, [pc, #700]	; (800125c <letter+0x110c>)
 8000f9e:	f002 fa3a 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa8:	48ad      	ldr	r0, [pc, #692]	; (8001260 <letter+0x1110>)
 8000faa:	f002 fa34 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb4:	48aa      	ldr	r0, [pc, #680]	; (8001260 <letter+0x1110>)
 8000fb6:	f002 fa2e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2140      	movs	r1, #64	; 0x40
 8000fbe:	48a8      	ldr	r0, [pc, #672]	; (8001260 <letter+0x1110>)
 8000fc0:	f002 fa29 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2180      	movs	r1, #128	; 0x80
 8000fc8:	48a5      	ldr	r0, [pc, #660]	; (8001260 <letter+0x1110>)
 8000fca:	f002 fa24 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd4:	48a3      	ldr	r0, [pc, #652]	; (8001264 <letter+0x1114>)
 8000fd6:	f002 fa1e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe0:	48a0      	ldr	r0, [pc, #640]	; (8001264 <letter+0x1114>)
 8000fe2:	f002 fa18 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fec:	489d      	ldr	r0, [pc, #628]	; (8001264 <letter+0x1114>)
 8000fee:	f002 fa12 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff8:	489a      	ldr	r0, [pc, #616]	; (8001264 <letter+0x1114>)
 8000ffa:	f002 fa0c 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001004:	4895      	ldr	r0, [pc, #596]	; (800125c <letter+0x110c>)
 8001006:	f002 fa06 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800100a:	2002      	movs	r0, #2
 800100c:	f001 ff90 	bl	8002f30 <HAL_Delay>
	}
	if(L == 's')
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b73      	cmp	r3, #115	; 0x73
 8001014:	d13c      	bne.n	8001090 <letter+0xf40>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001016:	2201      	movs	r2, #1
 8001018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101c:	488f      	ldr	r0, [pc, #572]	; (800125c <letter+0x110c>)
 800101e:	f002 f9fa 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8001022:	2201      	movs	r2, #1
 8001024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001028:	488d      	ldr	r0, [pc, #564]	; (8001260 <letter+0x1110>)
 800102a:	f002 f9f4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001034:	488a      	ldr	r0, [pc, #552]	; (8001260 <letter+0x1110>)
 8001036:	f002 f9ee 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4888      	ldr	r0, [pc, #544]	; (8001260 <letter+0x1110>)
 8001040:	f002 f9e9 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001044:	2200      	movs	r2, #0
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	4885      	ldr	r0, [pc, #532]	; (8001260 <letter+0x1110>)
 800104a:	f002 f9e4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001054:	4883      	ldr	r0, [pc, #524]	; (8001264 <letter+0x1114>)
 8001056:	f002 f9de 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001060:	4880      	ldr	r0, [pc, #512]	; (8001264 <letter+0x1114>)
 8001062:	f002 f9d8 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106c:	487d      	ldr	r0, [pc, #500]	; (8001264 <letter+0x1114>)
 800106e:	f002 f9d2 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001078:	487a      	ldr	r0, [pc, #488]	; (8001264 <letter+0x1114>)
 800107a:	f002 f9cc 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001084:	4875      	ldr	r0, [pc, #468]	; (800125c <letter+0x110c>)
 8001086:	f002 f9c6 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800108a:	2002      	movs	r0, #2
 800108c:	f001 ff50 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'T')
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b54      	cmp	r3, #84	; 0x54
 8001094:	d13c      	bne.n	8001110 <letter+0xfc0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	486f      	ldr	r0, [pc, #444]	; (800125c <letter+0x110c>)
 800109e:	f002 f9ba 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a8:	486d      	ldr	r0, [pc, #436]	; (8001260 <letter+0x1110>)
 80010aa:	f002 f9b4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b4:	486a      	ldr	r0, [pc, #424]	; (8001260 <letter+0x1110>)
 80010b6:	f002 f9ae 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80010ba:	2201      	movs	r2, #1
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	4868      	ldr	r0, [pc, #416]	; (8001260 <letter+0x1110>)
 80010c0:	f002 f9a9 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80010c4:	2200      	movs	r2, #0
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	4865      	ldr	r0, [pc, #404]	; (8001260 <letter+0x1110>)
 80010ca:	f002 f9a4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d4:	4863      	ldr	r0, [pc, #396]	; (8001264 <letter+0x1114>)
 80010d6:	f002 f99e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e0:	4860      	ldr	r0, [pc, #384]	; (8001264 <letter+0x1114>)
 80010e2:	f002 f998 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ec:	485d      	ldr	r0, [pc, #372]	; (8001264 <letter+0x1114>)
 80010ee:	f002 f992 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f8:	485a      	ldr	r0, [pc, #360]	; (8001264 <letter+0x1114>)
 80010fa:	f002 f98c 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001104:	4855      	ldr	r0, [pc, #340]	; (800125c <letter+0x110c>)
 8001106:	f002 f986 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800110a:	2002      	movs	r0, #2
 800110c:	f001 ff10 	bl	8002f30 <HAL_Delay>
	}
	if(L == 't')
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b74      	cmp	r3, #116	; 0x74
 8001114:	d13c      	bne.n	8001190 <letter+0x1040>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111c:	484f      	ldr	r0, [pc, #316]	; (800125c <letter+0x110c>)
 800111e:	f002 f97a 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001128:	484d      	ldr	r0, [pc, #308]	; (8001260 <letter+0x1110>)
 800112a:	f002 f974 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001134:	484a      	ldr	r0, [pc, #296]	; (8001260 <letter+0x1110>)
 8001136:	f002 f96e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800113a:	2201      	movs	r2, #1
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	4848      	ldr	r0, [pc, #288]	; (8001260 <letter+0x1110>)
 8001140:	f002 f969 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001144:	2200      	movs	r2, #0
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	4845      	ldr	r0, [pc, #276]	; (8001260 <letter+0x1110>)
 800114a:	f002 f964 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001154:	4843      	ldr	r0, [pc, #268]	; (8001264 <letter+0x1114>)
 8001156:	f002 f95e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800115a:	2201      	movs	r2, #1
 800115c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001160:	4840      	ldr	r0, [pc, #256]	; (8001264 <letter+0x1114>)
 8001162:	f002 f958 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	483d      	ldr	r0, [pc, #244]	; (8001264 <letter+0x1114>)
 800116e:	f002 f952 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001172:	2200      	movs	r2, #0
 8001174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001178:	483a      	ldr	r0, [pc, #232]	; (8001264 <letter+0x1114>)
 800117a:	f002 f94c 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001184:	4835      	ldr	r0, [pc, #212]	; (800125c <letter+0x110c>)
 8001186:	f002 f946 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800118a:	2002      	movs	r0, #2
 800118c:	f001 fed0 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'u')
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b75      	cmp	r3, #117	; 0x75
 8001194:	d13c      	bne.n	8001210 <letter+0x10c0>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	482f      	ldr	r0, [pc, #188]	; (800125c <letter+0x110c>)
 800119e:	f002 f93a 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a8:	482d      	ldr	r0, [pc, #180]	; (8001260 <letter+0x1110>)
 80011aa:	f002 f934 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b4:	482a      	ldr	r0, [pc, #168]	; (8001260 <letter+0x1110>)
 80011b6:	f002 f92e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80011ba:	2201      	movs	r2, #1
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	4828      	ldr	r0, [pc, #160]	; (8001260 <letter+0x1110>)
 80011c0:	f002 f929 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80011c4:	2200      	movs	r2, #0
 80011c6:	2180      	movs	r1, #128	; 0x80
 80011c8:	4825      	ldr	r0, [pc, #148]	; (8001260 <letter+0x1110>)
 80011ca:	f002 f924 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d4:	4823      	ldr	r0, [pc, #140]	; (8001264 <letter+0x1114>)
 80011d6:	f002 f91e 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e0:	4820      	ldr	r0, [pc, #128]	; (8001264 <letter+0x1114>)
 80011e2:	f002 f918 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011ec:	481d      	ldr	r0, [pc, #116]	; (8001264 <letter+0x1114>)
 80011ee:	f002 f912 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011f2:	2200      	movs	r2, #0
 80011f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f8:	481a      	ldr	r0, [pc, #104]	; (8001264 <letter+0x1114>)
 80011fa:	f002 f90c 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001204:	4815      	ldr	r0, [pc, #84]	; (800125c <letter+0x110c>)
 8001206:	f002 f906 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800120a:	2002      	movs	r0, #2
 800120c:	f001 fe90 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'v')
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b76      	cmp	r3, #118	; 0x76
 8001214:	d143      	bne.n	800129e <letter+0x114e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001216:	2201      	movs	r2, #1
 8001218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800121c:	480f      	ldr	r0, [pc, #60]	; (800125c <letter+0x110c>)
 800121e:	f002 f8fa 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001228:	480d      	ldr	r0, [pc, #52]	; (8001260 <letter+0x1110>)
 800122a:	f002 f8f4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <letter+0x1110>)
 8001236:	f002 f8ee 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800123a:	2201      	movs	r2, #1
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <letter+0x1110>)
 8001240:	f002 f8e9 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <letter+0x1110>)
 800124a:	f002 f8e4 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800124e:	2201      	movs	r2, #1
 8001250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001254:	4803      	ldr	r0, [pc, #12]	; (8001264 <letter+0x1114>)
 8001256:	f002 f8de 	bl	8003416 <HAL_GPIO_WritePin>
 800125a:	e005      	b.n	8001268 <letter+0x1118>
 800125c:	40010c00 	.word	0x40010c00
 8001260:	40011000 	.word	0x40011000
 8001264:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800126e:	48d6      	ldr	r0, [pc, #856]	; (80015c8 <letter+0x1478>)
 8001270:	f002 f8d1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127a:	48d3      	ldr	r0, [pc, #844]	; (80015c8 <letter+0x1478>)
 800127c:	f002 f8cb 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001286:	48d0      	ldr	r0, [pc, #832]	; (80015c8 <letter+0x1478>)
 8001288:	f002 f8c5 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001292:	48ce      	ldr	r0, [pc, #824]	; (80015cc <letter+0x147c>)
 8001294:	f002 f8bf 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001298:	2002      	movs	r0, #2
 800129a:	f001 fe49 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'W')
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b57      	cmp	r3, #87	; 0x57
 80012a2:	d13c      	bne.n	800131e <letter+0x11ce>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012a4:	2201      	movs	r2, #1
 80012a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012aa:	48c8      	ldr	r0, [pc, #800]	; (80015cc <letter+0x147c>)
 80012ac:	f002 f8b3 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b6:	48c6      	ldr	r0, [pc, #792]	; (80015d0 <letter+0x1480>)
 80012b8:	f002 f8ad 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012bc:	2201      	movs	r2, #1
 80012be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c2:	48c3      	ldr	r0, [pc, #780]	; (80015d0 <letter+0x1480>)
 80012c4:	f002 f8a7 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80012c8:	2201      	movs	r2, #1
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	48c0      	ldr	r0, [pc, #768]	; (80015d0 <letter+0x1480>)
 80012ce:	f002 f8a2 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80012d2:	2200      	movs	r2, #0
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	48be      	ldr	r0, [pc, #760]	; (80015d0 <letter+0x1480>)
 80012d8:	f002 f89d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e2:	48b9      	ldr	r0, [pc, #740]	; (80015c8 <letter+0x1478>)
 80012e4:	f002 f897 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ee:	48b6      	ldr	r0, [pc, #728]	; (80015c8 <letter+0x1478>)
 80012f0:	f002 f891 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fa:	48b3      	ldr	r0, [pc, #716]	; (80015c8 <letter+0x1478>)
 80012fc:	f002 f88b 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001306:	48b0      	ldr	r0, [pc, #704]	; (80015c8 <letter+0x1478>)
 8001308:	f002 f885 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001312:	48ae      	ldr	r0, [pc, #696]	; (80015cc <letter+0x147c>)
 8001314:	f002 f87f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001318:	2002      	movs	r0, #2
 800131a:	f001 fe09 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'w')
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b77      	cmp	r3, #119	; 0x77
 8001322:	d13c      	bne.n	800139e <letter+0x124e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	48a8      	ldr	r0, [pc, #672]	; (80015cc <letter+0x147c>)
 800132c:	f002 f873 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001336:	48a6      	ldr	r0, [pc, #664]	; (80015d0 <letter+0x1480>)
 8001338:	f002 f86d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001342:	48a3      	ldr	r0, [pc, #652]	; (80015d0 <letter+0x1480>)
 8001344:	f002 f867 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001348:	2201      	movs	r2, #1
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	48a0      	ldr	r0, [pc, #640]	; (80015d0 <letter+0x1480>)
 800134e:	f002 f862 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001352:	2200      	movs	r2, #0
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	489e      	ldr	r0, [pc, #632]	; (80015d0 <letter+0x1480>)
 8001358:	f002 f85d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800135c:	2201      	movs	r2, #1
 800135e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001362:	4899      	ldr	r0, [pc, #612]	; (80015c8 <letter+0x1478>)
 8001364:	f002 f857 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001368:	2201      	movs	r2, #1
 800136a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136e:	4896      	ldr	r0, [pc, #600]	; (80015c8 <letter+0x1478>)
 8001370:	f002 f851 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137a:	4893      	ldr	r0, [pc, #588]	; (80015c8 <letter+0x1478>)
 800137c:	f002 f84b 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001386:	4890      	ldr	r0, [pc, #576]	; (80015c8 <letter+0x1478>)
 8001388:	f002 f845 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001392:	488e      	ldr	r0, [pc, #568]	; (80015cc <letter+0x147c>)
 8001394:	f002 f83f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001398:	2002      	movs	r0, #2
 800139a:	f001 fdc9 	bl	8002f30 <HAL_Delay>
	}
	if(L == 'y')
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b79      	cmp	r3, #121	; 0x79
 80013a2:	d13c      	bne.n	800141e <letter+0x12ce>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013aa:	4888      	ldr	r0, [pc, #544]	; (80015cc <letter+0x147c>)
 80013ac:	f002 f833 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	4886      	ldr	r0, [pc, #536]	; (80015d0 <letter+0x1480>)
 80013b8:	f002 f82d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c2:	4883      	ldr	r0, [pc, #524]	; (80015d0 <letter+0x1480>)
 80013c4:	f002 f827 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013c8:	2200      	movs	r2, #0
 80013ca:	2140      	movs	r1, #64	; 0x40
 80013cc:	4880      	ldr	r0, [pc, #512]	; (80015d0 <letter+0x1480>)
 80013ce:	f002 f822 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80013d2:	2201      	movs	r2, #1
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	487e      	ldr	r0, [pc, #504]	; (80015d0 <letter+0x1480>)
 80013d8:	f002 f81d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e2:	4879      	ldr	r0, [pc, #484]	; (80015c8 <letter+0x1478>)
 80013e4:	f002 f817 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ee:	4876      	ldr	r0, [pc, #472]	; (80015c8 <letter+0x1478>)
 80013f0:	f002 f811 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fa:	4873      	ldr	r0, [pc, #460]	; (80015c8 <letter+0x1478>)
 80013fc:	f002 f80b 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001400:	2200      	movs	r2, #0
 8001402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001406:	4870      	ldr	r0, [pc, #448]	; (80015c8 <letter+0x1478>)
 8001408:	f002 f805 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001412:	486e      	ldr	r0, [pc, #440]	; (80015cc <letter+0x147c>)
 8001414:	f001 ffff 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001418:	2002      	movs	r0, #2
 800141a:	f001 fd89 	bl	8002f30 <HAL_Delay>
	}
	if(L == '0')
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b30      	cmp	r3, #48	; 0x30
 8001422:	d13c      	bne.n	800149e <letter+0x134e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142a:	4868      	ldr	r0, [pc, #416]	; (80015cc <letter+0x147c>)
 800142c:	f001 fff3 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 8001430:	2200      	movs	r2, #0
 8001432:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001436:	4866      	ldr	r0, [pc, #408]	; (80015d0 <letter+0x1480>)
 8001438:	f001 ffed 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001442:	4863      	ldr	r0, [pc, #396]	; (80015d0 <letter+0x1480>)
 8001444:	f001 ffe7 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001448:	2200      	movs	r2, #0
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	4860      	ldr	r0, [pc, #384]	; (80015d0 <letter+0x1480>)
 800144e:	f001 ffe2 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001452:	2200      	movs	r2, #0
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	485e      	ldr	r0, [pc, #376]	; (80015d0 <letter+0x1480>)
 8001458:	f001 ffdd 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001462:	4859      	ldr	r0, [pc, #356]	; (80015c8 <letter+0x1478>)
 8001464:	f001 ffd7 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800146e:	4856      	ldr	r0, [pc, #344]	; (80015c8 <letter+0x1478>)
 8001470:	f001 ffd1 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147a:	4853      	ldr	r0, [pc, #332]	; (80015c8 <letter+0x1478>)
 800147c:	f001 ffcb 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001486:	4850      	ldr	r0, [pc, #320]	; (80015c8 <letter+0x1478>)
 8001488:	f001 ffc5 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	484e      	ldr	r0, [pc, #312]	; (80015cc <letter+0x147c>)
 8001494:	f001 ffbf 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001498:	2002      	movs	r0, #2
 800149a:	f001 fd49 	bl	8002f30 <HAL_Delay>
	}
	if(L == '1')
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b31      	cmp	r3, #49	; 0x31
 80014a2:	d13c      	bne.n	800151e <letter+0x13ce>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	4848      	ldr	r0, [pc, #288]	; (80015cc <letter+0x147c>)
 80014ac:	f001 ffb3 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b6:	4846      	ldr	r0, [pc, #280]	; (80015d0 <letter+0x1480>)
 80014b8:	f001 ffad 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014c2:	4843      	ldr	r0, [pc, #268]	; (80015d0 <letter+0x1480>)
 80014c4:	f001 ffa7 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80014c8:	2200      	movs	r2, #0
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	4840      	ldr	r0, [pc, #256]	; (80015d0 <letter+0x1480>)
 80014ce:	f001 ffa2 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80014d2:	2200      	movs	r2, #0
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	483e      	ldr	r0, [pc, #248]	; (80015d0 <letter+0x1480>)
 80014d8:	f001 ff9d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e2:	4839      	ldr	r0, [pc, #228]	; (80015c8 <letter+0x1478>)
 80014e4:	f001 ff97 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ee:	4836      	ldr	r0, [pc, #216]	; (80015c8 <letter+0x1478>)
 80014f0:	f001 ff91 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fa:	4833      	ldr	r0, [pc, #204]	; (80015c8 <letter+0x1478>)
 80014fc:	f001 ff8b 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001506:	4830      	ldr	r0, [pc, #192]	; (80015c8 <letter+0x1478>)
 8001508:	f001 ff85 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	482e      	ldr	r0, [pc, #184]	; (80015cc <letter+0x147c>)
 8001514:	f001 ff7f 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001518:	2002      	movs	r0, #2
 800151a:	f001 fd09 	bl	8002f30 <HAL_Delay>
	}
	if(L == '2')
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b32      	cmp	r3, #50	; 0x32
 8001522:	d139      	bne.n	8001598 <letter+0x1448>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	4828      	ldr	r0, [pc, #160]	; (80015cc <letter+0x147c>)
 800152c:	f001 ff73 	bl	8003416 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 8001530:	2200      	movs	r2, #0
 8001532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001536:	4826      	ldr	r0, [pc, #152]	; (80015d0 <letter+0x1480>)
 8001538:	f001 ff6d 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001542:	4823      	ldr	r0, [pc, #140]	; (80015d0 <letter+0x1480>)
 8001544:	f001 ff67 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001548:	2200      	movs	r2, #0
 800154a:	2140      	movs	r1, #64	; 0x40
 800154c:	4820      	ldr	r0, [pc, #128]	; (80015d0 <letter+0x1480>)
 800154e:	f001 ff62 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001552:	2200      	movs	r2, #0
 8001554:	2180      	movs	r1, #128	; 0x80
 8001556:	481e      	ldr	r0, [pc, #120]	; (80015d0 <letter+0x1480>)
 8001558:	f001 ff5d 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001562:	4819      	ldr	r0, [pc, #100]	; (80015c8 <letter+0x1478>)
 8001564:	f001 ff57 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156e:	4816      	ldr	r0, [pc, #88]	; (80015c8 <letter+0x1478>)
 8001570:	f001 ff51 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	4813      	ldr	r0, [pc, #76]	; (80015c8 <letter+0x1478>)
 800157c:	f001 ff4b 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001586:	4810      	ldr	r0, [pc, #64]	; (80015c8 <letter+0x1478>)
 8001588:	f001 ff45 	bl	8003416 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001592:	480e      	ldr	r0, [pc, #56]	; (80015cc <letter+0x147c>)
 8001594:	f001 ff3f 	bl	8003416 <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	2b33      	cmp	r3, #51	; 0x33
 800159c:	d144      	bne.n	8001628 <letter+0x14d8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800159e:	2201      	movs	r2, #1
 80015a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a4:	4809      	ldr	r0, [pc, #36]	; (80015cc <letter+0x147c>)
 80015a6:	f001 ff36 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <letter+0x1480>)
 80015b2:	f001 ff30 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80015b6:	2201      	movs	r2, #1
 80015b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <letter+0x1480>)
 80015be:	f001 ff2a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80015c2:	2200      	movs	r2, #0
 80015c4:	e006      	b.n	80015d4 <letter+0x1484>
 80015c6:	bf00      	nop
 80015c8:	40010800 	.word	0x40010800
 80015cc:	40010c00 	.word	0x40010c00
 80015d0:	40011000 	.word	0x40011000
 80015d4:	2140      	movs	r1, #64	; 0x40
 80015d6:	48d6      	ldr	r0, [pc, #856]	; (8001930 <letter+0x17e0>)
 80015d8:	f001 ff1d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80015dc:	2200      	movs	r2, #0
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	48d3      	ldr	r0, [pc, #844]	; (8001930 <letter+0x17e0>)
 80015e2:	f001 ff18 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	48d1      	ldr	r0, [pc, #836]	; (8001934 <letter+0x17e4>)
 80015ee:	f001 ff12 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	48ce      	ldr	r0, [pc, #824]	; (8001934 <letter+0x17e4>)
 80015fa:	f001 ff0c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001604:	48cb      	ldr	r0, [pc, #812]	; (8001934 <letter+0x17e4>)
 8001606:	f001 ff06 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001610:	48c8      	ldr	r0, [pc, #800]	; (8001934 <letter+0x17e4>)
 8001612:	f001 ff00 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800161c:	48c6      	ldr	r0, [pc, #792]	; (8001938 <letter+0x17e8>)
 800161e:	f001 fefa 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001622:	2002      	movs	r0, #2
 8001624:	f001 fc84 	bl	8002f30 <HAL_Delay>
	}
	if(L == '4')
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b34      	cmp	r3, #52	; 0x34
 800162c:	d13c      	bne.n	80016a8 <letter+0x1558>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001634:	48c0      	ldr	r0, [pc, #768]	; (8001938 <letter+0x17e8>)
 8001636:	f001 feee 	bl	8003416 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001640:	48bb      	ldr	r0, [pc, #748]	; (8001930 <letter+0x17e0>)
 8001642:	f001 fee8 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	48b8      	ldr	r0, [pc, #736]	; (8001930 <letter+0x17e0>)
 800164e:	f001 fee2 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001652:	2201      	movs	r2, #1
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	48b6      	ldr	r0, [pc, #728]	; (8001930 <letter+0x17e0>)
 8001658:	f001 fedd 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800165c:	2200      	movs	r2, #0
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	48b3      	ldr	r0, [pc, #716]	; (8001930 <letter+0x17e0>)
 8001662:	f001 fed8 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	48b1      	ldr	r0, [pc, #708]	; (8001934 <letter+0x17e4>)
 800166e:	f001 fed2 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	48ae      	ldr	r0, [pc, #696]	; (8001934 <letter+0x17e4>)
 800167a:	f001 fecc 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001684:	48ab      	ldr	r0, [pc, #684]	; (8001934 <letter+0x17e4>)
 8001686:	f001 fec6 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001690:	48a8      	ldr	r0, [pc, #672]	; (8001934 <letter+0x17e4>)
 8001692:	f001 fec0 	bl	8003416 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	48a6      	ldr	r0, [pc, #664]	; (8001938 <letter+0x17e8>)
 800169e:	f001 feba 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016a2:	2002      	movs	r0, #2
 80016a4:	f001 fc44 	bl	8002f30 <HAL_Delay>
	}
	if(L == '5')
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b35      	cmp	r3, #53	; 0x35
 80016ac:	d13c      	bne.n	8001728 <letter+0x15d8>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b4:	48a0      	ldr	r0, [pc, #640]	; (8001938 <letter+0x17e8>)
 80016b6:	f001 feae 	bl	8003416 <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	489b      	ldr	r0, [pc, #620]	; (8001930 <letter+0x17e0>)
 80016c2:	f001 fea8 	bl	8003416 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80016c6:	2200      	movs	r2, #0
 80016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016cc:	4898      	ldr	r0, [pc, #608]	; (8001930 <letter+0x17e0>)
 80016ce:	f001 fea2 	bl	8003416 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016d2:	2201      	movs	r2, #1
 80016d4:	2140      	movs	r1, #64	; 0x40
 80016d6:	4896      	ldr	r0, [pc, #600]	; (8001930 <letter+0x17e0>)
 80016d8:	f001 fe9d 	bl	8003416 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80016dc:	2200      	movs	r2, #0
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	4893      	ldr	r0, [pc, #588]	; (8001930 <letter+0x17e0>)
 80016e2:	f001 fe98 	bl	8003416 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80016e6:	2201      	movs	r2, #1
 80016e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ec:	4891      	ldr	r0, [pc, #580]	; (8001934 <letter+0x17e4>)
 80016ee:	f001 fe92 	bl	8003416 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f8:	488e      	ldr	r0, [pc, #568]	; (8001934 <letter+0x17e4>)
 80016fa:	f001 fe8c 	bl	8003416 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001704:	488b      	ldr	r0, [pc, #556]	; (8001934 <letter+0x17e4>)
 8001706:	f001 fe86 	bl	8003416 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001710:	4888      	ldr	r0, [pc, #544]	; (8001934 <letter+0x17e4>)
 8001712:	f001 fe80 	bl	8003416 <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171c:	4886      	ldr	r0, [pc, #536]	; (8001938 <letter+0x17e8>)
 800171e:	f001 fe7a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001722:	2002      	movs	r0, #2
 8001724:	f001 fc04 	bl	8002f30 <HAL_Delay>
	}
	if(L == '6')
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b36      	cmp	r3, #54	; 0x36
 800172c:	d13c      	bne.n	80017a8 <letter+0x1658>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800172e:	2201      	movs	r2, #1
 8001730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001734:	4880      	ldr	r0, [pc, #512]	; (8001938 <letter+0x17e8>)
 8001736:	f001 fe6e 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001740:	487b      	ldr	r0, [pc, #492]	; (8001930 <letter+0x17e0>)
 8001742:	f001 fe68 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	4878      	ldr	r0, [pc, #480]	; (8001930 <letter+0x17e0>)
 800174e:	f001 fe62 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001752:	2201      	movs	r2, #1
 8001754:	2140      	movs	r1, #64	; 0x40
 8001756:	4876      	ldr	r0, [pc, #472]	; (8001930 <letter+0x17e0>)
 8001758:	f001 fe5d 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800175c:	2200      	movs	r2, #0
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	4873      	ldr	r0, [pc, #460]	; (8001930 <letter+0x17e0>)
 8001762:	f001 fe58 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 7100 	mov.w	r1, #512	; 0x200
 800176c:	4871      	ldr	r0, [pc, #452]	; (8001934 <letter+0x17e4>)
 800176e:	f001 fe52 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001778:	486e      	ldr	r0, [pc, #440]	; (8001934 <letter+0x17e4>)
 800177a:	f001 fe4c 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800177e:	2200      	movs	r2, #0
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	486b      	ldr	r0, [pc, #428]	; (8001934 <letter+0x17e4>)
 8001786:	f001 fe46 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001790:	4868      	ldr	r0, [pc, #416]	; (8001934 <letter+0x17e4>)
 8001792:	f001 fe40 	bl	8003416 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800179c:	4866      	ldr	r0, [pc, #408]	; (8001938 <letter+0x17e8>)
 800179e:	f001 fe3a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017a2:	2002      	movs	r0, #2
 80017a4:	f001 fbc4 	bl	8002f30 <HAL_Delay>
	}
	if(L == '7')
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b37      	cmp	r3, #55	; 0x37
 80017ac:	d13c      	bne.n	8001828 <letter+0x16d8>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b4:	4860      	ldr	r0, [pc, #384]	; (8001938 <letter+0x17e8>)
 80017b6:	f001 fe2e 	bl	8003416 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c0:	485b      	ldr	r0, [pc, #364]	; (8001930 <letter+0x17e0>)
 80017c2:	f001 fe28 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80017c6:	2201      	movs	r2, #1
 80017c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017cc:	4858      	ldr	r0, [pc, #352]	; (8001930 <letter+0x17e0>)
 80017ce:	f001 fe22 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80017d2:	2201      	movs	r2, #1
 80017d4:	2140      	movs	r1, #64	; 0x40
 80017d6:	4856      	ldr	r0, [pc, #344]	; (8001930 <letter+0x17e0>)
 80017d8:	f001 fe1d 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80017dc:	2200      	movs	r2, #0
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	4853      	ldr	r0, [pc, #332]	; (8001930 <letter+0x17e0>)
 80017e2:	f001 fe18 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ec:	4851      	ldr	r0, [pc, #324]	; (8001934 <letter+0x17e4>)
 80017ee:	f001 fe12 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f8:	484e      	ldr	r0, [pc, #312]	; (8001934 <letter+0x17e4>)
 80017fa:	f001 fe0c 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001804:	484b      	ldr	r0, [pc, #300]	; (8001934 <letter+0x17e4>)
 8001806:	f001 fe06 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001810:	4848      	ldr	r0, [pc, #288]	; (8001934 <letter+0x17e4>)
 8001812:	f001 fe00 	bl	8003416 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181c:	4846      	ldr	r0, [pc, #280]	; (8001938 <letter+0x17e8>)
 800181e:	f001 fdfa 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001822:	2002      	movs	r0, #2
 8001824:	f001 fb84 	bl	8002f30 <HAL_Delay>
	}
	if(L == '8')
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	2b38      	cmp	r3, #56	; 0x38
 800182c:	d13c      	bne.n	80018a8 <letter+0x1758>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001834:	4840      	ldr	r0, [pc, #256]	; (8001938 <letter+0x17e8>)
 8001836:	f001 fdee 	bl	8003416 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001840:	483b      	ldr	r0, [pc, #236]	; (8001930 <letter+0x17e0>)
 8001842:	f001 fde8 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001846:	2200      	movs	r2, #0
 8001848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800184c:	4838      	ldr	r0, [pc, #224]	; (8001930 <letter+0x17e0>)
 800184e:	f001 fde2 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001852:	2200      	movs	r2, #0
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	4836      	ldr	r0, [pc, #216]	; (8001930 <letter+0x17e0>)
 8001858:	f001 fddd 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800185c:	2201      	movs	r2, #1
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	4833      	ldr	r0, [pc, #204]	; (8001930 <letter+0x17e0>)
 8001862:	f001 fdd8 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800186c:	4831      	ldr	r0, [pc, #196]	; (8001934 <letter+0x17e4>)
 800186e:	f001 fdd2 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001872:	2201      	movs	r2, #1
 8001874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001878:	482e      	ldr	r0, [pc, #184]	; (8001934 <letter+0x17e4>)
 800187a:	f001 fdcc 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001884:	482b      	ldr	r0, [pc, #172]	; (8001934 <letter+0x17e4>)
 8001886:	f001 fdc6 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001890:	4828      	ldr	r0, [pc, #160]	; (8001934 <letter+0x17e4>)
 8001892:	f001 fdc0 	bl	8003416 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189c:	4826      	ldr	r0, [pc, #152]	; (8001938 <letter+0x17e8>)
 800189e:	f001 fdba 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018a2:	2002      	movs	r0, #2
 80018a4:	f001 fb44 	bl	8002f30 <HAL_Delay>
	}
	if(L =='9')
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b39      	cmp	r3, #57	; 0x39
 80018ac:	d13c      	bne.n	8001928 <letter+0x17d8>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b4:	4820      	ldr	r0, [pc, #128]	; (8001938 <letter+0x17e8>)
 80018b6:	f001 fdae 	bl	8003416 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c0:	481b      	ldr	r0, [pc, #108]	; (8001930 <letter+0x17e0>)
 80018c2:	f001 fda8 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <letter+0x17e0>)
 80018ce:	f001 fda2 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80018d2:	2200      	movs	r2, #0
 80018d4:	2140      	movs	r1, #64	; 0x40
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <letter+0x17e0>)
 80018d8:	f001 fd9d 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80018dc:	2201      	movs	r2, #1
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	4813      	ldr	r0, [pc, #76]	; (8001930 <letter+0x17e0>)
 80018e2:	f001 fd98 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4
 80018e6:	2201      	movs	r2, #1
 80018e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ec:	4811      	ldr	r0, [pc, #68]	; (8001934 <letter+0x17e4>)
 80018ee:	f001 fd92 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f8:	480e      	ldr	r0, [pc, #56]	; (8001934 <letter+0x17e4>)
 80018fa:	f001 fd8c 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80018fe:	2200      	movs	r2, #0
 8001900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <letter+0x17e4>)
 8001906:	f001 fd86 	bl	8003416 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800190a:	2200      	movs	r2, #0
 800190c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <letter+0x17e4>)
 8001912:	f001 fd80 	bl	8003416 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001916:	2200      	movs	r2, #0
 8001918:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800191c:	4806      	ldr	r0, [pc, #24]	; (8001938 <letter+0x17e8>)
 800191e:	f001 fd7a 	bl	8003416 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001922:	2002      	movs	r0, #2
 8001924:	f001 fb04 	bl	8002f30 <HAL_Delay>
	}

}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40011000 	.word	0x40011000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00

0800193c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001940:	f001 fac4 	bl	8002ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001944:	f000 f89e 	bl	8001a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001948:	f000 f954 	bl	8001bf4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800194c:	f000 f8dc 	bl	8001b08 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001950:	f000 f926 	bl	8001ba0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001954:	f002 feb0 	bl	80046b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8001958:	4a2e      	ldr	r2, [pc, #184]	; (8001a14 <main+0xd8>)
 800195a:	2102      	movs	r1, #2
 800195c:	2008      	movs	r0, #8
 800195e:	f002 ffe9 	bl	8004934 <osMessageQueueNew>
 8001962:	4602      	mov	r2, r0
 8001964:	4b2c      	ldr	r3, [pc, #176]	; (8001a18 <main+0xdc>)
 8001966:	601a      	str	r2, [r3, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8001968:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <main+0xe0>)
 800196a:	2102      	movs	r1, #2
 800196c:	2008      	movs	r0, #8
 800196e:	f002 ffe1 	bl	8004934 <osMessageQueueNew>
 8001972:	4602      	mov	r2, r0
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <main+0xe4>)
 8001976:	601a      	str	r2, [r3, #0]

  /* creation of XbeeQueue */
  XbeeQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &XbeeQueue_attributes);
 8001978:	4a2a      	ldr	r2, [pc, #168]	; (8001a24 <main+0xe8>)
 800197a:	2102      	movs	r1, #2
 800197c:	2008      	movs	r0, #8
 800197e:	f002 ffd9 	bl	8004934 <osMessageQueueNew>
 8001982:	4602      	mov	r2, r0
 8001984:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <main+0xec>)
 8001986:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8001988:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <main+0xf0>)
 800198a:	2102      	movs	r1, #2
 800198c:	2008      	movs	r0, #8
 800198e:	f002 ffd1 	bl	8004934 <osMessageQueueNew>
 8001992:	4602      	mov	r2, r0
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <main+0xf4>)
 8001996:	601a      	str	r2, [r3, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8001998:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <main+0xf8>)
 800199a:	2102      	movs	r1, #2
 800199c:	2008      	movs	r0, #8
 800199e:	f002 ffc9 	bl	8004934 <osMessageQueueNew>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <main+0xfc>)
 80019a6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 80019a8:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <main+0x100>)
 80019aa:	2100      	movs	r1, #0
 80019ac:	4824      	ldr	r0, [pc, #144]	; (8001a40 <main+0x104>)
 80019ae:	f002 fee9 	bl	8004784 <osThreadNew>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <main+0x108>)
 80019b6:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 80019b8:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <main+0x10c>)
 80019ba:	2100      	movs	r1, #0
 80019bc:	4823      	ldr	r0, [pc, #140]	; (8001a4c <main+0x110>)
 80019be:	f002 fee1 	bl	8004784 <osThreadNew>
 80019c2:	4602      	mov	r2, r0
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <main+0x114>)
 80019c6:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 80019c8:	4a22      	ldr	r2, [pc, #136]	; (8001a54 <main+0x118>)
 80019ca:	2100      	movs	r1, #0
 80019cc:	4822      	ldr	r0, [pc, #136]	; (8001a58 <main+0x11c>)
 80019ce:	f002 fed9 	bl	8004784 <osThreadNew>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <main+0x120>)
 80019d6:	601a      	str	r2, [r3, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 80019d8:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <main+0x124>)
 80019da:	2100      	movs	r1, #0
 80019dc:	4821      	ldr	r0, [pc, #132]	; (8001a64 <main+0x128>)
 80019de:	f002 fed1 	bl	8004784 <osThreadNew>
 80019e2:	4602      	mov	r2, r0
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <main+0x12c>)
 80019e6:	601a      	str	r2, [r3, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 80019e8:	4a20      	ldr	r2, [pc, #128]	; (8001a6c <main+0x130>)
 80019ea:	2100      	movs	r1, #0
 80019ec:	4820      	ldr	r0, [pc, #128]	; (8001a70 <main+0x134>)
 80019ee:	f002 fec9 	bl	8004784 <osThreadNew>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <main+0x138>)
 80019f6:	601a      	str	r2, [r3, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 80019f8:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <main+0x13c>)
 80019fa:	2100      	movs	r1, #0
 80019fc:	481f      	ldr	r0, [pc, #124]	; (8001a7c <main+0x140>)
 80019fe:	f002 fec1 	bl	8004784 <osThreadNew>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <main+0x144>)
 8001a06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a08:	f002 fe88 	bl	800471c <osKernelStart>
 8001a0c:	2300      	movs	r3, #0
//    /* USER CODE END WHILE */
//
//    /* USER CODE BEGIN 3 */
//  }
  /* USER CODE END 3 */
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	0800746c 	.word	0x0800746c
 8001a18:	20002134 	.word	0x20002134
 8001a1c:	08007484 	.word	0x08007484
 8001a20:	20002390 	.word	0x20002390
 8001a24:	0800749c 	.word	0x0800749c
 8001a28:	20002388 	.word	0x20002388
 8001a2c:	080074b4 	.word	0x080074b4
 8001a30:	20002130 	.word	0x20002130
 8001a34:	080074cc 	.word	0x080074cc
 8001a38:	2000213c 	.word	0x2000213c
 8001a3c:	08007394 	.word	0x08007394
 8001a40:	080028d1 	.word	0x080028d1
 8001a44:	20002138 	.word	0x20002138
 8001a48:	080073b8 	.word	0x080073b8
 8001a4c:	080028e1 	.word	0x080028e1
 8001a50:	20002384 	.word	0x20002384
 8001a54:	080073dc 	.word	0x080073dc
 8001a58:	08002bc1 	.word	0x08002bc1
 8001a5c:	200023e0 	.word	0x200023e0
 8001a60:	08007400 	.word	0x08007400
 8001a64:	08002bd3 	.word	0x08002bd3
 8001a68:	20002380 	.word	0x20002380
 8001a6c:	08007424 	.word	0x08007424
 8001a70:	08002be5 	.word	0x08002be5
 8001a74:	2000238c 	.word	0x2000238c
 8001a78:	08007448 	.word	0x08007448
 8001a7c:	08002bf7 	.word	0x08002bf7
 8001a80:	200023dc 	.word	0x200023dc

08001a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b090      	sub	sp, #64	; 0x40
 8001a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 0318 	add.w	r3, r7, #24
 8001a8e:	2228      	movs	r2, #40	; 0x28
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 fc09 	bl	80072aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aae:	2310      	movs	r3, #16
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001aba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fce1 	bl	800348c <HAL_RCC_OscConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ad0:	f001 f8ac 	bl	8002c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2102      	movs	r1, #2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 ff4c 	bl	800398c <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001afa:	f001 f897 	bl	8002c2c <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	3740      	adds	r7, #64	; 0x40
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0308 	add.w	r3, r7, #8
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b4c:	4813      	ldr	r0, [pc, #76]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b4e:	f002 f8e9 	bl	8003d24 <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b58:	f001 f868 	bl	8002c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b62:	f107 0308 	add.w	r3, r7, #8
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b6a:	f002 fa85 	bl	8004078 <HAL_TIM_ConfigClockSource>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b74:	f001 f85a 	bl	8002c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_TIM2_Init+0x94>)
 8001b86:	f002 fc4b 	bl	8004420 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b90:	f001 f84c 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20002394 	.word	0x20002394

08001ba0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <MX_USART3_UART_Init+0x50>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bd8:	f002 fc92 	bl	8004500 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001be2:	f001 f823 	bl	8002c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200020bc 	.word	0x200020bc
 8001bf0:	40004800 	.word	0x40004800

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c08:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	4a64      	ldr	r2, [pc, #400]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6193      	str	r3, [r2, #24]
 8001c14:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c20:	4b5f      	ldr	r3, [pc, #380]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a5e      	ldr	r2, [pc, #376]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c26:	f043 0320 	orr.w	r3, r3, #32
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b5c      	ldr	r3, [pc, #368]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b59      	ldr	r3, [pc, #356]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c3e:	f043 0304 	orr.w	r3, r3, #4
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c50:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a52      	ldr	r2, [pc, #328]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <MX_GPIO_Init+0x1ac>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8001c6e:	484d      	ldr	r0, [pc, #308]	; (8001da4 <MX_GPIO_Init+0x1b0>)
 8001c70:	f001 fbd1 	bl	8003416 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001c74:	2200      	movs	r2, #0
 8001c76:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8001c7a:	484b      	ldr	r0, [pc, #300]	; (8001da8 <MX_GPIO_Init+0x1b4>)
 8001c7c:	f001 fbcb 	bl	8003416 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001c86:	4849      	ldr	r0, [pc, #292]	; (8001dac <MX_GPIO_Init+0x1b8>)
 8001c88:	f001 fbc5 	bl	8003416 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4847      	ldr	r0, [pc, #284]	; (8001db0 <MX_GPIO_Init+0x1bc>)
 8001c92:	f001 fbc0 	bl	8003416 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c9c:	4b45      	ldr	r3, [pc, #276]	; (8001db4 <MX_GPIO_Init+0x1c0>)
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4840      	ldr	r0, [pc, #256]	; (8001dac <MX_GPIO_Init+0x1b8>)
 8001cac:	f001 fa42 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001cb0:	2307      	movs	r3, #7
 8001cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	483a      	ldr	r0, [pc, #232]	; (8001dac <MX_GPIO_Init+0x1b8>)
 8001cc4:	f001 fa36 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cc8:	230c      	movs	r3, #12
 8001cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4832      	ldr	r0, [pc, #200]	; (8001da4 <MX_GPIO_Init+0x1b0>)
 8001cdc:	f001 fa2a 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ce0:	f44f 53f9 	mov.w	r3, #7968	; 0x1f20
 8001ce4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	482a      	ldr	r0, [pc, #168]	; (8001da4 <MX_GPIO_Init+0x1b0>)
 8001cfa:	f001 fa1b 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001cfe:	2307      	movs	r3, #7
 8001d00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d06:	2302      	movs	r3, #2
 8001d08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4825      	ldr	r0, [pc, #148]	; (8001da8 <MX_GPIO_Init+0x1b4>)
 8001d12:	f001 fa0f 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001d16:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8001d1a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481e      	ldr	r0, [pc, #120]	; (8001da8 <MX_GPIO_Init+0x1b4>)
 8001d30:	f001 fa00 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001d34:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001d38:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4817      	ldr	r0, [pc, #92]	; (8001dac <MX_GPIO_Init+0x1b8>)
 8001d4e:	f001 f9f1 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d52:	2304      	movs	r3, #4
 8001d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	4619      	mov	r1, r3
 8001d68:	4811      	ldr	r0, [pc, #68]	; (8001db0 <MX_GPIO_Init+0x1bc>)
 8001d6a:	f001 f9e3 	bl	8003134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d6e:	2340      	movs	r3, #64	; 0x40
 8001d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <MX_GPIO_Init+0x1b4>)
 8001d82:	f001 f9d7 	bl	8003134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2105      	movs	r1, #5
 8001d8a:	2028      	movs	r0, #40	; 0x28
 8001d8c:	f001 f9a7 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d90:	2028      	movs	r0, #40	; 0x28
 8001d92:	f001 f9c0 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 8001d96:	bf00      	nop
 8001d98:	3720      	adds	r7, #32
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010800 	.word	0x40010800
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40011400 	.word	0x40011400
 8001db4:	10110000 	.word	0x10110000

08001db8 <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8001dbc:	2014      	movs	r0, #20
 8001dbe:	f001 f8b7 	bl	8002f30 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc8:	4864      	ldr	r0, [pc, #400]	; (8001f5c <commandToLCD+0x1a4>)
 8001dca:	f001 fb24 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd4:	4861      	ldr	r0, [pc, #388]	; (8001f5c <commandToLCD+0x1a4>)
 8001dd6:	f001 fb1e 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de0:	485e      	ldr	r0, [pc, #376]	; (8001f5c <commandToLCD+0x1a4>)
 8001de2:	f001 fb18 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8001de6:	2200      	movs	r2, #0
 8001de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dec:	485c      	ldr	r0, [pc, #368]	; (8001f60 <commandToLCD+0x1a8>)
 8001dee:	f001 fb12 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df8:	4859      	ldr	r0, [pc, #356]	; (8001f60 <commandToLCD+0x1a8>)
 8001dfa:	f001 fb0c 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	4857      	ldr	r0, [pc, #348]	; (8001f60 <commandToLCD+0x1a8>)
 8001e04:	f001 fb07 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	4854      	ldr	r0, [pc, #336]	; (8001f60 <commandToLCD+0x1a8>)
 8001e0e:	f001 fb02 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e18:	4852      	ldr	r0, [pc, #328]	; (8001f64 <commandToLCD+0x1ac>)
 8001e1a:	f001 fafc 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e24:	484f      	ldr	r0, [pc, #316]	; (8001f64 <commandToLCD+0x1ac>)
 8001e26:	f001 faf6 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e30:	484c      	ldr	r0, [pc, #304]	; (8001f64 <commandToLCD+0x1ac>)
 8001e32:	f001 faf0 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e3c:	4849      	ldr	r0, [pc, #292]	; (8001f64 <commandToLCD+0x1ac>)
 8001e3e:	f001 faea 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e48:	4844      	ldr	r0, [pc, #272]	; (8001f5c <commandToLCD+0x1a4>)
 8001e4a:	f001 fae4 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001e4e:	2005      	movs	r0, #5
 8001e50:	f001 f86e 	bl	8002f30 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5a:	4840      	ldr	r0, [pc, #256]	; (8001f5c <commandToLCD+0x1a4>)
 8001e5c:	f001 fadb 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8001e60:	2201      	movs	r2, #1
 8001e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e66:	483e      	ldr	r0, [pc, #248]	; (8001f60 <commandToLCD+0x1a8>)
 8001e68:	f001 fad5 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e72:	483b      	ldr	r0, [pc, #236]	; (8001f60 <commandToLCD+0x1a8>)
 8001e74:	f001 facf 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	4838      	ldr	r0, [pc, #224]	; (8001f60 <commandToLCD+0x1a8>)
 8001e7e:	f001 faca 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001e82:	2201      	movs	r2, #1
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	4836      	ldr	r0, [pc, #216]	; (8001f60 <commandToLCD+0x1a8>)
 8001e88:	f001 fac5 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e92:	4834      	ldr	r0, [pc, #208]	; (8001f64 <commandToLCD+0x1ac>)
 8001e94:	f001 fabf 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e9e:	4831      	ldr	r0, [pc, #196]	; (8001f64 <commandToLCD+0x1ac>)
 8001ea0:	f001 fab9 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eaa:	482e      	ldr	r0, [pc, #184]	; (8001f64 <commandToLCD+0x1ac>)
 8001eac:	f001 fab3 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb6:	482b      	ldr	r0, [pc, #172]	; (8001f64 <commandToLCD+0x1ac>)
 8001eb8:	f001 faad 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec2:	4826      	ldr	r0, [pc, #152]	; (8001f5c <commandToLCD+0x1a4>)
 8001ec4:	f001 faa7 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001ec8:	2005      	movs	r0, #5
 8001eca:	f001 f831 	bl	8002f30 <HAL_Delay>


	clear();
 8001ece:	f000 f921 	bl	8002114 <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed8:	4820      	ldr	r0, [pc, #128]	; (8001f5c <commandToLCD+0x1a4>)
 8001eda:	f001 fa9c 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee4:	481e      	ldr	r0, [pc, #120]	; (8001f60 <commandToLCD+0x1a8>)
 8001ee6:	f001 fa96 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef0:	481b      	ldr	r0, [pc, #108]	; (8001f60 <commandToLCD+0x1a8>)
 8001ef2:	f001 fa90 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2140      	movs	r1, #64	; 0x40
 8001efa:	4819      	ldr	r0, [pc, #100]	; (8001f60 <commandToLCD+0x1a8>)
 8001efc:	f001 fa8b 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001f00:	2200      	movs	r2, #0
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	4816      	ldr	r0, [pc, #88]	; (8001f60 <commandToLCD+0x1a8>)
 8001f06:	f001 fa86 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f10:	4814      	ldr	r0, [pc, #80]	; (8001f64 <commandToLCD+0x1ac>)
 8001f12:	f001 fa80 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1c:	4811      	ldr	r0, [pc, #68]	; (8001f64 <commandToLCD+0x1ac>)
 8001f1e:	f001 fa7a 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f28:	480e      	ldr	r0, [pc, #56]	; (8001f64 <commandToLCD+0x1ac>)
 8001f2a:	f001 fa74 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f34:	480b      	ldr	r0, [pc, #44]	; (8001f64 <commandToLCD+0x1ac>)
 8001f36:	f001 fa6e 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <commandToLCD+0x1a4>)
 8001f42:	f001 fa68 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001f46:	2005      	movs	r0, #5
 8001f48:	f000 fff2 	bl	8002f30 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f52:	4802      	ldr	r0, [pc, #8]	; (8001f5c <commandToLCD+0x1a4>)
 8001f54:	f001 fa5f 	bl	8003416 <HAL_GPIO_WritePin>
	//while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
	//{}
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	40011000 	.word	0x40011000
 8001f64:	40010800 	.word	0x40010800

08001f68 <printPassword>:
void printPassword(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f72:	4813      	ldr	r0, [pc, #76]	; (8001fc0 <printPassword+0x58>)
 8001f74:	f001 fa4f 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f7e:	4810      	ldr	r0, [pc, #64]	; (8001fc0 <printPassword+0x58>)
 8001f80:	f001 fa49 	bl	8003416 <HAL_GPIO_WritePin>
	letter('P');
 8001f84:	2050      	movs	r0, #80	; 0x50
 8001f86:	f7fe f8e3 	bl	8000150 <letter>
	letter('a');
 8001f8a:	2061      	movs	r0, #97	; 0x61
 8001f8c:	f7fe f8e0 	bl	8000150 <letter>
	letter('s');
 8001f90:	2073      	movs	r0, #115	; 0x73
 8001f92:	f7fe f8dd 	bl	8000150 <letter>
	letter('s');
 8001f96:	2073      	movs	r0, #115	; 0x73
 8001f98:	f7fe f8da 	bl	8000150 <letter>
	letter('w');
 8001f9c:	2077      	movs	r0, #119	; 0x77
 8001f9e:	f7fe f8d7 	bl	8000150 <letter>
	letter('o');
 8001fa2:	206f      	movs	r0, #111	; 0x6f
 8001fa4:	f7fe f8d4 	bl	8000150 <letter>
	letter('r');
 8001fa8:	2072      	movs	r0, #114	; 0x72
 8001faa:	f7fe f8d1 	bl	8000150 <letter>
	letter('d');
 8001fae:	2064      	movs	r0, #100	; 0x64
 8001fb0:	f7fe f8ce 	bl	8000150 <letter>
	letter(':');
 8001fb4:	203a      	movs	r0, #58	; 0x3a
 8001fb6:	f7fe f8cb 	bl	8000150 <letter>
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40010c00 	.word	0x40010c00

08001fc4 <line1>:
void line1(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fce:	4824      	ldr	r0, [pc, #144]	; (8002060 <line1+0x9c>)
 8001fd0:	f001 fa21 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fda:	4821      	ldr	r0, [pc, #132]	; (8002060 <line1+0x9c>)
 8001fdc:	f001 fa1b 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe6:	481e      	ldr	r0, [pc, #120]	; (8002060 <line1+0x9c>)
 8001fe8:	f001 fa15 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 8001fec:	2200      	movs	r2, #0
 8001fee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff2:	481c      	ldr	r0, [pc, #112]	; (8002064 <line1+0xa0>)
 8001ff4:	f001 fa0f 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ffe:	4819      	ldr	r0, [pc, #100]	; (8002064 <line1+0xa0>)
 8002000:	f001 fa09 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002004:	2200      	movs	r2, #0
 8002006:	2140      	movs	r1, #64	; 0x40
 8002008:	4816      	ldr	r0, [pc, #88]	; (8002064 <line1+0xa0>)
 800200a:	f001 fa04 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800200e:	2200      	movs	r2, #0
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	4814      	ldr	r0, [pc, #80]	; (8002064 <line1+0xa0>)
 8002014:	f001 f9ff 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002018:	2200      	movs	r2, #0
 800201a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800201e:	4812      	ldr	r0, [pc, #72]	; (8002068 <line1+0xa4>)
 8002020:	f001 f9f9 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002024:	2200      	movs	r2, #0
 8002026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202a:	480f      	ldr	r0, [pc, #60]	; (8002068 <line1+0xa4>)
 800202c:	f001 f9f3 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002036:	480c      	ldr	r0, [pc, #48]	; (8002068 <line1+0xa4>)
 8002038:	f001 f9ed 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002042:	4809      	ldr	r0, [pc, #36]	; (8002068 <line1+0xa4>)
 8002044:	f001 f9e7 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204e:	4804      	ldr	r0, [pc, #16]	; (8002060 <line1+0x9c>)
 8002050:	f001 f9e1 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002054:	2005      	movs	r0, #5
 8002056:	f000 ff6b 	bl	8002f30 <HAL_Delay>
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40010c00 	.word	0x40010c00
 8002064:	40011000 	.word	0x40011000
 8002068:	40010800 	.word	0x40010800

0800206c <line2>:
void line2(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002070:	2200      	movs	r2, #0
 8002072:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002076:	4824      	ldr	r0, [pc, #144]	; (8002108 <line2+0x9c>)
 8002078:	f001 f9cd 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002082:	4821      	ldr	r0, [pc, #132]	; (8002108 <line2+0x9c>)
 8002084:	f001 f9c7 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208e:	481e      	ldr	r0, [pc, #120]	; (8002108 <line2+0x9c>)
 8002090:	f001 f9c1 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209a:	481c      	ldr	r0, [pc, #112]	; (800210c <line2+0xa0>)
 800209c:	f001 f9bb 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <line2+0xa0>)
 80020a8:	f001 f9b5 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80020ac:	2200      	movs	r2, #0
 80020ae:	2140      	movs	r1, #64	; 0x40
 80020b0:	4816      	ldr	r0, [pc, #88]	; (800210c <line2+0xa0>)
 80020b2:	f001 f9b0 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80020b6:	2200      	movs	r2, #0
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	4814      	ldr	r0, [pc, #80]	; (800210c <line2+0xa0>)
 80020bc:	f001 f9ab 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 80020c0:	2200      	movs	r2, #0
 80020c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c6:	4812      	ldr	r0, [pc, #72]	; (8002110 <line2+0xa4>)
 80020c8:	f001 f9a5 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020d2:	480f      	ldr	r0, [pc, #60]	; (8002110 <line2+0xa4>)
 80020d4:	f001 f99f 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80020d8:	2201      	movs	r2, #1
 80020da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <line2+0xa4>)
 80020e0:	f001 f999 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ea:	4809      	ldr	r0, [pc, #36]	; (8002110 <line2+0xa4>)
 80020ec:	f001 f993 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 80020f0:	2200      	movs	r2, #0
 80020f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020f6:	4804      	ldr	r0, [pc, #16]	; (8002108 <line2+0x9c>)
 80020f8:	f001 f98d 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80020fc:	2005      	movs	r0, #5
 80020fe:	f000 ff17 	bl	8002f30 <HAL_Delay>
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40010c00 	.word	0x40010c00
 800210c:	40011000 	.word	0x40011000
 8002110:	40010800 	.word	0x40010800

08002114 <clear>:
void clear()
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800211e:	4824      	ldr	r0, [pc, #144]	; (80021b0 <clear+0x9c>)
 8002120:	f001 f979 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800212a:	4821      	ldr	r0, [pc, #132]	; (80021b0 <clear+0x9c>)
 800212c:	f001 f973 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002136:	481e      	ldr	r0, [pc, #120]	; (80021b0 <clear+0x9c>)
 8002138:	f001 f96d 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002142:	481c      	ldr	r0, [pc, #112]	; (80021b4 <clear+0xa0>)
 8002144:	f001 f967 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214e:	4819      	ldr	r0, [pc, #100]	; (80021b4 <clear+0xa0>)
 8002150:	f001 f961 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002154:	2200      	movs	r2, #0
 8002156:	2140      	movs	r1, #64	; 0x40
 8002158:	4816      	ldr	r0, [pc, #88]	; (80021b4 <clear+0xa0>)
 800215a:	f001 f95c 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800215e:	2200      	movs	r2, #0
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	4814      	ldr	r0, [pc, #80]	; (80021b4 <clear+0xa0>)
 8002164:	f001 f957 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);//D4
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800216e:	4812      	ldr	r0, [pc, #72]	; (80021b8 <clear+0xa4>)
 8002170:	f001 f951 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002174:	2200      	movs	r2, #0
 8002176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217a:	480f      	ldr	r0, [pc, #60]	; (80021b8 <clear+0xa4>)
 800217c:	f001 f94b 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002180:	2200      	movs	r2, #0
 8002182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <clear+0xa4>)
 8002188:	f001 f945 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800218c:	2200      	movs	r2, #0
 800218e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002192:	4809      	ldr	r0, [pc, #36]	; (80021b8 <clear+0xa4>)
 8002194:	f001 f93f 	bl	8003416 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8002198:	2200      	movs	r2, #0
 800219a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219e:	4804      	ldr	r0, [pc, #16]	; (80021b0 <clear+0x9c>)
 80021a0:	f001 f939 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80021a4:	2005      	movs	r0, #5
 80021a6:	f000 fec3 	bl	8002f30 <HAL_Delay>
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40010c00 	.word	0x40010c00
 80021b4:	40011000 	.word	0x40011000
 80021b8:	40010800 	.word	0x40010800

080021bc <correct>:
void correct()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80021c0:	2201      	movs	r2, #1
 80021c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c6:	4811      	ldr	r0, [pc, #68]	; (800220c <correct+0x50>)
 80021c8:	f001 f925 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021d2:	480e      	ldr	r0, [pc, #56]	; (800220c <correct+0x50>)
 80021d4:	f001 f91f 	bl	8003416 <HAL_GPIO_WritePin>
	letter('C');
 80021d8:	2043      	movs	r0, #67	; 0x43
 80021da:	f7fd ffb9 	bl	8000150 <letter>
	letter('o');
 80021de:	206f      	movs	r0, #111	; 0x6f
 80021e0:	f7fd ffb6 	bl	8000150 <letter>
	letter('r');
 80021e4:	2072      	movs	r0, #114	; 0x72
 80021e6:	f7fd ffb3 	bl	8000150 <letter>
	letter('r');
 80021ea:	2072      	movs	r0, #114	; 0x72
 80021ec:	f7fd ffb0 	bl	8000150 <letter>
	letter('e');
 80021f0:	2065      	movs	r0, #101	; 0x65
 80021f2:	f7fd ffad 	bl	8000150 <letter>
	letter('c');
 80021f6:	2063      	movs	r0, #99	; 0x63
 80021f8:	f7fd ffaa 	bl	8000150 <letter>
	letter('t');
 80021fc:	2074      	movs	r0, #116	; 0x74
 80021fe:	f7fd ffa7 	bl	8000150 <letter>
	letter('!');
 8002202:	2021      	movs	r0, #33	; 0x21
 8002204:	f7fd ffa4 	bl	8000150 <letter>
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40010c00 	.word	0x40010c00

08002210 <getVal>:
int getVal(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
	int val;
	int count = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
	while(count < 1)
 800221a:	e159      	b.n	80024d0 <getVal+0x2c0>
	{
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002222:	48b0      	ldr	r0, [pc, #704]	; (80024e4 <getVal+0x2d4>)
 8002224:	f001 f8f7 	bl	8003416 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002228:	2104      	movs	r1, #4
 800222a:	48af      	ldr	r0, [pc, #700]	; (80024e8 <getVal+0x2d8>)
 800222c:	f001 f8dc 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d111      	bne.n	800225a <getVal+0x4a>
	  {
		  letter('1');
 8002236:	2031      	movs	r0, #49	; 0x31
 8002238:	f7fd ff8a 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800223c:	bf00      	nop
 800223e:	2104      	movs	r1, #4
 8002240:	48a9      	ldr	r0, [pc, #676]	; (80024e8 <getVal+0x2d8>)
 8002242:	f001 f8d1 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002246:	4603      	mov	r3, r0
 8002248:	2b01      	cmp	r3, #1
 800224a:	d0f8      	beq.n	800223e <getVal+0x2e>
		  {}
		  HAL_Delay(100);
 800224c:	2064      	movs	r0, #100	; 0x64
 800224e:	f000 fe6f 	bl	8002f30 <HAL_Delay>
		  count =1;
 8002252:	2301      	movs	r3, #1
 8002254:	603b      	str	r3, [r7, #0]
		  val = 1;
 8002256:	2301      	movs	r3, #1
 8002258:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800225a:	2102      	movs	r1, #2
 800225c:	48a2      	ldr	r0, [pc, #648]	; (80024e8 <getVal+0x2d8>)
 800225e:	f001 f8c3 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d111      	bne.n	800228c <getVal+0x7c>
	  {
		  letter('2');
 8002268:	2032      	movs	r0, #50	; 0x32
 800226a:	f7fd ff71 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800226e:	bf00      	nop
 8002270:	2102      	movs	r1, #2
 8002272:	489d      	ldr	r0, [pc, #628]	; (80024e8 <getVal+0x2d8>)
 8002274:	f001 f8b8 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b01      	cmp	r3, #1
 800227c:	d0f8      	beq.n	8002270 <getVal+0x60>
		  {}
		  HAL_Delay(100);
 800227e:	2064      	movs	r0, #100	; 0x64
 8002280:	f000 fe56 	bl	8002f30 <HAL_Delay>
		  count =1;
 8002284:	2301      	movs	r3, #1
 8002286:	603b      	str	r3, [r7, #0]
		  val = 2;
 8002288:	2302      	movs	r3, #2
 800228a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800228c:	2101      	movs	r1, #1
 800228e:	4896      	ldr	r0, [pc, #600]	; (80024e8 <getVal+0x2d8>)
 8002290:	f001 f8aa 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002294:	4603      	mov	r3, r0
 8002296:	2b01      	cmp	r3, #1
 8002298:	d111      	bne.n	80022be <getVal+0xae>
	  {
		  letter('3');
 800229a:	2033      	movs	r0, #51	; 0x33
 800229c:	f7fd ff58 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80022a0:	bf00      	nop
 80022a2:	2101      	movs	r1, #1
 80022a4:	4890      	ldr	r0, [pc, #576]	; (80024e8 <getVal+0x2d8>)
 80022a6:	f001 f89f 	bl	80033e8 <HAL_GPIO_ReadPin>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d0f8      	beq.n	80022a2 <getVal+0x92>
		  {}
		  HAL_Delay(100);
 80022b0:	2064      	movs	r0, #100	; 0x64
 80022b2:	f000 fe3d 	bl	8002f30 <HAL_Delay>
		  count =1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	603b      	str	r3, [r7, #0]
		  val = 3;
 80022ba:	2303      	movs	r3, #3
 80022bc:	607b      	str	r3, [r7, #4]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c4:	4887      	ldr	r0, [pc, #540]	; (80024e4 <getVal+0x2d4>)
 80022c6:	f001 f8a6 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 80022ca:	2201      	movs	r2, #1
 80022cc:	2104      	movs	r1, #4
 80022ce:	4887      	ldr	r0, [pc, #540]	; (80024ec <getVal+0x2dc>)
 80022d0:	f001 f8a1 	bl	8003416 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80022d4:	2104      	movs	r1, #4
 80022d6:	4884      	ldr	r0, [pc, #528]	; (80024e8 <getVal+0x2d8>)
 80022d8:	f001 f886 	bl	80033e8 <HAL_GPIO_ReadPin>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d111      	bne.n	8002306 <getVal+0xf6>
	  {
		  letter('4');
 80022e2:	2034      	movs	r0, #52	; 0x34
 80022e4:	f7fd ff34 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80022e8:	bf00      	nop
 80022ea:	2104      	movs	r1, #4
 80022ec:	487e      	ldr	r0, [pc, #504]	; (80024e8 <getVal+0x2d8>)
 80022ee:	f001 f87b 	bl	80033e8 <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d0f8      	beq.n	80022ea <getVal+0xda>
		  {}
		  HAL_Delay(100);
 80022f8:	2064      	movs	r0, #100	; 0x64
 80022fa:	f000 fe19 	bl	8002f30 <HAL_Delay>
		  count =1;
 80022fe:	2301      	movs	r3, #1
 8002300:	603b      	str	r3, [r7, #0]
		  val = 4;
 8002302:	2304      	movs	r3, #4
 8002304:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002306:	2102      	movs	r1, #2
 8002308:	4877      	ldr	r0, [pc, #476]	; (80024e8 <getVal+0x2d8>)
 800230a:	f001 f86d 	bl	80033e8 <HAL_GPIO_ReadPin>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d111      	bne.n	8002338 <getVal+0x128>
	  {
		  letter('5');
 8002314:	2035      	movs	r0, #53	; 0x35
 8002316:	f7fd ff1b 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800231a:	bf00      	nop
 800231c:	2102      	movs	r1, #2
 800231e:	4872      	ldr	r0, [pc, #456]	; (80024e8 <getVal+0x2d8>)
 8002320:	f001 f862 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002324:	4603      	mov	r3, r0
 8002326:	2b01      	cmp	r3, #1
 8002328:	d0f8      	beq.n	800231c <getVal+0x10c>
		  {}
		  HAL_Delay(100);
 800232a:	2064      	movs	r0, #100	; 0x64
 800232c:	f000 fe00 	bl	8002f30 <HAL_Delay>
		  count =1;
 8002330:	2301      	movs	r3, #1
 8002332:	603b      	str	r3, [r7, #0]
		  val = 5;
 8002334:	2305      	movs	r3, #5
 8002336:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002338:	2101      	movs	r1, #1
 800233a:	486b      	ldr	r0, [pc, #428]	; (80024e8 <getVal+0x2d8>)
 800233c:	f001 f854 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002340:	4603      	mov	r3, r0
 8002342:	2b01      	cmp	r3, #1
 8002344:	d111      	bne.n	800236a <getVal+0x15a>
	  {
		  letter('6');
 8002346:	2036      	movs	r0, #54	; 0x36
 8002348:	f7fd ff02 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 800234c:	bf00      	nop
 800234e:	2101      	movs	r1, #1
 8002350:	4865      	ldr	r0, [pc, #404]	; (80024e8 <getVal+0x2d8>)
 8002352:	f001 f849 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	2b01      	cmp	r3, #1
 800235a:	d0f8      	beq.n	800234e <getVal+0x13e>
		  {}
		  HAL_Delay(100);
 800235c:	2064      	movs	r0, #100	; 0x64
 800235e:	f000 fde7 	bl	8002f30 <HAL_Delay>
		  count =1;
 8002362:	2301      	movs	r3, #1
 8002364:	603b      	str	r3, [r7, #0]
		  val = 6;
 8002366:	2306      	movs	r3, #6
 8002368:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 800236a:	2200      	movs	r2, #0
 800236c:	2104      	movs	r1, #4
 800236e:	485f      	ldr	r0, [pc, #380]	; (80024ec <getVal+0x2dc>)
 8002370:	f001 f851 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 8002374:	2201      	movs	r2, #1
 8002376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800237a:	485a      	ldr	r0, [pc, #360]	; (80024e4 <getVal+0x2d4>)
 800237c:	f001 f84b 	bl	8003416 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002380:	2104      	movs	r1, #4
 8002382:	4859      	ldr	r0, [pc, #356]	; (80024e8 <getVal+0x2d8>)
 8002384:	f001 f830 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002388:	4603      	mov	r3, r0
 800238a:	2b01      	cmp	r3, #1
 800238c:	d111      	bne.n	80023b2 <getVal+0x1a2>
	  {
		  letter('7');
 800238e:	2037      	movs	r0, #55	; 0x37
 8002390:	f7fd fede 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002394:	bf00      	nop
 8002396:	2104      	movs	r1, #4
 8002398:	4853      	ldr	r0, [pc, #332]	; (80024e8 <getVal+0x2d8>)
 800239a:	f001 f825 	bl	80033e8 <HAL_GPIO_ReadPin>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d0f8      	beq.n	8002396 <getVal+0x186>
		  {}
		  HAL_Delay(100);
 80023a4:	2064      	movs	r0, #100	; 0x64
 80023a6:	f000 fdc3 	bl	8002f30 <HAL_Delay>
		  count =1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	603b      	str	r3, [r7, #0]
		  val= 7;
 80023ae:	2307      	movs	r3, #7
 80023b0:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80023b2:	2102      	movs	r1, #2
 80023b4:	484c      	ldr	r0, [pc, #304]	; (80024e8 <getVal+0x2d8>)
 80023b6:	f001 f817 	bl	80033e8 <HAL_GPIO_ReadPin>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d111      	bne.n	80023e4 <getVal+0x1d4>
	  {
		  letter('8');
 80023c0:	2038      	movs	r0, #56	; 0x38
 80023c2:	f7fd fec5 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80023c6:	bf00      	nop
 80023c8:	2102      	movs	r1, #2
 80023ca:	4847      	ldr	r0, [pc, #284]	; (80024e8 <getVal+0x2d8>)
 80023cc:	f001 f80c 	bl	80033e8 <HAL_GPIO_ReadPin>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d0f8      	beq.n	80023c8 <getVal+0x1b8>
		  {}
		  HAL_Delay(100);
 80023d6:	2064      	movs	r0, #100	; 0x64
 80023d8:	f000 fdaa 	bl	8002f30 <HAL_Delay>
		  count =1;
 80023dc:	2301      	movs	r3, #1
 80023de:	603b      	str	r3, [r7, #0]
		  val = 8;
 80023e0:	2308      	movs	r3, #8
 80023e2:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80023e4:	2101      	movs	r1, #1
 80023e6:	4840      	ldr	r0, [pc, #256]	; (80024e8 <getVal+0x2d8>)
 80023e8:	f000 fffe 	bl	80033e8 <HAL_GPIO_ReadPin>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d111      	bne.n	8002416 <getVal+0x206>
	  {
		  letter('9');
 80023f2:	2039      	movs	r0, #57	; 0x39
 80023f4:	f7fd feac 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80023f8:	bf00      	nop
 80023fa:	2101      	movs	r1, #1
 80023fc:	483a      	ldr	r0, [pc, #232]	; (80024e8 <getVal+0x2d8>)
 80023fe:	f000 fff3 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002402:	4603      	mov	r3, r0
 8002404:	2b01      	cmp	r3, #1
 8002406:	d0f8      	beq.n	80023fa <getVal+0x1ea>
		  {}
		  HAL_Delay(100);
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	f000 fd91 	bl	8002f30 <HAL_Delay>
		  count =1;
 800240e:	2301      	movs	r3, #1
 8002410:	603b      	str	r3, [r7, #0]
		  val = 9;
 8002412:	2309      	movs	r3, #9
 8002414:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241c:	4831      	ldr	r0, [pc, #196]	; (80024e4 <getVal+0x2d4>)
 800241e:	f000 fffa 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 8002422:	2201      	movs	r2, #1
 8002424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002428:	482e      	ldr	r0, [pc, #184]	; (80024e4 <getVal+0x2d4>)
 800242a:	f000 fff4 	bl	8003416 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 800242e:	2104      	movs	r1, #4
 8002430:	482d      	ldr	r0, [pc, #180]	; (80024e8 <getVal+0x2d8>)
 8002432:	f000 ffd9 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002436:	4603      	mov	r3, r0
 8002438:	2b01      	cmp	r3, #1
 800243a:	d111      	bne.n	8002460 <getVal+0x250>
	  {
		  letter('*');
 800243c:	202a      	movs	r0, #42	; 0x2a
 800243e:	f7fd fe87 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002442:	bf00      	nop
 8002444:	2104      	movs	r1, #4
 8002446:	4828      	ldr	r0, [pc, #160]	; (80024e8 <getVal+0x2d8>)
 8002448:	f000 ffce 	bl	80033e8 <HAL_GPIO_ReadPin>
 800244c:	4603      	mov	r3, r0
 800244e:	2b01      	cmp	r3, #1
 8002450:	d0f8      	beq.n	8002444 <getVal+0x234>
		  {}
		  HAL_Delay(100);
 8002452:	2064      	movs	r0, #100	; 0x64
 8002454:	f000 fd6c 	bl	8002f30 <HAL_Delay>
		  count =1;
 8002458:	2301      	movs	r3, #1
 800245a:	603b      	str	r3, [r7, #0]
		  val = 10;
 800245c:	230a      	movs	r3, #10
 800245e:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002460:	2102      	movs	r1, #2
 8002462:	4821      	ldr	r0, [pc, #132]	; (80024e8 <getVal+0x2d8>)
 8002464:	f000 ffc0 	bl	80033e8 <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d111      	bne.n	8002492 <getVal+0x282>
	  {
		  letter('0');
 800246e:	2030      	movs	r0, #48	; 0x30
 8002470:	f7fd fe6e 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002474:	bf00      	nop
 8002476:	2102      	movs	r1, #2
 8002478:	481b      	ldr	r0, [pc, #108]	; (80024e8 <getVal+0x2d8>)
 800247a:	f000 ffb5 	bl	80033e8 <HAL_GPIO_ReadPin>
 800247e:	4603      	mov	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d0f8      	beq.n	8002476 <getVal+0x266>
		  {}
		  HAL_Delay(100);
 8002484:	2064      	movs	r0, #100	; 0x64
 8002486:	f000 fd53 	bl	8002f30 <HAL_Delay>
		  count =1;
 800248a:	2301      	movs	r3, #1
 800248c:	603b      	str	r3, [r7, #0]
		  val = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002492:	2101      	movs	r1, #1
 8002494:	4814      	ldr	r0, [pc, #80]	; (80024e8 <getVal+0x2d8>)
 8002496:	f000 ffa7 	bl	80033e8 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b01      	cmp	r3, #1
 800249e:	d111      	bne.n	80024c4 <getVal+0x2b4>
	  {
		  letter('#');
 80024a0:	2023      	movs	r0, #35	; 0x23
 80024a2:	f7fd fe55 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80024a6:	bf00      	nop
 80024a8:	2101      	movs	r1, #1
 80024aa:	480f      	ldr	r0, [pc, #60]	; (80024e8 <getVal+0x2d8>)
 80024ac:	f000 ff9c 	bl	80033e8 <HAL_GPIO_ReadPin>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d0f8      	beq.n	80024a8 <getVal+0x298>
		  {}
		  HAL_Delay(100);
 80024b6:	2064      	movs	r0, #100	; 0x64
 80024b8:	f000 fd3a 	bl	8002f30 <HAL_Delay>
		  count =1;
 80024bc:	2301      	movs	r3, #1
 80024be:	603b      	str	r3, [r7, #0]
		  val = 11;
 80024c0:	230b      	movs	r3, #11
 80024c2:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 80024c4:	2200      	movs	r2, #0
 80024c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ca:	4806      	ldr	r0, [pc, #24]	; (80024e4 <getVal+0x2d4>)
 80024cc:	f000 ffa3 	bl	8003416 <HAL_GPIO_WritePin>
	while(count < 1)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f77f aea2 	ble.w	800221c <getVal+0xc>
	}
	return val;
 80024d8:	687b      	ldr	r3, [r7, #4]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40011000 	.word	0x40011000
 80024e8:	40010c00 	.word	0x40010c00
 80024ec:	40011400 	.word	0x40011400

080024f0 <wrongPass>:
void wrongPass(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80024f4:	2201      	movs	r2, #1
 80024f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024fa:	481a      	ldr	r0, [pc, #104]	; (8002564 <wrongPass+0x74>)
 80024fc:	f000 ff8b 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002500:	2200      	movs	r2, #0
 8002502:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002506:	4817      	ldr	r0, [pc, #92]	; (8002564 <wrongPass+0x74>)
 8002508:	f000 ff85 	bl	8003416 <HAL_GPIO_WritePin>
	letter('W');
 800250c:	2057      	movs	r0, #87	; 0x57
 800250e:	f7fd fe1f 	bl	8000150 <letter>
	letter('r');
 8002512:	2072      	movs	r0, #114	; 0x72
 8002514:	f7fd fe1c 	bl	8000150 <letter>
	letter('o');
 8002518:	206f      	movs	r0, #111	; 0x6f
 800251a:	f7fd fe19 	bl	8000150 <letter>
	letter('n');
 800251e:	206e      	movs	r0, #110	; 0x6e
 8002520:	f7fd fe16 	bl	8000150 <letter>
	letter('g');
 8002524:	2067      	movs	r0, #103	; 0x67
 8002526:	f7fd fe13 	bl	8000150 <letter>
	letter(' ');
 800252a:	2020      	movs	r0, #32
 800252c:	f7fd fe10 	bl	8000150 <letter>
	letter('P');
 8002530:	2050      	movs	r0, #80	; 0x50
 8002532:	f7fd fe0d 	bl	8000150 <letter>
	letter('a');
 8002536:	2061      	movs	r0, #97	; 0x61
 8002538:	f7fd fe0a 	bl	8000150 <letter>
	letter('s');
 800253c:	2073      	movs	r0, #115	; 0x73
 800253e:	f7fd fe07 	bl	8000150 <letter>
	letter('s');
 8002542:	2073      	movs	r0, #115	; 0x73
 8002544:	f7fd fe04 	bl	8000150 <letter>
	letter('w');
 8002548:	2077      	movs	r0, #119	; 0x77
 800254a:	f7fd fe01 	bl	8000150 <letter>
	letter('o');
 800254e:	206f      	movs	r0, #111	; 0x6f
 8002550:	f7fd fdfe 	bl	8000150 <letter>
	letter('r');
 8002554:	2072      	movs	r0, #114	; 0x72
 8002556:	f7fd fdfb 	bl	8000150 <letter>
	letter('d');
 800255a:	2064      	movs	r0, #100	; 0x64
 800255c:	f7fd fdf8 	bl	8000150 <letter>
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40010c00 	.word	0x40010c00

08002568 <green>:
int green(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
	int grn;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002574:	4817      	ldr	r0, [pc, #92]	; (80025d4 <green+0x6c>)
 8002576:	f000 ff4e 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002580:	4814      	ldr	r0, [pc, #80]	; (80025d4 <green+0x6c>)
 8002582:	f000 ff48 	bl	8003416 <HAL_GPIO_WritePin>
	letter('G');
 8002586:	2047      	movs	r0, #71	; 0x47
 8002588:	f7fd fde2 	bl	8000150 <letter>
	letter('r');
 800258c:	2072      	movs	r0, #114	; 0x72
 800258e:	f7fd fddf 	bl	8000150 <letter>
	letter('e');
 8002592:	2065      	movs	r0, #101	; 0x65
 8002594:	f7fd fddc 	bl	8000150 <letter>
	letter('e');
 8002598:	2065      	movs	r0, #101	; 0x65
 800259a:	f7fd fdd9 	bl	8000150 <letter>
	letter('n');
 800259e:	206e      	movs	r0, #110	; 0x6e
 80025a0:	f7fd fdd6 	bl	8000150 <letter>
	letter(' ');
 80025a4:	2020      	movs	r0, #32
 80025a6:	f7fd fdd3 	bl	8000150 <letter>
	letter('1');
 80025aa:	2031      	movs	r0, #49	; 0x31
 80025ac:	f7fd fdd0 	bl	8000150 <letter>
	letter('-');
 80025b0:	202d      	movs	r0, #45	; 0x2d
 80025b2:	f7fd fdcd 	bl	8000150 <letter>
	letter('3');
 80025b6:	2033      	movs	r0, #51	; 0x33
 80025b8:	f7fd fdca 	bl	8000150 <letter>
	letter(':');
 80025bc:	203a      	movs	r0, #58	; 0x3a
 80025be:	f7fd fdc7 	bl	8000150 <letter>

	grn = getVal();
 80025c2:	f7ff fe25 	bl	8002210 <getVal>
 80025c6:	6078      	str	r0, [r7, #4]
	return grn;
 80025c8:	687b      	ldr	r3, [r7, #4]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40010c00 	.word	0x40010c00

080025d8 <timer>:

int timer(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
	int time;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e4:	4822      	ldr	r0, [pc, #136]	; (8002670 <timer+0x98>)
 80025e6:	f000 ff16 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80025ea:	2200      	movs	r2, #0
 80025ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025f0:	481f      	ldr	r0, [pc, #124]	; (8002670 <timer+0x98>)
 80025f2:	f000 ff10 	bl	8003416 <HAL_GPIO_WritePin>

	letter('T');
 80025f6:	2054      	movs	r0, #84	; 0x54
 80025f8:	f7fd fdaa 	bl	8000150 <letter>
	letter('i');
 80025fc:	2069      	movs	r0, #105	; 0x69
 80025fe:	f7fd fda7 	bl	8000150 <letter>
	letter('m');
 8002602:	206d      	movs	r0, #109	; 0x6d
 8002604:	f7fd fda4 	bl	8000150 <letter>
	letter('e');
 8002608:	2065      	movs	r0, #101	; 0x65
 800260a:	f7fd fda1 	bl	8000150 <letter>
	letter(' ');
 800260e:	2020      	movs	r0, #32
 8002610:	f7fd fd9e 	bl	8000150 <letter>
	letter('0');
 8002614:	2030      	movs	r0, #48	; 0x30
 8002616:	f7fd fd9b 	bl	8000150 <letter>
	letter('0');
 800261a:	2030      	movs	r0, #48	; 0x30
 800261c:	f7fd fd98 	bl	8000150 <letter>
	letter('-');
 8002620:	202d      	movs	r0, #45	; 0x2d
 8002622:	f7fd fd95 	bl	8000150 <letter>
	letter('6');
 8002626:	2036      	movs	r0, #54	; 0x36
 8002628:	f7fd fd92 	bl	8000150 <letter>
	letter('0');
 800262c:	2030      	movs	r0, #48	; 0x30
 800262e:	f7fd fd8f 	bl	8000150 <letter>
	letter('m');
 8002632:	206d      	movs	r0, #109	; 0x6d
 8002634:	f7fd fd8c 	bl	8000150 <letter>
	letter('i');
 8002638:	2069      	movs	r0, #105	; 0x69
 800263a:	f7fd fd89 	bl	8000150 <letter>
	letter('n');
 800263e:	206e      	movs	r0, #110	; 0x6e
 8002640:	f7fd fd86 	bl	8000150 <letter>
	letter(':');
 8002644:	203a      	movs	r0, #58	; 0x3a
 8002646:	f7fd fd83 	bl	8000150 <letter>

	time = (getVal()*10);
 800264a:	f7ff fde1 	bl	8002210 <getVal>
 800264e:	4602      	mov	r2, r0
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	607b      	str	r3, [r7, #4]
	time = time + getVal();
 800265a:	f7ff fdd9 	bl	8002210 <getVal>
 800265e:	4602      	mov	r2, r0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	607b      	str	r3, [r7, #4]
	return time;
 8002666:	687b      	ldr	r3, [r7, #4]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40010c00 	.word	0x40010c00

08002674 <quit>:

int quit(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
	int val;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002680:	4821      	ldr	r0, [pc, #132]	; (8002708 <quit+0x94>)
 8002682:	f000 fec8 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002686:	2200      	movs	r2, #0
 8002688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800268c:	481e      	ldr	r0, [pc, #120]	; (8002708 <quit+0x94>)
 800268e:	f000 fec2 	bl	8003416 <HAL_GPIO_WritePin>

	letter('Q');
 8002692:	2051      	movs	r0, #81	; 0x51
 8002694:	f7fd fd5c 	bl	8000150 <letter>
	letter('u');
 8002698:	2075      	movs	r0, #117	; 0x75
 800269a:	f7fd fd59 	bl	8000150 <letter>
	letter('i');
 800269e:	2069      	movs	r0, #105	; 0x69
 80026a0:	f7fd fd56 	bl	8000150 <letter>
	letter('t');
 80026a4:	2074      	movs	r0, #116	; 0x74
 80026a6:	f7fd fd53 	bl	8000150 <letter>
	letter('?');
 80026aa:	203f      	movs	r0, #63	; 0x3f
 80026ac:	f7fd fd50 	bl	8000150 <letter>
	letter(' ');
 80026b0:	2020      	movs	r0, #32
 80026b2:	f7fd fd4d 	bl	8000150 <letter>
	letter('y');
 80026b6:	2079      	movs	r0, #121	; 0x79
 80026b8:	f7fd fd4a 	bl	8000150 <letter>
	letter('e');
 80026bc:	2065      	movs	r0, #101	; 0x65
 80026be:	f7fd fd47 	bl	8000150 <letter>
	letter('s');
 80026c2:	2073      	movs	r0, #115	; 0x73
 80026c4:	f7fd fd44 	bl	8000150 <letter>
	letter('-');
 80026c8:	202d      	movs	r0, #45	; 0x2d
 80026ca:	f7fd fd41 	bl	8000150 <letter>
	letter('1');
 80026ce:	2031      	movs	r0, #49	; 0x31
 80026d0:	f7fd fd3e 	bl	8000150 <letter>
	letter(' ');
 80026d4:	2020      	movs	r0, #32
 80026d6:	f7fd fd3b 	bl	8000150 <letter>
	letter('n');
 80026da:	206e      	movs	r0, #110	; 0x6e
 80026dc:	f7fd fd38 	bl	8000150 <letter>
	letter('o');
 80026e0:	206f      	movs	r0, #111	; 0x6f
 80026e2:	f7fd fd35 	bl	8000150 <letter>
	letter('-');
 80026e6:	202d      	movs	r0, #45	; 0x2d
 80026e8:	f7fd fd32 	bl	8000150 <letter>
	letter('0');
 80026ec:	2030      	movs	r0, #48	; 0x30
 80026ee:	f7fd fd2f 	bl	8000150 <letter>

	line2();
 80026f2:	f7ff fcbb 	bl	800206c <line2>
	val = getVal();
 80026f6:	f7ff fd8b 	bl	8002210 <getVal>
 80026fa:	6078      	str	r0, [r7, #4]
return val;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40010c00 	.word	0x40010c00

0800270c <onOffTime>:
int onOffTime(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
	int choice;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002712:	2201      	movs	r2, #1
 8002714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002718:	4821      	ldr	r0, [pc, #132]	; (80027a0 <onOffTime+0x94>)
 800271a:	f000 fe7c 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002724:	481e      	ldr	r0, [pc, #120]	; (80027a0 <onOffTime+0x94>)
 8002726:	f000 fe76 	bl	8003416 <HAL_GPIO_WritePin>
	letter('0');
 800272a:	2030      	movs	r0, #48	; 0x30
 800272c:	f7fd fd10 	bl	8000150 <letter>
	letter('-');
 8002730:	202d      	movs	r0, #45	; 0x2d
 8002732:	f7fd fd0d 	bl	8000150 <letter>
	letter('O');
 8002736:	204f      	movs	r0, #79	; 0x4f
 8002738:	f7fd fd0a 	bl	8000150 <letter>
	letter('n');
 800273c:	206e      	movs	r0, #110	; 0x6e
 800273e:	f7fd fd07 	bl	8000150 <letter>
	letter('/');
 8002742:	202f      	movs	r0, #47	; 0x2f
 8002744:	f7fd fd04 	bl	8000150 <letter>
	letter('O');
 8002748:	204f      	movs	r0, #79	; 0x4f
 800274a:	f7fd fd01 	bl	8000150 <letter>
	letter('f');
 800274e:	2066      	movs	r0, #102	; 0x66
 8002750:	f7fd fcfe 	bl	8000150 <letter>
	letter('f');
 8002754:	2066      	movs	r0, #102	; 0x66
 8002756:	f7fd fcfb 	bl	8000150 <letter>
	letter(' ');
 800275a:	2020      	movs	r0, #32
 800275c:	f7fd fcf8 	bl	8000150 <letter>
	letter('1');
 8002760:	2031      	movs	r0, #49	; 0x31
 8002762:	f7fd fcf5 	bl	8000150 <letter>
	letter('-');
 8002766:	202d      	movs	r0, #45	; 0x2d
 8002768:	f7fd fcf2 	bl	8000150 <letter>
	letter('T');
 800276c:	2054      	movs	r0, #84	; 0x54
 800276e:	f7fd fcef 	bl	8000150 <letter>
	letter('i');
 8002772:	2069      	movs	r0, #105	; 0x69
 8002774:	f7fd fcec 	bl	8000150 <letter>
	letter('m');
 8002778:	206d      	movs	r0, #109	; 0x6d
 800277a:	f7fd fce9 	bl	8000150 <letter>
	letter('e');
 800277e:	2065      	movs	r0, #101	; 0x65
 8002780:	f7fd fce6 	bl	8000150 <letter>
	letter('r');
 8002784:	2072      	movs	r0, #114	; 0x72
 8002786:	f7fd fce3 	bl	8000150 <letter>

	line2();
 800278a:	f7ff fc6f 	bl	800206c <line2>
	choice = getVal();
 800278e:	f7ff fd3f 	bl	8002210 <getVal>
 8002792:	6078      	str	r0, [r7, #4]
	return choice;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40010c00 	.word	0x40010c00

080027a4 <onOff>:
int onOff(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
	int on;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80027aa:	2201      	movs	r2, #1
 80027ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b0:	4818      	ldr	r0, [pc, #96]	; (8002814 <onOff+0x70>)
 80027b2:	f000 fe30 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80027b6:	2200      	movs	r2, #0
 80027b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027bc:	4815      	ldr	r0, [pc, #84]	; (8002814 <onOff+0x70>)
 80027be:	f000 fe2a 	bl	8003416 <HAL_GPIO_WritePin>
	letter('0');
 80027c2:	2030      	movs	r0, #48	; 0x30
 80027c4:	f7fd fcc4 	bl	8000150 <letter>
	letter('-');
 80027c8:	202d      	movs	r0, #45	; 0x2d
 80027ca:	f7fd fcc1 	bl	8000150 <letter>
	letter('O');
 80027ce:	204f      	movs	r0, #79	; 0x4f
 80027d0:	f7fd fcbe 	bl	8000150 <letter>
	letter('n');
 80027d4:	206e      	movs	r0, #110	; 0x6e
 80027d6:	f7fd fcbb 	bl	8000150 <letter>
	letter(' ');
 80027da:	2020      	movs	r0, #32
 80027dc:	f7fd fcb8 	bl	8000150 <letter>
	letter('1');
 80027e0:	2031      	movs	r0, #49	; 0x31
 80027e2:	f7fd fcb5 	bl	8000150 <letter>
	letter('-');
 80027e6:	202d      	movs	r0, #45	; 0x2d
 80027e8:	f7fd fcb2 	bl	8000150 <letter>
	letter('O');
 80027ec:	204f      	movs	r0, #79	; 0x4f
 80027ee:	f7fd fcaf 	bl	8000150 <letter>
	letter('f');
 80027f2:	2066      	movs	r0, #102	; 0x66
 80027f4:	f7fd fcac 	bl	8000150 <letter>
	letter('f');
 80027f8:	2066      	movs	r0, #102	; 0x66
 80027fa:	f7fd fca9 	bl	8000150 <letter>
	letter(':');
 80027fe:	203a      	movs	r0, #58	; 0x3a
 8002800:	f7fd fca6 	bl	8000150 <letter>

	on = getVal();
 8002804:	f7ff fd04 	bl	8002210 <getVal>
 8002808:	6078      	str	r0, [r7, #4]
	return on;
 800280a:	687b      	ldr	r3, [r7, #4]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40010c00 	.word	0x40010c00

08002818 <error>:
void error(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800281c:	2201      	movs	r2, #1
 800281e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002822:	482a      	ldr	r0, [pc, #168]	; (80028cc <error+0xb4>)
 8002824:	f000 fdf7 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800282e:	4827      	ldr	r0, [pc, #156]	; (80028cc <error+0xb4>)
 8002830:	f000 fdf1 	bl	8003416 <HAL_GPIO_WritePin>

	letter('E');
 8002834:	2045      	movs	r0, #69	; 0x45
 8002836:	f7fd fc8b 	bl	8000150 <letter>
	letter('r');
 800283a:	2072      	movs	r0, #114	; 0x72
 800283c:	f7fd fc88 	bl	8000150 <letter>
	letter('r');
 8002840:	2072      	movs	r0, #114	; 0x72
 8002842:	f7fd fc85 	bl	8000150 <letter>
	letter('o');
 8002846:	206f      	movs	r0, #111	; 0x6f
 8002848:	f7fd fc82 	bl	8000150 <letter>
	letter('r');
 800284c:	2072      	movs	r0, #114	; 0x72
 800284e:	f7fd fc7f 	bl	8000150 <letter>
	letter(',');
 8002852:	202c      	movs	r0, #44	; 0x2c
 8002854:	f7fd fc7c 	bl	8000150 <letter>
	letter(' ');
 8002858:	2020      	movs	r0, #32
 800285a:	f7fd fc79 	bl	8000150 <letter>
	letter('I');
 800285e:	2049      	movs	r0, #73	; 0x49
 8002860:	f7fd fc76 	bl	8000150 <letter>
	letter('n');
 8002864:	206e      	movs	r0, #110	; 0x6e
 8002866:	f7fd fc73 	bl	8000150 <letter>
	letter('v');
 800286a:	2076      	movs	r0, #118	; 0x76
 800286c:	f7fd fc70 	bl	8000150 <letter>
	letter('a');
 8002870:	2061      	movs	r0, #97	; 0x61
 8002872:	f7fd fc6d 	bl	8000150 <letter>
	letter('l');
 8002876:	206c      	movs	r0, #108	; 0x6c
 8002878:	f7fd fc6a 	bl	8000150 <letter>
	letter('i');
 800287c:	2069      	movs	r0, #105	; 0x69
 800287e:	f7fd fc67 	bl	8000150 <letter>
	letter('d');
 8002882:	2064      	movs	r0, #100	; 0x64
 8002884:	f7fd fc64 	bl	8000150 <letter>

	line2();
 8002888:	f7ff fbf0 	bl	800206c <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800288c:	2201      	movs	r2, #1
 800288e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002892:	480e      	ldr	r0, [pc, #56]	; (80028cc <error+0xb4>)
 8002894:	f000 fdbf 	bl	8003416 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800289e:	480b      	ldr	r0, [pc, #44]	; (80028cc <error+0xb4>)
 80028a0:	f000 fdb9 	bl	8003416 <HAL_GPIO_WritePin>
	letter('N');
 80028a4:	204e      	movs	r0, #78	; 0x4e
 80028a6:	f7fd fc53 	bl	8000150 <letter>
	letter('u');
 80028aa:	2075      	movs	r0, #117	; 0x75
 80028ac:	f7fd fc50 	bl	8000150 <letter>
	letter('m');
 80028b0:	206d      	movs	r0, #109	; 0x6d
 80028b2:	f7fd fc4d 	bl	8000150 <letter>
	letter('b');
 80028b6:	2062      	movs	r0, #98	; 0x62
 80028b8:	f7fd fc4a 	bl	8000150 <letter>
	letter('e');
 80028bc:	2065      	movs	r0, #101	; 0x65
 80028be:	f7fd fc47 	bl	8000150 <letter>
	letter('r');
 80028c2:	2072      	movs	r0, #114	; 0x72
 80028c4:	f7fd fc44 	bl	8000150 <letter>
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40010c00 	.word	0x40010c00

080028d0 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	//initializeNodes();
	//HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);
  for(;;)
  {

    osDelay(1);
 80028d8:	2001      	movs	r0, #1
 80028da:	f001 fffd 	bl	80048d8 <osDelay>
 80028de:	e7fb      	b.n	80028d8 <StartXbeeTask+0x8>

080028e0 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */
  int indc;
  int val[6];
  while(1)
  {
	  val[6] = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	623b      	str	r3, [r7, #32]
	  commandToLCD();
 80028ec:	f7ff fa64 	bl	8001db8 <commandToLCD>
	  printPassword();
 80028f0:	f7ff fb3a 	bl	8001f68 <printPassword>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028fa:	48ae      	ldr	r0, [pc, #696]	; (8002bb4 <StartUserTask+0x2d4>)
 80028fc:	f000 fd8b 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002900:	2200      	movs	r2, #0
 8002902:	2104      	movs	r1, #4
 8002904:	48ac      	ldr	r0, [pc, #688]	; (8002bb8 <StartUserTask+0x2d8>)
 8002906:	f000 fd86 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002910:	48a8      	ldr	r0, [pc, #672]	; (8002bb4 <StartUserTask+0x2d4>)
 8002912:	f000 fd80 	bl	8003416 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800291c:	48a5      	ldr	r0, [pc, #660]	; (8002bb4 <StartUserTask+0x2d4>)
 800291e:	f000 fd7a 	bl	8003416 <HAL_GPIO_WritePin>
	  for (int i = 0; i<4; i++)
 8002922:	2300      	movs	r3, #0
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
 8002926:	e00c      	b.n	8002942 <StartUserTask+0x62>
	  {
		  val[i] = getVal();
 8002928:	f7ff fc72 	bl	8002210 <getVal>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002936:	440b      	add	r3, r1
 8002938:	f843 2c20 	str.w	r2, [r3, #-32]
	  for (int i = 0; i<4; i++)
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	3301      	adds	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	2b03      	cmp	r3, #3
 8002946:	ddef      	ble.n	8002928 <StartUserTask+0x48>
	  }
	  if(val[0] == 1)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	f040 8129 	bne.w	8002ba2 <StartUserTask+0x2c2>
	  {
		  if(val[1] == 2)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b02      	cmp	r3, #2
 8002954:	f040 811c 	bne.w	8002b90 <StartUserTask+0x2b0>
		  {
			  if(val[2] == 3)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b03      	cmp	r3, #3
 800295c:	f040 810f 	bne.w	8002b7e <StartUserTask+0x29e>
			  {
				  if(val[3] == 4)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b04      	cmp	r3, #4
 8002964:	f040 8102 	bne.w	8002b6c <StartUserTask+0x28c>
				  {
					  clear();
 8002968:	f7ff fbd4 	bl	8002114 <clear>
					  line1();
 800296c:	f7ff fb2a 	bl	8001fc4 <line1>
					  correct();
 8002970:	f7ff fc24 	bl	80021bc <correct>
					  HAL_Delay(1500);
 8002974:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002978:	f000 fada 	bl	8002f30 <HAL_Delay>
					  while(val[6] == 0)
 800297c:	e0f1      	b.n	8002b62 <StartUserTask+0x282>
					  {
						  commandToLCD();
 800297e:	f7ff fa1b 	bl	8001db8 <commandToLCD>
						  val[0] = onOffTime();
 8002982:	f7ff fec3 	bl	800270c <onOffTime>
 8002986:	4603      	mov	r3, r0
 8002988:	60bb      	str	r3, [r7, #8]
						  while(val[0]< 0 || val[0] > 1)
 800298a:	e00d      	b.n	80029a8 <StartUserTask+0xc8>
						  {
							  commandToLCD();
 800298c:	f7ff fa14 	bl	8001db8 <commandToLCD>
							  error();
 8002990:	f7ff ff42 	bl	8002818 <error>
							  HAL_Delay(1500);
 8002994:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002998:	f000 faca 	bl	8002f30 <HAL_Delay>
							  commandToLCD();
 800299c:	f7ff fa0c 	bl	8001db8 <commandToLCD>
							  val[0] = onOffTime();
 80029a0:	f7ff feb4 	bl	800270c <onOffTime>
 80029a4:	4603      	mov	r3, r0
 80029a6:	60bb      	str	r3, [r7, #8]
						  while(val[0]< 0 || val[0] > 1)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	dbee      	blt.n	800298c <StartUserTask+0xac>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	dceb      	bgt.n	800298c <StartUserTask+0xac>
						  }
						  if(val[0] == 0)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d168      	bne.n	8002a8c <StartUserTask+0x1ac>
						  {
							  commandToLCD();
 80029ba:	f7ff f9fd 	bl	8001db8 <commandToLCD>
							  val[0] = green();
 80029be:	f7ff fdd3 	bl	8002568 <green>
 80029c2:	4603      	mov	r3, r0
 80029c4:	60bb      	str	r3, [r7, #8]
							  while(val[0]< 1 || val[0] > 3)
 80029c6:	e00d      	b.n	80029e4 <StartUserTask+0x104>
							  {
								  commandToLCD();
 80029c8:	f7ff f9f6 	bl	8001db8 <commandToLCD>
								  error();
 80029cc:	f7ff ff24 	bl	8002818 <error>
								  HAL_Delay(1500);
 80029d0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80029d4:	f000 faac 	bl	8002f30 <HAL_Delay>
								  commandToLCD();
 80029d8:	f7ff f9ee 	bl	8001db8 <commandToLCD>
								  val[0] = green();
 80029dc:	f7ff fdc4 	bl	8002568 <green>
 80029e0:	4603      	mov	r3, r0
 80029e2:	60bb      	str	r3, [r7, #8]
							  while(val[0]< 1 || val[0] > 3)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	ddee      	ble.n	80029c8 <StartUserTask+0xe8>
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	dceb      	bgt.n	80029c8 <StartUserTask+0xe8>
							  }
							  indc = val[0];///do something with val[0] aka green #
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	623b      	str	r3, [r7, #32]
							  line2();
 80029f4:	f7ff fb3a 	bl	800206c <line2>
							  val[0] = onOff();
 80029f8:	f7ff fed4 	bl	80027a4 <onOff>
 80029fc:	4603      	mov	r3, r0
 80029fe:	60bb      	str	r3, [r7, #8]
							  while(val[0]< 0 || val[0] > 1)
 8002a00:	e00d      	b.n	8002a1e <StartUserTask+0x13e>
							  {
								  commandToLCD();
 8002a02:	f7ff f9d9 	bl	8001db8 <commandToLCD>
								  error();
 8002a06:	f7ff ff07 	bl	8002818 <error>
								  HAL_Delay(1500);
 8002a0a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a0e:	f000 fa8f 	bl	8002f30 <HAL_Delay>
								  commandToLCD();
 8002a12:	f7ff f9d1 	bl	8001db8 <commandToLCD>
								  val[0] = onOff();
 8002a16:	f7ff fec5 	bl	80027a4 <onOff>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	60bb      	str	r3, [r7, #8]
							  while(val[0]< 0 || val[0] > 1)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	dbee      	blt.n	8002a02 <StartUserTask+0x122>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	dceb      	bgt.n	8002a02 <StartUserTask+0x122>
							  }
							  val[1] = val[0];///do something with val[0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	60fb      	str	r3, [r7, #12]
							  val[0] = indc;
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	60bb      	str	r3, [r7, #8]

							  osMessageQueuePut(UserQueueHandle,&val[0],1U,0U);
 8002a32:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <StartUserTask+0x2dc>)
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	f107 0108 	add.w	r1, r7, #8
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f001 ffff 	bl	8004a40 <osMessageQueuePut>
							  osMessageQueuePut(UserQueueHandle,&val[1],1U,0U);
 8002a42:	4b5e      	ldr	r3, [pc, #376]	; (8002bbc <StartUserTask+0x2dc>)
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	1d19      	adds	r1, r3, #4
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f001 fff6 	bl	8004a40 <osMessageQueuePut>

							  clear();
 8002a54:	f7ff fb5e 	bl	8002114 <clear>
							  val[0] = quit();
 8002a58:	f7ff fe0c 	bl	8002674 <quit>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	60bb      	str	r3, [r7, #8]
							  while(val[0]< 0 || val[0] > 1)
 8002a60:	e00d      	b.n	8002a7e <StartUserTask+0x19e>
							  {
								  commandToLCD();
 8002a62:	f7ff f9a9 	bl	8001db8 <commandToLCD>
								  error();
 8002a66:	f7ff fed7 	bl	8002818 <error>
								  HAL_Delay(1500);
 8002a6a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002a6e:	f000 fa5f 	bl	8002f30 <HAL_Delay>
								  commandToLCD();
 8002a72:	f7ff f9a1 	bl	8001db8 <commandToLCD>
								  val[0] = quit();
 8002a76:	f7ff fdfd 	bl	8002674 <quit>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	60bb      	str	r3, [r7, #8]
							  while(val[0]< 0 || val[0] > 1)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	dbee      	blt.n	8002a62 <StartUserTask+0x182>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	dceb      	bgt.n	8002a62 <StartUserTask+0x182>
 8002a8a:	e06a      	b.n	8002b62 <StartUserTask+0x282>
							  }
						  }

						  else if(val[0] == 1)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d167      	bne.n	8002b62 <StartUserTask+0x282>
						  {

								  commandToLCD();
 8002a92:	f7ff f991 	bl	8001db8 <commandToLCD>
								  val[0] = green();
 8002a96:	f7ff fd67 	bl	8002568 <green>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	60bb      	str	r3, [r7, #8]
								  while(val[0]< 1 || val[0] > 3)
 8002a9e:	e00d      	b.n	8002abc <StartUserTask+0x1dc>
								  {
									  commandToLCD();
 8002aa0:	f7ff f98a 	bl	8001db8 <commandToLCD>
									  error();
 8002aa4:	f7ff feb8 	bl	8002818 <error>
									  HAL_Delay(1500);
 8002aa8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002aac:	f000 fa40 	bl	8002f30 <HAL_Delay>
									  commandToLCD();
 8002ab0:	f7ff f982 	bl	8001db8 <commandToLCD>
									  val[0] = green();
 8002ab4:	f7ff fd58 	bl	8002568 <green>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	60bb      	str	r3, [r7, #8]
								  while(val[0]< 1 || val[0] > 3)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	ddee      	ble.n	8002aa0 <StartUserTask+0x1c0>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	dceb      	bgt.n	8002aa0 <StartUserTask+0x1c0>
								  }
								  indc = val[0];///do something with val[0] aka green #
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	623b      	str	r3, [r7, #32]
								  line2();
 8002acc:	f7ff face 	bl	800206c <line2>
								  val[0] = timer();
 8002ad0:	f7ff fd82 	bl	80025d8 <timer>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60bb      	str	r3, [r7, #8]
								  while(val[0]< 0 || val[0] > 60)
 8002ad8:	e00d      	b.n	8002af6 <StartUserTask+0x216>
								  {
									  commandToLCD();
 8002ada:	f7ff f96d 	bl	8001db8 <commandToLCD>
									  error();
 8002ade:	f7ff fe9b 	bl	8002818 <error>
									  HAL_Delay(1500);
 8002ae2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ae6:	f000 fa23 	bl	8002f30 <HAL_Delay>
									  commandToLCD();
 8002aea:	f7ff f965 	bl	8001db8 <commandToLCD>
									  val[0] = timer();
 8002aee:	f7ff fd73 	bl	80025d8 <timer>
 8002af2:	4603      	mov	r3, r0
 8002af4:	60bb      	str	r3, [r7, #8]
								  while(val[0]< 0 || val[0] > 60)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	dbee      	blt.n	8002ada <StartUserTask+0x1fa>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b3c      	cmp	r3, #60	; 0x3c
 8002b00:	dceb      	bgt.n	8002ada <StartUserTask+0x1fa>
								  }
								  val[1] = val[0];
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	60fb      	str	r3, [r7, #12]
								  val[0] = indc;
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	60bb      	str	r3, [r7, #8]
								  osMessageQueuePut(UserQueueHandle,&val[0],1U,0U);
 8002b0a:	4b2c      	ldr	r3, [pc, #176]	; (8002bbc <StartUserTask+0x2dc>)
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	f107 0108 	add.w	r1, r7, #8
 8002b12:	2300      	movs	r3, #0
 8002b14:	2201      	movs	r2, #1
 8002b16:	f001 ff93 	bl	8004a40 <osMessageQueuePut>
								  osMessageQueuePut(UserQueueHandle,&val[1],1U,0U);
 8002b1a:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <StartUserTask+0x2dc>)
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	1d19      	adds	r1, r3, #4
 8002b24:	2300      	movs	r3, #0
 8002b26:	2201      	movs	r2, #1
 8002b28:	f001 ff8a 	bl	8004a40 <osMessageQueuePut>
								  ///do something with val[0] and val[1]
								  clear();
 8002b2c:	f7ff faf2 	bl	8002114 <clear>
								  val[0] = quit();
 8002b30:	f7ff fda0 	bl	8002674 <quit>
 8002b34:	4603      	mov	r3, r0
 8002b36:	60bb      	str	r3, [r7, #8]
								  while(val[0]< 0 || val[0] > 1)
 8002b38:	e00d      	b.n	8002b56 <StartUserTask+0x276>
								  {
									  commandToLCD();
 8002b3a:	f7ff f93d 	bl	8001db8 <commandToLCD>
									  error();
 8002b3e:	f7ff fe6b 	bl	8002818 <error>
									  HAL_Delay(1500);
 8002b42:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b46:	f000 f9f3 	bl	8002f30 <HAL_Delay>
									  commandToLCD();
 8002b4a:	f7ff f935 	bl	8001db8 <commandToLCD>
									  val[0] = quit();
 8002b4e:	f7ff fd91 	bl	8002674 <quit>
 8002b52:	4603      	mov	r3, r0
 8002b54:	60bb      	str	r3, [r7, #8]
								  while(val[0]< 0 || val[0] > 1)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	dbee      	blt.n	8002b3a <StartUserTask+0x25a>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	dceb      	bgt.n	8002b3a <StartUserTask+0x25a>
					  while(val[6] == 0)
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f43f af0a 	beq.w	800297e <StartUserTask+0x9e>
 8002b6a:	e6bd      	b.n	80028e8 <StartUserTask+0x8>
						  }
					  }
				  }
				  else
				  {
					  line2();
 8002b6c:	f7ff fa7e 	bl	800206c <line2>
					  wrongPass();
 8002b70:	f7ff fcbe 	bl	80024f0 <wrongPass>
					  HAL_Delay(2000);
 8002b74:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b78:	f000 f9da 	bl	8002f30 <HAL_Delay>
 8002b7c:	e6b4      	b.n	80028e8 <StartUserTask+0x8>
				  }
			  }
			  else
			  {
				  line2();
 8002b7e:	f7ff fa75 	bl	800206c <line2>
				  wrongPass();
 8002b82:	f7ff fcb5 	bl	80024f0 <wrongPass>
				  HAL_Delay(2000);
 8002b86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b8a:	f000 f9d1 	bl	8002f30 <HAL_Delay>
 8002b8e:	e6ab      	b.n	80028e8 <StartUserTask+0x8>
			  }
		  }
		  else
		  {
			  line2();
 8002b90:	f7ff fa6c 	bl	800206c <line2>
			  wrongPass();
 8002b94:	f7ff fcac 	bl	80024f0 <wrongPass>
			  HAL_Delay(2000);
 8002b98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b9c:	f000 f9c8 	bl	8002f30 <HAL_Delay>
 8002ba0:	e6a2      	b.n	80028e8 <StartUserTask+0x8>
		  }
	  }
	  else
	  {
		  line2();
 8002ba2:	f7ff fa63 	bl	800206c <line2>
		  wrongPass();
 8002ba6:	f7ff fca3 	bl	80024f0 <wrongPass>
		  HAL_Delay(2000);
 8002baa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002bae:	f000 f9bf 	bl	8002f30 <HAL_Delay>
	  val[6] = 0;
 8002bb2:	e699      	b.n	80028e8 <StartUserTask+0x8>
 8002bb4:	40011000 	.word	0x40011000
 8002bb8:	40011400 	.word	0x40011400
 8002bbc:	2000213c 	.word	0x2000213c

08002bc0 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
//				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//			}
//		}
//  }
  /* USER CODE END StartSolenoidTask */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
//		period =  __HAL_TIM_GET_COUNTER(&htim2) - tickstart;
//		osMessageQueuePut(WeatherQueueHandle,&period,1U,0U);
//    osDelay(1);
//  }
  /* USER CODE END StartWeatherTask */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
//		}
//		  //osMessageQueuePut(FlowQueueHandle,&val[0],1U,0U);
//    osDelay(1);
//  }
  /* USER CODE END StartFlowTask */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
//		{
//			//on off
//		}
//	}
  /* USER CODE END StartProcessingTask */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c1a:	f000 f96d 	bl	8002ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40000800 	.word	0x40000800

08002c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c32:	e7fe      	b.n	8002c32 <Error_Handler+0x6>

08002c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_MspInit+0x68>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <HAL_MspInit+0x68>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6193      	str	r3, [r2, #24]
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <HAL_MspInit+0x68>)
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_MspInit+0x68>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <HAL_MspInit+0x68>)
 8002c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_MspInit+0x68>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	f06f 0001 	mvn.w	r0, #1
 8002c72:	f000 fa34 	bl	80030de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_MspInit+0x6c>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_MspInit+0x6c>)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40010000 	.word	0x40010000

08002ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d10b      	bne.n	8002cce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cb6:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <HAL_TIM_Base_MspInit+0x34>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <HAL_TIM_Base_MspInit+0x34>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	61d3      	str	r3, [r2, #28]
 8002cc2:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_TIM_Base_MspInit+0x34>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_UART_MspInit+0x8c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d131      	bne.n	8002d60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d06:	61d3      	str	r3, [r2, #28]
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d36:	2303      	movs	r3, #3
 8002d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d3a:	f107 0310 	add.w	r3, r7, #16
 8002d3e:	4619      	mov	r1, r3
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <HAL_UART_MspInit+0x94>)
 8002d42:	f000 f9f7 	bl	8003134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_UART_MspInit+0x94>)
 8002d5c:	f000 f9ea 	bl	8003134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d60:	bf00      	nop
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40004800 	.word	0x40004800
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010c00 	.word	0x40010c00

08002d74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08c      	sub	sp, #48	; 0x30
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8002d84:	2200      	movs	r2, #0
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	201e      	movs	r0, #30
 8002d8a:	f000 f9a8 	bl	80030de <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d8e:	201e      	movs	r0, #30
 8002d90:	f000 f9c1 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002d94:	4b1f      	ldr	r3, [pc, #124]	; (8002e14 <HAL_InitTick+0xa0>)
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <HAL_InitTick+0xa0>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	61d3      	str	r3, [r2, #28]
 8002da0:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <HAL_InitTick+0xa0>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002dac:	f107 0210 	add.w	r2, r7, #16
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 ff66 	bl	8003c88 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002dbc:	f000 ff3c 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <HAL_InitTick+0xa4>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	0c9b      	lsrs	r3, r3, #18
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_InitTick+0xa8>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <HAL_InitTick+0xac>)
 8002dd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_InitTick+0xa8>)
 8002ddc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002de0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <HAL_InitTick+0xa8>)
 8002de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_InitTick+0xa8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_InitTick+0xa8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002df4:	4809      	ldr	r0, [pc, #36]	; (8002e1c <HAL_InitTick+0xa8>)
 8002df6:	f000 ff95 	bl	8003d24 <HAL_TIM_Base_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002e00:	4806      	ldr	r0, [pc, #24]	; (8002e1c <HAL_InitTick+0xa8>)
 8002e02:	f000 ffdf 	bl	8003dc4 <HAL_TIM_Base_Start_IT>
 8002e06:	4603      	mov	r3, r0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3730      	adds	r7, #48	; 0x30
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000
 8002e18:	431bde83 	.word	0x431bde83
 8002e1c:	20002418 	.word	0x20002418
 8002e20:	40000800 	.word	0x40000800

08002e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <NMI_Handler+0x4>

08002e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e2e:	e7fe      	b.n	8002e2e <HardFault_Handler+0x4>

08002e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e34:	e7fe      	b.n	8002e34 <MemManage_Handler+0x4>

08002e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3a:	e7fe      	b.n	8002e3a <BusFault_Handler+0x4>

08002e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <UsageFault_Handler+0x4>

08002e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
	...

08002e50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM4_IRQHandler+0x10>)
 8002e56:	f001 f807 	bl	8003e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20002418 	.word	0x20002418

08002e64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e6c:	f000 faec 	bl	8003448 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002e80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002e82:	e003      	b.n	8002e8c <LoopCopyDataInit>

08002e84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002e86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002e88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002e8a:	3104      	adds	r1, #4

08002e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002e8c:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002e90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002e92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002e94:	d3f6      	bcc.n	8002e84 <CopyDataInit>
  ldr r2, =_sbss
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e98:	e002      	b.n	8002ea0 <LoopFillZerobss>

08002e9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e9c:	f842 3b04 	str.w	r3, [r2], #4

08002ea0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ea0:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ea2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ea4:	d3f9      	bcc.n	8002e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ea6:	f7ff ffe5 	bl	8002e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f004 f9cf 	bl	800724c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002eae:	f7fe fd45 	bl	800193c <main>
  bx lr
 8002eb2:	4770      	bx	lr
  ldr r3, =_sidata
 8002eb4:	08007504 	.word	0x08007504
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002ebc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8002ec0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002ec4:	200024a4 	.word	0x200024a4

08002ec8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC1_2_IRQHandler>
	...

08002ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_Init+0x28>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x28>)
 8002ed6:	f043 0310 	orr.w	r3, r3, #16
 8002eda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 f8f3 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7ff ff46 	bl	8002d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7ff fea4 	bl	8002c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40022000 	.word	0x40022000

08002ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_IncTick+0x1c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_IncTick+0x20>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a03      	ldr	r2, [pc, #12]	; (8002f18 <HAL_IncTick+0x20>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	20000008 	.word	0x20000008
 8002f18:	20002460 	.word	0x20002460

08002f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <HAL_GetTick+0x10>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	20002460 	.word	0x20002460

08002f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f38:	f7ff fff0 	bl	8002f1c <HAL_GetTick>
 8002f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d005      	beq.n	8002f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_Delay+0x40>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4413      	add	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f56:	bf00      	nop
 8002f58:	f7ff ffe0 	bl	8002f1c <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d8f7      	bhi.n	8002f58 <HAL_Delay+0x28>
  {
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000008 	.word	0x20000008

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4906      	ldr	r1, [pc, #24]	; (800300c <__NVIC_EnableIRQ+0x34>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	; 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	; 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff4f 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff64 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ffb2 	bl	8003064 <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff81 	bl	8003010 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff57 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003134:	b480      	push	{r7}
 8003136:	b08b      	sub	sp, #44	; 0x2c
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003146:	e127      	b.n	8003398 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003148:	2201      	movs	r2, #1
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	429a      	cmp	r2, r3
 8003162:	f040 8116 	bne.w	8003392 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b12      	cmp	r3, #18
 800316c:	d034      	beq.n	80031d8 <HAL_GPIO_Init+0xa4>
 800316e:	2b12      	cmp	r3, #18
 8003170:	d80d      	bhi.n	800318e <HAL_GPIO_Init+0x5a>
 8003172:	2b02      	cmp	r3, #2
 8003174:	d02b      	beq.n	80031ce <HAL_GPIO_Init+0x9a>
 8003176:	2b02      	cmp	r3, #2
 8003178:	d804      	bhi.n	8003184 <HAL_GPIO_Init+0x50>
 800317a:	2b00      	cmp	r3, #0
 800317c:	d031      	beq.n	80031e2 <HAL_GPIO_Init+0xae>
 800317e:	2b01      	cmp	r3, #1
 8003180:	d01c      	beq.n	80031bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003182:	e048      	b.n	8003216 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003184:	2b03      	cmp	r3, #3
 8003186:	d043      	beq.n	8003210 <HAL_GPIO_Init+0xdc>
 8003188:	2b11      	cmp	r3, #17
 800318a:	d01b      	beq.n	80031c4 <HAL_GPIO_Init+0x90>
          break;
 800318c:	e043      	b.n	8003216 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800318e:	4a89      	ldr	r2, [pc, #548]	; (80033b4 <HAL_GPIO_Init+0x280>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d026      	beq.n	80031e2 <HAL_GPIO_Init+0xae>
 8003194:	4a87      	ldr	r2, [pc, #540]	; (80033b4 <HAL_GPIO_Init+0x280>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d806      	bhi.n	80031a8 <HAL_GPIO_Init+0x74>
 800319a:	4a87      	ldr	r2, [pc, #540]	; (80033b8 <HAL_GPIO_Init+0x284>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d020      	beq.n	80031e2 <HAL_GPIO_Init+0xae>
 80031a0:	4a86      	ldr	r2, [pc, #536]	; (80033bc <HAL_GPIO_Init+0x288>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01d      	beq.n	80031e2 <HAL_GPIO_Init+0xae>
          break;
 80031a6:	e036      	b.n	8003216 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80031a8:	4a85      	ldr	r2, [pc, #532]	; (80033c0 <HAL_GPIO_Init+0x28c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d019      	beq.n	80031e2 <HAL_GPIO_Init+0xae>
 80031ae:	4a85      	ldr	r2, [pc, #532]	; (80033c4 <HAL_GPIO_Init+0x290>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d016      	beq.n	80031e2 <HAL_GPIO_Init+0xae>
 80031b4:	4a84      	ldr	r2, [pc, #528]	; (80033c8 <HAL_GPIO_Init+0x294>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_GPIO_Init+0xae>
          break;
 80031ba:	e02c      	b.n	8003216 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	623b      	str	r3, [r7, #32]
          break;
 80031c2:	e028      	b.n	8003216 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	3304      	adds	r3, #4
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e023      	b.n	8003216 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	3308      	adds	r3, #8
 80031d4:	623b      	str	r3, [r7, #32]
          break;
 80031d6:	e01e      	b.n	8003216 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	330c      	adds	r3, #12
 80031de:	623b      	str	r3, [r7, #32]
          break;
 80031e0:	e019      	b.n	8003216 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031ea:	2304      	movs	r3, #4
 80031ec:	623b      	str	r3, [r7, #32]
          break;
 80031ee:	e012      	b.n	8003216 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031f8:	2308      	movs	r3, #8
 80031fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	611a      	str	r2, [r3, #16]
          break;
 8003202:	e008      	b.n	8003216 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003204:	2308      	movs	r3, #8
 8003206:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	615a      	str	r2, [r3, #20]
          break;
 800320e:	e002      	b.n	8003216 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003210:	2300      	movs	r3, #0
 8003212:	623b      	str	r3, [r7, #32]
          break;
 8003214:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2bff      	cmp	r3, #255	; 0xff
 800321a:	d801      	bhi.n	8003220 <HAL_GPIO_Init+0xec>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	e001      	b.n	8003224 <HAL_GPIO_Init+0xf0>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2bff      	cmp	r3, #255	; 0xff
 800322a:	d802      	bhi.n	8003232 <HAL_GPIO_Init+0xfe>
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	e002      	b.n	8003238 <HAL_GPIO_Init+0x104>
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	3b08      	subs	r3, #8
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	210f      	movs	r1, #15
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	401a      	ands	r2, r3
 800324a:	6a39      	ldr	r1, [r7, #32]
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	fa01 f303 	lsl.w	r3, r1, r3
 8003252:	431a      	orrs	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8096 	beq.w	8003392 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003266:	4b59      	ldr	r3, [pc, #356]	; (80033cc <HAL_GPIO_Init+0x298>)
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	4a58      	ldr	r2, [pc, #352]	; (80033cc <HAL_GPIO_Init+0x298>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6193      	str	r3, [r2, #24]
 8003272:	4b56      	ldr	r3, [pc, #344]	; (80033cc <HAL_GPIO_Init+0x298>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800327e:	4a54      	ldr	r2, [pc, #336]	; (80033d0 <HAL_GPIO_Init+0x29c>)
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	220f      	movs	r2, #15
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4013      	ands	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4b      	ldr	r2, [pc, #300]	; (80033d4 <HAL_GPIO_Init+0x2a0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_GPIO_Init+0x19e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4a      	ldr	r2, [pc, #296]	; (80033d8 <HAL_GPIO_Init+0x2a4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00d      	beq.n	80032ce <HAL_GPIO_Init+0x19a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a49      	ldr	r2, [pc, #292]	; (80033dc <HAL_GPIO_Init+0x2a8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <HAL_GPIO_Init+0x196>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a48      	ldr	r2, [pc, #288]	; (80033e0 <HAL_GPIO_Init+0x2ac>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d101      	bne.n	80032c6 <HAL_GPIO_Init+0x192>
 80032c2:	2303      	movs	r3, #3
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x1a0>
 80032c6:	2304      	movs	r3, #4
 80032c8:	e004      	b.n	80032d4 <HAL_GPIO_Init+0x1a0>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e002      	b.n	80032d4 <HAL_GPIO_Init+0x1a0>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_GPIO_Init+0x1a0>
 80032d2:	2300      	movs	r3, #0
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	f002 0203 	and.w	r2, r2, #3
 80032da:	0092      	lsls	r2, r2, #2
 80032dc:	4093      	lsls	r3, r2
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032e4:	493a      	ldr	r1, [pc, #232]	; (80033d0 <HAL_GPIO_Init+0x29c>)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	089b      	lsrs	r3, r3, #2
 80032ea:	3302      	adds	r3, #2
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d006      	beq.n	800330c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4938      	ldr	r1, [pc, #224]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
 800330a:	e006      	b.n	800331a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	43db      	mvns	r3, r3
 8003314:	4933      	ldr	r1, [pc, #204]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003316:	4013      	ands	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d006      	beq.n	8003334 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	492e      	ldr	r1, [pc, #184]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
 8003332:	e006      	b.n	8003342 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	43db      	mvns	r3, r3
 800333c:	4929      	ldr	r1, [pc, #164]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 800333e:	4013      	ands	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800334e:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	4924      	ldr	r1, [pc, #144]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
 800335a:	e006      	b.n	800336a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800335c:	4b21      	ldr	r3, [pc, #132]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	43db      	mvns	r3, r3
 8003364:	491f      	ldr	r1, [pc, #124]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003366:	4013      	ands	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	491a      	ldr	r1, [pc, #104]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	4313      	orrs	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
 8003382:	e006      	b.n	8003392 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	43db      	mvns	r3, r3
 800338c:	4915      	ldr	r1, [pc, #84]	; (80033e4 <HAL_GPIO_Init+0x2b0>)
 800338e:	4013      	ands	r3, r2
 8003390:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	3301      	adds	r3, #1
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f47f aed0 	bne.w	8003148 <HAL_GPIO_Init+0x14>
  }
}
 80033a8:	bf00      	nop
 80033aa:	372c      	adds	r7, #44	; 0x2c
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	10210000 	.word	0x10210000
 80033b8:	10110000 	.word	0x10110000
 80033bc:	10120000 	.word	0x10120000
 80033c0:	10310000 	.word	0x10310000
 80033c4:	10320000 	.word	0x10320000
 80033c8:	10220000 	.word	0x10220000
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40010800 	.word	0x40010800
 80033d8:	40010c00 	.word	0x40010c00
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40011400 	.word	0x40011400
 80033e4:	40010400 	.word	0x40010400

080033e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	887b      	ldrh	r3, [r7, #2]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	e001      	b.n	800340a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	807b      	strh	r3, [r7, #2]
 8003422:	4613      	mov	r3, r2
 8003424:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003426:	787b      	ldrb	r3, [r7, #1]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342c:	887a      	ldrh	r2, [r7, #2]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003432:	e003      	b.n	800343c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	041a      	lsls	r2, r3, #16
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	611a      	str	r2, [r3, #16]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
	...

08003448 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	4013      	ands	r3, r2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d006      	beq.n	800346c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800345e:	4a05      	ldr	r2, [pc, #20]	; (8003474 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 f806 	bl	8003478 <HAL_GPIO_EXTI_Callback>
  }
}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40010400 	.word	0x40010400

08003478 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr

0800348c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e26c      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8087 	beq.w	80035ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ac:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d00c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034b8:	4b8f      	ldr	r3, [pc, #572]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 030c 	and.w	r3, r3, #12
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d112      	bne.n	80034ea <HAL_RCC_OscConfig+0x5e>
 80034c4:	4b8c      	ldr	r3, [pc, #560]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d0:	d10b      	bne.n	80034ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d2:	4b89      	ldr	r3, [pc, #548]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d06c      	beq.n	80035b8 <HAL_RCC_OscConfig+0x12c>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d168      	bne.n	80035b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e246      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f2:	d106      	bne.n	8003502 <HAL_RCC_OscConfig+0x76>
 80034f4:	4b80      	ldr	r3, [pc, #512]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a7f      	ldr	r2, [pc, #508]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	e02e      	b.n	8003560 <HAL_RCC_OscConfig+0xd4>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x98>
 800350a:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7a      	ldr	r2, [pc, #488]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b78      	ldr	r3, [pc, #480]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a77      	ldr	r2, [pc, #476]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800351c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e01d      	b.n	8003560 <HAL_RCC_OscConfig+0xd4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0xbc>
 800352e:	4b72      	ldr	r3, [pc, #456]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a71      	ldr	r2, [pc, #452]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e00b      	b.n	8003560 <HAL_RCC_OscConfig+0xd4>
 8003548:	4b6b      	ldr	r3, [pc, #428]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6a      	ldr	r2, [pc, #424]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a67      	ldr	r2, [pc, #412]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800355a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7ff fcd8 	bl	8002f1c <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003570:	f7ff fcd4 	bl	8002f1c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1fa      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b5d      	ldr	r3, [pc, #372]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0xe4>
 800358e:	e014      	b.n	80035ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7ff fcc4 	bl	8002f1c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7ff fcc0 	bl	8002f1c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1e6      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	4b53      	ldr	r3, [pc, #332]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x10c>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035c6:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035d2:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d11c      	bne.n	8003618 <HAL_RCC_OscConfig+0x18c>
 80035de:	4b46      	ldr	r3, [pc, #280]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_RCC_OscConfig+0x176>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e1ba      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003602:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4939      	ldr	r1, [pc, #228]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	e03a      	b.n	800368e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_RCC_OscConfig+0x270>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7ff fc79 	bl	8002f1c <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362e:	f7ff fc75 	bl	8002f1c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e19b      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4927      	ldr	r1, [pc, #156]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e015      	b.n	800368e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003662:	4b26      	ldr	r3, [pc, #152]	; (80036fc <HAL_RCC_OscConfig+0x270>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7ff fc58 	bl	8002f1c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003670:	f7ff fc54 	bl	8002f1c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e17a      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d03a      	beq.n	8003710 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d019      	beq.n	80036d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a8:	f7ff fc38 	bl	8002f1c <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b0:	f7ff fc34 	bl	8002f1c <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e15a      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	4b0d      	ldr	r3, [pc, #52]	; (80036f8 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f000 fb0a 	bl	8003ce8 <RCC_Delay>
 80036d4:	e01c      	b.n	8003710 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036dc:	f7ff fc1e 	bl	8002f1c <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e2:	e00f      	b.n	8003704 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e4:	f7ff fc1a 	bl	8002f1c <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d908      	bls.n	8003704 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e140      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	42420000 	.word	0x42420000
 8003700:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b9e      	ldr	r3, [pc, #632]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e9      	bne.n	80036e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a6 	beq.w	800386a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003722:	4b97      	ldr	r3, [pc, #604]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10d      	bne.n	800374a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	4b94      	ldr	r3, [pc, #592]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a93      	ldr	r2, [pc, #588]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003738:	61d3      	str	r3, [r2, #28]
 800373a:	4b91      	ldr	r3, [pc, #580]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003746:	2301      	movs	r3, #1
 8003748:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374a:	4b8e      	ldr	r3, [pc, #568]	; (8003984 <HAL_RCC_OscConfig+0x4f8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d118      	bne.n	8003788 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003756:	4b8b      	ldr	r3, [pc, #556]	; (8003984 <HAL_RCC_OscConfig+0x4f8>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a8a      	ldr	r2, [pc, #552]	; (8003984 <HAL_RCC_OscConfig+0x4f8>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003762:	f7ff fbdb 	bl	8002f1c <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376a:	f7ff fbd7 	bl	8002f1c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b64      	cmp	r3, #100	; 0x64
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0fd      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	4b81      	ldr	r3, [pc, #516]	; (8003984 <HAL_RCC_OscConfig+0x4f8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d106      	bne.n	800379e <HAL_RCC_OscConfig+0x312>
 8003790:	4b7b      	ldr	r3, [pc, #492]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	4a7a      	ldr	r2, [pc, #488]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6213      	str	r3, [r2, #32]
 800379c:	e02d      	b.n	80037fa <HAL_RCC_OscConfig+0x36e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCC_OscConfig+0x334>
 80037a6:	4b76      	ldr	r3, [pc, #472]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	4a75      	ldr	r2, [pc, #468]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037ac:	f023 0301 	bic.w	r3, r3, #1
 80037b0:	6213      	str	r3, [r2, #32]
 80037b2:	4b73      	ldr	r3, [pc, #460]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4a72      	ldr	r2, [pc, #456]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037b8:	f023 0304 	bic.w	r3, r3, #4
 80037bc:	6213      	str	r3, [r2, #32]
 80037be:	e01c      	b.n	80037fa <HAL_RCC_OscConfig+0x36e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b05      	cmp	r3, #5
 80037c6:	d10c      	bne.n	80037e2 <HAL_RCC_OscConfig+0x356>
 80037c8:	4b6d      	ldr	r3, [pc, #436]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4a6c      	ldr	r2, [pc, #432]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037ce:	f043 0304 	orr.w	r3, r3, #4
 80037d2:	6213      	str	r3, [r2, #32]
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4a69      	ldr	r2, [pc, #420]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6213      	str	r3, [r2, #32]
 80037e0:	e00b      	b.n	80037fa <HAL_RCC_OscConfig+0x36e>
 80037e2:	4b67      	ldr	r3, [pc, #412]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4a66      	ldr	r2, [pc, #408]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037e8:	f023 0301 	bic.w	r3, r3, #1
 80037ec:	6213      	str	r3, [r2, #32]
 80037ee:	4b64      	ldr	r3, [pc, #400]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	4a63      	ldr	r2, [pc, #396]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d015      	beq.n	800382e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7ff fb8b 	bl	8002f1c <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380a:	f7ff fb87 	bl	8002f1c <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	f241 3288 	movw	r2, #5000	; 0x1388
 8003818:	4293      	cmp	r3, r2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0ab      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	4b57      	ldr	r3, [pc, #348]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ee      	beq.n	800380a <HAL_RCC_OscConfig+0x37e>
 800382c:	e014      	b.n	8003858 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7ff fb75 	bl	8002f1c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7ff fb71 	bl	8002f1c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e095      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	4b4c      	ldr	r3, [pc, #304]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ee      	bne.n	8003836 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003858:	7dfb      	ldrb	r3, [r7, #23]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d105      	bne.n	800386a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385e:	4b48      	ldr	r3, [pc, #288]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	4a47      	ldr	r2, [pc, #284]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003868:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8081 	beq.w	8003976 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003874:	4b42      	ldr	r3, [pc, #264]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	d061      	beq.n	8003944 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d146      	bne.n	8003916 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <HAL_RCC_OscConfig+0x4fc>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388e:	f7ff fb45 	bl	8002f1c <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003896:	f7ff fb41 	bl	8002f1c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e067      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038a8:	4b35      	ldr	r3, [pc, #212]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d108      	bne.n	80038d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038be:	4b30      	ldr	r3, [pc, #192]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	492d      	ldr	r1, [pc, #180]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d0:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a19      	ldr	r1, [r3, #32]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	430b      	orrs	r3, r1
 80038e2:	4927      	ldr	r1, [pc, #156]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e8:	4b27      	ldr	r3, [pc, #156]	; (8003988 <HAL_RCC_OscConfig+0x4fc>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ee:	f7ff fb15 	bl	8002f1c <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f6:	f7ff fb11 	bl	8002f1c <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e037      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x46a>
 8003914:	e02f      	b.n	8003976 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <HAL_RCC_OscConfig+0x4fc>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7ff fafe 	bl	8002f1c <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7ff fafa 	bl	8002f1c <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e020      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x498>
 8003942:	e018      	b.n	8003976 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e013      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_OscConfig+0x4f4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	429a      	cmp	r2, r3
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e000      	b.n	8003978 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	40007000 	.word	0x40007000
 8003988:	42420060 	.word	0x42420060

0800398c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e0d0      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039a0:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d910      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b67      	ldr	r3, [pc, #412]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f023 0207 	bic.w	r2, r3, #7
 80039b6:	4965      	ldr	r1, [pc, #404]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b63      	ldr	r3, [pc, #396]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0b8      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d020      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e8:	4b59      	ldr	r3, [pc, #356]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	4a58      	ldr	r2, [pc, #352]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d005      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a00:	4b53      	ldr	r3, [pc, #332]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a52      	ldr	r2, [pc, #328]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b50      	ldr	r3, [pc, #320]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	494d      	ldr	r1, [pc, #308]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d040      	beq.n	8003aac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d115      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e07f      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d107      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4b41      	ldr	r3, [pc, #260]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e073      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06b      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4936      	ldr	r1, [pc, #216]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a7c:	f7ff fa4e 	bl	8002f1c <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7ff fa4a 	bl	8002f1c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e053      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d210      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 0207 	bic.w	r2, r3, #7
 8003ac2:	4922      	ldr	r1, [pc, #136]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b20      	ldr	r3, [pc, #128]	; (8003b4c <HAL_RCC_ClockConfig+0x1c0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e032      	b.n	8003b42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4916      	ldr	r1, [pc, #88]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490e      	ldr	r1, [pc, #56]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b1a:	f000 f821 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2c:	5cd3      	ldrb	r3, [r2, r3]
 8003b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003b32:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <HAL_RCC_ClockConfig+0x1cc>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_ClockConfig+0x1d0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff f91a 	bl	8002d74 <HAL_InitTick>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40022000 	.word	0x40022000
 8003b50:	40021000 	.word	0x40021000
 8003b54:	080074e4 	.word	0x080074e4
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	20000004 	.word	0x20000004

08003b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b60:	b490      	push	{r4, r7}
 8003b62:	b08a      	sub	sp, #40	; 0x28
 8003b64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b68:	1d3c      	adds	r4, r7, #4
 8003b6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b8a:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d002      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x40>
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x46>
 8003b9e:	e02d      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ba2:	623b      	str	r3, [r7, #32]
      break;
 8003ba4:	e02d      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	0c9b      	lsrs	r3, r3, #18
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	0c5b      	lsrs	r3, r3, #17
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bde:	fb02 f203 	mul.w	r2, r2, r3
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	e004      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	4a0c      	ldr	r2, [pc, #48]	; (8003c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	623b      	str	r3, [r7, #32]
      break;
 8003bfa:	e002      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bfe:	623b      	str	r3, [r7, #32]
      break;
 8003c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c02:	6a3b      	ldr	r3, [r7, #32]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3728      	adds	r7, #40	; 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc90      	pop	{r4, r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	08007368 	.word	0x08007368
 8003c14:	08007378 	.word	0x08007378
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	007a1200 	.word	0x007a1200
 8003c20:	003d0900 	.word	0x003d0900

08003c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b02      	ldr	r3, [pc, #8]	; (8003c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	20000000 	.word	0x20000000

08003c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c3c:	f7ff fff2 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c40:	4601      	mov	r1, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4a03      	ldr	r2, [pc, #12]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4e:	5cd3      	ldrb	r3, [r2, r3]
 8003c50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	080074f4 	.word	0x080074f4

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c64:	f7ff ffde 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c68:	4601      	mov	r1, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0adb      	lsrs	r3, r3, #11
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4a03      	ldr	r2, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c76:	5cd3      	ldrb	r3, [r2, r3]
 8003c78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	080074f4 	.word	0x080074f4

08003c88 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	220f      	movs	r2, #15
 8003c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_RCC_GetClockConfig+0x58>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0203 	and.w	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_RCC_GetClockConfig+0x58>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_GetClockConfig+0x58>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <HAL_RCC_GetClockConfig+0x58>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0207 	and.w	r2, r3, #7
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40022000 	.word	0x40022000

08003ce8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <RCC_Delay+0x34>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <RCC_Delay+0x38>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	0a5b      	lsrs	r3, r3, #9
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d04:	bf00      	nop
  }
  while (Delay --);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1e5a      	subs	r2, r3, #1
 8003d0a:	60fa      	str	r2, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1f9      	bne.n	8003d04 <RCC_Delay+0x1c>
}
 8003d10:	bf00      	nop
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000000 	.word	0x20000000
 8003d20:	10624dd3 	.word	0x10624dd3

08003d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e041      	b.n	8003dba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe ffaa 	bl	8002ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 fa64 	bl	8004230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d001      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e03a      	b.n	8003e52 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_TIM_Base_Start_IT+0x98>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d00e      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x58>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e06:	d009      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x58>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x58>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a13      	ldr	r2, [pc, #76]	; (8003e64 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d111      	bne.n	8003e40 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d010      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f042 0201 	orr.w	r2, r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3e:	e007      	b.n	8003e50 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800

08003e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d122      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0202 	mvn.w	r2, #2
 8003e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f9a4 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f997 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f9a6 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d122      	bne.n	8003f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0204 	mvn.w	r2, #4
 8003ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f97a 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f96d 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f97c 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d122      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d11b      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0208 	mvn.w	r2, #8
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2204      	movs	r2, #4
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f950 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f943 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f952 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d11b      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0210 	mvn.w	r2, #16
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2208      	movs	r2, #8
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f926 	bl	80041f8 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f919 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f928 	bl	800420a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0201 	mvn.w	r2, #1
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fe fe0e 	bl	8002c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa6b 	bl	80044ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d10e      	bne.n	8004044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004030:	2b40      	cmp	r3, #64	; 0x40
 8004032:	d107      	bne.n	8004044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800403c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f8ec 	bl	800421c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b20      	cmp	r3, #32
 8004050:	d10e      	bne.n	8004070 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b20      	cmp	r3, #32
 800405e:	d107      	bne.n	8004070 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0220 	mvn.w	r2, #32
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa36 	bl	80044dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIM_ConfigClockSource+0x18>
 800408c:	2302      	movs	r3, #2
 800408e:	e0a6      	b.n	80041de <HAL_TIM_ConfigClockSource+0x166>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d067      	beq.n	8004198 <HAL_TIM_ConfigClockSource+0x120>
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d80b      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x6c>
 80040cc:	2b10      	cmp	r3, #16
 80040ce:	d073      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0x140>
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d802      	bhi.n	80040da <HAL_TIM_ConfigClockSource+0x62>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d06f      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80040d8:	e078      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d06c      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0x140>
 80040de:	2b30      	cmp	r3, #48	; 0x30
 80040e0:	d06a      	beq.n	80041b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040e2:	e073      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040e4:	2b70      	cmp	r3, #112	; 0x70
 80040e6:	d00d      	beq.n	8004104 <HAL_TIM_ConfigClockSource+0x8c>
 80040e8:	2b70      	cmp	r3, #112	; 0x70
 80040ea:	d804      	bhi.n	80040f6 <HAL_TIM_ConfigClockSource+0x7e>
 80040ec:	2b50      	cmp	r3, #80	; 0x50
 80040ee:	d033      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0xe0>
 80040f0:	2b60      	cmp	r3, #96	; 0x60
 80040f2:	d041      	beq.n	8004178 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040f4:	e06a      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fa:	d066      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x152>
 80040fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004100:	d017      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004102:	e063      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6899      	ldr	r1, [r3, #8]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f000 f965 	bl	80043e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004126:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	609a      	str	r2, [r3, #8]
      break;
 8004130:	e04c      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f000 f94e 	bl	80043e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004154:	609a      	str	r2, [r3, #8]
      break;
 8004156:	e039      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6859      	ldr	r1, [r3, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	461a      	mov	r2, r3
 8004166:	f000 f8c5 	bl	80042f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2150      	movs	r1, #80	; 0x50
 8004170:	4618      	mov	r0, r3
 8004172:	f000 f91c 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8004176:	e029      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6859      	ldr	r1, [r3, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	461a      	mov	r2, r3
 8004186:	f000 f8e3 	bl	8004350 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2160      	movs	r1, #96	; 0x60
 8004190:	4618      	mov	r0, r3
 8004192:	f000 f90c 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 8004196:	e019      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	6859      	ldr	r1, [r3, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	461a      	mov	r2, r3
 80041a6:	f000 f8a5 	bl	80042f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2140      	movs	r1, #64	; 0x40
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 f8fc 	bl	80043ae <TIM_ITRx_SetConfig>
      break;
 80041b6:	e009      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f000 f8f3 	bl	80043ae <TIM_ITRx_SetConfig>
        break;
 80041c8:	e000      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
	...

08004230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <TIM_Base_SetConfig+0xbc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x30>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <TIM_Base_SetConfig+0xc0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1c      	ldr	r2, [pc, #112]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <TIM_Base_SetConfig+0xbc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x62>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <TIM_Base_SetConfig+0xc0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a07      	ldr	r2, [pc, #28]	; (80042e8 <TIM_Base_SetConfig+0xb8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	615a      	str	r2, [r3, #20]
}
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800

080042f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f023 030a 	bic.w	r3, r3, #10
 8004330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4313      	orrs	r3, r2
 8004338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f023 0210 	bic.w	r2, r3, #16
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	031b      	lsls	r3, r3, #12
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800438c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	621a      	str	r2, [r3, #32]
}
 80043a4:	bf00      	nop
 80043a6:	371c      	adds	r7, #28
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr

080043ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f043 0307 	orr.w	r3, r3, #7
 80043d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b087      	sub	sp, #28
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	021a      	lsls	r2, r3, #8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	431a      	orrs	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	609a      	str	r2, [r3, #8]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004434:	2302      	movs	r3, #2
 8004436:	e046      	b.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2202      	movs	r2, #2
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d009      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a10      	ldr	r2, [pc, #64]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10c      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40000400 	.word	0x40000400
 80044d8:	40000800 	.word	0x40000800

080044dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e03f      	b.n	8004592 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe fbd8 	bl	8002cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2224      	movs	r2, #36	; 0x24
 8004530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f829 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	431a      	orrs	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045d6:	f023 030c 	bic.w	r3, r3, #12
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a2c      	ldr	r2, [pc, #176]	; (80046b0 <UART_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d103      	bne.n	800460c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7ff fb2c 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	e002      	b.n	8004612 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7ff fb14 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 8004610:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4613      	mov	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4413      	add	r3, r2
 800461a:	009a      	lsls	r2, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <UART_SetConfig+0x118>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	0119      	lsls	r1, r3, #4
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4613      	mov	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	009a      	lsls	r2, r3, #2
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	fbb2 f2f3 	udiv	r2, r2, r3
 8004648:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <UART_SetConfig+0x118>)
 800464a:	fba3 0302 	umull	r0, r3, r3, r2
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2064      	movs	r0, #100	; 0x64
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	3332      	adds	r3, #50	; 0x32
 800465c:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <UART_SetConfig+0x118>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004668:	4419      	add	r1, r3
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009a      	lsls	r2, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <UART_SetConfig+0x118>)
 8004682:	fba3 0302 	umull	r0, r3, r3, r2
 8004686:	095b      	lsrs	r3, r3, #5
 8004688:	2064      	movs	r0, #100	; 0x64
 800468a:	fb00 f303 	mul.w	r3, r0, r3
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	3332      	adds	r3, #50	; 0x32
 8004694:	4a07      	ldr	r2, [pc, #28]	; (80046b4 <UART_SetConfig+0x118>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	f003 020f 	and.w	r2, r3, #15
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	440a      	add	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046a8:	bf00      	nop
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40013800 	.word	0x40013800
 80046b4:	51eb851f 	.word	0x51eb851f

080046b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046be:	f3ef 8305 	mrs	r3, IPSR
 80046c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80046c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10f      	bne.n	80046ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ca:	f3ef 8310 	mrs	r3, PRIMASK
 80046ce:	607b      	str	r3, [r7, #4]
  return(result);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <osKernelInitialize+0x32>
 80046d6:	4b10      	ldr	r3, [pc, #64]	; (8004718 <osKernelInitialize+0x60>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d109      	bne.n	80046f2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046de:	f3ef 8311 	mrs	r3, BASEPRI
 80046e2:	603b      	str	r3, [r7, #0]
  return(result);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80046ea:	f06f 0305 	mvn.w	r3, #5
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e00c      	b.n	800470c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046f2:	4b09      	ldr	r3, [pc, #36]	; (8004718 <osKernelInitialize+0x60>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d105      	bne.n	8004706 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80046fa:	4b07      	ldr	r3, [pc, #28]	; (8004718 <osKernelInitialize+0x60>)
 80046fc:	2201      	movs	r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e002      	b.n	800470c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800470c:	68fb      	ldr	r3, [r7, #12]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	bc80      	pop	{r7}
 8004716:	4770      	bx	lr
 8004718:	2000002c 	.word	0x2000002c

0800471c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004722:	f3ef 8305 	mrs	r3, IPSR
 8004726:	60bb      	str	r3, [r7, #8]
  return(result);
 8004728:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472e:	f3ef 8310 	mrs	r3, PRIMASK
 8004732:	607b      	str	r3, [r7, #4]
  return(result);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <osKernelStart+0x32>
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <osKernelStart+0x64>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d109      	bne.n	8004756 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004742:	f3ef 8311 	mrs	r3, BASEPRI
 8004746:	603b      	str	r3, [r7, #0]
  return(result);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <osKernelStart+0x3a>
    stat = osErrorISR;
 800474e:	f06f 0305 	mvn.w	r3, #5
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e00e      	b.n	8004774 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <osKernelStart+0x64>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <osKernelStart+0x64>)
 8004760:	2202      	movs	r2, #2
 8004762:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004764:	f001 f99a 	bl	8005a9c <vTaskStartScheduler>
      stat = osOK;
 8004768:	2300      	movs	r3, #0
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e002      	b.n	8004774 <osKernelStart+0x58>
    } else {
      stat = osError;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004774:	68fb      	ldr	r3, [r7, #12]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	2000002c 	.word	0x2000002c

08004784 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b092      	sub	sp, #72	; 0x48
 8004788:	af04      	add	r7, sp, #16
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004794:	f3ef 8305 	mrs	r3, IPSR
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 8094 	bne.w	80048ca <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a2:	f3ef 8310 	mrs	r3, PRIMASK
 80047a6:	623b      	str	r3, [r7, #32]
  return(result);
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 808d 	bne.w	80048ca <osThreadNew+0x146>
 80047b0:	4b48      	ldr	r3, [pc, #288]	; (80048d4 <osThreadNew+0x150>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d106      	bne.n	80047c6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047b8:	f3ef 8311 	mrs	r3, BASEPRI
 80047bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f040 8082 	bne.w	80048ca <osThreadNew+0x146>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d07e      	beq.n	80048ca <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80047d0:	2318      	movs	r3, #24
 80047d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80047d4:	2300      	movs	r3, #0
 80047d6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80047d8:	f107 031b 	add.w	r3, r7, #27
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d045      	beq.n	8004876 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <osThreadNew+0x74>
        name = attr->name;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <osThreadNew+0x9a>
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	2b38      	cmp	r3, #56	; 0x38
 8004810:	d805      	bhi.n	800481e <osThreadNew+0x9a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <osThreadNew+0x9e>
        return (NULL);
 800481e:	2300      	movs	r3, #0
 8004820:	e054      	b.n	80048cc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00e      	beq.n	8004858 <osThreadNew+0xd4>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b5b      	cmp	r3, #91	; 0x5b
 8004840:	d90a      	bls.n	8004858 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <osThreadNew+0xd4>
        mem = 1;
 8004852:	2301      	movs	r3, #1
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
 8004856:	e010      	b.n	800487a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10c      	bne.n	800487a <osThreadNew+0xf6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d108      	bne.n	800487a <osThreadNew+0xf6>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <osThreadNew+0xf6>
          mem = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
 8004874:	e001      	b.n	800487a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	2b01      	cmp	r3, #1
 800487e:	d110      	bne.n	80048a2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004888:	9202      	str	r2, [sp, #8]
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004894:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f000 ff38 	bl	800570c <xTaskCreateStatic>
 800489c:	4603      	mov	r3, r0
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e013      	b.n	80048ca <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80048a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d110      	bne.n	80048ca <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	f107 0314 	add.w	r3, r7, #20
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 ff7f 	bl	80057be <xTaskCreate>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d001      	beq.n	80048ca <osThreadNew+0x146>
          hTask = NULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048ca:	697b      	ldr	r3, [r7, #20]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3738      	adds	r7, #56	; 0x38
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	2000002c 	.word	0x2000002c

080048d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048e0:	f3ef 8305 	mrs	r3, IPSR
 80048e4:	613b      	str	r3, [r7, #16]
  return(result);
 80048e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10f      	bne.n	800490c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ec:	f3ef 8310 	mrs	r3, PRIMASK
 80048f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <osDelay+0x34>
 80048f8:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <osDelay+0x58>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d109      	bne.n	8004914 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004900:	f3ef 8311 	mrs	r3, BASEPRI
 8004904:	60bb      	str	r3, [r7, #8]
  return(result);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <osDelay+0x3c>
    stat = osErrorISR;
 800490c:	f06f 0305 	mvn.w	r3, #5
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e007      	b.n	8004924 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d002      	beq.n	8004924 <osDelay+0x4c>
      vTaskDelay(ticks);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f001 f888 	bl	8005a34 <vTaskDelay>
    }
  }

  return (stat);
 8004924:	697b      	ldr	r3, [r7, #20]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	2000002c 	.word	0x2000002c

08004934 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	; 0x30
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004944:	f3ef 8305 	mrs	r3, IPSR
 8004948:	61bb      	str	r3, [r7, #24]
  return(result);
 800494a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800494c:	2b00      	cmp	r3, #0
 800494e:	d170      	bne.n	8004a32 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	617b      	str	r3, [r7, #20]
  return(result);
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d16a      	bne.n	8004a32 <osMessageQueueNew+0xfe>
 800495c:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <osMessageQueueNew+0x108>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d105      	bne.n	8004970 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004964:	f3ef 8311 	mrs	r3, BASEPRI
 8004968:	613b      	str	r3, [r7, #16]
  return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d160      	bne.n	8004a32 <osMessageQueueNew+0xfe>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d05d      	beq.n	8004a32 <osMessageQueueNew+0xfe>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d05a      	beq.n	8004a32 <osMessageQueueNew+0xfe>
    mem = -1;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d029      	beq.n	80049dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d012      	beq.n	80049b6 <osMessageQueueNew+0x82>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b4f      	cmp	r3, #79	; 0x4f
 8004996:	d90e      	bls.n	80049b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68b9      	ldr	r1, [r7, #8]
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <osMessageQueueNew+0x82>
        mem = 1;
 80049b0:	2301      	movs	r3, #1
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	e014      	b.n	80049e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d110      	bne.n	80049e0 <osMessageQueueNew+0xac>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d108      	bne.n	80049e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <osMessageQueueNew+0xac>
          mem = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
 80049da:	e001      	b.n	80049e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10c      	bne.n	8004a00 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6899      	ldr	r1, [r3, #8]
 80049ee:	2300      	movs	r3, #0
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	460b      	mov	r3, r1
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f9e0 	bl	8004dbc <xQueueGenericCreateStatic>
 80049fc:	6278      	str	r0, [r7, #36]	; 0x24
 80049fe:	e008      	b.n	8004a12 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d105      	bne.n	8004a12 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004a06:	2200      	movs	r2, #0
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fa48 	bl	8004ea0 <xQueueGenericCreate>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00c      	beq.n	8004a32 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <osMessageQueueNew+0xf2>
        name = attr->name;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	e001      	b.n	8004a2a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004a2a:	69f9      	ldr	r1, [r7, #28]
 8004a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a2e:	f000 fe11 	bl	8005654 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	2000002c 	.word	0x2000002c

08004a40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	; 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a58:	f3ef 8305 	mrs	r3, IPSR
 8004a5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a5e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10f      	bne.n	8004a84 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a64:	f3ef 8310 	mrs	r3, PRIMASK
 8004a68:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <osMessageQueuePut+0x44>
 8004a70:	4b2b      	ldr	r3, [pc, #172]	; (8004b20 <osMessageQueuePut+0xe0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d12e      	bne.n	8004ad6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a78:	f3ef 8311 	mrs	r3, BASEPRI
 8004a7c:	617b      	str	r3, [r7, #20]
  return(result);
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d028      	beq.n	8004ad6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d005      	beq.n	8004a96 <osMessageQueuePut+0x56>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <osMessageQueuePut+0x56>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004a96:	f06f 0303 	mvn.w	r3, #3
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a9c:	e039      	b.n	8004b12 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004aa2:	f107 0210 	add.w	r2, r7, #16
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6a38      	ldr	r0, [r7, #32]
 8004aac:	f000 fb52 	bl	8005154 <xQueueGenericSendFromISR>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d003      	beq.n	8004abe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004ab6:	f06f 0302 	mvn.w	r3, #2
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004abc:	e029      	b.n	8004b12 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d026      	beq.n	8004b12 <osMessageQueuePut+0xd2>
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <osMessageQueuePut+0xe4>)
 8004ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ad4:	e01d      	b.n	8004b12 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <osMessageQueuePut+0xa2>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004ae2:	f06f 0303 	mvn.w	r3, #3
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae8:	e014      	b.n	8004b14 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004aea:	2300      	movs	r3, #0
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	6a38      	ldr	r0, [r7, #32]
 8004af2:	f000 fa35 	bl	8004f60 <xQueueGenericSend>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d00b      	beq.n	8004b14 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004b02:	f06f 0301 	mvn.w	r3, #1
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
 8004b08:	e004      	b.n	8004b14 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004b0a:	f06f 0302 	mvn.w	r3, #2
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	e000      	b.n	8004b14 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b12:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3728      	adds	r7, #40	; 0x28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	2000002c 	.word	0x2000002c
 8004b24:	e000ed04 	.word	0xe000ed04

08004b28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a06      	ldr	r2, [pc, #24]	; (8004b50 <vApplicationGetIdleTaskMemory+0x28>)
 8004b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	20000030 	.word	0x20000030
 8004b54:	2000008c 	.word	0x2000008c

08004b58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a07      	ldr	r2, [pc, #28]	; (8004b84 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4a06      	ldr	r2, [pc, #24]	; (8004b88 <vApplicationGetTimerTaskMemory+0x30>)
 8004b6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b76:	601a      	str	r2, [r3, #0]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000028c 	.word	0x2000028c
 8004b88:	200002e8 	.word	0x200002e8

08004b8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f103 0208 	add.w	r2, r3, #8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f103 0208 	add.w	r2, r3, #8
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f103 0208 	add.w	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004be2:	b480      	push	{r7}
 8004be4:	b085      	sub	sp, #20
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	601a      	str	r2, [r3, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3e:	d103      	bne.n	8004c48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e00c      	b.n	8004c62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e002      	b.n	8004c56 <vListInsert+0x2e>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d2f6      	bcs.n	8004c50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	601a      	str	r2, [r3, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6892      	ldr	r2, [r2, #8]
 8004cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6852      	ldr	r2, [r2, #4]
 8004cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d103      	bne.n	8004ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	1e5a      	subs	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr
	...

08004cec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	e7fe      	b.n	8004d12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004d14:	f001 ffd0 	bl	8006cb8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	68f9      	ldr	r1, [r7, #12]
 8004d22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	441a      	add	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	3b01      	subs	r3, #1
 8004d46:	68f9      	ldr	r1, [r7, #12]
 8004d48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d4a:	fb01 f303 	mul.w	r3, r1, r3
 8004d4e:	441a      	add	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	22ff      	movs	r2, #255	; 0xff
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	22ff      	movs	r2, #255	; 0xff
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d114      	bne.n	8004d94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01a      	beq.n	8004da8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3310      	adds	r3, #16
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 f914 	bl	8005fa4 <xTaskRemoveFromEventList>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d012      	beq.n	8004da8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d82:	4b0d      	ldr	r3, [pc, #52]	; (8004db8 <xQueueGenericReset+0xcc>)
 8004d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	e009      	b.n	8004da8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3310      	adds	r3, #16
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fef7 	bl	8004b8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3324      	adds	r3, #36	; 0x24
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fef2 	bl	8004b8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004da8:	f001 ffb4 	bl	8006d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dac:	2301      	movs	r3, #1
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b08e      	sub	sp, #56	; 0x38
 8004dc0:	af02      	add	r7, sp, #8
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <xQueueGenericCreateStatic+0x28>
 8004dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd4:	f383 8811 	msr	BASEPRI, r3
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de2:	e7fe      	b.n	8004de2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d109      	bne.n	8004dfe <xQueueGenericCreateStatic+0x42>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	e7fe      	b.n	8004dfc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <xQueueGenericCreateStatic+0x4e>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <xQueueGenericCreateStatic+0x52>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e000      	b.n	8004e10 <xQueueGenericCreateStatic+0x54>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d109      	bne.n	8004e28 <xQueueGenericCreateStatic+0x6c>
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	623b      	str	r3, [r7, #32]
 8004e26:	e7fe      	b.n	8004e26 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d102      	bne.n	8004e34 <xQueueGenericCreateStatic+0x78>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <xQueueGenericCreateStatic+0x7c>
 8004e34:	2301      	movs	r3, #1
 8004e36:	e000      	b.n	8004e3a <xQueueGenericCreateStatic+0x7e>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <xQueueGenericCreateStatic+0x96>
 8004e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e7fe      	b.n	8004e50 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e52:	2350      	movs	r3, #80	; 0x50
 8004e54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b50      	cmp	r3, #80	; 0x50
 8004e5a:	d009      	beq.n	8004e70 <xQueueGenericCreateStatic+0xb4>
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	e7fe      	b.n	8004e6e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f000 f842 	bl	8004f1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3730      	adds	r7, #48	; 0x30
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <xQueueGenericCreate+0x28>
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	e7fe      	b.n	8004ec6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e004      	b.n	8004ede <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	fb02 f303 	mul.w	r3, r2, r3
 8004edc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	3350      	adds	r3, #80	; 0x50
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 ffde 	bl	8006ea4 <pvPortMalloc>
 8004ee8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00f      	beq.n	8004f10 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	3350      	adds	r3, #80	; 0x50
 8004ef4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004efe:	79fa      	ldrb	r2, [r7, #7]
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	4613      	mov	r3, r2
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f805 	bl	8004f1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004f10:	69bb      	ldr	r3, [r7, #24]
	}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
 8004f26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e002      	b.n	8004f3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f48:	2101      	movs	r1, #1
 8004f4a:	69b8      	ldr	r0, [r7, #24]
 8004f4c:	f7ff fece 	bl	8004cec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f58:	bf00      	nop
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08e      	sub	sp, #56	; 0x38
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d109      	bne.n	8004f90 <xQueueGenericSend+0x30>
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f8e:	e7fe      	b.n	8004f8e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <xQueueGenericSend+0x3e>
 8004f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <xQueueGenericSend+0x42>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <xQueueGenericSend+0x44>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <xQueueGenericSend+0x5c>
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fba:	e7fe      	b.n	8004fba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d103      	bne.n	8004fca <xQueueGenericSend+0x6a>
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <xQueueGenericSend+0x6e>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <xQueueGenericSend+0x70>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d109      	bne.n	8004fe8 <xQueueGenericSend+0x88>
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	623b      	str	r3, [r7, #32]
 8004fe6:	e7fe      	b.n	8004fe6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fe8:	f001 f996 	bl	8006318 <xTaskGetSchedulerState>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <xQueueGenericSend+0x98>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <xQueueGenericSend+0x9c>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <xQueueGenericSend+0x9e>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <xQueueGenericSend+0xb6>
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	e7fe      	b.n	8005014 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005016:	f001 fe4f 	bl	8006cb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005022:	429a      	cmp	r2, r3
 8005024:	d302      	bcc.n	800502c <xQueueGenericSend+0xcc>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d129      	bne.n	8005080 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005032:	f000 f9ff 	bl	8005434 <prvCopyDataToQueue>
 8005036:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	2b00      	cmp	r3, #0
 800503e:	d010      	beq.n	8005062 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	3324      	adds	r3, #36	; 0x24
 8005044:	4618      	mov	r0, r3
 8005046:	f000 ffad 	bl	8005fa4 <xTaskRemoveFromEventList>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d013      	beq.n	8005078 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005050:	4b3f      	ldr	r3, [pc, #252]	; (8005150 <xQueueGenericSend+0x1f0>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	e00a      	b.n	8005078 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005068:	4b39      	ldr	r3, [pc, #228]	; (8005150 <xQueueGenericSend+0x1f0>)
 800506a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005078:	f001 fe4c 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 800507c:	2301      	movs	r3, #1
 800507e:	e063      	b.n	8005148 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005086:	f001 fe45 	bl	8006d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800508a:	2300      	movs	r3, #0
 800508c:	e05c      	b.n	8005148 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800508e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005094:	f107 0314 	add.w	r3, r7, #20
 8005098:	4618      	mov	r0, r3
 800509a:	f000 ffe5 	bl	8006068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800509e:	2301      	movs	r3, #1
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050a2:	f001 fe37 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050a6:	f000 fd5d 	bl	8005b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050aa:	f001 fe05 	bl	8006cb8 <vPortEnterCritical>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050b4:	b25b      	sxtb	r3, r3
 80050b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ba:	d103      	bne.n	80050c4 <xQueueGenericSend+0x164>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ca:	b25b      	sxtb	r3, r3
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d103      	bne.n	80050da <xQueueGenericSend+0x17a>
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050da:	f001 fe1b 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050de:	1d3a      	adds	r2, r7, #4
 80050e0:	f107 0314 	add.w	r3, r7, #20
 80050e4:	4611      	mov	r1, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 ffd4 	bl	8006094 <xTaskCheckForTimeOut>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d124      	bne.n	800513c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050f4:	f000 fa96 	bl	8005624 <prvIsQueueFull>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d018      	beq.n	8005130 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	3310      	adds	r3, #16
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fefe 	bl	8005f08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800510c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800510e:	f000 fa21 	bl	8005554 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005112:	f000 fd35 	bl	8005b80 <xTaskResumeAll>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	f47f af7c 	bne.w	8005016 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800511e:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <xQueueGenericSend+0x1f0>)
 8005120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	e772      	b.n	8005016 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005130:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005132:	f000 fa0f 	bl	8005554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005136:	f000 fd23 	bl	8005b80 <xTaskResumeAll>
 800513a:	e76c      	b.n	8005016 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800513c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800513e:	f000 fa09 	bl	8005554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005142:	f000 fd1d 	bl	8005b80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005146:	2300      	movs	r3, #0
		}
	}
}
 8005148:	4618      	mov	r0, r3
 800514a:	3738      	adds	r7, #56	; 0x38
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08e      	sub	sp, #56	; 0x38
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	2b00      	cmp	r3, #0
 800516a:	d109      	bne.n	8005180 <xQueueGenericSendFromISR+0x2c>
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
 800517e:	e7fe      	b.n	800517e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d103      	bne.n	800518e <xQueueGenericSendFromISR+0x3a>
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <xQueueGenericSendFromISR+0x3e>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <xQueueGenericSendFromISR+0x40>
 8005192:	2300      	movs	r3, #0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <xQueueGenericSendFromISR+0x58>
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	e7fe      	b.n	80051aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d103      	bne.n	80051ba <xQueueGenericSendFromISR+0x66>
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <xQueueGenericSendFromISR+0x6a>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <xQueueGenericSendFromISR+0x6c>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <xQueueGenericSendFromISR+0x84>
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	e7fe      	b.n	80051d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051d8:	f001 fe28 	bl	8006e2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051dc:	f3ef 8211 	mrs	r2, BASEPRI
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	61ba      	str	r2, [r7, #24]
 80051f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	429a      	cmp	r2, r3
 8005202:	d302      	bcc.n	800520a <xQueueGenericSendFromISR+0xb6>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d12c      	bne.n	8005264 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005210:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521a:	f000 f90b 	bl	8005434 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800521e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005226:	d112      	bne.n	800524e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d016      	beq.n	800525e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	3324      	adds	r3, #36	; 0x24
 8005234:	4618      	mov	r0, r3
 8005236:	f000 feb5 	bl	8005fa4 <xTaskRemoveFromEventList>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00b      	beq.n	800525e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	e007      	b.n	800525e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800524e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005252:	3301      	adds	r3, #1
 8005254:	b2db      	uxtb	r3, r3
 8005256:	b25a      	sxtb	r2, r3
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800525e:	2301      	movs	r3, #1
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005262:	e001      	b.n	8005268 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005264:	2300      	movs	r3, #0
 8005266:	637b      	str	r3, [r7, #52]	; 0x34
 8005268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005274:	4618      	mov	r0, r3
 8005276:	3738      	adds	r7, #56	; 0x38
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08c      	sub	sp, #48	; 0x30
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005288:	2300      	movs	r3, #0
 800528a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <xQueueReceive+0x2e>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	623b      	str	r3, [r7, #32]
 80052a8:	e7fe      	b.n	80052a8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d103      	bne.n	80052b8 <xQueueReceive+0x3c>
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <xQueueReceive+0x40>
 80052b8:	2301      	movs	r3, #1
 80052ba:	e000      	b.n	80052be <xQueueReceive+0x42>
 80052bc:	2300      	movs	r3, #0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d109      	bne.n	80052d6 <xQueueReceive+0x5a>
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e7fe      	b.n	80052d4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052d6:	f001 f81f 	bl	8006318 <xTaskGetSchedulerState>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d102      	bne.n	80052e6 <xQueueReceive+0x6a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <xQueueReceive+0x6e>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xQueueReceive+0x70>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <xQueueReceive+0x88>
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e7fe      	b.n	8005302 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005304:	f001 fcd8 	bl	8006cb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01f      	beq.n	8005354 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005318:	f000 f8f6 	bl	8005508 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	1e5a      	subs	r2, r3, #1
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00f      	beq.n	800534c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	3310      	adds	r3, #16
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fe37 	bl	8005fa4 <xTaskRemoveFromEventList>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800533c:	4b3c      	ldr	r3, [pc, #240]	; (8005430 <xQueueReceive+0x1b4>)
 800533e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800534c:	f001 fce2 	bl	8006d14 <vPortExitCritical>
				return pdPASS;
 8005350:	2301      	movs	r3, #1
 8005352:	e069      	b.n	8005428 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800535a:	f001 fcdb 	bl	8006d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800535e:	2300      	movs	r3, #0
 8005360:	e062      	b.n	8005428 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005368:	f107 0310 	add.w	r3, r7, #16
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fe7b 	bl	8006068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005376:	f001 fccd 	bl	8006d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800537a:	f000 fbf3 	bl	8005b64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800537e:	f001 fc9b 	bl	8006cb8 <vPortEnterCritical>
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005388:	b25b      	sxtb	r3, r3
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538e:	d103      	bne.n	8005398 <xQueueReceive+0x11c>
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800539e:	b25b      	sxtb	r3, r3
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d103      	bne.n	80053ae <xQueueReceive+0x132>
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ae:	f001 fcb1 	bl	8006d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053b2:	1d3a      	adds	r2, r7, #4
 80053b4:	f107 0310 	add.w	r3, r7, #16
 80053b8:	4611      	mov	r1, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fe6a 	bl	8006094 <xTaskCheckForTimeOut>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d123      	bne.n	800540e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c8:	f000 f916 	bl	80055f8 <prvIsQueueEmpty>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d017      	beq.n	8005402 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	3324      	adds	r3, #36	; 0x24
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	4611      	mov	r1, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fd94 	bl	8005f08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e2:	f000 f8b7 	bl	8005554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053e6:	f000 fbcb 	bl	8005b80 <xTaskResumeAll>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d189      	bne.n	8005304 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <xQueueReceive+0x1b4>)
 80053f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	e780      	b.n	8005304 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005404:	f000 f8a6 	bl	8005554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005408:	f000 fbba 	bl	8005b80 <xTaskResumeAll>
 800540c:	e77a      	b.n	8005304 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800540e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005410:	f000 f8a0 	bl	8005554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005414:	f000 fbb4 	bl	8005b80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800541a:	f000 f8ed 	bl	80055f8 <prvIsQueueEmpty>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	f43f af6f 	beq.w	8005304 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005426:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005428:	4618      	mov	r0, r3
 800542a:	3730      	adds	r7, #48	; 0x30
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10d      	bne.n	800546e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d14d      	bne.n	80054f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 ff78 	bl	8006354 <xTaskPriorityDisinherit>
 8005464:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	605a      	str	r2, [r3, #4]
 800546c:	e043      	b.n	80054f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d119      	bne.n	80054a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6898      	ldr	r0, [r3, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	461a      	mov	r2, r3
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	f001 ff08 	bl	8007294 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	441a      	add	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d32b      	bcc.n	80054f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	609a      	str	r2, [r3, #8]
 80054a6:	e026      	b.n	80054f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68d8      	ldr	r0, [r3, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	461a      	mov	r2, r3
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	f001 feee 	bl	8007294 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	425b      	negs	r3, r3
 80054c2:	441a      	add	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d207      	bcs.n	80054e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	425b      	negs	r3, r3
 80054de:	441a      	add	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d105      	bne.n	80054f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80054fe:	697b      	ldr	r3, [r7, #20]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d018      	beq.n	800554c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	441a      	add	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	429a      	cmp	r2, r3
 8005532:	d303      	bcc.n	800553c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68d9      	ldr	r1, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	461a      	mov	r2, r3
 8005546:	6838      	ldr	r0, [r7, #0]
 8005548:	f001 fea4 	bl	8007294 <memcpy>
	}
}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800555c:	f001 fbac 	bl	8006cb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005568:	e011      	b.n	800558e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	2b00      	cmp	r3, #0
 8005570:	d012      	beq.n	8005598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3324      	adds	r3, #36	; 0x24
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fd14 	bl	8005fa4 <xTaskRemoveFromEventList>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005582:	f000 fde7 	bl	8006154 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	3b01      	subs	r3, #1
 800558a:	b2db      	uxtb	r3, r3
 800558c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800558e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	dce9      	bgt.n	800556a <prvUnlockQueue+0x16>
 8005596:	e000      	b.n	800559a <prvUnlockQueue+0x46>
					break;
 8005598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	22ff      	movs	r2, #255	; 0xff
 800559e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055a2:	f001 fbb7 	bl	8006d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055a6:	f001 fb87 	bl	8006cb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055b2:	e011      	b.n	80055d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d012      	beq.n	80055e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3310      	adds	r3, #16
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fcef 	bl	8005fa4 <xTaskRemoveFromEventList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80055cc:	f000 fdc2 	bl	8006154 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dce9      	bgt.n	80055b4 <prvUnlockQueue+0x60>
 80055e0:	e000      	b.n	80055e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80055e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	22ff      	movs	r2, #255	; 0xff
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80055ec:	f001 fb92 	bl	8006d14 <vPortExitCritical>
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005600:	f001 fb5a 	bl	8006cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	2b00      	cmp	r3, #0
 800560a:	d102      	bne.n	8005612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800560c:	2301      	movs	r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e001      	b.n	8005616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005616:	f001 fb7d 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 800561a:	68fb      	ldr	r3, [r7, #12]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800562c:	f001 fb44 	bl	8006cb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005638:	429a      	cmp	r2, r3
 800563a:	d102      	bne.n	8005642 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800563c:	2301      	movs	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e001      	b.n	8005646 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005646:	f001 fb65 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 800564a:	68fb      	ldr	r3, [r7, #12]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e014      	b.n	800568e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005664:	4a0e      	ldr	r2, [pc, #56]	; (80056a0 <vQueueAddToRegistry+0x4c>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10b      	bne.n	8005688 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005670:	490b      	ldr	r1, [pc, #44]	; (80056a0 <vQueueAddToRegistry+0x4c>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800567a:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <vQueueAddToRegistry+0x4c>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4413      	add	r3, r2
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005686:	e005      	b.n	8005694 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2b07      	cmp	r3, #7
 8005692:	d9e7      	bls.n	8005664 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20002464 	.word	0x20002464

080056a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056b4:	f001 fb00 	bl	8006cb8 <vPortEnterCritical>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056be:	b25b      	sxtb	r3, r3
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d103      	bne.n	80056ce <vQueueWaitForMessageRestricted+0x2a>
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056d4:	b25b      	sxtb	r3, r3
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d103      	bne.n	80056e4 <vQueueWaitForMessageRestricted+0x40>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e4:	f001 fb16 	bl	8006d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d106      	bne.n	80056fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	3324      	adds	r3, #36	; 0x24
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fc29 	bl	8005f50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056fe:	6978      	ldr	r0, [r7, #20]
 8005700:	f7ff ff28 	bl	8005554 <prvUnlockQueue>
	}
 8005704:	bf00      	nop
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800570c:	b580      	push	{r7, lr}
 800570e:	b08e      	sub	sp, #56	; 0x38
 8005710:	af04      	add	r7, sp, #16
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <xTaskCreateStatic+0x28>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	623b      	str	r3, [r7, #32]
 8005732:	e7fe      	b.n	8005732 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <xTaskCreateStatic+0x42>
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	e7fe      	b.n	800574c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800574e:	235c      	movs	r3, #92	; 0x5c
 8005750:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b5c      	cmp	r3, #92	; 0x5c
 8005756:	d009      	beq.n	800576c <xTaskCreateStatic+0x60>
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	e7fe      	b.n	800576a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01e      	beq.n	80057b0 <xTaskCreateStatic+0xa4>
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01b      	beq.n	80057b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005780:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	2202      	movs	r2, #2
 8005786:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800578a:	2300      	movs	r3, #0
 800578c:	9303      	str	r3, [sp, #12]
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	9302      	str	r3, [sp, #8]
 8005792:	f107 0314 	add.w	r3, r7, #20
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f850 	bl	8005848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057aa:	f000 f8d3 	bl	8005954 <prvAddNewTaskToReadyList>
 80057ae:	e001      	b.n	80057b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057b4:	697b      	ldr	r3, [r7, #20]
	}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3728      	adds	r7, #40	; 0x28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b08c      	sub	sp, #48	; 0x30
 80057c2:	af04      	add	r7, sp, #16
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 fb66 	bl	8006ea4 <pvPortMalloc>
 80057d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00e      	beq.n	80057fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80057e0:	205c      	movs	r0, #92	; 0x5c
 80057e2:	f001 fb5f 	bl	8006ea4 <pvPortMalloc>
 80057e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
 80057f4:	e005      	b.n	8005802 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057f6:	6978      	ldr	r0, [r7, #20]
 80057f8:	f001 fc16 	bl	8007028 <vPortFree>
 80057fc:	e001      	b.n	8005802 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d017      	beq.n	8005838 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005810:	88fa      	ldrh	r2, [r7, #6]
 8005812:	2300      	movs	r3, #0
 8005814:	9303      	str	r3, [sp, #12]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	9302      	str	r3, [sp, #8]
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	9301      	str	r3, [sp, #4]
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f80e 	bl	8005848 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800582c:	69f8      	ldr	r0, [r7, #28]
 800582e:	f000 f891 	bl	8005954 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
 8005836:	e002      	b.n	800583e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800583e:	69bb      	ldr	r3, [r7, #24]
	}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
 8005854:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	461a      	mov	r2, r3
 8005860:	21a5      	movs	r1, #165	; 0xa5
 8005862:	f001 fd22 	bl	80072aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005870:	3b01      	subs	r3, #1
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	f023 0307 	bic.w	r3, r3, #7
 800587e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <prvInitialiseNewTask+0x56>
 800588a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e7fe      	b.n	800589c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	e012      	b.n	80058ca <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	7819      	ldrb	r1, [r3, #0]
 80058ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	3334      	adds	r3, #52	; 0x34
 80058b4:	460a      	mov	r2, r1
 80058b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d006      	beq.n	80058d2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	3301      	adds	r3, #1
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b0f      	cmp	r3, #15
 80058ce:	d9e9      	bls.n	80058a4 <prvInitialiseNewTask+0x5c>
 80058d0:	e000      	b.n	80058d4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80058d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	2b37      	cmp	r3, #55	; 0x37
 80058e0:	d901      	bls.n	80058e6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058e2:	2337      	movs	r3, #55	; 0x37
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	2200      	movs	r2, #0
 80058f6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff f964 	bl	8004bca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	3318      	adds	r3, #24
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff f95f 	bl	8004bca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005910:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005920:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	2200      	movs	r2, #0
 8005926:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	68f9      	ldr	r1, [r7, #12]
 8005934:	69b8      	ldr	r0, [r7, #24]
 8005936:	f001 f8d7 	bl	8006ae8 <pxPortInitialiseStack>
 800593a:	4602      	mov	r2, r0
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800594a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800594c:	bf00      	nop
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800595c:	f001 f9ac 	bl	8006cb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005960:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <prvAddNewTaskToReadyList+0xc4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3301      	adds	r3, #1
 8005966:	4a2c      	ldr	r2, [pc, #176]	; (8005a18 <prvAddNewTaskToReadyList+0xc4>)
 8005968:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800596a:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <prvAddNewTaskToReadyList+0xc8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005972:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <prvAddNewTaskToReadyList+0xc8>)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005978:	4b27      	ldr	r3, [pc, #156]	; (8005a18 <prvAddNewTaskToReadyList+0xc4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d110      	bne.n	80059a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005980:	f000 fc0c 	bl	800619c <prvInitialiseTaskLists>
 8005984:	e00d      	b.n	80059a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005986:	4b26      	ldr	r3, [pc, #152]	; (8005a20 <prvAddNewTaskToReadyList+0xcc>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800598e:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <prvAddNewTaskToReadyList+0xc8>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005998:	429a      	cmp	r2, r3
 800599a:	d802      	bhi.n	80059a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800599c:	4a1f      	ldr	r2, [pc, #124]	; (8005a1c <prvAddNewTaskToReadyList+0xc8>)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <prvAddNewTaskToReadyList+0xd0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3301      	adds	r3, #1
 80059a8:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <prvAddNewTaskToReadyList+0xd0>)
 80059aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059ac:	4b1d      	ldr	r3, [pc, #116]	; (8005a24 <prvAddNewTaskToReadyList+0xd0>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <prvAddNewTaskToReadyList+0xd4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d903      	bls.n	80059c8 <prvAddNewTaskToReadyList+0x74>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <prvAddNewTaskToReadyList+0xd4>)
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <prvAddNewTaskToReadyList+0xd8>)
 80059d6:	441a      	add	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f7ff f8ff 	bl	8004be2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059e4:	f001 f996 	bl	8006d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059e8:	4b0d      	ldr	r3, [pc, #52]	; (8005a20 <prvAddNewTaskToReadyList+0xcc>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059f0:	4b0a      	ldr	r3, [pc, #40]	; (8005a1c <prvAddNewTaskToReadyList+0xc8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d207      	bcs.n	8005a0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <prvAddNewTaskToReadyList+0xdc>)
 8005a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000bbc 	.word	0x20000bbc
 8005a1c:	200006e8 	.word	0x200006e8
 8005a20:	20000bc8 	.word	0x20000bc8
 8005a24:	20000bd8 	.word	0x20000bd8
 8005a28:	20000bc4 	.word	0x20000bc4
 8005a2c:	200006ec 	.word	0x200006ec
 8005a30:	e000ed04 	.word	0xe000ed04

08005a34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a46:	4b13      	ldr	r3, [pc, #76]	; (8005a94 <vTaskDelay+0x60>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <vTaskDelay+0x2e>
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	60bb      	str	r3, [r7, #8]
 8005a60:	e7fe      	b.n	8005a60 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005a62:	f000 f87f 	bl	8005b64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a66:	2100      	movs	r1, #0
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fcdf 	bl	800642c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a6e:	f000 f887 	bl	8005b80 <xTaskResumeAll>
 8005a72:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d107      	bne.n	8005a8a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005a7a:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <vTaskDelay+0x64>)
 8005a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a8a:	bf00      	nop
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	20000be4 	.word	0x20000be4
 8005a98:	e000ed04 	.word	0xe000ed04

08005a9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08a      	sub	sp, #40	; 0x28
 8005aa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aaa:	463a      	mov	r2, r7
 8005aac:	1d39      	adds	r1, r7, #4
 8005aae:	f107 0308 	add.w	r3, r7, #8
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff f838 	bl	8004b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	9202      	str	r2, [sp, #8]
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	460a      	mov	r2, r1
 8005aca:	4920      	ldr	r1, [pc, #128]	; (8005b4c <vTaskStartScheduler+0xb0>)
 8005acc:	4820      	ldr	r0, [pc, #128]	; (8005b50 <vTaskStartScheduler+0xb4>)
 8005ace:	f7ff fe1d 	bl	800570c <xTaskCreateStatic>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4b1f      	ldr	r3, [pc, #124]	; (8005b54 <vTaskStartScheduler+0xb8>)
 8005ad6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ad8:	4b1e      	ldr	r3, [pc, #120]	; (8005b54 <vTaskStartScheduler+0xb8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	e001      	b.n	8005aea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d102      	bne.n	8005af6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005af0:	f000 fcf0 	bl	80064d4 <xTimerCreateTimerTask>
 8005af4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d115      	bne.n	8005b28 <vTaskStartScheduler+0x8c>
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <vTaskStartScheduler+0xbc>)
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b16:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <vTaskStartScheduler+0xc0>)
 8005b18:	2201      	movs	r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005b1c:	4b10      	ldr	r3, [pc, #64]	; (8005b60 <vTaskStartScheduler+0xc4>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b22:	f001 f859 	bl	8006bd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b26:	e00d      	b.n	8005b44 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d109      	bne.n	8005b44 <vTaskStartScheduler+0xa8>
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
 8005b42:	e7fe      	b.n	8005b42 <vTaskStartScheduler+0xa6>
}
 8005b44:	bf00      	nop
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	0800737c 	.word	0x0800737c
 8005b50:	0800616d 	.word	0x0800616d
 8005b54:	20000be0 	.word	0x20000be0
 8005b58:	20000bdc 	.word	0x20000bdc
 8005b5c:	20000bc8 	.word	0x20000bc8
 8005b60:	20000bc0 	.word	0x20000bc0

08005b64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005b68:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <vTaskSuspendAll+0x18>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	4a03      	ldr	r2, [pc, #12]	; (8005b7c <vTaskSuspendAll+0x18>)
 8005b70:	6013      	str	r3, [r2, #0]
}
 8005b72:	bf00      	nop
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000be4 	.word	0x20000be4

08005b80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b8e:	4b41      	ldr	r3, [pc, #260]	; (8005c94 <xTaskResumeAll+0x114>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <xTaskResumeAll+0x2a>
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	e7fe      	b.n	8005ba8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005baa:	f001 f885 	bl	8006cb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bae:	4b39      	ldr	r3, [pc, #228]	; (8005c94 <xTaskResumeAll+0x114>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	4a37      	ldr	r2, [pc, #220]	; (8005c94 <xTaskResumeAll+0x114>)
 8005bb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb8:	4b36      	ldr	r3, [pc, #216]	; (8005c94 <xTaskResumeAll+0x114>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d162      	bne.n	8005c86 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <xTaskResumeAll+0x118>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d05e      	beq.n	8005c86 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bc8:	e02f      	b.n	8005c2a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005bca:	4b34      	ldr	r3, [pc, #208]	; (8005c9c <xTaskResumeAll+0x11c>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff f85e 	bl	8004c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7ff f859 	bl	8004c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	4b2d      	ldr	r3, [pc, #180]	; (8005ca0 <xTaskResumeAll+0x120>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d903      	bls.n	8005bfa <xTaskResumeAll+0x7a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	4a2a      	ldr	r2, [pc, #168]	; (8005ca0 <xTaskResumeAll+0x120>)
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4a27      	ldr	r2, [pc, #156]	; (8005ca4 <xTaskResumeAll+0x124>)
 8005c08:	441a      	add	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4610      	mov	r0, r2
 8005c12:	f7fe ffe6 	bl	8004be2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1a:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <xTaskResumeAll+0x128>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d302      	bcc.n	8005c2a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005c24:	4b21      	ldr	r3, [pc, #132]	; (8005cac <xTaskResumeAll+0x12c>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c2a:	4b1c      	ldr	r3, [pc, #112]	; (8005c9c <xTaskResumeAll+0x11c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1cb      	bne.n	8005bca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c38:	f000 fb4a 	bl	80062d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c3c:	4b1c      	ldr	r3, [pc, #112]	; (8005cb0 <xTaskResumeAll+0x130>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d010      	beq.n	8005c6a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c48:	f000 f844 	bl	8005cd4 <xTaskIncrementTick>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c52:	4b16      	ldr	r3, [pc, #88]	; (8005cac <xTaskResumeAll+0x12c>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f1      	bne.n	8005c48 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <xTaskResumeAll+0x130>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c6a:	4b10      	ldr	r3, [pc, #64]	; (8005cac <xTaskResumeAll+0x12c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c72:	2301      	movs	r3, #1
 8005c74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c76:	4b0f      	ldr	r3, [pc, #60]	; (8005cb4 <xTaskResumeAll+0x134>)
 8005c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c86:	f001 f845 	bl	8006d14 <vPortExitCritical>

	return xAlreadyYielded;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20000be4 	.word	0x20000be4
 8005c98:	20000bbc 	.word	0x20000bbc
 8005c9c:	20000b7c 	.word	0x20000b7c
 8005ca0:	20000bc4 	.word	0x20000bc4
 8005ca4:	200006ec 	.word	0x200006ec
 8005ca8:	200006e8 	.word	0x200006e8
 8005cac:	20000bd0 	.word	0x20000bd0
 8005cb0:	20000bcc 	.word	0x20000bcc
 8005cb4:	e000ed04 	.word	0xe000ed04

08005cb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005cbe:	4b04      	ldr	r3, [pc, #16]	; (8005cd0 <xTaskGetTickCount+0x18>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005cc4:	687b      	ldr	r3, [r7, #4]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr
 8005cd0:	20000bc0 	.word	0x20000bc0

08005cd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cde:	4b51      	ldr	r3, [pc, #324]	; (8005e24 <xTaskIncrementTick+0x150>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 808d 	bne.w	8005e02 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ce8:	4b4f      	ldr	r3, [pc, #316]	; (8005e28 <xTaskIncrementTick+0x154>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cf0:	4a4d      	ldr	r2, [pc, #308]	; (8005e28 <xTaskIncrementTick+0x154>)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d11f      	bne.n	8005d3c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cfc:	4b4b      	ldr	r3, [pc, #300]	; (8005e2c <xTaskIncrementTick+0x158>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <xTaskIncrementTick+0x46>
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	e7fe      	b.n	8005d18 <xTaskIncrementTick+0x44>
 8005d1a:	4b44      	ldr	r3, [pc, #272]	; (8005e2c <xTaskIncrementTick+0x158>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	4b43      	ldr	r3, [pc, #268]	; (8005e30 <xTaskIncrementTick+0x15c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a41      	ldr	r2, [pc, #260]	; (8005e2c <xTaskIncrementTick+0x158>)
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	4a41      	ldr	r2, [pc, #260]	; (8005e30 <xTaskIncrementTick+0x15c>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <xTaskIncrementTick+0x160>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3301      	adds	r3, #1
 8005d34:	4a3f      	ldr	r2, [pc, #252]	; (8005e34 <xTaskIncrementTick+0x160>)
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	f000 faca 	bl	80062d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d3c:	4b3e      	ldr	r3, [pc, #248]	; (8005e38 <xTaskIncrementTick+0x164>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d34e      	bcc.n	8005de4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d46:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <xTaskIncrementTick+0x158>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <xTaskIncrementTick+0x80>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <xTaskIncrementTick+0x82>
 8005d54:	2300      	movs	r3, #0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d5a:	4b37      	ldr	r3, [pc, #220]	; (8005e38 <xTaskIncrementTick+0x164>)
 8005d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d60:	601a      	str	r2, [r3, #0]
					break;
 8005d62:	e03f      	b.n	8005de4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005d64:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <xTaskIncrementTick+0x158>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d203      	bcs.n	8005d84 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d7c:	4a2e      	ldr	r2, [pc, #184]	; (8005e38 <xTaskIncrementTick+0x164>)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6013      	str	r3, [r2, #0]
						break;
 8005d82:	e02f      	b.n	8005de4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe ff85 	bl	8004c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	3318      	adds	r3, #24
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fe ff7c 	bl	8004c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <xTaskIncrementTick+0x168>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d903      	bls.n	8005db4 <xTaskIncrementTick+0xe0>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	4a22      	ldr	r2, [pc, #136]	; (8005e3c <xTaskIncrementTick+0x168>)
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <xTaskIncrementTick+0x16c>)
 8005dc2:	441a      	add	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f7fe ff09 	bl	8004be2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	; (8005e44 <xTaskIncrementTick+0x170>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d3b3      	bcc.n	8005d46 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005dde:	2301      	movs	r3, #1
 8005de0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005de2:	e7b0      	b.n	8005d46 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005de4:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <xTaskIncrementTick+0x170>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dea:	4915      	ldr	r1, [pc, #84]	; (8005e40 <xTaskIncrementTick+0x16c>)
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d907      	bls.n	8005e0c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	e004      	b.n	8005e0c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e02:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <xTaskIncrementTick+0x174>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3301      	adds	r3, #1
 8005e08:	4a0f      	ldr	r2, [pc, #60]	; (8005e48 <xTaskIncrementTick+0x174>)
 8005e0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e0c:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <xTaskIncrementTick+0x178>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005e14:	2301      	movs	r3, #1
 8005e16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e18:	697b      	ldr	r3, [r7, #20]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20000be4 	.word	0x20000be4
 8005e28:	20000bc0 	.word	0x20000bc0
 8005e2c:	20000b74 	.word	0x20000b74
 8005e30:	20000b78 	.word	0x20000b78
 8005e34:	20000bd4 	.word	0x20000bd4
 8005e38:	20000bdc 	.word	0x20000bdc
 8005e3c:	20000bc4 	.word	0x20000bc4
 8005e40:	200006ec 	.word	0x200006ec
 8005e44:	200006e8 	.word	0x200006e8
 8005e48:	20000bcc 	.word	0x20000bcc
 8005e4c:	20000bd0 	.word	0x20000bd0

08005e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e56:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <vTaskSwitchContext+0xa4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e5e:	4b26      	ldr	r3, [pc, #152]	; (8005ef8 <vTaskSwitchContext+0xa8>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e64:	e040      	b.n	8005ee8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005e66:	4b24      	ldr	r3, [pc, #144]	; (8005ef8 <vTaskSwitchContext+0xa8>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005e6c:	4b23      	ldr	r3, [pc, #140]	; (8005efc <vTaskSwitchContext+0xac>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e00f      	b.n	8005e94 <vTaskSwitchContext+0x44>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <vTaskSwitchContext+0x3e>
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	607b      	str	r3, [r7, #4]
 8005e8c:	e7fe      	b.n	8005e8c <vTaskSwitchContext+0x3c>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	491a      	ldr	r1, [pc, #104]	; (8005f00 <vTaskSwitchContext+0xb0>)
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0e5      	beq.n	8005e74 <vTaskSwitchContext+0x24>
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <vTaskSwitchContext+0xb0>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	605a      	str	r2, [r3, #4]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	3308      	adds	r3, #8
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d104      	bne.n	8005ed8 <vTaskSwitchContext+0x88>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <vTaskSwitchContext+0xb4>)
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4a06      	ldr	r2, [pc, #24]	; (8005efc <vTaskSwitchContext+0xac>)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6013      	str	r3, [r2, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000be4 	.word	0x20000be4
 8005ef8:	20000bd0 	.word	0x20000bd0
 8005efc:	20000bc4 	.word	0x20000bc4
 8005f00:	200006ec 	.word	0x200006ec
 8005f04:	200006e8 	.word	0x200006e8

08005f08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d109      	bne.n	8005f2c <vTaskPlaceOnEventList+0x24>
 8005f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e7fe      	b.n	8005f2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f2c:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <vTaskPlaceOnEventList+0x44>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3318      	adds	r3, #24
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fe fe77 	bl	8004c28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	6838      	ldr	r0, [r7, #0]
 8005f3e:	f000 fa75 	bl	800642c <prvAddCurrentTaskToDelayedList>
}
 8005f42:	bf00      	nop
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200006e8 	.word	0x200006e8

08005f50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <vTaskPlaceOnEventListRestricted+0x26>
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	e7fe      	b.n	8005f74 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <vTaskPlaceOnEventListRestricted+0x50>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3318      	adds	r3, #24
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7fe fe2f 	bl	8004be2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	68b8      	ldr	r0, [r7, #8]
 8005f94:	f000 fa4a 	bl	800642c <prvAddCurrentTaskToDelayedList>
	}
 8005f98:	bf00      	nop
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	200006e8 	.word	0x200006e8

08005fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <xTaskRemoveFromEventList+0x2a>
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e7fe      	b.n	8005fcc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	3318      	adds	r3, #24
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fe60 	bl	8004c98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <xTaskRemoveFromEventList+0xac>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d11d      	bne.n	800601c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fe fe57 	bl	8004c98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fee:	4b19      	ldr	r3, [pc, #100]	; (8006054 <xTaskRemoveFromEventList+0xb0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d903      	bls.n	8005ffe <xTaskRemoveFromEventList+0x5a>
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a16      	ldr	r2, [pc, #88]	; (8006054 <xTaskRemoveFromEventList+0xb0>)
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4a13      	ldr	r2, [pc, #76]	; (8006058 <xTaskRemoveFromEventList+0xb4>)
 800600c:	441a      	add	r2, r3
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3304      	adds	r3, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f7fe fde4 	bl	8004be2 <vListInsertEnd>
 800601a:	e005      	b.n	8006028 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	3318      	adds	r3, #24
 8006020:	4619      	mov	r1, r3
 8006022:	480e      	ldr	r0, [pc, #56]	; (800605c <xTaskRemoveFromEventList+0xb8>)
 8006024:	f7fe fddd 	bl	8004be2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <xTaskRemoveFromEventList+0xbc>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006032:	429a      	cmp	r2, r3
 8006034:	d905      	bls.n	8006042 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006036:	2301      	movs	r3, #1
 8006038:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800603a:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <xTaskRemoveFromEventList+0xc0>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e001      	b.n	8006046 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006046:	697b      	ldr	r3, [r7, #20]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000be4 	.word	0x20000be4
 8006054:	20000bc4 	.word	0x20000bc4
 8006058:	200006ec 	.word	0x200006ec
 800605c:	20000b7c 	.word	0x20000b7c
 8006060:	200006e8 	.word	0x200006e8
 8006064:	20000bd0 	.word	0x20000bd0

08006068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006070:	4b06      	ldr	r3, [pc, #24]	; (800608c <vTaskInternalSetTimeOutState+0x24>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006078:	4b05      	ldr	r3, [pc, #20]	; (8006090 <vTaskInternalSetTimeOutState+0x28>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	605a      	str	r2, [r3, #4]
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000bd4 	.word	0x20000bd4
 8006090:	20000bc0 	.word	0x20000bc0

08006094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b088      	sub	sp, #32
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <xTaskCheckForTimeOut+0x24>
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	e7fe      	b.n	80060b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <xTaskCheckForTimeOut+0x3e>
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e7fe      	b.n	80060d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80060d2:	f000 fdf1 	bl	8006cb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060d6:	4b1d      	ldr	r3, [pc, #116]	; (800614c <xTaskCheckForTimeOut+0xb8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d102      	bne.n	80060f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	e023      	b.n	800613e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b15      	ldr	r3, [pc, #84]	; (8006150 <xTaskCheckForTimeOut+0xbc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d007      	beq.n	8006112 <xTaskCheckForTimeOut+0x7e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	429a      	cmp	r2, r3
 800610a:	d302      	bcc.n	8006112 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800610c:	2301      	movs	r3, #1
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	e015      	b.n	800613e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	429a      	cmp	r2, r3
 800611a:	d20b      	bcs.n	8006134 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	1ad2      	subs	r2, r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff ff9d 	bl	8006068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	e004      	b.n	800613e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800613a:	2301      	movs	r3, #1
 800613c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800613e:	f000 fde9 	bl	8006d14 <vPortExitCritical>

	return xReturn;
 8006142:	69fb      	ldr	r3, [r7, #28]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000bc0 	.word	0x20000bc0
 8006150:	20000bd4 	.word	0x20000bd4

08006154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006158:	4b03      	ldr	r3, [pc, #12]	; (8006168 <vTaskMissedYield+0x14>)
 800615a:	2201      	movs	r2, #1
 800615c:	601a      	str	r2, [r3, #0]
}
 800615e:	bf00      	nop
 8006160:	46bd      	mov	sp, r7
 8006162:	bc80      	pop	{r7}
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000bd0 	.word	0x20000bd0

0800616c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006174:	f000 f852 	bl	800621c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <prvIdleTask+0x28>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d9f9      	bls.n	8006174 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006180:	4b05      	ldr	r3, [pc, #20]	; (8006198 <prvIdleTask+0x2c>)
 8006182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006190:	e7f0      	b.n	8006174 <prvIdleTask+0x8>
 8006192:	bf00      	nop
 8006194:	200006ec 	.word	0x200006ec
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a2:	2300      	movs	r3, #0
 80061a4:	607b      	str	r3, [r7, #4]
 80061a6:	e00c      	b.n	80061c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4a12      	ldr	r2, [pc, #72]	; (80061fc <prvInitialiseTaskLists+0x60>)
 80061b4:	4413      	add	r3, r2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fce8 	bl	8004b8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3301      	adds	r3, #1
 80061c0:	607b      	str	r3, [r7, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b37      	cmp	r3, #55	; 0x37
 80061c6:	d9ef      	bls.n	80061a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061c8:	480d      	ldr	r0, [pc, #52]	; (8006200 <prvInitialiseTaskLists+0x64>)
 80061ca:	f7fe fcdf 	bl	8004b8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061ce:	480d      	ldr	r0, [pc, #52]	; (8006204 <prvInitialiseTaskLists+0x68>)
 80061d0:	f7fe fcdc 	bl	8004b8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061d4:	480c      	ldr	r0, [pc, #48]	; (8006208 <prvInitialiseTaskLists+0x6c>)
 80061d6:	f7fe fcd9 	bl	8004b8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061da:	480c      	ldr	r0, [pc, #48]	; (800620c <prvInitialiseTaskLists+0x70>)
 80061dc:	f7fe fcd6 	bl	8004b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061e0:	480b      	ldr	r0, [pc, #44]	; (8006210 <prvInitialiseTaskLists+0x74>)
 80061e2:	f7fe fcd3 	bl	8004b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061e6:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <prvInitialiseTaskLists+0x78>)
 80061e8:	4a05      	ldr	r2, [pc, #20]	; (8006200 <prvInitialiseTaskLists+0x64>)
 80061ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061ec:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <prvInitialiseTaskLists+0x7c>)
 80061ee:	4a05      	ldr	r2, [pc, #20]	; (8006204 <prvInitialiseTaskLists+0x68>)
 80061f0:	601a      	str	r2, [r3, #0]
}
 80061f2:	bf00      	nop
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	200006ec 	.word	0x200006ec
 8006200:	20000b4c 	.word	0x20000b4c
 8006204:	20000b60 	.word	0x20000b60
 8006208:	20000b7c 	.word	0x20000b7c
 800620c:	20000b90 	.word	0x20000b90
 8006210:	20000ba8 	.word	0x20000ba8
 8006214:	20000b74 	.word	0x20000b74
 8006218:	20000b78 	.word	0x20000b78

0800621c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006222:	e019      	b.n	8006258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006224:	f000 fd48 	bl	8006cb8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006228:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <prvCheckTasksWaitingTermination+0x4c>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fd2f 	bl	8004c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <prvCheckTasksWaitingTermination+0x50>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3b01      	subs	r3, #1
 8006240:	4a0a      	ldr	r2, [pc, #40]	; (800626c <prvCheckTasksWaitingTermination+0x50>)
 8006242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006244:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <prvCheckTasksWaitingTermination+0x54>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3b01      	subs	r3, #1
 800624a:	4a09      	ldr	r2, [pc, #36]	; (8006270 <prvCheckTasksWaitingTermination+0x54>)
 800624c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800624e:	f000 fd61 	bl	8006d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f80e 	bl	8006274 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <prvCheckTasksWaitingTermination+0x54>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e1      	bne.n	8006224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006260:	bf00      	nop
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000b90 	.word	0x20000b90
 800626c:	20000bbc 	.word	0x20000bbc
 8006270:	20000ba4 	.word	0x20000ba4

08006274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006282:	2b00      	cmp	r3, #0
 8006284:	d108      	bne.n	8006298 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fecc 	bl	8007028 <vPortFree>
				vPortFree( pxTCB );
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fec9 	bl	8007028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006296:	e017      	b.n	80062c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d103      	bne.n	80062aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fec0 	bl	8007028 <vPortFree>
	}
 80062a8:	e00e      	b.n	80062c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d009      	beq.n	80062c8 <prvDeleteTCB+0x54>
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	e7fe      	b.n	80062c6 <prvDeleteTCB+0x52>
	}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d6:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <prvResetNextTaskUnblockTime+0x40>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <prvResetNextTaskUnblockTime+0x14>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <prvResetNextTaskUnblockTime+0x16>
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <prvResetNextTaskUnblockTime+0x44>)
 80062ec:	f04f 32ff 	mov.w	r2, #4294967295
 80062f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062f2:	e008      	b.n	8006306 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80062f4:	4b06      	ldr	r3, [pc, #24]	; (8006310 <prvResetNextTaskUnblockTime+0x40>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	4a04      	ldr	r2, [pc, #16]	; (8006314 <prvResetNextTaskUnblockTime+0x44>)
 8006304:	6013      	str	r3, [r2, #0]
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	20000b74 	.word	0x20000b74
 8006314:	20000bdc 	.word	0x20000bdc

08006318 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <xTaskGetSchedulerState+0x34>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006326:	2301      	movs	r3, #1
 8006328:	607b      	str	r3, [r7, #4]
 800632a:	e008      	b.n	800633e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800632c:	4b08      	ldr	r3, [pc, #32]	; (8006350 <xTaskGetSchedulerState+0x38>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006334:	2302      	movs	r3, #2
 8006336:	607b      	str	r3, [r7, #4]
 8006338:	e001      	b.n	800633e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800633a:	2300      	movs	r3, #0
 800633c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800633e:	687b      	ldr	r3, [r7, #4]
	}
 8006340:	4618      	mov	r0, r3
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	bc80      	pop	{r7}
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	20000bc8 	.word	0x20000bc8
 8006350:	20000be4 	.word	0x20000be4

08006354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d054      	beq.n	8006414 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800636a:	4b2d      	ldr	r3, [pc, #180]	; (8006420 <xTaskPriorityDisinherit+0xcc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	429a      	cmp	r2, r3
 8006372:	d009      	beq.n	8006388 <xTaskPriorityDisinherit+0x34>
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e7fe      	b.n	8006386 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	2b00      	cmp	r3, #0
 800638e:	d109      	bne.n	80063a4 <xTaskPriorityDisinherit+0x50>
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	60bb      	str	r3, [r7, #8]
 80063a2:	e7fe      	b.n	80063a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a8:	1e5a      	subs	r2, r3, #1
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d02c      	beq.n	8006414 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d128      	bne.n	8006414 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fe fc66 	bl	8004c98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e4:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <xTaskPriorityDisinherit+0xd0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d903      	bls.n	80063f4 <xTaskPriorityDisinherit+0xa0>
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4a0c      	ldr	r2, [pc, #48]	; (8006424 <xTaskPriorityDisinherit+0xd0>)
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4a09      	ldr	r2, [pc, #36]	; (8006428 <xTaskPriorityDisinherit+0xd4>)
 8006402:	441a      	add	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	4610      	mov	r0, r2
 800640c:	f7fe fbe9 	bl	8004be2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006410:	2301      	movs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006414:	697b      	ldr	r3, [r7, #20]
	}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	200006e8 	.word	0x200006e8
 8006424:	20000bc4 	.word	0x20000bc4
 8006428:	200006ec 	.word	0x200006ec

0800642c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006436:	4b21      	ldr	r3, [pc, #132]	; (80064bc <prvAddCurrentTaskToDelayedList+0x90>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800643c:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3304      	adds	r3, #4
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fc28 	bl	8004c98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d10a      	bne.n	8006466 <prvAddCurrentTaskToDelayedList+0x3a>
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006456:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3304      	adds	r3, #4
 800645c:	4619      	mov	r1, r3
 800645e:	4819      	ldr	r0, [pc, #100]	; (80064c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006460:	f7fe fbbf 	bl	8004be2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006464:	e026      	b.n	80064b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4413      	add	r3, r2
 800646c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800646e:	4b14      	ldr	r3, [pc, #80]	; (80064c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	429a      	cmp	r2, r3
 800647c:	d209      	bcs.n	8006492 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3304      	adds	r3, #4
 8006488:	4619      	mov	r1, r3
 800648a:	4610      	mov	r0, r2
 800648c:	f7fe fbcc 	bl	8004c28 <vListInsert>
}
 8006490:	e010      	b.n	80064b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006492:	4b0e      	ldr	r3, [pc, #56]	; (80064cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe fbc2 	bl	8004c28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064a4:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d202      	bcs.n	80064b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064ae:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	6013      	str	r3, [r2, #0]
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	20000bc0 	.word	0x20000bc0
 80064c0:	200006e8 	.word	0x200006e8
 80064c4:	20000ba8 	.word	0x20000ba8
 80064c8:	20000b78 	.word	0x20000b78
 80064cc:	20000b74 	.word	0x20000b74
 80064d0:	20000bdc 	.word	0x20000bdc

080064d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064de:	f000 fac3 	bl	8006a68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064e2:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <xTimerCreateTimerTask+0x80>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d021      	beq.n	800652e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064f2:	1d3a      	adds	r2, r7, #4
 80064f4:	f107 0108 	add.w	r1, r7, #8
 80064f8:	f107 030c 	add.w	r3, r7, #12
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fb2b 	bl	8004b58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	9202      	str	r2, [sp, #8]
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	2302      	movs	r3, #2
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	2300      	movs	r3, #0
 8006512:	460a      	mov	r2, r1
 8006514:	4910      	ldr	r1, [pc, #64]	; (8006558 <xTimerCreateTimerTask+0x84>)
 8006516:	4811      	ldr	r0, [pc, #68]	; (800655c <xTimerCreateTimerTask+0x88>)
 8006518:	f7ff f8f8 	bl	800570c <xTaskCreateStatic>
 800651c:	4602      	mov	r2, r0
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <xTimerCreateTimerTask+0x8c>)
 8006520:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006522:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <xTimerCreateTimerTask+0x8c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800652a:	2301      	movs	r3, #1
 800652c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d109      	bne.n	8006548 <xTimerCreateTimerTask+0x74>
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	e7fe      	b.n	8006546 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006548:	697b      	ldr	r3, [r7, #20]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000c18 	.word	0x20000c18
 8006558:	08007384 	.word	0x08007384
 800655c:	0800667d 	.word	0x0800667d
 8006560:	20000c1c 	.word	0x20000c1c

08006564 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	; 0x28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006572:	2300      	movs	r3, #0
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d109      	bne.n	8006590 <xTimerGenericCommand+0x2c>
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	623b      	str	r3, [r7, #32]
 800658e:	e7fe      	b.n	800658e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006590:	4b19      	ldr	r3, [pc, #100]	; (80065f8 <xTimerGenericCommand+0x94>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02a      	beq.n	80065ee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	dc18      	bgt.n	80065dc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065aa:	f7ff feb5 	bl	8006318 <xTaskGetSchedulerState>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d109      	bne.n	80065c8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <xTimerGenericCommand+0x94>)
 80065b6:	6818      	ldr	r0, [r3, #0]
 80065b8:	f107 0110 	add.w	r1, r7, #16
 80065bc:	2300      	movs	r3, #0
 80065be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065c0:	f7fe fcce 	bl	8004f60 <xQueueGenericSend>
 80065c4:	6278      	str	r0, [r7, #36]	; 0x24
 80065c6:	e012      	b.n	80065ee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <xTimerGenericCommand+0x94>)
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	f107 0110 	add.w	r1, r7, #16
 80065d0:	2300      	movs	r3, #0
 80065d2:	2200      	movs	r2, #0
 80065d4:	f7fe fcc4 	bl	8004f60 <xQueueGenericSend>
 80065d8:	6278      	str	r0, [r7, #36]	; 0x24
 80065da:	e008      	b.n	80065ee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <xTimerGenericCommand+0x94>)
 80065de:	6818      	ldr	r0, [r3, #0]
 80065e0:	f107 0110 	add.w	r1, r7, #16
 80065e4:	2300      	movs	r3, #0
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	f7fe fdb4 	bl	8005154 <xQueueGenericSendFromISR>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3728      	adds	r7, #40	; 0x28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000c18 	.word	0x20000c18

080065fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af02      	add	r7, sp, #8
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006606:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <prvProcessExpiredTimer+0x7c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3304      	adds	r3, #4
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe fb3f 	bl	8004c98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	69db      	ldr	r3, [r3, #28]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d121      	bne.n	8006666 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	699a      	ldr	r2, [r3, #24]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	18d1      	adds	r1, r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	6978      	ldr	r0, [r7, #20]
 8006630:	f000 f8c8 	bl	80067c4 <prvInsertTimerInActiveList>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d015      	beq.n	8006666 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800663a:	2300      	movs	r3, #0
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2300      	movs	r3, #0
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	2100      	movs	r1, #0
 8006644:	6978      	ldr	r0, [r7, #20]
 8006646:	f7ff ff8d 	bl	8006564 <xTimerGenericCommand>
 800664a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <prvProcessExpiredTimer+0x6a>
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e7fe      	b.n	8006664 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	6978      	ldr	r0, [r7, #20]
 800666c:	4798      	blx	r3
}
 800666e:	bf00      	nop
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000c10 	.word	0x20000c10

0800667c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	4618      	mov	r0, r3
 800668a:	f000 f857 	bl	800673c <prvGetNextExpireTime>
 800668e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4619      	mov	r1, r3
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f803 	bl	80066a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800669a:	f000 f8d5 	bl	8006848 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800669e:	e7f1      	b.n	8006684 <prvTimerTask+0x8>

080066a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066aa:	f7ff fa5b 	bl	8005b64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066ae:	f107 0308 	add.w	r3, r7, #8
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f866 	bl	8006784 <prvSampleTimeNow>
 80066b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d130      	bne.n	8006722 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <prvProcessTimerOrBlockTask+0x3c>
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d806      	bhi.n	80066dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066ce:	f7ff fa57 	bl	8005b80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff ff91 	bl	80065fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066da:	e024      	b.n	8006726 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d008      	beq.n	80066f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066e2:	4b13      	ldr	r3, [pc, #76]	; (8006730 <prvProcessTimerOrBlockTask+0x90>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066f4:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <prvProcessTimerOrBlockTask+0x94>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	4619      	mov	r1, r3
 8006702:	f7fe ffcf 	bl	80056a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006706:	f7ff fa3b 	bl	8005b80 <xTaskResumeAll>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006710:	4b09      	ldr	r3, [pc, #36]	; (8006738 <prvProcessTimerOrBlockTask+0x98>)
 8006712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	f3bf 8f6f 	isb	sy
}
 8006720:	e001      	b.n	8006726 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006722:	f7ff fa2d 	bl	8005b80 <xTaskResumeAll>
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000c14 	.word	0x20000c14
 8006734:	20000c18 	.word	0x20000c18
 8006738:	e000ed04 	.word	0xe000ed04

0800673c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006744:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <prvGetNextExpireTime+0x44>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	bf0c      	ite	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	2300      	movne	r3, #0
 8006752:	b2db      	uxtb	r3, r3
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006762:	4b07      	ldr	r3, [pc, #28]	; (8006780 <prvGetNextExpireTime+0x44>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	e001      	b.n	8006772 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006772:	68fb      	ldr	r3, [r7, #12]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	20000c10 	.word	0x20000c10

08006784 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800678c:	f7ff fa94 	bl	8005cb8 <xTaskGetTickCount>
 8006790:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <prvSampleTimeNow+0x3c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	429a      	cmp	r2, r3
 800679a:	d205      	bcs.n	80067a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800679c:	f000 f904 	bl	80069a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e002      	b.n	80067ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067ae:	4a04      	ldr	r2, [pc, #16]	; (80067c0 <prvSampleTimeNow+0x3c>)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000c20 	.word	0x20000c20

080067c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d812      	bhi.n	8006810 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d302      	bcc.n	80067fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067f8:	2301      	movs	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	e01b      	b.n	8006836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80067fe:	4b10      	ldr	r3, [pc, #64]	; (8006840 <prvInsertTimerInActiveList+0x7c>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3304      	adds	r3, #4
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f7fe fa0d 	bl	8004c28 <vListInsert>
 800680e:	e012      	b.n	8006836 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d206      	bcs.n	8006826 <prvInsertTimerInActiveList+0x62>
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d302      	bcc.n	8006826 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006820:	2301      	movs	r3, #1
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	e007      	b.n	8006836 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006826:	4b07      	ldr	r3, [pc, #28]	; (8006844 <prvInsertTimerInActiveList+0x80>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7fe f9f9 	bl	8004c28 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006836:	697b      	ldr	r3, [r7, #20]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20000c14 	.word	0x20000c14
 8006844:	20000c10 	.word	0x20000c10

08006848 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08e      	sub	sp, #56	; 0x38
 800684c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800684e:	e099      	b.n	8006984 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	da17      	bge.n	8006886 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	3304      	adds	r3, #4
 800685a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <prvProcessReceivedCommands+0x2e>
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e7fe      	b.n	8006874 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800687c:	6850      	ldr	r0, [r2, #4]
 800687e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006880:	6892      	ldr	r2, [r2, #8]
 8006882:	4611      	mov	r1, r2
 8006884:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	db7a      	blt.n	8006982 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	3304      	adds	r3, #4
 800689c:	4618      	mov	r0, r3
 800689e:	f7fe f9fb 	bl	8004c98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068a2:	463b      	mov	r3, r7
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7ff ff6d 	bl	8006784 <prvSampleTimeNow>
 80068aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	d868      	bhi.n	8006984 <prvProcessReceivedCommands+0x13c>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <prvProcessReceivedCommands+0x70>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	080068e1 	.word	0x080068e1
 80068bc:	080068e1 	.word	0x080068e1
 80068c0:	080068e1 	.word	0x080068e1
 80068c4:	08006985 	.word	0x08006985
 80068c8:	0800693b 	.word	0x0800693b
 80068cc:	08006971 	.word	0x08006971
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	080068e1 	.word	0x080068e1
 80068d8:	08006985 	.word	0x08006985
 80068dc:	0800693b 	.word	0x0800693b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	18d1      	adds	r1, r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ee:	f7ff ff69 	bl	80067c4 <prvInsertTimerInActiveList>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d045      	beq.n	8006984 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	69db      	ldr	r3, [r3, #28]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d13d      	bne.n	8006984 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	441a      	add	r2, r3
 8006910:	2300      	movs	r3, #0
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	2300      	movs	r3, #0
 8006916:	2100      	movs	r1, #0
 8006918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691a:	f7ff fe23 	bl	8006564 <xTimerGenericCommand>
 800691e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d12e      	bne.n	8006984 <prvProcessReceivedCommands+0x13c>
 8006926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692a:	f383 8811 	msr	BASEPRI, r3
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	f3bf 8f4f 	dsb	sy
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	e7fe      	b.n	8006938 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800693a:	68ba      	ldr	r2, [r7, #8]
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d109      	bne.n	800695c <prvProcessReceivedCommands+0x114>
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	e7fe      	b.n	800695a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	18d1      	adds	r1, r2, r3
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696a:	f7ff ff2b 	bl	80067c4 <prvInsertTimerInActiveList>
					break;
 800696e:	e009      	b.n	8006984 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d104      	bne.n	8006984 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800697a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800697c:	f000 fb54 	bl	8007028 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006980:	e000      	b.n	8006984 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006982:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006984:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <prvProcessReceivedCommands+0x15c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	1d39      	adds	r1, r7, #4
 800698a:	2200      	movs	r2, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe fc75 	bl	800527c <xQueueReceive>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	f47f af5b 	bne.w	8006850 <prvProcessReceivedCommands+0x8>
	}
}
 800699a:	bf00      	nop
 800699c:	3730      	adds	r7, #48	; 0x30
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000c18 	.word	0x20000c18

080069a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069ae:	e044      	b.n	8006a3a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069b0:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <prvSwitchTimerLists+0xb8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069ba:	4b29      	ldr	r3, [pc, #164]	; (8006a60 <prvSwitchTimerLists+0xb8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fe f965 	bl	8004c98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d12d      	bne.n	8006a3a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4413      	add	r3, r2
 80069e6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d90e      	bls.n	8006a0e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069fc:	4b18      	ldr	r3, [pc, #96]	; (8006a60 <prvSwitchTimerLists+0xb8>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f7fe f90e 	bl	8004c28 <vListInsert>
 8006a0c:	e015      	b.n	8006a3a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a0e:	2300      	movs	r3, #0
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	2300      	movs	r3, #0
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	2100      	movs	r1, #0
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff fda3 	bl	8006564 <xTimerGenericCommand>
 8006a1e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d109      	bne.n	8006a3a <prvSwitchTimerLists+0x92>
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	e7fe      	b.n	8006a38 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <prvSwitchTimerLists+0xb8>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1b5      	bne.n	80069b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a44:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <prvSwitchTimerLists+0xb8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <prvSwitchTimerLists+0xbc>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a04      	ldr	r2, [pc, #16]	; (8006a60 <prvSwitchTimerLists+0xb8>)
 8006a50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a52:	4a04      	ldr	r2, [pc, #16]	; (8006a64 <prvSwitchTimerLists+0xbc>)
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	6013      	str	r3, [r2, #0]
}
 8006a58:	bf00      	nop
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	20000c10 	.word	0x20000c10
 8006a64:	20000c14 	.word	0x20000c14

08006a68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a6e:	f000 f923 	bl	8006cb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a72:	4b15      	ldr	r3, [pc, #84]	; (8006ac8 <prvCheckForValidListAndQueue+0x60>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d120      	bne.n	8006abc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a7a:	4814      	ldr	r0, [pc, #80]	; (8006acc <prvCheckForValidListAndQueue+0x64>)
 8006a7c:	f7fe f886 	bl	8004b8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a80:	4813      	ldr	r0, [pc, #76]	; (8006ad0 <prvCheckForValidListAndQueue+0x68>)
 8006a82:	f7fe f883 	bl	8004b8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <prvCheckForValidListAndQueue+0x6c>)
 8006a88:	4a10      	ldr	r2, [pc, #64]	; (8006acc <prvCheckForValidListAndQueue+0x64>)
 8006a8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a8c:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <prvCheckForValidListAndQueue+0x70>)
 8006a8e:	4a10      	ldr	r2, [pc, #64]	; (8006ad0 <prvCheckForValidListAndQueue+0x68>)
 8006a90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a92:	2300      	movs	r3, #0
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	4b11      	ldr	r3, [pc, #68]	; (8006adc <prvCheckForValidListAndQueue+0x74>)
 8006a98:	4a11      	ldr	r2, [pc, #68]	; (8006ae0 <prvCheckForValidListAndQueue+0x78>)
 8006a9a:	2110      	movs	r1, #16
 8006a9c:	200a      	movs	r0, #10
 8006a9e:	f7fe f98d 	bl	8004dbc <xQueueGenericCreateStatic>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	4b08      	ldr	r3, [pc, #32]	; (8006ac8 <prvCheckForValidListAndQueue+0x60>)
 8006aa6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <prvCheckForValidListAndQueue+0x60>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <prvCheckForValidListAndQueue+0x60>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	490b      	ldr	r1, [pc, #44]	; (8006ae4 <prvCheckForValidListAndQueue+0x7c>)
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fdcc 	bl	8005654 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006abc:	f000 f92a 	bl	8006d14 <vPortExitCritical>
}
 8006ac0:	bf00      	nop
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000c18 	.word	0x20000c18
 8006acc:	20000be8 	.word	0x20000be8
 8006ad0:	20000bfc 	.word	0x20000bfc
 8006ad4:	20000c10 	.word	0x20000c10
 8006ad8:	20000c14 	.word	0x20000c14
 8006adc:	20000cc4 	.word	0x20000cc4
 8006ae0:	20000c24 	.word	0x20000c24
 8006ae4:	0800738c 	.word	0x0800738c

08006ae8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3b04      	subs	r3, #4
 8006af8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3b04      	subs	r3, #4
 8006b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f023 0201 	bic.w	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	3b04      	subs	r3, #4
 8006b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b18:	4a08      	ldr	r2, [pc, #32]	; (8006b3c <pxPortInitialiseStack+0x54>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3b14      	subs	r3, #20
 8006b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	3b20      	subs	r3, #32
 8006b2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006b30:	68fb      	ldr	r3, [r7, #12]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr
 8006b3c:	08006b41 	.word	0x08006b41

08006b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b4a:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <prvTaskExitError+0x4c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b52:	d009      	beq.n	8006b68 <prvTaskExitError+0x28>
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	e7fe      	b.n	8006b66 <prvTaskExitError+0x26>
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b7a:	bf00      	nop
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0fc      	beq.n	8006b7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	2000000c 	.word	0x2000000c

08006b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b90:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <pxCurrentTCBConst2>)
 8006b92:	6819      	ldr	r1, [r3, #0]
 8006b94:	6808      	ldr	r0, [r1, #0]
 8006b96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b9a:	f380 8809 	msr	PSP, r0
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f04f 0000 	mov.w	r0, #0
 8006ba6:	f380 8811 	msr	BASEPRI, r0
 8006baa:	f04e 0e0d 	orr.w	lr, lr, #13
 8006bae:	4770      	bx	lr

08006bb0 <pxCurrentTCBConst2>:
 8006bb0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop

08006bb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006bb8:	4806      	ldr	r0, [pc, #24]	; (8006bd4 <prvPortStartFirstTask+0x1c>)
 8006bba:	6800      	ldr	r0, [r0, #0]
 8006bbc:	6800      	ldr	r0, [r0, #0]
 8006bbe:	f380 8808 	msr	MSP, r0
 8006bc2:	b662      	cpsie	i
 8006bc4:	b661      	cpsie	f
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	df00      	svc	0
 8006bd0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bd2:	bf00      	nop
 8006bd4:	e000ed08 	.word	0xe000ed08

08006bd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006bde:	4b31      	ldr	r3, [pc, #196]	; (8006ca4 <xPortStartScheduler+0xcc>)
 8006be0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	22ff      	movs	r2, #255	; 0xff
 8006bee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	4b29      	ldr	r3, [pc, #164]	; (8006ca8 <xPortStartScheduler+0xd0>)
 8006c04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c06:	4b29      	ldr	r3, [pc, #164]	; (8006cac <xPortStartScheduler+0xd4>)
 8006c08:	2207      	movs	r2, #7
 8006c0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c0c:	e009      	b.n	8006c22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006c0e:	4b27      	ldr	r3, [pc, #156]	; (8006cac <xPortStartScheduler+0xd4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	4a25      	ldr	r2, [pc, #148]	; (8006cac <xPortStartScheduler+0xd4>)
 8006c16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c18:	78fb      	ldrb	r3, [r7, #3]
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c22:	78fb      	ldrb	r3, [r7, #3]
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d0ef      	beq.n	8006c0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <xPortStartScheduler+0xd4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f1c3 0307 	rsb	r3, r3, #7
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d009      	beq.n	8006c4e <xPortStartScheduler+0x76>
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	60bb      	str	r3, [r7, #8]
 8006c4c:	e7fe      	b.n	8006c4c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c4e:	4b17      	ldr	r3, [pc, #92]	; (8006cac <xPortStartScheduler+0xd4>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	021b      	lsls	r3, r3, #8
 8006c54:	4a15      	ldr	r2, [pc, #84]	; (8006cac <xPortStartScheduler+0xd4>)
 8006c56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c58:	4b14      	ldr	r3, [pc, #80]	; (8006cac <xPortStartScheduler+0xd4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c60:	4a12      	ldr	r2, [pc, #72]	; (8006cac <xPortStartScheduler+0xd4>)
 8006c62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c6c:	4b10      	ldr	r3, [pc, #64]	; (8006cb0 <xPortStartScheduler+0xd8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a0f      	ldr	r2, [pc, #60]	; (8006cb0 <xPortStartScheduler+0xd8>)
 8006c72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c78:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <xPortStartScheduler+0xd8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a0c      	ldr	r2, [pc, #48]	; (8006cb0 <xPortStartScheduler+0xd8>)
 8006c7e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c84:	f000 f8b0 	bl	8006de8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c88:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <xPortStartScheduler+0xdc>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c8e:	f7ff ff93 	bl	8006bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c92:	f7ff f8dd 	bl	8005e50 <vTaskSwitchContext>
	prvTaskExitError();
 8006c96:	f7ff ff53 	bl	8006b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	e000e400 	.word	0xe000e400
 8006ca8:	20000d14 	.word	0x20000d14
 8006cac:	20000d18 	.word	0x20000d18
 8006cb0:	e000ed20 	.word	0xe000ed20
 8006cb4:	2000000c 	.word	0x2000000c

08006cb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <vPortEnterCritical+0x54>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	4a0d      	ldr	r2, [pc, #52]	; (8006d0c <vPortEnterCritical+0x54>)
 8006cd8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <vPortEnterCritical+0x54>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d10e      	bne.n	8006d00 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <vPortEnterCritical+0x58>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <vPortEnterCritical+0x48>
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	e7fe      	b.n	8006cfe <vPortEnterCritical+0x46>
	}
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	2000000c 	.word	0x2000000c
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <vPortExitCritical+0x48>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <vPortExitCritical+0x22>
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	607b      	str	r3, [r7, #4]
 8006d34:	e7fe      	b.n	8006d34 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006d36:	4b09      	ldr	r3, [pc, #36]	; (8006d5c <vPortExitCritical+0x48>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	4a07      	ldr	r2, [pc, #28]	; (8006d5c <vPortExitCritical+0x48>)
 8006d3e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <vPortExitCritical+0x48>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <vPortExitCritical+0x3e>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	2000000c 	.word	0x2000000c

08006d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d60:	f3ef 8009 	mrs	r0, PSP
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <pxCurrentTCBConst>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d70:	6010      	str	r0, [r2, #0]
 8006d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006d76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d7a:	f380 8811 	msr	BASEPRI, r0
 8006d7e:	f7ff f867 	bl	8005e50 <vTaskSwitchContext>
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f380 8811 	msr	BASEPRI, r0
 8006d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006d8e:	6819      	ldr	r1, [r3, #0]
 8006d90:	6808      	ldr	r0, [r1, #0]
 8006d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006d96:	f380 8809 	msr	PSP, r0
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	4770      	bx	lr

08006da0 <pxCurrentTCBConst>:
 8006da0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop

08006da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006dc0:	f7fe ff88 	bl	8005cd4 <xTaskIncrementTick>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <SysTick_Handler+0x3c>)
 8006dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dec:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <vPortSetupTimerInterrupt+0x30>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006df2:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <vPortSetupTimerInterrupt+0x34>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006df8:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <vPortSetupTimerInterrupt+0x38>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a09      	ldr	r2, [pc, #36]	; (8006e24 <vPortSetupTimerInterrupt+0x3c>)
 8006dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006e02:	099b      	lsrs	r3, r3, #6
 8006e04:	4a08      	ldr	r2, [pc, #32]	; (8006e28 <vPortSetupTimerInterrupt+0x40>)
 8006e06:	3b01      	subs	r3, #1
 8006e08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e0a:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <vPortSetupTimerInterrupt+0x30>)
 8006e0c:	2207      	movs	r2, #7
 8006e0e:	601a      	str	r2, [r3, #0]
}
 8006e10:	bf00      	nop
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bc80      	pop	{r7}
 8006e16:	4770      	bx	lr
 8006e18:	e000e010 	.word	0xe000e010
 8006e1c:	e000e018 	.word	0xe000e018
 8006e20:	20000000 	.word	0x20000000
 8006e24:	10624dd3 	.word	0x10624dd3
 8006e28:	e000e014 	.word	0xe000e014

08006e2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b085      	sub	sp, #20
 8006e30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e32:	f3ef 8305 	mrs	r3, IPSR
 8006e36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2b0f      	cmp	r3, #15
 8006e3c:	d913      	bls.n	8006e66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e3e:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <vPortValidateInterruptPriority+0x68>)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e48:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <vPortValidateInterruptPriority+0x6c>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	7afa      	ldrb	r2, [r7, #11]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d209      	bcs.n	8006e66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	e7fe      	b.n	8006e64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <vPortValidateInterruptPriority+0x70>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ea0 <vPortValidateInterruptPriority+0x74>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d909      	bls.n	8006e8a <vPortValidateInterruptPriority+0x5e>
 8006e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	603b      	str	r3, [r7, #0]
 8006e88:	e7fe      	b.n	8006e88 <vPortValidateInterruptPriority+0x5c>
	}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr
 8006e94:	e000e3f0 	.word	0xe000e3f0
 8006e98:	20000d14 	.word	0x20000d14
 8006e9c:	e000ed0c 	.word	0xe000ed0c
 8006ea0:	20000d18 	.word	0x20000d18

08006ea4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	; 0x28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006eb0:	f7fe fe58 	bl	8005b64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006eb4:	4b57      	ldr	r3, [pc, #348]	; (8007014 <pvPortMalloc+0x170>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ebc:	f000 f90c 	bl	80070d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ec0:	4b55      	ldr	r3, [pc, #340]	; (8007018 <pvPortMalloc+0x174>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f040 808c 	bne.w	8006fe6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01c      	beq.n	8006f0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d013      	beq.n	8006f0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f023 0307 	bic.w	r3, r3, #7
 8006eec:	3308      	adds	r3, #8
 8006eee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d009      	beq.n	8006f0e <pvPortMalloc+0x6a>
 8006efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	e7fe      	b.n	8006f0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d068      	beq.n	8006fe6 <pvPortMalloc+0x142>
 8006f14:	4b41      	ldr	r3, [pc, #260]	; (800701c <pvPortMalloc+0x178>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d863      	bhi.n	8006fe6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f1e:	4b40      	ldr	r3, [pc, #256]	; (8007020 <pvPortMalloc+0x17c>)
 8006f20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f22:	4b3f      	ldr	r3, [pc, #252]	; (8007020 <pvPortMalloc+0x17c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f28:	e004      	b.n	8006f34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d903      	bls.n	8006f46 <pvPortMalloc+0xa2>
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f1      	bne.n	8006f2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f46:	4b33      	ldr	r3, [pc, #204]	; (8007014 <pvPortMalloc+0x170>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d04a      	beq.n	8006fe6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2208      	movs	r2, #8
 8006f56:	4413      	add	r3, r2
 8006f58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	1ad2      	subs	r2, r2, r3
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d91e      	bls.n	8006fb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4413      	add	r3, r2
 8006f78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d009      	beq.n	8006f98 <pvPortMalloc+0xf4>
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	e7fe      	b.n	8006f96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006faa:	69b8      	ldr	r0, [r7, #24]
 8006fac:	f000 f8f6 	bl	800719c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <pvPortMalloc+0x178>)
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	4a18      	ldr	r2, [pc, #96]	; (800701c <pvPortMalloc+0x178>)
 8006fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fbe:	4b17      	ldr	r3, [pc, #92]	; (800701c <pvPortMalloc+0x178>)
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	4b18      	ldr	r3, [pc, #96]	; (8007024 <pvPortMalloc+0x180>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d203      	bcs.n	8006fd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fca:	4b14      	ldr	r3, [pc, #80]	; (800701c <pvPortMalloc+0x178>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a15      	ldr	r2, [pc, #84]	; (8007024 <pvPortMalloc+0x180>)
 8006fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <pvPortMalloc+0x174>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fe6:	f7fe fdcb 	bl	8005b80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d009      	beq.n	8007008 <pvPortMalloc+0x164>
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	60fb      	str	r3, [r7, #12]
 8007006:	e7fe      	b.n	8007006 <pvPortMalloc+0x162>
	return pvReturn;
 8007008:	69fb      	ldr	r3, [r7, #28]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3728      	adds	r7, #40	; 0x28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	200020ac 	.word	0x200020ac
 8007018:	200020b8 	.word	0x200020b8
 800701c:	200020b0 	.word	0x200020b0
 8007020:	200020a4 	.word	0x200020a4
 8007024:	200020b4 	.word	0x200020b4

08007028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d046      	beq.n	80070c8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800703a:	2308      	movs	r3, #8
 800703c:	425b      	negs	r3, r3
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4413      	add	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	4b20      	ldr	r3, [pc, #128]	; (80070d0 <vPortFree+0xa8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4013      	ands	r3, r2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d109      	bne.n	800706a <vPortFree+0x42>
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	e7fe      	b.n	8007068 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d009      	beq.n	8007086 <vPortFree+0x5e>
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
 8007084:	e7fe      	b.n	8007084 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <vPortFree+0xa8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4013      	ands	r3, r2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d019      	beq.n	80070c8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d115      	bne.n	80070c8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <vPortFree+0xa8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	43db      	mvns	r3, r3
 80070a6:	401a      	ands	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070ac:	f7fe fd5a 	bl	8005b64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <vPortFree+0xac>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4413      	add	r3, r2
 80070ba:	4a06      	ldr	r2, [pc, #24]	; (80070d4 <vPortFree+0xac>)
 80070bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f000 f86c 	bl	800719c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80070c4:	f7fe fd5c 	bl	8005b80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070c8:	bf00      	nop
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	200020b8 	.word	0x200020b8
 80070d4:	200020b0 	.word	0x200020b0

080070d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070de:	f241 3388 	movw	r3, #5000	; 0x1388
 80070e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070e4:	4b27      	ldr	r3, [pc, #156]	; (8007184 <prvHeapInit+0xac>)
 80070e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00c      	beq.n	800710c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3307      	adds	r3, #7
 80070f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007100:	68ba      	ldr	r2, [r7, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <prvHeapInit+0xac>)
 8007108:	4413      	add	r3, r2
 800710a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <prvHeapInit+0xb0>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007116:	4b1c      	ldr	r3, [pc, #112]	; (8007188 <prvHeapInit+0xb0>)
 8007118:	2200      	movs	r2, #0
 800711a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007124:	2208      	movs	r2, #8
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1a9b      	subs	r3, r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4a15      	ldr	r2, [pc, #84]	; (800718c <prvHeapInit+0xb4>)
 8007138:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <prvHeapInit+0xb4>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007142:	4b12      	ldr	r3, [pc, #72]	; (800718c <prvHeapInit+0xb4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2200      	movs	r2, #0
 8007148:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	1ad2      	subs	r2, r2, r3
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007158:	4b0c      	ldr	r3, [pc, #48]	; (800718c <prvHeapInit+0xb4>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <prvHeapInit+0xb8>)
 8007166:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a09      	ldr	r2, [pc, #36]	; (8007194 <prvHeapInit+0xbc>)
 800716e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007170:	4b09      	ldr	r3, [pc, #36]	; (8007198 <prvHeapInit+0xc0>)
 8007172:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007176:	601a      	str	r2, [r3, #0]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	20000d1c 	.word	0x20000d1c
 8007188:	200020a4 	.word	0x200020a4
 800718c:	200020ac 	.word	0x200020ac
 8007190:	200020b4 	.word	0x200020b4
 8007194:	200020b0 	.word	0x200020b0
 8007198:	200020b8 	.word	0x200020b8

0800719c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071a4:	4b27      	ldr	r3, [pc, #156]	; (8007244 <prvInsertBlockIntoFreeList+0xa8>)
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e002      	b.n	80071b0 <prvInsertBlockIntoFreeList+0x14>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d8f7      	bhi.n	80071aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4413      	add	r3, r2
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d108      	bne.n	80071de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	441a      	add	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	441a      	add	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d118      	bne.n	8007224 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b14      	ldr	r3, [pc, #80]	; (8007248 <prvInsertBlockIntoFreeList+0xac>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d00d      	beq.n	800721a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	441a      	add	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	e008      	b.n	800722c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800721a:	4b0b      	ldr	r3, [pc, #44]	; (8007248 <prvInsertBlockIntoFreeList+0xac>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	e003      	b.n	800722c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d002      	beq.n	800723a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800723a:	bf00      	nop
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr
 8007244:	200020a4 	.word	0x200020a4
 8007248:	200020ac 	.word	0x200020ac

0800724c <__libc_init_array>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	2500      	movs	r5, #0
 8007250:	4e0c      	ldr	r6, [pc, #48]	; (8007284 <__libc_init_array+0x38>)
 8007252:	4c0d      	ldr	r4, [pc, #52]	; (8007288 <__libc_init_array+0x3c>)
 8007254:	1ba4      	subs	r4, r4, r6
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	42a5      	cmp	r5, r4
 800725a:	d109      	bne.n	8007270 <__libc_init_array+0x24>
 800725c:	f000 f82e 	bl	80072bc <_init>
 8007260:	2500      	movs	r5, #0
 8007262:	4e0a      	ldr	r6, [pc, #40]	; (800728c <__libc_init_array+0x40>)
 8007264:	4c0a      	ldr	r4, [pc, #40]	; (8007290 <__libc_init_array+0x44>)
 8007266:	1ba4      	subs	r4, r4, r6
 8007268:	10a4      	asrs	r4, r4, #2
 800726a:	42a5      	cmp	r5, r4
 800726c:	d105      	bne.n	800727a <__libc_init_array+0x2e>
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007274:	4798      	blx	r3
 8007276:	3501      	adds	r5, #1
 8007278:	e7ee      	b.n	8007258 <__libc_init_array+0xc>
 800727a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800727e:	4798      	blx	r3
 8007280:	3501      	adds	r5, #1
 8007282:	e7f2      	b.n	800726a <__libc_init_array+0x1e>
 8007284:	080074fc 	.word	0x080074fc
 8007288:	080074fc 	.word	0x080074fc
 800728c:	080074fc 	.word	0x080074fc
 8007290:	08007500 	.word	0x08007500

08007294 <memcpy>:
 8007294:	b510      	push	{r4, lr}
 8007296:	1e43      	subs	r3, r0, #1
 8007298:	440a      	add	r2, r1
 800729a:	4291      	cmp	r1, r2
 800729c:	d100      	bne.n	80072a0 <memcpy+0xc>
 800729e:	bd10      	pop	{r4, pc}
 80072a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072a8:	e7f7      	b.n	800729a <memcpy+0x6>

080072aa <memset>:
 80072aa:	4603      	mov	r3, r0
 80072ac:	4402      	add	r2, r0
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d100      	bne.n	80072b4 <memset+0xa>
 80072b2:	4770      	bx	lr
 80072b4:	f803 1b01 	strb.w	r1, [r3], #1
 80072b8:	e7f9      	b.n	80072ae <memset+0x4>
	...

080072bc <_init>:
 80072bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072be:	bf00      	nop
 80072c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072c2:	bc08      	pop	{r3}
 80072c4:	469e      	mov	lr, r3
 80072c6:	4770      	bx	lr

080072c8 <_fini>:
 80072c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ca:	bf00      	nop
 80072cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ce:	bc08      	pop	{r3}
 80072d0:	469e      	mov	lr, r3
 80072d2:	4770      	bx	lr
