
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08008f78  08008f78  00018f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009228  08009228  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08009228  08009228  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009228  08009228  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002978  20000010  08009240  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002988  08009240  00022988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae70  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037cd  00000000  00000000  0003aea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001976a  00000000  00000000  00040f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e75  00000000  00000000  0005a68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a7e  00000000  00000000  000714ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00109f7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005818  00000000  00000000  00109fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f60 	.word	0x08008f60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08008f60 	.word	0x08008f60

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__aeabi_f2iz>:
 800060c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000610:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000614:	d30f      	bcc.n	8000636 <__aeabi_f2iz+0x2a>
 8000616:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800061a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061e:	d90d      	bls.n	800063c <__aeabi_f2iz+0x30>
 8000620:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000624:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000628:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800062c:	fa23 f002 	lsr.w	r0, r3, r2
 8000630:	bf18      	it	ne
 8000632:	4240      	negne	r0, r0
 8000634:	4770      	bx	lr
 8000636:	f04f 0000 	mov.w	r0, #0
 800063a:	4770      	bx	lr
 800063c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000640:	d101      	bne.n	8000646 <__aeabi_f2iz+0x3a>
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	d105      	bne.n	8000652 <__aeabi_f2iz+0x46>
 8000646:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800064a:	bf08      	it	eq
 800064c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000650:	4770      	bx	lr
 8000652:	f04f 0000 	mov.w	r0, #0
 8000656:	4770      	bx	lr

08000658 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	2b3a      	cmp	r3, #58	; 0x3a
 8000666:	d13b      	bne.n	80006e0 <letter+0x88>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066e:	48d5      	ldr	r0, [pc, #852]	; (80009c4 <letter+0x36c>)
 8000670:	f004 facd 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067a:	48d3      	ldr	r0, [pc, #844]	; (80009c8 <letter+0x370>)
 800067c:	f004 fac7 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	48d0      	ldr	r0, [pc, #832]	; (80009c8 <letter+0x370>)
 8000688:	f004 fac1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800068c:	2200      	movs	r2, #0
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	48cd      	ldr	r0, [pc, #820]	; (80009c8 <letter+0x370>)
 8000692:	f004 fabc 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000696:	2201      	movs	r2, #1
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	48cb      	ldr	r0, [pc, #812]	; (80009c8 <letter+0x370>)
 800069c:	f004 fab7 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 80006a0:	2201      	movs	r2, #1
 80006a2:	2180      	movs	r1, #128	; 0x80
 80006a4:	48c9      	ldr	r0, [pc, #804]	; (80009cc <letter+0x374>)
 80006a6:	f004 fab2 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	48c6      	ldr	r0, [pc, #792]	; (80009cc <letter+0x374>)
 80006b2:	f004 faac 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006bc:	48c3      	ldr	r0, [pc, #780]	; (80009cc <letter+0x374>)
 80006be:	f004 faa6 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c8:	48c0      	ldr	r0, [pc, #768]	; (80009cc <letter+0x374>)
 80006ca:	f004 faa0 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d4:	48bb      	ldr	r0, [pc, #748]	; (80009c4 <letter+0x36c>)
 80006d6:	f004 fa9a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80006da:	2002      	movs	r0, #2
 80006dc:	f003 fdee 	bl	80042bc <HAL_Delay>
	}
	if(L == '-')
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	2b2d      	cmp	r3, #45	; 0x2d
 80006e4:	d13b      	bne.n	800075e <letter+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006e6:	2201      	movs	r2, #1
 80006e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ec:	48b5      	ldr	r0, [pc, #724]	; (80009c4 <letter+0x36c>)
 80006ee:	f004 fa8e 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f8:	48b3      	ldr	r0, [pc, #716]	; (80009c8 <letter+0x370>)
 80006fa:	f004 fa88 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000704:	48b0      	ldr	r0, [pc, #704]	; (80009c8 <letter+0x370>)
 8000706:	f004 fa82 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800070a:	2201      	movs	r2, #1
 800070c:	2140      	movs	r1, #64	; 0x40
 800070e:	48ae      	ldr	r0, [pc, #696]	; (80009c8 <letter+0x370>)
 8000710:	f004 fa7d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000714:	2201      	movs	r2, #1
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	48ab      	ldr	r0, [pc, #684]	; (80009c8 <letter+0x370>)
 800071a:	f004 fa78 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800071e:	2200      	movs	r2, #0
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	48aa      	ldr	r0, [pc, #680]	; (80009cc <letter+0x374>)
 8000724:	f004 fa73 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	48a7      	ldr	r0, [pc, #668]	; (80009cc <letter+0x374>)
 8000730:	f004 fa6d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	48a4      	ldr	r0, [pc, #656]	; (80009cc <letter+0x374>)
 800073c:	f004 fa67 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	48a1      	ldr	r0, [pc, #644]	; (80009cc <letter+0x374>)
 8000748:	f004 fa61 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	489c      	ldr	r0, [pc, #624]	; (80009c4 <letter+0x36c>)
 8000754:	f004 fa5b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000758:	2002      	movs	r0, #2
 800075a:	f003 fdaf 	bl	80042bc <HAL_Delay>
	}
	if(L == ' ')
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b20      	cmp	r3, #32
 8000762:	d13b      	bne.n	80007dc <letter+0x184>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	4896      	ldr	r0, [pc, #600]	; (80009c4 <letter+0x36c>)
 800076c:	f004 fa4f 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000776:	4894      	ldr	r0, [pc, #592]	; (80009c8 <letter+0x370>)
 8000778:	f004 fa49 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000782:	4891      	ldr	r0, [pc, #580]	; (80009c8 <letter+0x370>)
 8000784:	f004 fa43 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000788:	2200      	movs	r2, #0
 800078a:	2140      	movs	r1, #64	; 0x40
 800078c:	488e      	ldr	r0, [pc, #568]	; (80009c8 <letter+0x370>)
 800078e:	f004 fa3e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000792:	2200      	movs	r2, #0
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	488c      	ldr	r0, [pc, #560]	; (80009c8 <letter+0x370>)
 8000798:	f004 fa39 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800079c:	2200      	movs	r2, #0
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	488a      	ldr	r0, [pc, #552]	; (80009cc <letter+0x374>)
 80007a2:	f004 fa34 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80007a6:	2201      	movs	r2, #1
 80007a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ac:	4887      	ldr	r0, [pc, #540]	; (80009cc <letter+0x374>)
 80007ae:	f004 fa2e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	4884      	ldr	r0, [pc, #528]	; (80009cc <letter+0x374>)
 80007ba:	f004 fa28 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007c4:	4881      	ldr	r0, [pc, #516]	; (80009cc <letter+0x374>)
 80007c6:	f004 fa22 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	487c      	ldr	r0, [pc, #496]	; (80009c4 <letter+0x36c>)
 80007d2:	f004 fa1c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80007d6:	2002      	movs	r0, #2
 80007d8:	f003 fd70 	bl	80042bc <HAL_Delay>
	}
	if(L == '/')
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	2b2f      	cmp	r3, #47	; 0x2f
 80007e0:	d13b      	bne.n	800085a <letter+0x202>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e8:	4876      	ldr	r0, [pc, #472]	; (80009c4 <letter+0x36c>)
 80007ea:	f004 fa10 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80007ee:	2201      	movs	r2, #1
 80007f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f4:	4874      	ldr	r0, [pc, #464]	; (80009c8 <letter+0x370>)
 80007f6:	f004 fa0a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4871      	ldr	r0, [pc, #452]	; (80009c8 <letter+0x370>)
 8000802:	f004 fa04 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000806:	2201      	movs	r2, #1
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	486f      	ldr	r0, [pc, #444]	; (80009c8 <letter+0x370>)
 800080c:	f004 f9ff 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000810:	2201      	movs	r2, #1
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	486c      	ldr	r0, [pc, #432]	; (80009c8 <letter+0x370>)
 8000816:	f004 f9fa 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800081a:	2200      	movs	r2, #0
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	486b      	ldr	r0, [pc, #428]	; (80009cc <letter+0x374>)
 8000820:	f004 f9f5 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	4868      	ldr	r0, [pc, #416]	; (80009cc <letter+0x374>)
 800082c:	f004 f9ef 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000836:	4865      	ldr	r0, [pc, #404]	; (80009cc <letter+0x374>)
 8000838:	f004 f9e9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000842:	4862      	ldr	r0, [pc, #392]	; (80009cc <letter+0x374>)
 8000844:	f004 f9e3 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	485d      	ldr	r0, [pc, #372]	; (80009c4 <letter+0x36c>)
 8000850:	f004 f9dd 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000854:	2002      	movs	r0, #2
 8000856:	f003 fd31 	bl	80042bc <HAL_Delay>
	}
	if(L == '!')
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b21      	cmp	r3, #33	; 0x21
 800085e:	d138      	bne.n	80008d2 <letter+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	4857      	ldr	r0, [pc, #348]	; (80009c4 <letter+0x36c>)
 8000868:	f004 f9d1 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000872:	4855      	ldr	r0, [pc, #340]	; (80009c8 <letter+0x370>)
 8000874:	f004 f9cb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	4852      	ldr	r0, [pc, #328]	; (80009c8 <letter+0x370>)
 8000880:	f004 f9c5 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000884:	2200      	movs	r2, #0
 8000886:	2140      	movs	r1, #64	; 0x40
 8000888:	484f      	ldr	r0, [pc, #316]	; (80009c8 <letter+0x370>)
 800088a:	f004 f9c0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800088e:	2200      	movs	r2, #0
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	484d      	ldr	r0, [pc, #308]	; (80009c8 <letter+0x370>)
 8000894:	f004 f9bb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000898:	2200      	movs	r2, #0
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	484b      	ldr	r0, [pc, #300]	; (80009cc <letter+0x374>)
 800089e:	f004 f9b6 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a8:	4848      	ldr	r0, [pc, #288]	; (80009cc <letter+0x374>)
 80008aa:	f004 f9b0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b4:	4845      	ldr	r0, [pc, #276]	; (80009cc <letter+0x374>)
 80008b6:	f004 f9aa 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c0:	4842      	ldr	r0, [pc, #264]	; (80009cc <letter+0x374>)
 80008c2:	f004 f9a4 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	483d      	ldr	r0, [pc, #244]	; (80009c4 <letter+0x36c>)
 80008ce:	f004 f99e 	bl	8004c0e <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b3f      	cmp	r3, #63	; 0x3f
 80008d6:	d13b      	bne.n	8000950 <letter+0x2f8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008de:	4839      	ldr	r0, [pc, #228]	; (80009c4 <letter+0x36c>)
 80008e0:	f004 f995 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ea:	4837      	ldr	r0, [pc, #220]	; (80009c8 <letter+0x370>)
 80008ec:	f004 f98f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	4834      	ldr	r0, [pc, #208]	; (80009c8 <letter+0x370>)
 80008f8:	f004 f989 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80008fc:	2201      	movs	r2, #1
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	4831      	ldr	r0, [pc, #196]	; (80009c8 <letter+0x370>)
 8000902:	f004 f984 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000906:	2201      	movs	r2, #1
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	482f      	ldr	r0, [pc, #188]	; (80009c8 <letter+0x370>)
 800090c:	f004 f97f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000910:	2201      	movs	r2, #1
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	482d      	ldr	r0, [pc, #180]	; (80009cc <letter+0x374>)
 8000916:	f004 f97a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000920:	482a      	ldr	r0, [pc, #168]	; (80009cc <letter+0x374>)
 8000922:	f004 f974 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092c:	4827      	ldr	r0, [pc, #156]	; (80009cc <letter+0x374>)
 800092e:	f004 f96e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000938:	4824      	ldr	r0, [pc, #144]	; (80009cc <letter+0x374>)
 800093a:	f004 f968 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000944:	481f      	ldr	r0, [pc, #124]	; (80009c4 <letter+0x36c>)
 8000946:	f004 f962 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800094a:	2002      	movs	r0, #2
 800094c:	f003 fcb6 	bl	80042bc <HAL_Delay>
	}
	if(L == '*')
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b2a      	cmp	r3, #42	; 0x2a
 8000954:	d142      	bne.n	80009dc <letter+0x384>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095c:	4819      	ldr	r0, [pc, #100]	; (80009c4 <letter+0x36c>)
 800095e:	f004 f956 	bl	8004c0e <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000968:	4817      	ldr	r0, [pc, #92]	; (80009c8 <letter+0x370>)
 800096a:	f004 f950 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <letter+0x370>)
 8000976:	f004 f94a 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800097a:	2200      	movs	r2, #0
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	4812      	ldr	r0, [pc, #72]	; (80009c8 <letter+0x370>)
 8000980:	f004 f945 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000984:	2201      	movs	r2, #1
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <letter+0x370>)
 800098a:	f004 f940 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800098e:	2200      	movs	r2, #0
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	480e      	ldr	r0, [pc, #56]	; (80009cc <letter+0x374>)
 8000994:	f004 f93b 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <letter+0x374>)
 80009a0:	f004 f935 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009aa:	4808      	ldr	r0, [pc, #32]	; (80009cc <letter+0x374>)
 80009ac:	f004 f92f 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <letter+0x374>)
 80009b8:	f004 f929 	bl	8004c0e <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c2:	e005      	b.n	80009d0 <letter+0x378>
 80009c4:	40010c00 	.word	0x40010c00
 80009c8:	40011000 	.word	0x40011000
 80009cc:	40010800 	.word	0x40010800
 80009d0:	48d5      	ldr	r0, [pc, #852]	; (8000d28 <letter+0x6d0>)
 80009d2:	f004 f91c 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80009d6:	2002      	movs	r0, #2
 80009d8:	f003 fc70 	bl	80042bc <HAL_Delay>
	}
	if(L == '#')
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b23      	cmp	r3, #35	; 0x23
 80009e0:	d13b      	bne.n	8000a5a <letter+0x402>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e8:	48cf      	ldr	r0, [pc, #828]	; (8000d28 <letter+0x6d0>)
 80009ea:	f004 f910 	bl	8004c0e <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f4:	48cd      	ldr	r0, [pc, #820]	; (8000d2c <letter+0x6d4>)
 80009f6:	f004 f90a 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80009fa:	2201      	movs	r2, #1
 80009fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a00:	48ca      	ldr	r0, [pc, #808]	; (8000d2c <letter+0x6d4>)
 8000a02:	f004 f904 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a06:	2200      	movs	r2, #0
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	48c8      	ldr	r0, [pc, #800]	; (8000d2c <letter+0x6d4>)
 8000a0c:	f004 f8ff 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a10:	2200      	movs	r2, #0
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	48c5      	ldr	r0, [pc, #788]	; (8000d2c <letter+0x6d4>)
 8000a16:	f004 f8fa 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	48c4      	ldr	r0, [pc, #784]	; (8000d30 <letter+0x6d8>)
 8000a20:	f004 f8f5 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2a:	48c1      	ldr	r0, [pc, #772]	; (8000d30 <letter+0x6d8>)
 8000a2c:	f004 f8ef 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a36:	48be      	ldr	r0, [pc, #760]	; (8000d30 <letter+0x6d8>)
 8000a38:	f004 f8e9 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a42:	48bb      	ldr	r0, [pc, #748]	; (8000d30 <letter+0x6d8>)
 8000a44:	f004 f8e3 	bl	8004c0e <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a4e:	48b6      	ldr	r0, [pc, #728]	; (8000d28 <letter+0x6d0>)
 8000a50:	f004 f8dd 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 8000a54:	2002      	movs	r0, #2
 8000a56:	f003 fc31 	bl	80042bc <HAL_Delay>
	}
	if(L == 'a')
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b61      	cmp	r3, #97	; 0x61
 8000a5e:	d13b      	bne.n	8000ad8 <letter+0x480>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	48b0      	ldr	r0, [pc, #704]	; (8000d28 <letter+0x6d0>)
 8000a68:	f004 f8d1 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a72:	48ae      	ldr	r0, [pc, #696]	; (8000d2c <letter+0x6d4>)
 8000a74:	f004 f8cb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7e:	48ab      	ldr	r0, [pc, #684]	; (8000d2c <letter+0x6d4>)
 8000a80:	f004 f8c5 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a84:	2200      	movs	r2, #0
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	48a8      	ldr	r0, [pc, #672]	; (8000d2c <letter+0x6d4>)
 8000a8a:	f004 f8c0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	48a6      	ldr	r0, [pc, #664]	; (8000d2c <letter+0x6d4>)
 8000a94:	f004 f8bb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2180      	movs	r1, #128	; 0x80
 8000a9c:	48a4      	ldr	r0, [pc, #656]	; (8000d30 <letter+0x6d8>)
 8000a9e:	f004 f8b6 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	48a1      	ldr	r0, [pc, #644]	; (8000d30 <letter+0x6d8>)
 8000aaa:	f004 f8b0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab4:	489e      	ldr	r0, [pc, #632]	; (8000d30 <letter+0x6d8>)
 8000ab6:	f004 f8aa 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac0:	489b      	ldr	r0, [pc, #620]	; (8000d30 <letter+0x6d8>)
 8000ac2:	f004 f8a4 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000acc:	4896      	ldr	r0, [pc, #600]	; (8000d28 <letter+0x6d0>)
 8000ace:	f004 f89e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f003 fbf2 	bl	80042bc <HAL_Delay>
	}
	if(L == 'b')
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b62      	cmp	r3, #98	; 0x62
 8000adc:	d13b      	bne.n	8000b56 <letter+0x4fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae4:	4890      	ldr	r0, [pc, #576]	; (8000d28 <letter+0x6d0>)
 8000ae6:	f004 f892 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000af0:	488e      	ldr	r0, [pc, #568]	; (8000d2c <letter+0x6d4>)
 8000af2:	f004 f88c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afc:	488b      	ldr	r0, [pc, #556]	; (8000d2c <letter+0x6d4>)
 8000afe:	f004 f886 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000b02:	2200      	movs	r2, #0
 8000b04:	2140      	movs	r1, #64	; 0x40
 8000b06:	4889      	ldr	r0, [pc, #548]	; (8000d2c <letter+0x6d4>)
 8000b08:	f004 f881 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	4886      	ldr	r0, [pc, #536]	; (8000d2c <letter+0x6d4>)
 8000b12:	f004 f87c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b16:	2200      	movs	r2, #0
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	4885      	ldr	r0, [pc, #532]	; (8000d30 <letter+0x6d8>)
 8000b1c:	f004 f877 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b26:	4882      	ldr	r0, [pc, #520]	; (8000d30 <letter+0x6d8>)
 8000b28:	f004 f871 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b32:	487f      	ldr	r0, [pc, #508]	; (8000d30 <letter+0x6d8>)
 8000b34:	f004 f86b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3e:	487c      	ldr	r0, [pc, #496]	; (8000d30 <letter+0x6d8>)
 8000b40:	f004 f865 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b44:	2200      	movs	r2, #0
 8000b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4a:	4877      	ldr	r0, [pc, #476]	; (8000d28 <letter+0x6d0>)
 8000b4c:	f004 f85f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f003 fbb3 	bl	80042bc <HAL_Delay>
	}
	if(L == 'C')
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	2b43      	cmp	r3, #67	; 0x43
 8000b5a:	d13b      	bne.n	8000bd4 <letter+0x57c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b62:	4871      	ldr	r0, [pc, #452]	; (8000d28 <letter+0x6d0>)
 8000b64:	f004 f853 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6e:	486f      	ldr	r0, [pc, #444]	; (8000d2c <letter+0x6d4>)
 8000b70:	f004 f84d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b7a:	486c      	ldr	r0, [pc, #432]	; (8000d2c <letter+0x6d4>)
 8000b7c:	f004 f847 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	4869      	ldr	r0, [pc, #420]	; (8000d2c <letter+0x6d4>)
 8000b86:	f004 f842 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	4867      	ldr	r0, [pc, #412]	; (8000d2c <letter+0x6d4>)
 8000b90:	f004 f83d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b94:	2200      	movs	r2, #0
 8000b96:	2180      	movs	r1, #128	; 0x80
 8000b98:	4865      	ldr	r0, [pc, #404]	; (8000d30 <letter+0x6d8>)
 8000b9a:	f004 f838 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba4:	4862      	ldr	r0, [pc, #392]	; (8000d30 <letter+0x6d8>)
 8000ba6:	f004 f832 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb0:	485f      	ldr	r0, [pc, #380]	; (8000d30 <letter+0x6d8>)
 8000bb2:	f004 f82c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbc:	485c      	ldr	r0, [pc, #368]	; (8000d30 <letter+0x6d8>)
 8000bbe:	f004 f826 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc8:	4857      	ldr	r0, [pc, #348]	; (8000d28 <letter+0x6d0>)
 8000bca:	f004 f820 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f003 fb74 	bl	80042bc <HAL_Delay>
	}
	if(L == 'c')
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b63      	cmp	r3, #99	; 0x63
 8000bd8:	d13b      	bne.n	8000c52 <letter+0x5fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be0:	4851      	ldr	r0, [pc, #324]	; (8000d28 <letter+0x6d0>)
 8000be2:	f004 f814 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bec:	484f      	ldr	r0, [pc, #316]	; (8000d2c <letter+0x6d4>)
 8000bee:	f004 f80e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bf8:	484c      	ldr	r0, [pc, #304]	; (8000d2c <letter+0x6d4>)
 8000bfa:	f004 f808 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2140      	movs	r1, #64	; 0x40
 8000c02:	484a      	ldr	r0, [pc, #296]	; (8000d2c <letter+0x6d4>)
 8000c04:	f004 f803 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4847      	ldr	r0, [pc, #284]	; (8000d2c <letter+0x6d4>)
 8000c0e:	f003 fffe 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c12:	2200      	movs	r2, #0
 8000c14:	2180      	movs	r1, #128	; 0x80
 8000c16:	4846      	ldr	r0, [pc, #280]	; (8000d30 <letter+0x6d8>)
 8000c18:	f003 fff9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c22:	4843      	ldr	r0, [pc, #268]	; (8000d30 <letter+0x6d8>)
 8000c24:	f003 fff3 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c2e:	4840      	ldr	r0, [pc, #256]	; (8000d30 <letter+0x6d8>)
 8000c30:	f003 ffed 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3a:	483d      	ldr	r0, [pc, #244]	; (8000d30 <letter+0x6d8>)
 8000c3c:	f003 ffe7 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000c40:	2200      	movs	r2, #0
 8000c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c46:	4838      	ldr	r0, [pc, #224]	; (8000d28 <letter+0x6d0>)
 8000c48:	f003 ffe1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f003 fb35 	bl	80042bc <HAL_Delay>
	}
	if(L == 'd')
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b64      	cmp	r3, #100	; 0x64
 8000c56:	d13b      	bne.n	8000cd0 <letter+0x678>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	4832      	ldr	r0, [pc, #200]	; (8000d28 <letter+0x6d0>)
 8000c60:	f003 ffd5 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6a:	4830      	ldr	r0, [pc, #192]	; (8000d2c <letter+0x6d4>)
 8000c6c:	f003 ffcf 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c76:	482d      	ldr	r0, [pc, #180]	; (8000d2c <letter+0x6d4>)
 8000c78:	f003 ffc9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2140      	movs	r1, #64	; 0x40
 8000c80:	482a      	ldr	r0, [pc, #168]	; (8000d2c <letter+0x6d4>)
 8000c82:	f003 ffc4 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000c86:	2200      	movs	r2, #0
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	4828      	ldr	r0, [pc, #160]	; (8000d2c <letter+0x6d4>)
 8000c8c:	f003 ffbf 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c90:	2200      	movs	r2, #0
 8000c92:	2180      	movs	r1, #128	; 0x80
 8000c94:	4826      	ldr	r0, [pc, #152]	; (8000d30 <letter+0x6d8>)
 8000c96:	f003 ffba 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca0:	4823      	ldr	r0, [pc, #140]	; (8000d30 <letter+0x6d8>)
 8000ca2:	f003 ffb4 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cac:	4820      	ldr	r0, [pc, #128]	; (8000d30 <letter+0x6d8>)
 8000cae:	f003 ffae 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <letter+0x6d8>)
 8000cba:	f003 ffa8 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <letter+0x6d0>)
 8000cc6:	f003 ffa2 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f003 faf6 	bl	80042bc <HAL_Delay>
	}
	if(L == 'E')
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b45      	cmp	r3, #69	; 0x45
 8000cd4:	d143      	bne.n	8000d5e <letter+0x706>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cdc:	4812      	ldr	r0, [pc, #72]	; (8000d28 <letter+0x6d0>)
 8000cde:	f003 ff96 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce8:	4810      	ldr	r0, [pc, #64]	; (8000d2c <letter+0x6d4>)
 8000cea:	f003 ff90 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <letter+0x6d4>)
 8000cf6:	f003 ff8a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <letter+0x6d4>)
 8000d00:	f003 ff85 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000d04:	2200      	movs	r2, #0
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <letter+0x6d4>)
 8000d0a:	f003 ff80 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	4807      	ldr	r0, [pc, #28]	; (8000d30 <letter+0x6d8>)
 8000d14:	f003 ff7b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <letter+0x6d8>)
 8000d20:	f003 ff75 	bl	8004c0e <HAL_GPIO_WritePin>
 8000d24:	e006      	b.n	8000d34 <letter+0x6dc>
 8000d26:	bf00      	nop
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3a:	48d4      	ldr	r0, [pc, #848]	; (800108c <letter+0xa34>)
 8000d3c:	f003 ff67 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d46:	48d1      	ldr	r0, [pc, #836]	; (800108c <letter+0xa34>)
 8000d48:	f003 ff61 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d52:	48cf      	ldr	r0, [pc, #828]	; (8001090 <letter+0xa38>)
 8000d54:	f003 ff5b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f003 faaf 	bl	80042bc <HAL_Delay>
	}
	if(L == 'e')
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	2b65      	cmp	r3, #101	; 0x65
 8000d62:	d13b      	bne.n	8000ddc <letter+0x784>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d64:	2201      	movs	r2, #1
 8000d66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6a:	48c9      	ldr	r0, [pc, #804]	; (8001090 <letter+0xa38>)
 8000d6c:	f003 ff4f 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d76:	48c7      	ldr	r0, [pc, #796]	; (8001094 <letter+0xa3c>)
 8000d78:	f003 ff49 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d82:	48c4      	ldr	r0, [pc, #784]	; (8001094 <letter+0xa3c>)
 8000d84:	f003 ff43 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	48c1      	ldr	r0, [pc, #772]	; (8001094 <letter+0xa3c>)
 8000d8e:	f003 ff3e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000d92:	2200      	movs	r2, #0
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	48bf      	ldr	r0, [pc, #764]	; (8001094 <letter+0xa3c>)
 8000d98:	f003 ff39 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2180      	movs	r1, #128	; 0x80
 8000da0:	48ba      	ldr	r0, [pc, #744]	; (800108c <letter+0xa34>)
 8000da2:	f003 ff34 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dac:	48b7      	ldr	r0, [pc, #732]	; (800108c <letter+0xa34>)
 8000dae:	f003 ff2e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000db8:	48b4      	ldr	r0, [pc, #720]	; (800108c <letter+0xa34>)
 8000dba:	f003 ff28 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc4:	48b1      	ldr	r0, [pc, #708]	; (800108c <letter+0xa34>)
 8000dc6:	f003 ff22 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd0:	48af      	ldr	r0, [pc, #700]	; (8001090 <letter+0xa38>)
 8000dd2:	f003 ff1c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f003 fa70 	bl	80042bc <HAL_Delay>
	}
	if(L == 'f')
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	2b66      	cmp	r3, #102	; 0x66
 8000de0:	d13b      	bne.n	8000e5a <letter+0x802>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000de2:	2201      	movs	r2, #1
 8000de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de8:	48a9      	ldr	r0, [pc, #676]	; (8001090 <letter+0xa38>)
 8000dea:	f003 ff10 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	48a7      	ldr	r0, [pc, #668]	; (8001094 <letter+0xa3c>)
 8000df6:	f003 ff0a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e00:	48a4      	ldr	r0, [pc, #656]	; (8001094 <letter+0xa3c>)
 8000e02:	f003 ff04 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000e06:	2201      	movs	r2, #1
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	48a2      	ldr	r0, [pc, #648]	; (8001094 <letter+0xa3c>)
 8000e0c:	f003 feff 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000e10:	2200      	movs	r2, #0
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	489f      	ldr	r0, [pc, #636]	; (8001094 <letter+0xa3c>)
 8000e16:	f003 fefa 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	489b      	ldr	r0, [pc, #620]	; (800108c <letter+0xa34>)
 8000e20:	f003 fef5 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2a:	4898      	ldr	r0, [pc, #608]	; (800108c <letter+0xa34>)
 8000e2c:	f003 feef 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e36:	4895      	ldr	r0, [pc, #596]	; (800108c <letter+0xa34>)
 8000e38:	f003 fee9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e42:	4892      	ldr	r0, [pc, #584]	; (800108c <letter+0xa34>)
 8000e44:	f003 fee3 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e4e:	4890      	ldr	r0, [pc, #576]	; (8001090 <letter+0xa38>)
 8000e50:	f003 fedd 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e54:	2002      	movs	r0, #2
 8000e56:	f003 fa31 	bl	80042bc <HAL_Delay>
	}
	if(L == 'G')
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b47      	cmp	r3, #71	; 0x47
 8000e5e:	d13b      	bne.n	8000ed8 <letter+0x880>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e66:	488a      	ldr	r0, [pc, #552]	; (8001090 <letter+0xa38>)
 8000e68:	f003 fed1 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e72:	4888      	ldr	r0, [pc, #544]	; (8001094 <letter+0xa3c>)
 8000e74:	f003 fecb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e7e:	4885      	ldr	r0, [pc, #532]	; (8001094 <letter+0xa3c>)
 8000e80:	f003 fec5 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000e84:	2201      	movs	r2, #1
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4882      	ldr	r0, [pc, #520]	; (8001094 <letter+0xa3c>)
 8000e8a:	f003 fec0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	4880      	ldr	r0, [pc, #512]	; (8001094 <letter+0xa3c>)
 8000e94:	f003 febb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	487b      	ldr	r0, [pc, #492]	; (800108c <letter+0xa34>)
 8000e9e:	f003 feb6 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea8:	4878      	ldr	r0, [pc, #480]	; (800108c <letter+0xa34>)
 8000eaa:	f003 feb0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb4:	4875      	ldr	r0, [pc, #468]	; (800108c <letter+0xa34>)
 8000eb6:	f003 feaa 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ec0:	4872      	ldr	r0, [pc, #456]	; (800108c <letter+0xa34>)
 8000ec2:	f003 fea4 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ecc:	4870      	ldr	r0, [pc, #448]	; (8001090 <letter+0xa38>)
 8000ece:	f003 fe9e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f003 f9f2 	bl	80042bc <HAL_Delay>
	}
	if(L == 'g')
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b67      	cmp	r3, #103	; 0x67
 8000edc:	d13b      	bne.n	8000f56 <letter+0x8fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	486a      	ldr	r0, [pc, #424]	; (8001090 <letter+0xa38>)
 8000ee6:	f003 fe92 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ef0:	4868      	ldr	r0, [pc, #416]	; (8001094 <letter+0xa3c>)
 8000ef2:	f003 fe8c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	4865      	ldr	r0, [pc, #404]	; (8001094 <letter+0xa3c>)
 8000efe:	f003 fe86 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000f02:	2201      	movs	r2, #1
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	4863      	ldr	r0, [pc, #396]	; (8001094 <letter+0xa3c>)
 8000f08:	f003 fe81 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	4860      	ldr	r0, [pc, #384]	; (8001094 <letter+0xa3c>)
 8000f12:	f003 fe7c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000f16:	2200      	movs	r2, #0
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	485c      	ldr	r0, [pc, #368]	; (800108c <letter+0xa34>)
 8000f1c:	f003 fe77 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	4859      	ldr	r0, [pc, #356]	; (800108c <letter+0xa34>)
 8000f28:	f003 fe71 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	4856      	ldr	r0, [pc, #344]	; (800108c <letter+0xa34>)
 8000f34:	f003 fe6b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	4853      	ldr	r0, [pc, #332]	; (800108c <letter+0xa34>)
 8000f40:	f003 fe65 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	4851      	ldr	r0, [pc, #324]	; (8001090 <letter+0xa38>)
 8000f4c:	f003 fe5f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f003 f9b3 	bl	80042bc <HAL_Delay>
	}
	if(L == 'I')
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b49      	cmp	r3, #73	; 0x49
 8000f5a:	d13b      	bne.n	8000fd4 <letter+0x97c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	484b      	ldr	r0, [pc, #300]	; (8001090 <letter+0xa38>)
 8000f64:	f003 fe53 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	4849      	ldr	r0, [pc, #292]	; (8001094 <letter+0xa3c>)
 8000f70:	f003 fe4d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	4846      	ldr	r0, [pc, #280]	; (8001094 <letter+0xa3c>)
 8000f7c:	f003 fe47 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	4843      	ldr	r0, [pc, #268]	; (8001094 <letter+0xa3c>)
 8000f86:	f003 fe42 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	4841      	ldr	r0, [pc, #260]	; (8001094 <letter+0xa3c>)
 8000f90:	f003 fe3d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000f94:	2200      	movs	r2, #0
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	483c      	ldr	r0, [pc, #240]	; (800108c <letter+0xa34>)
 8000f9a:	f003 fe38 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	4839      	ldr	r0, [pc, #228]	; (800108c <letter+0xa34>)
 8000fa6:	f003 fe32 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	4836      	ldr	r0, [pc, #216]	; (800108c <letter+0xa34>)
 8000fb2:	f003 fe2c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	4833      	ldr	r0, [pc, #204]	; (800108c <letter+0xa34>)
 8000fbe:	f003 fe26 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	4831      	ldr	r0, [pc, #196]	; (8001090 <letter+0xa38>)
 8000fca:	f003 fe20 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f003 f974 	bl	80042bc <HAL_Delay>
	}
	if(L == 'i')
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b69      	cmp	r3, #105	; 0x69
 8000fd8:	d13b      	bne.n	8001052 <letter+0x9fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	482b      	ldr	r0, [pc, #172]	; (8001090 <letter+0xa38>)
 8000fe2:	f003 fe14 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4829      	ldr	r0, [pc, #164]	; (8001094 <letter+0xa3c>)
 8000fee:	f003 fe0e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4826      	ldr	r0, [pc, #152]	; (8001094 <letter+0xa3c>)
 8000ffa:	f003 fe08 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ffe:	2200      	movs	r2, #0
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	4824      	ldr	r0, [pc, #144]	; (8001094 <letter+0xa3c>)
 8001004:	f003 fe03 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001008:	2201      	movs	r2, #1
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <letter+0xa3c>)
 800100e:	f003 fdfe 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001012:	2200      	movs	r2, #0
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	481d      	ldr	r0, [pc, #116]	; (800108c <letter+0xa34>)
 8001018:	f003 fdf9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	481a      	ldr	r0, [pc, #104]	; (800108c <letter+0xa34>)
 8001024:	f003 fdf3 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4817      	ldr	r0, [pc, #92]	; (800108c <letter+0xa34>)
 8001030:	f003 fded 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4814      	ldr	r0, [pc, #80]	; (800108c <letter+0xa34>)
 800103c:	f003 fde7 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <letter+0xa38>)
 8001048:	f003 fde1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800104c:	2002      	movs	r0, #2
 800104e:	f003 f935 	bl	80042bc <HAL_Delay>
	}
	if(L == 'l')
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b6c      	cmp	r3, #108	; 0x6c
 8001056:	d142      	bne.n	80010de <letter+0xa86>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <letter+0xa38>)
 8001060:	f003 fdd5 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <letter+0xa3c>)
 800106c:	f003 fdcf 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4807      	ldr	r0, [pc, #28]	; (8001094 <letter+0xa3c>)
 8001078:	f003 fdc9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800107c:	2201      	movs	r2, #1
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <letter+0xa3c>)
 8001082:	f003 fdc4 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001086:	2201      	movs	r2, #1
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	e005      	b.n	8001098 <letter+0xa40>
 800108c:	40010800 	.word	0x40010800
 8001090:	40010c00 	.word	0x40010c00
 8001094:	40011000 	.word	0x40011000
 8001098:	48d4      	ldr	r0, [pc, #848]	; (80013ec <letter+0xd94>)
 800109a:	f003 fdb8 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800109e:	2200      	movs	r2, #0
 80010a0:	2180      	movs	r1, #128	; 0x80
 80010a2:	48d3      	ldr	r0, [pc, #844]	; (80013f0 <letter+0xd98>)
 80010a4:	f003 fdb3 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	48d0      	ldr	r0, [pc, #832]	; (80013f0 <letter+0xd98>)
 80010b0:	f003 fdad 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ba:	48cd      	ldr	r0, [pc, #820]	; (80013f0 <letter+0xd98>)
 80010bc:	f003 fda7 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c6:	48ca      	ldr	r0, [pc, #808]	; (80013f0 <letter+0xd98>)
 80010c8:	f003 fda1 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d2:	48c8      	ldr	r0, [pc, #800]	; (80013f4 <letter+0xd9c>)
 80010d4:	f003 fd9b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80010d8:	2002      	movs	r0, #2
 80010da:	f003 f8ef 	bl	80042bc <HAL_Delay>
	}
	if(L == 'm')
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b6d      	cmp	r3, #109	; 0x6d
 80010e2:	d13b      	bne.n	800115c <letter+0xb04>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ea:	48c2      	ldr	r0, [pc, #776]	; (80013f4 <letter+0xd9c>)
 80010ec:	f003 fd8f 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f6:	48bd      	ldr	r0, [pc, #756]	; (80013ec <letter+0xd94>)
 80010f8:	f003 fd89 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	48ba      	ldr	r0, [pc, #744]	; (80013ec <letter+0xd94>)
 8001104:	f003 fd83 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001108:	2201      	movs	r2, #1
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	48b7      	ldr	r0, [pc, #732]	; (80013ec <letter+0xd94>)
 800110e:	f003 fd7e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001112:	2201      	movs	r2, #1
 8001114:	2180      	movs	r1, #128	; 0x80
 8001116:	48b5      	ldr	r0, [pc, #724]	; (80013ec <letter+0xd94>)
 8001118:	f003 fd79 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800111c:	2200      	movs	r2, #0
 800111e:	2180      	movs	r1, #128	; 0x80
 8001120:	48b3      	ldr	r0, [pc, #716]	; (80013f0 <letter+0xd98>)
 8001122:	f003 fd74 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001126:	2201      	movs	r2, #1
 8001128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112c:	48b0      	ldr	r0, [pc, #704]	; (80013f0 <letter+0xd98>)
 800112e:	f003 fd6e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001138:	48ad      	ldr	r0, [pc, #692]	; (80013f0 <letter+0xd98>)
 800113a:	f003 fd68 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001144:	48aa      	ldr	r0, [pc, #680]	; (80013f0 <letter+0xd98>)
 8001146:	f003 fd62 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001150:	48a8      	ldr	r0, [pc, #672]	; (80013f4 <letter+0xd9c>)
 8001152:	f003 fd5c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001156:	2002      	movs	r0, #2
 8001158:	f003 f8b0 	bl	80042bc <HAL_Delay>
	}
	if(L == 'N')
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b4e      	cmp	r3, #78	; 0x4e
 8001160:	d13b      	bne.n	80011da <letter+0xb82>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001162:	2201      	movs	r2, #1
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	48a2      	ldr	r0, [pc, #648]	; (80013f4 <letter+0xd9c>)
 800116a:	f003 fd50 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	489d      	ldr	r0, [pc, #628]	; (80013ec <letter+0xd94>)
 8001176:	f003 fd4a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001180:	489a      	ldr	r0, [pc, #616]	; (80013ec <letter+0xd94>)
 8001182:	f003 fd44 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001186:	2201      	movs	r2, #1
 8001188:	2140      	movs	r1, #64	; 0x40
 800118a:	4898      	ldr	r0, [pc, #608]	; (80013ec <letter+0xd94>)
 800118c:	f003 fd3f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001190:	2201      	movs	r2, #1
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	4895      	ldr	r0, [pc, #596]	; (80013ec <letter+0xd94>)
 8001196:	f003 fd3a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800119a:	2200      	movs	r2, #0
 800119c:	2180      	movs	r1, #128	; 0x80
 800119e:	4894      	ldr	r0, [pc, #592]	; (80013f0 <letter+0xd98>)
 80011a0:	f003 fd35 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011aa:	4891      	ldr	r0, [pc, #580]	; (80013f0 <letter+0xd98>)
 80011ac:	f003 fd2f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b6:	488e      	ldr	r0, [pc, #568]	; (80013f0 <letter+0xd98>)
 80011b8:	f003 fd29 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c2:	488b      	ldr	r0, [pc, #556]	; (80013f0 <letter+0xd98>)
 80011c4:	f003 fd23 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ce:	4889      	ldr	r0, [pc, #548]	; (80013f4 <letter+0xd9c>)
 80011d0:	f003 fd1d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80011d4:	2002      	movs	r0, #2
 80011d6:	f003 f871 	bl	80042bc <HAL_Delay>
	}
	if(L == 'n')
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	2b6e      	cmp	r3, #110	; 0x6e
 80011de:	d13b      	bne.n	8001258 <letter+0xc00>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e6:	4883      	ldr	r0, [pc, #524]	; (80013f4 <letter+0xd9c>)
 80011e8:	f003 fd11 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f2:	487e      	ldr	r0, [pc, #504]	; (80013ec <letter+0xd94>)
 80011f4:	f003 fd0b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fe:	487b      	ldr	r0, [pc, #492]	; (80013ec <letter+0xd94>)
 8001200:	f003 fd05 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001204:	2201      	movs	r2, #1
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	4878      	ldr	r0, [pc, #480]	; (80013ec <letter+0xd94>)
 800120a:	f003 fd00 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800120e:	2201      	movs	r2, #1
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	4876      	ldr	r0, [pc, #472]	; (80013ec <letter+0xd94>)
 8001214:	f003 fcfb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001218:	2200      	movs	r2, #0
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	4874      	ldr	r0, [pc, #464]	; (80013f0 <letter+0xd98>)
 800121e:	f003 fcf6 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001228:	4871      	ldr	r0, [pc, #452]	; (80013f0 <letter+0xd98>)
 800122a:	f003 fcf0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001234:	486e      	ldr	r0, [pc, #440]	; (80013f0 <letter+0xd98>)
 8001236:	f003 fcea 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001240:	486b      	ldr	r0, [pc, #428]	; (80013f0 <letter+0xd98>)
 8001242:	f003 fce4 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124c:	4869      	ldr	r0, [pc, #420]	; (80013f4 <letter+0xd9c>)
 800124e:	f003 fcde 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001252:	2002      	movs	r0, #2
 8001254:	f003 f832 	bl	80042bc <HAL_Delay>
	}
	if(L == 'O')
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b4f      	cmp	r3, #79	; 0x4f
 800125c:	d13b      	bne.n	80012d6 <letter+0xc7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	4863      	ldr	r0, [pc, #396]	; (80013f4 <letter+0xd9c>)
 8001266:	f003 fcd2 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	485e      	ldr	r0, [pc, #376]	; (80013ec <letter+0xd94>)
 8001272:	f003 fccc 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	485b      	ldr	r0, [pc, #364]	; (80013ec <letter+0xd94>)
 800127e:	f003 fcc6 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	4859      	ldr	r0, [pc, #356]	; (80013ec <letter+0xd94>)
 8001288:	f003 fcc1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800128c:	2201      	movs	r2, #1
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	4856      	ldr	r0, [pc, #344]	; (80013ec <letter+0xd94>)
 8001292:	f003 fcbc 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001296:	2200      	movs	r2, #0
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	4855      	ldr	r0, [pc, #340]	; (80013f0 <letter+0xd98>)
 800129c:	f003 fcb7 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	4852      	ldr	r0, [pc, #328]	; (80013f0 <letter+0xd98>)
 80012a8:	f003 fcb1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b2:	484f      	ldr	r0, [pc, #316]	; (80013f0 <letter+0xd98>)
 80012b4:	f003 fcab 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	484c      	ldr	r0, [pc, #304]	; (80013f0 <letter+0xd98>)
 80012c0:	f003 fca5 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	484a      	ldr	r0, [pc, #296]	; (80013f4 <letter+0xd9c>)
 80012cc:	f003 fc9f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f002 fff3 	bl	80042bc <HAL_Delay>
	}
	if(L == 'o')
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b6f      	cmp	r3, #111	; 0x6f
 80012da:	d13b      	bne.n	8001354 <letter+0xcfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	4844      	ldr	r0, [pc, #272]	; (80013f4 <letter+0xd9c>)
 80012e4:	f003 fc93 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	483f      	ldr	r0, [pc, #252]	; (80013ec <letter+0xd94>)
 80012f0:	f003 fc8d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	483c      	ldr	r0, [pc, #240]	; (80013ec <letter+0xd94>)
 80012fc:	f003 fc87 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	4839      	ldr	r0, [pc, #228]	; (80013ec <letter+0xd94>)
 8001306:	f003 fc82 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800130a:	2201      	movs	r2, #1
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	4837      	ldr	r0, [pc, #220]	; (80013ec <letter+0xd94>)
 8001310:	f003 fc7d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001314:	2200      	movs	r2, #0
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	4835      	ldr	r0, [pc, #212]	; (80013f0 <letter+0xd98>)
 800131a:	f003 fc78 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	4832      	ldr	r0, [pc, #200]	; (80013f0 <letter+0xd98>)
 8001326:	f003 fc72 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	482f      	ldr	r0, [pc, #188]	; (80013f0 <letter+0xd98>)
 8001332:	f003 fc6c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	482c      	ldr	r0, [pc, #176]	; (80013f0 <letter+0xd98>)
 800133e:	f003 fc66 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	482a      	ldr	r0, [pc, #168]	; (80013f4 <letter+0xd9c>)
 800134a:	f003 fc60 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800134e:	2002      	movs	r0, #2
 8001350:	f002 ffb4 	bl	80042bc <HAL_Delay>
	}
	if(L == 'P')
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b50      	cmp	r3, #80	; 0x50
 8001358:	d13b      	bne.n	80013d2 <letter+0xd7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4824      	ldr	r0, [pc, #144]	; (80013f4 <letter+0xd9c>)
 8001362:	f003 fc54 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	481f      	ldr	r0, [pc, #124]	; (80013ec <letter+0xd94>)
 800136e:	f003 fc4e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	481c      	ldr	r0, [pc, #112]	; (80013ec <letter+0xd94>)
 800137a:	f003 fc48 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	481a      	ldr	r0, [pc, #104]	; (80013ec <letter+0xd94>)
 8001384:	f003 fc43 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001388:	2200      	movs	r2, #0
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <letter+0xd94>)
 800138e:	f003 fc3e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	4816      	ldr	r0, [pc, #88]	; (80013f0 <letter+0xd98>)
 8001398:	f003 fc39 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <letter+0xd98>)
 80013a4:	f003 fc33 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	4810      	ldr	r0, [pc, #64]	; (80013f0 <letter+0xd98>)
 80013b0:	f003 fc2d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <letter+0xd98>)
 80013bc:	f003 fc27 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <letter+0xd9c>)
 80013c8:	f003 fc21 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f002 ff75 	bl	80042bc <HAL_Delay>
	}
	if(L == 'Q')
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b51      	cmp	r3, #81	; 0x51
 80013d6:	d142      	bne.n	800145e <letter+0xe06>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <letter+0xd9c>)
 80013e0:	f003 fc15 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	e005      	b.n	80013f8 <letter+0xda0>
 80013ec:	40011000 	.word	0x40011000
 80013f0:	40010800 	.word	0x40010800
 80013f4:	40010c00 	.word	0x40010c00
 80013f8:	48d5      	ldr	r0, [pc, #852]	; (8001750 <letter+0x10f8>)
 80013fa:	f003 fc08 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001404:	48d2      	ldr	r0, [pc, #840]	; (8001750 <letter+0x10f8>)
 8001406:	f003 fc02 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800140a:	2200      	movs	r2, #0
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	48d0      	ldr	r0, [pc, #832]	; (8001750 <letter+0x10f8>)
 8001410:	f003 fbfd 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001414:	2200      	movs	r2, #0
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	48cd      	ldr	r0, [pc, #820]	; (8001750 <letter+0x10f8>)
 800141a:	f003 fbf8 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800141e:	2201      	movs	r2, #1
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	48cc      	ldr	r0, [pc, #816]	; (8001754 <letter+0x10fc>)
 8001424:	f003 fbf3 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800142e:	48c9      	ldr	r0, [pc, #804]	; (8001754 <letter+0x10fc>)
 8001430:	f003 fbed 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143a:	48c6      	ldr	r0, [pc, #792]	; (8001754 <letter+0x10fc>)
 800143c:	f003 fbe7 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001446:	48c3      	ldr	r0, [pc, #780]	; (8001754 <letter+0x10fc>)
 8001448:	f003 fbe1 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001452:	48c1      	ldr	r0, [pc, #772]	; (8001758 <letter+0x1100>)
 8001454:	f003 fbdb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001458:	2002      	movs	r0, #2
 800145a:	f002 ff2f 	bl	80042bc <HAL_Delay>
	}
	if(L == 'r')
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b72      	cmp	r3, #114	; 0x72
 8001462:	d13b      	bne.n	80014dc <letter+0xe84>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146a:	48bb      	ldr	r0, [pc, #748]	; (8001758 <letter+0x1100>)
 800146c:	f003 fbcf 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001476:	48b6      	ldr	r0, [pc, #728]	; (8001750 <letter+0x10f8>)
 8001478:	f003 fbc9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001482:	48b3      	ldr	r0, [pc, #716]	; (8001750 <letter+0x10f8>)
 8001484:	f003 fbc3 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001488:	2200      	movs	r2, #0
 800148a:	2140      	movs	r1, #64	; 0x40
 800148c:	48b0      	ldr	r0, [pc, #704]	; (8001750 <letter+0x10f8>)
 800148e:	f003 fbbe 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001492:	2200      	movs	r2, #0
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	48ae      	ldr	r0, [pc, #696]	; (8001750 <letter+0x10f8>)
 8001498:	f003 fbb9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800149c:	2201      	movs	r2, #1
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	48ac      	ldr	r0, [pc, #688]	; (8001754 <letter+0x10fc>)
 80014a2:	f003 fbb4 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80014a6:	2201      	movs	r2, #1
 80014a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ac:	48a9      	ldr	r0, [pc, #676]	; (8001754 <letter+0x10fc>)
 80014ae:	f003 fbae 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b8:	48a6      	ldr	r0, [pc, #664]	; (8001754 <letter+0x10fc>)
 80014ba:	f003 fba8 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c4:	48a3      	ldr	r0, [pc, #652]	; (8001754 <letter+0x10fc>)
 80014c6:	f003 fba2 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80014ca:	2200      	movs	r2, #0
 80014cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d0:	48a1      	ldr	r0, [pc, #644]	; (8001758 <letter+0x1100>)
 80014d2:	f003 fb9c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014d6:	2002      	movs	r0, #2
 80014d8:	f002 fef0 	bl	80042bc <HAL_Delay>
	}
	if(L == 's')
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b73      	cmp	r3, #115	; 0x73
 80014e0:	d13b      	bne.n	800155a <letter+0xf02>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e8:	489b      	ldr	r0, [pc, #620]	; (8001758 <letter+0x1100>)
 80014ea:	f003 fb90 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	4896      	ldr	r0, [pc, #600]	; (8001750 <letter+0x10f8>)
 80014f6:	f003 fb8a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001500:	4893      	ldr	r0, [pc, #588]	; (8001750 <letter+0x10f8>)
 8001502:	f003 fb84 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001506:	2200      	movs	r2, #0
 8001508:	2140      	movs	r1, #64	; 0x40
 800150a:	4891      	ldr	r0, [pc, #580]	; (8001750 <letter+0x10f8>)
 800150c:	f003 fb7f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001510:	2200      	movs	r2, #0
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	488e      	ldr	r0, [pc, #568]	; (8001750 <letter+0x10f8>)
 8001516:	f003 fb7a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800151a:	2201      	movs	r2, #1
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	488d      	ldr	r0, [pc, #564]	; (8001754 <letter+0x10fc>)
 8001520:	f003 fb75 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001524:	2201      	movs	r2, #1
 8001526:	f44f 7180 	mov.w	r1, #256	; 0x100
 800152a:	488a      	ldr	r0, [pc, #552]	; (8001754 <letter+0x10fc>)
 800152c:	f003 fb6f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001536:	4887      	ldr	r0, [pc, #540]	; (8001754 <letter+0x10fc>)
 8001538:	f003 fb69 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001542:	4884      	ldr	r0, [pc, #528]	; (8001754 <letter+0x10fc>)
 8001544:	f003 fb63 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154e:	4882      	ldr	r0, [pc, #520]	; (8001758 <letter+0x1100>)
 8001550:	f003 fb5d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001554:	2002      	movs	r0, #2
 8001556:	f002 feb1 	bl	80042bc <HAL_Delay>
	}
	if(L == 'T')
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b54      	cmp	r3, #84	; 0x54
 800155e:	d13b      	bne.n	80015d8 <letter+0xf80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001566:	487c      	ldr	r0, [pc, #496]	; (8001758 <letter+0x1100>)
 8001568:	f003 fb51 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001572:	4877      	ldr	r0, [pc, #476]	; (8001750 <letter+0x10f8>)
 8001574:	f003 fb4b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001578:	2200      	movs	r2, #0
 800157a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157e:	4874      	ldr	r0, [pc, #464]	; (8001750 <letter+0x10f8>)
 8001580:	f003 fb45 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001584:	2201      	movs	r2, #1
 8001586:	2140      	movs	r1, #64	; 0x40
 8001588:	4871      	ldr	r0, [pc, #452]	; (8001750 <letter+0x10f8>)
 800158a:	f003 fb40 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800158e:	2200      	movs	r2, #0
 8001590:	2180      	movs	r1, #128	; 0x80
 8001592:	486f      	ldr	r0, [pc, #444]	; (8001750 <letter+0x10f8>)
 8001594:	f003 fb3b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001598:	2201      	movs	r2, #1
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	486d      	ldr	r0, [pc, #436]	; (8001754 <letter+0x10fc>)
 800159e:	f003 fb36 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a8:	486a      	ldr	r0, [pc, #424]	; (8001754 <letter+0x10fc>)
 80015aa:	f003 fb30 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	4867      	ldr	r0, [pc, #412]	; (8001754 <letter+0x10fc>)
 80015b6:	f003 fb2a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c0:	4864      	ldr	r0, [pc, #400]	; (8001754 <letter+0x10fc>)
 80015c2:	f003 fb24 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015cc:	4862      	ldr	r0, [pc, #392]	; (8001758 <letter+0x1100>)
 80015ce:	f003 fb1e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f002 fe72 	bl	80042bc <HAL_Delay>
	}
	if(L == 't')
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b74      	cmp	r3, #116	; 0x74
 80015dc:	d13b      	bne.n	8001656 <letter+0xffe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e4:	485c      	ldr	r0, [pc, #368]	; (8001758 <letter+0x1100>)
 80015e6:	f003 fb12 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f0:	4857      	ldr	r0, [pc, #348]	; (8001750 <letter+0x10f8>)
 80015f2:	f003 fb0c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fc:	4854      	ldr	r0, [pc, #336]	; (8001750 <letter+0x10f8>)
 80015fe:	f003 fb06 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001602:	2201      	movs	r2, #1
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4852      	ldr	r0, [pc, #328]	; (8001750 <letter+0x10f8>)
 8001608:	f003 fb01 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800160c:	2200      	movs	r2, #0
 800160e:	2180      	movs	r1, #128	; 0x80
 8001610:	484f      	ldr	r0, [pc, #316]	; (8001750 <letter+0x10f8>)
 8001612:	f003 fafc 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001616:	2201      	movs	r2, #1
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	484e      	ldr	r0, [pc, #312]	; (8001754 <letter+0x10fc>)
 800161c:	f003 faf7 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001626:	484b      	ldr	r0, [pc, #300]	; (8001754 <letter+0x10fc>)
 8001628:	f003 faf1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001632:	4848      	ldr	r0, [pc, #288]	; (8001754 <letter+0x10fc>)
 8001634:	f003 faeb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163e:	4845      	ldr	r0, [pc, #276]	; (8001754 <letter+0x10fc>)
 8001640:	f003 fae5 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800164a:	4843      	ldr	r0, [pc, #268]	; (8001758 <letter+0x1100>)
 800164c:	f003 fadf 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001650:	2002      	movs	r0, #2
 8001652:	f002 fe33 	bl	80042bc <HAL_Delay>
	}
	if(L == 'u')
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b75      	cmp	r3, #117	; 0x75
 800165a:	d13b      	bne.n	80016d4 <letter+0x107c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001662:	483d      	ldr	r0, [pc, #244]	; (8001758 <letter+0x1100>)
 8001664:	f003 fad3 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 8001668:	2201      	movs	r2, #1
 800166a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166e:	4838      	ldr	r0, [pc, #224]	; (8001750 <letter+0x10f8>)
 8001670:	f003 facd 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167a:	4835      	ldr	r0, [pc, #212]	; (8001750 <letter+0x10f8>)
 800167c:	f003 fac7 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001680:	2201      	movs	r2, #1
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	4832      	ldr	r0, [pc, #200]	; (8001750 <letter+0x10f8>)
 8001686:	f003 fac2 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800168a:	2200      	movs	r2, #0
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	4830      	ldr	r0, [pc, #192]	; (8001750 <letter+0x10f8>)
 8001690:	f003 fabd 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001694:	2201      	movs	r2, #1
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	482e      	ldr	r0, [pc, #184]	; (8001754 <letter+0x10fc>)
 800169a:	f003 fab8 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a4:	482b      	ldr	r0, [pc, #172]	; (8001754 <letter+0x10fc>)
 80016a6:	f003 fab2 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b0:	4828      	ldr	r0, [pc, #160]	; (8001754 <letter+0x10fc>)
 80016b2:	f003 faac 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016bc:	4825      	ldr	r0, [pc, #148]	; (8001754 <letter+0x10fc>)
 80016be:	f003 faa6 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c8:	4823      	ldr	r0, [pc, #140]	; (8001758 <letter+0x1100>)
 80016ca:	f003 faa0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016ce:	2002      	movs	r0, #2
 80016d0:	f002 fdf4 	bl	80042bc <HAL_Delay>
	}
	if(L == 'v')
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2b76      	cmp	r3, #118	; 0x76
 80016d8:	d142      	bne.n	8001760 <letter+0x1108>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016da:	2201      	movs	r2, #1
 80016dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e0:	481d      	ldr	r0, [pc, #116]	; (8001758 <letter+0x1100>)
 80016e2:	f003 fa94 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ec:	4818      	ldr	r0, [pc, #96]	; (8001750 <letter+0x10f8>)
 80016ee:	f003 fa8e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f8:	4815      	ldr	r0, [pc, #84]	; (8001750 <letter+0x10f8>)
 80016fa:	f003 fa88 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016fe:	2201      	movs	r2, #1
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	4813      	ldr	r0, [pc, #76]	; (8001750 <letter+0x10f8>)
 8001704:	f003 fa83 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001708:	2200      	movs	r2, #0
 800170a:	2180      	movs	r1, #128	; 0x80
 800170c:	4810      	ldr	r0, [pc, #64]	; (8001750 <letter+0x10f8>)
 800170e:	f003 fa7e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001712:	2201      	movs	r2, #1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	480f      	ldr	r0, [pc, #60]	; (8001754 <letter+0x10fc>)
 8001718:	f003 fa79 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001722:	480c      	ldr	r0, [pc, #48]	; (8001754 <letter+0x10fc>)
 8001724:	f003 fa73 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <letter+0x10fc>)
 8001730:	f003 fa6d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <letter+0x10fc>)
 800173c:	f003 fa67 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001746:	4804      	ldr	r0, [pc, #16]	; (8001758 <letter+0x1100>)
 8001748:	f003 fa61 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800174c:	2002      	movs	r0, #2
 800174e:	e005      	b.n	800175c <letter+0x1104>
 8001750:	40011000 	.word	0x40011000
 8001754:	40010800 	.word	0x40010800
 8001758:	40010c00 	.word	0x40010c00
 800175c:	f002 fdae 	bl	80042bc <HAL_Delay>
	}
	if(L == 'W')
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b57      	cmp	r3, #87	; 0x57
 8001764:	d13b      	bne.n	80017de <letter+0x1186>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176c:	48d5      	ldr	r0, [pc, #852]	; (8001ac4 <letter+0x146c>)
 800176e:	f003 fa4e 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001778:	48d3      	ldr	r0, [pc, #844]	; (8001ac8 <letter+0x1470>)
 800177a:	f003 fa48 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001784:	48d0      	ldr	r0, [pc, #832]	; (8001ac8 <letter+0x1470>)
 8001786:	f003 fa42 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800178a:	2201      	movs	r2, #1
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	48ce      	ldr	r0, [pc, #824]	; (8001ac8 <letter+0x1470>)
 8001790:	f003 fa3d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001794:	2200      	movs	r2, #0
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	48cb      	ldr	r0, [pc, #812]	; (8001ac8 <letter+0x1470>)
 800179a:	f003 fa38 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800179e:	2201      	movs	r2, #1
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	48ca      	ldr	r0, [pc, #808]	; (8001acc <letter+0x1474>)
 80017a4:	f003 fa33 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ae:	48c7      	ldr	r0, [pc, #796]	; (8001acc <letter+0x1474>)
 80017b0:	f003 fa2d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ba:	48c4      	ldr	r0, [pc, #784]	; (8001acc <letter+0x1474>)
 80017bc:	f003 fa27 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c6:	48c1      	ldr	r0, [pc, #772]	; (8001acc <letter+0x1474>)
 80017c8:	f003 fa21 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80017cc:	2200      	movs	r2, #0
 80017ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d2:	48bc      	ldr	r0, [pc, #752]	; (8001ac4 <letter+0x146c>)
 80017d4:	f003 fa1b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017d8:	2002      	movs	r0, #2
 80017da:	f002 fd6f 	bl	80042bc <HAL_Delay>
	}
	if(L == 'w')
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b77      	cmp	r3, #119	; 0x77
 80017e2:	d13b      	bne.n	800185c <letter+0x1204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ea:	48b6      	ldr	r0, [pc, #728]	; (8001ac4 <letter+0x146c>)
 80017ec:	f003 fa0f 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 80017f0:	2201      	movs	r2, #1
 80017f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f6:	48b4      	ldr	r0, [pc, #720]	; (8001ac8 <letter+0x1470>)
 80017f8:	f003 fa09 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001802:	48b1      	ldr	r0, [pc, #708]	; (8001ac8 <letter+0x1470>)
 8001804:	f003 fa03 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001808:	2201      	movs	r2, #1
 800180a:	2140      	movs	r1, #64	; 0x40
 800180c:	48ae      	ldr	r0, [pc, #696]	; (8001ac8 <letter+0x1470>)
 800180e:	f003 f9fe 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001812:	2200      	movs	r2, #0
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	48ac      	ldr	r0, [pc, #688]	; (8001ac8 <letter+0x1470>)
 8001818:	f003 f9f9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800181c:	2201      	movs	r2, #1
 800181e:	2180      	movs	r1, #128	; 0x80
 8001820:	48aa      	ldr	r0, [pc, #680]	; (8001acc <letter+0x1474>)
 8001822:	f003 f9f4 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800182c:	48a7      	ldr	r0, [pc, #668]	; (8001acc <letter+0x1474>)
 800182e:	f003 f9ee 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001832:	2201      	movs	r2, #1
 8001834:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001838:	48a4      	ldr	r0, [pc, #656]	; (8001acc <letter+0x1474>)
 800183a:	f003 f9e8 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001844:	48a1      	ldr	r0, [pc, #644]	; (8001acc <letter+0x1474>)
 8001846:	f003 f9e2 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001850:	489c      	ldr	r0, [pc, #624]	; (8001ac4 <letter+0x146c>)
 8001852:	f003 f9dc 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001856:	2002      	movs	r0, #2
 8001858:	f002 fd30 	bl	80042bc <HAL_Delay>
	}
	if(L == 'y')
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	2b79      	cmp	r3, #121	; 0x79
 8001860:	d13b      	bne.n	80018da <letter+0x1282>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001868:	4896      	ldr	r0, [pc, #600]	; (8001ac4 <letter+0x146c>)
 800186a:	f003 f9d0 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 800186e:	2201      	movs	r2, #1
 8001870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001874:	4894      	ldr	r0, [pc, #592]	; (8001ac8 <letter+0x1470>)
 8001876:	f003 f9ca 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001880:	4891      	ldr	r0, [pc, #580]	; (8001ac8 <letter+0x1470>)
 8001882:	f003 f9c4 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001886:	2200      	movs	r2, #0
 8001888:	2140      	movs	r1, #64	; 0x40
 800188a:	488f      	ldr	r0, [pc, #572]	; (8001ac8 <letter+0x1470>)
 800188c:	f003 f9bf 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001890:	2201      	movs	r2, #1
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	488c      	ldr	r0, [pc, #560]	; (8001ac8 <letter+0x1470>)
 8001896:	f003 f9ba 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800189a:	2201      	movs	r2, #1
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	488b      	ldr	r0, [pc, #556]	; (8001acc <letter+0x1474>)
 80018a0:	f003 f9b5 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018aa:	4888      	ldr	r0, [pc, #544]	; (8001acc <letter+0x1474>)
 80018ac:	f003 f9af 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b6:	4885      	ldr	r0, [pc, #532]	; (8001acc <letter+0x1474>)
 80018b8:	f003 f9a9 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c2:	4882      	ldr	r0, [pc, #520]	; (8001acc <letter+0x1474>)
 80018c4:	f003 f9a3 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ce:	487d      	ldr	r0, [pc, #500]	; (8001ac4 <letter+0x146c>)
 80018d0:	f003 f99d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018d4:	2002      	movs	r0, #2
 80018d6:	f002 fcf1 	bl	80042bc <HAL_Delay>
	}
	if(L == '0')
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b30      	cmp	r3, #48	; 0x30
 80018de:	d13b      	bne.n	8001958 <letter+0x1300>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80018e0:	2201      	movs	r2, #1
 80018e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e6:	4877      	ldr	r0, [pc, #476]	; (8001ac4 <letter+0x146c>)
 80018e8:	f003 f991 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f2:	4875      	ldr	r0, [pc, #468]	; (8001ac8 <letter+0x1470>)
 80018f4:	f003 f98b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018fe:	4872      	ldr	r0, [pc, #456]	; (8001ac8 <letter+0x1470>)
 8001900:	f003 f985 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001904:	2200      	movs	r2, #0
 8001906:	2140      	movs	r1, #64	; 0x40
 8001908:	486f      	ldr	r0, [pc, #444]	; (8001ac8 <letter+0x1470>)
 800190a:	f003 f980 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800190e:	2200      	movs	r2, #0
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	486d      	ldr	r0, [pc, #436]	; (8001ac8 <letter+0x1470>)
 8001914:	f003 f97b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001918:	2201      	movs	r2, #1
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	486b      	ldr	r0, [pc, #428]	; (8001acc <letter+0x1474>)
 800191e:	f003 f976 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001922:	2201      	movs	r2, #1
 8001924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001928:	4868      	ldr	r0, [pc, #416]	; (8001acc <letter+0x1474>)
 800192a:	f003 f970 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001934:	4865      	ldr	r0, [pc, #404]	; (8001acc <letter+0x1474>)
 8001936:	f003 f96a 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001940:	4862      	ldr	r0, [pc, #392]	; (8001acc <letter+0x1474>)
 8001942:	f003 f964 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001946:	2200      	movs	r2, #0
 8001948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800194c:	485d      	ldr	r0, [pc, #372]	; (8001ac4 <letter+0x146c>)
 800194e:	f003 f95e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001952:	2002      	movs	r0, #2
 8001954:	f002 fcb2 	bl	80042bc <HAL_Delay>
	}
	if(L == '1')
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	2b31      	cmp	r3, #49	; 0x31
 800195c:	d13b      	bne.n	80019d6 <letter+0x137e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001964:	4857      	ldr	r0, [pc, #348]	; (8001ac4 <letter+0x146c>)
 8001966:	f003 f952 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 800196a:	2201      	movs	r2, #1
 800196c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001970:	4855      	ldr	r0, [pc, #340]	; (8001ac8 <letter+0x1470>)
 8001972:	f003 f94c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 7180 	mov.w	r1, #256	; 0x100
 800197c:	4852      	ldr	r0, [pc, #328]	; (8001ac8 <letter+0x1470>)
 800197e:	f003 f946 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001982:	2200      	movs	r2, #0
 8001984:	2140      	movs	r1, #64	; 0x40
 8001986:	4850      	ldr	r0, [pc, #320]	; (8001ac8 <letter+0x1470>)
 8001988:	f003 f941 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800198c:	2200      	movs	r2, #0
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	484d      	ldr	r0, [pc, #308]	; (8001ac8 <letter+0x1470>)
 8001992:	f003 f93c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001996:	2201      	movs	r2, #1
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	484c      	ldr	r0, [pc, #304]	; (8001acc <letter+0x1474>)
 800199c:	f003 f937 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a6:	4849      	ldr	r0, [pc, #292]	; (8001acc <letter+0x1474>)
 80019a8:	f003 f931 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019b2:	4846      	ldr	r0, [pc, #280]	; (8001acc <letter+0x1474>)
 80019b4:	f003 f92b 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019be:	4843      	ldr	r0, [pc, #268]	; (8001acc <letter+0x1474>)
 80019c0:	f003 f925 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ca:	483e      	ldr	r0, [pc, #248]	; (8001ac4 <letter+0x146c>)
 80019cc:	f003 f91f 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80019d0:	2002      	movs	r0, #2
 80019d2:	f002 fc73 	bl	80042bc <HAL_Delay>
	}
	if(L == '2')
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b32      	cmp	r3, #50	; 0x32
 80019da:	d138      	bne.n	8001a4e <letter+0x13f6>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80019dc:	2201      	movs	r2, #1
 80019de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e2:	4838      	ldr	r0, [pc, #224]	; (8001ac4 <letter+0x146c>)
 80019e4:	f003 f913 	bl	8004c0e <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ee:	4836      	ldr	r0, [pc, #216]	; (8001ac8 <letter+0x1470>)
 80019f0:	f003 f90d 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fa:	4833      	ldr	r0, [pc, #204]	; (8001ac8 <letter+0x1470>)
 80019fc:	f003 f907 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001a00:	2200      	movs	r2, #0
 8001a02:	2140      	movs	r1, #64	; 0x40
 8001a04:	4830      	ldr	r0, [pc, #192]	; (8001ac8 <letter+0x1470>)
 8001a06:	f003 f902 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	482e      	ldr	r0, [pc, #184]	; (8001ac8 <letter+0x1470>)
 8001a10:	f003 f8fd 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001a14:	2201      	movs	r2, #1
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	482c      	ldr	r0, [pc, #176]	; (8001acc <letter+0x1474>)
 8001a1a:	f003 f8f8 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a24:	4829      	ldr	r0, [pc, #164]	; (8001acc <letter+0x1474>)
 8001a26:	f003 f8f2 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a30:	4826      	ldr	r0, [pc, #152]	; (8001acc <letter+0x1474>)
 8001a32:	f003 f8ec 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001a36:	2200      	movs	r2, #0
 8001a38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a3c:	4823      	ldr	r0, [pc, #140]	; (8001acc <letter+0x1474>)
 8001a3e:	f003 f8e6 	bl	8004c0e <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a48:	481e      	ldr	r0, [pc, #120]	; (8001ac4 <letter+0x146c>)
 8001a4a:	f003 f8e0 	bl	8004c0e <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b33      	cmp	r3, #51	; 0x33
 8001a52:	d143      	bne.n	8001adc <letter+0x1484>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a5a:	481a      	ldr	r0, [pc, #104]	; (8001ac4 <letter+0x146c>)
 8001a5c:	f003 f8d7 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a66:	4818      	ldr	r0, [pc, #96]	; (8001ac8 <letter+0x1470>)
 8001a68:	f003 f8d1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a72:	4815      	ldr	r0, [pc, #84]	; (8001ac8 <letter+0x1470>)
 8001a74:	f003 f8cb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2140      	movs	r1, #64	; 0x40
 8001a7c:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <letter+0x1470>)
 8001a7e:	f003 f8c6 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001a82:	2200      	movs	r2, #0
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	4810      	ldr	r0, [pc, #64]	; (8001ac8 <letter+0x1470>)
 8001a88:	f003 f8c1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2180      	movs	r1, #128	; 0x80
 8001a90:	480e      	ldr	r0, [pc, #56]	; (8001acc <letter+0x1474>)
 8001a92:	f003 f8bc 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <letter+0x1474>)
 8001a9e:	f003 f8b6 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aa8:	4808      	ldr	r0, [pc, #32]	; (8001acc <letter+0x1474>)
 8001aaa:	f003 f8b0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab4:	4805      	ldr	r0, [pc, #20]	; (8001acc <letter+0x1474>)
 8001ab6:	f003 f8aa 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac0:	e006      	b.n	8001ad0 <letter+0x1478>
 8001ac2:	bf00      	nop
 8001ac4:	40010c00 	.word	0x40010c00
 8001ac8:	40011000 	.word	0x40011000
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	48c1      	ldr	r0, [pc, #772]	; (8001dd8 <letter+0x1780>)
 8001ad2:	f003 f89c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f002 fbf0 	bl	80042bc <HAL_Delay>
	}
	if(L == '4')
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b34      	cmp	r3, #52	; 0x34
 8001ae0:	d13b      	bne.n	8001b5a <letter+0x1502>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae8:	48bb      	ldr	r0, [pc, #748]	; (8001dd8 <letter+0x1780>)
 8001aea:	f003 f890 	bl	8004c0e <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af4:	48b9      	ldr	r0, [pc, #740]	; (8001ddc <letter+0x1784>)
 8001af6:	f003 f88a 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b00:	48b6      	ldr	r0, [pc, #728]	; (8001ddc <letter+0x1784>)
 8001b02:	f003 f884 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001b06:	2201      	movs	r2, #1
 8001b08:	2140      	movs	r1, #64	; 0x40
 8001b0a:	48b4      	ldr	r0, [pc, #720]	; (8001ddc <letter+0x1784>)
 8001b0c:	f003 f87f 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001b10:	2200      	movs	r2, #0
 8001b12:	2180      	movs	r1, #128	; 0x80
 8001b14:	48b1      	ldr	r0, [pc, #708]	; (8001ddc <letter+0x1784>)
 8001b16:	f003 f87a 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	48b0      	ldr	r0, [pc, #704]	; (8001de0 <letter+0x1788>)
 8001b20:	f003 f875 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2a:	48ad      	ldr	r0, [pc, #692]	; (8001de0 <letter+0x1788>)
 8001b2c:	f003 f86f 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b36:	48aa      	ldr	r0, [pc, #680]	; (8001de0 <letter+0x1788>)
 8001b38:	f003 f869 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b42:	48a7      	ldr	r0, [pc, #668]	; (8001de0 <letter+0x1788>)
 8001b44:	f003 f863 	bl	8004c0e <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b4e:	48a2      	ldr	r0, [pc, #648]	; (8001dd8 <letter+0x1780>)
 8001b50:	f003 f85d 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001b54:	2002      	movs	r0, #2
 8001b56:	f002 fbb1 	bl	80042bc <HAL_Delay>
	}
	if(L == '5')
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b35      	cmp	r3, #53	; 0x35
 8001b5e:	d13b      	bne.n	8001bd8 <letter+0x1580>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	489c      	ldr	r0, [pc, #624]	; (8001dd8 <letter+0x1780>)
 8001b68:	f003 f851 	bl	8004c0e <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b72:	489a      	ldr	r0, [pc, #616]	; (8001ddc <letter+0x1784>)
 8001b74:	f003 f84b 	bl	8004c0e <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b7e:	4897      	ldr	r0, [pc, #604]	; (8001ddc <letter+0x1784>)
 8001b80:	f003 f845 	bl	8004c0e <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001b84:	2201      	movs	r2, #1
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	4894      	ldr	r0, [pc, #592]	; (8001ddc <letter+0x1784>)
 8001b8a:	f003 f840 	bl	8004c0e <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	4892      	ldr	r0, [pc, #584]	; (8001ddc <letter+0x1784>)
 8001b94:	f003 f83b 	bl	8004c0e <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	4890      	ldr	r0, [pc, #576]	; (8001de0 <letter+0x1788>)
 8001b9e:	f003 f836 	bl	8004c0e <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba8:	488d      	ldr	r0, [pc, #564]	; (8001de0 <letter+0x1788>)
 8001baa:	f003 f830 	bl	8004c0e <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb4:	488a      	ldr	r0, [pc, #552]	; (8001de0 <letter+0x1788>)
 8001bb6:	f003 f82a 	bl	8004c0e <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bc0:	4887      	ldr	r0, [pc, #540]	; (8001de0 <letter+0x1788>)
 8001bc2:	f003 f824 	bl	8004c0e <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bcc:	4882      	ldr	r0, [pc, #520]	; (8001dd8 <letter+0x1780>)
 8001bce:	f003 f81e 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f002 fb72 	bl	80042bc <HAL_Delay>
	}
	if(L == '6')
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	2b36      	cmp	r3, #54	; 0x36
 8001bdc:	d13b      	bne.n	8001c56 <letter+0x15fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001bde:	2201      	movs	r2, #1
 8001be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be4:	487c      	ldr	r0, [pc, #496]	; (8001dd8 <letter+0x1780>)
 8001be6:	f003 f812 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf0:	487a      	ldr	r0, [pc, #488]	; (8001ddc <letter+0x1784>)
 8001bf2:	f003 f80c 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfc:	4877      	ldr	r0, [pc, #476]	; (8001ddc <letter+0x1784>)
 8001bfe:	f003 f806 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001c02:	2201      	movs	r2, #1
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	4875      	ldr	r0, [pc, #468]	; (8001ddc <letter+0x1784>)
 8001c08:	f003 f801 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	4872      	ldr	r0, [pc, #456]	; (8001ddc <letter+0x1784>)
 8001c12:	f002 fffc 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001c16:	2201      	movs	r2, #1
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	4871      	ldr	r0, [pc, #452]	; (8001de0 <letter+0x1788>)
 8001c1c:	f002 fff7 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c26:	486e      	ldr	r0, [pc, #440]	; (8001de0 <letter+0x1788>)
 8001c28:	f002 fff1 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c32:	486b      	ldr	r0, [pc, #428]	; (8001de0 <letter+0x1788>)
 8001c34:	f002 ffeb 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c3e:	4868      	ldr	r0, [pc, #416]	; (8001de0 <letter+0x1788>)
 8001c40:	f002 ffe5 	bl	8004c0e <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c4a:	4863      	ldr	r0, [pc, #396]	; (8001dd8 <letter+0x1780>)
 8001c4c:	f002 ffdf 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001c50:	2002      	movs	r0, #2
 8001c52:	f002 fb33 	bl	80042bc <HAL_Delay>
	}
	if(L == '7')
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b37      	cmp	r3, #55	; 0x37
 8001c5a:	d13b      	bne.n	8001cd4 <letter+0x167c>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c62:	485d      	ldr	r0, [pc, #372]	; (8001dd8 <letter+0x1780>)
 8001c64:	f002 ffd3 	bl	8004c0e <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c6e:	485b      	ldr	r0, [pc, #364]	; (8001ddc <letter+0x1784>)
 8001c70:	f002 ffcd 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c7a:	4858      	ldr	r0, [pc, #352]	; (8001ddc <letter+0x1784>)
 8001c7c:	f002 ffc7 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001c80:	2201      	movs	r2, #1
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	4855      	ldr	r0, [pc, #340]	; (8001ddc <letter+0x1784>)
 8001c86:	f002 ffc2 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	4853      	ldr	r0, [pc, #332]	; (8001ddc <letter+0x1784>)
 8001c90:	f002 ffbd 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001c94:	2201      	movs	r2, #1
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	4851      	ldr	r0, [pc, #324]	; (8001de0 <letter+0x1788>)
 8001c9a:	f002 ffb8 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca4:	484e      	ldr	r0, [pc, #312]	; (8001de0 <letter+0x1788>)
 8001ca6:	f002 ffb2 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb0:	484b      	ldr	r0, [pc, #300]	; (8001de0 <letter+0x1788>)
 8001cb2:	f002 ffac 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cbc:	4848      	ldr	r0, [pc, #288]	; (8001de0 <letter+0x1788>)
 8001cbe:	f002 ffa6 	bl	8004c0e <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc8:	4843      	ldr	r0, [pc, #268]	; (8001dd8 <letter+0x1780>)
 8001cca:	f002 ffa0 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f002 faf4 	bl	80042bc <HAL_Delay>
	}
	if(L == '8')
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	2b38      	cmp	r3, #56	; 0x38
 8001cd8:	d13b      	bne.n	8001d52 <letter+0x16fa>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce0:	483d      	ldr	r0, [pc, #244]	; (8001dd8 <letter+0x1780>)
 8001ce2:	f002 ff94 	bl	8004c0e <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cec:	483b      	ldr	r0, [pc, #236]	; (8001ddc <letter+0x1784>)
 8001cee:	f002 ff8e 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cf8:	4838      	ldr	r0, [pc, #224]	; (8001ddc <letter+0x1784>)
 8001cfa:	f002 ff88 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2140      	movs	r1, #64	; 0x40
 8001d02:	4836      	ldr	r0, [pc, #216]	; (8001ddc <letter+0x1784>)
 8001d04:	f002 ff83 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001d08:	2201      	movs	r2, #1
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	4833      	ldr	r0, [pc, #204]	; (8001ddc <letter+0x1784>)
 8001d0e:	f002 ff7e 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001d12:	2201      	movs	r2, #1
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	4832      	ldr	r0, [pc, #200]	; (8001de0 <letter+0x1788>)
 8001d18:	f002 ff79 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d22:	482f      	ldr	r0, [pc, #188]	; (8001de0 <letter+0x1788>)
 8001d24:	f002 ff73 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2e:	482c      	ldr	r0, [pc, #176]	; (8001de0 <letter+0x1788>)
 8001d30:	f002 ff6d 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d3a:	4829      	ldr	r0, [pc, #164]	; (8001de0 <letter+0x1788>)
 8001d3c:	f002 ff67 	bl	8004c0e <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d46:	4824      	ldr	r0, [pc, #144]	; (8001dd8 <letter+0x1780>)
 8001d48:	f002 ff61 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f002 fab5 	bl	80042bc <HAL_Delay>
	}
	if(L =='9')
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	2b39      	cmp	r3, #57	; 0x39
 8001d56:	d13b      	bne.n	8001dd0 <letter+0x1778>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d5e:	481e      	ldr	r0, [pc, #120]	; (8001dd8 <letter+0x1780>)
 8001d60:	f002 ff55 	bl	8004c0e <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d6a:	481c      	ldr	r0, [pc, #112]	; (8001ddc <letter+0x1784>)
 8001d6c:	f002 ff4f 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d76:	4819      	ldr	r0, [pc, #100]	; (8001ddc <letter+0x1784>)
 8001d78:	f002 ff49 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	4816      	ldr	r0, [pc, #88]	; (8001ddc <letter+0x1784>)
 8001d82:	f002 ff44 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001d86:	2201      	movs	r2, #1
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	4814      	ldr	r0, [pc, #80]	; (8001ddc <letter+0x1784>)
 8001d8c:	f002 ff3f 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001d90:	2201      	movs	r2, #1
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	4812      	ldr	r0, [pc, #72]	; (8001de0 <letter+0x1788>)
 8001d96:	f002 ff3a 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001da0:	480f      	ldr	r0, [pc, #60]	; (8001de0 <letter+0x1788>)
 8001da2:	f002 ff34 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001da6:	2200      	movs	r2, #0
 8001da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dac:	480c      	ldr	r0, [pc, #48]	; (8001de0 <letter+0x1788>)
 8001dae:	f002 ff2e 	bl	8004c0e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <letter+0x1788>)
 8001dba:	f002 ff28 	bl	8004c0e <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <letter+0x1780>)
 8001dc6:	f002 ff22 	bl	8004c0e <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001dca:	2002      	movs	r0, #2
 8001dcc:	f002 fa76 	bl	80042bc <HAL_Delay>
	}

}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40010c00 	.word	0x40010c00
 8001ddc:	40011000 	.word	0x40011000
 8001de0:	40010800 	.word	0x40010800

08001de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de8:	f002 fa36 	bl	8004258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dec:	f000 f8bc 	bl	8001f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df0:	f000 fa3e 	bl	8002270 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001df4:	f000 f99c 	bl	8002130 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001df8:	f000 fa10 	bl	800221c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001dfc:	f000 f9e4 	bl	80021c8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001e00:	f000 f908 	bl	8002014 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001e04:	f000 f944 	bl	8002090 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001e08:	f004 fad6 	bl	80063b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8001e0c:	4a35      	ldr	r2, [pc, #212]	; (8001ee4 <main+0x100>)
 8001e0e:	2102      	movs	r1, #2
 8001e10:	2008      	movs	r0, #8
 8001e12:	f004 fc0f 	bl	8006634 <osMessageQueueNew>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4a33      	ldr	r2, [pc, #204]	; (8001ee8 <main+0x104>)
 8001e1a:	6013      	str	r3, [r2, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8001e1c:	4a33      	ldr	r2, [pc, #204]	; (8001eec <main+0x108>)
 8001e1e:	2102      	movs	r1, #2
 8001e20:	2008      	movs	r0, #8
 8001e22:	f004 fc07 	bl	8006634 <osMessageQueueNew>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a31      	ldr	r2, [pc, #196]	; (8001ef0 <main+0x10c>)
 8001e2a:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8001e2c:	4a31      	ldr	r2, [pc, #196]	; (8001ef4 <main+0x110>)
 8001e2e:	2102      	movs	r1, #2
 8001e30:	2008      	movs	r0, #8
 8001e32:	f004 fbff 	bl	8006634 <osMessageQueueNew>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a2f      	ldr	r2, [pc, #188]	; (8001ef8 <main+0x114>)
 8001e3a:	6013      	str	r3, [r2, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8001e3c:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <main+0x118>)
 8001e3e:	2102      	movs	r1, #2
 8001e40:	2008      	movs	r0, #8
 8001e42:	f004 fbf7 	bl	8006634 <osMessageQueueNew>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <main+0x11c>)
 8001e4a:	6013      	str	r3, [r2, #0]

  /* creation of WebsiteQueue */
  WebsiteQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WebsiteQueue_attributes);
 8001e4c:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <main+0x120>)
 8001e4e:	2102      	movs	r1, #2
 8001e50:	2008      	movs	r0, #8
 8001e52:	f004 fbef 	bl	8006634 <osMessageQueueNew>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <main+0x124>)
 8001e5a:	6013      	str	r3, [r2, #0]

  /* creation of ProcessQueue */
  ProcessQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &ProcessQueue_attributes);
 8001e5c:	4a2b      	ldr	r2, [pc, #172]	; (8001f0c <main+0x128>)
 8001e5e:	2102      	movs	r1, #2
 8001e60:	2008      	movs	r0, #8
 8001e62:	f004 fbe7 	bl	8006634 <osMessageQueueNew>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <main+0x12c>)
 8001e6a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 8001e6c:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <main+0x130>)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4829      	ldr	r0, [pc, #164]	; (8001f18 <main+0x134>)
 8001e72:	f004 fb07 	bl	8006484 <osThreadNew>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a28      	ldr	r2, [pc, #160]	; (8001f1c <main+0x138>)
 8001e7a:	6013      	str	r3, [r2, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 8001e7c:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <main+0x13c>)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4828      	ldr	r0, [pc, #160]	; (8001f24 <main+0x140>)
 8001e82:	f004 faff 	bl	8006484 <osThreadNew>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a27      	ldr	r2, [pc, #156]	; (8001f28 <main+0x144>)
 8001e8a:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <main+0x148>)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4827      	ldr	r0, [pc, #156]	; (8001f30 <main+0x14c>)
 8001e92:	f004 faf7 	bl	8006484 <osThreadNew>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4a26      	ldr	r2, [pc, #152]	; (8001f34 <main+0x150>)
 8001e9a:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 8001e9c:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <main+0x154>)
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	4826      	ldr	r0, [pc, #152]	; (8001f3c <main+0x158>)
 8001ea2:	f004 faef 	bl	8006484 <osThreadNew>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <main+0x15c>)
 8001eaa:	6013      	str	r3, [r2, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 8001eac:	4a25      	ldr	r2, [pc, #148]	; (8001f44 <main+0x160>)
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4825      	ldr	r0, [pc, #148]	; (8001f48 <main+0x164>)
 8001eb2:	f004 fae7 	bl	8006484 <osThreadNew>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <main+0x168>)
 8001eba:	6013      	str	r3, [r2, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 8001ebc:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <main+0x16c>)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4824      	ldr	r0, [pc, #144]	; (8001f54 <main+0x170>)
 8001ec2:	f004 fadf 	bl	8006484 <osThreadNew>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a23      	ldr	r2, [pc, #140]	; (8001f58 <main+0x174>)
 8001eca:	6013      	str	r3, [r2, #0]

  /* creation of WebsiteTask */
  WebsiteTaskHandle = osThreadNew(StartWebsiteTask, NULL, &WebsiteTask_attributes);
 8001ecc:	4a23      	ldr	r2, [pc, #140]	; (8001f5c <main+0x178>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4823      	ldr	r0, [pc, #140]	; (8001f60 <main+0x17c>)
 8001ed2:	f004 fad7 	bl	8006484 <osThreadNew>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <main+0x180>)
 8001eda:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001edc:	f004 fa9e 	bl	800641c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 8001ee0:	e7fe      	b.n	8001ee0 <main+0xfc>
 8001ee2:	bf00      	nop
 8001ee4:	08009180 	.word	0x08009180
 8001ee8:	20002570 	.word	0x20002570
 8001eec:	08009198 	.word	0x08009198
 8001ef0:	20002870 	.word	0x20002870
 8001ef4:	080091b0 	.word	0x080091b0
 8001ef8:	2000256c 	.word	0x2000256c
 8001efc:	080091c8 	.word	0x080091c8
 8001f00:	20002578 	.word	0x20002578
 8001f04:	080091e0 	.word	0x080091e0
 8001f08:	2000281c 	.word	0x2000281c
 8001f0c:	080091f8 	.word	0x080091f8
 8001f10:	200027e4 	.word	0x200027e4
 8001f14:	08009084 	.word	0x08009084
 8001f18:	08002f0d 	.word	0x08002f0d
 8001f1c:	20002574 	.word	0x20002574
 8001f20:	080090a8 	.word	0x080090a8
 8001f24:	08002f1d 	.word	0x08002f1d
 8001f28:	20002820 	.word	0x20002820
 8001f2c:	080090cc 	.word	0x080090cc
 8001f30:	08003235 	.word	0x08003235
 8001f34:	200028c0 	.word	0x200028c0
 8001f38:	080090f0 	.word	0x080090f0
 8001f3c:	08003569 	.word	0x08003569
 8001f40:	20002818 	.word	0x20002818
 8001f44:	08009114 	.word	0x08009114
 8001f48:	08003589 	.word	0x08003589
 8001f4c:	2000286c 	.word	0x2000286c
 8001f50:	08009138 	.word	0x08009138
 8001f54:	080035e5 	.word	0x080035e5
 8001f58:	200028bc 	.word	0x200028bc
 8001f5c:	0800915c 	.word	0x0800915c
 8001f60:	08003749 	.word	0x08003749
 8001f64:	200027e0 	.word	0x200027e0

08001f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b094      	sub	sp, #80	; 0x50
 8001f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f72:	2228      	movs	r2, #40	; 0x28
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f006 ffea 	bl	8008f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001fac:	2300      	movs	r3, #0
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f002 fe65 	bl	8004c84 <HAL_RCC_OscConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001fc0:	f001 fbdc 	bl	800377c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 f8cf 	bl	8005184 <HAL_RCC_ClockConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001fec:	f001 fbc6 	bl	800377c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 fa8c 	bl	8005518 <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002006:	f001 fbb9 	bl	800377c <Error_Handler>
  }
}
 800200a:	bf00      	nop
 800200c:	3750      	adds	r7, #80	; 0x50
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <MX_ADC1_Init+0x74>)
 8002026:	4a19      	ldr	r2, [pc, #100]	; (800208c <MX_ADC1_Init+0x78>)
 8002028:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800202a:	4b17      	ldr	r3, [pc, #92]	; (8002088 <MX_ADC1_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <MX_ADC1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002036:	4b14      	ldr	r3, [pc, #80]	; (8002088 <MX_ADC1_Init+0x74>)
 8002038:	2200      	movs	r2, #0
 800203a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_ADC1_Init+0x74>)
 800203e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <MX_ADC1_Init+0x74>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_ADC1_Init+0x74>)
 800204c:	2201      	movs	r2, #1
 800204e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <MX_ADC1_Init+0x74>)
 8002052:	f002 f957 	bl	8004304 <HAL_ADC_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800205c:	f001 fb8e 	bl	800377c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002060:	230f      	movs	r3, #15
 8002062:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002064:	2301      	movs	r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_ADC1_Init+0x74>)
 8002072:	f002 fa1f 	bl	80044b4 <HAL_ADC_ConfigChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800207c:	f001 fb7e 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200027e8 	.word	0x200027e8
 800208c:	40012400 	.word	0x40012400

08002090 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a4:	463b      	mov	r3, r7
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <MX_TIM1_Init+0x98>)
 80020ae:	4a1f      	ldr	r2, [pc, #124]	; (800212c <MX_TIM1_Init+0x9c>)
 80020b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <MX_TIM1_Init+0x98>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <MX_TIM1_Init+0x98>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_TIM1_Init+0x98>)
 80020c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <MX_TIM1_Init+0x98>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <MX_TIM1_Init+0x98>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d2:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_TIM1_Init+0x98>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020d8:	4813      	ldr	r0, [pc, #76]	; (8002128 <MX_TIM1_Init+0x98>)
 80020da:	f003 fad3 	bl	8005684 <HAL_TIM_Base_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80020e4:	f001 fb4a 	bl	800377c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	4619      	mov	r1, r3
 80020f4:	480c      	ldr	r0, [pc, #48]	; (8002128 <MX_TIM1_Init+0x98>)
 80020f6:	f003 fcb9 	bl	8005a6c <HAL_TIM_ConfigClockSource>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002100:	f001 fb3c 	bl	800377c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002104:	2300      	movs	r3, #0
 8002106:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800210c:	463b      	mov	r3, r7
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_TIM1_Init+0x98>)
 8002112:	f003 fe8b 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800211c:	f001 fb2e 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20002824 	.word	0x20002824
 800212c:	40012c00 	.word	0x40012c00

08002130 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	463b      	mov	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <MX_TIM2_Init+0x94>)
 800214e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_TIM2_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002166:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <MX_TIM2_Init+0x94>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002174:	4813      	ldr	r0, [pc, #76]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002176:	f003 fa85 	bl	8005684 <HAL_TIM_Base_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002180:	f001 fafc 	bl	800377c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	4619      	mov	r1, r3
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002192:	f003 fc6b 	bl	8005a6c <HAL_TIM_ConfigClockSource>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800219c:	f001 faee 	bl	800377c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a0:	2300      	movs	r3, #0
 80021a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_TIM2_Init+0x94>)
 80021ae:	f003 fe3d 	bl	8005e2c <HAL_TIMEx_MasterConfigSynchronization>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021b8:	f001 fae0 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20002874 	.word	0x20002874

080021c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <MX_USART1_UART_Init+0x50>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_USART1_UART_Init+0x4c>)
 8002200:	f003 fe84 	bl	8005f0c <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800220a:	f001 fab7 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200024f8 	.word	0x200024f8
 8002218:	40013800 	.word	0x40013800

0800221c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002222:	4a12      	ldr	r2, [pc, #72]	; (800226c <MX_USART3_UART_Init+0x50>)
 8002224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002228:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800222c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <MX_USART3_UART_Init+0x4c>)
 8002254:	f003 fe5a 	bl	8005f0c <HAL_UART_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800225e:	f001 fa8d 	bl	800377c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200024b8 	.word	0x200024b8
 800226c:	40004800 	.word	0x40004800

08002270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002276:	f107 0310 	add.w	r3, r7, #16
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002284:	4b65      	ldr	r3, [pc, #404]	; (800241c <MX_GPIO_Init+0x1ac>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	4a64      	ldr	r2, [pc, #400]	; (800241c <MX_GPIO_Init+0x1ac>)
 800228a:	f043 0310 	orr.w	r3, r3, #16
 800228e:	6193      	str	r3, [r2, #24]
 8002290:	4b62      	ldr	r3, [pc, #392]	; (800241c <MX_GPIO_Init+0x1ac>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800229c:	4b5f      	ldr	r3, [pc, #380]	; (800241c <MX_GPIO_Init+0x1ac>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4a5e      	ldr	r2, [pc, #376]	; (800241c <MX_GPIO_Init+0x1ac>)
 80022a2:	f043 0320 	orr.w	r3, r3, #32
 80022a6:	6193      	str	r3, [r2, #24]
 80022a8:	4b5c      	ldr	r3, [pc, #368]	; (800241c <MX_GPIO_Init+0x1ac>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0320 	and.w	r3, r3, #32
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <MX_GPIO_Init+0x1ac>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <MX_GPIO_Init+0x1ac>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6193      	str	r3, [r2, #24]
 80022c0:	4b56      	ldr	r3, [pc, #344]	; (800241c <MX_GPIO_Init+0x1ac>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <MX_GPIO_Init+0x1ac>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <MX_GPIO_Init+0x1ac>)
 80022d2:	f043 0308 	orr.w	r3, r3, #8
 80022d6:	6193      	str	r3, [r2, #24]
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <MX_GPIO_Init+0x1ac>)
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 80022e4:	2200      	movs	r2, #0
 80022e6:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 80022ea:	484d      	ldr	r0, [pc, #308]	; (8002420 <MX_GPIO_Init+0x1b0>)
 80022ec:	f002 fc8f 	bl	8004c0e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80022f0:	2200      	movs	r2, #0
 80022f2:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 80022f6:	484b      	ldr	r0, [pc, #300]	; (8002424 <MX_GPIO_Init+0x1b4>)
 80022f8:	f002 fc89 	bl	8004c0e <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80022fc:	2200      	movs	r2, #0
 80022fe:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8002302:	4849      	ldr	r0, [pc, #292]	; (8002428 <MX_GPIO_Init+0x1b8>)
 8002304:	f002 fc83 	bl	8004c0e <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002308:	2200      	movs	r2, #0
 800230a:	2104      	movs	r1, #4
 800230c:	4847      	ldr	r0, [pc, #284]	; (800242c <MX_GPIO_Init+0x1bc>)
 800230e:	f002 fc7e 	bl	8004c0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002318:	4b45      	ldr	r3, [pc, #276]	; (8002430 <MX_GPIO_Init+0x1c0>)
 800231a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	4619      	mov	r1, r3
 8002326:	4840      	ldr	r0, [pc, #256]	; (8002428 <MX_GPIO_Init+0x1b8>)
 8002328:	f002 fad6 	bl	80048d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800232c:	2307      	movs	r3, #7
 800232e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	4619      	mov	r1, r3
 800233e:	483a      	ldr	r0, [pc, #232]	; (8002428 <MX_GPIO_Init+0x1b8>)
 8002340:	f002 faca 	bl	80048d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002344:	230c      	movs	r3, #12
 8002346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2302      	movs	r3, #2
 800234e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	f107 0310 	add.w	r3, r7, #16
 8002354:	4619      	mov	r1, r3
 8002356:	4832      	ldr	r0, [pc, #200]	; (8002420 <MX_GPIO_Init+0x1b0>)
 8002358:	f002 fabe 	bl	80048d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 800235c:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8002360:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2302      	movs	r3, #2
 800236c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4619      	mov	r1, r3
 8002374:	482a      	ldr	r0, [pc, #168]	; (8002420 <MX_GPIO_Init+0x1b0>)
 8002376:	f002 faaf 	bl	80048d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800237a:	2307      	movs	r3, #7
 800237c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4619      	mov	r1, r3
 800238c:	4825      	ldr	r0, [pc, #148]	; (8002424 <MX_GPIO_Init+0x1b4>)
 800238e:	f002 faa3 	bl	80048d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8002392:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8002396:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2302      	movs	r3, #2
 80023a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	4619      	mov	r1, r3
 80023aa:	481e      	ldr	r0, [pc, #120]	; (8002424 <MX_GPIO_Init+0x1b4>)
 80023ac:	f002 fa94 	bl	80048d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80023b0:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 80023b4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b6:	2301      	movs	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023be:	2302      	movs	r3, #2
 80023c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c2:	f107 0310 	add.w	r3, r7, #16
 80023c6:	4619      	mov	r1, r3
 80023c8:	4817      	ldr	r0, [pc, #92]	; (8002428 <MX_GPIO_Init+0x1b8>)
 80023ca:	f002 fa85 	bl	80048d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ce:	2304      	movs	r3, #4
 80023d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d2:	2301      	movs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2302      	movs	r3, #2
 80023dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023de:	f107 0310 	add.w	r3, r7, #16
 80023e2:	4619      	mov	r1, r3
 80023e4:	4811      	ldr	r0, [pc, #68]	; (800242c <MX_GPIO_Init+0x1bc>)
 80023e6:	f002 fa77 	bl	80048d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ea:	2340      	movs	r3, #64	; 0x40
 80023ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	4619      	mov	r1, r3
 80023fc:	4809      	ldr	r0, [pc, #36]	; (8002424 <MX_GPIO_Init+0x1b4>)
 80023fe:	f002 fa6b 	bl	80048d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2105      	movs	r1, #5
 8002406:	2028      	movs	r0, #40	; 0x28
 8002408:	f002 fa3b 	bl	8004882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800240c:	2028      	movs	r0, #40	; 0x28
 800240e:	f002 fa54 	bl	80048ba <HAL_NVIC_EnableIRQ>

}
 8002412:	bf00      	nop
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40010800 	.word	0x40010800
 8002424:	40010c00 	.word	0x40010c00
 8002428:	40011000 	.word	0x40011000
 800242c:	40011400 	.word	0x40011400
 8002430:	10110000 	.word	0x10110000

08002434 <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8002438:	2014      	movs	r0, #20
 800243a:	f001 ff3f 	bl	80042bc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 800243e:	2200      	movs	r2, #0
 8002440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002444:	4868      	ldr	r0, [pc, #416]	; (80025e8 <commandToLCD+0x1b4>)
 8002446:	f002 fbe2 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002450:	4865      	ldr	r0, [pc, #404]	; (80025e8 <commandToLCD+0x1b4>)
 8002452:	f002 fbdc 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002456:	2201      	movs	r2, #1
 8002458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800245c:	4862      	ldr	r0, [pc, #392]	; (80025e8 <commandToLCD+0x1b4>)
 800245e:	f002 fbd6 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8002462:	2200      	movs	r2, #0
 8002464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002468:	4860      	ldr	r0, [pc, #384]	; (80025ec <commandToLCD+0x1b8>)
 800246a:	f002 fbd0 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800246e:	2200      	movs	r2, #0
 8002470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002474:	485d      	ldr	r0, [pc, #372]	; (80025ec <commandToLCD+0x1b8>)
 8002476:	f002 fbca 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 800247a:	2200      	movs	r2, #0
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	485b      	ldr	r0, [pc, #364]	; (80025ec <commandToLCD+0x1b8>)
 8002480:	f002 fbc5 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8002484:	2201      	movs	r2, #1
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	4858      	ldr	r0, [pc, #352]	; (80025ec <commandToLCD+0x1b8>)
 800248a:	f002 fbc0 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 800248e:	2201      	movs	r2, #1
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	4857      	ldr	r0, [pc, #348]	; (80025f0 <commandToLCD+0x1bc>)
 8002494:	f002 fbbb 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800249e:	4854      	ldr	r0, [pc, #336]	; (80025f0 <commandToLCD+0x1bc>)
 80024a0:	f002 fbb5 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80024a4:	2200      	movs	r2, #0
 80024a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024aa:	4851      	ldr	r0, [pc, #324]	; (80025f0 <commandToLCD+0x1bc>)
 80024ac:	f002 fbaf 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80024b0:	2200      	movs	r2, #0
 80024b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024b6:	484e      	ldr	r0, [pc, #312]	; (80025f0 <commandToLCD+0x1bc>)
 80024b8:	f002 fba9 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024c2:	4849      	ldr	r0, [pc, #292]	; (80025e8 <commandToLCD+0x1b4>)
 80024c4:	f002 fba3 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80024c8:	2005      	movs	r0, #5
 80024ca:	f001 fef7 	bl	80042bc <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d4:	4844      	ldr	r0, [pc, #272]	; (80025e8 <commandToLCD+0x1b4>)
 80024d6:	f002 fb9a 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 80024da:	2201      	movs	r2, #1
 80024dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024e0:	4842      	ldr	r0, [pc, #264]	; (80025ec <commandToLCD+0x1b8>)
 80024e2:	f002 fb94 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 80024e6:	2201      	movs	r2, #1
 80024e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ec:	483f      	ldr	r0, [pc, #252]	; (80025ec <commandToLCD+0x1b8>)
 80024ee:	f002 fb8e 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 80024f2:	2201      	movs	r2, #1
 80024f4:	2140      	movs	r1, #64	; 0x40
 80024f6:	483d      	ldr	r0, [pc, #244]	; (80025ec <commandToLCD+0x1b8>)
 80024f8:	f002 fb89 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80024fc:	2201      	movs	r2, #1
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	483a      	ldr	r0, [pc, #232]	; (80025ec <commandToLCD+0x1b8>)
 8002502:	f002 fb84 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002506:	2200      	movs	r2, #0
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	4839      	ldr	r0, [pc, #228]	; (80025f0 <commandToLCD+0x1bc>)
 800250c:	f002 fb7f 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002510:	2200      	movs	r2, #0
 8002512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002516:	4836      	ldr	r0, [pc, #216]	; (80025f0 <commandToLCD+0x1bc>)
 8002518:	f002 fb79 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002522:	4833      	ldr	r0, [pc, #204]	; (80025f0 <commandToLCD+0x1bc>)
 8002524:	f002 fb73 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800252e:	4830      	ldr	r0, [pc, #192]	; (80025f0 <commandToLCD+0x1bc>)
 8002530:	f002 fb6d 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800253a:	482b      	ldr	r0, [pc, #172]	; (80025e8 <commandToLCD+0x1b4>)
 800253c:	f002 fb67 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002540:	2005      	movs	r0, #5
 8002542:	f001 febb 	bl	80042bc <HAL_Delay>


	clear();
 8002546:	f000 f927 	bl	8002798 <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800254a:	2201      	movs	r2, #1
 800254c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002550:	4825      	ldr	r0, [pc, #148]	; (80025e8 <commandToLCD+0x1b4>)
 8002552:	f002 fb5c 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 8002556:	2200      	movs	r2, #0
 8002558:	f44f 7100 	mov.w	r1, #512	; 0x200
 800255c:	4823      	ldr	r0, [pc, #140]	; (80025ec <commandToLCD+0x1b8>)
 800255e:	f002 fb56 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8002562:	2201      	movs	r2, #1
 8002564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002568:	4820      	ldr	r0, [pc, #128]	; (80025ec <commandToLCD+0x1b8>)
 800256a:	f002 fb50 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 800256e:	2201      	movs	r2, #1
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	481e      	ldr	r0, [pc, #120]	; (80025ec <commandToLCD+0x1b8>)
 8002574:	f002 fb4b 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002578:	2200      	movs	r2, #0
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	481b      	ldr	r0, [pc, #108]	; (80025ec <commandToLCD+0x1b8>)
 800257e:	f002 fb46 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002582:	2200      	movs	r2, #0
 8002584:	2180      	movs	r1, #128	; 0x80
 8002586:	481a      	ldr	r0, [pc, #104]	; (80025f0 <commandToLCD+0x1bc>)
 8002588:	f002 fb41 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002592:	4817      	ldr	r0, [pc, #92]	; (80025f0 <commandToLCD+0x1bc>)
 8002594:	f002 fb3b 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002598:	2200      	movs	r2, #0
 800259a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800259e:	4814      	ldr	r0, [pc, #80]	; (80025f0 <commandToLCD+0x1bc>)
 80025a0:	f002 fb35 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80025a4:	2200      	movs	r2, #0
 80025a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025aa:	4811      	ldr	r0, [pc, #68]	; (80025f0 <commandToLCD+0x1bc>)
 80025ac:	f002 fb2f 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80025b0:	2200      	movs	r2, #0
 80025b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b6:	480c      	ldr	r0, [pc, #48]	; (80025e8 <commandToLCD+0x1b4>)
 80025b8:	f002 fb29 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80025bc:	2005      	movs	r0, #5
 80025be:	f001 fe7d 	bl	80042bc <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 80025c2:	2201      	movs	r2, #1
 80025c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c8:	4807      	ldr	r0, [pc, #28]	; (80025e8 <commandToLCD+0x1b4>)
 80025ca:	f002 fb20 	bl	8004c0e <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 80025ce:	bf00      	nop
 80025d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025d4:	4806      	ldr	r0, [pc, #24]	; (80025f0 <commandToLCD+0x1bc>)
 80025d6:	f002 fb03 	bl	8004be0 <HAL_GPIO_ReadPin>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d0f7      	beq.n	80025d0 <commandToLCD+0x19c>
	{}
}
 80025e0:	bf00      	nop
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40010c00 	.word	0x40010c00
 80025ec:	40011000 	.word	0x40011000
 80025f0:	40010800 	.word	0x40010800

080025f4 <printPassword>:
void printPassword(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80025f8:	2201      	movs	r2, #1
 80025fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025fe:	4813      	ldr	r0, [pc, #76]	; (800264c <printPassword+0x58>)
 8002600:	f002 fb05 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002604:	2200      	movs	r2, #0
 8002606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800260a:	4810      	ldr	r0, [pc, #64]	; (800264c <printPassword+0x58>)
 800260c:	f002 faff 	bl	8004c0e <HAL_GPIO_WritePin>
	letter('P');
 8002610:	2050      	movs	r0, #80	; 0x50
 8002612:	f7fe f821 	bl	8000658 <letter>
	letter('a');
 8002616:	2061      	movs	r0, #97	; 0x61
 8002618:	f7fe f81e 	bl	8000658 <letter>
	letter('s');
 800261c:	2073      	movs	r0, #115	; 0x73
 800261e:	f7fe f81b 	bl	8000658 <letter>
	letter('s');
 8002622:	2073      	movs	r0, #115	; 0x73
 8002624:	f7fe f818 	bl	8000658 <letter>
	letter('w');
 8002628:	2077      	movs	r0, #119	; 0x77
 800262a:	f7fe f815 	bl	8000658 <letter>
	letter('o');
 800262e:	206f      	movs	r0, #111	; 0x6f
 8002630:	f7fe f812 	bl	8000658 <letter>
	letter('r');
 8002634:	2072      	movs	r0, #114	; 0x72
 8002636:	f7fe f80f 	bl	8000658 <letter>
	letter('d');
 800263a:	2064      	movs	r0, #100	; 0x64
 800263c:	f7fe f80c 	bl	8000658 <letter>
	letter(':');
 8002640:	203a      	movs	r0, #58	; 0x3a
 8002642:	f7fe f809 	bl	8000658 <letter>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40010c00 	.word	0x40010c00

08002650 <line1>:
void line1(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800265a:	4823      	ldr	r0, [pc, #140]	; (80026e8 <line1+0x98>)
 800265c:	f002 fad7 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002660:	2200      	movs	r2, #0
 8002662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002666:	4820      	ldr	r0, [pc, #128]	; (80026e8 <line1+0x98>)
 8002668:	f002 fad1 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800266c:	2201      	movs	r2, #1
 800266e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002672:	481d      	ldr	r0, [pc, #116]	; (80026e8 <line1+0x98>)
 8002674:	f002 facb 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800267e:	481b      	ldr	r0, [pc, #108]	; (80026ec <line1+0x9c>)
 8002680:	f002 fac5 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002684:	2200      	movs	r2, #0
 8002686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268a:	4818      	ldr	r0, [pc, #96]	; (80026ec <line1+0x9c>)
 800268c:	f002 fabf 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002690:	2200      	movs	r2, #0
 8002692:	2140      	movs	r1, #64	; 0x40
 8002694:	4815      	ldr	r0, [pc, #84]	; (80026ec <line1+0x9c>)
 8002696:	f002 faba 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800269a:	2200      	movs	r2, #0
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	4813      	ldr	r0, [pc, #76]	; (80026ec <line1+0x9c>)
 80026a0:	f002 fab5 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80026a4:	2200      	movs	r2, #0
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	4811      	ldr	r0, [pc, #68]	; (80026f0 <line1+0xa0>)
 80026aa:	f002 fab0 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80026ae:	2200      	movs	r2, #0
 80026b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b4:	480e      	ldr	r0, [pc, #56]	; (80026f0 <line1+0xa0>)
 80026b6:	f002 faaa 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026c0:	480b      	ldr	r0, [pc, #44]	; (80026f0 <line1+0xa0>)
 80026c2:	f002 faa4 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 80026c6:	2201      	movs	r2, #1
 80026c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026cc:	4808      	ldr	r0, [pc, #32]	; (80026f0 <line1+0xa0>)
 80026ce:	f002 fa9e 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <line1+0x98>)
 80026da:	f002 fa98 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80026de:	2005      	movs	r0, #5
 80026e0:	f001 fdec 	bl	80042bc <HAL_Delay>
}
 80026e4:	bf00      	nop
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40010c00 	.word	0x40010c00
 80026ec:	40011000 	.word	0x40011000
 80026f0:	40010800 	.word	0x40010800

080026f4 <line2>:
void line2(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 80026f8:	2200      	movs	r2, #0
 80026fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026fe:	4823      	ldr	r0, [pc, #140]	; (800278c <line2+0x98>)
 8002700:	f002 fa85 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800270a:	4820      	ldr	r0, [pc, #128]	; (800278c <line2+0x98>)
 800270c:	f002 fa7f 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002710:	2201      	movs	r2, #1
 8002712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002716:	481d      	ldr	r0, [pc, #116]	; (800278c <line2+0x98>)
 8002718:	f002 fa79 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 800271c:	2200      	movs	r2, #0
 800271e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002722:	481b      	ldr	r0, [pc, #108]	; (8002790 <line2+0x9c>)
 8002724:	f002 fa73 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002728:	2200      	movs	r2, #0
 800272a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800272e:	4818      	ldr	r0, [pc, #96]	; (8002790 <line2+0x9c>)
 8002730:	f002 fa6d 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002734:	2200      	movs	r2, #0
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	4815      	ldr	r0, [pc, #84]	; (8002790 <line2+0x9c>)
 800273a:	f002 fa68 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800273e:	2200      	movs	r2, #0
 8002740:	2180      	movs	r1, #128	; 0x80
 8002742:	4813      	ldr	r0, [pc, #76]	; (8002790 <line2+0x9c>)
 8002744:	f002 fa63 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002748:	2200      	movs	r2, #0
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	4811      	ldr	r0, [pc, #68]	; (8002794 <line2+0xa0>)
 800274e:	f002 fa5e 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002752:	2200      	movs	r2, #0
 8002754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002758:	480e      	ldr	r0, [pc, #56]	; (8002794 <line2+0xa0>)
 800275a:	f002 fa58 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800275e:	2201      	movs	r2, #1
 8002760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <line2+0xa0>)
 8002766:	f002 fa52 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 800276a:	2201      	movs	r2, #1
 800276c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002770:	4808      	ldr	r0, [pc, #32]	; (8002794 <line2+0xa0>)
 8002772:	f002 fa4c 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002776:	2200      	movs	r2, #0
 8002778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800277c:	4803      	ldr	r0, [pc, #12]	; (800278c <line2+0x98>)
 800277e:	f002 fa46 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002782:	2005      	movs	r0, #5
 8002784:	f001 fd9a 	bl	80042bc <HAL_Delay>
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40010c00 	.word	0x40010c00
 8002790:	40011000 	.word	0x40011000
 8002794:	40010800 	.word	0x40010800

08002798 <clear>:
void clear()
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 800279c:	2200      	movs	r2, #0
 800279e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027a2:	4823      	ldr	r0, [pc, #140]	; (8002830 <clear+0x98>)
 80027a4:	f002 fa33 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80027a8:	2200      	movs	r2, #0
 80027aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027ae:	4820      	ldr	r0, [pc, #128]	; (8002830 <clear+0x98>)
 80027b0:	f002 fa2d 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80027b4:	2201      	movs	r2, #1
 80027b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ba:	481d      	ldr	r0, [pc, #116]	; (8002830 <clear+0x98>)
 80027bc:	f002 fa27 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 80027c0:	2201      	movs	r2, #1
 80027c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027c6:	481b      	ldr	r0, [pc, #108]	; (8002834 <clear+0x9c>)
 80027c8:	f002 fa21 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80027cc:	2200      	movs	r2, #0
 80027ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027d2:	4818      	ldr	r0, [pc, #96]	; (8002834 <clear+0x9c>)
 80027d4:	f002 fa1b 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80027d8:	2200      	movs	r2, #0
 80027da:	2140      	movs	r1, #64	; 0x40
 80027dc:	4815      	ldr	r0, [pc, #84]	; (8002834 <clear+0x9c>)
 80027de:	f002 fa16 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80027e2:	2200      	movs	r2, #0
 80027e4:	2180      	movs	r1, #128	; 0x80
 80027e6:	4813      	ldr	r0, [pc, #76]	; (8002834 <clear+0x9c>)
 80027e8:	f002 fa11 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80027ec:	2200      	movs	r2, #0
 80027ee:	2180      	movs	r1, #128	; 0x80
 80027f0:	4811      	ldr	r0, [pc, #68]	; (8002838 <clear+0xa0>)
 80027f2:	f002 fa0c 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80027f6:	2200      	movs	r2, #0
 80027f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027fc:	480e      	ldr	r0, [pc, #56]	; (8002838 <clear+0xa0>)
 80027fe:	f002 fa06 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8002802:	2200      	movs	r2, #0
 8002804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002808:	480b      	ldr	r0, [pc, #44]	; (8002838 <clear+0xa0>)
 800280a:	f002 fa00 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800280e:	2200      	movs	r2, #0
 8002810:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002814:	4808      	ldr	r0, [pc, #32]	; (8002838 <clear+0xa0>)
 8002816:	f002 f9fa 	bl	8004c0e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002820:	4803      	ldr	r0, [pc, #12]	; (8002830 <clear+0x98>)
 8002822:	f002 f9f4 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002826:	2005      	movs	r0, #5
 8002828:	f001 fd48 	bl	80042bc <HAL_Delay>
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40010c00 	.word	0x40010c00
 8002834:	40011000 	.word	0x40011000
 8002838:	40010800 	.word	0x40010800

0800283c <correct>:
void correct()
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002840:	2201      	movs	r2, #1
 8002842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002846:	4811      	ldr	r0, [pc, #68]	; (800288c <correct+0x50>)
 8002848:	f002 f9e1 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800284c:	2200      	movs	r2, #0
 800284e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002852:	480e      	ldr	r0, [pc, #56]	; (800288c <correct+0x50>)
 8002854:	f002 f9db 	bl	8004c0e <HAL_GPIO_WritePin>
	letter('C');
 8002858:	2043      	movs	r0, #67	; 0x43
 800285a:	f7fd fefd 	bl	8000658 <letter>
	letter('o');
 800285e:	206f      	movs	r0, #111	; 0x6f
 8002860:	f7fd fefa 	bl	8000658 <letter>
	letter('r');
 8002864:	2072      	movs	r0, #114	; 0x72
 8002866:	f7fd fef7 	bl	8000658 <letter>
	letter('r');
 800286a:	2072      	movs	r0, #114	; 0x72
 800286c:	f7fd fef4 	bl	8000658 <letter>
	letter('e');
 8002870:	2065      	movs	r0, #101	; 0x65
 8002872:	f7fd fef1 	bl	8000658 <letter>
	letter('c');
 8002876:	2063      	movs	r0, #99	; 0x63
 8002878:	f7fd feee 	bl	8000658 <letter>
	letter('t');
 800287c:	2074      	movs	r0, #116	; 0x74
 800287e:	f7fd feeb 	bl	8000658 <letter>
	letter('!');
 8002882:	2021      	movs	r0, #33	; 0x21
 8002884:	f7fd fee8 	bl	8000658 <letter>
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40010c00 	.word	0x40010c00

08002890 <getVal>:
int getVal(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
	int count = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
	int val=0;
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
	while(count<1)
 800289e:	e165      	b.n	8002b6c <getVal+0x2dc>
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 80028a0:	2201      	movs	r2, #1
 80028a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028a6:	48b6      	ldr	r0, [pc, #728]	; (8002b80 <getVal+0x2f0>)
 80028a8:	f002 f9b1 	bl	8004c0e <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80028ac:	2104      	movs	r1, #4
 80028ae:	48b5      	ldr	r0, [pc, #724]	; (8002b84 <getVal+0x2f4>)
 80028b0:	f002 f996 	bl	8004be0 <HAL_GPIO_ReadPin>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d112      	bne.n	80028e0 <getVal+0x50>
	  {
		  letter('1');
 80028ba:	2031      	movs	r0, #49	; 0x31
 80028bc:	f7fd fecc 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80028c0:	bf00      	nop
 80028c2:	2104      	movs	r1, #4
 80028c4:	48af      	ldr	r0, [pc, #700]	; (8002b84 <getVal+0x2f4>)
 80028c6:	f002 f98b 	bl	8004be0 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d0f8      	beq.n	80028c2 <getVal+0x32>
		  {}
		  HAL_Delay(100);
 80028d0:	2064      	movs	r0, #100	; 0x64
 80028d2:	f001 fcf3 	bl	80042bc <HAL_Delay>
		  val = 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	603b      	str	r3, [r7, #0]
		  count++;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3301      	adds	r3, #1
 80028de:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80028e0:	2102      	movs	r1, #2
 80028e2:	48a8      	ldr	r0, [pc, #672]	; (8002b84 <getVal+0x2f4>)
 80028e4:	f002 f97c 	bl	8004be0 <HAL_GPIO_ReadPin>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d112      	bne.n	8002914 <getVal+0x84>
	  {
		  letter('2');
 80028ee:	2032      	movs	r0, #50	; 0x32
 80028f0:	f7fd feb2 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80028f4:	bf00      	nop
 80028f6:	2102      	movs	r1, #2
 80028f8:	48a2      	ldr	r0, [pc, #648]	; (8002b84 <getVal+0x2f4>)
 80028fa:	f002 f971 	bl	8004be0 <HAL_GPIO_ReadPin>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b01      	cmp	r3, #1
 8002902:	d0f8      	beq.n	80028f6 <getVal+0x66>
		  {}
		  HAL_Delay(100);
 8002904:	2064      	movs	r0, #100	; 0x64
 8002906:	f001 fcd9 	bl	80042bc <HAL_Delay>
		  val = 2;
 800290a:	2302      	movs	r3, #2
 800290c:	603b      	str	r3, [r7, #0]
		  count++;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3301      	adds	r3, #1
 8002912:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002914:	2101      	movs	r1, #1
 8002916:	489b      	ldr	r0, [pc, #620]	; (8002b84 <getVal+0x2f4>)
 8002918:	f002 f962 	bl	8004be0 <HAL_GPIO_ReadPin>
 800291c:	4603      	mov	r3, r0
 800291e:	2b01      	cmp	r3, #1
 8002920:	d112      	bne.n	8002948 <getVal+0xb8>
	  {
		  letter('3');
 8002922:	2033      	movs	r0, #51	; 0x33
 8002924:	f7fd fe98 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002928:	bf00      	nop
 800292a:	2101      	movs	r1, #1
 800292c:	4895      	ldr	r0, [pc, #596]	; (8002b84 <getVal+0x2f4>)
 800292e:	f002 f957 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002932:	4603      	mov	r3, r0
 8002934:	2b01      	cmp	r3, #1
 8002936:	d0f8      	beq.n	800292a <getVal+0x9a>
		  {}
		  HAL_Delay(100);
 8002938:	2064      	movs	r0, #100	; 0x64
 800293a:	f001 fcbf 	bl	80042bc <HAL_Delay>
		  val = 3;
 800293e:	2303      	movs	r3, #3
 8002940:	603b      	str	r3, [r7, #0]
		  count++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3301      	adds	r3, #1
 8002946:	607b      	str	r3, [r7, #4]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002948:	2200      	movs	r2, #0
 800294a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800294e:	488c      	ldr	r0, [pc, #560]	; (8002b80 <getVal+0x2f0>)
 8002950:	f002 f95d 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 8002954:	2201      	movs	r2, #1
 8002956:	2104      	movs	r1, #4
 8002958:	488b      	ldr	r0, [pc, #556]	; (8002b88 <getVal+0x2f8>)
 800295a:	f002 f958 	bl	8004c0e <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 800295e:	2104      	movs	r1, #4
 8002960:	4888      	ldr	r0, [pc, #544]	; (8002b84 <getVal+0x2f4>)
 8002962:	f002 f93d 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002966:	4603      	mov	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d112      	bne.n	8002992 <getVal+0x102>
	  {
		  letter('4');
 800296c:	2034      	movs	r0, #52	; 0x34
 800296e:	f7fd fe73 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002972:	bf00      	nop
 8002974:	2104      	movs	r1, #4
 8002976:	4883      	ldr	r0, [pc, #524]	; (8002b84 <getVal+0x2f4>)
 8002978:	f002 f932 	bl	8004be0 <HAL_GPIO_ReadPin>
 800297c:	4603      	mov	r3, r0
 800297e:	2b01      	cmp	r3, #1
 8002980:	d0f8      	beq.n	8002974 <getVal+0xe4>
		  {}
		  HAL_Delay(100);
 8002982:	2064      	movs	r0, #100	; 0x64
 8002984:	f001 fc9a 	bl	80042bc <HAL_Delay>
		  val = 4;
 8002988:	2304      	movs	r3, #4
 800298a:	603b      	str	r3, [r7, #0]
		  count++;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3301      	adds	r3, #1
 8002990:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002992:	2102      	movs	r1, #2
 8002994:	487b      	ldr	r0, [pc, #492]	; (8002b84 <getVal+0x2f4>)
 8002996:	f002 f923 	bl	8004be0 <HAL_GPIO_ReadPin>
 800299a:	4603      	mov	r3, r0
 800299c:	2b01      	cmp	r3, #1
 800299e:	d112      	bne.n	80029c6 <getVal+0x136>
	  {
		  letter('5');
 80029a0:	2035      	movs	r0, #53	; 0x35
 80029a2:	f7fd fe59 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80029a6:	bf00      	nop
 80029a8:	2102      	movs	r1, #2
 80029aa:	4876      	ldr	r0, [pc, #472]	; (8002b84 <getVal+0x2f4>)
 80029ac:	f002 f918 	bl	8004be0 <HAL_GPIO_ReadPin>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d0f8      	beq.n	80029a8 <getVal+0x118>
		  {}
		  HAL_Delay(100);
 80029b6:	2064      	movs	r0, #100	; 0x64
 80029b8:	f001 fc80 	bl	80042bc <HAL_Delay>
		  val = 5;
 80029bc:	2305      	movs	r3, #5
 80029be:	603b      	str	r3, [r7, #0]
		  count++;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3301      	adds	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80029c6:	2101      	movs	r1, #1
 80029c8:	486e      	ldr	r0, [pc, #440]	; (8002b84 <getVal+0x2f4>)
 80029ca:	f002 f909 	bl	8004be0 <HAL_GPIO_ReadPin>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d112      	bne.n	80029fa <getVal+0x16a>
	  {
		  letter('6');
 80029d4:	2036      	movs	r0, #54	; 0x36
 80029d6:	f7fd fe3f 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80029da:	bf00      	nop
 80029dc:	2101      	movs	r1, #1
 80029de:	4869      	ldr	r0, [pc, #420]	; (8002b84 <getVal+0x2f4>)
 80029e0:	f002 f8fe 	bl	8004be0 <HAL_GPIO_ReadPin>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d0f8      	beq.n	80029dc <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 80029ea:	2064      	movs	r0, #100	; 0x64
 80029ec:	f001 fc66 	bl	80042bc <HAL_Delay>
		  val = 6;
 80029f0:	2306      	movs	r3, #6
 80029f2:	603b      	str	r3, [r7, #0]
		  count++;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3301      	adds	r3, #1
 80029f8:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 80029fa:	2200      	movs	r2, #0
 80029fc:	2104      	movs	r1, #4
 80029fe:	4862      	ldr	r0, [pc, #392]	; (8002b88 <getVal+0x2f8>)
 8002a00:	f002 f905 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 8002a04:	2201      	movs	r2, #1
 8002a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a0a:	485d      	ldr	r0, [pc, #372]	; (8002b80 <getVal+0x2f0>)
 8002a0c:	f002 f8ff 	bl	8004c0e <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002a10:	2104      	movs	r1, #4
 8002a12:	485c      	ldr	r0, [pc, #368]	; (8002b84 <getVal+0x2f4>)
 8002a14:	f002 f8e4 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d112      	bne.n	8002a44 <getVal+0x1b4>
	  {
		  letter('7');
 8002a1e:	2037      	movs	r0, #55	; 0x37
 8002a20:	f7fd fe1a 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002a24:	bf00      	nop
 8002a26:	2104      	movs	r1, #4
 8002a28:	4856      	ldr	r0, [pc, #344]	; (8002b84 <getVal+0x2f4>)
 8002a2a:	f002 f8d9 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d0f8      	beq.n	8002a26 <getVal+0x196>
		  {}
		  HAL_Delay(100);
 8002a34:	2064      	movs	r0, #100	; 0x64
 8002a36:	f001 fc41 	bl	80042bc <HAL_Delay>
		  val = 7;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	603b      	str	r3, [r7, #0]
		  count++;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3301      	adds	r3, #1
 8002a42:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002a44:	2102      	movs	r1, #2
 8002a46:	484f      	ldr	r0, [pc, #316]	; (8002b84 <getVal+0x2f4>)
 8002a48:	f002 f8ca 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d112      	bne.n	8002a78 <getVal+0x1e8>
	  {
		  letter('8');
 8002a52:	2038      	movs	r0, #56	; 0x38
 8002a54:	f7fd fe00 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002a58:	bf00      	nop
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	4849      	ldr	r0, [pc, #292]	; (8002b84 <getVal+0x2f4>)
 8002a5e:	f002 f8bf 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d0f8      	beq.n	8002a5a <getVal+0x1ca>
		  {}
		  HAL_Delay(100);
 8002a68:	2064      	movs	r0, #100	; 0x64
 8002a6a:	f001 fc27 	bl	80042bc <HAL_Delay>
		  val = 8;
 8002a6e:	2308      	movs	r3, #8
 8002a70:	603b      	str	r3, [r7, #0]
		  count++;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3301      	adds	r3, #1
 8002a76:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4842      	ldr	r0, [pc, #264]	; (8002b84 <getVal+0x2f4>)
 8002a7c:	f002 f8b0 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d112      	bne.n	8002aac <getVal+0x21c>
	  {
		  letter('9');
 8002a86:	2039      	movs	r0, #57	; 0x39
 8002a88:	f7fd fde6 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002a8c:	bf00      	nop
 8002a8e:	2101      	movs	r1, #1
 8002a90:	483c      	ldr	r0, [pc, #240]	; (8002b84 <getVal+0x2f4>)
 8002a92:	f002 f8a5 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d0f8      	beq.n	8002a8e <getVal+0x1fe>
		  {}
		  HAL_Delay(100);
 8002a9c:	2064      	movs	r0, #100	; 0x64
 8002a9e:	f001 fc0d 	bl	80042bc <HAL_Delay>
		  val = 9;
 8002aa2:	2309      	movs	r3, #9
 8002aa4:	603b      	str	r3, [r7, #0]
		  count++;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002aac:	2200      	movs	r2, #0
 8002aae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ab2:	4833      	ldr	r0, [pc, #204]	; (8002b80 <getVal+0x2f0>)
 8002ab4:	f002 f8ab 	bl	8004c0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002abe:	4830      	ldr	r0, [pc, #192]	; (8002b80 <getVal+0x2f0>)
 8002ac0:	f002 f8a5 	bl	8004c0e <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	482f      	ldr	r0, [pc, #188]	; (8002b84 <getVal+0x2f4>)
 8002ac8:	f002 f88a 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d112      	bne.n	8002af8 <getVal+0x268>
	  {
		  letter('*');
 8002ad2:	202a      	movs	r0, #42	; 0x2a
 8002ad4:	f7fd fdc0 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002ad8:	bf00      	nop
 8002ada:	2104      	movs	r1, #4
 8002adc:	4829      	ldr	r0, [pc, #164]	; (8002b84 <getVal+0x2f4>)
 8002ade:	f002 f87f 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d0f8      	beq.n	8002ada <getVal+0x24a>
		  {}
		  HAL_Delay(100);
 8002ae8:	2064      	movs	r0, #100	; 0x64
 8002aea:	f001 fbe7 	bl	80042bc <HAL_Delay>
		  val = 10;
 8002aee:	230a      	movs	r3, #10
 8002af0:	603b      	str	r3, [r7, #0]
		  count++;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3301      	adds	r3, #1
 8002af6:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002af8:	2102      	movs	r1, #2
 8002afa:	4822      	ldr	r0, [pc, #136]	; (8002b84 <getVal+0x2f4>)
 8002afc:	f002 f870 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d112      	bne.n	8002b2c <getVal+0x29c>
	  {
		  letter('0');
 8002b06:	2030      	movs	r0, #48	; 0x30
 8002b08:	f7fd fda6 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002b0c:	bf00      	nop
 8002b0e:	2102      	movs	r1, #2
 8002b10:	481c      	ldr	r0, [pc, #112]	; (8002b84 <getVal+0x2f4>)
 8002b12:	f002 f865 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d0f8      	beq.n	8002b0e <getVal+0x27e>
		  {}
		  HAL_Delay(100);
 8002b1c:	2064      	movs	r0, #100	; 0x64
 8002b1e:	f001 fbcd 	bl	80042bc <HAL_Delay>
		  val = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
		  count++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	607b      	str	r3, [r7, #4]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4815      	ldr	r0, [pc, #84]	; (8002b84 <getVal+0x2f4>)
 8002b30:	f002 f856 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d112      	bne.n	8002b60 <getVal+0x2d0>
	  {
		  letter('#');
 8002b3a:	2023      	movs	r0, #35	; 0x23
 8002b3c:	f7fd fd8c 	bl	8000658 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002b40:	bf00      	nop
 8002b42:	2101      	movs	r1, #1
 8002b44:	480f      	ldr	r0, [pc, #60]	; (8002b84 <getVal+0x2f4>)
 8002b46:	f002 f84b 	bl	8004be0 <HAL_GPIO_ReadPin>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d0f8      	beq.n	8002b42 <getVal+0x2b2>
		  {}
		  HAL_Delay(100);
 8002b50:	2064      	movs	r0, #100	; 0x64
 8002b52:	f001 fbb3 	bl	80042bc <HAL_Delay>
		  val = 11;
 8002b56:	230b      	movs	r3, #11
 8002b58:	603b      	str	r3, [r7, #0]
		  count++;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	607b      	str	r3, [r7, #4]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 8002b60:	2200      	movs	r2, #0
 8002b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b66:	4806      	ldr	r0, [pc, #24]	; (8002b80 <getVal+0x2f0>)
 8002b68:	f002 f851 	bl	8004c0e <HAL_GPIO_WritePin>
	while(count<1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f77f ae96 	ble.w	80028a0 <getVal+0x10>
	}
	//osDelay(1);
	return val;
 8002b74:	683b      	ldr	r3, [r7, #0]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40011000 	.word	0x40011000
 8002b84:	40010c00 	.word	0x40010c00
 8002b88:	40011400 	.word	0x40011400

08002b8c <wrongPass>:
void wrongPass(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002b90:	2201      	movs	r2, #1
 8002b92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b96:	481a      	ldr	r0, [pc, #104]	; (8002c00 <wrongPass+0x74>)
 8002b98:	f002 f839 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ba2:	4817      	ldr	r0, [pc, #92]	; (8002c00 <wrongPass+0x74>)
 8002ba4:	f002 f833 	bl	8004c0e <HAL_GPIO_WritePin>
	letter('W');
 8002ba8:	2057      	movs	r0, #87	; 0x57
 8002baa:	f7fd fd55 	bl	8000658 <letter>
	letter('r');
 8002bae:	2072      	movs	r0, #114	; 0x72
 8002bb0:	f7fd fd52 	bl	8000658 <letter>
	letter('o');
 8002bb4:	206f      	movs	r0, #111	; 0x6f
 8002bb6:	f7fd fd4f 	bl	8000658 <letter>
	letter('n');
 8002bba:	206e      	movs	r0, #110	; 0x6e
 8002bbc:	f7fd fd4c 	bl	8000658 <letter>
	letter('g');
 8002bc0:	2067      	movs	r0, #103	; 0x67
 8002bc2:	f7fd fd49 	bl	8000658 <letter>
	letter(' ');
 8002bc6:	2020      	movs	r0, #32
 8002bc8:	f7fd fd46 	bl	8000658 <letter>
	letter('P');
 8002bcc:	2050      	movs	r0, #80	; 0x50
 8002bce:	f7fd fd43 	bl	8000658 <letter>
	letter('a');
 8002bd2:	2061      	movs	r0, #97	; 0x61
 8002bd4:	f7fd fd40 	bl	8000658 <letter>
	letter('s');
 8002bd8:	2073      	movs	r0, #115	; 0x73
 8002bda:	f7fd fd3d 	bl	8000658 <letter>
	letter('s');
 8002bde:	2073      	movs	r0, #115	; 0x73
 8002be0:	f7fd fd3a 	bl	8000658 <letter>
	letter('w');
 8002be4:	2077      	movs	r0, #119	; 0x77
 8002be6:	f7fd fd37 	bl	8000658 <letter>
	letter('o');
 8002bea:	206f      	movs	r0, #111	; 0x6f
 8002bec:	f7fd fd34 	bl	8000658 <letter>
	letter('r');
 8002bf0:	2072      	movs	r0, #114	; 0x72
 8002bf2:	f7fd fd31 	bl	8000658 <letter>
	letter('d');
 8002bf6:	2064      	movs	r0, #100	; 0x64
 8002bf8:	f7fd fd2e 	bl	8000658 <letter>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40010c00 	.word	0x40010c00

08002c04 <green>:
void green(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0e:	4814      	ldr	r0, [pc, #80]	; (8002c60 <green+0x5c>)
 8002c10:	f001 fffd 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002c14:	2200      	movs	r2, #0
 8002c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c1a:	4811      	ldr	r0, [pc, #68]	; (8002c60 <green+0x5c>)
 8002c1c:	f001 fff7 	bl	8004c0e <HAL_GPIO_WritePin>
	letter('G');
 8002c20:	2047      	movs	r0, #71	; 0x47
 8002c22:	f7fd fd19 	bl	8000658 <letter>
	letter('r');
 8002c26:	2072      	movs	r0, #114	; 0x72
 8002c28:	f7fd fd16 	bl	8000658 <letter>
	letter('e');
 8002c2c:	2065      	movs	r0, #101	; 0x65
 8002c2e:	f7fd fd13 	bl	8000658 <letter>
	letter('e');
 8002c32:	2065      	movs	r0, #101	; 0x65
 8002c34:	f7fd fd10 	bl	8000658 <letter>
	letter('n');
 8002c38:	206e      	movs	r0, #110	; 0x6e
 8002c3a:	f7fd fd0d 	bl	8000658 <letter>
	letter(' ');
 8002c3e:	2020      	movs	r0, #32
 8002c40:	f7fd fd0a 	bl	8000658 <letter>
	letter('1');
 8002c44:	2031      	movs	r0, #49	; 0x31
 8002c46:	f7fd fd07 	bl	8000658 <letter>
	letter('-');
 8002c4a:	202d      	movs	r0, #45	; 0x2d
 8002c4c:	f7fd fd04 	bl	8000658 <letter>
	letter('3');
 8002c50:	2033      	movs	r0, #51	; 0x33
 8002c52:	f7fd fd01 	bl	8000658 <letter>
	letter(':');
 8002c56:	203a      	movs	r0, #58	; 0x3a
 8002c58:	f7fd fcfe 	bl	8000658 <letter>

}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40010c00 	.word	0x40010c00

08002c64 <timer>:

void timer(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c6e:	481a      	ldr	r0, [pc, #104]	; (8002cd8 <timer+0x74>)
 8002c70:	f001 ffcd 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c7a:	4817      	ldr	r0, [pc, #92]	; (8002cd8 <timer+0x74>)
 8002c7c:	f001 ffc7 	bl	8004c0e <HAL_GPIO_WritePin>

	letter('T');
 8002c80:	2054      	movs	r0, #84	; 0x54
 8002c82:	f7fd fce9 	bl	8000658 <letter>
	letter('i');
 8002c86:	2069      	movs	r0, #105	; 0x69
 8002c88:	f7fd fce6 	bl	8000658 <letter>
	letter('m');
 8002c8c:	206d      	movs	r0, #109	; 0x6d
 8002c8e:	f7fd fce3 	bl	8000658 <letter>
	letter('e');
 8002c92:	2065      	movs	r0, #101	; 0x65
 8002c94:	f7fd fce0 	bl	8000658 <letter>
	letter(' ');
 8002c98:	2020      	movs	r0, #32
 8002c9a:	f7fd fcdd 	bl	8000658 <letter>
	letter('0');
 8002c9e:	2030      	movs	r0, #48	; 0x30
 8002ca0:	f7fd fcda 	bl	8000658 <letter>
	letter('0');
 8002ca4:	2030      	movs	r0, #48	; 0x30
 8002ca6:	f7fd fcd7 	bl	8000658 <letter>
	letter('-');
 8002caa:	202d      	movs	r0, #45	; 0x2d
 8002cac:	f7fd fcd4 	bl	8000658 <letter>
	letter('6');
 8002cb0:	2036      	movs	r0, #54	; 0x36
 8002cb2:	f7fd fcd1 	bl	8000658 <letter>
	letter('0');
 8002cb6:	2030      	movs	r0, #48	; 0x30
 8002cb8:	f7fd fcce 	bl	8000658 <letter>
	letter('m');
 8002cbc:	206d      	movs	r0, #109	; 0x6d
 8002cbe:	f7fd fccb 	bl	8000658 <letter>
	letter('i');
 8002cc2:	2069      	movs	r0, #105	; 0x69
 8002cc4:	f7fd fcc8 	bl	8000658 <letter>
	letter('n');
 8002cc8:	206e      	movs	r0, #110	; 0x6e
 8002cca:	f7fd fcc5 	bl	8000658 <letter>
	letter(':');
 8002cce:	203a      	movs	r0, #58	; 0x3a
 8002cd0:	f7fd fcc2 	bl	8000658 <letter>

}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40010c00 	.word	0x40010c00

08002cdc <quit>:

void quit(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ce6:	481e      	ldr	r0, [pc, #120]	; (8002d60 <quit+0x84>)
 8002ce8:	f001 ff91 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cf2:	481b      	ldr	r0, [pc, #108]	; (8002d60 <quit+0x84>)
 8002cf4:	f001 ff8b 	bl	8004c0e <HAL_GPIO_WritePin>

	letter('Q');
 8002cf8:	2051      	movs	r0, #81	; 0x51
 8002cfa:	f7fd fcad 	bl	8000658 <letter>
	letter('u');
 8002cfe:	2075      	movs	r0, #117	; 0x75
 8002d00:	f7fd fcaa 	bl	8000658 <letter>
	letter('i');
 8002d04:	2069      	movs	r0, #105	; 0x69
 8002d06:	f7fd fca7 	bl	8000658 <letter>
	letter('t');
 8002d0a:	2074      	movs	r0, #116	; 0x74
 8002d0c:	f7fd fca4 	bl	8000658 <letter>
	letter('?');
 8002d10:	203f      	movs	r0, #63	; 0x3f
 8002d12:	f7fd fca1 	bl	8000658 <letter>
	letter(' ');
 8002d16:	2020      	movs	r0, #32
 8002d18:	f7fd fc9e 	bl	8000658 <letter>
	letter('y');
 8002d1c:	2079      	movs	r0, #121	; 0x79
 8002d1e:	f7fd fc9b 	bl	8000658 <letter>
	letter('e');
 8002d22:	2065      	movs	r0, #101	; 0x65
 8002d24:	f7fd fc98 	bl	8000658 <letter>
	letter('s');
 8002d28:	2073      	movs	r0, #115	; 0x73
 8002d2a:	f7fd fc95 	bl	8000658 <letter>
	letter('-');
 8002d2e:	202d      	movs	r0, #45	; 0x2d
 8002d30:	f7fd fc92 	bl	8000658 <letter>
	letter('1');
 8002d34:	2031      	movs	r0, #49	; 0x31
 8002d36:	f7fd fc8f 	bl	8000658 <letter>
	letter(' ');
 8002d3a:	2020      	movs	r0, #32
 8002d3c:	f7fd fc8c 	bl	8000658 <letter>
	letter('n');
 8002d40:	206e      	movs	r0, #110	; 0x6e
 8002d42:	f7fd fc89 	bl	8000658 <letter>
	letter('o');
 8002d46:	206f      	movs	r0, #111	; 0x6f
 8002d48:	f7fd fc86 	bl	8000658 <letter>
	letter('-');
 8002d4c:	202d      	movs	r0, #45	; 0x2d
 8002d4e:	f7fd fc83 	bl	8000658 <letter>
	letter('0');
 8002d52:	2030      	movs	r0, #48	; 0x30
 8002d54:	f7fd fc80 	bl	8000658 <letter>
	line2();
 8002d58:	f7ff fccc 	bl	80026f4 <line2>
}
 8002d5c:	bf00      	nop
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40010c00 	.word	0x40010c00

08002d64 <onOffTime>:
void onOffTime(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d6e:	481e      	ldr	r0, [pc, #120]	; (8002de8 <onOffTime+0x84>)
 8002d70:	f001 ff4d 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002d74:	2200      	movs	r2, #0
 8002d76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d7a:	481b      	ldr	r0, [pc, #108]	; (8002de8 <onOffTime+0x84>)
 8002d7c:	f001 ff47 	bl	8004c0e <HAL_GPIO_WritePin>
	letter('0');
 8002d80:	2030      	movs	r0, #48	; 0x30
 8002d82:	f7fd fc69 	bl	8000658 <letter>
	letter('-');
 8002d86:	202d      	movs	r0, #45	; 0x2d
 8002d88:	f7fd fc66 	bl	8000658 <letter>
	letter('O');
 8002d8c:	204f      	movs	r0, #79	; 0x4f
 8002d8e:	f7fd fc63 	bl	8000658 <letter>
	letter('n');
 8002d92:	206e      	movs	r0, #110	; 0x6e
 8002d94:	f7fd fc60 	bl	8000658 <letter>
	letter('/');
 8002d98:	202f      	movs	r0, #47	; 0x2f
 8002d9a:	f7fd fc5d 	bl	8000658 <letter>
	letter('O');
 8002d9e:	204f      	movs	r0, #79	; 0x4f
 8002da0:	f7fd fc5a 	bl	8000658 <letter>
	letter('f');
 8002da4:	2066      	movs	r0, #102	; 0x66
 8002da6:	f7fd fc57 	bl	8000658 <letter>
	letter('f');
 8002daa:	2066      	movs	r0, #102	; 0x66
 8002dac:	f7fd fc54 	bl	8000658 <letter>
	letter(' ');
 8002db0:	2020      	movs	r0, #32
 8002db2:	f7fd fc51 	bl	8000658 <letter>
	letter('1');
 8002db6:	2031      	movs	r0, #49	; 0x31
 8002db8:	f7fd fc4e 	bl	8000658 <letter>
	letter('-');
 8002dbc:	202d      	movs	r0, #45	; 0x2d
 8002dbe:	f7fd fc4b 	bl	8000658 <letter>
	letter('T');
 8002dc2:	2054      	movs	r0, #84	; 0x54
 8002dc4:	f7fd fc48 	bl	8000658 <letter>
	letter('i');
 8002dc8:	2069      	movs	r0, #105	; 0x69
 8002dca:	f7fd fc45 	bl	8000658 <letter>
	letter('m');
 8002dce:	206d      	movs	r0, #109	; 0x6d
 8002dd0:	f7fd fc42 	bl	8000658 <letter>
	letter('e');
 8002dd4:	2065      	movs	r0, #101	; 0x65
 8002dd6:	f7fd fc3f 	bl	8000658 <letter>
	letter('r');
 8002dda:	2072      	movs	r0, #114	; 0x72
 8002ddc:	f7fd fc3c 	bl	8000658 <letter>
	line2();
 8002de0:	f7ff fc88 	bl	80026f4 <line2>
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40010c00 	.word	0x40010c00

08002dec <onOff>:
void onOff(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002df0:	2201      	movs	r2, #1
 8002df2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df6:	4816      	ldr	r0, [pc, #88]	; (8002e50 <onOff+0x64>)
 8002df8:	f001 ff09 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e02:	4813      	ldr	r0, [pc, #76]	; (8002e50 <onOff+0x64>)
 8002e04:	f001 ff03 	bl	8004c0e <HAL_GPIO_WritePin>
	letter('0');
 8002e08:	2030      	movs	r0, #48	; 0x30
 8002e0a:	f7fd fc25 	bl	8000658 <letter>
	letter('-');
 8002e0e:	202d      	movs	r0, #45	; 0x2d
 8002e10:	f7fd fc22 	bl	8000658 <letter>
	letter('O');
 8002e14:	204f      	movs	r0, #79	; 0x4f
 8002e16:	f7fd fc1f 	bl	8000658 <letter>
	letter('n');
 8002e1a:	206e      	movs	r0, #110	; 0x6e
 8002e1c:	f7fd fc1c 	bl	8000658 <letter>
	letter(' ');
 8002e20:	2020      	movs	r0, #32
 8002e22:	f7fd fc19 	bl	8000658 <letter>
	letter('1');
 8002e26:	2031      	movs	r0, #49	; 0x31
 8002e28:	f7fd fc16 	bl	8000658 <letter>
	letter('-');
 8002e2c:	202d      	movs	r0, #45	; 0x2d
 8002e2e:	f7fd fc13 	bl	8000658 <letter>
	letter('O');
 8002e32:	204f      	movs	r0, #79	; 0x4f
 8002e34:	f7fd fc10 	bl	8000658 <letter>
	letter('f');
 8002e38:	2066      	movs	r0, #102	; 0x66
 8002e3a:	f7fd fc0d 	bl	8000658 <letter>
	letter('f');
 8002e3e:	2066      	movs	r0, #102	; 0x66
 8002e40:	f7fd fc0a 	bl	8000658 <letter>
	letter(':');
 8002e44:	203a      	movs	r0, #58	; 0x3a
 8002e46:	f7fd fc07 	bl	8000658 <letter>

}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	40010c00 	.word	0x40010c00

08002e54 <error>:
void error(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e5e:	482a      	ldr	r0, [pc, #168]	; (8002f08 <error+0xb4>)
 8002e60:	f001 fed5 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002e64:	2200      	movs	r2, #0
 8002e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e6a:	4827      	ldr	r0, [pc, #156]	; (8002f08 <error+0xb4>)
 8002e6c:	f001 fecf 	bl	8004c0e <HAL_GPIO_WritePin>

	letter('E');
 8002e70:	2045      	movs	r0, #69	; 0x45
 8002e72:	f7fd fbf1 	bl	8000658 <letter>
	letter('r');
 8002e76:	2072      	movs	r0, #114	; 0x72
 8002e78:	f7fd fbee 	bl	8000658 <letter>
	letter('r');
 8002e7c:	2072      	movs	r0, #114	; 0x72
 8002e7e:	f7fd fbeb 	bl	8000658 <letter>
	letter('o');
 8002e82:	206f      	movs	r0, #111	; 0x6f
 8002e84:	f7fd fbe8 	bl	8000658 <letter>
	letter('r');
 8002e88:	2072      	movs	r0, #114	; 0x72
 8002e8a:	f7fd fbe5 	bl	8000658 <letter>
	letter(',');
 8002e8e:	202c      	movs	r0, #44	; 0x2c
 8002e90:	f7fd fbe2 	bl	8000658 <letter>
	letter(' ');
 8002e94:	2020      	movs	r0, #32
 8002e96:	f7fd fbdf 	bl	8000658 <letter>
	letter('I');
 8002e9a:	2049      	movs	r0, #73	; 0x49
 8002e9c:	f7fd fbdc 	bl	8000658 <letter>
	letter('n');
 8002ea0:	206e      	movs	r0, #110	; 0x6e
 8002ea2:	f7fd fbd9 	bl	8000658 <letter>
	letter('v');
 8002ea6:	2076      	movs	r0, #118	; 0x76
 8002ea8:	f7fd fbd6 	bl	8000658 <letter>
	letter('a');
 8002eac:	2061      	movs	r0, #97	; 0x61
 8002eae:	f7fd fbd3 	bl	8000658 <letter>
	letter('l');
 8002eb2:	206c      	movs	r0, #108	; 0x6c
 8002eb4:	f7fd fbd0 	bl	8000658 <letter>
	letter('i');
 8002eb8:	2069      	movs	r0, #105	; 0x69
 8002eba:	f7fd fbcd 	bl	8000658 <letter>
	letter('d');
 8002ebe:	2064      	movs	r0, #100	; 0x64
 8002ec0:	f7fd fbca 	bl	8000658 <letter>

	line2();
 8002ec4:	f7ff fc16 	bl	80026f4 <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ece:	480e      	ldr	r0, [pc, #56]	; (8002f08 <error+0xb4>)
 8002ed0:	f001 fe9d 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002eda:	480b      	ldr	r0, [pc, #44]	; (8002f08 <error+0xb4>)
 8002edc:	f001 fe97 	bl	8004c0e <HAL_GPIO_WritePin>
	letter('N');
 8002ee0:	204e      	movs	r0, #78	; 0x4e
 8002ee2:	f7fd fbb9 	bl	8000658 <letter>
	letter('u');
 8002ee6:	2075      	movs	r0, #117	; 0x75
 8002ee8:	f7fd fbb6 	bl	8000658 <letter>
	letter('m');
 8002eec:	206d      	movs	r0, #109	; 0x6d
 8002eee:	f7fd fbb3 	bl	8000658 <letter>
	letter('b');
 8002ef2:	2062      	movs	r0, #98	; 0x62
 8002ef4:	f7fd fbb0 	bl	8000658 <letter>
	letter('e');
 8002ef8:	2065      	movs	r0, #101	; 0x65
 8002efa:	f7fd fbad 	bl	8000658 <letter>
	letter('r');
 8002efe:	2072      	movs	r0, #114	; 0x72
 8002f00:	f7fd fbaa 	bl	8000658 <letter>
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40010c00 	.word	0x40010c00

08002f0c <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  osDelay(1);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f003 fb5f 	bl	80065d8 <osDelay>
 8002f1a:	e7fb      	b.n	8002f14 <StartXbeeTask+0x8>

08002f1c <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	uint16_t num[7];
	uint16_t indc, m;

  for(;;)
  {
	commandToLCD();
 8002f24:	f7ff fa86 	bl	8002434 <commandToLCD>
	printPassword();
 8002f28:	f7ff fb64 	bl	80025f4 <printPassword>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f32:	48bd      	ldr	r0, [pc, #756]	; (8003228 <StartUserTask+0x30c>)
 8002f34:	f001 fe6b 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2104      	movs	r1, #4
 8002f3c:	48bb      	ldr	r0, [pc, #748]	; (800322c <StartUserTask+0x310>)
 8002f3e:	f001 fe66 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002f42:	2200      	movs	r2, #0
 8002f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f48:	48b7      	ldr	r0, [pc, #732]	; (8003228 <StartUserTask+0x30c>)
 8002f4a:	f001 fe60 	bl	8004c0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002f54:	48b4      	ldr	r0, [pc, #720]	; (8003228 <StartUserTask+0x30c>)
 8002f56:	f001 fe5a 	bl	8004c0e <HAL_GPIO_WritePin>

	for(int i = 0; i < 4; i++)
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e00d      	b.n	8002f7c <StartUserTask+0x60>
	{
		num[i] = getVal();
 8002f60:	f7ff fc96 	bl	8002890 <getVal>
 8002f64:	4603      	mov	r3, r0
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	f107 0120 	add.w	r1, r7, #32
 8002f70:	440b      	add	r3, r1
 8002f72:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i = 0; i < 4; i++)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	ddee      	ble.n	8002f60 <StartUserTask+0x44>
	}
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 8002f82:	893b      	ldrh	r3, [r7, #8]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f040 8142 	bne.w	800320e <StartUserTask+0x2f2>
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f040 813e 	bne.w	800320e <StartUserTask+0x2f2>
 8002f92:	89bb      	ldrh	r3, [r7, #12]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	f040 813a 	bne.w	800320e <StartUserTask+0x2f2>
 8002f9a:	89fb      	ldrh	r3, [r7, #14]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	f040 8136 	bne.w	800320e <StartUserTask+0x2f2>
	{
		clear();
 8002fa2:	f7ff fbf9 	bl	8002798 <clear>
		line1();
 8002fa6:	f7ff fb53 	bl	8002650 <line1>
		correct();
 8002faa:	f7ff fc47 	bl	800283c <correct>
		HAL_Delay(1500);
 8002fae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002fb2:	f001 f983 	bl	80042bc <HAL_Delay>
		num[6] = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	82bb      	strh	r3, [r7, #20]
		while(num[6] == 0)
 8002fba:	e123      	b.n	8003204 <StartUserTask+0x2e8>
		{
			commandToLCD();
 8002fbc:	f7ff fa3a 	bl	8002434 <commandToLCD>
			onOffTime();
 8002fc0:	f7ff fed0 	bl	8002d64 <onOffTime>
			num[0] = getVal();
 8002fc4:	f7ff fc64 	bl	8002890 <getVal>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	813b      	strh	r3, [r7, #8]
			while(num[0]< 0 || num[0] > 1)
 8002fce:	e010      	b.n	8002ff2 <StartUserTask+0xd6>
			{
				commandToLCD();
 8002fd0:	f7ff fa30 	bl	8002434 <commandToLCD>
				error();
 8002fd4:	f7ff ff3e 	bl	8002e54 <error>
				HAL_Delay(1500);
 8002fd8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002fdc:	f001 f96e 	bl	80042bc <HAL_Delay>
				commandToLCD();
 8002fe0:	f7ff fa28 	bl	8002434 <commandToLCD>
				onOffTime();
 8002fe4:	f7ff febe 	bl	8002d64 <onOffTime>
				num[0] = getVal();
 8002fe8:	f7ff fc52 	bl	8002890 <getVal>
 8002fec:	4603      	mov	r3, r0
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	813b      	strh	r3, [r7, #8]
			while(num[0]< 0 || num[0] > 1)
 8002ff2:	893b      	ldrh	r3, [r7, #8]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d8eb      	bhi.n	8002fd0 <StartUserTask+0xb4>
			}
			if(num[0] == 0)
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d173      	bne.n	80030e6 <StartUserTask+0x1ca>
			{
				m = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	837b      	strh	r3, [r7, #26]
				commandToLCD();
 8003002:	f7ff fa17 	bl	8002434 <commandToLCD>
				green();
 8003006:	f7ff fdfd 	bl	8002c04 <green>
				num[0] = getVal();
 800300a:	f7ff fc41 	bl	8002890 <getVal>
 800300e:	4603      	mov	r3, r0
 8003010:	b29b      	uxth	r3, r3
 8003012:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003014:	e010      	b.n	8003038 <StartUserTask+0x11c>
				{
					commandToLCD();
 8003016:	f7ff fa0d 	bl	8002434 <commandToLCD>
					error();
 800301a:	f7ff ff1b 	bl	8002e54 <error>
					HAL_Delay(1500);
 800301e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003022:	f001 f94b 	bl	80042bc <HAL_Delay>
					commandToLCD();
 8003026:	f7ff fa05 	bl	8002434 <commandToLCD>
					green();
 800302a:	f7ff fdeb 	bl	8002c04 <green>
					num[0] = getVal();
 800302e:	f7ff fc2f 	bl	8002890 <getVal>
 8003032:	4603      	mov	r3, r0
 8003034:	b29b      	uxth	r3, r3
 8003036:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003038:	893b      	ldrh	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0eb      	beq.n	8003016 <StartUserTask+0xfa>
 800303e:	893b      	ldrh	r3, [r7, #8]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d8e8      	bhi.n	8003016 <StartUserTask+0xfa>
				}
				indc = num[0];
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	833b      	strh	r3, [r7, #24]
				line2();
 8003048:	f7ff fb54 	bl	80026f4 <line2>
				onOff();
 800304c:	f7ff fece 	bl	8002dec <onOff>
				num[0] = getVal();
 8003050:	f7ff fc1e 	bl	8002890 <getVal>
 8003054:	4603      	mov	r3, r0
 8003056:	b29b      	uxth	r3, r3
 8003058:	813b      	strh	r3, [r7, #8]
				while(num[0]< 0 || num[0] > 1)
 800305a:	e010      	b.n	800307e <StartUserTask+0x162>
				{
					commandToLCD();
 800305c:	f7ff f9ea 	bl	8002434 <commandToLCD>
					error();
 8003060:	f7ff fef8 	bl	8002e54 <error>
					HAL_Delay(1500);
 8003064:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003068:	f001 f928 	bl	80042bc <HAL_Delay>
					commandToLCD();
 800306c:	f7ff f9e2 	bl	8002434 <commandToLCD>
					onOff();
 8003070:	f7ff febc 	bl	8002dec <onOff>
					num[0] = getVal();
 8003074:	f7ff fc0c 	bl	8002890 <getVal>
 8003078:	4603      	mov	r3, r0
 800307a:	b29b      	uxth	r3, r3
 800307c:	813b      	strh	r3, [r7, #8]
				while(num[0]< 0 || num[0] > 1)
 800307e:	893b      	ldrh	r3, [r7, #8]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d8eb      	bhi.n	800305c <StartUserTask+0x140>
				}
				UserInfo[1] = m;
 8003084:	8b7b      	ldrh	r3, [r7, #26]
 8003086:	b2da      	uxtb	r2, r3
 8003088:	4b69      	ldr	r3, [pc, #420]	; (8003230 <StartUserTask+0x314>)
 800308a:	705a      	strb	r2, [r3, #1]
				UserInfo[2] = indc;
 800308c:	8b3b      	ldrh	r3, [r7, #24]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b67      	ldr	r3, [pc, #412]	; (8003230 <StartUserTask+0x314>)
 8003092:	709a      	strb	r2, [r3, #2]
				UserInfo[3] = num[0];
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	4b65      	ldr	r3, [pc, #404]	; (8003230 <StartUserTask+0x314>)
 800309a:	70da      	strb	r2, [r3, #3]
				UserInfo[0]++;
 800309c:	4b64      	ldr	r3, [pc, #400]	; (8003230 <StartUserTask+0x314>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b62      	ldr	r3, [pc, #392]	; (8003230 <StartUserTask+0x314>)
 80030a6:	701a      	strb	r2, [r3, #0]

				clear();
 80030a8:	f7ff fb76 	bl	8002798 <clear>
				quit();
 80030ac:	f7ff fe16 	bl	8002cdc <quit>
				num[5] = getVal();
 80030b0:	f7ff fbee 	bl	8002890 <getVal>
 80030b4:	4603      	mov	r3, r0
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 80030ba:	e010      	b.n	80030de <StartUserTask+0x1c2>
				{
					commandToLCD();
 80030bc:	f7ff f9ba 	bl	8002434 <commandToLCD>
					error();
 80030c0:	f7ff fec8 	bl	8002e54 <error>
					HAL_Delay(1500);
 80030c4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80030c8:	f001 f8f8 	bl	80042bc <HAL_Delay>
					commandToLCD();
 80030cc:	f7ff f9b2 	bl	8002434 <commandToLCD>
					quit();
 80030d0:	f7ff fe04 	bl	8002cdc <quit>
					num[5] = getVal();
 80030d4:	f7ff fbdc 	bl	8002890 <getVal>
 80030d8:	4603      	mov	r3, r0
 80030da:	b29b      	uxth	r3, r3
 80030dc:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 80030de:	8a7b      	ldrh	r3, [r7, #18]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d8eb      	bhi.n	80030bc <StartUserTask+0x1a0>
 80030e4:	e089      	b.n	80031fa <StartUserTask+0x2de>
				}
			}
			else if(num[0] == 1)
 80030e6:	893b      	ldrh	r3, [r7, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f040 8086 	bne.w	80031fa <StartUserTask+0x2de>
			{
				m = 2;
 80030ee:	2302      	movs	r3, #2
 80030f0:	837b      	strh	r3, [r7, #26]
				commandToLCD();
 80030f2:	f7ff f99f 	bl	8002434 <commandToLCD>
				green();
 80030f6:	f7ff fd85 	bl	8002c04 <green>
				num[0] = getVal();
 80030fa:	f7ff fbc9 	bl	8002890 <getVal>
 80030fe:	4603      	mov	r3, r0
 8003100:	b29b      	uxth	r3, r3
 8003102:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003104:	e010      	b.n	8003128 <StartUserTask+0x20c>
				{
					commandToLCD();
 8003106:	f7ff f995 	bl	8002434 <commandToLCD>
					error();
 800310a:	f7ff fea3 	bl	8002e54 <error>
					HAL_Delay(1500);
 800310e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003112:	f001 f8d3 	bl	80042bc <HAL_Delay>
					commandToLCD();
 8003116:	f7ff f98d 	bl	8002434 <commandToLCD>
					green();
 800311a:	f7ff fd73 	bl	8002c04 <green>
					num[0] = getVal();
 800311e:	f7ff fbb7 	bl	8002890 <getVal>
 8003122:	4603      	mov	r3, r0
 8003124:	b29b      	uxth	r3, r3
 8003126:	813b      	strh	r3, [r7, #8]
				while(num[0]< 1 || num[0] > 3)
 8003128:	893b      	ldrh	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0eb      	beq.n	8003106 <StartUserTask+0x1ea>
 800312e:	893b      	ldrh	r3, [r7, #8]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d8e8      	bhi.n	8003106 <StartUserTask+0x1ea>
				}
				indc = num[0];
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	833b      	strh	r3, [r7, #24]
				line2();
 8003138:	f7ff fadc 	bl	80026f4 <line2>
				timer();
 800313c:	f7ff fd92 	bl	8002c64 <timer>
				num[0] = getVal();
 8003140:	f7ff fba6 	bl	8002890 <getVal>
 8003144:	4603      	mov	r3, r0
 8003146:	b29b      	uxth	r3, r3
 8003148:	813b      	strh	r3, [r7, #8]
				num[1] = getVal();
 800314a:	f7ff fba1 	bl	8002890 <getVal>
 800314e:	4603      	mov	r3, r0
 8003150:	b29b      	uxth	r3, r3
 8003152:	817b      	strh	r3, [r7, #10]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8003154:	e015      	b.n	8003182 <StartUserTask+0x266>
				{
					commandToLCD();
 8003156:	f7ff f96d 	bl	8002434 <commandToLCD>
					error();
 800315a:	f7ff fe7b 	bl	8002e54 <error>
					HAL_Delay(1500);
 800315e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003162:	f001 f8ab 	bl	80042bc <HAL_Delay>
					commandToLCD();
 8003166:	f7ff f965 	bl	8002434 <commandToLCD>
					timer();
 800316a:	f7ff fd7b 	bl	8002c64 <timer>
					num[0] = getVal();
 800316e:	f7ff fb8f 	bl	8002890 <getVal>
 8003172:	4603      	mov	r3, r0
 8003174:	b29b      	uxth	r3, r3
 8003176:	813b      	strh	r3, [r7, #8]
					num[1] = getVal();
 8003178:	f7ff fb8a 	bl	8002890 <getVal>
 800317c:	4603      	mov	r3, r0
 800317e:	b29b      	uxth	r3, r3
 8003180:	817b      	strh	r3, [r7, #10]
				while(num[0]< 0 || num[0] > 6 || num[1]< 0 || num[1] > 9 || (num[0]==6 && num[1]!=0))
 8003182:	893b      	ldrh	r3, [r7, #8]
 8003184:	2b06      	cmp	r3, #6
 8003186:	d8e6      	bhi.n	8003156 <StartUserTask+0x23a>
 8003188:	897b      	ldrh	r3, [r7, #10]
 800318a:	2b09      	cmp	r3, #9
 800318c:	d8e3      	bhi.n	8003156 <StartUserTask+0x23a>
 800318e:	893b      	ldrh	r3, [r7, #8]
 8003190:	2b06      	cmp	r3, #6
 8003192:	d102      	bne.n	800319a <StartUserTask+0x27e>
 8003194:	897b      	ldrh	r3, [r7, #10]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1dd      	bne.n	8003156 <StartUserTask+0x23a>
				}
				UserInfo[1] = m;
 800319a:	8b7b      	ldrh	r3, [r7, #26]
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <StartUserTask+0x314>)
 80031a0:	705a      	strb	r2, [r3, #1]
				UserInfo[2] = indc;
 80031a2:	8b3b      	ldrh	r3, [r7, #24]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4b22      	ldr	r3, [pc, #136]	; (8003230 <StartUserTask+0x314>)
 80031a8:	709a      	strb	r2, [r3, #2]
				UserInfo[3] = num[0];
 80031aa:	893b      	ldrh	r3, [r7, #8]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <StartUserTask+0x314>)
 80031b0:	70da      	strb	r2, [r3, #3]
				UserInfo[0] ++;
 80031b2:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <StartUserTask+0x314>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <StartUserTask+0x314>)
 80031bc:	701a      	strb	r2, [r3, #0]

				clear();
 80031be:	f7ff faeb 	bl	8002798 <clear>
				quit();
 80031c2:	f7ff fd8b 	bl	8002cdc <quit>
				num[5] = getVal();
 80031c6:	f7ff fb63 	bl	8002890 <getVal>
 80031ca:	4603      	mov	r3, r0
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 80031d0:	e010      	b.n	80031f4 <StartUserTask+0x2d8>
				{
					commandToLCD();
 80031d2:	f7ff f92f 	bl	8002434 <commandToLCD>
					error();
 80031d6:	f7ff fe3d 	bl	8002e54 <error>
					HAL_Delay(1500);
 80031da:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80031de:	f001 f86d 	bl	80042bc <HAL_Delay>
					commandToLCD();
 80031e2:	f7ff f927 	bl	8002434 <commandToLCD>
					quit();
 80031e6:	f7ff fd79 	bl	8002cdc <quit>
					num[5] = getVal();
 80031ea:	f7ff fb51 	bl	8002890 <getVal>
 80031ee:	4603      	mov	r3, r0
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	827b      	strh	r3, [r7, #18]
				while(num[5]< 0 || num[5] > 1)
 80031f4:	8a7b      	ldrh	r3, [r7, #18]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d8eb      	bhi.n	80031d2 <StartUserTask+0x2b6>
				}
			}
			if(num[5] == 1)
 80031fa:	8a7b      	ldrh	r3, [r7, #18]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <StartUserTask+0x2e8>
			{
				num[6] = 5;
 8003200:	2305      	movs	r3, #5
 8003202:	82bb      	strh	r3, [r7, #20]
		while(num[6] == 0)
 8003204:	8abb      	ldrh	r3, [r7, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f43f aed8 	beq.w	8002fbc <StartUserTask+0xa0>
	if(num[0] == 2 && num[1] == 2 && num[2] == 2 && num[3] == 2)
 800320c:	e007      	b.n	800321e <StartUserTask+0x302>
			}
		}
	}
	else
	{
		line2();
 800320e:	f7ff fa71 	bl	80026f4 <line2>
		wrongPass();
 8003212:	f7ff fcbb 	bl	8002b8c <wrongPass>
		HAL_Delay(2000);
 8003216:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800321a:	f001 f84f 	bl	80042bc <HAL_Delay>
	}
	osDelay(1);
 800321e:	2001      	movs	r0, #1
 8003220:	f003 f9da 	bl	80065d8 <osDelay>
	commandToLCD();
 8003224:	e67e      	b.n	8002f24 <StartUserTask+0x8>
 8003226:	bf00      	nop
 8003228:	40011000 	.word	0x40011000
 800322c:	40011400 	.word	0x40011400
 8003230:	2000002c 	.word	0x2000002c

08003234 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	; 0x30
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSolenoidTask */
	uint8_t b = 0, temp, L[3] = {0,0,0}, timS[3] = {0,0,0};
 800323c:	2300      	movs	r3, #0
 800323e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003242:	4a9c      	ldr	r2, [pc, #624]	; (80034b4 <StartSolenoidTask+0x280>)
 8003244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	4611      	mov	r1, r2
 800324c:	8019      	strh	r1, [r3, #0]
 800324e:	3302      	adds	r3, #2
 8003250:	0c12      	lsrs	r2, r2, #16
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	4a97      	ldr	r2, [pc, #604]	; (80034b4 <StartSolenoidTask+0x280>)
 8003256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	4611      	mov	r1, r2
 800325e:	8019      	strh	r1, [r3, #0]
 8003260:	3302      	adds	r3, #2
 8003262:	0c12      	lsrs	r2, r2, #16
 8003264:	701a      	strb	r2, [r3, #0]
	uint32_t timT[3] = {0,0,0}, timF[3] = {10,10,10};
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	2300      	movs	r3, #0
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	4a91      	ldr	r2, [pc, #580]	; (80034b8 <StartSolenoidTask+0x284>)
 8003274:	f107 030c 	add.w	r3, r7, #12
 8003278:	ca07      	ldmia	r2, {r0, r1, r2}
 800327a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	/* Infinite loop */

  for(;;)
  {
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]))
 800327e:	e125      	b.n	80034cc <StartSolenoidTask+0x298>
	  {

		  if(UserInfo[0] > b)//collecting new values
 8003280:	4b8e      	ldr	r3, [pc, #568]	; (80034bc <StartSolenoidTask+0x288>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003288:	429a      	cmp	r2, r3
 800328a:	d27a      	bcs.n	8003382 <StartSolenoidTask+0x14e>
		  {
			  if(UserInfo[1] == 1)//on/off
 800328c:	4b8b      	ldr	r3, [pc, #556]	; (80034bc <StartSolenoidTask+0x288>)
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d138      	bne.n	8003306 <StartSolenoidTask+0xd2>
			  {
				  if(UserInfo[2] == 1)//green one on/off
 8003294:	4b89      	ldr	r3, [pc, #548]	; (80034bc <StartSolenoidTask+0x288>)
 8003296:	789b      	ldrb	r3, [r3, #2]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d10e      	bne.n	80032ba <StartSolenoidTask+0x86>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, ((UserInfo[3] + 1) %2));
 800329c:	4b87      	ldr	r3, [pc, #540]	; (80034bc <StartSolenoidTask+0x288>)
 800329e:	78db      	ldrb	r3, [r3, #3]
 80032a0:	3301      	adds	r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	bfb8      	it	lt
 80032aa:	425b      	neglt	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	4883      	ldr	r0, [pc, #524]	; (80034c0 <StartSolenoidTask+0x28c>)
 80032b4:	f001 fcab 	bl	8004c0e <HAL_GPIO_WritePin>
 80032b8:	e05d      	b.n	8003376 <StartSolenoidTask+0x142>
				  else if(UserInfo[2] == 2)//green two on/off
 80032ba:	4b80      	ldr	r3, [pc, #512]	; (80034bc <StartSolenoidTask+0x288>)
 80032bc:	789b      	ldrb	r3, [r3, #2]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d10e      	bne.n	80032e0 <StartSolenoidTask+0xac>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((UserInfo[3] + 1) %2));
 80032c2:	4b7e      	ldr	r3, [pc, #504]	; (80034bc <StartSolenoidTask+0x288>)
 80032c4:	78db      	ldrb	r3, [r3, #3]
 80032c6:	3301      	adds	r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	bfb8      	it	lt
 80032d0:	425b      	neglt	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	2120      	movs	r1, #32
 80032d8:	4879      	ldr	r0, [pc, #484]	; (80034c0 <StartSolenoidTask+0x28c>)
 80032da:	f001 fc98 	bl	8004c0e <HAL_GPIO_WritePin>
 80032de:	e04a      	b.n	8003376 <StartSolenoidTask+0x142>
				  else if(UserInfo[2] == 3)//green three on/off
 80032e0:	4b76      	ldr	r3, [pc, #472]	; (80034bc <StartSolenoidTask+0x288>)
 80032e2:	789b      	ldrb	r3, [r3, #2]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d146      	bne.n	8003376 <StartSolenoidTask+0x142>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, ((UserInfo[3] + 1) %2));
 80032e8:	4b74      	ldr	r3, [pc, #464]	; (80034bc <StartSolenoidTask+0x288>)
 80032ea:	78db      	ldrb	r3, [r3, #3]
 80032ec:	3301      	adds	r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	bfb8      	it	lt
 80032f6:	425b      	neglt	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	2110      	movs	r1, #16
 80032fe:	4870      	ldr	r0, [pc, #448]	; (80034c0 <StartSolenoidTask+0x28c>)
 8003300:	f001 fc85 	bl	8004c0e <HAL_GPIO_WritePin>
 8003304:	e037      	b.n	8003376 <StartSolenoidTask+0x142>
			  }
			  else if(UserInfo[1] == 2)//timer
 8003306:	4b6d      	ldr	r3, [pc, #436]	; (80034bc <StartSolenoidTask+0x288>)
 8003308:	785b      	ldrb	r3, [r3, #1]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d133      	bne.n	8003376 <StartSolenoidTask+0x142>
			  {
				  timF[UserInfo[2]-1] = UserInfo[3];//set final time
 800330e:	4b6b      	ldr	r3, [pc, #428]	; (80034bc <StartSolenoidTask+0x288>)
 8003310:	78da      	ldrb	r2, [r3, #3]
 8003312:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <StartSolenoidTask+0x288>)
 8003314:	789b      	ldrb	r3, [r3, #2]
 8003316:	3b01      	subs	r3, #1
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800331e:	440b      	add	r3, r1
 8003320:	f843 2c24 	str.w	r2, [r3, #-36]
				  timS[UserInfo[2]-1] =__HAL_TIM_GET_COUNTER(&htim2);
 8003324:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <StartSolenoidTask+0x290>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800332a:	4b64      	ldr	r3, [pc, #400]	; (80034bc <StartSolenoidTask+0x288>)
 800332c:	789b      	ldrb	r3, [r3, #2]
 800332e:	3b01      	subs	r3, #1
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003336:	440b      	add	r3, r1
 8003338:	f803 2c0c 	strb.w	r2, [r3, #-12]
				  if(UserInfo[2] == 1)//green one one
 800333c:	4b5f      	ldr	r3, [pc, #380]	; (80034bc <StartSolenoidTask+0x288>)
 800333e:	789b      	ldrb	r3, [r3, #2]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <StartSolenoidTask+0x11c>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8003344:	2201      	movs	r2, #1
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	485d      	ldr	r0, [pc, #372]	; (80034c0 <StartSolenoidTask+0x28c>)
 800334a:	f001 fc60 	bl	8004c0e <HAL_GPIO_WritePin>
 800334e:	e012      	b.n	8003376 <StartSolenoidTask+0x142>
				  else if(UserInfo[2] == 2)//green two on
 8003350:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <StartSolenoidTask+0x288>)
 8003352:	789b      	ldrb	r3, [r3, #2]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d105      	bne.n	8003364 <StartSolenoidTask+0x130>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8003358:	2201      	movs	r2, #1
 800335a:	2120      	movs	r1, #32
 800335c:	4858      	ldr	r0, [pc, #352]	; (80034c0 <StartSolenoidTask+0x28c>)
 800335e:	f001 fc56 	bl	8004c0e <HAL_GPIO_WritePin>
 8003362:	e008      	b.n	8003376 <StartSolenoidTask+0x142>
				  else if(UserInfo[2] == 3)//green three on
 8003364:	4b55      	ldr	r3, [pc, #340]	; (80034bc <StartSolenoidTask+0x288>)
 8003366:	789b      	ldrb	r3, [r3, #2]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d104      	bne.n	8003376 <StartSolenoidTask+0x142>
					  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800336c:	2201      	movs	r2, #1
 800336e:	2110      	movs	r1, #16
 8003370:	4853      	ldr	r0, [pc, #332]	; (80034c0 <StartSolenoidTask+0x28c>)
 8003372:	f001 fc4c 	bl	8004c0e <HAL_GPIO_WritePin>
			  }
			  UserInfo[0]--;
 8003376:	4b51      	ldr	r3, [pc, #324]	; (80034bc <StartSolenoidTask+0x288>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	3b01      	subs	r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <StartSolenoidTask+0x288>)
 8003380:	701a      	strb	r2, [r3, #0]
		  }
		  //running timers if we have a time set for any solenoid
		  if(timF[0] != 10)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b0a      	cmp	r3, #10
 8003386:	d02f      	beq.n	80033e8 <StartSolenoidTask+0x1b4>
		  {
			  if(timS[0] != 0)
 8003388:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800338c:	2b00      	cmp	r3, #0
 800338e:	d007      	beq.n	80033a0 <StartSolenoidTask+0x16c>
			  {
				  timF[0] = timF[0] + timS[0];
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
				  timS[0] = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 80033a0:	4b48      	ldr	r3, [pc, #288]	; (80034c4 <StartSolenoidTask+0x290>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[0])
 80033aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033ae:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d20b      	bcs.n	80033ce <StartSolenoidTask+0x19a>
				  timT[0] = timT[0] + temp + 65535 - L[0];
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80033bc:	4413      	add	r3, r2
 80033be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80033c8:	33ff      	adds	r3, #255	; 0xff
 80033ca:	61bb      	str	r3, [r7, #24]
 80033cc:	e007      	b.n	80033de <StartSolenoidTask+0x1aa>

			  else
				  timT[0] = timT[0] + (temp - L[0]);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80033d4:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80033d8:	1a52      	subs	r2, r2, r1
 80033da:	4413      	add	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
			  L[0] = temp;
 80033de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80033e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80033e6:	e071      	b.n	80034cc <StartSolenoidTask+0x298>
		  }
		  else if(timF[1] != 10)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b0a      	cmp	r3, #10
 80033ec:	d02f      	beq.n	800344e <StartSolenoidTask+0x21a>
		  {
			  if(timS[1] != 0)
 80033ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <StartSolenoidTask+0x1d2>
			  {
				  timF[1] = timF[1] + timS[1];
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80033fc:	4413      	add	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
				  timS[1] = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 8003406:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <StartSolenoidTask+0x290>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[1])
 8003410:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003414:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003418:	429a      	cmp	r2, r3
 800341a:	d20b      	bcs.n	8003434 <StartSolenoidTask+0x200>
				  timT[1] = timT[1] + temp + 65535 - L[1];
 800341c:	69fa      	ldr	r2, [r7, #28]
 800341e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003422:	4413      	add	r3, r2
 8003424:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800342e:	33ff      	adds	r3, #255	; 0xff
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	e007      	b.n	8003444 <StartSolenoidTask+0x210>

			  else
				  timT[1] = timT[1] + (temp - L[1]);
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800343a:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800343e:	1a52      	subs	r2, r2, r1
 8003440:	4413      	add	r3, r2
 8003442:	61fb      	str	r3, [r7, #28]
			  L[1] = temp;
 8003444:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003448:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800344c:	e03e      	b.n	80034cc <StartSolenoidTask+0x298>
		  }
		  else if(timF[2] != 10)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2b0a      	cmp	r3, #10
 8003452:	d039      	beq.n	80034c8 <StartSolenoidTask+0x294>
		  {
			  if(timS[2] != 0)
 8003454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <StartSolenoidTask+0x238>
			  {
				  timF[2] = timF[2] + timS[2];
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003462:	4413      	add	r3, r2
 8003464:	617b      	str	r3, [r7, #20]
				  timS[2] = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			  }
			  temp = __HAL_TIM_GET_COUNTER(&htim2);
 800346c:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <StartSolenoidTask+0x290>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			  if(temp<L[2])
 8003476:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800347a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800347e:	429a      	cmp	r2, r3
 8003480:	d20b      	bcs.n	800349a <StartSolenoidTask+0x266>
				  timT[2] = timT[2] + temp + 65535 - L[2];
 8003482:	6a3a      	ldr	r2, [r7, #32]
 8003484:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003488:	4413      	add	r3, r2
 800348a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003494:	33ff      	adds	r3, #255	; 0xff
 8003496:	623b      	str	r3, [r7, #32]
 8003498:	e007      	b.n	80034aa <StartSolenoidTask+0x276>

			  else
				  timT[2] = timT[2] + (temp - L[2]);
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80034a0:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80034a4:	1a52      	subs	r2, r2, r1
 80034a6:	4413      	add	r3, r2
 80034a8:	623b      	str	r3, [r7, #32]
			  L[2] = temp;
 80034aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034b2:	e00b      	b.n	80034cc <StartSolenoidTask+0x298>
 80034b4:	0800902c 	.word	0x0800902c
 80034b8:	08009030 	.word	0x08009030
 80034bc:	2000002c 	.word	0x2000002c
 80034c0:	40010c00 	.word	0x40010c00
 80034c4:	20002874 	.word	0x20002874
		  }
		  else
			  timT[0] = 11;
 80034c8:	230b      	movs	r3, #11
 80034ca:	61bb      	str	r3, [r7, #24]
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]))
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d208      	bcs.n	80034e6 <StartSolenoidTask+0x2b2>
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d204      	bcs.n	80034e6 <StartSolenoidTask+0x2b2>
 80034dc:	6a3a      	ldr	r2, [r7, #32]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	f4ff aecd 	bcc.w	8003280 <StartSolenoidTask+0x4c>
	  }


	  if(timT[0] == 11)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b0b      	cmp	r3, #11
 80034ea:	d101      	bne.n	80034f0 <StartSolenoidTask+0x2bc>
		  timT[0] = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]

	  if(timT[0] >= timF[0])
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d30c      	bcc.n	8003512 <StartSolenoidTask+0x2de>
	  {
			Water[0] = Flow[0] * timT[0];
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <StartSolenoidTask+0x32c>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	b292      	uxth	r2, r2
 8003500:	fb02 f303 	mul.w	r3, r2, r3
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <StartSolenoidTask+0x330>)
 8003508:	801a      	strh	r2, [r3, #0]
			timT[0] = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
			timF[0] = 10;
 800350e:	230a      	movs	r3, #10
 8003510:	60fb      	str	r3, [r7, #12]
	  }
	  if(timT[1] >= timF[1])
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	429a      	cmp	r2, r3
 8003518:	d30c      	bcc.n	8003534 <StartSolenoidTask+0x300>
	  {
			Water[1] = Flow[1] * timT[1];
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <StartSolenoidTask+0x32c>)
 800351c:	885b      	ldrh	r3, [r3, #2]
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	b292      	uxth	r2, r2
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	b29a      	uxth	r2, r3
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <StartSolenoidTask+0x330>)
 800352a:	805a      	strh	r2, [r3, #2]
			timT[1] = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
			timF[1] = 10;
 8003530:	230a      	movs	r3, #10
 8003532:	613b      	str	r3, [r7, #16]
	  }
	  if(timT[2] >= timF[2])
 8003534:	6a3a      	ldr	r2, [r7, #32]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	d30c      	bcc.n	8003556 <StartSolenoidTask+0x322>
	  {
			Water[2] = Flow[2] * timT[2];
 800353c:	4b08      	ldr	r3, [pc, #32]	; (8003560 <StartSolenoidTask+0x32c>)
 800353e:	889b      	ldrh	r3, [r3, #4]
 8003540:	6a3a      	ldr	r2, [r7, #32]
 8003542:	b292      	uxth	r2, r2
 8003544:	fb02 f303 	mul.w	r3, r2, r3
 8003548:	b29a      	uxth	r2, r3
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <StartSolenoidTask+0x330>)
 800354c:	809a      	strh	r2, [r3, #4]
			timT[2] = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	623b      	str	r3, [r7, #32]
			timF[2] = 10;
 8003552:	230a      	movs	r3, #10
 8003554:	617b      	str	r3, [r7, #20]
	  }
	  osDelay(1);
 8003556:	2001      	movs	r0, #1
 8003558:	f003 f83e 	bl	80065d8 <osDelay>
	  while((timT[0] < timF[0]) && (timT[1] < timF[1]) && (timT[2] < timF[2]))
 800355c:	e7b6      	b.n	80034cc <StartSolenoidTask+0x298>
 800355e:	bf00      	nop
 8003560:	20000038 	.word	0x20000038
 8003564:	20000030 	.word	0x20000030

08003568 <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b098      	sub	sp, #96	; 0x60
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWeatherTask */
	uint16_t period[20], raw[20];
	uint16_t tickstart, tickend, totalP, totalT, a, b;
	uint16_t Pcount = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	HAL_TIM_Base_Start(&htim2);
 8003576:	4803      	ldr	r0, [pc, #12]	; (8003584 <StartWeatherTask+0x1c>)
 8003578:	f002 f8d4 	bl	8005724 <HAL_TIM_Base_Start>
//			//osMessageQueuePut(WeatherQueueHandle, &totalT, 1U, 0U);
//			//osMessageQueuePut(WeatherQueueHandle, &totalP, 1U, 0U);
//			a = totalT;
//			b = totalP;
//		}
    osDelay(1);
 800357c:	2001      	movs	r0, #1
 800357e:	f003 f82b 	bl	80065d8 <osDelay>
 8003582:	e7fb      	b.n	800357c <StartWeatherTask+0x14>
 8003584:	20002874 	.word	0x20002874

08003588 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b092      	sub	sp, #72	; 0x48
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlowTask */
  	uint8_t F = 0, L = 0, o[3] = {1,1,1};
 8003590:	2300      	movs	r3, #0
 8003592:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003596:	2300      	movs	r3, #0
 8003598:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800359c:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <StartFlowTask+0x58>)
 800359e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035a2:	6812      	ldr	r2, [r2, #0]
 80035a4:	4611      	mov	r1, r2
 80035a6:	8019      	strh	r1, [r3, #0]
 80035a8:	3302      	adds	r3, #2
 80035aa:	0c12      	lsrs	r2, r2, #16
 80035ac:	701a      	strb	r2, [r3, #0]
  	uint16_t f1 = 0, f2 = 0, f3 = 0, tickL =0, temp;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80035c0:	2300      	movs	r3, #0
 80035c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  	uint16_t C[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	2228      	movs	r2, #40	; 0x28
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f005 fcbf 	bl	8008f50 <memset>
  	uint32_t total = 0, tickS;
 80035d2:	2300      	movs	r3, #0
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
//	  }
//	  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[2] == 0)
//	  {
//		  o[2] = 1;
//	  }
	  osDelay(1);
 80035d6:	2001      	movs	r0, #1
 80035d8:	f002 fffe 	bl	80065d8 <osDelay>
 80035dc:	e7fb      	b.n	80035d6 <StartFlowTask+0x4e>
 80035de:	bf00      	nop
 80035e0:	0800903c 	.word	0x0800903c

080035e4 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */

	initializeNodes();
 80035ec:	f000 f8cc 	bl	8003788 <initializeNodes>
	uint16_t Moisture[3];

  /* Infinite loop */
  for(;;)
  {
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 300) == HAL_OK)
 80035f0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80035f4:	221a      	movs	r2, #26
 80035f6:	4950      	ldr	r1, [pc, #320]	; (8003738 <StartProcessingTask+0x154>)
 80035f8:	4850      	ldr	r0, [pc, #320]	; (800373c <StartProcessingTask+0x158>)
 80035fa:	f002 fd66 	bl	80060ca <HAL_UART_Receive>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 8094 	bne.w	800372e <StartProcessingTask+0x14a>
	 	  	 {
	 	  		 //has to stay with main (the file where the "UART_HandleTypeDef huart3;" is)
	 	  		 if (uartBufferRX[0] == 0x7E)
 8003606:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <StartProcessingTask+0x154>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b7e      	cmp	r3, #126	; 0x7e
 800360c:	f040 808f 	bne.w	800372e <StartProcessingTask+0x14a>
	 	  		 {
	 	  			 switch (uartBufferRX[3])
 8003610:	4b49      	ldr	r3, [pc, #292]	; (8003738 <StartProcessingTask+0x154>)
 8003612:	78db      	ldrb	r3, [r3, #3]
 8003614:	2b92      	cmp	r3, #146	; 0x92
 8003616:	d002      	beq.n	800361e <StartProcessingTask+0x3a>
 8003618:	2b97      	cmp	r3, #151	; 0x97
 800361a:	d004      	beq.n	8003626 <StartProcessingTask+0x42>
 800361c:	e007      	b.n	800362e <StartProcessingTask+0x4a>
	 	  			 {
	 	  			 case 0x92:
	 	  				 processIO(uartBufferRX);
 800361e:	4846      	ldr	r0, [pc, #280]	; (8003738 <StartProcessingTask+0x154>)
 8003620:	f000 f9c0 	bl	80039a4 <processIO>
	 	  				 break;
 8003624:	e00b      	b.n	800363e <StartProcessingTask+0x5a>

	 	  			 case 0x97:
	 	  				 processATResponse(uartBufferRX);
 8003626:	4844      	ldr	r0, [pc, #272]	; (8003738 <StartProcessingTask+0x154>)
 8003628:	f000 f958 	bl	80038dc <processATResponse>
	 	  				 break;
 800362c:	e007      	b.n	800363e <StartProcessingTask+0x5a>

	 	  			 default://if it wasnt an expected data type just throw it out
	 	  				 HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 400);
 800362e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003632:	221a      	movs	r2, #26
 8003634:	4940      	ldr	r1, [pc, #256]	; (8003738 <StartProcessingTask+0x154>)
 8003636:	4841      	ldr	r0, [pc, #260]	; (800373c <StartProcessingTask+0x158>)
 8003638:	f002 fd47 	bl	80060ca <HAL_UART_Receive>
	 	  				 break;
 800363c:	bf00      	nop
	 	  			 }
	 	  			 ///green1
	 	  			fairways[1].capacative[0] -= 0x30;
 800363e:	4b40      	ldr	r3, [pc, #256]	; (8003740 <StartProcessingTask+0x15c>)
 8003640:	7edb      	ldrb	r3, [r3, #27]
 8003642:	3b30      	subs	r3, #48	; 0x30
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4b3e      	ldr	r3, [pc, #248]	; (8003740 <StartProcessingTask+0x15c>)
 8003648:	76da      	strb	r2, [r3, #27]
	 	  			fairways[1].capacative[1] -= 0x30;
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <StartProcessingTask+0x15c>)
 800364c:	7f1b      	ldrb	r3, [r3, #28]
 800364e:	3b30      	subs	r3, #48	; 0x30
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <StartProcessingTask+0x15c>)
 8003654:	771a      	strb	r2, [r3, #28]

	 	  			Moisture[0] = fairways[1].capacative[0]*10;
 8003656:	4b3a      	ldr	r3, [pc, #232]	; (8003740 <StartProcessingTask+0x15c>)
 8003658:	7edb      	ldrb	r3, [r3, #27]
 800365a:	b29b      	uxth	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	0092      	lsls	r2, r2, #2
 8003660:	4413      	add	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	813b      	strh	r3, [r7, #8]
	 	  			Moisture[0] = Moisture[0] + fairways[1].capacative[1];
 8003668:	893a      	ldrh	r2, [r7, #8]
 800366a:	4b35      	ldr	r3, [pc, #212]	; (8003740 <StartProcessingTask+0x15c>)
 800366c:	7f1b      	ldrb	r3, [r3, #28]
 800366e:	b29b      	uxth	r3, r3
 8003670:	4413      	add	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	813b      	strh	r3, [r7, #8]
	 	  			///green 2
	 	  			fairways[2].capacative[0] -= 0x30;
 8003676:	4b32      	ldr	r3, [pc, #200]	; (8003740 <StartProcessingTask+0x15c>)
 8003678:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800367c:	3b30      	subs	r3, #48	; 0x30
 800367e:	b2da      	uxtb	r2, r3
 8003680:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <StartProcessingTask+0x15c>)
 8003682:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 	  			fairways[2].capacative[1] -= 0x30;
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <StartProcessingTask+0x15c>)
 8003688:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800368c:	3b30      	subs	r3, #48	; 0x30
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <StartProcessingTask+0x15c>)
 8003692:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	 	  			Moisture[1] = fairways[2].capacative[0]*10;
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <StartProcessingTask+0x15c>)
 8003698:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	0092      	lsls	r2, r2, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	817b      	strh	r3, [r7, #10]
	 	  			Moisture[1] = Moisture[1] + fairways[2].capacative[1];
 80036aa:	897a      	ldrh	r2, [r7, #10]
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <StartProcessingTask+0x15c>)
 80036ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	817b      	strh	r3, [r7, #10]
	 	  			/// green 3
	 	  			fairways[3].capacative[0] -= 0x30;
 80036ba:	4b21      	ldr	r3, [pc, #132]	; (8003740 <StartProcessingTask+0x15c>)
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	3b30      	subs	r3, #48	; 0x30
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <StartProcessingTask+0x15c>)
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	 	  			fairways[3].capacative[1] -= 0x30;
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <StartProcessingTask+0x15c>)
 80036cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d0:	3b30      	subs	r3, #48	; 0x30
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <StartProcessingTask+0x15c>)
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	 	  			Moisture[2] = fairways[3].capacative[0]*10;
 80036da:	4b19      	ldr	r3, [pc, #100]	; (8003740 <StartProcessingTask+0x15c>)
 80036dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	461a      	mov	r2, r3
 80036e4:	0092      	lsls	r2, r2, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	81bb      	strh	r3, [r7, #12]
	 	  			Moisture[2] = Moisture[2] + fairways[3].capacative[1];
 80036ee:	89ba      	ldrh	r2, [r7, #12]
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <StartProcessingTask+0x15c>)
 80036f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	81bb      	strh	r3, [r7, #12]

	 	  			 if(Moisture[0] <= 40)//10 percent is 100 in the initial input
 80036fe:	893b      	ldrh	r3, [r7, #8]
 8003700:	2b28      	cmp	r3, #40	; 0x28
 8003702:	d804      	bhi.n	800370e <StartProcessingTask+0x12a>
	 	  			 {
	 	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8003704:	2200      	movs	r2, #0
 8003706:	2120      	movs	r1, #32
 8003708:	480e      	ldr	r0, [pc, #56]	; (8003744 <StartProcessingTask+0x160>)
 800370a:	f001 fa80 	bl	8004c0e <HAL_GPIO_WritePin>
	 	  			 }

	 	  			 if(Moisture[1]<= 40)//10 percent is 100 in the initial input
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	2b28      	cmp	r3, #40	; 0x28
 8003712:	d804      	bhi.n	800371e <StartProcessingTask+0x13a>
	 	  			 {
	 	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8003714:	2200      	movs	r2, #0
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	480a      	ldr	r0, [pc, #40]	; (8003744 <StartProcessingTask+0x160>)
 800371a:	f001 fa78 	bl	8004c0e <HAL_GPIO_WritePin>
	 	  			 }

	 	  			 if(Moisture[2]<= 40)//10 percent is 100 in the initial input
 800371e:	89bb      	ldrh	r3, [r7, #12]
 8003720:	2b28      	cmp	r3, #40	; 0x28
 8003722:	d804      	bhi.n	800372e <StartProcessingTask+0x14a>
	 	  			 {
	 	  				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8003724:	2200      	movs	r2, #0
 8003726:	2110      	movs	r1, #16
 8003728:	4806      	ldr	r0, [pc, #24]	; (8003744 <StartProcessingTask+0x160>)
 800372a:	f001 fa70 	bl	8004c0e <HAL_GPIO_WritePin>
	 	  		  }
	  				 //sensorToGateway(1);
	 	  	  }

//process weather and website data*****************************************************************************************
    osDelay(150);
 800372e:	2096      	movs	r0, #150	; 0x96
 8003730:	f002 ff52 	bl	80065d8 <osDelay>
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 26, 300) == HAL_OK)
 8003734:	e75c      	b.n	80035f0 <StartProcessingTask+0xc>
 8003736:	bf00      	nop
 8003738:	20002538 	.word	0x20002538
 800373c:	200024b8 	.word	0x200024b8
 8003740:	2000257c 	.word	0x2000257c
 8003744:	40010c00 	.word	0x40010c00

08003748 <StartWebsiteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebsiteTask */
void StartWebsiteTask(void *argument)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
//  	  {
//  		web[0]++;
//  		web[1] = BufferRX[0];//Sun has set or not
//  		web[2] = BufferRX[1];//Chance of precipitation
//  	  }
    osDelay(1);
 8003750:	2001      	movs	r0, #1
 8003752:	f002 ff41 	bl	80065d8 <osDelay>
 8003756:	e7fb      	b.n	8003750 <StartWebsiteTask+0x8>

08003758 <HAL_TIM_PeriodElapsedCallback>:
//		  HAL_UART_Transmit(&huart1, &water, 1, 10);//*********also send Colton's info************
//	  }
//web[3] = BufferRX[2];
//web[4] = BufferRX[3];
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d101      	bne.n	800376e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800376a:	f000 fd8b 	bl	8004284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40000800 	.word	0x40000800

0800377c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003780:	b672      	cpsid	i
}
 8003782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003784:	e7fe      	b.n	8003784 <Error_Handler+0x8>
	...

08003788 <initializeNodes>:
 */

#include "sensorObjects.h"

void initializeNodes()
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 800378e:	4a4f      	ldr	r2, [pc, #316]	; (80038cc <initializeNodes+0x144>)
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003798:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 800379c:	4a4c      	ldr	r2, [pc, #304]	; (80038d0 <initializeNodes+0x148>)
 800379e:	f107 030c 	add.w	r3, r7, #12
 80037a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037a6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 80037aa:	4a4a      	ldr	r2, [pc, #296]	; (80038d4 <initializeNodes+0x14c>)
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037b2:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 80037ba:	2300      	movs	r3, #0
 80037bc:	77fb      	strb	r3, [r7, #31]
 80037be:	e053      	b.n	8003868 <initializeNodes+0xe0>
	{
		fairways[i].capacative[0]	= 0x30;
 80037c0:	7ffa      	ldrb	r2, [r7, #31]
 80037c2:	4945      	ldr	r1, [pc, #276]	; (80038d8 <initializeNodes+0x150>)
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	4413      	add	r3, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	330a      	adds	r3, #10
 80037ce:	2230      	movs	r2, #48	; 0x30
 80037d0:	701a      	strb	r2, [r3, #0]
		fairways[i].capacative[1]	= 0x30;
 80037d2:	7ffa      	ldrb	r2, [r7, #31]
 80037d4:	4940      	ldr	r1, [pc, #256]	; (80038d8 <initializeNodes+0x150>)
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	4413      	add	r3, r2
 80037dc:	440b      	add	r3, r1
 80037de:	330b      	adds	r3, #11
 80037e0:	2230      	movs	r2, #48	; 0x30
 80037e2:	701a      	strb	r2, [r3, #0]

		fairways[i].battery[0] 		= 0x38;
 80037e4:	7ffa      	ldrb	r2, [r7, #31]
 80037e6:	493c      	ldr	r1, [pc, #240]	; (80038d8 <initializeNodes+0x150>)
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	440b      	add	r3, r1
 80037f0:	330c      	adds	r3, #12
 80037f2:	2238      	movs	r2, #56	; 0x38
 80037f4:	701a      	strb	r2, [r3, #0]
		fairways[i].battery[1] 		= 0x37;
 80037f6:	7ffa      	ldrb	r2, [r7, #31]
 80037f8:	4937      	ldr	r1, [pc, #220]	; (80038d8 <initializeNodes+0x150>)
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	4413      	add	r3, r2
 8003800:	440b      	add	r3, r1
 8003802:	330d      	adds	r3, #13
 8003804:	2237      	movs	r2, #55	; 0x37
 8003806:	701a      	strb	r2, [r3, #0]

		fairways[i].resistive[0] 	= 0x30;
 8003808:	7ffa      	ldrb	r2, [r7, #31]
 800380a:	4933      	ldr	r1, [pc, #204]	; (80038d8 <initializeNodes+0x150>)
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4413      	add	r3, r2
 8003812:	440b      	add	r3, r1
 8003814:	3308      	adds	r3, #8
 8003816:	2230      	movs	r2, #48	; 0x30
 8003818:	701a      	strb	r2, [r3, #0]
		fairways[i].resistive[1] 	= 0x30;
 800381a:	7ffa      	ldrb	r2, [r7, #31]
 800381c:	492e      	ldr	r1, [pc, #184]	; (80038d8 <initializeNodes+0x150>)
 800381e:	4613      	mov	r3, r2
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	4413      	add	r3, r2
 8003824:	440b      	add	r3, r1
 8003826:	3309      	adds	r3, #9
 8003828:	2230      	movs	r2, #48	; 0x30
 800382a:	701a      	strb	r2, [r3, #0]

		fairways[i].temperature[0]	= 0x30;
 800382c:	7ffa      	ldrb	r2, [r7, #31]
 800382e:	492a      	ldr	r1, [pc, #168]	; (80038d8 <initializeNodes+0x150>)
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4413      	add	r3, r2
 8003836:	440b      	add	r3, r1
 8003838:	330e      	adds	r3, #14
 800383a:	2230      	movs	r2, #48	; 0x30
 800383c:	701a      	strb	r2, [r3, #0]
		fairways[i].temperature[1]	= 0x30;
 800383e:	7ffa      	ldrb	r2, [r7, #31]
 8003840:	4925      	ldr	r1, [pc, #148]	; (80038d8 <initializeNodes+0x150>)
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	4413      	add	r3, r2
 8003848:	440b      	add	r3, r1
 800384a:	330f      	adds	r3, #15
 800384c:	2230      	movs	r2, #48	; 0x30
 800384e:	701a      	strb	r2, [r3, #0]
		fairways[i].temperature[2]	= 0x30;
 8003850:	7ffa      	ldrb	r2, [r7, #31]
 8003852:	4921      	ldr	r1, [pc, #132]	; (80038d8 <initializeNodes+0x150>)
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	4413      	add	r3, r2
 800385a:	440b      	add	r3, r1
 800385c:	3310      	adds	r3, #16
 800385e:	2230      	movs	r2, #48	; 0x30
 8003860:	701a      	strb	r2, [r3, #0]
	for (i = 0; i<32; i++)
 8003862:	7ffb      	ldrb	r3, [r7, #31]
 8003864:	3301      	adds	r3, #1
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	7ffb      	ldrb	r3, [r7, #31]
 800386a:	2b1f      	cmp	r3, #31
 800386c:	d9a8      	bls.n	80037c0 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 800386e:	2300      	movs	r3, #0
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e022      	b.n	80038ba <initializeNodes+0x132>
	{
		fairways[0].address[i] = BlueAddress[i];
 8003874:	7ffa      	ldrb	r2, [r7, #31]
 8003876:	7ffb      	ldrb	r3, [r7, #31]
 8003878:	f107 0120 	add.w	r1, r7, #32
 800387c:	440a      	add	r2, r1
 800387e:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <initializeNodes+0x150>)
 8003884:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8003886:	7ffa      	ldrb	r2, [r7, #31]
 8003888:	7ffb      	ldrb	r3, [r7, #31]
 800388a:	f107 0120 	add.w	r1, r7, #32
 800388e:	440a      	add	r2, r1
 8003890:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8003894:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <initializeNodes+0x150>)
 8003896:	4413      	add	r3, r2
 8003898:	460a      	mov	r2, r1
 800389a:	745a      	strb	r2, [r3, #17]
		fairways[2].address[i] = RedAddress[i];
 800389c:	7ffa      	ldrb	r2, [r7, #31]
 800389e:	7ffb      	ldrb	r3, [r7, #31]
 80038a0:	f107 0120 	add.w	r1, r7, #32
 80038a4:	440a      	add	r2, r1
 80038a6:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 80038aa:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <initializeNodes+0x150>)
 80038ac:	4413      	add	r3, r2
 80038ae:	460a      	mov	r2, r1
 80038b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	for (i= 0; i<8; i++)
 80038b4:	7ffb      	ldrb	r3, [r7, #31]
 80038b6:	3301      	adds	r3, #1
 80038b8:	77fb      	strb	r3, [r7, #31]
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	2b07      	cmp	r3, #7
 80038be:	d9d9      	bls.n	8003874 <initializeNodes+0xec>
	}

	return;
 80038c0:	bf00      	nop
}
 80038c2:	3724      	adds	r7, #36	; 0x24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	08009040 	.word	0x08009040
 80038d0:	08009048 	.word	0x08009048
 80038d4:	08009050 	.word	0x08009050
 80038d8:	2000257c 	.word	0x2000257c

080038dc <processATResponse>:

//Process Data
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void processATResponse(uint8_t *ATResponse)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	int nodeNum = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
	uint8_t battAsASCII[] = {0,0};
 80038e8:	2300      	movs	r3, #0
 80038ea:	813b      	strh	r3, [r7, #8]

	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e04e      	b.n	8003990 <processATResponse+0xb4>
		{
			int match = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	613b      	str	r3, [r7, #16]
			//Compare the address in the API Frame to the address of our known nodes.
			//the address bytes in the API frame are 5-12
			//if we find a different byte, we know its the wrong address and do not have a match
			for (int j = 0; j<8; j++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e015      	b.n	8003928 <processATResponse+0x4c>
			{
				if (ATResponse[j+5] != (fairways[nodeNum]).address[j])
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3305      	adds	r3, #5
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	7819      	ldrb	r1, [r3, #0]
 8003906:	4826      	ldr	r0, [pc, #152]	; (80039a0 <processATResponse+0xc4>)
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	4413      	add	r3, r2
 8003910:	18c2      	adds	r2, r0, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	4299      	cmp	r1, r3
 800391a:	d002      	beq.n	8003922 <processATResponse+0x46>
				{
					match = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
					break; //exit the loop, its not this node
 8003920:	e005      	b.n	800392e <processATResponse+0x52>
			for (int j = 0; j<8; j++)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b07      	cmp	r3, #7
 800392c:	dde6      	ble.n	80038fc <processATResponse+0x20>
				}
			}

			if (match == 1)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d12a      	bne.n	800398a <processATResponse+0xae>
			{
				//get which data type it is
				//no longer need the first "IF" because the temp is now coming from an ADC
				//we will keep in so we could add ambient field temp in the future.
				if (ATResponse[15] == 0x25 && ATResponse[16] == 0x56) //if the AT command was "%V"
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	330f      	adds	r3, #15
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	2b25      	cmp	r3, #37	; 0x25
 800393c:	d123      	bne.n	8003986 <processATResponse+0xaa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3310      	adds	r3, #16
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b56      	cmp	r3, #86	; 0x56
 8003946:	d11e      	bne.n	8003986 <processATResponse+0xaa>
				{
					calcPercent(ATResponse[18], ATResponse[19], battAsASCII);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3312      	adds	r3, #18
 800394c:	7818      	ldrb	r0, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3313      	adds	r3, #19
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	f107 0208 	add.w	r2, r7, #8
 8003958:	4619      	mov	r1, r3
 800395a:	f000 fa51 	bl	8003e00 <calcPercent>
					fairways[nodeNum].battery[0] = battAsASCII[0];
 800395e:	7a38      	ldrb	r0, [r7, #8]
 8003960:	490f      	ldr	r1, [pc, #60]	; (80039a0 <processATResponse+0xc4>)
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	4413      	add	r3, r2
 800396a:	440b      	add	r3, r1
 800396c:	330c      	adds	r3, #12
 800396e:	4602      	mov	r2, r0
 8003970:	701a      	strb	r2, [r3, #0]
					fairways[nodeNum].battery[0] = battAsASCII[0];
 8003972:	7a38      	ldrb	r0, [r7, #8]
 8003974:	490a      	ldr	r1, [pc, #40]	; (80039a0 <processATResponse+0xc4>)
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	440b      	add	r3, r1
 8003980:	330c      	adds	r3, #12
 8003982:	4602      	mov	r2, r0
 8003984:	701a      	strb	r2, [r3, #0]
				else
				{	//if we got an unexpected AT Command Type, give up and try again next time data is transmitted
					//uartInterruptInit(26);
				}

				nodeNum = 255; //break the loop. Break would work too but this explicitly breaks the correct loop if i move things.
 8003986:	23ff      	movs	r3, #255	; 0xff
 8003988:	617b      	str	r3, [r7, #20]
	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	3301      	adds	r3, #1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2b23      	cmp	r3, #35	; 0x23
 8003994:	ddad      	ble.n	80038f2 <processATResponse+0x16>
			}
		}

  return;
 8003996:	bf00      	nop
}
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	2000257c 	.word	0x2000257c

080039a4 <processIO>:

void processIO(uint8_t *ioData)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	uint8_t nodeNumber = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
	uint8_t	 match = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	75bb      	strb	r3, [r7, #22]

	uint8_t dataAsASCII[] = {0,0,0};
 80039b4:	4a55      	ldr	r2, [pc, #340]	; (8003b0c <processIO+0x168>)
 80039b6:	f107 030c 	add.w	r3, r7, #12
 80039ba:	6812      	ldr	r2, [r2, #0]
 80039bc:	4611      	mov	r1, r2
 80039be:	8019      	strh	r1, [r3, #0]
 80039c0:	3302      	adds	r3, #2
 80039c2:	0c12      	lsrs	r2, r2, #16
 80039c4:	701a      	strb	r2, [r3, #0]

	if(!verifyChecksum(ioData))
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f92e 	bl	8003c28 <verifyChecksum>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8098 	beq.w	8003b04 <processIO+0x160>
		//Determine which sensor it belongs to
		//get the address, if it exists, put the data into it
		//if the addres doesnt already exist then make a new object to put data into
		//for now we will just use the three that we have

		for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
 80039d8:	e08b      	b.n	8003af2 <processIO+0x14e>
		{
			match = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	75bb      	strb	r3, [r7, #22]
			//Compare the address in the API Frame to the address of our known nodes.
			//the address bytes in the API frame are 5-12
			//if we find a different byte, we know its the wrong address and do not have a match
			for (int j = 0; j<8; j++)
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	e015      	b.n	8003a10 <processIO+0x6c>
			{
				if (ioData[j+4] != (fairways[nodeNumber]).address[j])
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	3304      	adds	r3, #4
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	7819      	ldrb	r1, [r3, #0]
 80039ee:	7dfa      	ldrb	r2, [r7, #23]
 80039f0:	4847      	ldr	r0, [pc, #284]	; (8003b10 <processIO+0x16c>)
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	4413      	add	r3, r2
 80039f8:	18c2      	adds	r2, r0, r3
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4413      	add	r3, r2
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	4299      	cmp	r1, r3
 8003a02:	d002      	beq.n	8003a0a <processIO+0x66>
				{
					match = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	75bb      	strb	r3, [r7, #22]
					break;//it is not this nodeNumer (j value)
 8003a08:	e005      	b.n	8003a16 <processIO+0x72>
			for (int j = 0; j<8; j++)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b07      	cmp	r3, #7
 8003a14:	dde6      	ble.n	80039e4 <processIO+0x40>
				}
			}

			if (match == 1)
 8003a16:	7dbb      	ldrb	r3, [r7, #22]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d167      	bne.n	8003aec <processIO+0x148>
			{
				calcTemp(ioData[19], ioData[20], dataAsASCII);//put the temp values into a three byte array
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3313      	adds	r3, #19
 8003a20:	7818      	ldrb	r0, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3314      	adds	r3, #20
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	f107 020c 	add.w	r2, r7, #12
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f000 f95d 	bl	8003cec <calcTemp>
				fairways[nodeNumber].temperature[0]	= dataAsASCII[0];
 8003a32:	7dfa      	ldrb	r2, [r7, #23]
 8003a34:	7b38      	ldrb	r0, [r7, #12]
 8003a36:	4936      	ldr	r1, [pc, #216]	; (8003b10 <processIO+0x16c>)
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	4413      	add	r3, r2
 8003a3e:	440b      	add	r3, r1
 8003a40:	330e      	adds	r3, #14
 8003a42:	4602      	mov	r2, r0
 8003a44:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].temperature[1]	= dataAsASCII[1];
 8003a46:	7dfa      	ldrb	r2, [r7, #23]
 8003a48:	7b78      	ldrb	r0, [r7, #13]
 8003a4a:	4931      	ldr	r1, [pc, #196]	; (8003b10 <processIO+0x16c>)
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	4413      	add	r3, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	330f      	adds	r3, #15
 8003a56:	4602      	mov	r2, r0
 8003a58:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].temperature[2]	= dataAsASCII[2];
 8003a5a:	7dfa      	ldrb	r2, [r7, #23]
 8003a5c:	7bb8      	ldrb	r0, [r7, #14]
 8003a5e:	492c      	ldr	r1, [pc, #176]	; (8003b10 <processIO+0x16c>)
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	4413      	add	r3, r2
 8003a66:	440b      	add	r3, r1
 8003a68:	3310      	adds	r3, #16
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	701a      	strb	r2, [r3, #0]

				calcPercent(ioData[23], ioData[24], dataAsASCII);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3317      	adds	r3, #23
 8003a72:	7818      	ldrb	r0, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3318      	adds	r3, #24
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	f107 020c 	add.w	r2, r7, #12
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f000 f9be 	bl	8003e00 <calcPercent>
				fairways[nodeNumber].resistive[0]	= dataAsASCII[0];
 8003a84:	7dfa      	ldrb	r2, [r7, #23]
 8003a86:	7b38      	ldrb	r0, [r7, #12]
 8003a88:	4921      	ldr	r1, [pc, #132]	; (8003b10 <processIO+0x16c>)
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	4413      	add	r3, r2
 8003a90:	440b      	add	r3, r1
 8003a92:	3308      	adds	r3, #8
 8003a94:	4602      	mov	r2, r0
 8003a96:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].resistive[1]	= dataAsASCII[1];
 8003a98:	7dfa      	ldrb	r2, [r7, #23]
 8003a9a:	7b78      	ldrb	r0, [r7, #13]
 8003a9c:	491c      	ldr	r1, [pc, #112]	; (8003b10 <processIO+0x16c>)
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	4413      	add	r3, r2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	3309      	adds	r3, #9
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	701a      	strb	r2, [r3, #0]

				calcPercent(ioData[21], ioData[22], dataAsASCII);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3315      	adds	r3, #21
 8003ab0:	7818      	ldrb	r0, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3316      	adds	r3, #22
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	f107 020c 	add.w	r2, r7, #12
 8003abc:	4619      	mov	r1, r3
 8003abe:	f000 f99f 	bl	8003e00 <calcPercent>
				fairways[nodeNumber].capacative[0]	= dataAsASCII[0];
 8003ac2:	7dfa      	ldrb	r2, [r7, #23]
 8003ac4:	7b38      	ldrb	r0, [r7, #12]
 8003ac6:	4912      	ldr	r1, [pc, #72]	; (8003b10 <processIO+0x16c>)
 8003ac8:	4613      	mov	r3, r2
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	4413      	add	r3, r2
 8003ace:	440b      	add	r3, r1
 8003ad0:	330a      	adds	r3, #10
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	701a      	strb	r2, [r3, #0]
				fairways[nodeNumber].capacative[1]	= dataAsASCII[1];
 8003ad6:	7dfa      	ldrb	r2, [r7, #23]
 8003ad8:	7b78      	ldrb	r0, [r7, #13]
 8003ada:	490d      	ldr	r1, [pc, #52]	; (8003b10 <processIO+0x16c>)
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	4413      	add	r3, r2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	330b      	adds	r3, #11
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	701a      	strb	r2, [r3, #0]

				break;
 8003aea:	e006      	b.n	8003afa <processIO+0x156>
		for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	3301      	adds	r3, #1
 8003af0:	75fb      	strb	r3, [r7, #23]
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b23      	cmp	r3, #35	; 0x23
 8003af6:	f67f af70 	bls.w	80039da <processIO+0x36>
		}
	}
	//__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_TC);

	//uartInterruptInit(21);
	sendBattRequest(nodeNumber);
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f809 	bl	8003b14 <sendBattRequest>

  return;
 8003b02:	e000      	b.n	8003b06 <processIO+0x162>
		return;//include an error report here if time permits
 8003b04:	bf00      	nop
}
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	08009058 	.word	0x08009058
 8003b10:	2000257c 	.word	0x2000257c

08003b14 <sendBattRequest>:

//Send Data Requests
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void sendBattRequest(uint8_t nodeNumber)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
	uartBufferTX[0] = 0x7E; //startDelim
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <sendBattRequest+0x108>)
 8003b20:	227e      	movs	r2, #126	; 0x7e
 8003b22:	701a      	strb	r2, [r3, #0]
	uartBufferTX[1] = 0x00; //length byte 1
 8003b24:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <sendBattRequest+0x108>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	705a      	strb	r2, [r3, #1]
	uartBufferTX[2] = 0x0F; //length byte 2
 8003b2a:	4b3c      	ldr	r3, [pc, #240]	; (8003c1c <sendBattRequest+0x108>)
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	709a      	strb	r2, [r3, #2]
	uartBufferTX[3] = 0x17; //Frame Type
 8003b30:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <sendBattRequest+0x108>)
 8003b32:	2217      	movs	r2, #23
 8003b34:	70da      	strb	r2, [r3, #3]
	uartBufferTX[4] = 0x01; //Frame ID
 8003b36:	4b39      	ldr	r3, [pc, #228]	; (8003c1c <sendBattRequest+0x108>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	711a      	strb	r2, [r3, #4]
	uartBufferTX[5] = 	fairways[nodeNumber].address[0]; //start of 64bit address
 8003b3c:	79fa      	ldrb	r2, [r7, #7]
 8003b3e:	4938      	ldr	r1, [pc, #224]	; (8003c20 <sendBattRequest+0x10c>)
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	4413      	add	r3, r2
 8003b46:	440b      	add	r3, r1
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <sendBattRequest+0x108>)
 8003b4c:	715a      	strb	r2, [r3, #5]
	uartBufferTX[6] = 	fairways[nodeNumber].address[1];
 8003b4e:	79fa      	ldrb	r2, [r7, #7]
 8003b50:	4933      	ldr	r1, [pc, #204]	; (8003c20 <sendBattRequest+0x10c>)
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	4413      	add	r3, r2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <sendBattRequest+0x108>)
 8003b60:	719a      	strb	r2, [r3, #6]
	uartBufferTX[7] = 	fairways[nodeNumber].address[2];
 8003b62:	79fa      	ldrb	r2, [r7, #7]
 8003b64:	492e      	ldr	r1, [pc, #184]	; (8003c20 <sendBattRequest+0x10c>)
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	4413      	add	r3, r2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3302      	adds	r3, #2
 8003b70:	781a      	ldrb	r2, [r3, #0]
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <sendBattRequest+0x108>)
 8003b74:	71da      	strb	r2, [r3, #7]
	uartBufferTX[8] = 	fairways[nodeNumber].address[3];
 8003b76:	79fa      	ldrb	r2, [r7, #7]
 8003b78:	4929      	ldr	r1, [pc, #164]	; (8003c20 <sendBattRequest+0x10c>)
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	4413      	add	r3, r2
 8003b80:	440b      	add	r3, r1
 8003b82:	3303      	adds	r3, #3
 8003b84:	781a      	ldrb	r2, [r3, #0]
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <sendBattRequest+0x108>)
 8003b88:	721a      	strb	r2, [r3, #8]
	uartBufferTX[9] = 	fairways[nodeNumber].address[4];
 8003b8a:	79fa      	ldrb	r2, [r7, #7]
 8003b8c:	4924      	ldr	r1, [pc, #144]	; (8003c20 <sendBattRequest+0x10c>)
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4413      	add	r3, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	3304      	adds	r3, #4
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <sendBattRequest+0x108>)
 8003b9c:	725a      	strb	r2, [r3, #9]
	uartBufferTX[10] =	fairways[nodeNumber].address[5];
 8003b9e:	79fa      	ldrb	r2, [r7, #7]
 8003ba0:	491f      	ldr	r1, [pc, #124]	; (8003c20 <sendBattRequest+0x10c>)
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	4413      	add	r3, r2
 8003ba8:	440b      	add	r3, r1
 8003baa:	3305      	adds	r3, #5
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	4b1b      	ldr	r3, [pc, #108]	; (8003c1c <sendBattRequest+0x108>)
 8003bb0:	729a      	strb	r2, [r3, #10]
	uartBufferTX[11] = 	fairways[nodeNumber].address[6];
 8003bb2:	79fa      	ldrb	r2, [r7, #7]
 8003bb4:	491a      	ldr	r1, [pc, #104]	; (8003c20 <sendBattRequest+0x10c>)
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	4413      	add	r3, r2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3306      	adds	r3, #6
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <sendBattRequest+0x108>)
 8003bc4:	72da      	strb	r2, [r3, #11]
	uartBufferTX[12] = 	fairways[nodeNumber].address[7]; //last of 64bit address
 8003bc6:	79fa      	ldrb	r2, [r7, #7]
 8003bc8:	4915      	ldr	r1, [pc, #84]	; (8003c20 <sendBattRequest+0x10c>)
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	4413      	add	r3, r2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3307      	adds	r3, #7
 8003bd4:	781a      	ldrb	r2, [r3, #0]
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <sendBattRequest+0x108>)
 8003bd8:	731a      	strb	r2, [r3, #12]
	uartBufferTX[13] = 0xFF;//Start of 16 bit address
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <sendBattRequest+0x108>)
 8003bdc:	22ff      	movs	r2, #255	; 0xff
 8003bde:	735a      	strb	r2, [r3, #13]
	uartBufferTX[14] = 0xFE;//End of 16 bit address
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <sendBattRequest+0x108>)
 8003be2:	22fe      	movs	r2, #254	; 0xfe
 8003be4:	739a      	strb	r2, [r3, #14]
	uartBufferTX[15] = 0x02;//Command Options - 0x02 means apply
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <sendBattRequest+0x108>)
 8003be8:	2202      	movs	r2, #2
 8003bea:	73da      	strb	r2, [r3, #15]
	uartBufferTX[16] = 0x25;//AT Command Byte 1 - 0x25 is '%'
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <sendBattRequest+0x108>)
 8003bee:	2225      	movs	r2, #37	; 0x25
 8003bf0:	741a      	strb	r2, [r3, #16]
	uartBufferTX[17] = 0x56;//AT Command Byte 2 - 0x56 is 'V'
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <sendBattRequest+0x108>)
 8003bf4:	2256      	movs	r2, #86	; 0x56
 8003bf6:	745a      	strb	r2, [r3, #17]
	uartBufferTX[18] = generateChecksum(uartBufferTX);//Checksum (as calculated by XCTU)
 8003bf8:	4808      	ldr	r0, [pc, #32]	; (8003c1c <sendBattRequest+0x108>)
 8003bfa:	f000 f846 	bl	8003c8a <generateChecksum>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <sendBattRequest+0x108>)
 8003c04:	749a      	strb	r2, [r3, #18]

	HAL_UART_Transmit(&huart3, uartBufferTX, 19, 1);
 8003c06:	2301      	movs	r3, #1
 8003c08:	2213      	movs	r2, #19
 8003c0a:	4904      	ldr	r1, [pc, #16]	; (8003c1c <sendBattRequest+0x108>)
 8003c0c:	4805      	ldr	r0, [pc, #20]	; (8003c24 <sendBattRequest+0x110>)
 8003c0e:	f002 f9ca 	bl	8005fa6 <HAL_UART_Transmit>
	return;
 8003c12:	bf00      	nop
}
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	200028c8 	.word	0x200028c8
 8003c20:	2000257c 	.word	0x2000257c
 8003c24:	200024b8 	.word	0x200024b8

08003c28 <verifyChecksum>:
return;
}
//Checksum Functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t verifyChecksum(uint8_t *ioData)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	uint16_t lengthOfData = ioData[1] * 256 + ioData[2]; //this value should always be 17
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3301      	adds	r3, #1
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3302      	adds	r3, #2
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	81fb      	strh	r3, [r7, #14]
	uint16_t checkSumCompare = 0; //calculate the check sum and see if it matches the value recieved
 8003c48:	2300      	movs	r3, #0
 8003c4a:	82fb      	strh	r3, [r7, #22]
	/* to verify the checksum:
	 * Add all bytes including the checksum; do not include the delimiter and length.
	 * If the checksum is correct, the last two digits on the far right of the sum equal 0xFF.
	 */

	for (int i = 0; i<=lengthOfData; i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e00b      	b.n	8003c6a <verifyChecksum+0x42>
	{	//i<=lengthOfData includes checksum value, as opposed to i<lengthOfData which does not
		checkSumCompare += ioData[i+3]; //i+3 becasue we skip the delim and length values
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	3303      	adds	r3, #3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	8afb      	ldrh	r3, [r7, #22]
 8003c60:	4413      	add	r3, r2
 8003c62:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i<=lengthOfData; i++)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	3301      	adds	r3, #1
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	89fb      	ldrh	r3, [r7, #14]
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	ddef      	ble.n	8003c52 <verifyChecksum+0x2a>
	}

	if ((checkSumCompare & 0xFF) == 0xFF) //clears all bits except lowest 8 then compares
 8003c72:	8afb      	ldrh	r3, [r7, #22]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2bff      	cmp	r3, #255	; 0xff
 8003c78:	d101      	bne.n	8003c7e <verifyChecksum+0x56>
	{
		return 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <verifyChecksum+0x58>
	}
	else
	{
		return 0;
 8003c7e:	2300      	movs	r3, #0
	}
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr

08003c8a <generateChecksum>:

uint8_t generateChecksum(uint8_t *frame)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b085      	sub	sp, #20
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
	 * Add all bytes of the packet, except the start delimiter 0x7E and the length (the second and third bytes).
	 * Keep only the lowest 8 bits from the result.
   	 * Subtract this quantity from 0xFF.
   	 */

	uint16_t length = frame[1]*256 + frame[2];
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3301      	adds	r3, #1
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	817b      	strh	r3, [r7, #10]
	uint8_t i = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
	uint16_t sum= 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	81bb      	strh	r3, [r7, #12]

	for (i=0; i<length; i++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
 8003cb6:	e00b      	b.n	8003cd0 <generateChecksum+0x46>
	{
		sum += frame[i+3];
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
 8003cba:	3303      	adds	r3, #3
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	89bb      	ldrh	r3, [r7, #12]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	81bb      	strh	r3, [r7, #12]
	for (i=0; i<length; i++)
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	897a      	ldrh	r2, [r7, #10]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d8ee      	bhi.n	8003cb8 <generateChecksum+0x2e>
		//sum = sum & 0xFF;//we only need the last two bits in the end
		//this clears off the high numbers that we dont need so we can use
		//a smaller data type
	}

	return (0xFF - sum);
 8003cda:	89bb      	ldrh	r3, [r7, #12]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <calcTemp>:

//Calculations
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void calcTemp(uint8_t ADC0_19, uint8_t ADC0_20, uint8_t *threeByteArray)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	603a      	str	r2, [r7, #0]
 8003cf6:	71fb      	strb	r3, [r7, #7]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	71bb      	strb	r3, [r7, #6]
	float ADC = ADC0_19*256 + ADC0_20; //wrt real ground, range of 0 (0V) to 1023 (2.5V)
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	79bb      	ldrb	r3, [r7, #6]
 8003d02:	4413      	add	r3, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fc fadd 	bl	80002c4 <__aeabi_i2f>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	613b      	str	r3, [r7, #16]
	ADC = (ADC/1023)*2.5;
 8003d0e:	4938      	ldr	r1, [pc, #224]	; (8003df0 <calcTemp+0x104>)
 8003d10:	6938      	ldr	r0, [r7, #16]
 8003d12:	f7fc fbdf 	bl	80004d4 <__aeabi_fdiv>
 8003d16:	4603      	mov	r3, r0
 8003d18:	4936      	ldr	r1, [pc, #216]	; (8003df4 <calcTemp+0x108>)
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc fb26 	bl	800036c <__aeabi_fmul>
 8003d20:	4603      	mov	r3, r0
 8003d22:	613b      	str	r3, [r7, #16]
	int virtualGround = 1;//virtual ground is 1V ish
 8003d24:	2301      	movs	r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
	ADC = ADC - virtualGround;//wrt to virtual ground now
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7fc facb 	bl	80002c4 <__aeabi_i2f>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4619      	mov	r1, r3
 8003d32:	6938      	ldr	r0, [r7, #16]
 8003d34:	f7fc fa10 	bl	8000158 <__aeabi_fsub>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	613b      	str	r3, [r7, #16]
	ADC = ADC*100; // same as dividing by 0.01 mV/degree
 8003d3c:	492e      	ldr	r1, [pc, #184]	; (8003df8 <calcTemp+0x10c>)
 8003d3e:	6938      	ldr	r0, [r7, #16]
 8003d40:	f7fc fb14 	bl	800036c <__aeabi_fmul>
 8003d44:	4603      	mov	r3, r0
 8003d46:	613b      	str	r3, [r7, #16]
	int temperature = (int)ADC;//cast into uint16_t
 8003d48:	6938      	ldr	r0, [r7, #16]
 8003d4a:	f7fc fc5f 	bl	800060c <__aeabi_f2iz>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	617b      	str	r3, [r7, #20]

	//we will assume the temperature is in the range of (-99, 99) because if its not, the grass is dead and the sensors dont work anyway
	if (temperature >= -99 && temperature <=99)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003d58:	db3b      	blt.n	8003dd2 <calcTemp+0xe6>
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	2b63      	cmp	r3, #99	; 0x63
 8003d5e:	dc38      	bgt.n	8003dd2 <calcTemp+0xe6>
	{
		if (temperature <0)
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da06      	bge.n	8003d74 <calcTemp+0x88>
		{
			threeByteArray[0] = 0x31;//1 means negative
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2231      	movs	r2, #49	; 0x31
 8003d6a:	701a      	strb	r2, [r3, #0]
			temperature *= -1;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	425b      	negs	r3, r3
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	e002      	b.n	8003d7a <calcTemp+0x8e>
		}
		else
		{
			threeByteArray[0] = 0x30;//0 means positive
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2230      	movs	r2, #48	; 0x30
 8003d78:	701a      	strb	r2, [r3, #0]
		}
		threeByteArray[1] = temperature/10; //get the tens digit from 0 to 9
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	4a1f      	ldr	r2, [pc, #124]	; (8003dfc <calcTemp+0x110>)
 8003d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8003d82:	1092      	asrs	r2, r2, #2
 8003d84:	17db      	asrs	r3, r3, #31
 8003d86:	1ad2      	subs	r2, r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	701a      	strb	r2, [r3, #0]
		threeByteArray[2] = temperature%10; //get the remainder from 0 to 9
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <calcTemp+0x110>)
 8003d94:	fb83 1302 	smull	r1, r3, r3, r2
 8003d98:	1099      	asrs	r1, r3, #2
 8003d9a:	17d3      	asrs	r3, r2, #31
 8003d9c:	1ac9      	subs	r1, r1, r3
 8003d9e:	460b      	mov	r3, r1
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	1ad1      	subs	r1, r2, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	3302      	adds	r3, #2
 8003dac:	b2ca      	uxtb	r2, r1
 8003dae:	701a      	strb	r2, [r3, #0]
		//turn the values into the hex value representing the ASCII symbol of that digit
		//^^this sentence is why I will never reccomend digi products
		//^^because why should I have to do this?
		threeByteArray[1] += 0x30;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	3230      	adds	r2, #48	; 0x30
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
		threeByteArray[2] += 0x30;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	3302      	adds	r3, #2
 8003dca:	3230      	adds	r2, #48	; 0x30
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e00a      	b.n	8003de8 <calcTemp+0xfc>
	}
	else //(The case of righteous fires cleansing the earth or hell froze over)
	{
		threeByteArray[0] = 0x2; //two means buggered Data
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	701a      	strb	r2, [r3, #0]
		threeByteArray[1] = 0x36; //arbitrary
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	2236      	movs	r2, #54	; 0x36
 8003dde:	701a      	strb	r2, [r3, #0]
		threeByteArray[2] = 0x39; //arbitrary
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	3302      	adds	r3, #2
 8003de4:	2239      	movs	r2, #57	; 0x39
 8003de6:	701a      	strb	r2, [r3, #0]
	}

	return;
 8003de8:	bf00      	nop
}
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	447fc000 	.word	0x447fc000
 8003df4:	40200000 	.word	0x40200000
 8003df8:	42c80000 	.word	0x42c80000
 8003dfc:	66666667 	.word	0x66666667

08003e00 <calcPercent>:

void calcPercent(uint8_t ADC_A, uint8_t ADC_B, uint8_t *threeByteArray)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	603a      	str	r2, [r7, #0]
 8003e0a:	71fb      	strb	r3, [r7, #7]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	71bb      	strb	r3, [r7, #6]
	//The function will convert the ADC value to a percentage based on the available range
	//then break the percentage down into a two digit int
	//the two digit int will be separated
	//the separated values will be replaced by their ascii representations

	float ADC = ADC_A*256 + ADC_B; //wrt real ground, range of 0 (0V) to 1023 (2.5V)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	021a      	lsls	r2, r3, #8
 8003e14:	79bb      	ldrb	r3, [r7, #6]
 8003e16:	4413      	add	r3, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fc fa53 	bl	80002c4 <__aeabi_i2f>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	60fb      	str	r3, [r7, #12]
	ADC = (ADC/1023)*100; //divide by the full range, multiply by 100 to get the percent
 8003e22:	491e      	ldr	r1, [pc, #120]	; (8003e9c <calcPercent+0x9c>)
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f7fc fb55 	bl	80004d4 <__aeabi_fdiv>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	491c      	ldr	r1, [pc, #112]	; (8003ea0 <calcPercent+0xa0>)
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7fc fa9c 	bl	800036c <__aeabi_fmul>
 8003e34:	4603      	mov	r3, r0
 8003e36:	60fb      	str	r3, [r7, #12]
	int intADC = (int) ADC;
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f7fc fbe7 	bl	800060c <__aeabi_f2iz>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	60bb      	str	r3, [r7, #8]

	threeByteArray[0] = intADC/10; //get the 10s digit
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4a17      	ldr	r2, [pc, #92]	; (8003ea4 <calcPercent+0xa4>)
 8003e46:	fb82 1203 	smull	r1, r2, r2, r3
 8003e4a:	1092      	asrs	r2, r2, #2
 8003e4c:	17db      	asrs	r3, r3, #31
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	701a      	strb	r2, [r3, #0]
	threeByteArray[1] = intADC%10; //get the ones digit
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <calcPercent+0xa4>)
 8003e5a:	fb83 1302 	smull	r1, r3, r3, r2
 8003e5e:	1099      	asrs	r1, r3, #2
 8003e60:	17d3      	asrs	r3, r2, #31
 8003e62:	1ac9      	subs	r1, r1, r3
 8003e64:	460b      	mov	r3, r1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	1ad1      	subs	r1, r2, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	b2ca      	uxtb	r2, r1
 8003e74:	701a      	strb	r2, [r3, #0]

	threeByteArray[0] += 0x30;//gives the hex value of the ascii representation of the digit
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	3330      	adds	r3, #48	; 0x30
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	701a      	strb	r2, [r3, #0]
	threeByteArray[1] += 0x30;//gives the hex value of the ascii representation of the digit
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	3301      	adds	r3, #1
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	3230      	adds	r2, #48	; 0x30
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

	return;
 8003e92:	bf00      	nop

}
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	447fc000 	.word	0x447fc000
 8003ea0:	42c80000 	.word	0x42c80000
 8003ea4:	66666667 	.word	0x66666667

08003ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_MspInit+0x68>)
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	4a17      	ldr	r2, [pc, #92]	; (8003f10 <HAL_MspInit+0x68>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6193      	str	r3, [r2, #24]
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_MspInit+0x68>)
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_MspInit+0x68>)
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <HAL_MspInit+0x68>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	61d3      	str	r3, [r2, #28]
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <HAL_MspInit+0x68>)
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ede:	2200      	movs	r2, #0
 8003ee0:	210f      	movs	r1, #15
 8003ee2:	f06f 0001 	mvn.w	r0, #1
 8003ee6:	f000 fccc 	bl	8004882 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003eea:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_MspInit+0x6c>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <HAL_MspInit+0x6c>)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40010000 	.word	0x40010000

08003f18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	f107 0310 	add.w	r3, r7, #16
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a14      	ldr	r2, [pc, #80]	; (8003f84 <HAL_ADC_MspInit+0x6c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d121      	bne.n	8003f7c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f38:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <HAL_ADC_MspInit+0x70>)
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <HAL_ADC_MspInit+0x70>)
 8003f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f42:	6193      	str	r3, [r2, #24]
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_ADC_MspInit+0x70>)
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_ADC_MspInit+0x70>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <HAL_ADC_MspInit+0x70>)
 8003f56:	f043 0310 	orr.w	r3, r3, #16
 8003f5a:	6193      	str	r3, [r2, #24]
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_ADC_MspInit+0x70>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f68:	2320      	movs	r3, #32
 8003f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f70:	f107 0310 	add.w	r3, r7, #16
 8003f74:	4619      	mov	r1, r3
 8003f76:	4805      	ldr	r0, [pc, #20]	; (8003f8c <HAL_ADC_MspInit+0x74>)
 8003f78:	f000 fcae 	bl	80048d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f7c:	bf00      	nop
 8003f7e:	3720      	adds	r7, #32
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40012400 	.word	0x40012400
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40011000 	.word	0x40011000

08003f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <HAL_TIM_Base_MspInit+0x58>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10c      	bne.n	8003fbc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_TIM_Base_MspInit+0x5c>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	4a11      	ldr	r2, [pc, #68]	; (8003fec <HAL_TIM_Base_MspInit+0x5c>)
 8003fa8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003fac:	6193      	str	r3, [r2, #24]
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_TIM_Base_MspInit+0x5c>)
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003fba:	e010      	b.n	8003fde <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d10b      	bne.n	8003fde <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_TIM_Base_MspInit+0x5c>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	4a08      	ldr	r2, [pc, #32]	; (8003fec <HAL_TIM_Base_MspInit+0x5c>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	61d3      	str	r3, [r2, #28]
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_TIM_Base_MspInit+0x5c>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	40012c00 	.word	0x40012c00
 8003fec:	40021000 	.word	0x40021000

08003ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08a      	sub	sp, #40	; 0x28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	f107 0318 	add.w	r3, r7, #24
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a38      	ldr	r2, [pc, #224]	; (80040ec <HAL_UART_MspInit+0xfc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d132      	bne.n	8004076 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004010:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <HAL_UART_MspInit+0x100>)
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	4a36      	ldr	r2, [pc, #216]	; (80040f0 <HAL_UART_MspInit+0x100>)
 8004016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800401a:	6193      	str	r3, [r2, #24]
 800401c:	4b34      	ldr	r3, [pc, #208]	; (80040f0 <HAL_UART_MspInit+0x100>)
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004028:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_UART_MspInit+0x100>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	4a30      	ldr	r2, [pc, #192]	; (80040f0 <HAL_UART_MspInit+0x100>)
 800402e:	f043 0304 	orr.w	r3, r3, #4
 8004032:	6193      	str	r3, [r2, #24]
 8004034:	4b2e      	ldr	r3, [pc, #184]	; (80040f0 <HAL_UART_MspInit+0x100>)
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004046:	2302      	movs	r3, #2
 8004048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800404a:	2303      	movs	r3, #3
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404e:	f107 0318 	add.w	r3, r7, #24
 8004052:	4619      	mov	r1, r3
 8004054:	4827      	ldr	r0, [pc, #156]	; (80040f4 <HAL_UART_MspInit+0x104>)
 8004056:	f000 fc3f 	bl	80048d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800405a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004068:	f107 0318 	add.w	r3, r7, #24
 800406c:	4619      	mov	r1, r3
 800406e:	4821      	ldr	r0, [pc, #132]	; (80040f4 <HAL_UART_MspInit+0x104>)
 8004070:	f000 fc32 	bl	80048d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004074:	e036      	b.n	80040e4 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <HAL_UART_MspInit+0x108>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d131      	bne.n	80040e4 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004080:	4b1b      	ldr	r3, [pc, #108]	; (80040f0 <HAL_UART_MspInit+0x100>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4a1a      	ldr	r2, [pc, #104]	; (80040f0 <HAL_UART_MspInit+0x100>)
 8004086:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800408a:	61d3      	str	r3, [r2, #28]
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_UART_MspInit+0x100>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004098:	4b15      	ldr	r3, [pc, #84]	; (80040f0 <HAL_UART_MspInit+0x100>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_UART_MspInit+0x100>)
 800409e:	f043 0308 	orr.w	r3, r3, #8
 80040a2:	6193      	str	r3, [r2, #24]
 80040a4:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <HAL_UART_MspInit+0x100>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80040b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b6:	2302      	movs	r3, #2
 80040b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ba:	2303      	movs	r3, #3
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040be:	f107 0318 	add.w	r3, r7, #24
 80040c2:	4619      	mov	r1, r3
 80040c4:	480d      	ldr	r0, [pc, #52]	; (80040fc <HAL_UART_MspInit+0x10c>)
 80040c6:	f000 fc07 	bl	80048d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80040ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d8:	f107 0318 	add.w	r3, r7, #24
 80040dc:	4619      	mov	r1, r3
 80040de:	4807      	ldr	r0, [pc, #28]	; (80040fc <HAL_UART_MspInit+0x10c>)
 80040e0:	f000 fbfa 	bl	80048d8 <HAL_GPIO_Init>
}
 80040e4:	bf00      	nop
 80040e6:	3728      	adds	r7, #40	; 0x28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40021000 	.word	0x40021000
 80040f4:	40010800 	.word	0x40010800
 80040f8:	40004800 	.word	0x40004800
 80040fc:	40010c00 	.word	0x40010c00

08004100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08c      	sub	sp, #48	; 0x30
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8004110:	2200      	movs	r2, #0
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	201e      	movs	r0, #30
 8004116:	f000 fbb4 	bl	8004882 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800411a:	201e      	movs	r0, #30
 800411c:	f000 fbcd 	bl	80048ba <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <HAL_InitTick+0xa0>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <HAL_InitTick+0xa0>)
 8004126:	f043 0304 	orr.w	r3, r3, #4
 800412a:	61d3      	str	r3, [r2, #28]
 800412c:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_InitTick+0xa0>)
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004138:	f107 0210 	add.w	r2, r7, #16
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f001 f99a 	bl	800547c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004148:	f001 f970 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 800414c:	4603      	mov	r3, r0
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	4a13      	ldr	r2, [pc, #76]	; (80041a4 <HAL_InitTick+0xa4>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	0c9b      	lsrs	r3, r3, #18
 800415c:	3b01      	subs	r3, #1
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_InitTick+0xa8>)
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_InitTick+0xac>)
 8004164:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_InitTick+0xa8>)
 8004168:	f240 32e7 	movw	r2, #999	; 0x3e7
 800416c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_InitTick+0xa8>)
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_InitTick+0xa8>)
 8004176:	2200      	movs	r2, #0
 8004178:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_InitTick+0xa8>)
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8004180:	4809      	ldr	r0, [pc, #36]	; (80041a8 <HAL_InitTick+0xa8>)
 8004182:	f001 fa7f 	bl	8005684 <HAL_TIM_Base_Init>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800418c:	4806      	ldr	r0, [pc, #24]	; (80041a8 <HAL_InitTick+0xa8>)
 800418e:	f001 fb13 	bl	80057b8 <HAL_TIM_Base_Start_IT>
 8004192:	4603      	mov	r3, r0
 8004194:	e000      	b.n	8004198 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	3730      	adds	r7, #48	; 0x30
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40021000 	.word	0x40021000
 80041a4:	431bde83 	.word	0x431bde83
 80041a8:	200028fc 	.word	0x200028fc
 80041ac:	40000800 	.word	0x40000800

080041b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041b4:	e7fe      	b.n	80041b4 <NMI_Handler+0x4>

080041b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ba:	e7fe      	b.n	80041ba <HardFault_Handler+0x4>

080041bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c0:	e7fe      	b.n	80041c0 <MemManage_Handler+0x4>

080041c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <BusFault_Handler+0x4>

080041c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041cc:	e7fe      	b.n	80041cc <UsageFault_Handler+0x4>

080041ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bc80      	pop	{r7}
 80041d8:	4770      	bx	lr
	...

080041dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80041e0:	4802      	ldr	r0, [pc, #8]	; (80041ec <TIM4_IRQHandler+0x10>)
 80041e2:	f001 fb3b 	bl	800585c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200028fc 	.word	0x200028fc

080041f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80041f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041f8:	f000 fd22 	bl	8004c40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041fc:	bf00      	nop
 80041fe:	bd80      	pop	{r7, pc}

08004200 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr

0800420c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800420c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800420e:	e003      	b.n	8004218 <LoopCopyDataInit>

08004210 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004212:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004214:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004216:	3104      	adds	r1, #4

08004218 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004218:	480a      	ldr	r0, [pc, #40]	; (8004244 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800421c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800421e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004220:	d3f6      	bcc.n	8004210 <CopyDataInit>
  ldr r2, =_sbss
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004224:	e002      	b.n	800422c <LoopFillZerobss>

08004226 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004226:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004228:	f842 3b04 	str.w	r3, [r2], #4

0800422c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800422e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004230:	d3f9      	bcc.n	8004226 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004232:	f7ff ffe5 	bl	8004200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004236:	f004 fe59 	bl	8008eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800423a:	f7fd fdd3 	bl	8001de4 <main>
  bx lr
 800423e:	4770      	bx	lr
  ldr r3, =_sidata
 8004240:	08009230 	.word	0x08009230
  ldr r0, =_sdata
 8004244:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004248:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800424c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8004250:	20002988 	.word	0x20002988

08004254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004254:	e7fe      	b.n	8004254 <ADC1_2_IRQHandler>
	...

08004258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800425c:	4b08      	ldr	r3, [pc, #32]	; (8004280 <HAL_Init+0x28>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a07      	ldr	r2, [pc, #28]	; (8004280 <HAL_Init+0x28>)
 8004262:	f043 0310 	orr.w	r3, r3, #16
 8004266:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004268:	2003      	movs	r0, #3
 800426a:	f000 faff 	bl	800486c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800426e:	2000      	movs	r0, #0
 8004270:	f7ff ff46 	bl	8004100 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004274:	f7ff fe18 	bl	8003ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40022000 	.word	0x40022000

08004284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_IncTick+0x1c>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <HAL_IncTick+0x20>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4413      	add	r3, r2
 8004294:	4a03      	ldr	r2, [pc, #12]	; (80042a4 <HAL_IncTick+0x20>)
 8004296:	6013      	str	r3, [r2, #0]
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	20000008 	.word	0x20000008
 80042a4:	20002944 	.word	0x20002944

080042a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return uwTick;
 80042ac:	4b02      	ldr	r3, [pc, #8]	; (80042b8 <HAL_GetTick+0x10>)
 80042ae:	681b      	ldr	r3, [r3, #0]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	20002944 	.word	0x20002944

080042bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042c4:	f7ff fff0 	bl	80042a8 <HAL_GetTick>
 80042c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d4:	d005      	beq.n	80042e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042d6:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <HAL_Delay+0x44>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4413      	add	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042e2:	bf00      	nop
 80042e4:	f7ff ffe0 	bl	80042a8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d8f7      	bhi.n	80042e4 <HAL_Delay+0x28>
  {
  }
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000008 	.word	0x20000008

08004304 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0be      	b.n	80044a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff fde8 	bl	8003f18 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f9ab 	bl	80046a4 <ADC_ConversionStop_Disable>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	f003 0310 	and.w	r3, r3, #16
 800435a:	2b00      	cmp	r3, #0
 800435c:	f040 8099 	bne.w	8004492 <HAL_ADC_Init+0x18e>
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 8095 	bne.w	8004492 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004370:	f023 0302 	bic.w	r3, r3, #2
 8004374:	f043 0202 	orr.w	r2, r3, #2
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004384:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7b1b      	ldrb	r3, [r3, #12]
 800438a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800438c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	4313      	orrs	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439c:	d003      	beq.n	80043a6 <HAL_ADC_Init+0xa2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d102      	bne.n	80043ac <HAL_ADC_Init+0xa8>
 80043a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043aa:	e000      	b.n	80043ae <HAL_ADC_Init+0xaa>
 80043ac:	2300      	movs	r3, #0
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7d1b      	ldrb	r3, [r3, #20]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d119      	bne.n	80043f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	7b1b      	ldrb	r3, [r3, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d109      	bne.n	80043d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	035a      	lsls	r2, r3, #13
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	e00b      	b.n	80043f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	430a      	orrs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	4b28      	ldr	r3, [pc, #160]	; (80044ac <HAL_ADC_Init+0x1a8>)
 800440c:	4013      	ands	r3, r2
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6812      	ldr	r2, [r2, #0]
 8004412:	68b9      	ldr	r1, [r7, #8]
 8004414:	430b      	orrs	r3, r1
 8004416:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004420:	d003      	beq.n	800442a <HAL_ADC_Init+0x126>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d104      	bne.n	8004434 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	3b01      	subs	r3, #1
 8004430:	051b      	lsls	r3, r3, #20
 8004432:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	430a      	orrs	r2, r1
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	4b18      	ldr	r3, [pc, #96]	; (80044b0 <HAL_ADC_Init+0x1ac>)
 8004450:	4013      	ands	r3, r2
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d10b      	bne.n	8004470 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	f043 0201 	orr.w	r2, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800446e:	e018      	b.n	80044a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	f023 0312 	bic.w	r3, r3, #18
 8004478:	f043 0210 	orr.w	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	f043 0201 	orr.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004490:	e007      	b.n	80044a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	f043 0210 	orr.w	r2, r3, #16
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	ffe1f7fd 	.word	0xffe1f7fd
 80044b0:	ff1f0efe 	.word	0xff1f0efe

080044b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x20>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e0dc      	b.n	800468e <HAL_ADC_ConfigChannel+0x1da>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d81c      	bhi.n	800451e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	3b05      	subs	r3, #5
 80044f6:	221f      	movs	r2, #31
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	43db      	mvns	r3, r3
 80044fe:	4019      	ands	r1, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	3b05      	subs	r3, #5
 8004510:	fa00 f203 	lsl.w	r2, r0, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	635a      	str	r2, [r3, #52]	; 0x34
 800451c:	e03c      	b.n	8004598 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b0c      	cmp	r3, #12
 8004524:	d81c      	bhi.n	8004560 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	3b23      	subs	r3, #35	; 0x23
 8004538:	221f      	movs	r2, #31
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	4019      	ands	r1, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	3b23      	subs	r3, #35	; 0x23
 8004552:	fa00 f203 	lsl.w	r2, r0, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
 800455e:	e01b      	b.n	8004598 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	3b41      	subs	r3, #65	; 0x41
 8004572:	221f      	movs	r2, #31
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	4019      	ands	r1, r3
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	3b41      	subs	r3, #65	; 0x41
 800458c:	fa00 f203 	lsl.w	r2, r0, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b09      	cmp	r3, #9
 800459e:	d91c      	bls.n	80045da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68d9      	ldr	r1, [r3, #12]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	3b1e      	subs	r3, #30
 80045b2:	2207      	movs	r2, #7
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	4019      	ands	r1, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	6898      	ldr	r0, [r3, #8]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	005b      	lsls	r3, r3, #1
 80045c8:	4413      	add	r3, r2
 80045ca:	3b1e      	subs	r3, #30
 80045cc:	fa00 f203 	lsl.w	r2, r0, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]
 80045d8:	e019      	b.n	800460e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6919      	ldr	r1, [r3, #16]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	4413      	add	r3, r2
 80045ea:	2207      	movs	r2, #7
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	4019      	ands	r1, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6898      	ldr	r0, [r3, #8]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	fa00 f203 	lsl.w	r2, r0, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b10      	cmp	r3, #16
 8004614:	d003      	beq.n	800461e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800461a:	2b11      	cmp	r3, #17
 800461c:	d132      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1d      	ldr	r2, [pc, #116]	; (8004698 <HAL_ADC_ConfigChannel+0x1e4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d125      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d126      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004644:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b10      	cmp	r3, #16
 800464c:	d11a      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_ADC_ConfigChannel+0x1e8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	0c9a      	lsrs	r2, r3, #18
 800465a:	4613      	mov	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004664:	e002      	b.n	800466c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	3b01      	subs	r3, #1
 800466a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f9      	bne.n	8004666 <HAL_ADC_ConfigChannel+0x1b2>
 8004672:	e007      	b.n	8004684 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800468c:	7bfb      	ldrb	r3, [r7, #15]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	bc80      	pop	{r7}
 8004696:	4770      	bx	lr
 8004698:	40012400 	.word	0x40012400
 800469c:	20000000 	.word	0x20000000
 80046a0:	431bde83 	.word	0x431bde83

080046a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d127      	bne.n	800470e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80046ce:	f7ff fdeb 	bl	80042a8 <HAL_GetTick>
 80046d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80046d4:	e014      	b.n	8004700 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80046d6:	f7ff fde7 	bl	80042a8 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d90d      	bls.n	8004700 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	f043 0210 	orr.w	r2, r3, #16
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d0e3      	beq.n	80046d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <__NVIC_SetPriorityGrouping+0x44>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004734:	4013      	ands	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800474a:	4a04      	ldr	r2, [pc, #16]	; (800475c <__NVIC_SetPriorityGrouping+0x44>)
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	60d3      	str	r3, [r2, #12]
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <__NVIC_GetPriorityGrouping+0x18>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	f003 0307 	and.w	r3, r3, #7
}
 800476e:	4618      	mov	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	e000ed00 	.word	0xe000ed00

0800477c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478a:	2b00      	cmp	r3, #0
 800478c:	db0b      	blt.n	80047a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800478e:	79fb      	ldrb	r3, [r7, #7]
 8004790:	f003 021f 	and.w	r2, r3, #31
 8004794:	4906      	ldr	r1, [pc, #24]	; (80047b0 <__NVIC_EnableIRQ+0x34>)
 8004796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2001      	movs	r0, #1
 800479e:	fa00 f202 	lsl.w	r2, r0, r2
 80047a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	e000e100 	.word	0xe000e100

080047b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	4603      	mov	r3, r0
 80047bc:	6039      	str	r1, [r7, #0]
 80047be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	db0a      	blt.n	80047de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	490c      	ldr	r1, [pc, #48]	; (8004800 <__NVIC_SetPriority+0x4c>)
 80047ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d2:	0112      	lsls	r2, r2, #4
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	440b      	add	r3, r1
 80047d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047dc:	e00a      	b.n	80047f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	4908      	ldr	r1, [pc, #32]	; (8004804 <__NVIC_SetPriority+0x50>)
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	3b04      	subs	r3, #4
 80047ec:	0112      	lsls	r2, r2, #4
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	440b      	add	r3, r1
 80047f2:	761a      	strb	r2, [r3, #24]
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	e000e100 	.word	0xe000e100
 8004804:	e000ed00 	.word	0xe000ed00

08004808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004808:	b480      	push	{r7}
 800480a:	b089      	sub	sp, #36	; 0x24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f1c3 0307 	rsb	r3, r3, #7
 8004822:	2b04      	cmp	r3, #4
 8004824:	bf28      	it	cs
 8004826:	2304      	movcs	r3, #4
 8004828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3304      	adds	r3, #4
 800482e:	2b06      	cmp	r3, #6
 8004830:	d902      	bls.n	8004838 <NVIC_EncodePriority+0x30>
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3b03      	subs	r3, #3
 8004836:	e000      	b.n	800483a <NVIC_EncodePriority+0x32>
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800483c:	f04f 32ff 	mov.w	r2, #4294967295
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43da      	mvns	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	401a      	ands	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004850:	f04f 31ff 	mov.w	r1, #4294967295
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	fa01 f303 	lsl.w	r3, r1, r3
 800485a:	43d9      	mvns	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004860:	4313      	orrs	r3, r2
         );
}
 8004862:	4618      	mov	r0, r3
 8004864:	3724      	adds	r7, #36	; 0x24
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff4f 	bl	8004718 <__NVIC_SetPriorityGrouping>
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004882:	b580      	push	{r7, lr}
 8004884:	b086      	sub	sp, #24
 8004886:	af00      	add	r7, sp, #0
 8004888:	4603      	mov	r3, r0
 800488a:	60b9      	str	r1, [r7, #8]
 800488c:	607a      	str	r2, [r7, #4]
 800488e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004894:	f7ff ff64 	bl	8004760 <__NVIC_GetPriorityGrouping>
 8004898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	6978      	ldr	r0, [r7, #20]
 80048a0:	f7ff ffb2 	bl	8004808 <NVIC_EncodePriority>
 80048a4:	4602      	mov	r2, r0
 80048a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff ff81 	bl	80047b4 <__NVIC_SetPriority>
}
 80048b2:	bf00      	nop
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b082      	sub	sp, #8
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4603      	mov	r3, r0
 80048c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff ff57 	bl	800477c <__NVIC_EnableIRQ>
}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048d8:	b480      	push	{r7}
 80048da:	b08b      	sub	sp, #44	; 0x2c
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80048e6:	2300      	movs	r3, #0
 80048e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048ea:	e169      	b.n	8004bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80048ec:	2201      	movs	r2, #1
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	429a      	cmp	r2, r3
 8004906:	f040 8158 	bne.w	8004bba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4a9a      	ldr	r2, [pc, #616]	; (8004b78 <HAL_GPIO_Init+0x2a0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d05e      	beq.n	80049d2 <HAL_GPIO_Init+0xfa>
 8004914:	4a98      	ldr	r2, [pc, #608]	; (8004b78 <HAL_GPIO_Init+0x2a0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d875      	bhi.n	8004a06 <HAL_GPIO_Init+0x12e>
 800491a:	4a98      	ldr	r2, [pc, #608]	; (8004b7c <HAL_GPIO_Init+0x2a4>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d058      	beq.n	80049d2 <HAL_GPIO_Init+0xfa>
 8004920:	4a96      	ldr	r2, [pc, #600]	; (8004b7c <HAL_GPIO_Init+0x2a4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d86f      	bhi.n	8004a06 <HAL_GPIO_Init+0x12e>
 8004926:	4a96      	ldr	r2, [pc, #600]	; (8004b80 <HAL_GPIO_Init+0x2a8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d052      	beq.n	80049d2 <HAL_GPIO_Init+0xfa>
 800492c:	4a94      	ldr	r2, [pc, #592]	; (8004b80 <HAL_GPIO_Init+0x2a8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d869      	bhi.n	8004a06 <HAL_GPIO_Init+0x12e>
 8004932:	4a94      	ldr	r2, [pc, #592]	; (8004b84 <HAL_GPIO_Init+0x2ac>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d04c      	beq.n	80049d2 <HAL_GPIO_Init+0xfa>
 8004938:	4a92      	ldr	r2, [pc, #584]	; (8004b84 <HAL_GPIO_Init+0x2ac>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d863      	bhi.n	8004a06 <HAL_GPIO_Init+0x12e>
 800493e:	4a92      	ldr	r2, [pc, #584]	; (8004b88 <HAL_GPIO_Init+0x2b0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d046      	beq.n	80049d2 <HAL_GPIO_Init+0xfa>
 8004944:	4a90      	ldr	r2, [pc, #576]	; (8004b88 <HAL_GPIO_Init+0x2b0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d85d      	bhi.n	8004a06 <HAL_GPIO_Init+0x12e>
 800494a:	2b12      	cmp	r3, #18
 800494c:	d82a      	bhi.n	80049a4 <HAL_GPIO_Init+0xcc>
 800494e:	2b12      	cmp	r3, #18
 8004950:	d859      	bhi.n	8004a06 <HAL_GPIO_Init+0x12e>
 8004952:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <HAL_GPIO_Init+0x80>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	080049d3 	.word	0x080049d3
 800495c:	080049ad 	.word	0x080049ad
 8004960:	080049bf 	.word	0x080049bf
 8004964:	08004a01 	.word	0x08004a01
 8004968:	08004a07 	.word	0x08004a07
 800496c:	08004a07 	.word	0x08004a07
 8004970:	08004a07 	.word	0x08004a07
 8004974:	08004a07 	.word	0x08004a07
 8004978:	08004a07 	.word	0x08004a07
 800497c:	08004a07 	.word	0x08004a07
 8004980:	08004a07 	.word	0x08004a07
 8004984:	08004a07 	.word	0x08004a07
 8004988:	08004a07 	.word	0x08004a07
 800498c:	08004a07 	.word	0x08004a07
 8004990:	08004a07 	.word	0x08004a07
 8004994:	08004a07 	.word	0x08004a07
 8004998:	08004a07 	.word	0x08004a07
 800499c:	080049b5 	.word	0x080049b5
 80049a0:	080049c9 	.word	0x080049c9
 80049a4:	4a79      	ldr	r2, [pc, #484]	; (8004b8c <HAL_GPIO_Init+0x2b4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80049aa:	e02c      	b.n	8004a06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	623b      	str	r3, [r7, #32]
          break;
 80049b2:	e029      	b.n	8004a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	3304      	adds	r3, #4
 80049ba:	623b      	str	r3, [r7, #32]
          break;
 80049bc:	e024      	b.n	8004a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	3308      	adds	r3, #8
 80049c4:	623b      	str	r3, [r7, #32]
          break;
 80049c6:	e01f      	b.n	8004a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	330c      	adds	r3, #12
 80049ce:	623b      	str	r3, [r7, #32]
          break;
 80049d0:	e01a      	b.n	8004a08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80049da:	2304      	movs	r3, #4
 80049dc:	623b      	str	r3, [r7, #32]
          break;
 80049de:	e013      	b.n	8004a08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d105      	bne.n	80049f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049e8:	2308      	movs	r3, #8
 80049ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	611a      	str	r2, [r3, #16]
          break;
 80049f2:	e009      	b.n	8004a08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80049f4:	2308      	movs	r3, #8
 80049f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69fa      	ldr	r2, [r7, #28]
 80049fc:	615a      	str	r2, [r3, #20]
          break;
 80049fe:	e003      	b.n	8004a08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004a00:	2300      	movs	r3, #0
 8004a02:	623b      	str	r3, [r7, #32]
          break;
 8004a04:	e000      	b.n	8004a08 <HAL_GPIO_Init+0x130>
          break;
 8004a06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2bff      	cmp	r3, #255	; 0xff
 8004a0c:	d801      	bhi.n	8004a12 <HAL_GPIO_Init+0x13a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	e001      	b.n	8004a16 <HAL_GPIO_Init+0x13e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2bff      	cmp	r3, #255	; 0xff
 8004a1c:	d802      	bhi.n	8004a24 <HAL_GPIO_Init+0x14c>
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	e002      	b.n	8004a2a <HAL_GPIO_Init+0x152>
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	3b08      	subs	r3, #8
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	210f      	movs	r1, #15
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	fa01 f303 	lsl.w	r3, r1, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	6a39      	ldr	r1, [r7, #32]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	431a      	orrs	r2, r3
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 80b1 	beq.w	8004bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a58:	4b4d      	ldr	r3, [pc, #308]	; (8004b90 <HAL_GPIO_Init+0x2b8>)
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	4a4c      	ldr	r2, [pc, #304]	; (8004b90 <HAL_GPIO_Init+0x2b8>)
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	6193      	str	r3, [r2, #24]
 8004a64:	4b4a      	ldr	r3, [pc, #296]	; (8004b90 <HAL_GPIO_Init+0x2b8>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a70:	4a48      	ldr	r2, [pc, #288]	; (8004b94 <HAL_GPIO_Init+0x2bc>)
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	089b      	lsrs	r3, r3, #2
 8004a76:	3302      	adds	r3, #2
 8004a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	220f      	movs	r2, #15
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <HAL_GPIO_Init+0x2c0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <HAL_GPIO_Init+0x1ec>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a3f      	ldr	r2, [pc, #252]	; (8004b9c <HAL_GPIO_Init+0x2c4>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_GPIO_Init+0x1e8>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3e      	ldr	r2, [pc, #248]	; (8004ba0 <HAL_GPIO_Init+0x2c8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <HAL_GPIO_Init+0x1e4>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3d      	ldr	r2, [pc, #244]	; (8004ba4 <HAL_GPIO_Init+0x2cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_GPIO_Init+0x1e0>
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e006      	b.n	8004ac6 <HAL_GPIO_Init+0x1ee>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	e004      	b.n	8004ac6 <HAL_GPIO_Init+0x1ee>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e002      	b.n	8004ac6 <HAL_GPIO_Init+0x1ee>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <HAL_GPIO_Init+0x1ee>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac8:	f002 0203 	and.w	r2, r2, #3
 8004acc:	0092      	lsls	r2, r2, #2
 8004ace:	4093      	lsls	r3, r2
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004ad6:	492f      	ldr	r1, [pc, #188]	; (8004b94 <HAL_GPIO_Init+0x2bc>)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	089b      	lsrs	r3, r3, #2
 8004adc:	3302      	adds	r3, #2
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d006      	beq.n	8004afe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004af0:	4b2d      	ldr	r3, [pc, #180]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	492c      	ldr	r1, [pc, #176]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]
 8004afc:	e006      	b.n	8004b0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004afe:	4b2a      	ldr	r3, [pc, #168]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	4928      	ldr	r1, [pc, #160]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d006      	beq.n	8004b26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004b18:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4922      	ldr	r1, [pc, #136]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
 8004b24:	e006      	b.n	8004b34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	43db      	mvns	r3, r3
 8004b2e:	491e      	ldr	r1, [pc, #120]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d006      	beq.n	8004b4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004b40:	4b19      	ldr	r3, [pc, #100]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	4918      	ldr	r1, [pc, #96]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]
 8004b4c:	e006      	b.n	8004b5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004b4e:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	43db      	mvns	r3, r3
 8004b56:	4914      	ldr	r1, [pc, #80]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d021      	beq.n	8004bac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004b68:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	490e      	ldr	r1, [pc, #56]	; (8004ba8 <HAL_GPIO_Init+0x2d0>)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60cb      	str	r3, [r1, #12]
 8004b74:	e021      	b.n	8004bba <HAL_GPIO_Init+0x2e2>
 8004b76:	bf00      	nop
 8004b78:	10320000 	.word	0x10320000
 8004b7c:	10310000 	.word	0x10310000
 8004b80:	10220000 	.word	0x10220000
 8004b84:	10210000 	.word	0x10210000
 8004b88:	10120000 	.word	0x10120000
 8004b8c:	10110000 	.word	0x10110000
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40010800 	.word	0x40010800
 8004b9c:	40010c00 	.word	0x40010c00
 8004ba0:	40011000 	.word	0x40011000
 8004ba4:	40011400 	.word	0x40011400
 8004ba8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_GPIO_Init+0x304>)
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	4909      	ldr	r1, [pc, #36]	; (8004bdc <HAL_GPIO_Init+0x304>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f47f ae8e 	bne.w	80048ec <HAL_GPIO_Init+0x14>
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	372c      	adds	r7, #44	; 0x2c
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40010400 	.word	0x40010400

08004be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	460b      	mov	r3, r1
 8004bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
 8004bfc:	e001      	b.n	8004c02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bc80      	pop	{r7}
 8004c0c:	4770      	bx	lr

08004c0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	807b      	strh	r3, [r7, #2]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c1e:	787b      	ldrb	r3, [r7, #1]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c24:	887a      	ldrh	r2, [r7, #2]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004c2a:	e003      	b.n	8004c34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	041a      	lsls	r2, r3, #16
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	611a      	str	r2, [r3, #16]
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr
	...

08004c40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	4603      	mov	r3, r0
 8004c48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004c4a:	4b08      	ldr	r3, [pc, #32]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d006      	beq.n	8004c64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c56:	4a05      	ldr	r2, [pc, #20]	; (8004c6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f806 	bl	8004c70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c64:	bf00      	nop
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40010400 	.word	0x40010400

08004c70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e26c      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8087 	beq.w	8004db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ca4:	4b92      	ldr	r3, [pc, #584]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d00c      	beq.n	8004cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cb0:	4b8f      	ldr	r3, [pc, #572]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 030c 	and.w	r3, r3, #12
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d112      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x5e>
 8004cbc:	4b8c      	ldr	r3, [pc, #560]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc8:	d10b      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cca:	4b89      	ldr	r3, [pc, #548]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d06c      	beq.n	8004db0 <HAL_RCC_OscConfig+0x12c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d168      	bne.n	8004db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e246      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x76>
 8004cec:	4b80      	ldr	r3, [pc, #512]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a7f      	ldr	r2, [pc, #508]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	e02e      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x98>
 8004d02:	4b7b      	ldr	r3, [pc, #492]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a7a      	ldr	r2, [pc, #488]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b78      	ldr	r3, [pc, #480]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a77      	ldr	r2, [pc, #476]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e01d      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0xbc>
 8004d26:	4b72      	ldr	r3, [pc, #456]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a71      	ldr	r2, [pc, #452]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b6f      	ldr	r3, [pc, #444]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6e      	ldr	r2, [pc, #440]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0xd4>
 8004d40:	4b6b      	ldr	r3, [pc, #428]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a6a      	ldr	r2, [pc, #424]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b68      	ldr	r3, [pc, #416]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a67      	ldr	r2, [pc, #412]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7ff faa2 	bl	80042a8 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d68:	f7ff fa9e 	bl	80042a8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e1fa      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b5d      	ldr	r3, [pc, #372]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0xe4>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7ff fa8e 	bl	80042a8 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7ff fa8a 	bl	80042a8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	; 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1e6      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x10c>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d063      	beq.n	8004e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004dca:	4b49      	ldr	r3, [pc, #292]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d11c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x18c>
 8004dd6:	4b46      	ldr	r3, [pc, #280]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	4b43      	ldr	r3, [pc, #268]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_RCC_OscConfig+0x176>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e1ba      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b3d      	ldr	r3, [pc, #244]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4939      	ldr	r1, [pc, #228]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0e:	e03a      	b.n	8004e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d020      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e18:	4b36      	ldr	r3, [pc, #216]	; (8004ef4 <HAL_RCC_OscConfig+0x270>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7ff fa43 	bl	80042a8 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e26:	f7ff fa3f 	bl	80042a8 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e19b      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	4b2d      	ldr	r3, [pc, #180]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4927      	ldr	r1, [pc, #156]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	e015      	b.n	8004e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b26      	ldr	r3, [pc, #152]	; (8004ef4 <HAL_RCC_OscConfig+0x270>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7ff fa22 	bl	80042a8 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7ff fa1e 	bl	80042a8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e17a      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d03a      	beq.n	8004f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d019      	beq.n	8004ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9a:	4b17      	ldr	r3, [pc, #92]	; (8004ef8 <HAL_RCC_OscConfig+0x274>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea0:	f7ff fa02 	bl	80042a8 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7ff f9fe 	bl	80042a8 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e15a      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ec6:	2001      	movs	r0, #1
 8004ec8:	f000 fb08 	bl	80054dc <RCC_Delay>
 8004ecc:	e01c      	b.n	8004f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed4:	f7ff f9e8 	bl	80042a8 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eda:	e00f      	b.n	8004efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004edc:	f7ff f9e4 	bl	80042a8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d908      	bls.n	8004efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e140      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
 8004eee:	bf00      	nop
 8004ef0:	40021000 	.word	0x40021000
 8004ef4:	42420000 	.word	0x42420000
 8004ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004efc:	4b9e      	ldr	r3, [pc, #632]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e9      	bne.n	8004edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80a6 	beq.w	8005062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f1a:	4b97      	ldr	r3, [pc, #604]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10d      	bne.n	8004f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f26:	4b94      	ldr	r3, [pc, #592]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	4a93      	ldr	r2, [pc, #588]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f30:	61d3      	str	r3, [r2, #28]
 8004f32:	4b91      	ldr	r3, [pc, #580]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f42:	4b8e      	ldr	r3, [pc, #568]	; (800517c <HAL_RCC_OscConfig+0x4f8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d118      	bne.n	8004f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4e:	4b8b      	ldr	r3, [pc, #556]	; (800517c <HAL_RCC_OscConfig+0x4f8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a8a      	ldr	r2, [pc, #552]	; (800517c <HAL_RCC_OscConfig+0x4f8>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f5a:	f7ff f9a5 	bl	80042a8 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7ff f9a1 	bl	80042a8 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b64      	cmp	r3, #100	; 0x64
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e0fd      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	4b81      	ldr	r3, [pc, #516]	; (800517c <HAL_RCC_OscConfig+0x4f8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x312>
 8004f88:	4b7b      	ldr	r3, [pc, #492]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4a7a      	ldr	r2, [pc, #488]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6213      	str	r3, [r2, #32]
 8004f94:	e02d      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x334>
 8004f9e:	4b76      	ldr	r3, [pc, #472]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4a75      	ldr	r2, [pc, #468]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6213      	str	r3, [r2, #32]
 8004faa:	4b73      	ldr	r3, [pc, #460]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	4a72      	ldr	r2, [pc, #456]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	6213      	str	r3, [r2, #32]
 8004fb6:	e01c      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	2b05      	cmp	r3, #5
 8004fbe:	d10c      	bne.n	8004fda <HAL_RCC_OscConfig+0x356>
 8004fc0:	4b6d      	ldr	r3, [pc, #436]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	4a6c      	ldr	r2, [pc, #432]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6213      	str	r3, [r2, #32]
 8004fcc:	4b6a      	ldr	r3, [pc, #424]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	4a69      	ldr	r2, [pc, #420]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fd2:	f043 0301 	orr.w	r3, r3, #1
 8004fd6:	6213      	str	r3, [r2, #32]
 8004fd8:	e00b      	b.n	8004ff2 <HAL_RCC_OscConfig+0x36e>
 8004fda:	4b67      	ldr	r3, [pc, #412]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	4a66      	ldr	r2, [pc, #408]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	6213      	str	r3, [r2, #32]
 8004fe6:	4b64      	ldr	r3, [pc, #400]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	4a63      	ldr	r2, [pc, #396]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d015      	beq.n	8005026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ffa:	f7ff f955 	bl	80042a8 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7ff f951 	bl	80042a8 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e0ab      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005018:	4b57      	ldr	r3, [pc, #348]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0ee      	beq.n	8005002 <HAL_RCC_OscConfig+0x37e>
 8005024:	e014      	b.n	8005050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005026:	f7ff f93f 	bl	80042a8 <HAL_GetTick>
 800502a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502c:	e00a      	b.n	8005044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7ff f93b 	bl	80042a8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	f241 3288 	movw	r2, #5000	; 0x1388
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e095      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005044:	4b4c      	ldr	r3, [pc, #304]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f003 0302 	and.w	r3, r3, #2
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1ee      	bne.n	800502e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005050:	7dfb      	ldrb	r3, [r7, #23]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d105      	bne.n	8005062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005056:	4b48      	ldr	r3, [pc, #288]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	4a47      	ldr	r2, [pc, #284]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 800505c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 8081 	beq.w	800516e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800506c:	4b42      	ldr	r3, [pc, #264]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f003 030c 	and.w	r3, r3, #12
 8005074:	2b08      	cmp	r3, #8
 8005076:	d061      	beq.n	800513c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d146      	bne.n	800510e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005080:	4b3f      	ldr	r3, [pc, #252]	; (8005180 <HAL_RCC_OscConfig+0x4fc>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005086:	f7ff f90f 	bl	80042a8 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508e:	f7ff f90b 	bl	80042a8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e067      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a0:	4b35      	ldr	r3, [pc, #212]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f0      	bne.n	800508e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d108      	bne.n	80050c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050b6:	4b30      	ldr	r3, [pc, #192]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	492d      	ldr	r1, [pc, #180]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c8:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a19      	ldr	r1, [r3, #32]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	430b      	orrs	r3, r1
 80050da:	4927      	ldr	r1, [pc, #156]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050e0:	4b27      	ldr	r3, [pc, #156]	; (8005180 <HAL_RCC_OscConfig+0x4fc>)
 80050e2:	2201      	movs	r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7ff f8df 	bl	80042a8 <HAL_GetTick>
 80050ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ee:	f7ff f8db 	bl	80042a8 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e037      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005100:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <HAL_RCC_OscConfig+0x46a>
 800510c:	e02f      	b.n	800516e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510e:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <HAL_RCC_OscConfig+0x4fc>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005114:	f7ff f8c8 	bl	80042a8 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800511a:	e008      	b.n	800512e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511c:	f7ff f8c4 	bl	80042a8 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d901      	bls.n	800512e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e020      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1f0      	bne.n	800511c <HAL_RCC_OscConfig+0x498>
 800513a:	e018      	b.n	800516e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e013      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_RCC_OscConfig+0x4f4>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	429a      	cmp	r2, r3
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005166:	429a      	cmp	r2, r3
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40021000 	.word	0x40021000
 800517c:	40007000 	.word	0x40007000
 8005180:	42420060 	.word	0x42420060

08005184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0d0      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005198:	4b6a      	ldr	r3, [pc, #424]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d910      	bls.n	80051c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b67      	ldr	r3, [pc, #412]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 0207 	bic.w	r2, r3, #7
 80051ae:	4965      	ldr	r1, [pc, #404]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b63      	ldr	r3, [pc, #396]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d001      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0b8      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d020      	beq.n	8005216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d005      	beq.n	80051ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e0:	4b59      	ldr	r3, [pc, #356]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a58      	ldr	r2, [pc, #352]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d005      	beq.n	8005204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051f8:	4b53      	ldr	r3, [pc, #332]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a52      	ldr	r2, [pc, #328]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80051fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005204:	4b50      	ldr	r3, [pc, #320]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	494d      	ldr	r1, [pc, #308]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005212:	4313      	orrs	r3, r2
 8005214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d040      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d107      	bne.n	800523a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800522a:	4b47      	ldr	r3, [pc, #284]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d115      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e07f      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d107      	bne.n	8005252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005242:	4b41      	ldr	r3, [pc, #260]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e073      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005252:	4b3d      	ldr	r3, [pc, #244]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e06b      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005262:	4b39      	ldr	r3, [pc, #228]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f023 0203 	bic.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4936      	ldr	r1, [pc, #216]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005274:	f7ff f818 	bl	80042a8 <HAL_GetTick>
 8005278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	e00a      	b.n	8005292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800527c:	f7ff f814 	bl	80042a8 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	f241 3288 	movw	r2, #5000	; 0x1388
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e053      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005292:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 020c 	and.w	r2, r3, #12
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d1eb      	bne.n	800527c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052a4:	4b27      	ldr	r3, [pc, #156]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d210      	bcs.n	80052d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b24      	ldr	r3, [pc, #144]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 0207 	bic.w	r2, r3, #7
 80052ba:	4922      	ldr	r1, [pc, #136]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c2:	4b20      	ldr	r3, [pc, #128]	; (8005344 <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d001      	beq.n	80052d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e032      	b.n	800533a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0304 	and.w	r3, r3, #4
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4916      	ldr	r1, [pc, #88]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d009      	beq.n	8005312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052fe:	4b12      	ldr	r3, [pc, #72]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	490e      	ldr	r1, [pc, #56]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005312:	f000 f821 	bl	8005358 <HAL_RCC_GetSysClockFreq>
 8005316:	4602      	mov	r2, r0
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	490a      	ldr	r1, [pc, #40]	; (800534c <HAL_RCC_ClockConfig+0x1c8>)
 8005324:	5ccb      	ldrb	r3, [r1, r3]
 8005326:	fa22 f303 	lsr.w	r3, r2, r3
 800532a:	4a09      	ldr	r2, [pc, #36]	; (8005350 <HAL_RCC_ClockConfig+0x1cc>)
 800532c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800532e:	4b09      	ldr	r3, [pc, #36]	; (8005354 <HAL_RCC_ClockConfig+0x1d0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fee4 	bl	8004100 <HAL_InitTick>

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	40022000 	.word	0x40022000
 8005348:	40021000 	.word	0x40021000
 800534c:	08009210 	.word	0x08009210
 8005350:	20000000 	.word	0x20000000
 8005354:	20000004 	.word	0x20000004

08005358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005358:	b490      	push	{r4, r7}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800535e:	4b2a      	ldr	r3, [pc, #168]	; (8005408 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005360:	1d3c      	adds	r4, r7, #4
 8005362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005368:	f240 2301 	movw	r3, #513	; 0x201
 800536c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	2300      	movs	r3, #0
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
 800537a:	2300      	movs	r3, #0
 800537c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005382:	4b22      	ldr	r3, [pc, #136]	; (800540c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	f003 030c 	and.w	r3, r3, #12
 800538e:	2b04      	cmp	r3, #4
 8005390:	d002      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x40>
 8005392:	2b08      	cmp	r3, #8
 8005394:	d003      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x46>
 8005396:	e02d      	b.n	80053f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005398:	4b1d      	ldr	r3, [pc, #116]	; (8005410 <HAL_RCC_GetSysClockFreq+0xb8>)
 800539a:	623b      	str	r3, [r7, #32]
      break;
 800539c:	e02d      	b.n	80053fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	0c9b      	lsrs	r3, r3, #18
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053aa:	4413      	add	r3, r2
 80053ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80053b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d013      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053bc:	4b13      	ldr	r3, [pc, #76]	; (800540c <HAL_RCC_GetSysClockFreq+0xb4>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	0c5b      	lsrs	r3, r3, #17
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80053ca:	4413      	add	r3, r2
 80053cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053d6:	fb02 f203 	mul.w	r2, r2, r3
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	e004      	b.n	80053ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	4a0b      	ldr	r2, [pc, #44]	; (8005414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	623b      	str	r3, [r7, #32]
      break;
 80053f2:	e002      	b.n	80053fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80053f6:	623b      	str	r3, [r7, #32]
      break;
 80053f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053fa:	6a3b      	ldr	r3, [r7, #32]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3728      	adds	r7, #40	; 0x28
 8005400:	46bd      	mov	sp, r7
 8005402:	bc90      	pop	{r4, r7}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	0800905c 	.word	0x0800905c
 800540c:	40021000 	.word	0x40021000
 8005410:	007a1200 	.word	0x007a1200
 8005414:	003d0900 	.word	0x003d0900

08005418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800541c:	4b02      	ldr	r3, [pc, #8]	; (8005428 <HAL_RCC_GetHCLKFreq+0x10>)
 800541e:	681b      	ldr	r3, [r3, #0]
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr
 8005428:	20000000 	.word	0x20000000

0800542c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005430:	f7ff fff2 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005434:	4602      	mov	r2, r0
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	4903      	ldr	r1, [pc, #12]	; (8005450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005442:	5ccb      	ldrb	r3, [r1, r3]
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40021000 	.word	0x40021000
 8005450:	08009220 	.word	0x08009220

08005454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005458:	f7ff ffde 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 800545c:	4602      	mov	r2, r0
 800545e:	4b05      	ldr	r3, [pc, #20]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	0adb      	lsrs	r3, r3, #11
 8005464:	f003 0307 	and.w	r3, r3, #7
 8005468:	4903      	ldr	r1, [pc, #12]	; (8005478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800546a:	5ccb      	ldrb	r3, [r1, r3]
 800546c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005470:	4618      	mov	r0, r3
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021000 	.word	0x40021000
 8005478:	08009220 	.word	0x08009220

0800547c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	220f      	movs	r2, #15
 800548a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800548c:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <HAL_RCC_GetClockConfig+0x58>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 0203 	and.w	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <HAL_RCC_GetClockConfig+0x58>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <HAL_RCC_GetClockConfig+0x58>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80054b0:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <HAL_RCC_GetClockConfig+0x58>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	08db      	lsrs	r3, r3, #3
 80054b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_RCC_GetClockConfig+0x5c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0207 	and.w	r2, r3, #7
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr
 80054d4:	40021000 	.word	0x40021000
 80054d8:	40022000 	.word	0x40022000

080054dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <RCC_Delay+0x34>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <RCC_Delay+0x38>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	0a5b      	lsrs	r3, r3, #9
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054f8:	bf00      	nop
  }
  while (Delay --);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1e5a      	subs	r2, r3, #1
 80054fe:	60fa      	str	r2, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f9      	bne.n	80054f8 <RCC_Delay+0x1c>
}
 8005504:	bf00      	nop
 8005506:	bf00      	nop
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bc80      	pop	{r7}
 800550e:	4770      	bx	lr
 8005510:	20000000 	.word	0x20000000
 8005514:	10624dd3 	.word	0x10624dd3

08005518 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d07d      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005534:	2300      	movs	r3, #0
 8005536:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005538:	4b4f      	ldr	r3, [pc, #316]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10d      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005544:	4b4c      	ldr	r3, [pc, #304]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	4a4b      	ldr	r2, [pc, #300]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554e:	61d3      	str	r3, [r2, #28]
 8005550:	4b49      	ldr	r3, [pc, #292]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555c:	2301      	movs	r3, #1
 800555e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005560:	4b46      	ldr	r3, [pc, #280]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d118      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800556c:	4b43      	ldr	r3, [pc, #268]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a42      	ldr	r2, [pc, #264]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005576:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005578:	f7fe fe96 	bl	80042a8 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557e:	e008      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005580:	f7fe fe92 	bl	80042a8 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	; 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e06d      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005592:	4b3a      	ldr	r3, [pc, #232]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800559e:	4b36      	ldr	r3, [pc, #216]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d02e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d027      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055bc:	4b2e      	ldr	r3, [pc, #184]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055c6:	4b2e      	ldr	r3, [pc, #184]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055cc:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055d2:	4a29      	ldr	r2, [pc, #164]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d014      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e2:	f7fe fe61 	bl	80042a8 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e8:	e00a      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fe fe5d 	bl	80042a8 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e036      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005600:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0ee      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560c:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	4917      	ldr	r1, [pc, #92]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561a:	4313      	orrs	r3, r2
 800561c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d105      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005624:	4b14      	ldr	r3, [pc, #80]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	4a13      	ldr	r2, [pc, #76]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800562e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800563c:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	490b      	ldr	r1, [pc, #44]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564a:	4313      	orrs	r3, r2
 800564c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	4904      	ldr	r1, [pc, #16]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005668:	4313      	orrs	r3, r2
 800566a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000
 800567c:	40007000 	.word	0x40007000
 8005680:	42420440 	.word	0x42420440

08005684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e041      	b.n	800571a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fe fc70 	bl	8003f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f000 faba 	bl	8005c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e032      	b.n	80057a2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a18      	ldr	r2, [pc, #96]	; (80057ac <HAL_TIM_Base_Start+0x88>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00e      	beq.n	800576c <HAL_TIM_Base_Start+0x48>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d009      	beq.n	800576c <HAL_TIM_Base_Start+0x48>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <HAL_TIM_Base_Start+0x8c>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_TIM_Base_Start+0x48>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <HAL_TIM_Base_Start+0x90>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d111      	bne.n	8005790 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0307 	and.w	r3, r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b06      	cmp	r3, #6
 800577c:	d010      	beq.n	80057a0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0201 	orr.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578e:	e007      	b.n	80057a0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800

080057b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d001      	beq.n	80057d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e03a      	b.n	8005846 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a18      	ldr	r2, [pc, #96]	; (8005850 <HAL_TIM_Base_Start_IT+0x98>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x58>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fa:	d009      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x58>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a14      	ldr	r2, [pc, #80]	; (8005854 <HAL_TIM_Base_Start_IT+0x9c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x58>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <HAL_TIM_Base_Start_IT+0xa0>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d111      	bne.n	8005834 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b06      	cmp	r3, #6
 8005820:	d010      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f042 0201 	orr.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005832:	e007      	b.n	8005844 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800

0800585c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0202 	mvn.w	r2, #2
 8005888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f9b1 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f9a4 	bl	8005bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f9b3 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d122      	bne.n	800590c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d11b      	bne.n	800590c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0204 	mvn.w	r2, #4
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f987 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f97a 	bl	8005bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f989 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b08      	cmp	r3, #8
 8005918:	d122      	bne.n	8005960 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b08      	cmp	r3, #8
 8005926:	d11b      	bne.n	8005960 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0208 	mvn.w	r2, #8
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f95d 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f950 	bl	8005bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f95f 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b10      	cmp	r3, #16
 800596c:	d122      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b10      	cmp	r3, #16
 800597a:	d11b      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0210 	mvn.w	r2, #16
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2208      	movs	r2, #8
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f933 	bl	8005c06 <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f926 	bl	8005bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f935 	bl	8005c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0201 	mvn.w	r2, #1
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fd febc 	bl	8003758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f8:	2b80      	cmp	r3, #128	; 0x80
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fa77 	bl	8005efa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d107      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8f9 	bl	8005c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d10e      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d107      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0220 	mvn.w	r2, #32
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa42 	bl	8005ee8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIM_ConfigClockSource+0x18>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e0b3      	b.n	8005bec <HAL_TIM_ConfigClockSource+0x180>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005abc:	d03e      	beq.n	8005b3c <HAL_TIM_ConfigClockSource+0xd0>
 8005abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac2:	f200 8087 	bhi.w	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	f000 8085 	beq.w	8005bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad2:	d87f      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
 8005ad4:	2b70      	cmp	r3, #112	; 0x70
 8005ad6:	d01a      	beq.n	8005b0e <HAL_TIM_ConfigClockSource+0xa2>
 8005ad8:	2b70      	cmp	r3, #112	; 0x70
 8005ada:	d87b      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
 8005adc:	2b60      	cmp	r3, #96	; 0x60
 8005ade:	d050      	beq.n	8005b82 <HAL_TIM_ConfigClockSource+0x116>
 8005ae0:	2b60      	cmp	r3, #96	; 0x60
 8005ae2:	d877      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
 8005ae4:	2b50      	cmp	r3, #80	; 0x50
 8005ae6:	d03c      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xf6>
 8005ae8:	2b50      	cmp	r3, #80	; 0x50
 8005aea:	d873      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	d058      	beq.n	8005ba2 <HAL_TIM_ConfigClockSource+0x136>
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	d86f      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
 8005af4:	2b30      	cmp	r3, #48	; 0x30
 8005af6:	d064      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x156>
 8005af8:	2b30      	cmp	r3, #48	; 0x30
 8005afa:	d86b      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d060      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x156>
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d867      	bhi.n	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d05c      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x156>
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d05a      	beq.n	8005bc2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b0c:	e062      	b.n	8005bd4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	6899      	ldr	r1, [r3, #8]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f000 f966 	bl	8005dee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	609a      	str	r2, [r3, #8]
      break;
 8005b3a:	e04e      	b.n	8005bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	6899      	ldr	r1, [r3, #8]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f000 f94f 	bl	8005dee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b5e:	609a      	str	r2, [r3, #8]
      break;
 8005b60:	e03b      	b.n	8005bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6859      	ldr	r1, [r3, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f000 f8c6 	bl	8005d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2150      	movs	r1, #80	; 0x50
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f91d 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005b80:	e02b      	b.n	8005bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f000 f8e4 	bl	8005d5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2160      	movs	r1, #96	; 0x60
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f90d 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005ba0:	e01b      	b.n	8005bda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	6859      	ldr	r1, [r3, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f000 f8a6 	bl	8005d00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2140      	movs	r1, #64	; 0x40
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 f8fd 	bl	8005dba <TIM_ITRx_SetConfig>
      break;
 8005bc0:	e00b      	b.n	8005bda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f000 f8f4 	bl	8005dba <TIM_ITRx_SetConfig>
        break;
 8005bd2:	e002      	b.n	8005bda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bd4:	bf00      	nop
 8005bd6:	e000      	b.n	8005bda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc80      	pop	{r7}
 8005c3a:	4770      	bx	lr

08005c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <TIM_Base_SetConfig+0xb8>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00b      	beq.n	8005c6c <TIM_Base_SetConfig+0x30>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5a:	d007      	beq.n	8005c6c <TIM_Base_SetConfig+0x30>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a26      	ldr	r2, [pc, #152]	; (8005cf8 <TIM_Base_SetConfig+0xbc>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d003      	beq.n	8005c6c <TIM_Base_SetConfig+0x30>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a25      	ldr	r2, [pc, #148]	; (8005cfc <TIM_Base_SetConfig+0xc0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d108      	bne.n	8005c7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1c      	ldr	r2, [pc, #112]	; (8005cf4 <TIM_Base_SetConfig+0xb8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <TIM_Base_SetConfig+0x62>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c8c:	d007      	beq.n	8005c9e <TIM_Base_SetConfig+0x62>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a19      	ldr	r2, [pc, #100]	; (8005cf8 <TIM_Base_SetConfig+0xbc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_Base_SetConfig+0x62>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <TIM_Base_SetConfig+0xc0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d108      	bne.n	8005cb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a07      	ldr	r2, [pc, #28]	; (8005cf4 <TIM_Base_SetConfig+0xb8>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d103      	bne.n	8005ce4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800

08005d00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0201 	bic.w	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	011b      	lsls	r3, r3, #4
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f023 030a 	bic.w	r3, r3, #10
 8005d3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	f023 0210 	bic.w	r2, r3, #16
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	031b      	lsls	r3, r3, #12
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	011b      	lsls	r3, r3, #4
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	621a      	str	r2, [r3, #32]
}
 8005db0:	bf00      	nop
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr

08005dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b085      	sub	sp, #20
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f043 0307 	orr.w	r3, r3, #7
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	609a      	str	r2, [r3, #8]
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr

08005dee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	021a      	lsls	r2, r3, #8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	431a      	orrs	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	609a      	str	r2, [r3, #8]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e046      	b.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a16      	ldr	r2, [pc, #88]	; (8005edc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00e      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a10      	ldr	r2, [pc, #64]	; (8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	40012c00 	.word	0x40012c00
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800

08005ee8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bc80      	pop	{r7}
 8005ef8:	4770      	bx	lr

08005efa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr

08005f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e03f      	b.n	8005f9e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d106      	bne.n	8005f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fe f85c 	bl	8003ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2224      	movs	r2, #36	; 0x24
 8005f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f9a3 	bl	800629c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	691a      	ldr	r2, [r3, #16]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695a      	ldr	r2, [r3, #20]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b08a      	sub	sp, #40	; 0x28
 8005faa:	af02      	add	r7, sp, #8
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	603b      	str	r3, [r7, #0]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d17c      	bne.n	80060c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d002      	beq.n	8005fd2 <HAL_UART_Transmit+0x2c>
 8005fcc:	88fb      	ldrh	r3, [r7, #6]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e075      	b.n	80060c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d101      	bne.n	8005fe4 <HAL_UART_Transmit+0x3e>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e06e      	b.n	80060c2 <HAL_UART_Transmit+0x11c>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2221      	movs	r2, #33	; 0x21
 8005ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005ffa:	f7fe f955 	bl	80042a8 <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006014:	d108      	bne.n	8006028 <HAL_UART_Transmit+0x82>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	61bb      	str	r3, [r7, #24]
 8006026:	e003      	b.n	8006030 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006038:	e02a      	b.n	8006090 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2200      	movs	r2, #0
 8006042:	2180      	movs	r1, #128	; 0x80
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f8df 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e036      	b.n	80060c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006068:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	3302      	adds	r3, #2
 800606e:	61bb      	str	r3, [r7, #24]
 8006070:	e007      	b.n	8006082 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	781a      	ldrb	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1cf      	bne.n	800603a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2200      	movs	r2, #0
 80060a2:	2140      	movs	r1, #64	; 0x40
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f8af 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e006      	b.n	80060c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	e000      	b.n	80060c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060c0:	2302      	movs	r3, #2
  }
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3720      	adds	r7, #32
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b08a      	sub	sp, #40	; 0x28
 80060ce:	af02      	add	r7, sp, #8
 80060d0:	60f8      	str	r0, [r7, #12]
 80060d2:	60b9      	str	r1, [r7, #8]
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	4613      	mov	r3, r2
 80060d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	f040 8089 	bne.w	80061fe <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_UART_Receive+0x2e>
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e081      	b.n	8006200 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_UART_Receive+0x40>
 8006106:	2302      	movs	r3, #2
 8006108:	e07a      	b.n	8006200 <HAL_UART_Receive+0x136>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2222      	movs	r2, #34	; 0x22
 800611c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006120:	f7fe f8c2 	bl	80042a8 <HAL_GetTick>
 8006124:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	88fa      	ldrh	r2, [r7, #6]
 800612a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	88fa      	ldrh	r2, [r7, #6]
 8006130:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800613a:	d108      	bne.n	800614e <HAL_UART_Receive+0x84>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d104      	bne.n	800614e <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	61bb      	str	r3, [r7, #24]
 800614c:	e003      	b.n	8006156 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800615e:	e043      	b.n	80061e8 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2200      	movs	r2, #0
 8006168:	2120      	movs	r1, #32
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 f84c 	bl	8006208 <UART_WaitOnFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e042      	b.n	8006200 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d10c      	bne.n	800619a <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618c:	b29a      	uxth	r2, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	3302      	adds	r3, #2
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e01f      	b.n	80061da <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a2:	d007      	beq.n	80061b4 <HAL_UART_Receive+0xea>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10a      	bne.n	80061c2 <HAL_UART_Receive+0xf8>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	e008      	b.n	80061d4 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	3301      	adds	r3, #1
 80061d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1b6      	bne.n	8006160 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e000      	b.n	8006200 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80061fe:	2302      	movs	r3, #2
  }
}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006218:	e02c      	b.n	8006274 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006220:	d028      	beq.n	8006274 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <UART_WaitOnFlagUntilTimeout+0x30>
 8006228:	f7fe f83e 	bl	80042a8 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	429a      	cmp	r2, r3
 8006236:	d21d      	bcs.n	8006274 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006246:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0201 	bic.w	r2, r2, #1
 8006256:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e00f      	b.n	8006294 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4013      	ands	r3, r2
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	429a      	cmp	r2, r3
 8006282:	bf0c      	ite	eq
 8006284:	2301      	moveq	r3, #1
 8006286:	2300      	movne	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	461a      	mov	r2, r3
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	429a      	cmp	r2, r3
 8006290:	d0c3      	beq.n	800621a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80062d6:	f023 030c 	bic.w	r3, r3, #12
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a2c      	ldr	r2, [pc, #176]	; (80063b0 <UART_SetConfig+0x114>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d103      	bne.n	800630c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006304:	f7ff f8a6 	bl	8005454 <HAL_RCC_GetPCLK2Freq>
 8006308:	60f8      	str	r0, [r7, #12]
 800630a:	e002      	b.n	8006312 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800630c:	f7ff f88e 	bl	800542c <HAL_RCC_GetPCLK1Freq>
 8006310:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009a      	lsls	r2, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	fbb2 f3f3 	udiv	r3, r2, r3
 8006328:	4a22      	ldr	r2, [pc, #136]	; (80063b4 <UART_SetConfig+0x118>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	0119      	lsls	r1, r3, #4
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009a      	lsls	r2, r3, #2
 800633c:	441a      	add	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	fbb2 f2f3 	udiv	r2, r2, r3
 8006348:	4b1a      	ldr	r3, [pc, #104]	; (80063b4 <UART_SetConfig+0x118>)
 800634a:	fba3 0302 	umull	r0, r3, r3, r2
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	2064      	movs	r0, #100	; 0x64
 8006352:	fb00 f303 	mul.w	r3, r0, r3
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	3332      	adds	r3, #50	; 0x32
 800635c:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <UART_SetConfig+0x118>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006368:	4419      	add	r1, r3
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009a      	lsls	r2, r3, #2
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006380:	4b0c      	ldr	r3, [pc, #48]	; (80063b4 <UART_SetConfig+0x118>)
 8006382:	fba3 0302 	umull	r0, r3, r3, r2
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2064      	movs	r0, #100	; 0x64
 800638a:	fb00 f303 	mul.w	r3, r0, r3
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	3332      	adds	r3, #50	; 0x32
 8006394:	4a07      	ldr	r2, [pc, #28]	; (80063b4 <UART_SetConfig+0x118>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	095b      	lsrs	r3, r3, #5
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	440a      	add	r2, r1
 80063a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40013800 	.word	0x40013800
 80063b4:	51eb851f 	.word	0x51eb851f

080063b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10f      	bne.n	80063ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ca:	f3ef 8310 	mrs	r3, PRIMASK
 80063ce:	607b      	str	r3, [r7, #4]
  return(result);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <osKernelInitialize+0x32>
 80063d6:	4b10      	ldr	r3, [pc, #64]	; (8006418 <osKernelInitialize+0x60>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d109      	bne.n	80063f2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063de:	f3ef 8311 	mrs	r3, BASEPRI
 80063e2:	603b      	str	r3, [r7, #0]
  return(result);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063ea:	f06f 0305 	mvn.w	r3, #5
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e00c      	b.n	800640c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <osKernelInitialize+0x60>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d105      	bne.n	8006406 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <osKernelInitialize+0x60>)
 80063fc:	2201      	movs	r2, #1
 80063fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e002      	b.n	800640c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr
 8006418:	20000040 	.word	0x20000040

0800641c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006422:	f3ef 8305 	mrs	r3, IPSR
 8006426:	60bb      	str	r3, [r7, #8]
  return(result);
 8006428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10f      	bne.n	800644e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642e:	f3ef 8310 	mrs	r3, PRIMASK
 8006432:	607b      	str	r3, [r7, #4]
  return(result);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d109      	bne.n	800644e <osKernelStart+0x32>
 800643a:	4b11      	ldr	r3, [pc, #68]	; (8006480 <osKernelStart+0x64>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d109      	bne.n	8006456 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006442:	f3ef 8311 	mrs	r3, BASEPRI
 8006446:	603b      	str	r3, [r7, #0]
  return(result);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <osKernelStart+0x3a>
    stat = osErrorISR;
 800644e:	f06f 0305 	mvn.w	r3, #5
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e00e      	b.n	8006474 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <osKernelStart+0x64>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d107      	bne.n	800646e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800645e:	4b08      	ldr	r3, [pc, #32]	; (8006480 <osKernelStart+0x64>)
 8006460:	2202      	movs	r2, #2
 8006462:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006464:	f001 f93c 	bl	80076e0 <vTaskStartScheduler>
      stat = osOK;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e002      	b.n	8006474 <osKernelStart+0x58>
    } else {
      stat = osError;
 800646e:	f04f 33ff 	mov.w	r3, #4294967295
 8006472:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006474:	68fb      	ldr	r3, [r7, #12]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000040 	.word	0x20000040

08006484 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006484:	b580      	push	{r7, lr}
 8006486:	b092      	sub	sp, #72	; 0x48
 8006488:	af04      	add	r7, sp, #16
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006494:	f3ef 8305 	mrs	r3, IPSR
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 8094 	bne.w	80065ca <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064a2:	f3ef 8310 	mrs	r3, PRIMASK
 80064a6:	623b      	str	r3, [r7, #32]
  return(result);
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 808d 	bne.w	80065ca <osThreadNew+0x146>
 80064b0:	4b48      	ldr	r3, [pc, #288]	; (80065d4 <osThreadNew+0x150>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d106      	bne.n	80064c6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064b8:	f3ef 8311 	mrs	r3, BASEPRI
 80064bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f040 8082 	bne.w	80065ca <osThreadNew+0x146>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d07e      	beq.n	80065ca <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80064cc:	2380      	movs	r3, #128	; 0x80
 80064ce:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80064d0:	2318      	movs	r3, #24
 80064d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80064d4:	2300      	movs	r3, #0
 80064d6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80064d8:	f107 031b 	add.w	r3, r7, #27
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d045      	beq.n	8006576 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <osThreadNew+0x74>
        name = attr->name;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <osThreadNew+0x9a>
 800650c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650e:	2b38      	cmp	r3, #56	; 0x38
 8006510:	d805      	bhi.n	800651e <osThreadNew+0x9a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <osThreadNew+0x9e>
        return (NULL);
 800651e:	2300      	movs	r3, #0
 8006520:	e054      	b.n	80065cc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	089b      	lsrs	r3, r3, #2
 8006530:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <osThreadNew+0xd4>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b5b      	cmp	r3, #91	; 0x5b
 8006540:	d90a      	bls.n	8006558 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006546:	2b00      	cmp	r3, #0
 8006548:	d006      	beq.n	8006558 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <osThreadNew+0xd4>
        mem = 1;
 8006552:	2301      	movs	r3, #1
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
 8006556:	e010      	b.n	800657a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10c      	bne.n	800657a <osThreadNew+0xf6>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d108      	bne.n	800657a <osThreadNew+0xf6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <osThreadNew+0xf6>
          mem = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
 8006574:	e001      	b.n	800657a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	2b01      	cmp	r3, #1
 800657e:	d110      	bne.n	80065a2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006588:	9202      	str	r2, [sp, #8]
 800658a:	9301      	str	r3, [sp, #4]
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006594:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fed6 	bl	8007348 <xTaskCreateStatic>
 800659c:	4603      	mov	r3, r0
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	e013      	b.n	80065ca <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d110      	bne.n	80065ca <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	f107 0314 	add.w	r3, r7, #20
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 ff20 	bl	8007400 <xTaskCreate>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d001      	beq.n	80065ca <osThreadNew+0x146>
          hTask = NULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065ca:	697b      	ldr	r3, [r7, #20]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3738      	adds	r7, #56	; 0x38
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20000040 	.word	0x20000040

080065d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e0:	f3ef 8305 	mrs	r3, IPSR
 80065e4:	613b      	str	r3, [r7, #16]
  return(result);
 80065e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10f      	bne.n	800660c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ec:	f3ef 8310 	mrs	r3, PRIMASK
 80065f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <osDelay+0x34>
 80065f8:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <osDelay+0x58>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d109      	bne.n	8006614 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006600:	f3ef 8311 	mrs	r3, BASEPRI
 8006604:	60bb      	str	r3, [r7, #8]
  return(result);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d003      	beq.n	8006614 <osDelay+0x3c>
    stat = osErrorISR;
 800660c:	f06f 0305 	mvn.w	r3, #5
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	e007      	b.n	8006624 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <osDelay+0x4c>
      vTaskDelay(ticks);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f001 f82a 	bl	8007678 <vTaskDelay>
    }
  }

  return (stat);
 8006624:	697b      	ldr	r3, [r7, #20]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000040 	.word	0x20000040

08006634 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006634:	b580      	push	{r7, lr}
 8006636:	b08c      	sub	sp, #48	; 0x30
 8006638:	af02      	add	r7, sp, #8
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006644:	f3ef 8305 	mrs	r3, IPSR
 8006648:	61bb      	str	r3, [r7, #24]
  return(result);
 800664a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800664c:	2b00      	cmp	r3, #0
 800664e:	d16f      	bne.n	8006730 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006650:	f3ef 8310 	mrs	r3, PRIMASK
 8006654:	617b      	str	r3, [r7, #20]
  return(result);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d169      	bne.n	8006730 <osMessageQueueNew+0xfc>
 800665c:	4b37      	ldr	r3, [pc, #220]	; (800673c <osMessageQueueNew+0x108>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d105      	bne.n	8006670 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006664:	f3ef 8311 	mrs	r3, BASEPRI
 8006668:	613b      	str	r3, [r7, #16]
  return(result);
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d15f      	bne.n	8006730 <osMessageQueueNew+0xfc>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d05c      	beq.n	8006730 <osMessageQueueNew+0xfc>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d059      	beq.n	8006730 <osMessageQueueNew+0xfc>
    mem = -1;
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d029      	beq.n	80066dc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d012      	beq.n	80066b6 <osMessageQueueNew+0x82>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b4f      	cmp	r3, #79	; 0x4f
 8006696:	d90e      	bls.n	80066b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <osMessageQueueNew+0x82>
        mem = 1;
 80066b0:	2301      	movs	r3, #1
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	e014      	b.n	80066e0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d110      	bne.n	80066e0 <osMessageQueueNew+0xac>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10c      	bne.n	80066e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d108      	bne.n	80066e0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <osMessageQueueNew+0xac>
          mem = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	e001      	b.n	80066e0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d10b      	bne.n	80066fe <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2100      	movs	r1, #0
 80066f0:	9100      	str	r1, [sp, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 f96d 	bl	80069d4 <xQueueGenericCreateStatic>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24
 80066fc:	e008      	b.n	8006710 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d105      	bne.n	8006710 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006704:	2200      	movs	r2, #0
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 f9da 	bl	8006ac2 <xQueueGenericCreate>
 800670e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00c      	beq.n	8006730 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <osMessageQueueNew+0xf0>
        name = attr->name;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	61fb      	str	r3, [r7, #28]
 8006722:	e001      	b.n	8006728 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006728:	69f9      	ldr	r1, [r7, #28]
 800672a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800672c:	f000 fdb0 	bl	8007290 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006732:	4618      	mov	r0, r3
 8006734:	3728      	adds	r7, #40	; 0x28
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000040 	.word	0x20000040

08006740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a06      	ldr	r2, [pc, #24]	; (8006768 <vApplicationGetIdleTaskMemory+0x28>)
 8006750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4a05      	ldr	r2, [pc, #20]	; (800676c <vApplicationGetIdleTaskMemory+0x2c>)
 8006756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	601a      	str	r2, [r3, #0]
}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr
 8006768:	20000044 	.word	0x20000044
 800676c:	200000a0 	.word	0x200000a0

08006770 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4a07      	ldr	r2, [pc, #28]	; (800679c <vApplicationGetTimerTaskMemory+0x2c>)
 8006780:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4a06      	ldr	r2, [pc, #24]	; (80067a0 <vApplicationGetTimerTaskMemory+0x30>)
 8006786:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800678e:	601a      	str	r2, [r3, #0]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	200002a0 	.word	0x200002a0
 80067a0:	200002fc 	.word	0x200002fc

080067a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 0208 	add.w	r2, r3, #8
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295
 80067bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f103 0208 	add.w	r2, r3, #8
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f103 0208 	add.w	r2, r3, #8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bc80      	pop	{r7}
 80067f8:	4770      	bx	lr

080067fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	1c5a      	adds	r2, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr

08006840 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d103      	bne.n	8006860 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e00c      	b.n	800687a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3308      	adds	r3, #8
 8006864:	60fb      	str	r3, [r7, #12]
 8006866:	e002      	b.n	800686e <vListInsert+0x2e>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d2f6      	bcs.n	8006868 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bc80      	pop	{r7}
 80068ae:	4770      	bx	lr

080068b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6892      	ldr	r2, [r2, #8]
 80068c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6852      	ldr	r2, [r2, #4]
 80068d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d103      	bne.n	80068e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	1e5a      	subs	r2, r3, #1
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr
	...

08006904 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800692e:	f002 f805 	bl	800893c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800693e:	fb01 f303 	mul.w	r3, r1, r3
 8006942:	441a      	add	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695e:	3b01      	subs	r3, #1
 8006960:	68f9      	ldr	r1, [r7, #12]
 8006962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	441a      	add	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	22ff      	movs	r2, #255	; 0xff
 8006972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	22ff      	movs	r2, #255	; 0xff
 800697a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d114      	bne.n	80069ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01a      	beq.n	80069c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3310      	adds	r3, #16
 8006990:	4618      	mov	r0, r3
 8006992:	f001 f92f 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d012      	beq.n	80069c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <xQueueGenericReset+0xcc>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	e009      	b.n	80069c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3310      	adds	r3, #16
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7ff fef6 	bl	80067a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3324      	adds	r3, #36	; 0x24
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff fef1 	bl	80067a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069c2:	f001 ffeb 	bl	800899c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069c6:	2301      	movs	r3, #1
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08e      	sub	sp, #56	; 0x38
 80069d8:	af02      	add	r7, sp, #8
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10a      	bne.n	80069fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069fa:	bf00      	nop
 80069fc:	e7fe      	b.n	80069fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a16:	bf00      	nop
 8006a18:	e7fe      	b.n	8006a18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <xQueueGenericCreateStatic+0x52>
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <xQueueGenericCreateStatic+0x56>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e000      	b.n	8006a2c <xQueueGenericCreateStatic+0x58>
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	623b      	str	r3, [r7, #32]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <xQueueGenericCreateStatic+0x7e>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <xQueueGenericCreateStatic+0x82>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e000      	b.n	8006a58 <xQueueGenericCreateStatic+0x84>
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	61fb      	str	r3, [r7, #28]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a72:	2350      	movs	r3, #80	; 0x50
 8006a74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b50      	cmp	r3, #80	; 0x50
 8006a7a:	d00a      	beq.n	8006a92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	61bb      	str	r3, [r7, #24]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00d      	beq.n	8006ab8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aa4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 f843 	bl	8006b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3730      	adds	r7, #48	; 0x30
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b08a      	sub	sp, #40	; 0x28
 8006ac6:	af02      	add	r7, sp, #8
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	4613      	mov	r3, r2
 8006ace:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10a      	bne.n	8006aec <xQueueGenericCreate+0x2a>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	613b      	str	r3, [r7, #16]
}
 8006ae8:	bf00      	nop
 8006aea:	e7fe      	b.n	8006aea <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	e004      	b.n	8006b02 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	fb02 f303 	mul.w	r3, r2, r3
 8006b00:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	3350      	adds	r3, #80	; 0x50
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 f818 	bl	8008b3c <pvPortMalloc>
 8006b0c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00f      	beq.n	8006b34 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	3350      	adds	r3, #80	; 0x50
 8006b18:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b22:	79fa      	ldrb	r2, [r7, #7]
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	68b9      	ldr	r1, [r7, #8]
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f805 	bl	8006b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b34:	69bb      	ldr	r3, [r7, #24]
	}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3720      	adds	r7, #32
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
 8006b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e002      	b.n	8006b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	69b8      	ldr	r0, [r7, #24]
 8006b70:	f7ff fec8 	bl	8006904 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	78fa      	ldrb	r2, [r7, #3]
 8006b78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08e      	sub	sp, #56	; 0x38
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b92:	2300      	movs	r3, #0
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <xQueueGenericSend+0x32>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <xQueueGenericSend+0x40>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <xQueueGenericSend+0x44>
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e000      	b.n	8006bca <xQueueGenericSend+0x46>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <xQueueGenericSend+0x60>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d103      	bne.n	8006bf2 <xQueueGenericSend+0x6e>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d101      	bne.n	8006bf6 <xQueueGenericSend+0x72>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <xQueueGenericSend+0x74>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xQueueGenericSend+0x8e>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	623b      	str	r3, [r7, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c12:	f001 f9b1 	bl	8007f78 <xTaskGetSchedulerState>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d102      	bne.n	8006c22 <xQueueGenericSend+0x9e>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <xQueueGenericSend+0xa2>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <xQueueGenericSend+0xa4>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xQueueGenericSend+0xbe>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	61fb      	str	r3, [r7, #28]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c42:	f001 fe7b 	bl	800893c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d302      	bcc.n	8006c58 <xQueueGenericSend+0xd4>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d129      	bne.n	8006cac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	68b9      	ldr	r1, [r7, #8]
 8006c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c5e:	f000 fa07 	bl	8007070 <prvCopyDataToQueue>
 8006c62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d010      	beq.n	8006c8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	3324      	adds	r3, #36	; 0x24
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 ffbf 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d013      	beq.n	8006ca4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c7c:	4b3f      	ldr	r3, [pc, #252]	; (8006d7c <xQueueGenericSend+0x1f8>)
 8006c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	e00a      	b.n	8006ca4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c94:	4b39      	ldr	r3, [pc, #228]	; (8006d7c <xQueueGenericSend+0x1f8>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ca4:	f001 fe7a 	bl	800899c <vPortExitCritical>
				return pdPASS;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e063      	b.n	8006d74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d103      	bne.n	8006cba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cb2:	f001 fe73 	bl	800899c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	e05c      	b.n	8006d74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d106      	bne.n	8006cce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cc0:	f107 0314 	add.w	r3, r7, #20
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 fff9 	bl	8007cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cce:	f001 fe65 	bl	800899c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cd2:	f000 fd6b 	bl	80077ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd6:	f001 fe31 	bl	800893c <vPortEnterCritical>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ce0:	b25b      	sxtb	r3, r3
 8006ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce6:	d103      	bne.n	8006cf0 <xQueueGenericSend+0x16c>
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cf6:	b25b      	sxtb	r3, r3
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfc:	d103      	bne.n	8006d06 <xQueueGenericSend+0x182>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d06:	f001 fe49 	bl	800899c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d0a:	1d3a      	adds	r2, r7, #4
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	4611      	mov	r1, r2
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 ffe8 	bl	8007ce8 <xTaskCheckForTimeOut>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d124      	bne.n	8006d68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d20:	f000 fa9e 	bl	8007260 <prvIsQueueFull>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d018      	beq.n	8006d5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	3310      	adds	r3, #16
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 ff0e 	bl	8007b54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d3a:	f000 fa29 	bl	8007190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d3e:	f000 fd43 	bl	80077c8 <xTaskResumeAll>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f47f af7c 	bne.w	8006c42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <xQueueGenericSend+0x1f8>)
 8006d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	e772      	b.n	8006c42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d5e:	f000 fa17 	bl	8007190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d62:	f000 fd31 	bl	80077c8 <xTaskResumeAll>
 8006d66:	e76c      	b.n	8006c42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d6a:	f000 fa11 	bl	8007190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d6e:	f000 fd2b 	bl	80077c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d72:	2300      	movs	r3, #0
		}
	}
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3738      	adds	r7, #56	; 0x38
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08e      	sub	sp, #56	; 0x38
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d103      	bne.n	8006dbc <xQueueGenericSendFromISR+0x3c>
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <xQueueGenericSendFromISR+0x40>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <xQueueGenericSendFromISR+0x42>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	623b      	str	r3, [r7, #32]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d103      	bne.n	8006dea <xQueueGenericSendFromISR+0x6a>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <xQueueGenericSendFromISR+0x6e>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e000      	b.n	8006df0 <xQueueGenericSendFromISR+0x70>
 8006dee:	2300      	movs	r3, #0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	61fb      	str	r3, [r7, #28]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e0a:	f001 fe59 	bl	8008ac0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e0e:	f3ef 8211 	mrs	r2, BASEPRI
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	61ba      	str	r2, [r7, #24]
 8006e24:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e26:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d302      	bcc.n	8006e3c <xQueueGenericSendFromISR+0xbc>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d12c      	bne.n	8006e96 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	68b9      	ldr	r1, [r7, #8]
 8006e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e4c:	f000 f910 	bl	8007070 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e58:	d112      	bne.n	8006e80 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d016      	beq.n	8006e90 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	3324      	adds	r3, #36	; 0x24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 fec4 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00e      	beq.n	8006e90 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00b      	beq.n	8006e90 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e007      	b.n	8006e90 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e84:	3301      	adds	r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	b25a      	sxtb	r2, r3
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e90:	2301      	movs	r3, #1
 8006e92:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e94:	e001      	b.n	8006e9a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34
 8006e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ea4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3738      	adds	r7, #56	; 0x38
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10a      	bne.n	8006ee0 <xQueueReceive+0x30>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	623b      	str	r3, [r7, #32]
}
 8006edc:	bf00      	nop
 8006ede:	e7fe      	b.n	8006ede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d103      	bne.n	8006eee <xQueueReceive+0x3e>
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <xQueueReceive+0x42>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <xQueueReceive+0x44>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <xQueueReceive+0x5e>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	61fb      	str	r3, [r7, #28]
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f0e:	f001 f833 	bl	8007f78 <xTaskGetSchedulerState>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <xQueueReceive+0x6e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d101      	bne.n	8006f22 <xQueueReceive+0x72>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <xQueueReceive+0x74>
 8006f22:	2300      	movs	r3, #0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <xQueueReceive+0x8e>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	61bb      	str	r3, [r7, #24]
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f3e:	f001 fcfd 	bl	800893c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d01f      	beq.n	8006f8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f52:	f000 f8f7 	bl	8007144 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00f      	beq.n	8006f86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	3310      	adds	r3, #16
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fe42 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f76:	4b3d      	ldr	r3, [pc, #244]	; (800706c <xQueueReceive+0x1bc>)
 8006f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f86:	f001 fd09 	bl	800899c <vPortExitCritical>
				return pdPASS;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e069      	b.n	8007062 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d103      	bne.n	8006f9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f94:	f001 fd02 	bl	800899c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e062      	b.n	8007062 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fa2:	f107 0310 	add.w	r3, r7, #16
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fe88 	bl	8007cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fb0:	f001 fcf4 	bl	800899c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fb4:	f000 fbfa 	bl	80077ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fb8:	f001 fcc0 	bl	800893c <vPortEnterCritical>
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d103      	bne.n	8006fd2 <xQueueReceive+0x122>
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d103      	bne.n	8006fe8 <xQueueReceive+0x138>
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe8:	f001 fcd8 	bl	800899c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fec:	1d3a      	adds	r2, r7, #4
 8006fee:	f107 0310 	add.w	r3, r7, #16
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fe77 	bl	8007ce8 <xTaskCheckForTimeOut>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d123      	bne.n	8007048 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007002:	f000 f917 	bl	8007234 <prvIsQueueEmpty>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d017      	beq.n	800703c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	3324      	adds	r3, #36	; 0x24
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fd9d 	bl	8007b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800701a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701c:	f000 f8b8 	bl	8007190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007020:	f000 fbd2 	bl	80077c8 <xTaskResumeAll>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d189      	bne.n	8006f3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800702a:	4b10      	ldr	r3, [pc, #64]	; (800706c <xQueueReceive+0x1bc>)
 800702c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	e780      	b.n	8006f3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800703c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800703e:	f000 f8a7 	bl	8007190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007042:	f000 fbc1 	bl	80077c8 <xTaskResumeAll>
 8007046:	e77a      	b.n	8006f3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800704a:	f000 f8a1 	bl	8007190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800704e:	f000 fbbb 	bl	80077c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007054:	f000 f8ee 	bl	8007234 <prvIsQueueEmpty>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	f43f af6f 	beq.w	8006f3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007062:	4618      	mov	r0, r3
 8007064:	3730      	adds	r7, #48	; 0x30
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10d      	bne.n	80070aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d14d      	bne.n	8007132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4618      	mov	r0, r3
 800709c:	f000 ff8a 	bl	8007fb4 <xTaskPriorityDisinherit>
 80070a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	e043      	b.n	8007132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d119      	bne.n	80070e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6898      	ldr	r0, [r3, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	461a      	mov	r2, r3
 80070ba:	68b9      	ldr	r1, [r7, #8]
 80070bc:	f001 ff3a 	bl	8008f34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	441a      	add	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d32b      	bcc.n	8007132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	609a      	str	r2, [r3, #8]
 80070e2:	e026      	b.n	8007132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68d8      	ldr	r0, [r3, #12]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	461a      	mov	r2, r3
 80070ee:	68b9      	ldr	r1, [r7, #8]
 80070f0:	f001 ff20 	bl	8008f34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	425b      	negs	r3, r3
 80070fe:	441a      	add	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	429a      	cmp	r2, r3
 800710e:	d207      	bcs.n	8007120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	425b      	negs	r3, r3
 800711a:	441a      	add	r2, r3
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d105      	bne.n	8007132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	3b01      	subs	r3, #1
 8007130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800713a:	697b      	ldr	r3, [r7, #20]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	2b00      	cmp	r3, #0
 8007154:	d018      	beq.n	8007188 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	441a      	add	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	429a      	cmp	r2, r3
 800716e:	d303      	bcc.n	8007178 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68d9      	ldr	r1, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	461a      	mov	r2, r3
 8007182:	6838      	ldr	r0, [r7, #0]
 8007184:	f001 fed6 	bl	8008f34 <memcpy>
	}
}
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007198:	f001 fbd0 	bl	800893c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071a4:	e011      	b.n	80071ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d012      	beq.n	80071d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3324      	adds	r3, #36	; 0x24
 80071b2:	4618      	mov	r0, r3
 80071b4:	f000 fd1e 	bl	8007bf4 <xTaskRemoveFromEventList>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071be:	f000 fdf5 	bl	8007dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dce9      	bgt.n	80071a6 <prvUnlockQueue+0x16>
 80071d2:	e000      	b.n	80071d6 <prvUnlockQueue+0x46>
					break;
 80071d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	22ff      	movs	r2, #255	; 0xff
 80071da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071de:	f001 fbdd 	bl	800899c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071e2:	f001 fbab 	bl	800893c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071ee:	e011      	b.n	8007214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d012      	beq.n	800721e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3310      	adds	r3, #16
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fcf9 	bl	8007bf4 <xTaskRemoveFromEventList>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007208:	f000 fdd0 	bl	8007dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	3b01      	subs	r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	dce9      	bgt.n	80071f0 <prvUnlockQueue+0x60>
 800721c:	e000      	b.n	8007220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800721e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	22ff      	movs	r2, #255	; 0xff
 8007224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007228:	f001 fbb8 	bl	800899c <vPortExitCritical>
}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800723c:	f001 fb7e 	bl	800893c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007248:	2301      	movs	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	e001      	b.n	8007252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007252:	f001 fba3 	bl	800899c <vPortExitCritical>

	return xReturn;
 8007256:	68fb      	ldr	r3, [r7, #12]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007268:	f001 fb68 	bl	800893c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007274:	429a      	cmp	r2, r3
 8007276:	d102      	bne.n	800727e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	e001      	b.n	8007282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800727e:	2300      	movs	r3, #0
 8007280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007282:	f001 fb8b 	bl	800899c <vPortExitCritical>

	return xReturn;
 8007286:	68fb      	ldr	r3, [r7, #12]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e014      	b.n	80072ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072a0:	4a0e      	ldr	r2, [pc, #56]	; (80072dc <vQueueAddToRegistry+0x4c>)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10b      	bne.n	80072c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072ac:	490b      	ldr	r1, [pc, #44]	; (80072dc <vQueueAddToRegistry+0x4c>)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072b6:	4a09      	ldr	r2, [pc, #36]	; (80072dc <vQueueAddToRegistry+0x4c>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4413      	add	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072c2:	e006      	b.n	80072d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b07      	cmp	r3, #7
 80072ce:	d9e7      	bls.n	80072a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr
 80072dc:	20002948 	.word	0x20002948

080072e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072f0:	f001 fb24 	bl	800893c <vPortEnterCritical>
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072fa:	b25b      	sxtb	r3, r3
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d103      	bne.n	800730a <vQueueWaitForMessageRestricted+0x2a>
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007310:	b25b      	sxtb	r3, r3
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	d103      	bne.n	8007320 <vQueueWaitForMessageRestricted+0x40>
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007320:	f001 fb3c 	bl	800899c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007328:	2b00      	cmp	r3, #0
 800732a:	d106      	bne.n	800733a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	4618      	mov	r0, r3
 8007336:	f000 fc31 	bl	8007b9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800733a:	6978      	ldr	r0, [r7, #20]
 800733c:	f7ff ff28 	bl	8007190 <prvUnlockQueue>
	}
 8007340:	bf00      	nop
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08e      	sub	sp, #56	; 0x38
 800734c:	af04      	add	r7, sp, #16
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
 8007354:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <xTaskCreateStatic+0x2a>
	__asm volatile
 800735c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	623b      	str	r3, [r7, #32]
}
 800736e:	bf00      	nop
 8007370:	e7fe      	b.n	8007370 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <xTaskCreateStatic+0x46>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	61fb      	str	r3, [r7, #28]
}
 800738a:	bf00      	nop
 800738c:	e7fe      	b.n	800738c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800738e:	235c      	movs	r3, #92	; 0x5c
 8007390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	2b5c      	cmp	r3, #92	; 0x5c
 8007396:	d00a      	beq.n	80073ae <xTaskCreateStatic+0x66>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	61bb      	str	r3, [r7, #24]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01e      	beq.n	80073f2 <xTaskCreateStatic+0xaa>
 80073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d01b      	beq.n	80073f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073cc:	2300      	movs	r3, #0
 80073ce:	9303      	str	r3, [sp, #12]
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	9302      	str	r3, [sp, #8]
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	9301      	str	r3, [sp, #4]
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	68b9      	ldr	r1, [r7, #8]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f850 	bl	800748a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073ec:	f000 f8d4 	bl	8007598 <prvAddNewTaskToReadyList>
 80073f0:	e001      	b.n	80073f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073f6:	697b      	ldr	r3, [r7, #20]
	}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3728      	adds	r7, #40	; 0x28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08c      	sub	sp, #48	; 0x30
 8007404:	af04      	add	r7, sp, #16
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4613      	mov	r3, r2
 800740e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007410:	88fb      	ldrh	r3, [r7, #6]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4618      	mov	r0, r3
 8007416:	f001 fb91 	bl	8008b3c <pvPortMalloc>
 800741a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00e      	beq.n	8007440 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007422:	205c      	movs	r0, #92	; 0x5c
 8007424:	f001 fb8a 	bl	8008b3c <pvPortMalloc>
 8007428:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
 8007436:	e005      	b.n	8007444 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007438:	6978      	ldr	r0, [r7, #20]
 800743a:	f001 fc43 	bl	8008cc4 <vPortFree>
 800743e:	e001      	b.n	8007444 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007440:	2300      	movs	r3, #0
 8007442:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d017      	beq.n	800747a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007452:	88fa      	ldrh	r2, [r7, #6]
 8007454:	2300      	movs	r3, #0
 8007456:	9303      	str	r3, [sp, #12]
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	9302      	str	r3, [sp, #8]
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f80e 	bl	800748a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800746e:	69f8      	ldr	r0, [r7, #28]
 8007470:	f000 f892 	bl	8007598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007474:	2301      	movs	r3, #1
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	e002      	b.n	8007480 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800747a:	f04f 33ff 	mov.w	r3, #4294967295
 800747e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007480:	69bb      	ldr	r3, [r7, #24]
	}
 8007482:	4618      	mov	r0, r3
 8007484:	3720      	adds	r7, #32
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b088      	sub	sp, #32
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
 8007496:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	461a      	mov	r2, r3
 80074a2:	21a5      	movs	r1, #165	; 0xa5
 80074a4:	f001 fd54 	bl	8008f50 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074b2:	3b01      	subs	r3, #1
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f023 0307 	bic.w	r3, r3, #7
 80074c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00a      	beq.n	80074e2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	f383 8811 	msr	BASEPRI, r3
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	617b      	str	r3, [r7, #20]
}
 80074de:	bf00      	nop
 80074e0:	e7fe      	b.n	80074e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	e012      	b.n	800750e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	4413      	add	r3, r2
 80074ee:	7819      	ldrb	r1, [r3, #0]
 80074f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	3334      	adds	r3, #52	; 0x34
 80074f8:	460a      	mov	r2, r1
 80074fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d006      	beq.n	8007516 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	3301      	adds	r3, #1
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	2b0f      	cmp	r3, #15
 8007512:	d9e9      	bls.n	80074e8 <prvInitialiseNewTask+0x5e>
 8007514:	e000      	b.n	8007518 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007516:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2b37      	cmp	r3, #55	; 0x37
 8007524:	d901      	bls.n	800752a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007526:	2337      	movs	r3, #55	; 0x37
 8007528:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800752e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007534:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	2200      	movs	r2, #0
 800753a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	3304      	adds	r3, #4
 8007540:	4618      	mov	r0, r3
 8007542:	f7ff f94e 	bl	80067e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007548:	3318      	adds	r3, #24
 800754a:	4618      	mov	r0, r3
 800754c:	f7ff f949 	bl	80067e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007554:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007564:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2200      	movs	r2, #0
 800756a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	69b8      	ldr	r0, [r7, #24]
 800757a:	f001 f8ef 	bl	800875c <pxPortInitialiseStack>
 800757e:	4602      	mov	r2, r0
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007590:	bf00      	nop
 8007592:	3720      	adds	r7, #32
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075a0:	f001 f9cc 	bl	800893c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075a4:	4b2d      	ldr	r3, [pc, #180]	; (800765c <prvAddNewTaskToReadyList+0xc4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a2c      	ldr	r2, [pc, #176]	; (800765c <prvAddNewTaskToReadyList+0xc4>)
 80075ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075ae:	4b2c      	ldr	r3, [pc, #176]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075b6:	4a2a      	ldr	r2, [pc, #168]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075bc:	4b27      	ldr	r3, [pc, #156]	; (800765c <prvAddNewTaskToReadyList+0xc4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d110      	bne.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075c4:	f000 fc16 	bl	8007df4 <prvInitialiseTaskLists>
 80075c8:	e00d      	b.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075ca:	4b26      	ldr	r3, [pc, #152]	; (8007664 <prvAddNewTaskToReadyList+0xcc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075d2:	4b23      	ldr	r3, [pc, #140]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d802      	bhi.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075e0:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <prvAddNewTaskToReadyList+0xd0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <prvAddNewTaskToReadyList+0xd0>)
 80075ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075f0:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <prvAddNewTaskToReadyList+0xd0>)
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fc:	4b1b      	ldr	r3, [pc, #108]	; (800766c <prvAddNewTaskToReadyList+0xd4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d903      	bls.n	800760c <prvAddNewTaskToReadyList+0x74>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a18      	ldr	r2, [pc, #96]	; (800766c <prvAddNewTaskToReadyList+0xd4>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4a15      	ldr	r2, [pc, #84]	; (8007670 <prvAddNewTaskToReadyList+0xd8>)
 800761a:	441a      	add	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7ff f8e9 	bl	80067fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007628:	f001 f9b8 	bl	800899c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800762c:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <prvAddNewTaskToReadyList+0xcc>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00e      	beq.n	8007652 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007634:	4b0a      	ldr	r3, [pc, #40]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	429a      	cmp	r2, r3
 8007640:	d207      	bcs.n	8007652 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007642:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <prvAddNewTaskToReadyList+0xdc>)
 8007644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000bd0 	.word	0x20000bd0
 8007660:	200006fc 	.word	0x200006fc
 8007664:	20000bdc 	.word	0x20000bdc
 8007668:	20000bec 	.word	0x20000bec
 800766c:	20000bd8 	.word	0x20000bd8
 8007670:	20000700 	.word	0x20000700
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d017      	beq.n	80076ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800768a:	4b13      	ldr	r3, [pc, #76]	; (80076d8 <vTaskDelay+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <vTaskDelay+0x30>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60bb      	str	r3, [r7, #8]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076a8:	f000 f880 	bl	80077ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076ac:	2100      	movs	r1, #0
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fcee 	bl	8008090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076b4:	f000 f888 	bl	80077c8 <xTaskResumeAll>
 80076b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <vTaskDelay+0x64>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000bf8 	.word	0x20000bf8
 80076dc:	e000ed04 	.word	0xe000ed04

080076e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ee:	463a      	mov	r2, r7
 80076f0:	1d39      	adds	r1, r7, #4
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7ff f822 	bl	8006740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	9202      	str	r2, [sp, #8]
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	2300      	movs	r3, #0
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	460a      	mov	r2, r1
 800770e:	4921      	ldr	r1, [pc, #132]	; (8007794 <vTaskStartScheduler+0xb4>)
 8007710:	4821      	ldr	r0, [pc, #132]	; (8007798 <vTaskStartScheduler+0xb8>)
 8007712:	f7ff fe19 	bl	8007348 <xTaskCreateStatic>
 8007716:	4603      	mov	r3, r0
 8007718:	4a20      	ldr	r2, [pc, #128]	; (800779c <vTaskStartScheduler+0xbc>)
 800771a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800771c:	4b1f      	ldr	r3, [pc, #124]	; (800779c <vTaskStartScheduler+0xbc>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007724:	2301      	movs	r3, #1
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e001      	b.n	800772e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d102      	bne.n	800773a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007734:	f000 fd00 	bl	8008138 <xTimerCreateTimerTask>
 8007738:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d116      	bne.n	800776e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	613b      	str	r3, [r7, #16]
}
 8007752:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007754:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <vTaskStartScheduler+0xc0>)
 8007756:	f04f 32ff 	mov.w	r2, #4294967295
 800775a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800775c:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <vTaskStartScheduler+0xc4>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007762:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <vTaskStartScheduler+0xc8>)
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007768:	f001 f876 	bl	8008858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800776c:	e00e      	b.n	800778c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d10a      	bne.n	800778c <vTaskStartScheduler+0xac>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60fb      	str	r3, [r7, #12]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <vTaskStartScheduler+0xaa>
}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	0800906c 	.word	0x0800906c
 8007798:	08007dc5 	.word	0x08007dc5
 800779c:	20000bf4 	.word	0x20000bf4
 80077a0:	20000bf0 	.word	0x20000bf0
 80077a4:	20000bdc 	.word	0x20000bdc
 80077a8:	20000bd4 	.word	0x20000bd4

080077ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077b0:	4b04      	ldr	r3, [pc, #16]	; (80077c4 <vTaskSuspendAll+0x18>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	4a03      	ldr	r2, [pc, #12]	; (80077c4 <vTaskSuspendAll+0x18>)
 80077b8:	6013      	str	r3, [r2, #0]
}
 80077ba:	bf00      	nop
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000bf8 	.word	0x20000bf8

080077c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077d6:	4b42      	ldr	r3, [pc, #264]	; (80078e0 <xTaskResumeAll+0x118>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	603b      	str	r3, [r7, #0]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077f4:	f001 f8a2 	bl	800893c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077f8:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <xTaskResumeAll+0x118>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4a38      	ldr	r2, [pc, #224]	; (80078e0 <xTaskResumeAll+0x118>)
 8007800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007802:	4b37      	ldr	r3, [pc, #220]	; (80078e0 <xTaskResumeAll+0x118>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d162      	bne.n	80078d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800780a:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <xTaskResumeAll+0x11c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d05e      	beq.n	80078d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007812:	e02f      	b.n	8007874 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007814:	4b34      	ldr	r3, [pc, #208]	; (80078e8 <xTaskResumeAll+0x120>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3318      	adds	r3, #24
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff f845 	bl	80068b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3304      	adds	r3, #4
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff f840 	bl	80068b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4b2d      	ldr	r3, [pc, #180]	; (80078ec <xTaskResumeAll+0x124>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d903      	bls.n	8007844 <xTaskResumeAll+0x7c>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <xTaskResumeAll+0x124>)
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4a27      	ldr	r2, [pc, #156]	; (80078f0 <xTaskResumeAll+0x128>)
 8007852:	441a      	add	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3304      	adds	r3, #4
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f7fe ffcd 	bl	80067fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007864:	4b23      	ldr	r3, [pc, #140]	; (80078f4 <xTaskResumeAll+0x12c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	429a      	cmp	r2, r3
 800786c:	d302      	bcc.n	8007874 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800786e:	4b22      	ldr	r3, [pc, #136]	; (80078f8 <xTaskResumeAll+0x130>)
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007874:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <xTaskResumeAll+0x120>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1cb      	bne.n	8007814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007882:	f000 fb55 	bl	8007f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007886:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <xTaskResumeAll+0x134>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d010      	beq.n	80078b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007892:	f000 f845 	bl	8007920 <xTaskIncrementTick>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800789c:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <xTaskResumeAll+0x130>)
 800789e:	2201      	movs	r2, #1
 80078a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1f1      	bne.n	8007892 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <xTaskResumeAll+0x134>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078b4:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <xTaskResumeAll+0x130>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d009      	beq.n	80078d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078bc:	2301      	movs	r3, #1
 80078be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078c0:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <xTaskResumeAll+0x138>)
 80078c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d0:	f001 f864 	bl	800899c <vPortExitCritical>

	return xAlreadyYielded;
 80078d4:	68bb      	ldr	r3, [r7, #8]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20000bf8 	.word	0x20000bf8
 80078e4:	20000bd0 	.word	0x20000bd0
 80078e8:	20000b90 	.word	0x20000b90
 80078ec:	20000bd8 	.word	0x20000bd8
 80078f0:	20000700 	.word	0x20000700
 80078f4:	200006fc 	.word	0x200006fc
 80078f8:	20000be4 	.word	0x20000be4
 80078fc:	20000be0 	.word	0x20000be0
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800790a:	4b04      	ldr	r3, [pc, #16]	; (800791c <xTaskGetTickCount+0x18>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007910:	687b      	ldr	r3, [r7, #4]
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	bc80      	pop	{r7}
 800791a:	4770      	bx	lr
 800791c:	20000bd4 	.word	0x20000bd4

08007920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007926:	2300      	movs	r3, #0
 8007928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792a:	4b51      	ldr	r3, [pc, #324]	; (8007a70 <xTaskIncrementTick+0x150>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f040 808e 	bne.w	8007a50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007934:	4b4f      	ldr	r3, [pc, #316]	; (8007a74 <xTaskIncrementTick+0x154>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800793c:	4a4d      	ldr	r2, [pc, #308]	; (8007a74 <xTaskIncrementTick+0x154>)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d120      	bne.n	800798a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007948:	4b4b      	ldr	r3, [pc, #300]	; (8007a78 <xTaskIncrementTick+0x158>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <xTaskIncrementTick+0x48>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	603b      	str	r3, [r7, #0]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xTaskIncrementTick+0x46>
 8007968:	4b43      	ldr	r3, [pc, #268]	; (8007a78 <xTaskIncrementTick+0x158>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	4b43      	ldr	r3, [pc, #268]	; (8007a7c <xTaskIncrementTick+0x15c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a41      	ldr	r2, [pc, #260]	; (8007a78 <xTaskIncrementTick+0x158>)
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	4a41      	ldr	r2, [pc, #260]	; (8007a7c <xTaskIncrementTick+0x15c>)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	4b40      	ldr	r3, [pc, #256]	; (8007a80 <xTaskIncrementTick+0x160>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	4a3f      	ldr	r2, [pc, #252]	; (8007a80 <xTaskIncrementTick+0x160>)
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	f000 fad3 	bl	8007f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800798a:	4b3e      	ldr	r3, [pc, #248]	; (8007a84 <xTaskIncrementTick+0x164>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	429a      	cmp	r2, r3
 8007992:	d34e      	bcc.n	8007a32 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007994:	4b38      	ldr	r3, [pc, #224]	; (8007a78 <xTaskIncrementTick+0x158>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <xTaskIncrementTick+0x82>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xTaskIncrementTick+0x84>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d004      	beq.n	80079b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079a8:	4b36      	ldr	r3, [pc, #216]	; (8007a84 <xTaskIncrementTick+0x164>)
 80079aa:	f04f 32ff 	mov.w	r2, #4294967295
 80079ae:	601a      	str	r2, [r3, #0]
					break;
 80079b0:	e03f      	b.n	8007a32 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079b2:	4b31      	ldr	r3, [pc, #196]	; (8007a78 <xTaskIncrementTick+0x158>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d203      	bcs.n	80079d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079ca:	4a2e      	ldr	r2, [pc, #184]	; (8007a84 <xTaskIncrementTick+0x164>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6013      	str	r3, [r2, #0]
						break;
 80079d0:	e02f      	b.n	8007a32 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3304      	adds	r3, #4
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe ff6a 	bl	80068b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d004      	beq.n	80079ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	3318      	adds	r3, #24
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe ff61 	bl	80068b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f2:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <xTaskIncrementTick+0x168>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d903      	bls.n	8007a02 <xTaskIncrementTick+0xe2>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	4a22      	ldr	r2, [pc, #136]	; (8007a88 <xTaskIncrementTick+0x168>)
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4a1f      	ldr	r2, [pc, #124]	; (8007a8c <xTaskIncrementTick+0x16c>)
 8007a10:	441a      	add	r2, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	3304      	adds	r3, #4
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f7fe feee 	bl	80067fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a22:	4b1b      	ldr	r3, [pc, #108]	; (8007a90 <xTaskIncrementTick+0x170>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d3b3      	bcc.n	8007994 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a30:	e7b0      	b.n	8007994 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a32:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <xTaskIncrementTick+0x170>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a38:	4914      	ldr	r1, [pc, #80]	; (8007a8c <xTaskIncrementTick+0x16c>)
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	440b      	add	r3, r1
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d907      	bls.n	8007a5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	e004      	b.n	8007a5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a50:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <xTaskIncrementTick+0x174>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	4a0f      	ldr	r2, [pc, #60]	; (8007a94 <xTaskIncrementTick+0x174>)
 8007a58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <xTaskIncrementTick+0x178>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007a62:	2301      	movs	r3, #1
 8007a64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a66:	697b      	ldr	r3, [r7, #20]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000bf8 	.word	0x20000bf8
 8007a74:	20000bd4 	.word	0x20000bd4
 8007a78:	20000b88 	.word	0x20000b88
 8007a7c:	20000b8c 	.word	0x20000b8c
 8007a80:	20000be8 	.word	0x20000be8
 8007a84:	20000bf0 	.word	0x20000bf0
 8007a88:	20000bd8 	.word	0x20000bd8
 8007a8c:	20000700 	.word	0x20000700
 8007a90:	200006fc 	.word	0x200006fc
 8007a94:	20000be0 	.word	0x20000be0
 8007a98:	20000be4 	.word	0x20000be4

08007a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007aa2:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <vTaskSwitchContext+0xa4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aaa:	4b26      	ldr	r3, [pc, #152]	; (8007b44 <vTaskSwitchContext+0xa8>)
 8007aac:	2201      	movs	r2, #1
 8007aae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ab0:	e041      	b.n	8007b36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <vTaskSwitchContext+0xa8>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ab8:	4b23      	ldr	r3, [pc, #140]	; (8007b48 <vTaskSwitchContext+0xac>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e010      	b.n	8007ae2 <vTaskSwitchContext+0x46>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <vTaskSwitchContext+0x40>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	607b      	str	r3, [r7, #4]
}
 8007ad8:	bf00      	nop
 8007ada:	e7fe      	b.n	8007ada <vTaskSwitchContext+0x3e>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
 8007ae2:	491a      	ldr	r1, [pc, #104]	; (8007b4c <vTaskSwitchContext+0xb0>)
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	440b      	add	r3, r1
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0e4      	beq.n	8007ac0 <vTaskSwitchContext+0x24>
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <vTaskSwitchContext+0xb0>)
 8007b02:	4413      	add	r3, r2
 8007b04:	60bb      	str	r3, [r7, #8]
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	605a      	str	r2, [r3, #4]
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	3308      	adds	r3, #8
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d104      	bne.n	8007b26 <vTaskSwitchContext+0x8a>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	605a      	str	r2, [r3, #4]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	4a08      	ldr	r2, [pc, #32]	; (8007b50 <vTaskSwitchContext+0xb4>)
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	4a05      	ldr	r2, [pc, #20]	; (8007b48 <vTaskSwitchContext+0xac>)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6013      	str	r3, [r2, #0]
}
 8007b36:	bf00      	nop
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bc80      	pop	{r7}
 8007b3e:	4770      	bx	lr
 8007b40:	20000bf8 	.word	0x20000bf8
 8007b44:	20000be4 	.word	0x20000be4
 8007b48:	20000bd8 	.word	0x20000bd8
 8007b4c:	20000700 	.word	0x20000700
 8007b50:	200006fc 	.word	0x200006fc

08007b54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	60fb      	str	r3, [r7, #12]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <vTaskPlaceOnEventList+0x44>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3318      	adds	r3, #24
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fe fe5c 	bl	8006840 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b88:	2101      	movs	r1, #1
 8007b8a:	6838      	ldr	r0, [r7, #0]
 8007b8c:	f000 fa80 	bl	8008090 <prvAddCurrentTaskToDelayedList>
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	200006fc 	.word	0x200006fc

08007b9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	617b      	str	r3, [r7, #20]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3318      	adds	r3, #24
 8007bca:	4619      	mov	r1, r3
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7fe fe14 	bl	80067fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f000 fa55 	bl	8008090 <prvAddCurrentTaskToDelayedList>
	}
 8007be6:	bf00      	nop
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	200006fc 	.word	0x200006fc

08007bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60fb      	str	r3, [r7, #12]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3318      	adds	r3, #24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fe43 	bl	80068b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <xTaskRemoveFromEventList+0xb0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d11d      	bne.n	8007c6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fe3a 	bl	80068b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <xTaskRemoveFromEventList+0xb4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d903      	bls.n	8007c50 <xTaskRemoveFromEventList+0x5c>
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	4a16      	ldr	r2, [pc, #88]	; (8007ca8 <xTaskRemoveFromEventList+0xb4>)
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4a13      	ldr	r2, [pc, #76]	; (8007cac <xTaskRemoveFromEventList+0xb8>)
 8007c5e:	441a      	add	r2, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7fe fdc7 	bl	80067fa <vListInsertEnd>
 8007c6c:	e005      	b.n	8007c7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3318      	adds	r3, #24
 8007c72:	4619      	mov	r1, r3
 8007c74:	480e      	ldr	r0, [pc, #56]	; (8007cb0 <xTaskRemoveFromEventList+0xbc>)
 8007c76:	f7fe fdc0 	bl	80067fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <xTaskRemoveFromEventList+0xc0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d905      	bls.n	8007c94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <xTaskRemoveFromEventList+0xc4>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e001      	b.n	8007c98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c98:	697b      	ldr	r3, [r7, #20]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000bf8 	.word	0x20000bf8
 8007ca8:	20000bd8 	.word	0x20000bd8
 8007cac:	20000700 	.word	0x20000700
 8007cb0:	20000b90 	.word	0x20000b90
 8007cb4:	200006fc 	.word	0x200006fc
 8007cb8:	20000be4 	.word	0x20000be4

08007cbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cc4:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <vTaskInternalSetTimeOutState+0x24>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <vTaskInternalSetTimeOutState+0x28>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	605a      	str	r2, [r3, #4]
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bc80      	pop	{r7}
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	20000be8 	.word	0x20000be8
 8007ce4:	20000bd4 	.word	0x20000bd4

08007ce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10a      	bne.n	8007d0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	613b      	str	r3, [r7, #16]
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	60fb      	str	r3, [r7, #12]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d2a:	f000 fe07 	bl	800893c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d2e:	4b1d      	ldr	r3, [pc, #116]	; (8007da4 <xTaskCheckForTimeOut+0xbc>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d102      	bne.n	8007d4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61fb      	str	r3, [r7, #28]
 8007d4c:	e023      	b.n	8007d96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <xTaskCheckForTimeOut+0xc0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d007      	beq.n	8007d6a <xTaskCheckForTimeOut+0x82>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d302      	bcc.n	8007d6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	e015      	b.n	8007d96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d20b      	bcs.n	8007d8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ff9b 	bl	8007cbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	e004      	b.n	8007d96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d96:	f000 fe01 	bl	800899c <vPortExitCritical>

	return xReturn;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000bd4 	.word	0x20000bd4
 8007da8:	20000be8 	.word	0x20000be8

08007dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007db0:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <vTaskMissedYield+0x14>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
}
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000be4 	.word	0x20000be4

08007dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dcc:	f000 f852 	bl	8007e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dd0:	4b06      	ldr	r3, [pc, #24]	; (8007dec <prvIdleTask+0x28>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d9f9      	bls.n	8007dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <prvIdleTask+0x2c>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007de8:	e7f0      	b.n	8007dcc <prvIdleTask+0x8>
 8007dea:	bf00      	nop
 8007dec:	20000700 	.word	0x20000700
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	e00c      	b.n	8007e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <prvInitialiseTaskLists+0x60>)
 8007e0c:	4413      	add	r3, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fcc8 	bl	80067a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3301      	adds	r3, #1
 8007e18:	607b      	str	r3, [r7, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b37      	cmp	r3, #55	; 0x37
 8007e1e:	d9ef      	bls.n	8007e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e20:	480d      	ldr	r0, [pc, #52]	; (8007e58 <prvInitialiseTaskLists+0x64>)
 8007e22:	f7fe fcbf 	bl	80067a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e26:	480d      	ldr	r0, [pc, #52]	; (8007e5c <prvInitialiseTaskLists+0x68>)
 8007e28:	f7fe fcbc 	bl	80067a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e2c:	480c      	ldr	r0, [pc, #48]	; (8007e60 <prvInitialiseTaskLists+0x6c>)
 8007e2e:	f7fe fcb9 	bl	80067a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e32:	480c      	ldr	r0, [pc, #48]	; (8007e64 <prvInitialiseTaskLists+0x70>)
 8007e34:	f7fe fcb6 	bl	80067a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e38:	480b      	ldr	r0, [pc, #44]	; (8007e68 <prvInitialiseTaskLists+0x74>)
 8007e3a:	f7fe fcb3 	bl	80067a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <prvInitialiseTaskLists+0x78>)
 8007e40:	4a05      	ldr	r2, [pc, #20]	; (8007e58 <prvInitialiseTaskLists+0x64>)
 8007e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <prvInitialiseTaskLists+0x7c>)
 8007e46:	4a05      	ldr	r2, [pc, #20]	; (8007e5c <prvInitialiseTaskLists+0x68>)
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20000700 	.word	0x20000700
 8007e58:	20000b60 	.word	0x20000b60
 8007e5c:	20000b74 	.word	0x20000b74
 8007e60:	20000b90 	.word	0x20000b90
 8007e64:	20000ba4 	.word	0x20000ba4
 8007e68:	20000bbc 	.word	0x20000bbc
 8007e6c:	20000b88 	.word	0x20000b88
 8007e70:	20000b8c 	.word	0x20000b8c

08007e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e7a:	e019      	b.n	8007eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e7c:	f000 fd5e 	bl	800893c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e80:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <prvCheckTasksWaitingTermination+0x50>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe fd0f 	bl	80068b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e92:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <prvCheckTasksWaitingTermination+0x54>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	4a0b      	ldr	r2, [pc, #44]	; (8007ec8 <prvCheckTasksWaitingTermination+0x54>)
 8007e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ea6:	f000 fd79 	bl	800899c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f810 	bl	8007ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e1      	bne.n	8007e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000ba4 	.word	0x20000ba4
 8007ec8:	20000bd0 	.word	0x20000bd0
 8007ecc:	20000bb8 	.word	0x20000bb8

08007ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d108      	bne.n	8007ef4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 feec 	bl	8008cc4 <vPortFree>
				vPortFree( pxTCB );
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fee9 	bl	8008cc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ef2:	e018      	b.n	8007f26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d103      	bne.n	8007f06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fee0 	bl	8008cc4 <vPortFree>
	}
 8007f04:	e00f      	b.n	8007f26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f0c:	2b02      	cmp	r3, #2
 8007f0e:	d00a      	beq.n	8007f26 <prvDeleteTCB+0x56>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	60fb      	str	r3, [r7, #12]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <prvDeleteTCB+0x54>
	}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f36:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <prvResetNextTaskUnblockTime+0x40>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d101      	bne.n	8007f44 <prvResetNextTaskUnblockTime+0x14>
 8007f40:	2301      	movs	r3, #1
 8007f42:	e000      	b.n	8007f46 <prvResetNextTaskUnblockTime+0x16>
 8007f44:	2300      	movs	r3, #0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d004      	beq.n	8007f54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <prvResetNextTaskUnblockTime+0x44>)
 8007f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f52:	e008      	b.n	8007f66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f54:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <prvResetNextTaskUnblockTime+0x40>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <prvResetNextTaskUnblockTime+0x44>)
 8007f64:	6013      	str	r3, [r2, #0]
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr
 8007f70:	20000b88 	.word	0x20000b88
 8007f74:	20000bf0 	.word	0x20000bf0

08007f78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <xTaskGetSchedulerState+0x34>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f86:	2301      	movs	r3, #1
 8007f88:	607b      	str	r3, [r7, #4]
 8007f8a:	e008      	b.n	8007f9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f8c:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <xTaskGetSchedulerState+0x38>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f94:	2302      	movs	r3, #2
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	e001      	b.n	8007f9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f9e:	687b      	ldr	r3, [r7, #4]
	}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	20000bdc 	.word	0x20000bdc
 8007fb0:	20000bf8 	.word	0x20000bf8

08007fb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d056      	beq.n	8008078 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fca:	4b2e      	ldr	r3, [pc, #184]	; (8008084 <xTaskPriorityDisinherit+0xd0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d00a      	beq.n	8007fea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	60fb      	str	r3, [r7, #12]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60bb      	str	r3, [r7, #8]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	1e5a      	subs	r2, r3, #1
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801a:	429a      	cmp	r2, r3
 800801c:	d02c      	beq.n	8008078 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008022:	2b00      	cmp	r3, #0
 8008024:	d128      	bne.n	8008078 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3304      	adds	r3, #4
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fc40 	bl	80068b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <xTaskPriorityDisinherit+0xd4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d903      	bls.n	8008058 <xTaskPriorityDisinherit+0xa4>
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	4a0c      	ldr	r2, [pc, #48]	; (8008088 <xTaskPriorityDisinherit+0xd4>)
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	4613      	mov	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4a09      	ldr	r2, [pc, #36]	; (800808c <xTaskPriorityDisinherit+0xd8>)
 8008066:	441a      	add	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7fe fbc3 	bl	80067fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008074:	2301      	movs	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008078:	697b      	ldr	r3, [r7, #20]
	}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	200006fc 	.word	0x200006fc
 8008088:	20000bd8 	.word	0x20000bd8
 800808c:	20000700 	.word	0x20000700

08008090 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800809a:	4b21      	ldr	r3, [pc, #132]	; (8008120 <prvAddCurrentTaskToDelayedList+0x90>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080a0:	4b20      	ldr	r3, [pc, #128]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fc02 	bl	80068b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d10a      	bne.n	80080ca <prvAddCurrentTaskToDelayedList+0x3a>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ba:	4b1a      	ldr	r3, [pc, #104]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4819      	ldr	r0, [pc, #100]	; (8008128 <prvAddCurrentTaskToDelayedList+0x98>)
 80080c4:	f7fe fb99 	bl	80067fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080c8:	e026      	b.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d209      	bcs.n	80080f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e2:	4b12      	ldr	r3, [pc, #72]	; (800812c <prvAddCurrentTaskToDelayedList+0x9c>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7fe fba6 	bl	8006840 <vListInsert>
}
 80080f4:	e010      	b.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f6:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f7fe fb9c 	bl	8006840 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <prvAddCurrentTaskToDelayedList+0xa4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	d202      	bcs.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008112:	4a08      	ldr	r2, [pc, #32]	; (8008134 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6013      	str	r3, [r2, #0]
}
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000bd4 	.word	0x20000bd4
 8008124:	200006fc 	.word	0x200006fc
 8008128:	20000bbc 	.word	0x20000bbc
 800812c:	20000b8c 	.word	0x20000b8c
 8008130:	20000b88 	.word	0x20000b88
 8008134:	20000bf0 	.word	0x20000bf0

08008138 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008142:	f000 facb 	bl	80086dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008146:	4b1c      	ldr	r3, [pc, #112]	; (80081b8 <xTimerCreateTimerTask+0x80>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d021      	beq.n	8008192 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008156:	1d3a      	adds	r2, r7, #4
 8008158:	f107 0108 	add.w	r1, r7, #8
 800815c:	f107 030c 	add.w	r3, r7, #12
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fb05 	bl	8006770 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	9202      	str	r2, [sp, #8]
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	2302      	movs	r3, #2
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	460a      	mov	r2, r1
 8008178:	4910      	ldr	r1, [pc, #64]	; (80081bc <xTimerCreateTimerTask+0x84>)
 800817a:	4811      	ldr	r0, [pc, #68]	; (80081c0 <xTimerCreateTimerTask+0x88>)
 800817c:	f7ff f8e4 	bl	8007348 <xTaskCreateStatic>
 8008180:	4603      	mov	r3, r0
 8008182:	4a10      	ldr	r2, [pc, #64]	; (80081c4 <xTimerCreateTimerTask+0x8c>)
 8008184:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008186:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <xTimerCreateTimerTask+0x8c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800818e:	2301      	movs	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	613b      	str	r3, [r7, #16]
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081ae:	697b      	ldr	r3, [r7, #20]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000c2c 	.word	0x20000c2c
 80081bc:	08009074 	.word	0x08009074
 80081c0:	080082e5 	.word	0x080082e5
 80081c4:	20000c30 	.word	0x20000c30

080081c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	623b      	str	r3, [r7, #32]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081f6:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <xTimerGenericCommand+0x98>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d02a      	beq.n	8008254 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b05      	cmp	r3, #5
 800820e:	dc18      	bgt.n	8008242 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008210:	f7ff feb2 	bl	8007f78 <xTaskGetSchedulerState>
 8008214:	4603      	mov	r3, r0
 8008216:	2b02      	cmp	r3, #2
 8008218:	d109      	bne.n	800822e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800821a:	4b11      	ldr	r3, [pc, #68]	; (8008260 <xTimerGenericCommand+0x98>)
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f107 0110 	add.w	r1, r7, #16
 8008222:	2300      	movs	r3, #0
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	f7fe fcad 	bl	8006b84 <xQueueGenericSend>
 800822a:	6278      	str	r0, [r7, #36]	; 0x24
 800822c:	e012      	b.n	8008254 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800822e:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <xTimerGenericCommand+0x98>)
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f107 0110 	add.w	r1, r7, #16
 8008236:	2300      	movs	r3, #0
 8008238:	2200      	movs	r2, #0
 800823a:	f7fe fca3 	bl	8006b84 <xQueueGenericSend>
 800823e:	6278      	str	r0, [r7, #36]	; 0x24
 8008240:	e008      	b.n	8008254 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008242:	4b07      	ldr	r3, [pc, #28]	; (8008260 <xTimerGenericCommand+0x98>)
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f107 0110 	add.w	r1, r7, #16
 800824a:	2300      	movs	r3, #0
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	f7fe fd97 	bl	8006d80 <xQueueGenericSendFromISR>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008256:	4618      	mov	r0, r3
 8008258:	3728      	adds	r7, #40	; 0x28
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	20000c2c 	.word	0x20000c2c

08008264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af02      	add	r7, sp, #8
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800826e:	4b1c      	ldr	r3, [pc, #112]	; (80082e0 <prvProcessExpiredTimer+0x7c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe fb17 	bl	80068b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d122      	bne.n	80082d0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	18d1      	adds	r1, r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	6978      	ldr	r0, [r7, #20]
 8008298:	f000 f8c8 	bl	800842c <prvInsertTimerInActiveList>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082a2:	2300      	movs	r3, #0
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	2100      	movs	r1, #0
 80082ac:	6978      	ldr	r0, [r7, #20]
 80082ae:	f7ff ff8b 	bl	80081c8 <xTimerGenericCommand>
 80082b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10a      	bne.n	80082d0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	60fb      	str	r3, [r7, #12]
}
 80082cc:	bf00      	nop
 80082ce:	e7fe      	b.n	80082ce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	6978      	ldr	r0, [r7, #20]
 80082d6:	4798      	blx	r3
}
 80082d8:	bf00      	nop
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	20000c24 	.word	0x20000c24

080082e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082ec:	f107 0308 	add.w	r3, r7, #8
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f857 	bl	80083a4 <prvGetNextExpireTime>
 80082f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4619      	mov	r1, r3
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 f803 	bl	8008308 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008302:	f000 f8d5 	bl	80084b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008306:	e7f1      	b.n	80082ec <prvTimerTask+0x8>

08008308 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008312:	f7ff fa4b 	bl	80077ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008316:	f107 0308 	add.w	r3, r7, #8
 800831a:	4618      	mov	r0, r3
 800831c:	f000 f866 	bl	80083ec <prvSampleTimeNow>
 8008320:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d130      	bne.n	800838a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <prvProcessTimerOrBlockTask+0x3c>
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	429a      	cmp	r2, r3
 8008334:	d806      	bhi.n	8008344 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008336:	f7ff fa47 	bl	80077c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800833a:	68f9      	ldr	r1, [r7, #12]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f7ff ff91 	bl	8008264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008342:	e024      	b.n	800838e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d008      	beq.n	800835c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800834a:	4b13      	ldr	r3, [pc, #76]	; (8008398 <prvProcessTimerOrBlockTask+0x90>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	bf0c      	ite	eq
 8008354:	2301      	moveq	r3, #1
 8008356:	2300      	movne	r3, #0
 8008358:	b2db      	uxtb	r3, r3
 800835a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800835c:	4b0f      	ldr	r3, [pc, #60]	; (800839c <prvProcessTimerOrBlockTask+0x94>)
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	4619      	mov	r1, r3
 800836a:	f7fe ffb9 	bl	80072e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800836e:	f7ff fa2b 	bl	80077c8 <xTaskResumeAll>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10a      	bne.n	800838e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008378:	4b09      	ldr	r3, [pc, #36]	; (80083a0 <prvProcessTimerOrBlockTask+0x98>)
 800837a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	f3bf 8f6f 	isb	sy
}
 8008388:	e001      	b.n	800838e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800838a:	f7ff fa1d 	bl	80077c8 <xTaskResumeAll>
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000c28 	.word	0x20000c28
 800839c:	20000c2c 	.word	0x20000c2c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083ac:	4b0e      	ldr	r3, [pc, #56]	; (80083e8 <prvGetNextExpireTime+0x44>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bf0c      	ite	eq
 80083b6:	2301      	moveq	r3, #1
 80083b8:	2300      	movne	r3, #0
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	461a      	mov	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d105      	bne.n	80083d6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083ca:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <prvGetNextExpireTime+0x44>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	e001      	b.n	80083da <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083da:	68fb      	ldr	r3, [r7, #12]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3714      	adds	r7, #20
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	20000c24 	.word	0x20000c24

080083ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083f4:	f7ff fa86 	bl	8007904 <xTaskGetTickCount>
 80083f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083fa:	4b0b      	ldr	r3, [pc, #44]	; (8008428 <prvSampleTimeNow+0x3c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	429a      	cmp	r2, r3
 8008402:	d205      	bcs.n	8008410 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008404:	f000 f908 	bl	8008618 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e002      	b.n	8008416 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008416:	4a04      	ldr	r2, [pc, #16]	; (8008428 <prvSampleTimeNow+0x3c>)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800841c:	68fb      	ldr	r3, [r7, #12]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000c34 	.word	0x20000c34

0800842c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800843a:	2300      	movs	r3, #0
 800843c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	429a      	cmp	r2, r3
 8008450:	d812      	bhi.n	8008478 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	1ad2      	subs	r2, r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	699b      	ldr	r3, [r3, #24]
 800845c:	429a      	cmp	r2, r3
 800845e:	d302      	bcc.n	8008466 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008460:	2301      	movs	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e01b      	b.n	800849e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008466:	4b10      	ldr	r3, [pc, #64]	; (80084a8 <prvInsertTimerInActiveList+0x7c>)
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3304      	adds	r3, #4
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fe f9e5 	bl	8006840 <vListInsert>
 8008476:	e012      	b.n	800849e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	429a      	cmp	r2, r3
 800847e:	d206      	bcs.n	800848e <prvInsertTimerInActiveList+0x62>
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d302      	bcc.n	800848e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008488:	2301      	movs	r3, #1
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	e007      	b.n	800849e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800848e:	4b07      	ldr	r3, [pc, #28]	; (80084ac <prvInsertTimerInActiveList+0x80>)
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3304      	adds	r3, #4
 8008496:	4619      	mov	r1, r3
 8008498:	4610      	mov	r0, r2
 800849a:	f7fe f9d1 	bl	8006840 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800849e:	697b      	ldr	r3, [r7, #20]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20000c28 	.word	0x20000c28
 80084ac:	20000c24 	.word	0x20000c24

080084b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08e      	sub	sp, #56	; 0x38
 80084b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084b6:	e09d      	b.n	80085f4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da18      	bge.n	80084f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084be:	1d3b      	adds	r3, r7, #4
 80084c0:	3304      	adds	r3, #4
 80084c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	61fb      	str	r3, [r7, #28]
}
 80084dc:	bf00      	nop
 80084de:	e7fe      	b.n	80084de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e6:	6850      	ldr	r0, [r2, #4]
 80084e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ea:	6892      	ldr	r2, [r2, #8]
 80084ec:	4611      	mov	r1, r2
 80084ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	db7d      	blt.n	80085f2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008504:	3304      	adds	r3, #4
 8008506:	4618      	mov	r0, r3
 8008508:	f7fe f9d2 	bl	80068b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800850c:	463b      	mov	r3, r7
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff ff6c 	bl	80083ec <prvSampleTimeNow>
 8008514:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b09      	cmp	r3, #9
 800851a:	d86b      	bhi.n	80085f4 <prvProcessReceivedCommands+0x144>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <prvProcessReceivedCommands+0x74>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	0800854d 	.word	0x0800854d
 8008528:	0800854d 	.word	0x0800854d
 800852c:	0800854d 	.word	0x0800854d
 8008530:	080085f5 	.word	0x080085f5
 8008534:	080085a9 	.word	0x080085a9
 8008538:	080085e1 	.word	0x080085e1
 800853c:	0800854d 	.word	0x0800854d
 8008540:	0800854d 	.word	0x0800854d
 8008544:	080085f5 	.word	0x080085f5
 8008548:	080085a9 	.word	0x080085a9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	18d1      	adds	r1, r2, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855a:	f7ff ff67 	bl	800842c <prvInsertTimerInActiveList>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d047      	beq.n	80085f4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800856a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	69db      	ldr	r3, [r3, #28]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d13f      	bne.n	80085f4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	441a      	add	r2, r3
 800857c:	2300      	movs	r3, #0
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	2300      	movs	r3, #0
 8008582:	2100      	movs	r1, #0
 8008584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008586:	f7ff fe1f 	bl	80081c8 <xTimerGenericCommand>
 800858a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800858c:	6a3b      	ldr	r3, [r7, #32]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d130      	bne.n	80085f4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	61bb      	str	r3, [r7, #24]
}
 80085a4:	bf00      	nop
 80085a6:	e7fe      	b.n	80085a6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10a      	bne.n	80085cc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	617b      	str	r3, [r7, #20]
}
 80085c8:	bf00      	nop
 80085ca:	e7fe      	b.n	80085ca <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	699a      	ldr	r2, [r3, #24]
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	18d1      	adds	r1, r2, r3
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085da:	f7ff ff27 	bl	800842c <prvInsertTimerInActiveList>
					break;
 80085de:	e009      	b.n	80085f4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d104      	bne.n	80085f4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80085ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ec:	f000 fb6a 	bl	8008cc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085f0:	e000      	b.n	80085f4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80085f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <prvProcessReceivedCommands+0x164>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	1d39      	adds	r1, r7, #4
 80085fa:	2200      	movs	r2, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fe fc57 	bl	8006eb0 <xQueueReceive>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	f47f af57 	bne.w	80084b8 <prvProcessReceivedCommands+0x8>
	}
}
 800860a:	bf00      	nop
 800860c:	bf00      	nop
 800860e:	3730      	adds	r7, #48	; 0x30
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20000c2c 	.word	0x20000c2c

08008618 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b088      	sub	sp, #32
 800861c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800861e:	e045      	b.n	80086ac <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008620:	4b2c      	ldr	r3, [pc, #176]	; (80086d4 <prvSwitchTimerLists+0xbc>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800862a:	4b2a      	ldr	r3, [pc, #168]	; (80086d4 <prvSwitchTimerLists+0xbc>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3304      	adds	r3, #4
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe f939 	bl	80068b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d12e      	bne.n	80086ac <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4413      	add	r3, r2
 8008656:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	429a      	cmp	r2, r3
 800865e:	d90e      	bls.n	800867e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800866c:	4b19      	ldr	r3, [pc, #100]	; (80086d4 <prvSwitchTimerLists+0xbc>)
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3304      	adds	r3, #4
 8008674:	4619      	mov	r1, r3
 8008676:	4610      	mov	r0, r2
 8008678:	f7fe f8e2 	bl	8006840 <vListInsert>
 800867c:	e016      	b.n	80086ac <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800867e:	2300      	movs	r3, #0
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	2300      	movs	r3, #0
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	2100      	movs	r1, #0
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f7ff fd9d 	bl	80081c8 <xTimerGenericCommand>
 800868e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <prvSwitchTimerLists+0x94>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	603b      	str	r3, [r7, #0]
}
 80086a8:	bf00      	nop
 80086aa:	e7fe      	b.n	80086aa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ac:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <prvSwitchTimerLists+0xbc>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1b4      	bne.n	8008620 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086b6:	4b07      	ldr	r3, [pc, #28]	; (80086d4 <prvSwitchTimerLists+0xbc>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086bc:	4b06      	ldr	r3, [pc, #24]	; (80086d8 <prvSwitchTimerLists+0xc0>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a04      	ldr	r2, [pc, #16]	; (80086d4 <prvSwitchTimerLists+0xbc>)
 80086c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086c4:	4a04      	ldr	r2, [pc, #16]	; (80086d8 <prvSwitchTimerLists+0xc0>)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	6013      	str	r3, [r2, #0]
}
 80086ca:	bf00      	nop
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000c24 	.word	0x20000c24
 80086d8:	20000c28 	.word	0x20000c28

080086dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086e2:	f000 f92b 	bl	800893c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086e6:	4b15      	ldr	r3, [pc, #84]	; (800873c <prvCheckForValidListAndQueue+0x60>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d120      	bne.n	8008730 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086ee:	4814      	ldr	r0, [pc, #80]	; (8008740 <prvCheckForValidListAndQueue+0x64>)
 80086f0:	f7fe f858 	bl	80067a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80086f4:	4813      	ldr	r0, [pc, #76]	; (8008744 <prvCheckForValidListAndQueue+0x68>)
 80086f6:	f7fe f855 	bl	80067a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80086fa:	4b13      	ldr	r3, [pc, #76]	; (8008748 <prvCheckForValidListAndQueue+0x6c>)
 80086fc:	4a10      	ldr	r2, [pc, #64]	; (8008740 <prvCheckForValidListAndQueue+0x64>)
 80086fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008700:	4b12      	ldr	r3, [pc, #72]	; (800874c <prvCheckForValidListAndQueue+0x70>)
 8008702:	4a10      	ldr	r2, [pc, #64]	; (8008744 <prvCheckForValidListAndQueue+0x68>)
 8008704:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008706:	2300      	movs	r3, #0
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	4b11      	ldr	r3, [pc, #68]	; (8008750 <prvCheckForValidListAndQueue+0x74>)
 800870c:	4a11      	ldr	r2, [pc, #68]	; (8008754 <prvCheckForValidListAndQueue+0x78>)
 800870e:	2110      	movs	r1, #16
 8008710:	200a      	movs	r0, #10
 8008712:	f7fe f95f 	bl	80069d4 <xQueueGenericCreateStatic>
 8008716:	4603      	mov	r3, r0
 8008718:	4a08      	ldr	r2, [pc, #32]	; (800873c <prvCheckForValidListAndQueue+0x60>)
 800871a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800871c:	4b07      	ldr	r3, [pc, #28]	; (800873c <prvCheckForValidListAndQueue+0x60>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <prvCheckForValidListAndQueue+0x60>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	490b      	ldr	r1, [pc, #44]	; (8008758 <prvCheckForValidListAndQueue+0x7c>)
 800872a:	4618      	mov	r0, r3
 800872c:	f7fe fdb0 	bl	8007290 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008730:	f000 f934 	bl	800899c <vPortExitCritical>
}
 8008734:	bf00      	nop
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000c2c 	.word	0x20000c2c
 8008740:	20000bfc 	.word	0x20000bfc
 8008744:	20000c10 	.word	0x20000c10
 8008748:	20000c24 	.word	0x20000c24
 800874c:	20000c28 	.word	0x20000c28
 8008750:	20000cd8 	.word	0x20000cd8
 8008754:	20000c38 	.word	0x20000c38
 8008758:	0800907c 	.word	0x0800907c

0800875c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3b04      	subs	r3, #4
 800876c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3b04      	subs	r3, #4
 800877a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f023 0201 	bic.w	r2, r3, #1
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3b04      	subs	r3, #4
 800878a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800878c:	4a08      	ldr	r2, [pc, #32]	; (80087b0 <pxPortInitialiseStack+0x54>)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3b14      	subs	r3, #20
 8008796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3b20      	subs	r3, #32
 80087a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087a4:	68fb      	ldr	r3, [r7, #12]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr
 80087b0:	080087b5 	.word	0x080087b5

080087b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087be:	4b12      	ldr	r3, [pc, #72]	; (8008808 <prvTaskExitError+0x54>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c6:	d00a      	beq.n	80087de <prvTaskExitError+0x2a>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	60fb      	str	r3, [r7, #12]
}
 80087da:	bf00      	nop
 80087dc:	e7fe      	b.n	80087dc <prvTaskExitError+0x28>
	__asm volatile
 80087de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	60bb      	str	r3, [r7, #8]
}
 80087f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087f2:	bf00      	nop
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0fc      	beq.n	80087f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	2000000c 	.word	0x2000000c
 800880c:	00000000 	.word	0x00000000

08008810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008810:	4b07      	ldr	r3, [pc, #28]	; (8008830 <pxCurrentTCBConst2>)
 8008812:	6819      	ldr	r1, [r3, #0]
 8008814:	6808      	ldr	r0, [r1, #0]
 8008816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800881a:	f380 8809 	msr	PSP, r0
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f04f 0000 	mov.w	r0, #0
 8008826:	f380 8811 	msr	BASEPRI, r0
 800882a:	f04e 0e0d 	orr.w	lr, lr, #13
 800882e:	4770      	bx	lr

08008830 <pxCurrentTCBConst2>:
 8008830:	200006fc 	.word	0x200006fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop

08008838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008838:	4806      	ldr	r0, [pc, #24]	; (8008854 <prvPortStartFirstTask+0x1c>)
 800883a:	6800      	ldr	r0, [r0, #0]
 800883c:	6800      	ldr	r0, [r0, #0]
 800883e:	f380 8808 	msr	MSP, r0
 8008842:	b662      	cpsie	i
 8008844:	b661      	cpsie	f
 8008846:	f3bf 8f4f 	dsb	sy
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	df00      	svc	0
 8008850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008852:	bf00      	nop
 8008854:	e000ed08 	.word	0xe000ed08

08008858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800885e:	4b32      	ldr	r3, [pc, #200]	; (8008928 <xPortStartScheduler+0xd0>)
 8008860:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	22ff      	movs	r2, #255	; 0xff
 800886e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	b2db      	uxtb	r3, r3
 800887c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008880:	b2da      	uxtb	r2, r3
 8008882:	4b2a      	ldr	r3, [pc, #168]	; (800892c <xPortStartScheduler+0xd4>)
 8008884:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008886:	4b2a      	ldr	r3, [pc, #168]	; (8008930 <xPortStartScheduler+0xd8>)
 8008888:	2207      	movs	r2, #7
 800888a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800888c:	e009      	b.n	80088a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800888e:	4b28      	ldr	r3, [pc, #160]	; (8008930 <xPortStartScheduler+0xd8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	3b01      	subs	r3, #1
 8008894:	4a26      	ldr	r2, [pc, #152]	; (8008930 <xPortStartScheduler+0xd8>)
 8008896:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008898:	78fb      	ldrb	r3, [r7, #3]
 800889a:	b2db      	uxtb	r3, r3
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088aa:	2b80      	cmp	r3, #128	; 0x80
 80088ac:	d0ef      	beq.n	800888e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088ae:	4b20      	ldr	r3, [pc, #128]	; (8008930 <xPortStartScheduler+0xd8>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f1c3 0307 	rsb	r3, r3, #7
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d00a      	beq.n	80088d0 <xPortStartScheduler+0x78>
	__asm volatile
 80088ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	60bb      	str	r3, [r7, #8]
}
 80088cc:	bf00      	nop
 80088ce:	e7fe      	b.n	80088ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088d0:	4b17      	ldr	r3, [pc, #92]	; (8008930 <xPortStartScheduler+0xd8>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	4a16      	ldr	r2, [pc, #88]	; (8008930 <xPortStartScheduler+0xd8>)
 80088d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088da:	4b15      	ldr	r3, [pc, #84]	; (8008930 <xPortStartScheduler+0xd8>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088e2:	4a13      	ldr	r2, [pc, #76]	; (8008930 <xPortStartScheduler+0xd8>)
 80088e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <xPortStartScheduler+0xdc>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a10      	ldr	r2, [pc, #64]	; (8008934 <xPortStartScheduler+0xdc>)
 80088f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088fa:	4b0e      	ldr	r3, [pc, #56]	; (8008934 <xPortStartScheduler+0xdc>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a0d      	ldr	r2, [pc, #52]	; (8008934 <xPortStartScheduler+0xdc>)
 8008900:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008904:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008906:	f000 f8b9 	bl	8008a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800890a:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <xPortStartScheduler+0xe0>)
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008910:	f7ff ff92 	bl	8008838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008914:	f7ff f8c2 	bl	8007a9c <vTaskSwitchContext>
	prvTaskExitError();
 8008918:	f7ff ff4c 	bl	80087b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	e000e400 	.word	0xe000e400
 800892c:	20000d28 	.word	0x20000d28
 8008930:	20000d2c 	.word	0x20000d2c
 8008934:	e000ed20 	.word	0xe000ed20
 8008938:	2000000c 	.word	0x2000000c

0800893c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	607b      	str	r3, [r7, #4]
}
 8008954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008956:	4b0f      	ldr	r3, [pc, #60]	; (8008994 <vPortEnterCritical+0x58>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3301      	adds	r3, #1
 800895c:	4a0d      	ldr	r2, [pc, #52]	; (8008994 <vPortEnterCritical+0x58>)
 800895e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008960:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <vPortEnterCritical+0x58>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d10f      	bne.n	8008988 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008968:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <vPortEnterCritical+0x5c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00a      	beq.n	8008988 <vPortEnterCritical+0x4c>
	__asm volatile
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	603b      	str	r3, [r7, #0]
}
 8008984:	bf00      	nop
 8008986:	e7fe      	b.n	8008986 <vPortEnterCritical+0x4a>
	}
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	bc80      	pop	{r7}
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	2000000c 	.word	0x2000000c
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089a2:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <vPortExitCritical+0x4c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <vPortExitCritical+0x24>
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	607b      	str	r3, [r7, #4]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089c0:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <vPortExitCritical+0x4c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <vPortExitCritical+0x4c>)
 80089c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <vPortExitCritical+0x4c>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d105      	bne.n	80089de <vPortExitCritical+0x42>
 80089d2:	2300      	movs	r3, #0
 80089d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	f383 8811 	msr	BASEPRI, r3
}
 80089dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bc80      	pop	{r7}
 80089e6:	4770      	bx	lr
 80089e8:	2000000c 	.word	0x2000000c
 80089ec:	00000000 	.word	0x00000000

080089f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089f0:	f3ef 8009 	mrs	r0, PSP
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <pxCurrentTCBConst>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a00:	6010      	str	r0, [r2, #0]
 8008a02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008a06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a0a:	f380 8811 	msr	BASEPRI, r0
 8008a0e:	f7ff f845 	bl	8007a9c <vTaskSwitchContext>
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8811 	msr	BASEPRI, r0
 8008a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a1e:	6819      	ldr	r1, [r3, #0]
 8008a20:	6808      	ldr	r0, [r1, #0]
 8008a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a26:	f380 8809 	msr	PSP, r0
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	4770      	bx	lr

08008a30 <pxCurrentTCBConst>:
 8008a30:	200006fc 	.word	0x200006fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	607b      	str	r3, [r7, #4]
}
 8008a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a52:	f7fe ff65 	bl	8007920 <xTaskIncrementTick>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a5c:	4b06      	ldr	r3, [pc, #24]	; (8008a78 <SysTick_Handler+0x40>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f383 8811 	msr	BASEPRI, r3
}
 8008a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a80:	4b0a      	ldr	r3, [pc, #40]	; (8008aac <vPortSetupTimerInterrupt+0x30>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a86:	4b0a      	ldr	r3, [pc, #40]	; (8008ab0 <vPortSetupTimerInterrupt+0x34>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a8c:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <vPortSetupTimerInterrupt+0x38>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a09      	ldr	r2, [pc, #36]	; (8008ab8 <vPortSetupTimerInterrupt+0x3c>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	099b      	lsrs	r3, r3, #6
 8008a98:	4a08      	ldr	r2, [pc, #32]	; (8008abc <vPortSetupTimerInterrupt+0x40>)
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a9e:	4b03      	ldr	r3, [pc, #12]	; (8008aac <vPortSetupTimerInterrupt+0x30>)
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bc80      	pop	{r7}
 8008aaa:	4770      	bx	lr
 8008aac:	e000e010 	.word	0xe000e010
 8008ab0:	e000e018 	.word	0xe000e018
 8008ab4:	20000000 	.word	0x20000000
 8008ab8:	10624dd3 	.word	0x10624dd3
 8008abc:	e000e014 	.word	0xe000e014

08008ac0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ac6:	f3ef 8305 	mrs	r3, IPSR
 8008aca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b0f      	cmp	r3, #15
 8008ad0:	d914      	bls.n	8008afc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ad2:	4a16      	ldr	r2, [pc, #88]	; (8008b2c <vPortValidateInterruptPriority+0x6c>)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008adc:	4b14      	ldr	r3, [pc, #80]	; (8008b30 <vPortValidateInterruptPriority+0x70>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	7afa      	ldrb	r2, [r7, #11]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d20a      	bcs.n	8008afc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	607b      	str	r3, [r7, #4]
}
 8008af8:	bf00      	nop
 8008afa:	e7fe      	b.n	8008afa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008afc:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <vPortValidateInterruptPriority+0x74>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b04:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <vPortValidateInterruptPriority+0x78>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d90a      	bls.n	8008b22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	603b      	str	r3, [r7, #0]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <vPortValidateInterruptPriority+0x60>
	}
 8008b22:	bf00      	nop
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr
 8008b2c:	e000e3f0 	.word	0xe000e3f0
 8008b30:	20000d28 	.word	0x20000d28
 8008b34:	e000ed0c 	.word	0xe000ed0c
 8008b38:	20000d2c 	.word	0x20000d2c

08008b3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b08a      	sub	sp, #40	; 0x28
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b44:	2300      	movs	r3, #0
 8008b46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b48:	f7fe fe30 	bl	80077ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b4c:	4b58      	ldr	r3, [pc, #352]	; (8008cb0 <pvPortMalloc+0x174>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b54:	f000 f910 	bl	8008d78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b58:	4b56      	ldr	r3, [pc, #344]	; (8008cb4 <pvPortMalloc+0x178>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f040 808e 	bne.w	8008c82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01d      	beq.n	8008ba8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b6c:	2208      	movs	r2, #8
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d014      	beq.n	8008ba8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f023 0307 	bic.w	r3, r3, #7
 8008b84:	3308      	adds	r3, #8
 8008b86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f003 0307 	and.w	r3, r3, #7
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <pvPortMalloc+0x6c>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	617b      	str	r3, [r7, #20]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d069      	beq.n	8008c82 <pvPortMalloc+0x146>
 8008bae:	4b42      	ldr	r3, [pc, #264]	; (8008cb8 <pvPortMalloc+0x17c>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d864      	bhi.n	8008c82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bb8:	4b40      	ldr	r3, [pc, #256]	; (8008cbc <pvPortMalloc+0x180>)
 8008bba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bbc:	4b3f      	ldr	r3, [pc, #252]	; (8008cbc <pvPortMalloc+0x180>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bc2:	e004      	b.n	8008bce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d903      	bls.n	8008be0 <pvPortMalloc+0xa4>
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1f1      	bne.n	8008bc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008be0:	4b33      	ldr	r3, [pc, #204]	; (8008cb0 <pvPortMalloc+0x174>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d04b      	beq.n	8008c82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2208      	movs	r2, #8
 8008bf0:	4413      	add	r3, r2
 8008bf2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfe:	685a      	ldr	r2, [r3, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	1ad2      	subs	r2, r2, r3
 8008c04:	2308      	movs	r3, #8
 8008c06:	005b      	lsls	r3, r3, #1
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d91f      	bls.n	8008c4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4413      	add	r3, r2
 8008c12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00a      	beq.n	8008c34 <pvPortMalloc+0xf8>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	613b      	str	r3, [r7, #16]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	1ad2      	subs	r2, r2, r3
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c46:	69b8      	ldr	r0, [r7, #24]
 8008c48:	f000 f8f8 	bl	8008e3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c4c:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <pvPortMalloc+0x17c>)
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	4a18      	ldr	r2, [pc, #96]	; (8008cb8 <pvPortMalloc+0x17c>)
 8008c58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c5a:	4b17      	ldr	r3, [pc, #92]	; (8008cb8 <pvPortMalloc+0x17c>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	4b18      	ldr	r3, [pc, #96]	; (8008cc0 <pvPortMalloc+0x184>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d203      	bcs.n	8008c6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c66:	4b14      	ldr	r3, [pc, #80]	; (8008cb8 <pvPortMalloc+0x17c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a15      	ldr	r2, [pc, #84]	; (8008cc0 <pvPortMalloc+0x184>)
 8008c6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <pvPortMalloc+0x178>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	431a      	orrs	r2, r3
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c82:	f7fe fda1 	bl	80077c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00a      	beq.n	8008ca6 <pvPortMalloc+0x16a>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	60fb      	str	r3, [r7, #12]
}
 8008ca2:	bf00      	nop
 8008ca4:	e7fe      	b.n	8008ca4 <pvPortMalloc+0x168>
	return pvReturn;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3728      	adds	r7, #40	; 0x28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	200024a8 	.word	0x200024a8
 8008cb4:	200024b4 	.word	0x200024b4
 8008cb8:	200024ac 	.word	0x200024ac
 8008cbc:	200024a0 	.word	0x200024a0
 8008cc0:	200024b0 	.word	0x200024b0

08008cc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d048      	beq.n	8008d68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cd6:	2308      	movs	r3, #8
 8008cd8:	425b      	negs	r3, r3
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	4413      	add	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	4b21      	ldr	r3, [pc, #132]	; (8008d70 <vPortFree+0xac>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4013      	ands	r3, r2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10a      	bne.n	8008d08 <vPortFree+0x44>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	60fb      	str	r3, [r7, #12]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00a      	beq.n	8008d26 <vPortFree+0x62>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60bb      	str	r3, [r7, #8]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	4b11      	ldr	r3, [pc, #68]	; (8008d70 <vPortFree+0xac>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4013      	ands	r3, r2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d019      	beq.n	8008d68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d115      	bne.n	8008d68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <vPortFree+0xac>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	43db      	mvns	r3, r3
 8008d46:	401a      	ands	r2, r3
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d4c:	f7fe fd2e 	bl	80077ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <vPortFree+0xb0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4413      	add	r3, r2
 8008d5a:	4a06      	ldr	r2, [pc, #24]	; (8008d74 <vPortFree+0xb0>)
 8008d5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d5e:	6938      	ldr	r0, [r7, #16]
 8008d60:	f000 f86c 	bl	8008e3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d64:	f7fe fd30 	bl	80077c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d68:	bf00      	nop
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	200024b4 	.word	0x200024b4
 8008d74:	200024ac 	.word	0x200024ac

08008d78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d7e:	f241 7370 	movw	r3, #6000	; 0x1770
 8008d82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d84:	4b27      	ldr	r3, [pc, #156]	; (8008e24 <prvHeapInit+0xac>)
 8008d86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f003 0307 	and.w	r3, r3, #7
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00c      	beq.n	8008dac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3307      	adds	r3, #7
 8008d96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f023 0307 	bic.w	r3, r3, #7
 8008d9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	4a1f      	ldr	r2, [pc, #124]	; (8008e24 <prvHeapInit+0xac>)
 8008da8:	4413      	add	r3, r2
 8008daa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008db0:	4a1d      	ldr	r2, [pc, #116]	; (8008e28 <prvHeapInit+0xb0>)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008db6:	4b1c      	ldr	r3, [pc, #112]	; (8008e28 <prvHeapInit+0xb0>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	1a9b      	subs	r3, r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0307 	bic.w	r3, r3, #7
 8008dd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4a15      	ldr	r2, [pc, #84]	; (8008e2c <prvHeapInit+0xb4>)
 8008dd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dda:	4b14      	ldr	r3, [pc, #80]	; (8008e2c <prvHeapInit+0xb4>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2200      	movs	r2, #0
 8008de0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008de2:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <prvHeapInit+0xb4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	1ad2      	subs	r2, r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008df8:	4b0c      	ldr	r3, [pc, #48]	; (8008e2c <prvHeapInit+0xb4>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	4a0a      	ldr	r2, [pc, #40]	; (8008e30 <prvHeapInit+0xb8>)
 8008e06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <prvHeapInit+0xbc>)
 8008e0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <prvHeapInit+0xc0>)
 8008e12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e16:	601a      	str	r2, [r3, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	3714      	adds	r7, #20
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	20000d30 	.word	0x20000d30
 8008e28:	200024a0 	.word	0x200024a0
 8008e2c:	200024a8 	.word	0x200024a8
 8008e30:	200024b0 	.word	0x200024b0
 8008e34:	200024ac 	.word	0x200024ac
 8008e38:	200024b4 	.word	0x200024b4

08008e3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e44:	4b27      	ldr	r3, [pc, #156]	; (8008ee4 <prvInsertBlockIntoFreeList+0xa8>)
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	e002      	b.n	8008e50 <prvInsertBlockIntoFreeList+0x14>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d8f7      	bhi.n	8008e4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	4413      	add	r3, r2
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d108      	bne.n	8008e7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	441a      	add	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d118      	bne.n	8008ec4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	4b14      	ldr	r3, [pc, #80]	; (8008ee8 <prvInsertBlockIntoFreeList+0xac>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d00d      	beq.n	8008eba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	441a      	add	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	e008      	b.n	8008ecc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008eba:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <prvInsertBlockIntoFreeList+0xac>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	e003      	b.n	8008ecc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d002      	beq.n	8008eda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bc80      	pop	{r7}
 8008ee2:	4770      	bx	lr
 8008ee4:	200024a0 	.word	0x200024a0
 8008ee8:	200024a8 	.word	0x200024a8

08008eec <__libc_init_array>:
 8008eec:	b570      	push	{r4, r5, r6, lr}
 8008eee:	2600      	movs	r6, #0
 8008ef0:	4d0c      	ldr	r5, [pc, #48]	; (8008f24 <__libc_init_array+0x38>)
 8008ef2:	4c0d      	ldr	r4, [pc, #52]	; (8008f28 <__libc_init_array+0x3c>)
 8008ef4:	1b64      	subs	r4, r4, r5
 8008ef6:	10a4      	asrs	r4, r4, #2
 8008ef8:	42a6      	cmp	r6, r4
 8008efa:	d109      	bne.n	8008f10 <__libc_init_array+0x24>
 8008efc:	f000 f830 	bl	8008f60 <_init>
 8008f00:	2600      	movs	r6, #0
 8008f02:	4d0a      	ldr	r5, [pc, #40]	; (8008f2c <__libc_init_array+0x40>)
 8008f04:	4c0a      	ldr	r4, [pc, #40]	; (8008f30 <__libc_init_array+0x44>)
 8008f06:	1b64      	subs	r4, r4, r5
 8008f08:	10a4      	asrs	r4, r4, #2
 8008f0a:	42a6      	cmp	r6, r4
 8008f0c:	d105      	bne.n	8008f1a <__libc_init_array+0x2e>
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f14:	4798      	blx	r3
 8008f16:	3601      	adds	r6, #1
 8008f18:	e7ee      	b.n	8008ef8 <__libc_init_array+0xc>
 8008f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f1e:	4798      	blx	r3
 8008f20:	3601      	adds	r6, #1
 8008f22:	e7f2      	b.n	8008f0a <__libc_init_array+0x1e>
 8008f24:	08009228 	.word	0x08009228
 8008f28:	08009228 	.word	0x08009228
 8008f2c:	08009228 	.word	0x08009228
 8008f30:	0800922c 	.word	0x0800922c

08008f34 <memcpy>:
 8008f34:	440a      	add	r2, r1
 8008f36:	4291      	cmp	r1, r2
 8008f38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f3c:	d100      	bne.n	8008f40 <memcpy+0xc>
 8008f3e:	4770      	bx	lr
 8008f40:	b510      	push	{r4, lr}
 8008f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f46:	4291      	cmp	r1, r2
 8008f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f4c:	d1f9      	bne.n	8008f42 <memcpy+0xe>
 8008f4e:	bd10      	pop	{r4, pc}

08008f50 <memset>:
 8008f50:	4603      	mov	r3, r0
 8008f52:	4402      	add	r2, r0
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d100      	bne.n	8008f5a <memset+0xa>
 8008f58:	4770      	bx	lr
 8008f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5e:	e7f9      	b.n	8008f54 <memset+0x4>

08008f60 <_init>:
 8008f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f62:	bf00      	nop
 8008f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f66:	bc08      	pop	{r3}
 8008f68:	469e      	mov	lr, r3
 8008f6a:	4770      	bx	lr

08008f6c <_fini>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	bf00      	nop
 8008f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f72:	bc08      	pop	{r3}
 8008f74:	469e      	mov	lr, r3
 8008f76:	4770      	bx	lr
