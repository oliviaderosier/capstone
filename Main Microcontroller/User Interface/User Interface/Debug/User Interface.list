
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08007d34  08007d34  00017d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f74  08007f74  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007f74  08007f74  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f74  08007f74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f78  08007f78  00017f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002504  20000010  08007f8c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002514  08007f8c  00022514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017891  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e54  00000000  00000000  000378ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c8  00000000  00000000  0003a720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001270  00000000  00000000  0003bae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018282  00000000  00000000  0003cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fff8  00000000  00000000  00054fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092f15  00000000  00000000  00064fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005228  00000000  00000000  000f7f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d1c 	.word	0x08007d1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08007d1c 	.word	0x08007d1c

08000150 <letter>:
 */

#include "Letters.h"

void letter(char L)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
	if(L == ':')
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	2b3a      	cmp	r3, #58	; 0x3a
 800015e:	d13b      	bne.n	80001d8 <letter+0x88>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48d5      	ldr	r0, [pc, #852]	; (80004bc <letter+0x36c>)
 8000168:	f003 fcdf 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//:
 800016c:	2200      	movs	r2, #0
 800016e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000172:	48d3      	ldr	r0, [pc, #844]	; (80004c0 <letter+0x370>)
 8000174:	f003 fcd9 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000178:	2201      	movs	r2, #1
 800017a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800017e:	48d0      	ldr	r0, [pc, #832]	; (80004c0 <letter+0x370>)
 8000180:	f003 fcd3 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000184:	2200      	movs	r2, #0
 8000186:	2140      	movs	r1, #64	; 0x40
 8000188:	48cd      	ldr	r0, [pc, #820]	; (80004c0 <letter+0x370>)
 800018a:	f003 fcce 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800018e:	2201      	movs	r2, #1
 8000190:	2180      	movs	r1, #128	; 0x80
 8000192:	48cb      	ldr	r0, [pc, #812]	; (80004c0 <letter+0x370>)
 8000194:	f003 fcc9 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000198:	2201      	movs	r2, #1
 800019a:	2180      	movs	r1, #128	; 0x80
 800019c:	48c9      	ldr	r0, [pc, #804]	; (80004c4 <letter+0x374>)
 800019e:	f003 fcc4 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a8:	48c6      	ldr	r0, [pc, #792]	; (80004c4 <letter+0x374>)
 80001aa:	f003 fcbe 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b4:	48c3      	ldr	r0, [pc, #780]	; (80004c4 <letter+0x374>)
 80001b6:	f003 fcb8 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c0:	48c0      	ldr	r0, [pc, #768]	; (80004c4 <letter+0x374>)
 80001c2:	f003 fcb2 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001cc:	48bb      	ldr	r0, [pc, #748]	; (80004bc <letter+0x36c>)
 80001ce:	f003 fcac 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80001d2:	2002      	movs	r0, #2
 80001d4:	f003 fa36 	bl	8003644 <HAL_Delay>
	}
	if(L == '-')
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	2b2d      	cmp	r3, #45	; 0x2d
 80001dc:	d13b      	bne.n	8000256 <letter+0x106>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e4:	48b5      	ldr	r0, [pc, #724]	; (80004bc <letter+0x36c>)
 80001e6:	f003 fca0 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//-
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001f0:	48b3      	ldr	r0, [pc, #716]	; (80004c0 <letter+0x370>)
 80001f2:	f003 fc9a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	48b0      	ldr	r0, [pc, #704]	; (80004c0 <letter+0x370>)
 80001fe:	f003 fc94 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000202:	2201      	movs	r2, #1
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	48ae      	ldr	r0, [pc, #696]	; (80004c0 <letter+0x370>)
 8000208:	f003 fc8f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800020c:	2201      	movs	r2, #1
 800020e:	2180      	movs	r1, #128	; 0x80
 8000210:	48ab      	ldr	r0, [pc, #684]	; (80004c0 <letter+0x370>)
 8000212:	f003 fc8a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000216:	2200      	movs	r2, #0
 8000218:	2180      	movs	r1, #128	; 0x80
 800021a:	48aa      	ldr	r0, [pc, #680]	; (80004c4 <letter+0x374>)
 800021c:	f003 fc85 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000226:	48a7      	ldr	r0, [pc, #668]	; (80004c4 <letter+0x374>)
 8000228:	f003 fc7f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800022c:	2200      	movs	r2, #0
 800022e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000232:	48a4      	ldr	r0, [pc, #656]	; (80004c4 <letter+0x374>)
 8000234:	f003 fc79 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023e:	48a1      	ldr	r0, [pc, #644]	; (80004c4 <letter+0x374>)
 8000240:	f003 fc73 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	489c      	ldr	r0, [pc, #624]	; (80004bc <letter+0x36c>)
 800024c:	f003 fc6d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000250:	2002      	movs	r0, #2
 8000252:	f003 f9f7 	bl	8003644 <HAL_Delay>
	}
	if(L == ' ')
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	2b20      	cmp	r3, #32
 800025a:	d13b      	bne.n	80002d4 <letter+0x184>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000262:	4896      	ldr	r0, [pc, #600]	; (80004bc <letter+0x36c>)
 8000264:	f003 fc61 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//space
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800026e:	4894      	ldr	r0, [pc, #592]	; (80004c0 <letter+0x370>)
 8000270:	f003 fc5b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027a:	4891      	ldr	r0, [pc, #580]	; (80004c0 <letter+0x370>)
 800027c:	f003 fc55 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000280:	2200      	movs	r2, #0
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	488e      	ldr	r0, [pc, #568]	; (80004c0 <letter+0x370>)
 8000286:	f003 fc50 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800028a:	2200      	movs	r2, #0
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	488c      	ldr	r0, [pc, #560]	; (80004c0 <letter+0x370>)
 8000290:	f003 fc4b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000294:	2200      	movs	r2, #0
 8000296:	2180      	movs	r1, #128	; 0x80
 8000298:	488a      	ldr	r0, [pc, #552]	; (80004c4 <letter+0x374>)
 800029a:	f003 fc46 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4887      	ldr	r0, [pc, #540]	; (80004c4 <letter+0x374>)
 80002a6:	f003 fc40 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b0:	4884      	ldr	r0, [pc, #528]	; (80004c4 <letter+0x374>)
 80002b2:	f003 fc3a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	4881      	ldr	r0, [pc, #516]	; (80004c4 <letter+0x374>)
 80002be:	f003 fc34 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c8:	487c      	ldr	r0, [pc, #496]	; (80004bc <letter+0x36c>)
 80002ca:	f003 fc2e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80002ce:	2002      	movs	r0, #2
 80002d0:	f003 f9b8 	bl	8003644 <HAL_Delay>
	}
	if(L == '/')
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	2b2f      	cmp	r3, #47	; 0x2f
 80002d8:	d13b      	bne.n	8000352 <letter+0x202>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002e0:	4876      	ldr	r0, [pc, #472]	; (80004bc <letter+0x36c>)
 80002e2:	f003 fc22 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	// /
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	4874      	ldr	r0, [pc, #464]	; (80004c0 <letter+0x370>)
 80002ee:	f003 fc1c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002f8:	4871      	ldr	r0, [pc, #452]	; (80004c0 <letter+0x370>)
 80002fa:	f003 fc16 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80002fe:	2201      	movs	r2, #1
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	486f      	ldr	r0, [pc, #444]	; (80004c0 <letter+0x370>)
 8000304:	f003 fc11 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000308:	2201      	movs	r2, #1
 800030a:	2180      	movs	r1, #128	; 0x80
 800030c:	486c      	ldr	r0, [pc, #432]	; (80004c0 <letter+0x370>)
 800030e:	f003 fc0c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000312:	2200      	movs	r2, #0
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	486b      	ldr	r0, [pc, #428]	; (80004c4 <letter+0x374>)
 8000318:	f003 fc07 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4868      	ldr	r0, [pc, #416]	; (80004c4 <letter+0x374>)
 8000324:	f003 fc01 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	4865      	ldr	r0, [pc, #404]	; (80004c4 <letter+0x374>)
 8000330:	f003 fbfb 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800033a:	4862      	ldr	r0, [pc, #392]	; (80004c4 <letter+0x374>)
 800033c:	f003 fbf5 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	485d      	ldr	r0, [pc, #372]	; (80004bc <letter+0x36c>)
 8000348:	f003 fbef 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800034c:	2002      	movs	r0, #2
 800034e:	f003 f979 	bl	8003644 <HAL_Delay>
	}
	if(L == '!')
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b21      	cmp	r3, #33	; 0x21
 8000356:	d138      	bne.n	80003ca <letter+0x27a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800035e:	4857      	ldr	r0, [pc, #348]	; (80004bc <letter+0x36c>)
 8000360:	f003 fbe3 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//!
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800036a:	4855      	ldr	r0, [pc, #340]	; (80004c0 <letter+0x370>)
 800036c:	f003 fbdd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000376:	4852      	ldr	r0, [pc, #328]	; (80004c0 <letter+0x370>)
 8000378:	f003 fbd7 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800037c:	2200      	movs	r2, #0
 800037e:	2140      	movs	r1, #64	; 0x40
 8000380:	484f      	ldr	r0, [pc, #316]	; (80004c0 <letter+0x370>)
 8000382:	f003 fbd2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000386:	2200      	movs	r2, #0
 8000388:	2180      	movs	r1, #128	; 0x80
 800038a:	484d      	ldr	r0, [pc, #308]	; (80004c0 <letter+0x370>)
 800038c:	f003 fbcd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	484b      	ldr	r0, [pc, #300]	; (80004c4 <letter+0x374>)
 8000396:	f003 fbc8 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800039a:	2201      	movs	r2, #1
 800039c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a0:	4848      	ldr	r0, [pc, #288]	; (80004c4 <letter+0x374>)
 80003a2:	f003 fbc2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ac:	4845      	ldr	r0, [pc, #276]	; (80004c4 <letter+0x374>)
 80003ae:	f003 fbbc 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003b8:	4842      	ldr	r0, [pc, #264]	; (80004c4 <letter+0x374>)
 80003ba:	f003 fbb6 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003c4:	483d      	ldr	r0, [pc, #244]	; (80004bc <letter+0x36c>)
 80003c6:	f003 fbb0 	bl	8003b2a <HAL_GPIO_WritePin>
	}
	if(L == '?')
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b3f      	cmp	r3, #63	; 0x3f
 80003ce:	d13b      	bne.n	8000448 <letter+0x2f8>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	4839      	ldr	r0, [pc, #228]	; (80004bc <letter+0x36c>)
 80003d8:	f003 fba7 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//?
 80003dc:	2201      	movs	r2, #1
 80003de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003e2:	4837      	ldr	r0, [pc, #220]	; (80004c0 <letter+0x370>)
 80003e4:	f003 fba1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80003e8:	2201      	movs	r2, #1
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4834      	ldr	r0, [pc, #208]	; (80004c0 <letter+0x370>)
 80003f0:	f003 fb9b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80003f4:	2201      	movs	r2, #1
 80003f6:	2140      	movs	r1, #64	; 0x40
 80003f8:	4831      	ldr	r0, [pc, #196]	; (80004c0 <letter+0x370>)
 80003fa:	f003 fb96 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 80003fe:	2201      	movs	r2, #1
 8000400:	2180      	movs	r1, #128	; 0x80
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <letter+0x370>)
 8000404:	f003 fb91 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000408:	2201      	movs	r2, #1
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	482d      	ldr	r0, [pc, #180]	; (80004c4 <letter+0x374>)
 800040e:	f003 fb8c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000418:	482a      	ldr	r0, [pc, #168]	; (80004c4 <letter+0x374>)
 800041a:	f003 fb86 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	4827      	ldr	r0, [pc, #156]	; (80004c4 <letter+0x374>)
 8000426:	f003 fb80 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000430:	4824      	ldr	r0, [pc, #144]	; (80004c4 <letter+0x374>)
 8000432:	f003 fb7a 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	481f      	ldr	r0, [pc, #124]	; (80004bc <letter+0x36c>)
 800043e:	f003 fb74 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000442:	2002      	movs	r0, #2
 8000444:	f003 f8fe 	bl	8003644 <HAL_Delay>
	}
	if(L == '*')
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b2a      	cmp	r3, #42	; 0x2a
 800044c:	d142      	bne.n	80004d4 <letter+0x384>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800044e:	2201      	movs	r2, #1
 8000450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000454:	4819      	ldr	r0, [pc, #100]	; (80004bc <letter+0x36c>)
 8000456:	f003 fb68 	bl	8003b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//*
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000460:	4817      	ldr	r0, [pc, #92]	; (80004c0 <letter+0x370>)
 8000462:	f003 fb62 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000466:	2201      	movs	r2, #1
 8000468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800046c:	4814      	ldr	r0, [pc, #80]	; (80004c0 <letter+0x370>)
 800046e:	f003 fb5c 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000472:	2200      	movs	r2, #0
 8000474:	2140      	movs	r1, #64	; 0x40
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <letter+0x370>)
 8000478:	f003 fb57 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800047c:	2201      	movs	r2, #1
 800047e:	2180      	movs	r1, #128	; 0x80
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <letter+0x370>)
 8000482:	f003 fb52 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000486:	2200      	movs	r2, #0
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	480e      	ldr	r0, [pc, #56]	; (80004c4 <letter+0x374>)
 800048c:	f003 fb4d 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <letter+0x374>)
 8000498:	f003 fb47 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <letter+0x374>)
 80004a4:	f003 fb41 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <letter+0x374>)
 80004b0:	f003 fb3b 	bl	8003b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ba:	e005      	b.n	80004c8 <letter+0x378>
 80004bc:	40010c00 	.word	0x40010c00
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40010800 	.word	0x40010800
 80004c8:	48d5      	ldr	r0, [pc, #852]	; (8000820 <letter+0x6d0>)
 80004ca:	f003 fb2e 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_Delay(2);
 80004ce:	2002      	movs	r0, #2
 80004d0:	f003 f8b8 	bl	8003644 <HAL_Delay>
	}
	if(L == '#')
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	2b23      	cmp	r3, #35	; 0x23
 80004d8:	d13b      	bne.n	8000552 <letter+0x402>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80004da:	2201      	movs	r2, #1
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	48cf      	ldr	r0, [pc, #828]	; (8000820 <letter+0x6d0>)
 80004e2:	f003 fb22 	bl	8003b2a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//#
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ec:	48cd      	ldr	r0, [pc, #820]	; (8000824 <letter+0x6d4>)
 80004ee:	f003 fb1c 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f8:	48ca      	ldr	r0, [pc, #808]	; (8000824 <letter+0x6d4>)
 80004fa:	f003 fb16 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	48c8      	ldr	r0, [pc, #800]	; (8000824 <letter+0x6d4>)
 8000504:	f003 fb11 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000508:	2200      	movs	r2, #0
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	48c5      	ldr	r0, [pc, #788]	; (8000824 <letter+0x6d4>)
 800050e:	f003 fb0c 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000512:	2200      	movs	r2, #0
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	48c4      	ldr	r0, [pc, #784]	; (8000828 <letter+0x6d8>)
 8000518:	f003 fb07 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000522:	48c1      	ldr	r0, [pc, #772]	; (8000828 <letter+0x6d8>)
 8000524:	f003 fb01 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	48be      	ldr	r0, [pc, #760]	; (8000828 <letter+0x6d8>)
 8000530:	f003 fafb 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800053a:	48bb      	ldr	r0, [pc, #748]	; (8000828 <letter+0x6d8>)
 800053c:	f003 faf5 	bl	8003b2a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	48b6      	ldr	r0, [pc, #728]	; (8000820 <letter+0x6d0>)
 8000548:	f003 faef 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_Delay(2);
 800054c:	2002      	movs	r0, #2
 800054e:	f003 f879 	bl	8003644 <HAL_Delay>
	}
	if(L == 'a')
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	2b61      	cmp	r3, #97	; 0x61
 8000556:	d13b      	bne.n	80005d0 <letter+0x480>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	48b0      	ldr	r0, [pc, #704]	; (8000820 <letter+0x6d0>)
 8000560:	f003 fae3 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//a
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 7100 	mov.w	r1, #512	; 0x200
 800056a:	48ae      	ldr	r0, [pc, #696]	; (8000824 <letter+0x6d4>)
 800056c:	f003 fadd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000576:	48ab      	ldr	r0, [pc, #684]	; (8000824 <letter+0x6d4>)
 8000578:	f003 fad7 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	48a8      	ldr	r0, [pc, #672]	; (8000824 <letter+0x6d4>)
 8000582:	f003 fad2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	48a6      	ldr	r0, [pc, #664]	; (8000824 <letter+0x6d4>)
 800058c:	f003 facd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000590:	2200      	movs	r2, #0
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	48a4      	ldr	r0, [pc, #656]	; (8000828 <letter+0x6d8>)
 8000596:	f003 fac8 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	48a1      	ldr	r0, [pc, #644]	; (8000828 <letter+0x6d8>)
 80005a2:	f003 fac2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ac:	489e      	ldr	r0, [pc, #632]	; (8000828 <letter+0x6d8>)
 80005ae:	f003 fabc 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005b8:	489b      	ldr	r0, [pc, #620]	; (8000828 <letter+0x6d8>)
 80005ba:	f003 fab6 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c4:	4896      	ldr	r0, [pc, #600]	; (8000820 <letter+0x6d0>)
 80005c6:	f003 fab0 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80005ca:	2002      	movs	r0, #2
 80005cc:	f003 f83a 	bl	8003644 <HAL_Delay>
	}
	if(L == 'b')
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	2b62      	cmp	r3, #98	; 0x62
 80005d4:	d13b      	bne.n	800064e <letter+0x4fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80005d6:	2201      	movs	r2, #1
 80005d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005dc:	4890      	ldr	r0, [pc, #576]	; (8000820 <letter+0x6d0>)
 80005de:	f003 faa4 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//b
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e8:	488e      	ldr	r0, [pc, #568]	; (8000824 <letter+0x6d4>)
 80005ea:	f003 fa9e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	488b      	ldr	r0, [pc, #556]	; (8000824 <letter+0x6d4>)
 80005f6:	f003 fa98 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4889      	ldr	r0, [pc, #548]	; (8000824 <letter+0x6d4>)
 8000600:	f003 fa93 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000604:	2200      	movs	r2, #0
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	4886      	ldr	r0, [pc, #536]	; (8000824 <letter+0x6d4>)
 800060a:	f003 fa8e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800060e:	2200      	movs	r2, #0
 8000610:	2180      	movs	r1, #128	; 0x80
 8000612:	4885      	ldr	r0, [pc, #532]	; (8000828 <letter+0x6d8>)
 8000614:	f003 fa89 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000618:	2201      	movs	r2, #1
 800061a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800061e:	4882      	ldr	r0, [pc, #520]	; (8000828 <letter+0x6d8>)
 8000620:	f003 fa83 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000624:	2201      	movs	r2, #1
 8000626:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062a:	487f      	ldr	r0, [pc, #508]	; (8000828 <letter+0x6d8>)
 800062c:	f003 fa7d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000636:	487c      	ldr	r0, [pc, #496]	; (8000828 <letter+0x6d8>)
 8000638:	f003 fa77 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4877      	ldr	r0, [pc, #476]	; (8000820 <letter+0x6d0>)
 8000644:	f003 fa71 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000648:	2002      	movs	r0, #2
 800064a:	f002 fffb 	bl	8003644 <HAL_Delay>
	}
	if(L == 'C')
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b43      	cmp	r3, #67	; 0x43
 8000652:	d13b      	bne.n	80006cc <letter+0x57c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4871      	ldr	r0, [pc, #452]	; (8000820 <letter+0x6d0>)
 800065c:	f003 fa65 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//C
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	486f      	ldr	r0, [pc, #444]	; (8000824 <letter+0x6d4>)
 8000668:	f003 fa5f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000672:	486c      	ldr	r0, [pc, #432]	; (8000824 <letter+0x6d4>)
 8000674:	f003 fa59 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000678:	2200      	movs	r2, #0
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	4869      	ldr	r0, [pc, #420]	; (8000824 <letter+0x6d4>)
 800067e:	f003 fa54 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000682:	2200      	movs	r2, #0
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	4867      	ldr	r0, [pc, #412]	; (8000824 <letter+0x6d4>)
 8000688:	f003 fa4f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800068c:	2200      	movs	r2, #0
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	4865      	ldr	r0, [pc, #404]	; (8000828 <letter+0x6d8>)
 8000692:	f003 fa4a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4862      	ldr	r0, [pc, #392]	; (8000828 <letter+0x6d8>)
 800069e:	f003 fa44 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80006a2:	2201      	movs	r2, #1
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	485f      	ldr	r0, [pc, #380]	; (8000828 <letter+0x6d8>)
 80006aa:	f003 fa3e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b4:	485c      	ldr	r0, [pc, #368]	; (8000828 <letter+0x6d8>)
 80006b6:	f003 fa38 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80006ba:	2200      	movs	r2, #0
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	4857      	ldr	r0, [pc, #348]	; (8000820 <letter+0x6d0>)
 80006c2:	f003 fa32 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80006c6:	2002      	movs	r0, #2
 80006c8:	f002 ffbc 	bl	8003644 <HAL_Delay>
	}
	if(L == 'c')
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b63      	cmp	r3, #99	; 0x63
 80006d0:	d13b      	bne.n	800074a <letter+0x5fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4851      	ldr	r0, [pc, #324]	; (8000820 <letter+0x6d0>)
 80006da:	f003 fa26 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//c
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006e4:	484f      	ldr	r0, [pc, #316]	; (8000824 <letter+0x6d4>)
 80006e6:	f003 fa20 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	484c      	ldr	r0, [pc, #304]	; (8000824 <letter+0x6d4>)
 80006f2:	f003 fa1a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80006f6:	2200      	movs	r2, #0
 80006f8:	2140      	movs	r1, #64	; 0x40
 80006fa:	484a      	ldr	r0, [pc, #296]	; (8000824 <letter+0x6d4>)
 80006fc:	f003 fa15 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000700:	2200      	movs	r2, #0
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	4847      	ldr	r0, [pc, #284]	; (8000824 <letter+0x6d4>)
 8000706:	f003 fa10 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 800070a:	2200      	movs	r2, #0
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	4846      	ldr	r0, [pc, #280]	; (8000828 <letter+0x6d8>)
 8000710:	f003 fa0b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 7180 	mov.w	r1, #256	; 0x100
 800071a:	4843      	ldr	r0, [pc, #268]	; (8000828 <letter+0x6d8>)
 800071c:	f003 fa05 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000726:	4840      	ldr	r0, [pc, #256]	; (8000828 <letter+0x6d8>)
 8000728:	f003 f9ff 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	483d      	ldr	r0, [pc, #244]	; (8000828 <letter+0x6d8>)
 8000734:	f003 f9f9 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073e:	4838      	ldr	r0, [pc, #224]	; (8000820 <letter+0x6d0>)
 8000740:	f003 f9f3 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000744:	2002      	movs	r0, #2
 8000746:	f002 ff7d 	bl	8003644 <HAL_Delay>
	}
	if(L == 'd')
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b64      	cmp	r3, #100	; 0x64
 800074e:	d13b      	bne.n	80007c8 <letter+0x678>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <letter+0x6d0>)
 8000758:	f003 f9e7 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//d
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000762:	4830      	ldr	r0, [pc, #192]	; (8000824 <letter+0x6d4>)
 8000764:	f003 f9e1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	482d      	ldr	r0, [pc, #180]	; (8000824 <letter+0x6d4>)
 8000770:	f003 f9db 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000774:	2201      	movs	r2, #1
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	482a      	ldr	r0, [pc, #168]	; (8000824 <letter+0x6d4>)
 800077a:	f003 f9d6 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800077e:	2200      	movs	r2, #0
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4828      	ldr	r0, [pc, #160]	; (8000824 <letter+0x6d4>)
 8000784:	f003 f9d1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000788:	2200      	movs	r2, #0
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	4826      	ldr	r0, [pc, #152]	; (8000828 <letter+0x6d8>)
 800078e:	f003 f9cc 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <letter+0x6d8>)
 800079a:	f003 f9c6 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4820      	ldr	r0, [pc, #128]	; (8000828 <letter+0x6d8>)
 80007a6:	f003 f9c0 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b0:	481d      	ldr	r0, [pc, #116]	; (8000828 <letter+0x6d8>)
 80007b2:	f003 f9ba 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	4818      	ldr	r0, [pc, #96]	; (8000820 <letter+0x6d0>)
 80007be:	f003 f9b4 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80007c2:	2002      	movs	r0, #2
 80007c4:	f002 ff3e 	bl	8003644 <HAL_Delay>
	}
	if(L == 'E')
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2b45      	cmp	r3, #69	; 0x45
 80007cc:	d143      	bne.n	8000856 <letter+0x706>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80007ce:	2201      	movs	r2, #1
 80007d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d4:	4812      	ldr	r0, [pc, #72]	; (8000820 <letter+0x6d0>)
 80007d6:	f003 f9a8 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//E
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <letter+0x6d4>)
 80007e2:	f003 f9a2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <letter+0x6d4>)
 80007ee:	f003 f99c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80007f2:	2201      	movs	r2, #1
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <letter+0x6d4>)
 80007f8:	f003 f997 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80007fc:	2200      	movs	r2, #0
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <letter+0x6d4>)
 8000802:	f003 f992 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <letter+0x6d8>)
 800080c:	f003 f98d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <letter+0x6d8>)
 8000818:	f003 f987 	bl	8003b2a <HAL_GPIO_WritePin>
 800081c:	e006      	b.n	800082c <letter+0x6dc>
 800081e:	bf00      	nop
 8000820:	40010c00 	.word	0x40010c00
 8000824:	40011000 	.word	0x40011000
 8000828:	40010800 	.word	0x40010800
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	48d4      	ldr	r0, [pc, #848]	; (8000b84 <letter+0xa34>)
 8000834:	f003 f979 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083e:	48d1      	ldr	r0, [pc, #836]	; (8000b84 <letter+0xa34>)
 8000840:	f003 f973 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	48cf      	ldr	r0, [pc, #828]	; (8000b88 <letter+0xa38>)
 800084c:	f003 f96d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000850:	2002      	movs	r0, #2
 8000852:	f002 fef7 	bl	8003644 <HAL_Delay>
	}
	if(L == 'e')
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b65      	cmp	r3, #101	; 0x65
 800085a:	d13b      	bne.n	80008d4 <letter+0x784>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800085c:	2201      	movs	r2, #1
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	48c9      	ldr	r0, [pc, #804]	; (8000b88 <letter+0xa38>)
 8000864:	f003 f961 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//e
 8000868:	2201      	movs	r2, #1
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	48c7      	ldr	r0, [pc, #796]	; (8000b8c <letter+0xa3c>)
 8000870:	f003 f95b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	48c4      	ldr	r0, [pc, #784]	; (8000b8c <letter+0xa3c>)
 800087c:	f003 f955 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000880:	2201      	movs	r2, #1
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	48c1      	ldr	r0, [pc, #772]	; (8000b8c <letter+0xa3c>)
 8000886:	f003 f950 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800088a:	2200      	movs	r2, #0
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	48bf      	ldr	r0, [pc, #764]	; (8000b8c <letter+0xa3c>)
 8000890:	f003 f94b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000894:	2200      	movs	r2, #0
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	48ba      	ldr	r0, [pc, #744]	; (8000b84 <letter+0xa34>)
 800089a:	f003 f946 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	48b7      	ldr	r0, [pc, #732]	; (8000b84 <letter+0xa34>)
 80008a6:	f003 f940 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80008aa:	2201      	movs	r2, #1
 80008ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b0:	48b4      	ldr	r0, [pc, #720]	; (8000b84 <letter+0xa34>)
 80008b2:	f003 f93a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008bc:	48b1      	ldr	r0, [pc, #708]	; (8000b84 <letter+0xa34>)
 80008be:	f003 f934 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	48af      	ldr	r0, [pc, #700]	; (8000b88 <letter+0xa38>)
 80008ca:	f003 f92e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80008ce:	2002      	movs	r0, #2
 80008d0:	f002 feb8 	bl	8003644 <HAL_Delay>
	}
	if(L == 'f')
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b66      	cmp	r3, #102	; 0x66
 80008d8:	d13b      	bne.n	8000952 <letter+0x802>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e0:	48a9      	ldr	r0, [pc, #676]	; (8000b88 <letter+0xa38>)
 80008e2:	f003 f922 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//f
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ec:	48a7      	ldr	r0, [pc, #668]	; (8000b8c <letter+0xa3c>)
 80008ee:	f003 f91c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	48a4      	ldr	r0, [pc, #656]	; (8000b8c <letter+0xa3c>)
 80008fa:	f003 f916 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80008fe:	2201      	movs	r2, #1
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	48a2      	ldr	r0, [pc, #648]	; (8000b8c <letter+0xa3c>)
 8000904:	f003 f911 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000908:	2200      	movs	r2, #0
 800090a:	2180      	movs	r1, #128	; 0x80
 800090c:	489f      	ldr	r0, [pc, #636]	; (8000b8c <letter+0xa3c>)
 800090e:	f003 f90c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000912:	2200      	movs	r2, #0
 8000914:	2180      	movs	r1, #128	; 0x80
 8000916:	489b      	ldr	r0, [pc, #620]	; (8000b84 <letter+0xa34>)
 8000918:	f003 f907 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000922:	4898      	ldr	r0, [pc, #608]	; (8000b84 <letter+0xa34>)
 8000924:	f003 f901 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092e:	4895      	ldr	r0, [pc, #596]	; (8000b84 <letter+0xa34>)
 8000930:	f003 f8fb 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093a:	4892      	ldr	r0, [pc, #584]	; (8000b84 <letter+0xa34>)
 800093c:	f003 f8f5 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4890      	ldr	r0, [pc, #576]	; (8000b88 <letter+0xa38>)
 8000948:	f003 f8ef 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800094c:	2002      	movs	r0, #2
 800094e:	f002 fe79 	bl	8003644 <HAL_Delay>
	}
	if(L == 'G')
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b47      	cmp	r3, #71	; 0x47
 8000956:	d13b      	bne.n	80009d0 <letter+0x880>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800095e:	488a      	ldr	r0, [pc, #552]	; (8000b88 <letter+0xa38>)
 8000960:	f003 f8e3 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//G
 8000964:	2201      	movs	r2, #1
 8000966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800096a:	4888      	ldr	r0, [pc, #544]	; (8000b8c <letter+0xa3c>)
 800096c:	f003 f8dd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4885      	ldr	r0, [pc, #532]	; (8000b8c <letter+0xa3c>)
 8000978:	f003 f8d7 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800097c:	2201      	movs	r2, #1
 800097e:	2140      	movs	r1, #64	; 0x40
 8000980:	4882      	ldr	r0, [pc, #520]	; (8000b8c <letter+0xa3c>)
 8000982:	f003 f8d2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000986:	2200      	movs	r2, #0
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	4880      	ldr	r0, [pc, #512]	; (8000b8c <letter+0xa3c>)
 800098c:	f003 f8cd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000990:	2200      	movs	r2, #0
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	487b      	ldr	r0, [pc, #492]	; (8000b84 <letter+0xa34>)
 8000996:	f003 f8c8 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a0:	4878      	ldr	r0, [pc, #480]	; (8000b84 <letter+0xa34>)
 80009a2:	f003 f8c2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80009a6:	2201      	movs	r2, #1
 80009a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ac:	4875      	ldr	r0, [pc, #468]	; (8000b84 <letter+0xa34>)
 80009ae:	f003 f8bc 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b8:	4872      	ldr	r0, [pc, #456]	; (8000b84 <letter+0xa34>)
 80009ba:	f003 f8b6 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c4:	4870      	ldr	r0, [pc, #448]	; (8000b88 <letter+0xa38>)
 80009c6:	f003 f8b0 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80009ca:	2002      	movs	r0, #2
 80009cc:	f002 fe3a 	bl	8003644 <HAL_Delay>
	}
	if(L == 'g')
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b67      	cmp	r3, #103	; 0x67
 80009d4:	d13b      	bne.n	8000a4e <letter+0x8fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80009d6:	2201      	movs	r2, #1
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	486a      	ldr	r0, [pc, #424]	; (8000b88 <letter+0xa38>)
 80009de:	f003 f8a4 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//g
 80009e2:	2201      	movs	r2, #1
 80009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e8:	4868      	ldr	r0, [pc, #416]	; (8000b8c <letter+0xa3c>)
 80009ea:	f003 f89e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f4:	4865      	ldr	r0, [pc, #404]	; (8000b8c <letter+0xa3c>)
 80009f6:	f003 f898 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80009fa:	2201      	movs	r2, #1
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4863      	ldr	r0, [pc, #396]	; (8000b8c <letter+0xa3c>)
 8000a00:	f003 f893 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	4860      	ldr	r0, [pc, #384]	; (8000b8c <letter+0xa3c>)
 8000a0a:	f003 f88e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	485c      	ldr	r0, [pc, #368]	; (8000b84 <letter+0xa34>)
 8000a14:	f003 f889 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1e:	4859      	ldr	r0, [pc, #356]	; (8000b84 <letter+0xa34>)
 8000a20:	f003 f883 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2a:	4856      	ldr	r0, [pc, #344]	; (8000b84 <letter+0xa34>)
 8000a2c:	f003 f87d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a36:	4853      	ldr	r0, [pc, #332]	; (8000b84 <letter+0xa34>)
 8000a38:	f003 f877 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a42:	4851      	ldr	r0, [pc, #324]	; (8000b88 <letter+0xa38>)
 8000a44:	f003 f871 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f002 fdfb 	bl	8003644 <HAL_Delay>
	}
	if(L == 'I')
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b49      	cmp	r3, #73	; 0x49
 8000a52:	d13b      	bne.n	8000acc <letter+0x97c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5a:	484b      	ldr	r0, [pc, #300]	; (8000b88 <letter+0xa38>)
 8000a5c:	f003 f865 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//I
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a66:	4849      	ldr	r0, [pc, #292]	; (8000b8c <letter+0xa3c>)
 8000a68:	f003 f85f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a72:	4846      	ldr	r0, [pc, #280]	; (8000b8c <letter+0xa3c>)
 8000a74:	f003 f859 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4843      	ldr	r0, [pc, #268]	; (8000b8c <letter+0xa3c>)
 8000a7e:	f003 f854 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000a82:	2201      	movs	r2, #1
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	4841      	ldr	r0, [pc, #260]	; (8000b8c <letter+0xa3c>)
 8000a88:	f003 f84f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	483c      	ldr	r0, [pc, #240]	; (8000b84 <letter+0xa34>)
 8000a92:	f003 f84a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000a96:	2200      	movs	r2, #0
 8000a98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a9c:	4839      	ldr	r0, [pc, #228]	; (8000b84 <letter+0xa34>)
 8000a9e:	f003 f844 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa8:	4836      	ldr	r0, [pc, #216]	; (8000b84 <letter+0xa34>)
 8000aaa:	f003 f83e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab4:	4833      	ldr	r0, [pc, #204]	; (8000b84 <letter+0xa34>)
 8000ab6:	f003 f838 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac0:	4831      	ldr	r0, [pc, #196]	; (8000b88 <letter+0xa38>)
 8000ac2:	f003 f832 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f002 fdbc 	bl	8003644 <HAL_Delay>
	}
	if(L == 'i')
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b69      	cmp	r3, #105	; 0x69
 8000ad0:	d13b      	bne.n	8000b4a <letter+0x9fa>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	482b      	ldr	r0, [pc, #172]	; (8000b88 <letter+0xa38>)
 8000ada:	f003 f826 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//i
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae4:	4829      	ldr	r0, [pc, #164]	; (8000b8c <letter+0xa3c>)
 8000ae6:	f003 f820 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000af0:	4826      	ldr	r0, [pc, #152]	; (8000b8c <letter+0xa3c>)
 8000af2:	f003 f81a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000af6:	2200      	movs	r2, #0
 8000af8:	2140      	movs	r1, #64	; 0x40
 8000afa:	4824      	ldr	r0, [pc, #144]	; (8000b8c <letter+0xa3c>)
 8000afc:	f003 f815 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b00:	2201      	movs	r2, #1
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4821      	ldr	r0, [pc, #132]	; (8000b8c <letter+0xa3c>)
 8000b06:	f003 f810 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <letter+0xa34>)
 8000b10:	f003 f80b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b1a:	481a      	ldr	r0, [pc, #104]	; (8000b84 <letter+0xa34>)
 8000b1c:	f003 f805 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000b20:	2201      	movs	r2, #1
 8000b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <letter+0xa34>)
 8000b28:	f002 ffff 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <letter+0xa34>)
 8000b34:	f002 fff9 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3e:	4812      	ldr	r0, [pc, #72]	; (8000b88 <letter+0xa38>)
 8000b40:	f002 fff3 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000b44:	2002      	movs	r0, #2
 8000b46:	f002 fd7d 	bl	8003644 <HAL_Delay>
	}
	if(L == 'l')
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b6c      	cmp	r3, #108	; 0x6c
 8000b4e:	d142      	bne.n	8000bd6 <letter+0xa86>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b56:	480c      	ldr	r0, [pc, #48]	; (8000b88 <letter+0xa38>)
 8000b58:	f002 ffe7 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//l
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b62:	480a      	ldr	r0, [pc, #40]	; (8000b8c <letter+0xa3c>)
 8000b64:	f002 ffe1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6e:	4807      	ldr	r0, [pc, #28]	; (8000b8c <letter+0xa3c>)
 8000b70:	f002 ffdb 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000b74:	2201      	movs	r2, #1
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <letter+0xa3c>)
 8000b7a:	f002 ffd6 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	e005      	b.n	8000b90 <letter+0xa40>
 8000b84:	40010800 	.word	0x40010800
 8000b88:	40010c00 	.word	0x40010c00
 8000b8c:	40011000 	.word	0x40011000
 8000b90:	48d4      	ldr	r0, [pc, #848]	; (8000ee4 <letter+0xd94>)
 8000b92:	f002 ffca 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000b96:	2200      	movs	r2, #0
 8000b98:	2180      	movs	r1, #128	; 0x80
 8000b9a:	48d3      	ldr	r0, [pc, #844]	; (8000ee8 <letter+0xd98>)
 8000b9c:	f002 ffc5 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	48d0      	ldr	r0, [pc, #832]	; (8000ee8 <letter+0xd98>)
 8000ba8:	f002 ffbf 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	48cd      	ldr	r0, [pc, #820]	; (8000ee8 <letter+0xd98>)
 8000bb4:	f002 ffb9 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	48ca      	ldr	r0, [pc, #808]	; (8000ee8 <letter+0xd98>)
 8000bc0:	f002 ffb3 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	48c8      	ldr	r0, [pc, #800]	; (8000eec <letter+0xd9c>)
 8000bcc:	f002 ffad 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f002 fd37 	bl	8003644 <HAL_Delay>
	}
	if(L == 'm')
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2b6d      	cmp	r3, #109	; 0x6d
 8000bda:	d13b      	bne.n	8000c54 <letter+0xb04>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be2:	48c2      	ldr	r0, [pc, #776]	; (8000eec <letter+0xd9c>)
 8000be4:	f002 ffa1 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//m
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bee:	48bd      	ldr	r0, [pc, #756]	; (8000ee4 <letter+0xd94>)
 8000bf0:	f002 ff9b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfa:	48ba      	ldr	r0, [pc, #744]	; (8000ee4 <letter+0xd94>)
 8000bfc:	f002 ff95 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c00:	2201      	movs	r2, #1
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	48b7      	ldr	r0, [pc, #732]	; (8000ee4 <letter+0xd94>)
 8000c06:	f002 ff90 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2180      	movs	r1, #128	; 0x80
 8000c0e:	48b5      	ldr	r0, [pc, #724]	; (8000ee4 <letter+0xd94>)
 8000c10:	f002 ff8b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c14:	2200      	movs	r2, #0
 8000c16:	2180      	movs	r1, #128	; 0x80
 8000c18:	48b3      	ldr	r0, [pc, #716]	; (8000ee8 <letter+0xd98>)
 8000c1a:	f002 ff86 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c24:	48b0      	ldr	r0, [pc, #704]	; (8000ee8 <letter+0xd98>)
 8000c26:	f002 ff80 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	48ad      	ldr	r0, [pc, #692]	; (8000ee8 <letter+0xd98>)
 8000c32:	f002 ff7a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3c:	48aa      	ldr	r0, [pc, #680]	; (8000ee8 <letter+0xd98>)
 8000c3e:	f002 ff74 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c48:	48a8      	ldr	r0, [pc, #672]	; (8000eec <letter+0xd9c>)
 8000c4a:	f002 ff6e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f002 fcf8 	bl	8003644 <HAL_Delay>
	}
	if(L == 'N')
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b4e      	cmp	r3, #78	; 0x4e
 8000c58:	d13b      	bne.n	8000cd2 <letter+0xb82>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c60:	48a2      	ldr	r0, [pc, #648]	; (8000eec <letter+0xd9c>)
 8000c62:	f002 ff62 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//N
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6c:	489d      	ldr	r0, [pc, #628]	; (8000ee4 <letter+0xd94>)
 8000c6e:	f002 ff5c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	489a      	ldr	r0, [pc, #616]	; (8000ee4 <letter+0xd94>)
 8000c7a:	f002 ff56 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000c7e:	2201      	movs	r2, #1
 8000c80:	2140      	movs	r1, #64	; 0x40
 8000c82:	4898      	ldr	r0, [pc, #608]	; (8000ee4 <letter+0xd94>)
 8000c84:	f002 ff51 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <letter+0xd94>)
 8000c8e:	f002 ff4c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000c92:	2200      	movs	r2, #0
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4894      	ldr	r0, [pc, #592]	; (8000ee8 <letter+0xd98>)
 8000c98:	f002 ff47 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca2:	4891      	ldr	r0, [pc, #580]	; (8000ee8 <letter+0xd98>)
 8000ca4:	f002 ff41 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cae:	488e      	ldr	r0, [pc, #568]	; (8000ee8 <letter+0xd98>)
 8000cb0:	f002 ff3b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cba:	488b      	ldr	r0, [pc, #556]	; (8000ee8 <letter+0xd98>)
 8000cbc:	f002 ff35 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cc6:	4889      	ldr	r0, [pc, #548]	; (8000eec <letter+0xd9c>)
 8000cc8:	f002 ff2f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f002 fcb9 	bl	8003644 <HAL_Delay>
	}
	if(L == 'n')
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b6e      	cmp	r3, #110	; 0x6e
 8000cd6:	d13b      	bne.n	8000d50 <letter+0xc00>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4883      	ldr	r0, [pc, #524]	; (8000eec <letter+0xd9c>)
 8000ce0:	f002 ff23 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//n
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	487e      	ldr	r0, [pc, #504]	; (8000ee4 <letter+0xd94>)
 8000cec:	f002 ff1d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cf6:	487b      	ldr	r0, [pc, #492]	; (8000ee4 <letter+0xd94>)
 8000cf8:	f002 ff17 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2140      	movs	r1, #64	; 0x40
 8000d00:	4878      	ldr	r0, [pc, #480]	; (8000ee4 <letter+0xd94>)
 8000d02:	f002 ff12 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d06:	2201      	movs	r2, #1
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	4876      	ldr	r0, [pc, #472]	; (8000ee4 <letter+0xd94>)
 8000d0c:	f002 ff0d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d10:	2200      	movs	r2, #0
 8000d12:	2180      	movs	r1, #128	; 0x80
 8000d14:	4874      	ldr	r0, [pc, #464]	; (8000ee8 <letter+0xd98>)
 8000d16:	f002 ff08 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d20:	4871      	ldr	r0, [pc, #452]	; (8000ee8 <letter+0xd98>)
 8000d22:	f002 ff02 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	486e      	ldr	r0, [pc, #440]	; (8000ee8 <letter+0xd98>)
 8000d2e:	f002 fefc 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d38:	486b      	ldr	r0, [pc, #428]	; (8000ee8 <letter+0xd98>)
 8000d3a:	f002 fef6 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <letter+0xd9c>)
 8000d46:	f002 fef0 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f002 fc7a 	bl	8003644 <HAL_Delay>
	}
	if(L == 'O')
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b4f      	cmp	r3, #79	; 0x4f
 8000d54:	d13b      	bne.n	8000dce <letter+0xc7e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5c:	4863      	ldr	r0, [pc, #396]	; (8000eec <letter+0xd9c>)
 8000d5e:	f002 fee4 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//O
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d68:	485e      	ldr	r0, [pc, #376]	; (8000ee4 <letter+0xd94>)
 8000d6a:	f002 fede 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d74:	485b      	ldr	r0, [pc, #364]	; (8000ee4 <letter+0xd94>)
 8000d76:	f002 fed8 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2140      	movs	r1, #64	; 0x40
 8000d7e:	4859      	ldr	r0, [pc, #356]	; (8000ee4 <letter+0xd94>)
 8000d80:	f002 fed3 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000d84:	2201      	movs	r2, #1
 8000d86:	2180      	movs	r1, #128	; 0x80
 8000d88:	4856      	ldr	r0, [pc, #344]	; (8000ee4 <letter+0xd94>)
 8000d8a:	f002 fece 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2180      	movs	r1, #128	; 0x80
 8000d92:	4855      	ldr	r0, [pc, #340]	; (8000ee8 <letter+0xd98>)
 8000d94:	f002 fec9 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4852      	ldr	r0, [pc, #328]	; (8000ee8 <letter+0xd98>)
 8000da0:	f002 fec3 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000daa:	484f      	ldr	r0, [pc, #316]	; (8000ee8 <letter+0xd98>)
 8000dac:	f002 febd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000db6:	484c      	ldr	r0, [pc, #304]	; (8000ee8 <letter+0xd98>)
 8000db8:	f002 feb7 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	484a      	ldr	r0, [pc, #296]	; (8000eec <letter+0xd9c>)
 8000dc4:	f002 feb1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f002 fc3b 	bl	8003644 <HAL_Delay>
	}
	if(L == 'o')
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b6f      	cmp	r3, #111	; 0x6f
 8000dd2:	d13b      	bne.n	8000e4c <letter+0xcfc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dda:	4844      	ldr	r0, [pc, #272]	; (8000eec <letter+0xd9c>)
 8000ddc:	f002 fea5 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//o
 8000de0:	2201      	movs	r2, #1
 8000de2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de6:	483f      	ldr	r0, [pc, #252]	; (8000ee4 <letter+0xd94>)
 8000de8:	f002 fe9f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	483c      	ldr	r0, [pc, #240]	; (8000ee4 <letter+0xd94>)
 8000df4:	f002 fe99 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <letter+0xd94>)
 8000dfe:	f002 fe94 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8000e02:	2201      	movs	r2, #1
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <letter+0xd94>)
 8000e08:	f002 fe8f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4835      	ldr	r0, [pc, #212]	; (8000ee8 <letter+0xd98>)
 8000e12:	f002 fe8a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4832      	ldr	r0, [pc, #200]	; (8000ee8 <letter+0xd98>)
 8000e1e:	f002 fe84 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e28:	482f      	ldr	r0, [pc, #188]	; (8000ee8 <letter+0xd98>)
 8000e2a:	f002 fe7e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e34:	482c      	ldr	r0, [pc, #176]	; (8000ee8 <letter+0xd98>)
 8000e36:	f002 fe78 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e40:	482a      	ldr	r0, [pc, #168]	; (8000eec <letter+0xd9c>)
 8000e42:	f002 fe72 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f002 fbfc 	bl	8003644 <HAL_Delay>
	}
	if(L == 'P')
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	2b50      	cmp	r3, #80	; 0x50
 8000e50:	d13b      	bne.n	8000eca <letter+0xd7a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4824      	ldr	r0, [pc, #144]	; (8000eec <letter+0xd9c>)
 8000e5a:	f002 fe66 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//P
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	481f      	ldr	r0, [pc, #124]	; (8000ee4 <letter+0xd94>)
 8000e66:	f002 fe60 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e70:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <letter+0xd94>)
 8000e72:	f002 fe5a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000e76:	2200      	movs	r2, #0
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <letter+0xd94>)
 8000e7c:	f002 fe55 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000e80:	2200      	movs	r2, #0
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <letter+0xd94>)
 8000e86:	f002 fe50 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	2180      	movs	r1, #128	; 0x80
 8000e8e:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <letter+0xd98>)
 8000e90:	f002 fe4b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9a:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <letter+0xd98>)
 8000e9c:	f002 fe45 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <letter+0xd98>)
 8000ea8:	f002 fe3f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb2:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <letter+0xd98>)
 8000eb4:	f002 fe39 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <letter+0xd9c>)
 8000ec0:	f002 fe33 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f002 fbbd 	bl	8003644 <HAL_Delay>
	}
	if(L == 'Q')
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b51      	cmp	r3, #81	; 0x51
 8000ece:	d142      	bne.n	8000f56 <letter+0xe06>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <letter+0xd9c>)
 8000ed8:	f002 fe27 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Q
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee2:	e005      	b.n	8000ef0 <letter+0xda0>
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40010800 	.word	0x40010800
 8000eec:	40010c00 	.word	0x40010c00
 8000ef0:	48d5      	ldr	r0, [pc, #852]	; (8001248 <letter+0x10f8>)
 8000ef2:	f002 fe1a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	48d2      	ldr	r0, [pc, #840]	; (8001248 <letter+0x10f8>)
 8000efe:	f002 fe14 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f02:	2200      	movs	r2, #0
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	48d0      	ldr	r0, [pc, #832]	; (8001248 <letter+0x10f8>)
 8000f08:	f002 fe0f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	48cd      	ldr	r0, [pc, #820]	; (8001248 <letter+0x10f8>)
 8000f12:	f002 fe0a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f16:	2201      	movs	r2, #1
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	48cc      	ldr	r0, [pc, #816]	; (800124c <letter+0x10fc>)
 8000f1c:	f002 fe05 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	48c9      	ldr	r0, [pc, #804]	; (800124c <letter+0x10fc>)
 8000f28:	f002 fdff 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f32:	48c6      	ldr	r0, [pc, #792]	; (800124c <letter+0x10fc>)
 8000f34:	f002 fdf9 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f3e:	48c3      	ldr	r0, [pc, #780]	; (800124c <letter+0x10fc>)
 8000f40:	f002 fdf3 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4a:	48c1      	ldr	r0, [pc, #772]	; (8001250 <letter+0x1100>)
 8000f4c:	f002 fded 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f002 fb77 	bl	8003644 <HAL_Delay>
	}
	if(L == 'r')
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b72      	cmp	r3, #114	; 0x72
 8000f5a:	d13b      	bne.n	8000fd4 <letter+0xe84>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	48bb      	ldr	r0, [pc, #748]	; (8001250 <letter+0x1100>)
 8000f64:	f002 fde1 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//r
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f6e:	48b6      	ldr	r0, [pc, #728]	; (8001248 <letter+0x10f8>)
 8000f70:	f002 fddb 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7a:	48b3      	ldr	r0, [pc, #716]	; (8001248 <letter+0x10f8>)
 8000f7c:	f002 fdd5 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000f80:	2200      	movs	r2, #0
 8000f82:	2140      	movs	r1, #64	; 0x40
 8000f84:	48b0      	ldr	r0, [pc, #704]	; (8001248 <letter+0x10f8>)
 8000f86:	f002 fdd0 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	48ae      	ldr	r0, [pc, #696]	; (8001248 <letter+0x10f8>)
 8000f90:	f002 fdcb 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8000f94:	2201      	movs	r2, #1
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	48ac      	ldr	r0, [pc, #688]	; (800124c <letter+0x10fc>)
 8000f9a:	f002 fdc6 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa4:	48a9      	ldr	r0, [pc, #676]	; (800124c <letter+0x10fc>)
 8000fa6:	f002 fdc0 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8000faa:	2201      	movs	r2, #1
 8000fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb0:	48a6      	ldr	r0, [pc, #664]	; (800124c <letter+0x10fc>)
 8000fb2:	f002 fdba 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	48a3      	ldr	r0, [pc, #652]	; (800124c <letter+0x10fc>)
 8000fbe:	f002 fdb4 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc8:	48a1      	ldr	r0, [pc, #644]	; (8001250 <letter+0x1100>)
 8000fca:	f002 fdae 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f002 fb38 	bl	8003644 <HAL_Delay>
	}
	if(L == 's')
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b73      	cmp	r3, #115	; 0x73
 8000fd8:	d13b      	bne.n	8001052 <letter+0xf02>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe0:	489b      	ldr	r0, [pc, #620]	; (8001250 <letter+0x1100>)
 8000fe2:	f002 fda2 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//s
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fec:	4896      	ldr	r0, [pc, #600]	; (8001248 <letter+0x10f8>)
 8000fee:	f002 fd9c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4893      	ldr	r0, [pc, #588]	; (8001248 <letter+0x10f8>)
 8000ffa:	f002 fd96 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8000ffe:	2200      	movs	r2, #0
 8001000:	2140      	movs	r1, #64	; 0x40
 8001002:	4891      	ldr	r0, [pc, #580]	; (8001248 <letter+0x10f8>)
 8001004:	f002 fd91 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001008:	2200      	movs	r2, #0
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	488e      	ldr	r0, [pc, #568]	; (8001248 <letter+0x10f8>)
 800100e:	f002 fd8c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	488d      	ldr	r0, [pc, #564]	; (800124c <letter+0x10fc>)
 8001018:	f002 fd87 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001022:	488a      	ldr	r0, [pc, #552]	; (800124c <letter+0x10fc>)
 8001024:	f002 fd81 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102e:	4887      	ldr	r0, [pc, #540]	; (800124c <letter+0x10fc>)
 8001030:	f002 fd7b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103a:	4884      	ldr	r0, [pc, #528]	; (800124c <letter+0x10fc>)
 800103c:	f002 fd75 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	4882      	ldr	r0, [pc, #520]	; (8001250 <letter+0x1100>)
 8001048:	f002 fd6f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800104c:	2002      	movs	r0, #2
 800104e:	f002 faf9 	bl	8003644 <HAL_Delay>
	}
	if(L == 'T')
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b54      	cmp	r3, #84	; 0x54
 8001056:	d13b      	bne.n	80010d0 <letter+0xf80>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	487c      	ldr	r0, [pc, #496]	; (8001250 <letter+0x1100>)
 8001060:	f002 fd63 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//T
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4877      	ldr	r0, [pc, #476]	; (8001248 <letter+0x10f8>)
 800106c:	f002 fd5d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	4874      	ldr	r0, [pc, #464]	; (8001248 <letter+0x10f8>)
 8001078:	f002 fd57 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800107c:	2201      	movs	r2, #1
 800107e:	2140      	movs	r1, #64	; 0x40
 8001080:	4871      	ldr	r0, [pc, #452]	; (8001248 <letter+0x10f8>)
 8001082:	f002 fd52 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001086:	2200      	movs	r2, #0
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	486f      	ldr	r0, [pc, #444]	; (8001248 <letter+0x10f8>)
 800108c:	f002 fd4d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	486d      	ldr	r0, [pc, #436]	; (800124c <letter+0x10fc>)
 8001096:	f002 fd48 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	486a      	ldr	r0, [pc, #424]	; (800124c <letter+0x10fc>)
 80010a2:	f002 fd42 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ac:	4867      	ldr	r0, [pc, #412]	; (800124c <letter+0x10fc>)
 80010ae:	f002 fd3c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80010b2:	2200      	movs	r2, #0
 80010b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b8:	4864      	ldr	r0, [pc, #400]	; (800124c <letter+0x10fc>)
 80010ba:	f002 fd36 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c4:	4862      	ldr	r0, [pc, #392]	; (8001250 <letter+0x1100>)
 80010c6:	f002 fd30 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80010ca:	2002      	movs	r0, #2
 80010cc:	f002 faba 	bl	8003644 <HAL_Delay>
	}
	if(L == 't')
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b74      	cmp	r3, #116	; 0x74
 80010d4:	d13b      	bne.n	800114e <letter+0xffe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010dc:	485c      	ldr	r0, [pc, #368]	; (8001250 <letter+0x1100>)
 80010de:	f002 fd24 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//t
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4857      	ldr	r0, [pc, #348]	; (8001248 <letter+0x10f8>)
 80010ea:	f002 fd1e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4854      	ldr	r0, [pc, #336]	; (8001248 <letter+0x10f8>)
 80010f6:	f002 fd18 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80010fa:	2201      	movs	r2, #1
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	4852      	ldr	r0, [pc, #328]	; (8001248 <letter+0x10f8>)
 8001100:	f002 fd13 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001104:	2200      	movs	r2, #0
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	484f      	ldr	r0, [pc, #316]	; (8001248 <letter+0x10f8>)
 800110a:	f002 fd0e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800110e:	2201      	movs	r2, #1
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	484e      	ldr	r0, [pc, #312]	; (800124c <letter+0x10fc>)
 8001114:	f002 fd09 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001118:	2201      	movs	r2, #1
 800111a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111e:	484b      	ldr	r0, [pc, #300]	; (800124c <letter+0x10fc>)
 8001120:	f002 fd03 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800112a:	4848      	ldr	r0, [pc, #288]	; (800124c <letter+0x10fc>)
 800112c:	f002 fcfd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001136:	4845      	ldr	r0, [pc, #276]	; (800124c <letter+0x10fc>)
 8001138:	f002 fcf7 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001142:	4843      	ldr	r0, [pc, #268]	; (8001250 <letter+0x1100>)
 8001144:	f002 fcf1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001148:	2002      	movs	r0, #2
 800114a:	f002 fa7b 	bl	8003644 <HAL_Delay>
	}
	if(L == 'u')
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b75      	cmp	r3, #117	; 0x75
 8001152:	d13b      	bne.n	80011cc <letter+0x107c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	483d      	ldr	r0, [pc, #244]	; (8001250 <letter+0x1100>)
 800115c:	f002 fce5 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//u
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001166:	4838      	ldr	r0, [pc, #224]	; (8001248 <letter+0x10f8>)
 8001168:	f002 fcdf 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	4835      	ldr	r0, [pc, #212]	; (8001248 <letter+0x10f8>)
 8001174:	f002 fcd9 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001178:	2201      	movs	r2, #1
 800117a:	2140      	movs	r1, #64	; 0x40
 800117c:	4832      	ldr	r0, [pc, #200]	; (8001248 <letter+0x10f8>)
 800117e:	f002 fcd4 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001182:	2200      	movs	r2, #0
 8001184:	2180      	movs	r1, #128	; 0x80
 8001186:	4830      	ldr	r0, [pc, #192]	; (8001248 <letter+0x10f8>)
 8001188:	f002 fccf 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800118c:	2201      	movs	r2, #1
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	482e      	ldr	r0, [pc, #184]	; (800124c <letter+0x10fc>)
 8001192:	f002 fcca 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001196:	2201      	movs	r2, #1
 8001198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119c:	482b      	ldr	r0, [pc, #172]	; (800124c <letter+0x10fc>)
 800119e:	f002 fcc4 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <letter+0x10fc>)
 80011aa:	f002 fcbe 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b4:	4825      	ldr	r0, [pc, #148]	; (800124c <letter+0x10fc>)
 80011b6:	f002 fcb8 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c0:	4823      	ldr	r0, [pc, #140]	; (8001250 <letter+0x1100>)
 80011c2:	f002 fcb2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80011c6:	2002      	movs	r0, #2
 80011c8:	f002 fa3c 	bl	8003644 <HAL_Delay>
	}
	if(L == 'v')
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b76      	cmp	r3, #118	; 0x76
 80011d0:	d142      	bne.n	8001258 <letter+0x1108>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <letter+0x1100>)
 80011da:	f002 fca6 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//v
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <letter+0x10f8>)
 80011e6:	f002 fca0 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f0:	4815      	ldr	r0, [pc, #84]	; (8001248 <letter+0x10f8>)
 80011f2:	f002 fc9a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80011f6:	2201      	movs	r2, #1
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	4813      	ldr	r0, [pc, #76]	; (8001248 <letter+0x10f8>)
 80011fc:	f002 fc95 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001200:	2200      	movs	r2, #0
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	4810      	ldr	r0, [pc, #64]	; (8001248 <letter+0x10f8>)
 8001206:	f002 fc90 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800120a:	2201      	movs	r2, #1
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <letter+0x10fc>)
 8001210:	f002 fc8b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	480c      	ldr	r0, [pc, #48]	; (800124c <letter+0x10fc>)
 800121c:	f002 fc85 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <letter+0x10fc>)
 8001228:	f002 fc7f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <letter+0x10fc>)
 8001234:	f002 fc79 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <letter+0x1100>)
 8001240:	f002 fc73 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001244:	2002      	movs	r0, #2
 8001246:	e005      	b.n	8001254 <letter+0x1104>
 8001248:	40011000 	.word	0x40011000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	f002 f9f6 	bl	8003644 <HAL_Delay>
	}
	if(L == 'W')
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	2b57      	cmp	r3, #87	; 0x57
 800125c:	d13b      	bne.n	80012d6 <letter+0x1186>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001264:	48d5      	ldr	r0, [pc, #852]	; (80015bc <letter+0x146c>)
 8001266:	f002 fc60 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//W
 800126a:	2201      	movs	r2, #1
 800126c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001270:	48d3      	ldr	r0, [pc, #844]	; (80015c0 <letter+0x1470>)
 8001272:	f002 fc5a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127c:	48d0      	ldr	r0, [pc, #832]	; (80015c0 <letter+0x1470>)
 800127e:	f002 fc54 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001282:	2201      	movs	r2, #1
 8001284:	2140      	movs	r1, #64	; 0x40
 8001286:	48ce      	ldr	r0, [pc, #824]	; (80015c0 <letter+0x1470>)
 8001288:	f002 fc4f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800128c:	2200      	movs	r2, #0
 800128e:	2180      	movs	r1, #128	; 0x80
 8001290:	48cb      	ldr	r0, [pc, #812]	; (80015c0 <letter+0x1470>)
 8001292:	f002 fc4a 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001296:	2201      	movs	r2, #1
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	48ca      	ldr	r0, [pc, #808]	; (80015c4 <letter+0x1474>)
 800129c:	f002 fc45 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a6:	48c7      	ldr	r0, [pc, #796]	; (80015c4 <letter+0x1474>)
 80012a8:	f002 fc3f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012b2:	48c4      	ldr	r0, [pc, #784]	; (80015c4 <letter+0x1474>)
 80012b4:	f002 fc39 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	48c1      	ldr	r0, [pc, #772]	; (80015c4 <letter+0x1474>)
 80012c0:	f002 fc33 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	48bc      	ldr	r0, [pc, #752]	; (80015bc <letter+0x146c>)
 80012cc:	f002 fc2d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80012d0:	2002      	movs	r0, #2
 80012d2:	f002 f9b7 	bl	8003644 <HAL_Delay>
	}
	if(L == 'w')
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	2b77      	cmp	r3, #119	; 0x77
 80012da:	d13b      	bne.n	8001354 <letter+0x1204>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80012dc:	2201      	movs	r2, #1
 80012de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e2:	48b6      	ldr	r0, [pc, #728]	; (80015bc <letter+0x146c>)
 80012e4:	f002 fc21 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//w
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ee:	48b4      	ldr	r0, [pc, #720]	; (80015c0 <letter+0x1470>)
 80012f0:	f002 fc1b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fa:	48b1      	ldr	r0, [pc, #708]	; (80015c0 <letter+0x1470>)
 80012fc:	f002 fc15 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001300:	2201      	movs	r2, #1
 8001302:	2140      	movs	r1, #64	; 0x40
 8001304:	48ae      	ldr	r0, [pc, #696]	; (80015c0 <letter+0x1470>)
 8001306:	f002 fc10 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800130a:	2200      	movs	r2, #0
 800130c:	2180      	movs	r1, #128	; 0x80
 800130e:	48ac      	ldr	r0, [pc, #688]	; (80015c0 <letter+0x1470>)
 8001310:	f002 fc0b 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001314:	2201      	movs	r2, #1
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	48aa      	ldr	r0, [pc, #680]	; (80015c4 <letter+0x1474>)
 800131a:	f002 fc06 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	48a7      	ldr	r0, [pc, #668]	; (80015c4 <letter+0x1474>)
 8001326:	f002 fc00 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 800132a:	2201      	movs	r2, #1
 800132c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001330:	48a4      	ldr	r0, [pc, #656]	; (80015c4 <letter+0x1474>)
 8001332:	f002 fbfa 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133c:	48a1      	ldr	r0, [pc, #644]	; (80015c4 <letter+0x1474>)
 800133e:	f002 fbf4 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	489c      	ldr	r0, [pc, #624]	; (80015bc <letter+0x146c>)
 800134a:	f002 fbee 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800134e:	2002      	movs	r0, #2
 8001350:	f002 f978 	bl	8003644 <HAL_Delay>
	}
	if(L == 'y')
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b79      	cmp	r3, #121	; 0x79
 8001358:	d13b      	bne.n	80013d2 <letter+0x1282>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800135a:	2201      	movs	r2, #1
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4896      	ldr	r0, [pc, #600]	; (80015bc <letter+0x146c>)
 8001362:	f002 fbe2 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//y
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	4894      	ldr	r0, [pc, #592]	; (80015c0 <letter+0x1470>)
 800136e:	f002 fbdc 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	4891      	ldr	r0, [pc, #580]	; (80015c0 <letter+0x1470>)
 800137a:	f002 fbd6 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800137e:	2200      	movs	r2, #0
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	488f      	ldr	r0, [pc, #572]	; (80015c0 <letter+0x1470>)
 8001384:	f002 fbd1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001388:	2201      	movs	r2, #1
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	488c      	ldr	r0, [pc, #560]	; (80015c0 <letter+0x1470>)
 800138e:	f002 fbcc 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001392:	2201      	movs	r2, #1
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	488b      	ldr	r0, [pc, #556]	; (80015c4 <letter+0x1474>)
 8001398:	f002 fbc7 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013a2:	4888      	ldr	r0, [pc, #544]	; (80015c4 <letter+0x1474>)
 80013a4:	f002 fbc1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ae:	4885      	ldr	r0, [pc, #532]	; (80015c4 <letter+0x1474>)
 80013b0:	f002 fbbb 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ba:	4882      	ldr	r0, [pc, #520]	; (80015c4 <letter+0x1474>)
 80013bc:	f002 fbb5 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c6:	487d      	ldr	r0, [pc, #500]	; (80015bc <letter+0x146c>)
 80013c8:	f002 fbaf 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80013cc:	2002      	movs	r0, #2
 80013ce:	f002 f939 	bl	8003644 <HAL_Delay>
	}
	if(L == '0')
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b30      	cmp	r3, #48	; 0x30
 80013d6:	d13b      	bne.n	8001450 <letter+0x1300>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	4877      	ldr	r0, [pc, #476]	; (80015bc <letter+0x146c>)
 80013e0:	f002 fba3 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//0
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ea:	4875      	ldr	r0, [pc, #468]	; (80015c0 <letter+0x1470>)
 80013ec:	f002 fb9d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f6:	4872      	ldr	r0, [pc, #456]	; (80015c0 <letter+0x1470>)
 80013f8:	f002 fb97 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80013fc:	2200      	movs	r2, #0
 80013fe:	2140      	movs	r1, #64	; 0x40
 8001400:	486f      	ldr	r0, [pc, #444]	; (80015c0 <letter+0x1470>)
 8001402:	f002 fb92 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001406:	2200      	movs	r2, #0
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	486d      	ldr	r0, [pc, #436]	; (80015c0 <letter+0x1470>)
 800140c:	f002 fb8d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001410:	2201      	movs	r2, #1
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	486b      	ldr	r0, [pc, #428]	; (80015c4 <letter+0x1474>)
 8001416:	f002 fb88 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001420:	4868      	ldr	r0, [pc, #416]	; (80015c4 <letter+0x1474>)
 8001422:	f002 fb82 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	4865      	ldr	r0, [pc, #404]	; (80015c4 <letter+0x1474>)
 800142e:	f002 fb7c 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001438:	4862      	ldr	r0, [pc, #392]	; (80015c4 <letter+0x1474>)
 800143a:	f002 fb76 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800143e:	2200      	movs	r2, #0
 8001440:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001444:	485d      	ldr	r0, [pc, #372]	; (80015bc <letter+0x146c>)
 8001446:	f002 fb70 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800144a:	2002      	movs	r0, #2
 800144c:	f002 f8fa 	bl	8003644 <HAL_Delay>
	}
	if(L == '1')
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	2b31      	cmp	r3, #49	; 0x31
 8001454:	d13b      	bne.n	80014ce <letter+0x137e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800145c:	4857      	ldr	r0, [pc, #348]	; (80015bc <letter+0x146c>)
 800145e:	f002 fb64 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//1
 8001462:	2201      	movs	r2, #1
 8001464:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001468:	4855      	ldr	r0, [pc, #340]	; (80015c0 <letter+0x1470>)
 800146a:	f002 fb5e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001474:	4852      	ldr	r0, [pc, #328]	; (80015c0 <letter+0x1470>)
 8001476:	f002 fb58 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800147a:	2200      	movs	r2, #0
 800147c:	2140      	movs	r1, #64	; 0x40
 800147e:	4850      	ldr	r0, [pc, #320]	; (80015c0 <letter+0x1470>)
 8001480:	f002 fb53 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	484d      	ldr	r0, [pc, #308]	; (80015c0 <letter+0x1470>)
 800148a:	f002 fb4e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800148e:	2201      	movs	r2, #1
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	484c      	ldr	r0, [pc, #304]	; (80015c4 <letter+0x1474>)
 8001494:	f002 fb49 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800149e:	4849      	ldr	r0, [pc, #292]	; (80015c4 <letter+0x1474>)
 80014a0:	f002 fb43 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014aa:	4846      	ldr	r0, [pc, #280]	; (80015c4 <letter+0x1474>)
 80014ac:	f002 fb3d 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	4843      	ldr	r0, [pc, #268]	; (80015c4 <letter+0x1474>)
 80014b8:	f002 fb37 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	483e      	ldr	r0, [pc, #248]	; (80015bc <letter+0x146c>)
 80014c4:	f002 fb31 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014c8:	2002      	movs	r0, #2
 80014ca:	f002 f8bb 	bl	8003644 <HAL_Delay>
	}
	if(L == '2')
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b32      	cmp	r3, #50	; 0x32
 80014d2:	d138      	bne.n	8001546 <letter+0x13f6>
	{
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	4838      	ldr	r0, [pc, #224]	; (80015bc <letter+0x146c>)
 80014dc:	f002 fb25 	bl	8003b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//2
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014e6:	4836      	ldr	r0, [pc, #216]	; (80015c0 <letter+0x1470>)
 80014e8:	f002 fb1f 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f2:	4833      	ldr	r0, [pc, #204]	; (80015c0 <letter+0x1470>)
 80014f4:	f002 fb19 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	; 0x40
 80014fc:	4830      	ldr	r0, [pc, #192]	; (80015c0 <letter+0x1470>)
 80014fe:	f002 fb14 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001502:	2200      	movs	r2, #0
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	482e      	ldr	r0, [pc, #184]	; (80015c0 <letter+0x1470>)
 8001508:	f002 fb0f 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800150c:	2201      	movs	r2, #1
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	482c      	ldr	r0, [pc, #176]	; (80015c4 <letter+0x1474>)
 8001512:	f002 fb0a 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	4829      	ldr	r0, [pc, #164]	; (80015c4 <letter+0x1474>)
 800151e:	f002 fb04 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001528:	4826      	ldr	r0, [pc, #152]	; (80015c4 <letter+0x1474>)
 800152a:	f002 fafe 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800152e:	2200      	movs	r2, #0
 8001530:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001534:	4823      	ldr	r0, [pc, #140]	; (80015c4 <letter+0x1474>)
 8001536:	f002 faf8 	bl	8003b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001540:	481e      	ldr	r0, [pc, #120]	; (80015bc <letter+0x146c>)
 8001542:	f002 faf2 	bl	8003b2a <HAL_GPIO_WritePin>
	}
	if(L == '3')
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b33      	cmp	r3, #51	; 0x33
 800154a:	d143      	bne.n	80015d4 <letter+0x1484>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	481a      	ldr	r0, [pc, #104]	; (80015bc <letter+0x146c>)
 8001554:	f002 fae9 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//3
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800155e:	4818      	ldr	r0, [pc, #96]	; (80015c0 <letter+0x1470>)
 8001560:	f002 fae3 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	4815      	ldr	r0, [pc, #84]	; (80015c0 <letter+0x1470>)
 800156c:	f002 fadd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001570:	2200      	movs	r2, #0
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <letter+0x1470>)
 8001576:	f002 fad8 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800157a:	2200      	movs	r2, #0
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <letter+0x1470>)
 8001580:	f002 fad3 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001584:	2201      	movs	r2, #1
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	480e      	ldr	r0, [pc, #56]	; (80015c4 <letter+0x1474>)
 800158a:	f002 face 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800158e:	2201      	movs	r2, #1
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <letter+0x1474>)
 8001596:	f002 fac8 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800159a:	2200      	movs	r2, #0
 800159c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a0:	4808      	ldr	r0, [pc, #32]	; (80015c4 <letter+0x1474>)
 80015a2:	f002 fac2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ac:	4805      	ldr	r0, [pc, #20]	; (80015c4 <letter+0x1474>)
 80015ae:	f002 fabc 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b8:	e006      	b.n	80015c8 <letter+0x1478>
 80015ba:	bf00      	nop
 80015bc:	40010c00 	.word	0x40010c00
 80015c0:	40011000 	.word	0x40011000
 80015c4:	40010800 	.word	0x40010800
 80015c8:	48c1      	ldr	r0, [pc, #772]	; (80018d0 <letter+0x1780>)
 80015ca:	f002 faae 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f002 f838 	bl	8003644 <HAL_Delay>
	}
	if(L == '4')
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b34      	cmp	r3, #52	; 0x34
 80015d8:	d13b      	bne.n	8001652 <letter+0x1502>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015e0:	48bb      	ldr	r0, [pc, #748]	; (80018d0 <letter+0x1780>)
 80015e2:	f002 faa2 	bl	8003b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//4
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ec:	48b9      	ldr	r0, [pc, #740]	; (80018d4 <letter+0x1784>)
 80015ee:	f002 fa9c 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	48b6      	ldr	r0, [pc, #728]	; (80018d4 <letter+0x1784>)
 80015fa:	f002 fa96 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80015fe:	2201      	movs	r2, #1
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	48b4      	ldr	r0, [pc, #720]	; (80018d4 <letter+0x1784>)
 8001604:	f002 fa91 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001608:	2200      	movs	r2, #0
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	48b1      	ldr	r0, [pc, #708]	; (80018d4 <letter+0x1784>)
 800160e:	f002 fa8c 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001612:	2201      	movs	r2, #1
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	48b0      	ldr	r0, [pc, #704]	; (80018d8 <letter+0x1788>)
 8001618:	f002 fa87 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	48ad      	ldr	r0, [pc, #692]	; (80018d8 <letter+0x1788>)
 8001624:	f002 fa81 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800162e:	48aa      	ldr	r0, [pc, #680]	; (80018d8 <letter+0x1788>)
 8001630:	f002 fa7b 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163a:	48a7      	ldr	r0, [pc, #668]	; (80018d8 <letter+0x1788>)
 800163c:	f002 fa75 	bl	8003b2a <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001646:	48a2      	ldr	r0, [pc, #648]	; (80018d0 <letter+0x1780>)
 8001648:	f002 fa6f 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800164c:	2002      	movs	r0, #2
 800164e:	f001 fff9 	bl	8003644 <HAL_Delay>
	}
	if(L == '5')
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b35      	cmp	r3, #53	; 0x35
 8001656:	d13b      	bne.n	80016d0 <letter+0x1580>
	{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	489c      	ldr	r0, [pc, #624]	; (80018d0 <letter+0x1780>)
 8001660:	f002 fa63 	bl	8003b2a <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//5
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166a:	489a      	ldr	r0, [pc, #616]	; (80018d4 <letter+0x1784>)
 800166c:	f002 fa5d 	bl	8003b2a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001676:	4897      	ldr	r0, [pc, #604]	; (80018d4 <letter+0x1784>)
 8001678:	f002 fa57 	bl	8003b2a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 800167c:	2201      	movs	r2, #1
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	4894      	ldr	r0, [pc, #592]	; (80018d4 <letter+0x1784>)
 8001682:	f002 fa52 	bl	8003b2a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001686:	2200      	movs	r2, #0
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	4892      	ldr	r0, [pc, #584]	; (80018d4 <letter+0x1784>)
 800168c:	f002 fa4d 	bl	8003b2a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001690:	2201      	movs	r2, #1
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	4890      	ldr	r0, [pc, #576]	; (80018d8 <letter+0x1788>)
 8001696:	f002 fa48 	bl	8003b2a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	488d      	ldr	r0, [pc, #564]	; (80018d8 <letter+0x1788>)
 80016a2:	f002 fa42 	bl	8003b2a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ac:	488a      	ldr	r0, [pc, #552]	; (80018d8 <letter+0x1788>)
 80016ae:	f002 fa3c 	bl	8003b2a <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016b8:	4887      	ldr	r0, [pc, #540]	; (80018d8 <letter+0x1788>)
 80016ba:	f002 fa36 	bl	8003b2a <HAL_GPIO_WritePin>

				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016c4:	4882      	ldr	r0, [pc, #520]	; (80018d0 <letter+0x1780>)
 80016c6:	f002 fa30 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016ca:	2002      	movs	r0, #2
 80016cc:	f001 ffba 	bl	8003644 <HAL_Delay>
	}
	if(L == '6')
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b36      	cmp	r3, #54	; 0x36
 80016d4:	d13b      	bne.n	800174e <letter+0x15fe>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016dc:	487c      	ldr	r0, [pc, #496]	; (80018d0 <letter+0x1780>)
 80016de:	f002 fa24 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//6
 80016e2:	2200      	movs	r2, #0
 80016e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e8:	487a      	ldr	r0, [pc, #488]	; (80018d4 <letter+0x1784>)
 80016ea:	f002 fa1e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f4:	4877      	ldr	r0, [pc, #476]	; (80018d4 <letter+0x1784>)
 80016f6:	f002 fa18 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 80016fa:	2201      	movs	r2, #1
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	4875      	ldr	r0, [pc, #468]	; (80018d4 <letter+0x1784>)
 8001700:	f002 fa13 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4872      	ldr	r0, [pc, #456]	; (80018d4 <letter+0x1784>)
 800170a:	f002 fa0e 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800170e:	2201      	movs	r2, #1
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4871      	ldr	r0, [pc, #452]	; (80018d8 <letter+0x1788>)
 8001714:	f002 fa09 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800171e:	486e      	ldr	r0, [pc, #440]	; (80018d8 <letter+0x1788>)
 8001720:	f002 fa03 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	486b      	ldr	r0, [pc, #428]	; (80018d8 <letter+0x1788>)
 800172c:	f002 f9fd 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001736:	4868      	ldr	r0, [pc, #416]	; (80018d8 <letter+0x1788>)
 8001738:	f002 f9f7 	bl	8003b2a <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 800173c:	2200      	movs	r2, #0
 800173e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001742:	4863      	ldr	r0, [pc, #396]	; (80018d0 <letter+0x1780>)
 8001744:	f002 f9f1 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001748:	2002      	movs	r0, #2
 800174a:	f001 ff7b 	bl	8003644 <HAL_Delay>
	}
	if(L == '7')
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	2b37      	cmp	r3, #55	; 0x37
 8001752:	d13b      	bne.n	80017cc <letter+0x167c>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175a:	485d      	ldr	r0, [pc, #372]	; (80018d0 <letter+0x1780>)
 800175c:	f002 f9e5 	bl	8003b2a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//7
 8001760:	2201      	movs	r2, #1
 8001762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001766:	485b      	ldr	r0, [pc, #364]	; (80018d4 <letter+0x1784>)
 8001768:	f002 f9df 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001772:	4858      	ldr	r0, [pc, #352]	; (80018d4 <letter+0x1784>)
 8001774:	f002 f9d9 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2
 8001778:	2201      	movs	r2, #1
 800177a:	2140      	movs	r1, #64	; 0x40
 800177c:	4855      	ldr	r0, [pc, #340]	; (80018d4 <letter+0x1784>)
 800177e:	f002 f9d4 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001782:	2200      	movs	r2, #0
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	4853      	ldr	r0, [pc, #332]	; (80018d4 <letter+0x1784>)
 8001788:	f002 f9cf 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800178c:	2201      	movs	r2, #1
 800178e:	2180      	movs	r1, #128	; 0x80
 8001790:	4851      	ldr	r0, [pc, #324]	; (80018d8 <letter+0x1788>)
 8001792:	f002 f9ca 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	484e      	ldr	r0, [pc, #312]	; (80018d8 <letter+0x1788>)
 800179e:	f002 f9c4 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a8:	484b      	ldr	r0, [pc, #300]	; (80018d8 <letter+0x1788>)
 80017aa:	f002 f9be 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017b4:	4848      	ldr	r0, [pc, #288]	; (80018d8 <letter+0x1788>)
 80017b6:	f002 f9b8 	bl	8003b2a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c0:	4843      	ldr	r0, [pc, #268]	; (80018d0 <letter+0x1780>)
 80017c2:	f002 f9b2 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80017c6:	2002      	movs	r0, #2
 80017c8:	f001 ff3c 	bl	8003644 <HAL_Delay>
	}
	if(L == '8')
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b38      	cmp	r3, #56	; 0x38
 80017d0:	d13b      	bne.n	800184a <letter+0x16fa>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017d8:	483d      	ldr	r0, [pc, #244]	; (80018d0 <letter+0x1780>)
 80017da:	f002 f9a6 	bl	8003b2a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//8
 80017de:	2200      	movs	r2, #0
 80017e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e4:	483b      	ldr	r0, [pc, #236]	; (80018d4 <letter+0x1784>)
 80017e6:	f002 f9a0 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4838      	ldr	r0, [pc, #224]	; (80018d4 <letter+0x1784>)
 80017f2:	f002 f99a 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80017f6:	2200      	movs	r2, #0
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	4836      	ldr	r0, [pc, #216]	; (80018d4 <letter+0x1784>)
 80017fc:	f002 f995 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001800:	2201      	movs	r2, #1
 8001802:	2180      	movs	r1, #128	; 0x80
 8001804:	4833      	ldr	r0, [pc, #204]	; (80018d4 <letter+0x1784>)
 8001806:	f002 f990 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 800180a:	2201      	movs	r2, #1
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	4832      	ldr	r0, [pc, #200]	; (80018d8 <letter+0x1788>)
 8001810:	f002 f98b 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181a:	482f      	ldr	r0, [pc, #188]	; (80018d8 <letter+0x1788>)
 800181c:	f002 f985 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001820:	2200      	movs	r2, #0
 8001822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001826:	482c      	ldr	r0, [pc, #176]	; (80018d8 <letter+0x1788>)
 8001828:	f002 f97f 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001832:	4829      	ldr	r0, [pc, #164]	; (80018d8 <letter+0x1788>)
 8001834:	f002 f979 	bl	8003b2a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183e:	4824      	ldr	r0, [pc, #144]	; (80018d0 <letter+0x1780>)
 8001840:	f002 f973 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001844:	2002      	movs	r0, #2
 8001846:	f001 fefd 	bl	8003644 <HAL_Delay>
	}
	if(L =='9')
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b39      	cmp	r3, #57	; 0x39
 800184e:	d13b      	bne.n	80018c8 <letter+0x1778>
	{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	481e      	ldr	r0, [pc, #120]	; (80018d0 <letter+0x1780>)
 8001858:	f002 f967 	bl	8003b2a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//9
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <letter+0x1784>)
 8001864:	f002 f961 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <letter+0x1784>)
 8001870:	f002 f95b 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8001874:	2200      	movs	r2, #0
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <letter+0x1784>)
 800187a:	f002 f956 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 800187e:	2201      	movs	r2, #1
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <letter+0x1784>)
 8001884:	f002 f951 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4
 8001888:	2201      	movs	r2, #1
 800188a:	2180      	movs	r1, #128	; 0x80
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <letter+0x1788>)
 800188e:	f002 f94c 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001892:	2201      	movs	r2, #1
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <letter+0x1788>)
 800189a:	f002 f946 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018a4:	480c      	ldr	r0, [pc, #48]	; (80018d8 <letter+0x1788>)
 80018a6:	f002 f940 	bl	8003b2a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <letter+0x1788>)
 80018b2:	f002 f93a 	bl	8003b2a <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018bc:	4804      	ldr	r0, [pc, #16]	; (80018d0 <letter+0x1780>)
 80018be:	f002 f934 	bl	8003b2a <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80018c2:	2002      	movs	r0, #2
 80018c4:	f001 febe 	bl	8003644 <HAL_Delay>
	}

}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40010c00 	.word	0x40010c00
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40010800 	.word	0x40010800

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e0:	f001 fe7e 	bl	80035e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e4:	f000 f8a0 	bl	8001a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e8:	f000 f9aa 	bl	8001c40 <MX_GPIO_Init>
  MX_TIM2_Init();
 80018ec:	f000 f8de 	bl	8001aac <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80018f0:	f000 f97c 	bl	8001bec <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80018f4:	f000 f950 	bl	8001b98 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80018f8:	f000 f924 	bl	8001b44 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018fc:	f003 fc7e 	bl	80051fc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8001900:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <main+0xdc>)
 8001902:	2102      	movs	r1, #2
 8001904:	2008      	movs	r0, #8
 8001906:	f003 fdb7 	bl	8005478 <osMessageQueueNew>
 800190a:	4602      	mov	r2, r0
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <main+0xe0>)
 800190e:	601a      	str	r2, [r3, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8001910:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <main+0xe4>)
 8001912:	2102      	movs	r1, #2
 8001914:	2008      	movs	r0, #8
 8001916:	f003 fdaf 	bl	8005478 <osMessageQueueNew>
 800191a:	4602      	mov	r2, r0
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <main+0xe8>)
 800191e:	601a      	str	r2, [r3, #0]

  /* creation of XbeeQueue */
  XbeeQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &XbeeQueue_attributes);
 8001920:	4a29      	ldr	r2, [pc, #164]	; (80019c8 <main+0xec>)
 8001922:	2102      	movs	r1, #2
 8001924:	2008      	movs	r0, #8
 8001926:	f003 fda7 	bl	8005478 <osMessageQueueNew>
 800192a:	4602      	mov	r2, r0
 800192c:	4b27      	ldr	r3, [pc, #156]	; (80019cc <main+0xf0>)
 800192e:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8001930:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <main+0xf4>)
 8001932:	2102      	movs	r1, #2
 8001934:	2008      	movs	r0, #8
 8001936:	f003 fd9f 	bl	8005478 <osMessageQueueNew>
 800193a:	4602      	mov	r2, r0
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <main+0xf8>)
 800193e:	601a      	str	r2, [r3, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <main+0xfc>)
 8001942:	2102      	movs	r1, #2
 8001944:	2008      	movs	r0, #8
 8001946:	f003 fd97 	bl	8005478 <osMessageQueueNew>
 800194a:	4602      	mov	r2, r0
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <main+0x100>)
 800194e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <main+0x104>)
 8001952:	2100      	movs	r1, #0
 8001954:	4823      	ldr	r0, [pc, #140]	; (80019e4 <main+0x108>)
 8001956:	f003 fcb7 	bl	80052c8 <osThreadNew>
 800195a:	4602      	mov	r2, r0
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <main+0x10c>)
 800195e:	601a      	str	r2, [r3, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <main+0x110>)
 8001962:	2100      	movs	r1, #0
 8001964:	4822      	ldr	r0, [pc, #136]	; (80019f0 <main+0x114>)
 8001966:	f003 fcaf 	bl	80052c8 <osThreadNew>
 800196a:	4602      	mov	r2, r0
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <main+0x118>)
 800196e:	601a      	str	r2, [r3, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 8001970:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <main+0x11c>)
 8001972:	2100      	movs	r1, #0
 8001974:	4821      	ldr	r0, [pc, #132]	; (80019fc <main+0x120>)
 8001976:	f003 fca7 	bl	80052c8 <osThreadNew>
 800197a:	4602      	mov	r2, r0
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <main+0x124>)
 800197e:	601a      	str	r2, [r3, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 8001980:	4a20      	ldr	r2, [pc, #128]	; (8001a04 <main+0x128>)
 8001982:	2100      	movs	r1, #0
 8001984:	4820      	ldr	r0, [pc, #128]	; (8001a08 <main+0x12c>)
 8001986:	f003 fc9f 	bl	80052c8 <osThreadNew>
 800198a:	4602      	mov	r2, r0
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <main+0x130>)
 800198e:	601a      	str	r2, [r3, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 8001990:	4a1f      	ldr	r2, [pc, #124]	; (8001a10 <main+0x134>)
 8001992:	2100      	movs	r1, #0
 8001994:	481f      	ldr	r0, [pc, #124]	; (8001a14 <main+0x138>)
 8001996:	f003 fc97 	bl	80052c8 <osThreadNew>
 800199a:	4602      	mov	r2, r0
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <main+0x13c>)
 800199e:	601a      	str	r2, [r3, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 80019a0:	4a1e      	ldr	r2, [pc, #120]	; (8001a1c <main+0x140>)
 80019a2:	2100      	movs	r1, #0
 80019a4:	481e      	ldr	r0, [pc, #120]	; (8001a20 <main+0x144>)
 80019a6:	f003 fc8f 	bl	80052c8 <osThreadNew>
 80019aa:	4602      	mov	r2, r0
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <main+0x148>)
 80019ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019b0:	f003 fc56 	bl	8005260 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 80019b4:	e7fe      	b.n	80019b4 <main+0xd8>
 80019b6:	bf00      	nop
 80019b8:	08007ee4 	.word	0x08007ee4
 80019bc:	20002164 	.word	0x20002164
 80019c0:	08007efc 	.word	0x08007efc
 80019c4:	20002418 	.word	0x20002418
 80019c8:	08007f14 	.word	0x08007f14
 80019cc:	20002410 	.word	0x20002410
 80019d0:	08007f2c 	.word	0x08007f2c
 80019d4:	20002160 	.word	0x20002160
 80019d8:	08007f44 	.word	0x08007f44
 80019dc:	2000216c 	.word	0x2000216c
 80019e0:	08007e0c 	.word	0x08007e0c
 80019e4:	080029a1 	.word	0x080029a1
 80019e8:	20002168 	.word	0x20002168
 80019ec:	08007e30 	.word	0x08007e30
 80019f0:	08002a25 	.word	0x08002a25
 80019f4:	2000240c 	.word	0x2000240c
 80019f8:	08007e54 	.word	0x08007e54
 80019fc:	08002ced 	.word	0x08002ced
 8001a00:	20002468 	.word	0x20002468
 8001a04:	08007e78 	.word	0x08007e78
 8001a08:	08002cfd 	.word	0x08002cfd
 8001a0c:	200023b0 	.word	0x200023b0
 8001a10:	08007e9c 	.word	0x08007e9c
 8001a14:	08002d61 	.word	0x08002d61
 8001a18:	20002414 	.word	0x20002414
 8001a1c:	08007ec0 	.word	0x08007ec0
 8001a20:	08002d71 	.word	0x08002d71
 8001a24:	20002464 	.word	0x20002464

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b090      	sub	sp, #64	; 0x40
 8001a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2e:	f107 0318 	add.w	r3, r7, #24
 8001a32:	2228      	movs	r2, #40	; 0x28
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f006 f967 	bl	8007d0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a52:	2310      	movs	r3, #16
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2302      	movs	r3, #2
 8001a58:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a5e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 f899 	bl	8003ba0 <HAL_RCC_OscConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a74:	f001 f996 	bl	8002da4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a78:	230f      	movs	r3, #15
 8001a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2102      	movs	r1, #2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fb04 	bl	80040a0 <HAL_RCC_ClockConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a9e:	f001 f981 	bl	8002da4 <Error_Handler>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3740      	adds	r7, #64	; 0x40
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ac8:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ace:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af0:	4813      	ldr	r0, [pc, #76]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001af2:	f002 fca1 	bl	8004438 <HAL_TIM_Base_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001afc:	f001 f952 	bl	8002da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001b0e:	f002 fe87 	bl	8004820 <HAL_TIM_ConfigClockSource>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b18:	f001 f944 	bl	8002da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_TIM2_Init+0x94>)
 8001b2a:	f003 f84d 	bl	8004bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b34:	f001 f936 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b38:	bf00      	nop
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000241c 	.word	0x2000241c

08001b44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_USART1_UART_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART1_UART_Init+0x4c>)
 8001b7c:	f003 f894 	bl	8004ca8 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b86:	f001 f90d 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200023cc 	.word	0x200023cc
 8001b94:	40013800 	.word	0x40013800

08001b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_USART2_UART_Init+0x50>)
 8001ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_USART2_UART_Init+0x4c>)
 8001bd0:	f003 f86a 	bl	8004ca8 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bda:	f001 f8e3 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20002100 	.word	0x20002100
 8001be8:	40004400 	.word	0x40004400

08001bec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <MX_USART3_UART_Init+0x50>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_USART3_UART_Init+0x4c>)
 8001c24:	f003 f840 	bl	8004ca8 <HAL_UART_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c2e:	f001 f8b9 	bl	8002da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	200020c0 	.word	0x200020c0
 8001c3c:	40004800 	.word	0x40004800

08001c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	f107 0310 	add.w	r3, r7, #16
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	605a      	str	r2, [r3, #4]
 8001c50:	609a      	str	r2, [r3, #8]
 8001c52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a5e      	ldr	r2, [pc, #376]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b5c      	ldr	r3, [pc, #368]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c72:	f043 0320 	orr.w	r3, r3, #32
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a52      	ldr	r2, [pc, #328]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	4b4d      	ldr	r3, [pc, #308]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a4c      	ldr	r2, [pc, #304]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <MX_GPIO_Init+0x194>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 8001cba:	4847      	ldr	r0, [pc, #284]	; (8001dd8 <MX_GPIO_Init+0x198>)
 8001cbc:	f001 ff35 	bl	8003b2a <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 8001cc6:	4845      	ldr	r0, [pc, #276]	; (8001ddc <MX_GPIO_Init+0x19c>)
 8001cc8:	f001 ff2f 	bl	8003b2a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 8001cd2:	4843      	ldr	r0, [pc, #268]	; (8001de0 <MX_GPIO_Init+0x1a0>)
 8001cd4:	f001 ff29 	bl	8003b2a <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2104      	movs	r1, #4
 8001cdc:	4841      	ldr	r0, [pc, #260]	; (8001de4 <MX_GPIO_Init+0x1a4>)
 8001cde:	f001 ff24 	bl	8003b2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce8:	4b3f      	ldr	r3, [pc, #252]	; (8001de8 <MX_GPIO_Init+0x1a8>)
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	483a      	ldr	r0, [pc, #232]	; (8001de0 <MX_GPIO_Init+0x1a0>)
 8001cf8:	f001 fda6 	bl	8003848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001cfc:	2307      	movs	r3, #7
 8001cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4834      	ldr	r0, [pc, #208]	; (8001de0 <MX_GPIO_Init+0x1a0>)
 8001d10:	f001 fd9a 	bl	8003848 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001d14:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8001d18:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	482a      	ldr	r0, [pc, #168]	; (8001dd8 <MX_GPIO_Init+0x198>)
 8001d2e:	f001 fd8b 	bl	8003848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001d32:	2307      	movs	r3, #7
 8001d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	4619      	mov	r1, r3
 8001d44:	4825      	ldr	r0, [pc, #148]	; (8001ddc <MX_GPIO_Init+0x19c>)
 8001d46:	f001 fd7f 	bl	8003848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001d4a:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 8001d4e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4619      	mov	r1, r3
 8001d62:	481e      	ldr	r0, [pc, #120]	; (8001ddc <MX_GPIO_Init+0x19c>)
 8001d64:	f001 fd70 	bl	8003848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001d68:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001d6c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2302      	movs	r3, #2
 8001d78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 0310 	add.w	r3, r7, #16
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4817      	ldr	r0, [pc, #92]	; (8001de0 <MX_GPIO_Init+0x1a0>)
 8001d82:	f001 fd61 	bl	8003848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d86:	2304      	movs	r3, #4
 8001d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4811      	ldr	r0, [pc, #68]	; (8001de4 <MX_GPIO_Init+0x1a4>)
 8001d9e:	f001 fd53 	bl	8003848 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001da2:	2340      	movs	r3, #64	; 0x40
 8001da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	4619      	mov	r1, r3
 8001db4:	4809      	ldr	r0, [pc, #36]	; (8001ddc <MX_GPIO_Init+0x19c>)
 8001db6:	f001 fd47 	bl	8003848 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2105      	movs	r1, #5
 8001dbe:	2028      	movs	r0, #40	; 0x28
 8001dc0:	f001 fd17 	bl	80037f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dc4:	2028      	movs	r0, #40	; 0x28
 8001dc6:	f001 fd30 	bl	800382a <HAL_NVIC_EnableIRQ>

}
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010800 	.word	0x40010800
 8001ddc:	40010c00 	.word	0x40010c00
 8001de0:	40011000 	.word	0x40011000
 8001de4:	40011400 	.word	0x40011400
 8001de8:	10110000 	.word	0x10110000

08001dec <commandToLCD>:

/* USER CODE BEGIN 4 */
void commandToLCD(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8001df0:	2014      	movs	r0, #20
 8001df2:	f001 fc27 	bl	8003644 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dfc:	4867      	ldr	r0, [pc, #412]	; (8001f9c <commandToLCD+0x1b0>)
 8001dfe:	f001 fe94 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001e02:	2200      	movs	r2, #0
 8001e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e08:	4864      	ldr	r0, [pc, #400]	; (8001f9c <commandToLCD+0x1b0>)
 8001e0a:	f001 fe8e 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e14:	4861      	ldr	r0, [pc, #388]	; (8001f9c <commandToLCD+0x1b0>)
 8001e16:	f001 fe88 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Enable 8 bit data, 2 display lines
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e20:	485f      	ldr	r0, [pc, #380]	; (8001fa0 <commandToLCD+0x1b4>)
 8001e22:	f001 fe82 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2c:	485c      	ldr	r0, [pc, #368]	; (8001fa0 <commandToLCD+0x1b4>)
 8001e2e:	f001 fe7c 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2//letter font, 1 = 5x11, 0 = 5x8
 8001e32:	2200      	movs	r2, #0
 8001e34:	2140      	movs	r1, #64	; 0x40
 8001e36:	485a      	ldr	r0, [pc, #360]	; (8001fa0 <commandToLCD+0x1b4>)
 8001e38:	f001 fe77 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3//number of lines, 1 = 2, 0 = 1
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	4857      	ldr	r0, [pc, #348]	; (8001fa0 <commandToLCD+0x1b4>)
 8001e42:	f001 fe72 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);//D4//interface bit length, 1 = 8bit, 0 = 4bit
 8001e46:	2201      	movs	r2, #1
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	4856      	ldr	r0, [pc, #344]	; (8001fa4 <commandToLCD+0x1b8>)
 8001e4c:	f001 fe6d 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);//D5
 8001e50:	2201      	movs	r2, #1
 8001e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e56:	4853      	ldr	r0, [pc, #332]	; (8001fa4 <commandToLCD+0x1b8>)
 8001e58:	f001 fe67 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e62:	4850      	ldr	r0, [pc, #320]	; (8001fa4 <commandToLCD+0x1b8>)
 8001e64:	f001 fe61 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6e:	484d      	ldr	r0, [pc, #308]	; (8001fa4 <commandToLCD+0x1b8>)
 8001e70:	f001 fe5b 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e7a:	4848      	ldr	r0, [pc, #288]	; (8001f9c <commandToLCD+0x1b0>)
 8001e7c:	f001 fe55 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001e80:	2005      	movs	r0, #5
 8001e82:	f001 fbdf 	bl	8003644 <HAL_Delay>



	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001e86:	2201      	movs	r2, #1
 8001e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8c:	4843      	ldr	r0, [pc, #268]	; (8001f9c <commandToLCD+0x1b0>)
 8001e8e:	f001 fe4c 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0//cursor blinking on = 1	//Enable Display, Cursor, Blink
 8001e92:	2201      	movs	r2, #1
 8001e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e98:	4841      	ldr	r0, [pc, #260]	; (8001fa0 <commandToLCD+0x1b4>)
 8001e9a:	f001 fe46 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1//cursor on = 1
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea4:	483e      	ldr	r0, [pc, #248]	; (8001fa0 <commandToLCD+0x1b4>)
 8001ea6:	f001 fe40 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//display on = 1
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2140      	movs	r1, #64	; 0x40
 8001eae:	483c      	ldr	r0, [pc, #240]	; (8001fa0 <commandToLCD+0x1b4>)
 8001eb0:	f001 fe3b 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);//D3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	4839      	ldr	r0, [pc, #228]	; (8001fa0 <commandToLCD+0x1b4>)
 8001eba:	f001 fe36 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	4838      	ldr	r0, [pc, #224]	; (8001fa4 <commandToLCD+0x1b8>)
 8001ec4:	f001 fe31 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ece:	4835      	ldr	r0, [pc, #212]	; (8001fa4 <commandToLCD+0x1b8>)
 8001ed0:	f001 fe2b 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eda:	4832      	ldr	r0, [pc, #200]	; (8001fa4 <commandToLCD+0x1b8>)
 8001edc:	f001 fe25 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee6:	482f      	ldr	r0, [pc, #188]	; (8001fa4 <commandToLCD+0x1b8>)
 8001ee8:	f001 fe1f 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8001eec:	2200      	movs	r2, #0
 8001eee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef2:	482a      	ldr	r0, [pc, #168]	; (8001f9c <commandToLCD+0x1b0>)
 8001ef4:	f001 fe19 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001ef8:	2005      	movs	r0, #5
 8001efa:	f001 fba3 	bl	8003644 <HAL_Delay>


	clear();
 8001efe:	f000 f925 	bl	800214c <clear>


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8001f02:	2201      	movs	r2, #1
 8001f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f08:	4824      	ldr	r0, [pc, #144]	; (8001f9c <commandToLCD+0x1b0>)
 8001f0a:	f001 fe0e 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set Move Cursor Right
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f14:	4822      	ldr	r0, [pc, #136]	; (8001fa0 <commandToLCD+0x1b4>)
 8001f16:	f001 fe08 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);//D1
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f20:	481f      	ldr	r0, [pc, #124]	; (8001fa0 <commandToLCD+0x1b4>)
 8001f22:	f001 fe02 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);//D2//right
 8001f26:	2201      	movs	r2, #1
 8001f28:	2140      	movs	r1, #64	; 0x40
 8001f2a:	481d      	ldr	r0, [pc, #116]	; (8001fa0 <commandToLCD+0x1b4>)
 8001f2c:	f001 fdfd 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8001f30:	2200      	movs	r2, #0
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	481a      	ldr	r0, [pc, #104]	; (8001fa0 <commandToLCD+0x1b4>)
 8001f36:	f001 fdf8 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2180      	movs	r1, #128	; 0x80
 8001f3e:	4819      	ldr	r0, [pc, #100]	; (8001fa4 <commandToLCD+0x1b8>)
 8001f40:	f001 fdf3 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f4a:	4816      	ldr	r0, [pc, #88]	; (8001fa4 <commandToLCD+0x1b8>)
 8001f4c:	f001 fded 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f56:	4813      	ldr	r0, [pc, #76]	; (8001fa4 <commandToLCD+0x1b8>)
 8001f58:	f001 fde7 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f62:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <commandToLCD+0x1b8>)
 8001f64:	f001 fde1 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f6e:	480b      	ldr	r0, [pc, #44]	; (8001f9c <commandToLCD+0x1b0>)
 8001f70:	f001 fddb 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001f74:	2005      	movs	r0, #5
 8001f76:	f001 fb65 	bl	8003644 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);//R/W high
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <commandToLCD+0x1b0>)
 8001f82:	f001 fdd2 	bl	8003b2a <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 1)
 8001f86:	bf00      	nop
 8001f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8c:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <commandToLCD+0x1b8>)
 8001f8e:	f001 fdb5 	bl	8003afc <HAL_GPIO_ReadPin>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d0f7      	beq.n	8001f88 <commandToLCD+0x19c>
	{}
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010c00 	.word	0x40010c00
 8001fa0:	40011000 	.word	0x40011000
 8001fa4:	40010800 	.word	0x40010800

08001fa8 <printPassword>:
void printPassword(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8001fac:	2201      	movs	r2, #1
 8001fae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb2:	4813      	ldr	r0, [pc, #76]	; (8002000 <printPassword+0x58>)
 8001fb4:	f001 fdb9 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fbe:	4810      	ldr	r0, [pc, #64]	; (8002000 <printPassword+0x58>)
 8001fc0:	f001 fdb3 	bl	8003b2a <HAL_GPIO_WritePin>
	letter('P');
 8001fc4:	2050      	movs	r0, #80	; 0x50
 8001fc6:	f7fe f8c3 	bl	8000150 <letter>
	letter('a');
 8001fca:	2061      	movs	r0, #97	; 0x61
 8001fcc:	f7fe f8c0 	bl	8000150 <letter>
	letter('s');
 8001fd0:	2073      	movs	r0, #115	; 0x73
 8001fd2:	f7fe f8bd 	bl	8000150 <letter>
	letter('s');
 8001fd6:	2073      	movs	r0, #115	; 0x73
 8001fd8:	f7fe f8ba 	bl	8000150 <letter>
	letter('w');
 8001fdc:	2077      	movs	r0, #119	; 0x77
 8001fde:	f7fe f8b7 	bl	8000150 <letter>
	letter('o');
 8001fe2:	206f      	movs	r0, #111	; 0x6f
 8001fe4:	f7fe f8b4 	bl	8000150 <letter>
	letter('r');
 8001fe8:	2072      	movs	r0, #114	; 0x72
 8001fea:	f7fe f8b1 	bl	8000150 <letter>
	letter('d');
 8001fee:	2064      	movs	r0, #100	; 0x64
 8001ff0:	f7fe f8ae 	bl	8000150 <letter>
	letter(':');
 8001ff4:	203a      	movs	r0, #58	; 0x3a
 8001ff6:	f7fe f8ab 	bl	8000150 <letter>
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40010c00 	.word	0x40010c00

08002004 <line1>:
void line1(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800200e:	4823      	ldr	r0, [pc, #140]	; (800209c <line1+0x98>)
 8002010:	f001 fd8b 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800201a:	4820      	ldr	r0, [pc, #128]	; (800209c <line1+0x98>)
 800201c:	f001 fd85 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002020:	2201      	movs	r2, #1
 8002022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002026:	481d      	ldr	r0, [pc, #116]	; (800209c <line1+0x98>)
 8002028:	f001 fd7f 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 1
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002032:	481b      	ldr	r0, [pc, #108]	; (80020a0 <line1+0x9c>)
 8002034:	f001 fd79 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203e:	4818      	ldr	r0, [pc, #96]	; (80020a0 <line1+0x9c>)
 8002040:	f001 fd73 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 8002044:	2200      	movs	r2, #0
 8002046:	2140      	movs	r1, #64	; 0x40
 8002048:	4815      	ldr	r0, [pc, #84]	; (80020a0 <line1+0x9c>)
 800204a:	f001 fd6e 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 800204e:	2200      	movs	r2, #0
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	4813      	ldr	r0, [pc, #76]	; (80020a0 <line1+0x9c>)
 8002054:	f001 fd69 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 8002058:	2200      	movs	r2, #0
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	4811      	ldr	r0, [pc, #68]	; (80020a4 <line1+0xa0>)
 800205e:	f001 fd64 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002068:	480e      	ldr	r0, [pc, #56]	; (80020a4 <line1+0xa0>)
 800206a:	f001 fd5e 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <line1+0xa0>)
 8002076:	f001 fd58 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002080:	4808      	ldr	r0, [pc, #32]	; (80020a4 <line1+0xa0>)
 8002082:	f001 fd52 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <line1+0x98>)
 800208e:	f001 fd4c 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002092:	2005      	movs	r0, #5
 8002094:	f001 fad6 	bl	8003644 <HAL_Delay>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40010c00 	.word	0x40010c00
 80020a0:	40011000 	.word	0x40011000
 80020a4:	40010800 	.word	0x40010800

080020a8 <line2>:
void line2(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b2:	4823      	ldr	r0, [pc, #140]	; (8002140 <line2+0x98>)
 80020b4:	f001 fd39 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020be:	4820      	ldr	r0, [pc, #128]	; (8002140 <line2+0x98>)
 80020c0:	f001 fd33 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 80020c4:	2201      	movs	r2, #1
 80020c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020ca:	481d      	ldr	r0, [pc, #116]	; (8002140 <line2+0x98>)
 80020cc:	f001 fd2d 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);//D0	//Set DDRAM to start of line 2
 80020d0:	2200      	movs	r2, #0
 80020d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d6:	481b      	ldr	r0, [pc, #108]	; (8002144 <line2+0x9c>)
 80020d8:	f001 fd27 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e2:	4818      	ldr	r0, [pc, #96]	; (8002144 <line2+0x9c>)
 80020e4:	f001 fd21 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 80020e8:	2200      	movs	r2, #0
 80020ea:	2140      	movs	r1, #64	; 0x40
 80020ec:	4815      	ldr	r0, [pc, #84]	; (8002144 <line2+0x9c>)
 80020ee:	f001 fd1c 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 80020f2:	2200      	movs	r2, #0
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	4813      	ldr	r0, [pc, #76]	; (8002144 <line2+0x9c>)
 80020f8:	f001 fd17 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80020fc:	2200      	movs	r2, #0
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	4811      	ldr	r0, [pc, #68]	; (8002148 <line2+0xa0>)
 8002102:	f001 fd12 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 8002106:	2200      	movs	r2, #0
 8002108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800210c:	480e      	ldr	r0, [pc, #56]	; (8002148 <line2+0xa0>)
 800210e:	f001 fd0c 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//D6
 8002112:	2201      	movs	r2, #1
 8002114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002118:	480b      	ldr	r0, [pc, #44]	; (8002148 <line2+0xa0>)
 800211a:	f001 fd06 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);//D7
 800211e:	2201      	movs	r2, #1
 8002120:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002124:	4808      	ldr	r0, [pc, #32]	; (8002148 <line2+0xa0>)
 8002126:	f001 fd00 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);//E low
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002130:	4803      	ldr	r0, [pc, #12]	; (8002140 <line2+0x98>)
 8002132:	f001 fcfa 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002136:	2005      	movs	r0, #5
 8002138:	f001 fa84 	bl	8003644 <HAL_Delay>
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40010c00 	.word	0x40010c00
 8002144:	40011000 	.word	0x40011000
 8002148:	40010800 	.word	0x40010800

0800214c <clear>:
void clear()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//RS low
 8002150:	2200      	movs	r2, #0
 8002152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002156:	4823      	ldr	r0, [pc, #140]	; (80021e4 <clear+0x98>)
 8002158:	f001 fce7 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800215c:	2200      	movs	r2, #0
 800215e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002162:	4820      	ldr	r0, [pc, #128]	; (80021e4 <clear+0x98>)
 8002164:	f001 fce1 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);//E high
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216e:	481d      	ldr	r0, [pc, #116]	; (80021e4 <clear+0x98>)
 8002170:	f001 fcdb 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);//D0	//Home and clear LCD
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217a:	481b      	ldr	r0, [pc, #108]	; (80021e8 <clear+0x9c>)
 800217c:	f001 fcd5 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);//D1
 8002180:	2200      	movs	r2, #0
 8002182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002186:	4818      	ldr	r0, [pc, #96]	; (80021e8 <clear+0x9c>)
 8002188:	f001 fccf 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);//D2
 800218c:	2200      	movs	r2, #0
 800218e:	2140      	movs	r1, #64	; 0x40
 8002190:	4815      	ldr	r0, [pc, #84]	; (80021e8 <clear+0x9c>)
 8002192:	f001 fcca 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);//D3
 8002196:	2200      	movs	r2, #0
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	4813      	ldr	r0, [pc, #76]	; (80021e8 <clear+0x9c>)
 800219c:	f001 fcc5 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);//D4
 80021a0:	2200      	movs	r2, #0
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	4811      	ldr	r0, [pc, #68]	; (80021ec <clear+0xa0>)
 80021a6:	f001 fcc0 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);//D5
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b0:	480e      	ldr	r0, [pc, #56]	; (80021ec <clear+0xa0>)
 80021b2:	f001 fcba 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//D6
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021bc:	480b      	ldr	r0, [pc, #44]	; (80021ec <clear+0xa0>)
 80021be:	f001 fcb4 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);//D7
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c8:	4808      	ldr	r0, [pc, #32]	; (80021ec <clear+0xa0>)
 80021ca:	f001 fcae 	bl	8003b2a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0); //E low
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d4:	4803      	ldr	r0, [pc, #12]	; (80021e4 <clear+0x98>)
 80021d6:	f001 fca8 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80021da:	2005      	movs	r0, #5
 80021dc:	f001 fa32 	bl	8003644 <HAL_Delay>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40010c00 	.word	0x40010c00
 80021e8:	40011000 	.word	0x40011000
 80021ec:	40010800 	.word	0x40010800

080021f0 <correct>:
void correct()
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021fa:	4811      	ldr	r0, [pc, #68]	; (8002240 <correct+0x50>)
 80021fc:	f001 fc95 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002206:	480e      	ldr	r0, [pc, #56]	; (8002240 <correct+0x50>)
 8002208:	f001 fc8f 	bl	8003b2a <HAL_GPIO_WritePin>
	letter('C');
 800220c:	2043      	movs	r0, #67	; 0x43
 800220e:	f7fd ff9f 	bl	8000150 <letter>
	letter('o');
 8002212:	206f      	movs	r0, #111	; 0x6f
 8002214:	f7fd ff9c 	bl	8000150 <letter>
	letter('r');
 8002218:	2072      	movs	r0, #114	; 0x72
 800221a:	f7fd ff99 	bl	8000150 <letter>
	letter('r');
 800221e:	2072      	movs	r0, #114	; 0x72
 8002220:	f7fd ff96 	bl	8000150 <letter>
	letter('e');
 8002224:	2065      	movs	r0, #101	; 0x65
 8002226:	f7fd ff93 	bl	8000150 <letter>
	letter('c');
 800222a:	2063      	movs	r0, #99	; 0x63
 800222c:	f7fd ff90 	bl	8000150 <letter>
	letter('t');
 8002230:	2074      	movs	r0, #116	; 0x74
 8002232:	f7fd ff8d 	bl	8000150 <letter>
	letter('!');
 8002236:	2021      	movs	r0, #33	; 0x21
 8002238:	f7fd ff8a 	bl	8000150 <letter>
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40010c00 	.word	0x40010c00

08002244 <getVal>:
void getVal(int max)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	count = 0;
 800224c:	4b01      	ldr	r3, [pc, #4]	; (8002254 <getVal+0x10>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
	while(count<max)
 8002252:	e1ba      	b.n	80025ca <getVal+0x386>
 8002254:	2000002c 	.word	0x2000002c
	{

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);//ROW1
 8002258:	2201      	movs	r2, #1
 800225a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800225e:	48c0      	ldr	r0, [pc, #768]	; (8002560 <getVal+0x31c>)
 8002260:	f001 fc63 	bl	8003b2a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002264:	2104      	movs	r1, #4
 8002266:	48bf      	ldr	r0, [pc, #764]	; (8002564 <getVal+0x320>)
 8002268:	f001 fc48 	bl	8003afc <HAL_GPIO_ReadPin>
 800226c:	4603      	mov	r3, r0
 800226e:	2b01      	cmp	r3, #1
 8002270:	d118      	bne.n	80022a4 <getVal+0x60>
	  {
		  letter('1');
 8002272:	2031      	movs	r0, #49	; 0x31
 8002274:	f7fd ff6c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002278:	bf00      	nop
 800227a:	2104      	movs	r1, #4
 800227c:	48b9      	ldr	r0, [pc, #740]	; (8002564 <getVal+0x320>)
 800227e:	f001 fc3d 	bl	8003afc <HAL_GPIO_ReadPin>
 8002282:	4603      	mov	r3, r0
 8002284:	2b01      	cmp	r3, #1
 8002286:	d0f8      	beq.n	800227a <getVal+0x36>
		  {}
		  HAL_Delay(100);
 8002288:	2064      	movs	r0, #100	; 0x64
 800228a:	f001 f9db 	bl	8003644 <HAL_Delay>
		  val[count] = 1;
 800228e:	4bb6      	ldr	r3, [pc, #728]	; (8002568 <getVal+0x324>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4ab6      	ldr	r2, [pc, #728]	; (800256c <getVal+0x328>)
 8002294:	2101      	movs	r1, #1
 8002296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 800229a:	4bb3      	ldr	r3, [pc, #716]	; (8002568 <getVal+0x324>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	4ab1      	ldr	r2, [pc, #708]	; (8002568 <getVal+0x324>)
 80022a2:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 80022a4:	2102      	movs	r1, #2
 80022a6:	48af      	ldr	r0, [pc, #700]	; (8002564 <getVal+0x320>)
 80022a8:	f001 fc28 	bl	8003afc <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d118      	bne.n	80022e4 <getVal+0xa0>
	  {
		  letter('2');
 80022b2:	2032      	movs	r0, #50	; 0x32
 80022b4:	f7fd ff4c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 80022b8:	bf00      	nop
 80022ba:	2102      	movs	r1, #2
 80022bc:	48a9      	ldr	r0, [pc, #676]	; (8002564 <getVal+0x320>)
 80022be:	f001 fc1d 	bl	8003afc <HAL_GPIO_ReadPin>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d0f8      	beq.n	80022ba <getVal+0x76>
		  {}
		  HAL_Delay(100);
 80022c8:	2064      	movs	r0, #100	; 0x64
 80022ca:	f001 f9bb 	bl	8003644 <HAL_Delay>
		  val[count] = 2;
 80022ce:	4ba6      	ldr	r3, [pc, #664]	; (8002568 <getVal+0x324>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4aa6      	ldr	r2, [pc, #664]	; (800256c <getVal+0x328>)
 80022d4:	2102      	movs	r1, #2
 80022d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80022da:	4ba3      	ldr	r3, [pc, #652]	; (8002568 <getVal+0x324>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	4aa1      	ldr	r2, [pc, #644]	; (8002568 <getVal+0x324>)
 80022e2:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80022e4:	2101      	movs	r1, #1
 80022e6:	489f      	ldr	r0, [pc, #636]	; (8002564 <getVal+0x320>)
 80022e8:	f001 fc08 	bl	8003afc <HAL_GPIO_ReadPin>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d118      	bne.n	8002324 <getVal+0xe0>
	  {
		  letter('3');
 80022f2:	2033      	movs	r0, #51	; 0x33
 80022f4:	f7fd ff2c 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80022f8:	bf00      	nop
 80022fa:	2101      	movs	r1, #1
 80022fc:	4899      	ldr	r0, [pc, #612]	; (8002564 <getVal+0x320>)
 80022fe:	f001 fbfd 	bl	8003afc <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d0f8      	beq.n	80022fa <getVal+0xb6>
		  {}
		  HAL_Delay(100);
 8002308:	2064      	movs	r0, #100	; 0x64
 800230a:	f001 f99b 	bl	8003644 <HAL_Delay>
		  val[count] = 3;
 800230e:	4b96      	ldr	r3, [pc, #600]	; (8002568 <getVal+0x324>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a96      	ldr	r2, [pc, #600]	; (800256c <getVal+0x328>)
 8002314:	2103      	movs	r1, #3
 8002316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 800231a:	4b93      	ldr	r3, [pc, #588]	; (8002568 <getVal+0x324>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3301      	adds	r3, #1
 8002320:	4a91      	ldr	r2, [pc, #580]	; (8002568 <getVal+0x324>)
 8002322:	6013      	str	r3, [r2, #0]
	  }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800232a:	488d      	ldr	r0, [pc, #564]	; (8002560 <getVal+0x31c>)
 800232c:	f001 fbfd 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);//ROW2
 8002330:	2201      	movs	r2, #1
 8002332:	2104      	movs	r1, #4
 8002334:	488e      	ldr	r0, [pc, #568]	; (8002570 <getVal+0x32c>)
 8002336:	f001 fbf8 	bl	8003b2a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 800233a:	2104      	movs	r1, #4
 800233c:	4889      	ldr	r0, [pc, #548]	; (8002564 <getVal+0x320>)
 800233e:	f001 fbdd 	bl	8003afc <HAL_GPIO_ReadPin>
 8002342:	4603      	mov	r3, r0
 8002344:	2b01      	cmp	r3, #1
 8002346:	d118      	bne.n	800237a <getVal+0x136>
	  {
		  letter('4');
 8002348:	2034      	movs	r0, #52	; 0x34
 800234a:	f7fd ff01 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 800234e:	bf00      	nop
 8002350:	2104      	movs	r1, #4
 8002352:	4884      	ldr	r0, [pc, #528]	; (8002564 <getVal+0x320>)
 8002354:	f001 fbd2 	bl	8003afc <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d0f8      	beq.n	8002350 <getVal+0x10c>
		  {}
		  HAL_Delay(100);
 800235e:	2064      	movs	r0, #100	; 0x64
 8002360:	f001 f970 	bl	8003644 <HAL_Delay>
		  val[count] = 4;
 8002364:	4b80      	ldr	r3, [pc, #512]	; (8002568 <getVal+0x324>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a80      	ldr	r2, [pc, #512]	; (800256c <getVal+0x328>)
 800236a:	2104      	movs	r1, #4
 800236c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8002370:	4b7d      	ldr	r3, [pc, #500]	; (8002568 <getVal+0x324>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3301      	adds	r3, #1
 8002376:	4a7c      	ldr	r2, [pc, #496]	; (8002568 <getVal+0x324>)
 8002378:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 800237a:	2102      	movs	r1, #2
 800237c:	4879      	ldr	r0, [pc, #484]	; (8002564 <getVal+0x320>)
 800237e:	f001 fbbd 	bl	8003afc <HAL_GPIO_ReadPin>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d118      	bne.n	80023ba <getVal+0x176>
	  {
		  letter('5');
 8002388:	2035      	movs	r0, #53	; 0x35
 800238a:	f7fd fee1 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800238e:	bf00      	nop
 8002390:	2102      	movs	r1, #2
 8002392:	4874      	ldr	r0, [pc, #464]	; (8002564 <getVal+0x320>)
 8002394:	f001 fbb2 	bl	8003afc <HAL_GPIO_ReadPin>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d0f8      	beq.n	8002390 <getVal+0x14c>
		  {}
		  HAL_Delay(100);
 800239e:	2064      	movs	r0, #100	; 0x64
 80023a0:	f001 f950 	bl	8003644 <HAL_Delay>
		  val[count] = 5;
 80023a4:	4b70      	ldr	r3, [pc, #448]	; (8002568 <getVal+0x324>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a70      	ldr	r2, [pc, #448]	; (800256c <getVal+0x328>)
 80023aa:	2105      	movs	r1, #5
 80023ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80023b0:	4b6d      	ldr	r3, [pc, #436]	; (8002568 <getVal+0x324>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	4a6c      	ldr	r2, [pc, #432]	; (8002568 <getVal+0x324>)
 80023b8:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 80023ba:	2101      	movs	r1, #1
 80023bc:	4869      	ldr	r0, [pc, #420]	; (8002564 <getVal+0x320>)
 80023be:	f001 fb9d 	bl	8003afc <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d118      	bne.n	80023fa <getVal+0x1b6>
	  {
		  letter('6');
 80023c8:	2036      	movs	r0, #54	; 0x36
 80023ca:	f7fd fec1 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80023ce:	bf00      	nop
 80023d0:	2101      	movs	r1, #1
 80023d2:	4864      	ldr	r0, [pc, #400]	; (8002564 <getVal+0x320>)
 80023d4:	f001 fb92 	bl	8003afc <HAL_GPIO_ReadPin>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d0f8      	beq.n	80023d0 <getVal+0x18c>
		  {}
		  HAL_Delay(100);
 80023de:	2064      	movs	r0, #100	; 0x64
 80023e0:	f001 f930 	bl	8003644 <HAL_Delay>
		  val[count] = 6;
 80023e4:	4b60      	ldr	r3, [pc, #384]	; (8002568 <getVal+0x324>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a60      	ldr	r2, [pc, #384]	; (800256c <getVal+0x328>)
 80023ea:	2106      	movs	r1, #6
 80023ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80023f0:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <getVal+0x324>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	4a5c      	ldr	r2, [pc, #368]	; (8002568 <getVal+0x324>)
 80023f8:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 80023fa:	2200      	movs	r2, #0
 80023fc:	2104      	movs	r1, #4
 80023fe:	485c      	ldr	r0, [pc, #368]	; (8002570 <getVal+0x32c>)
 8002400:	f001 fb93 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);//ROW3
 8002404:	2201      	movs	r2, #1
 8002406:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800240a:	4855      	ldr	r0, [pc, #340]	; (8002560 <getVal+0x31c>)
 800240c:	f001 fb8d 	bl	8003b2a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 8002410:	2104      	movs	r1, #4
 8002412:	4854      	ldr	r0, [pc, #336]	; (8002564 <getVal+0x320>)
 8002414:	f001 fb72 	bl	8003afc <HAL_GPIO_ReadPin>
 8002418:	4603      	mov	r3, r0
 800241a:	2b01      	cmp	r3, #1
 800241c:	d118      	bne.n	8002450 <getVal+0x20c>
	  {
		  letter('7');
 800241e:	2037      	movs	r0, #55	; 0x37
 8002420:	f7fd fe96 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 8002424:	bf00      	nop
 8002426:	2104      	movs	r1, #4
 8002428:	484e      	ldr	r0, [pc, #312]	; (8002564 <getVal+0x320>)
 800242a:	f001 fb67 	bl	8003afc <HAL_GPIO_ReadPin>
 800242e:	4603      	mov	r3, r0
 8002430:	2b01      	cmp	r3, #1
 8002432:	d0f8      	beq.n	8002426 <getVal+0x1e2>
		  {}
		  HAL_Delay(100);
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f001 f905 	bl	8003644 <HAL_Delay>
		  val[count] = 7;
 800243a:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <getVal+0x324>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a4b      	ldr	r2, [pc, #300]	; (800256c <getVal+0x328>)
 8002440:	2107      	movs	r1, #7
 8002442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8002446:	4b48      	ldr	r3, [pc, #288]	; (8002568 <getVal+0x324>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	4a46      	ldr	r2, [pc, #280]	; (8002568 <getVal+0x324>)
 800244e:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002450:	2102      	movs	r1, #2
 8002452:	4844      	ldr	r0, [pc, #272]	; (8002564 <getVal+0x320>)
 8002454:	f001 fb52 	bl	8003afc <HAL_GPIO_ReadPin>
 8002458:	4603      	mov	r3, r0
 800245a:	2b01      	cmp	r3, #1
 800245c:	d118      	bne.n	8002490 <getVal+0x24c>
	  {
		  letter('8');
 800245e:	2038      	movs	r0, #56	; 0x38
 8002460:	f7fd fe76 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 8002464:	bf00      	nop
 8002466:	2102      	movs	r1, #2
 8002468:	483e      	ldr	r0, [pc, #248]	; (8002564 <getVal+0x320>)
 800246a:	f001 fb47 	bl	8003afc <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d0f8      	beq.n	8002466 <getVal+0x222>
		  {}
		  HAL_Delay(100);
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	f001 f8e5 	bl	8003644 <HAL_Delay>
		  val[count] = 8;
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <getVal+0x324>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a3b      	ldr	r2, [pc, #236]	; (800256c <getVal+0x328>)
 8002480:	2108      	movs	r1, #8
 8002482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 8002486:	4b38      	ldr	r3, [pc, #224]	; (8002568 <getVal+0x324>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	4a36      	ldr	r2, [pc, #216]	; (8002568 <getVal+0x324>)
 800248e:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 8002490:	2101      	movs	r1, #1
 8002492:	4834      	ldr	r0, [pc, #208]	; (8002564 <getVal+0x320>)
 8002494:	f001 fb32 	bl	8003afc <HAL_GPIO_ReadPin>
 8002498:	4603      	mov	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d118      	bne.n	80024d0 <getVal+0x28c>
	  {
		  letter('9');
 800249e:	2039      	movs	r0, #57	; 0x39
 80024a0:	f7fd fe56 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 80024a4:	bf00      	nop
 80024a6:	2101      	movs	r1, #1
 80024a8:	482e      	ldr	r0, [pc, #184]	; (8002564 <getVal+0x320>)
 80024aa:	f001 fb27 	bl	8003afc <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d0f8      	beq.n	80024a6 <getVal+0x262>
		  {}
		  HAL_Delay(100);
 80024b4:	2064      	movs	r0, #100	; 0x64
 80024b6:	f001 f8c5 	bl	8003644 <HAL_Delay>
		  val[count] = 9;
 80024ba:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <getVal+0x324>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2b      	ldr	r2, [pc, #172]	; (800256c <getVal+0x328>)
 80024c0:	2109      	movs	r1, #9
 80024c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <getVal+0x324>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	4a26      	ldr	r2, [pc, #152]	; (8002568 <getVal+0x324>)
 80024ce:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 80024d0:	2200      	movs	r2, #0
 80024d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024d6:	4822      	ldr	r0, [pc, #136]	; (8002560 <getVal+0x31c>)
 80024d8:	f001 fb27 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);//ROW4
 80024dc:	2201      	movs	r2, #1
 80024de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e2:	481f      	ldr	r0, [pc, #124]	; (8002560 <getVal+0x31c>)
 80024e4:	f001 fb21 	bl	8003b2a <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)//COL1
 80024e8:	2104      	movs	r1, #4
 80024ea:	481e      	ldr	r0, [pc, #120]	; (8002564 <getVal+0x320>)
 80024ec:	f001 fb06 	bl	8003afc <HAL_GPIO_ReadPin>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d118      	bne.n	8002528 <getVal+0x2e4>
	  {
		  letter('*');
 80024f6:	202a      	movs	r0, #42	; 0x2a
 80024f8:	f7fd fe2a 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == 1)
 80024fc:	bf00      	nop
 80024fe:	2104      	movs	r1, #4
 8002500:	4818      	ldr	r0, [pc, #96]	; (8002564 <getVal+0x320>)
 8002502:	f001 fafb 	bl	8003afc <HAL_GPIO_ReadPin>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	d0f8      	beq.n	80024fe <getVal+0x2ba>
		  {}
		  HAL_Delay(100);
 800250c:	2064      	movs	r0, #100	; 0x64
 800250e:	f001 f899 	bl	8003644 <HAL_Delay>
		  val[count] = 10;
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <getVal+0x324>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a15      	ldr	r2, [pc, #84]	; (800256c <getVal+0x328>)
 8002518:	210a      	movs	r1, #10
 800251a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <getVal+0x324>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3301      	adds	r3, #1
 8002524:	4a10      	ldr	r2, [pc, #64]	; (8002568 <getVal+0x324>)
 8002526:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)//COL2
 8002528:	2102      	movs	r1, #2
 800252a:	480e      	ldr	r0, [pc, #56]	; (8002564 <getVal+0x320>)
 800252c:	f001 fae6 	bl	8003afc <HAL_GPIO_ReadPin>
 8002530:	4603      	mov	r3, r0
 8002532:	2b01      	cmp	r3, #1
 8002534:	d123      	bne.n	800257e <getVal+0x33a>
	  {
		  letter('0');
 8002536:	2030      	movs	r0, #48	; 0x30
 8002538:	f7fd fe0a 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1)
 800253c:	bf00      	nop
 800253e:	2102      	movs	r1, #2
 8002540:	4808      	ldr	r0, [pc, #32]	; (8002564 <getVal+0x320>)
 8002542:	f001 fadb 	bl	8003afc <HAL_GPIO_ReadPin>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d0f8      	beq.n	800253e <getVal+0x2fa>
		  {}
		  HAL_Delay(100);
 800254c:	2064      	movs	r0, #100	; 0x64
 800254e:	f001 f879 	bl	8003644 <HAL_Delay>
		  val[count] = 0;
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <getVal+0x324>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a05      	ldr	r2, [pc, #20]	; (800256c <getVal+0x328>)
 8002558:	2100      	movs	r1, #0
 800255a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800255e:	e009      	b.n	8002574 <getVal+0x330>
 8002560:	40011000 	.word	0x40011000
 8002564:	40010c00 	.word	0x40010c00
 8002568:	2000002c 	.word	0x2000002c
 800256c:	200023b4 	.word	0x200023b4
 8002570:	40011400 	.word	0x40011400
		  count++;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <getVal+0x39c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	4a19      	ldr	r2, [pc, #100]	; (80025e0 <getVal+0x39c>)
 800257c:	6013      	str	r3, [r2, #0]
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)//COL3
 800257e:	2101      	movs	r1, #1
 8002580:	4818      	ldr	r0, [pc, #96]	; (80025e4 <getVal+0x3a0>)
 8002582:	f001 fabb 	bl	8003afc <HAL_GPIO_ReadPin>
 8002586:	4603      	mov	r3, r0
 8002588:	2b01      	cmp	r3, #1
 800258a:	d118      	bne.n	80025be <getVal+0x37a>
	  {
		  letter('#');
 800258c:	2023      	movs	r0, #35	; 0x23
 800258e:	f7fd fddf 	bl	8000150 <letter>

		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1)
 8002592:	bf00      	nop
 8002594:	2101      	movs	r1, #1
 8002596:	4813      	ldr	r0, [pc, #76]	; (80025e4 <getVal+0x3a0>)
 8002598:	f001 fab0 	bl	8003afc <HAL_GPIO_ReadPin>
 800259c:	4603      	mov	r3, r0
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d0f8      	beq.n	8002594 <getVal+0x350>
		  {}
		  HAL_Delay(100);
 80025a2:	2064      	movs	r0, #100	; 0x64
 80025a4:	f001 f84e 	bl	8003644 <HAL_Delay>
		  val[count] = 11;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <getVal+0x39c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <getVal+0x3a4>)
 80025ae:	210b      	movs	r1, #11
 80025b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  count++;
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <getVal+0x39c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <getVal+0x39c>)
 80025bc:	6013      	str	r3, [r2, #0]
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW3
 80025be:	2200      	movs	r2, #0
 80025c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <getVal+0x3a8>)
 80025c6:	f001 fab0 	bl	8003b2a <HAL_GPIO_WritePin>
	while(count<max)
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <getVal+0x39c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	f73f ae41 	bgt.w	8002258 <getVal+0x14>
	}
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000002c 	.word	0x2000002c
 80025e4:	40010c00 	.word	0x40010c00
 80025e8:	200023b4 	.word	0x200023b4
 80025ec:	40011000 	.word	0x40011000

080025f0 <wrongPass>:
void wrongPass(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80025f4:	2201      	movs	r2, #1
 80025f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025fa:	481a      	ldr	r0, [pc, #104]	; (8002664 <wrongPass+0x74>)
 80025fc:	f001 fa95 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002600:	2200      	movs	r2, #0
 8002602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002606:	4817      	ldr	r0, [pc, #92]	; (8002664 <wrongPass+0x74>)
 8002608:	f001 fa8f 	bl	8003b2a <HAL_GPIO_WritePin>
	letter('W');
 800260c:	2057      	movs	r0, #87	; 0x57
 800260e:	f7fd fd9f 	bl	8000150 <letter>
	letter('r');
 8002612:	2072      	movs	r0, #114	; 0x72
 8002614:	f7fd fd9c 	bl	8000150 <letter>
	letter('o');
 8002618:	206f      	movs	r0, #111	; 0x6f
 800261a:	f7fd fd99 	bl	8000150 <letter>
	letter('n');
 800261e:	206e      	movs	r0, #110	; 0x6e
 8002620:	f7fd fd96 	bl	8000150 <letter>
	letter('g');
 8002624:	2067      	movs	r0, #103	; 0x67
 8002626:	f7fd fd93 	bl	8000150 <letter>
	letter(' ');
 800262a:	2020      	movs	r0, #32
 800262c:	f7fd fd90 	bl	8000150 <letter>
	letter('P');
 8002630:	2050      	movs	r0, #80	; 0x50
 8002632:	f7fd fd8d 	bl	8000150 <letter>
	letter('a');
 8002636:	2061      	movs	r0, #97	; 0x61
 8002638:	f7fd fd8a 	bl	8000150 <letter>
	letter('s');
 800263c:	2073      	movs	r0, #115	; 0x73
 800263e:	f7fd fd87 	bl	8000150 <letter>
	letter('s');
 8002642:	2073      	movs	r0, #115	; 0x73
 8002644:	f7fd fd84 	bl	8000150 <letter>
	letter('w');
 8002648:	2077      	movs	r0, #119	; 0x77
 800264a:	f7fd fd81 	bl	8000150 <letter>
	letter('o');
 800264e:	206f      	movs	r0, #111	; 0x6f
 8002650:	f7fd fd7e 	bl	8000150 <letter>
	letter('r');
 8002654:	2072      	movs	r0, #114	; 0x72
 8002656:	f7fd fd7b 	bl	8000150 <letter>
	letter('d');
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	f7fd fd78 	bl	8000150 <letter>
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40010c00 	.word	0x40010c00

08002668 <green>:
void green(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800266c:	2201      	movs	r2, #1
 800266e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002672:	4816      	ldr	r0, [pc, #88]	; (80026cc <green+0x64>)
 8002674:	f001 fa59 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002678:	2200      	movs	r2, #0
 800267a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800267e:	4813      	ldr	r0, [pc, #76]	; (80026cc <green+0x64>)
 8002680:	f001 fa53 	bl	8003b2a <HAL_GPIO_WritePin>
	letter('G');
 8002684:	2047      	movs	r0, #71	; 0x47
 8002686:	f7fd fd63 	bl	8000150 <letter>
	letter('r');
 800268a:	2072      	movs	r0, #114	; 0x72
 800268c:	f7fd fd60 	bl	8000150 <letter>
	letter('e');
 8002690:	2065      	movs	r0, #101	; 0x65
 8002692:	f7fd fd5d 	bl	8000150 <letter>
	letter('e');
 8002696:	2065      	movs	r0, #101	; 0x65
 8002698:	f7fd fd5a 	bl	8000150 <letter>
	letter('n');
 800269c:	206e      	movs	r0, #110	; 0x6e
 800269e:	f7fd fd57 	bl	8000150 <letter>
	letter(' ');
 80026a2:	2020      	movs	r0, #32
 80026a4:	f7fd fd54 	bl	8000150 <letter>
	letter('1');
 80026a8:	2031      	movs	r0, #49	; 0x31
 80026aa:	f7fd fd51 	bl	8000150 <letter>
	letter('-');
 80026ae:	202d      	movs	r0, #45	; 0x2d
 80026b0:	f7fd fd4e 	bl	8000150 <letter>
	letter('3');
 80026b4:	2033      	movs	r0, #51	; 0x33
 80026b6:	f7fd fd4b 	bl	8000150 <letter>
	letter(':');
 80026ba:	203a      	movs	r0, #58	; 0x3a
 80026bc:	f7fd fd48 	bl	8000150 <letter>

	getVal(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff fdbf 	bl	8002244 <getVal>
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40010c00 	.word	0x40010c00

080026d0 <timer>:

void timer(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80026d4:	2201      	movs	r2, #1
 80026d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026da:	481c      	ldr	r0, [pc, #112]	; (800274c <timer+0x7c>)
 80026dc:	f001 fa25 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80026e0:	2200      	movs	r2, #0
 80026e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026e6:	4819      	ldr	r0, [pc, #100]	; (800274c <timer+0x7c>)
 80026e8:	f001 fa1f 	bl	8003b2a <HAL_GPIO_WritePin>

	letter('T');
 80026ec:	2054      	movs	r0, #84	; 0x54
 80026ee:	f7fd fd2f 	bl	8000150 <letter>
	letter('i');
 80026f2:	2069      	movs	r0, #105	; 0x69
 80026f4:	f7fd fd2c 	bl	8000150 <letter>
	letter('m');
 80026f8:	206d      	movs	r0, #109	; 0x6d
 80026fa:	f7fd fd29 	bl	8000150 <letter>
	letter('e');
 80026fe:	2065      	movs	r0, #101	; 0x65
 8002700:	f7fd fd26 	bl	8000150 <letter>
	letter(' ');
 8002704:	2020      	movs	r0, #32
 8002706:	f7fd fd23 	bl	8000150 <letter>
	letter('0');
 800270a:	2030      	movs	r0, #48	; 0x30
 800270c:	f7fd fd20 	bl	8000150 <letter>
	letter('0');
 8002710:	2030      	movs	r0, #48	; 0x30
 8002712:	f7fd fd1d 	bl	8000150 <letter>
	letter('-');
 8002716:	202d      	movs	r0, #45	; 0x2d
 8002718:	f7fd fd1a 	bl	8000150 <letter>
	letter('6');
 800271c:	2036      	movs	r0, #54	; 0x36
 800271e:	f7fd fd17 	bl	8000150 <letter>
	letter('0');
 8002722:	2030      	movs	r0, #48	; 0x30
 8002724:	f7fd fd14 	bl	8000150 <letter>
	letter('m');
 8002728:	206d      	movs	r0, #109	; 0x6d
 800272a:	f7fd fd11 	bl	8000150 <letter>
	letter('i');
 800272e:	2069      	movs	r0, #105	; 0x69
 8002730:	f7fd fd0e 	bl	8000150 <letter>
	letter('n');
 8002734:	206e      	movs	r0, #110	; 0x6e
 8002736:	f7fd fd0b 	bl	8000150 <letter>
	letter(':');
 800273a:	203a      	movs	r0, #58	; 0x3a
 800273c:	f7fd fd08 	bl	8000150 <letter>

	getVal(2);
 8002740:	2002      	movs	r0, #2
 8002742:	f7ff fd7f 	bl	8002244 <getVal>
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40010c00 	.word	0x40010c00

08002750 <quit>:

void quit(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002754:	2201      	movs	r2, #1
 8002756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800275a:	4822      	ldr	r0, [pc, #136]	; (80027e4 <quit+0x94>)
 800275c:	f001 f9e5 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002760:	2200      	movs	r2, #0
 8002762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002766:	481f      	ldr	r0, [pc, #124]	; (80027e4 <quit+0x94>)
 8002768:	f001 f9df 	bl	8003b2a <HAL_GPIO_WritePin>

	letter('Q');
 800276c:	2051      	movs	r0, #81	; 0x51
 800276e:	f7fd fcef 	bl	8000150 <letter>
	letter('u');
 8002772:	2075      	movs	r0, #117	; 0x75
 8002774:	f7fd fcec 	bl	8000150 <letter>
	letter('i');
 8002778:	2069      	movs	r0, #105	; 0x69
 800277a:	f7fd fce9 	bl	8000150 <letter>
	letter('t');
 800277e:	2074      	movs	r0, #116	; 0x74
 8002780:	f7fd fce6 	bl	8000150 <letter>
	letter('?');
 8002784:	203f      	movs	r0, #63	; 0x3f
 8002786:	f7fd fce3 	bl	8000150 <letter>
	letter(' ');
 800278a:	2020      	movs	r0, #32
 800278c:	f7fd fce0 	bl	8000150 <letter>
	letter('y');
 8002790:	2079      	movs	r0, #121	; 0x79
 8002792:	f7fd fcdd 	bl	8000150 <letter>
	letter('e');
 8002796:	2065      	movs	r0, #101	; 0x65
 8002798:	f7fd fcda 	bl	8000150 <letter>
	letter('s');
 800279c:	2073      	movs	r0, #115	; 0x73
 800279e:	f7fd fcd7 	bl	8000150 <letter>
	letter('-');
 80027a2:	202d      	movs	r0, #45	; 0x2d
 80027a4:	f7fd fcd4 	bl	8000150 <letter>
	letter('1');
 80027a8:	2031      	movs	r0, #49	; 0x31
 80027aa:	f7fd fcd1 	bl	8000150 <letter>
	letter(' ');
 80027ae:	2020      	movs	r0, #32
 80027b0:	f7fd fcce 	bl	8000150 <letter>
	letter('n');
 80027b4:	206e      	movs	r0, #110	; 0x6e
 80027b6:	f7fd fccb 	bl	8000150 <letter>
	letter('o');
 80027ba:	206f      	movs	r0, #111	; 0x6f
 80027bc:	f7fd fcc8 	bl	8000150 <letter>
	letter('-');
 80027c0:	202d      	movs	r0, #45	; 0x2d
 80027c2:	f7fd fcc5 	bl	8000150 <letter>
	letter('0');
 80027c6:	2030      	movs	r0, #48	; 0x30
 80027c8:	f7fd fcc2 	bl	8000150 <letter>

	line2();
 80027cc:	f7ff fc6c 	bl	80020a8 <line2>
	getVal(1);
 80027d0:	2001      	movs	r0, #1
 80027d2:	f7ff fd37 	bl	8002244 <getVal>
	val[6] = val[0];
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <quit+0x98>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a03      	ldr	r2, [pc, #12]	; (80027e8 <quit+0x98>)
 80027dc:	6193      	str	r3, [r2, #24]
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40010c00 	.word	0x40010c00
 80027e8:	200023b4 	.word	0x200023b4

080027ec <onOffTime>:
void onOffTime(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80027f0:	2201      	movs	r2, #1
 80027f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027f6:	4820      	ldr	r0, [pc, #128]	; (8002878 <onOffTime+0x8c>)
 80027f8:	f001 f997 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80027fc:	2200      	movs	r2, #0
 80027fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002802:	481d      	ldr	r0, [pc, #116]	; (8002878 <onOffTime+0x8c>)
 8002804:	f001 f991 	bl	8003b2a <HAL_GPIO_WritePin>
	letter('0');
 8002808:	2030      	movs	r0, #48	; 0x30
 800280a:	f7fd fca1 	bl	8000150 <letter>
	letter('-');
 800280e:	202d      	movs	r0, #45	; 0x2d
 8002810:	f7fd fc9e 	bl	8000150 <letter>
	letter('O');
 8002814:	204f      	movs	r0, #79	; 0x4f
 8002816:	f7fd fc9b 	bl	8000150 <letter>
	letter('n');
 800281a:	206e      	movs	r0, #110	; 0x6e
 800281c:	f7fd fc98 	bl	8000150 <letter>
	letter('/');
 8002820:	202f      	movs	r0, #47	; 0x2f
 8002822:	f7fd fc95 	bl	8000150 <letter>
	letter('O');
 8002826:	204f      	movs	r0, #79	; 0x4f
 8002828:	f7fd fc92 	bl	8000150 <letter>
	letter('f');
 800282c:	2066      	movs	r0, #102	; 0x66
 800282e:	f7fd fc8f 	bl	8000150 <letter>
	letter('f');
 8002832:	2066      	movs	r0, #102	; 0x66
 8002834:	f7fd fc8c 	bl	8000150 <letter>
	letter(' ');
 8002838:	2020      	movs	r0, #32
 800283a:	f7fd fc89 	bl	8000150 <letter>
	letter('1');
 800283e:	2031      	movs	r0, #49	; 0x31
 8002840:	f7fd fc86 	bl	8000150 <letter>
	letter('-');
 8002844:	202d      	movs	r0, #45	; 0x2d
 8002846:	f7fd fc83 	bl	8000150 <letter>
	letter('T');
 800284a:	2054      	movs	r0, #84	; 0x54
 800284c:	f7fd fc80 	bl	8000150 <letter>
	letter('i');
 8002850:	2069      	movs	r0, #105	; 0x69
 8002852:	f7fd fc7d 	bl	8000150 <letter>
	letter('m');
 8002856:	206d      	movs	r0, #109	; 0x6d
 8002858:	f7fd fc7a 	bl	8000150 <letter>
	letter('e');
 800285c:	2065      	movs	r0, #101	; 0x65
 800285e:	f7fd fc77 	bl	8000150 <letter>
	letter('r');
 8002862:	2072      	movs	r0, #114	; 0x72
 8002864:	f7fd fc74 	bl	8000150 <letter>

	line2();
 8002868:	f7ff fc1e 	bl	80020a8 <line2>
	getVal(1);
 800286c:	2001      	movs	r0, #1
 800286e:	f7ff fce9 	bl	8002244 <getVal>
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40010c00 	.word	0x40010c00

0800287c <onOff>:
void onOff(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 8002880:	2201      	movs	r2, #1
 8002882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002886:	4817      	ldr	r0, [pc, #92]	; (80028e4 <onOff+0x68>)
 8002888:	f001 f94f 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 800288c:	2200      	movs	r2, #0
 800288e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002892:	4814      	ldr	r0, [pc, #80]	; (80028e4 <onOff+0x68>)
 8002894:	f001 f949 	bl	8003b2a <HAL_GPIO_WritePin>
	letter('0');
 8002898:	2030      	movs	r0, #48	; 0x30
 800289a:	f7fd fc59 	bl	8000150 <letter>
	letter('-');
 800289e:	202d      	movs	r0, #45	; 0x2d
 80028a0:	f7fd fc56 	bl	8000150 <letter>
	letter('O');
 80028a4:	204f      	movs	r0, #79	; 0x4f
 80028a6:	f7fd fc53 	bl	8000150 <letter>
	letter('n');
 80028aa:	206e      	movs	r0, #110	; 0x6e
 80028ac:	f7fd fc50 	bl	8000150 <letter>
	letter(' ');
 80028b0:	2020      	movs	r0, #32
 80028b2:	f7fd fc4d 	bl	8000150 <letter>
	letter('1');
 80028b6:	2031      	movs	r0, #49	; 0x31
 80028b8:	f7fd fc4a 	bl	8000150 <letter>
	letter('-');
 80028bc:	202d      	movs	r0, #45	; 0x2d
 80028be:	f7fd fc47 	bl	8000150 <letter>
	letter('O');
 80028c2:	204f      	movs	r0, #79	; 0x4f
 80028c4:	f7fd fc44 	bl	8000150 <letter>
	letter('f');
 80028c8:	2066      	movs	r0, #102	; 0x66
 80028ca:	f7fd fc41 	bl	8000150 <letter>
	letter('f');
 80028ce:	2066      	movs	r0, #102	; 0x66
 80028d0:	f7fd fc3e 	bl	8000150 <letter>
	letter(':');
 80028d4:	203a      	movs	r0, #58	; 0x3a
 80028d6:	f7fd fc3b 	bl	8000150 <letter>

	getVal(1);
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff fcb2 	bl	8002244 <getVal>
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40010c00 	.word	0x40010c00

080028e8 <error>:
void error(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 80028ec:	2201      	movs	r2, #1
 80028ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f2:	482a      	ldr	r0, [pc, #168]	; (800299c <error+0xb4>)
 80028f4:	f001 f919 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 80028f8:	2200      	movs	r2, #0
 80028fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028fe:	4827      	ldr	r0, [pc, #156]	; (800299c <error+0xb4>)
 8002900:	f001 f913 	bl	8003b2a <HAL_GPIO_WritePin>

	letter('E');
 8002904:	2045      	movs	r0, #69	; 0x45
 8002906:	f7fd fc23 	bl	8000150 <letter>
	letter('r');
 800290a:	2072      	movs	r0, #114	; 0x72
 800290c:	f7fd fc20 	bl	8000150 <letter>
	letter('r');
 8002910:	2072      	movs	r0, #114	; 0x72
 8002912:	f7fd fc1d 	bl	8000150 <letter>
	letter('o');
 8002916:	206f      	movs	r0, #111	; 0x6f
 8002918:	f7fd fc1a 	bl	8000150 <letter>
	letter('r');
 800291c:	2072      	movs	r0, #114	; 0x72
 800291e:	f7fd fc17 	bl	8000150 <letter>
	letter(',');
 8002922:	202c      	movs	r0, #44	; 0x2c
 8002924:	f7fd fc14 	bl	8000150 <letter>
	letter(' ');
 8002928:	2020      	movs	r0, #32
 800292a:	f7fd fc11 	bl	8000150 <letter>
	letter('I');
 800292e:	2049      	movs	r0, #73	; 0x49
 8002930:	f7fd fc0e 	bl	8000150 <letter>
	letter('n');
 8002934:	206e      	movs	r0, #110	; 0x6e
 8002936:	f7fd fc0b 	bl	8000150 <letter>
	letter('v');
 800293a:	2076      	movs	r0, #118	; 0x76
 800293c:	f7fd fc08 	bl	8000150 <letter>
	letter('a');
 8002940:	2061      	movs	r0, #97	; 0x61
 8002942:	f7fd fc05 	bl	8000150 <letter>
	letter('l');
 8002946:	206c      	movs	r0, #108	; 0x6c
 8002948:	f7fd fc02 	bl	8000150 <letter>
	letter('i');
 800294c:	2069      	movs	r0, #105	; 0x69
 800294e:	f7fd fbff 	bl	8000150 <letter>
	letter('d');
 8002952:	2064      	movs	r0, #100	; 0x64
 8002954:	f7fd fbfc 	bl	8000150 <letter>

	line2();
 8002958:	f7ff fba6 	bl	80020a8 <line2>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//RS high
 800295c:	2201      	movs	r2, #1
 800295e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002962:	480e      	ldr	r0, [pc, #56]	; (800299c <error+0xb4>)
 8002964:	f001 f8e1 	bl	8003b2a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);//R/W low
 8002968:	2200      	movs	r2, #0
 800296a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800296e:	480b      	ldr	r0, [pc, #44]	; (800299c <error+0xb4>)
 8002970:	f001 f8db 	bl	8003b2a <HAL_GPIO_WritePin>
	letter('N');
 8002974:	204e      	movs	r0, #78	; 0x4e
 8002976:	f7fd fbeb 	bl	8000150 <letter>
	letter('u');
 800297a:	2075      	movs	r0, #117	; 0x75
 800297c:	f7fd fbe8 	bl	8000150 <letter>
	letter('m');
 8002980:	206d      	movs	r0, #109	; 0x6d
 8002982:	f7fd fbe5 	bl	8000150 <letter>
	letter('b');
 8002986:	2062      	movs	r0, #98	; 0x62
 8002988:	f7fd fbe2 	bl	8000150 <letter>
	letter('e');
 800298c:	2065      	movs	r0, #101	; 0x65
 800298e:	f7fd fbdf 	bl	8000150 <letter>
	letter('r');
 8002992:	2072      	movs	r0, #114	; 0x72
 8002994:	f7fd fbdc 	bl	8000150 <letter>
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40010c00 	.word	0x40010c00

080029a0 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	initializeNodes();
 80029a8:	f000 fa00 	bl	8002dac <initializeNodes>
	HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 10);
 80029ac:	230a      	movs	r3, #10
 80029ae:	221a      	movs	r2, #26
 80029b0:	4919      	ldr	r1, [pc, #100]	; (8002a18 <StartXbeeTask+0x78>)
 80029b2:	481a      	ldr	r0, [pc, #104]	; (8002a1c <StartXbeeTask+0x7c>)
 80029b4:	f002 fa57 	bl	8004e66 <HAL_UART_Receive>
  for(;;)
  {
	 // HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 10);
	  if(HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 1000) == HAL_OK)
 80029b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029bc:	221a      	movs	r2, #26
 80029be:	4916      	ldr	r1, [pc, #88]	; (8002a18 <StartXbeeTask+0x78>)
 80029c0:	4816      	ldr	r0, [pc, #88]	; (8002a1c <StartXbeeTask+0x7c>)
 80029c2:	f002 fa50 	bl	8004e66 <HAL_UART_Receive>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11f      	bne.n	8002a0c <StartXbeeTask+0x6c>
	  {
			HAL_UART_Transmit(&huart2, uartBufferRX, 26, 1000);
 80029cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029d0:	221a      	movs	r2, #26
 80029d2:	4911      	ldr	r1, [pc, #68]	; (8002a18 <StartXbeeTask+0x78>)
 80029d4:	4812      	ldr	r0, [pc, #72]	; (8002a20 <StartXbeeTask+0x80>)
 80029d6:	f002 f9b4 	bl	8004d42 <HAL_UART_Transmit>
			//has to stay with main (the file where the "UART_HandleTypeDef huart3;" is)
			if (uartBufferRX[0] == 0x7E)
 80029da:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <StartXbeeTask+0x78>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b7e      	cmp	r3, #126	; 0x7e
 80029e0:	d114      	bne.n	8002a0c <StartXbeeTask+0x6c>
			{
				switch (uartBufferRX[3])
 80029e2:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <StartXbeeTask+0x78>)
 80029e4:	78db      	ldrb	r3, [r3, #3]
 80029e6:	2b92      	cmp	r3, #146	; 0x92
 80029e8:	d002      	beq.n	80029f0 <StartXbeeTask+0x50>
 80029ea:	2b97      	cmp	r3, #151	; 0x97
 80029ec:	d004      	beq.n	80029f8 <StartXbeeTask+0x58>
 80029ee:	e007      	b.n	8002a00 <StartXbeeTask+0x60>
				{
				case 0x92:
					processIO(uartBufferRX);
 80029f0:	4809      	ldr	r0, [pc, #36]	; (8002a18 <StartXbeeTask+0x78>)
 80029f2:	f000 fad9 	bl	8002fa8 <processIO>
					break;
 80029f6:	e00a      	b.n	8002a0e <StartXbeeTask+0x6e>

				case 0x97:
					processATResponse(uartBufferRX);
 80029f8:	4807      	ldr	r0, [pc, #28]	; (8002a18 <StartXbeeTask+0x78>)
 80029fa:	f000 fa4b 	bl	8002e94 <processATResponse>
					break;
 80029fe:	e006      	b.n	8002a0e <StartXbeeTask+0x6e>

				default://if it wasnt an expected data type just throw it out
					HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);
 8002a00:	221a      	movs	r2, #26
 8002a02:	4905      	ldr	r1, [pc, #20]	; (8002a18 <StartXbeeTask+0x78>)
 8002a04:	4805      	ldr	r0, [pc, #20]	; (8002a1c <StartXbeeTask+0x7c>)
 8002a06:	f002 facd 	bl	8004fa4 <HAL_UART_Receive_IT>
					break;
 8002a0a:	e000      	b.n	8002a0e <StartXbeeTask+0x6e>
				}
			}
 8002a0c:	bf00      	nop
	  }
    osDelay(1);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f002 fd04 	bl	800541c <osDelay>
	  if(HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 1000) == HAL_OK)
 8002a14:	e7d0      	b.n	80029b8 <StartXbeeTask+0x18>
 8002a16:	bf00      	nop
 8002a18:	20002144 	.word	0x20002144
 8002a1c:	200020c0 	.word	0x200020c0
 8002a20:	20002100 	.word	0x20002100

08002a24 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */
	initializeNodes();
 8002a2c:	f000 f9be 	bl	8002dac <initializeNodes>
  for(;;)
  {
	  val[6] = 0;
 8002a30:	4ba6      	ldr	r3, [pc, #664]	; (8002ccc <StartUserTask+0x2a8>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	619a      	str	r2, [r3, #24]
	  commandToLCD();
 8002a36:	f7ff f9d9 	bl	8001dec <commandToLCD>
	  printPassword();
 8002a3a:	f7ff fab5 	bl	8001fa8 <printPassword>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);//ROW1
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a44:	48a2      	ldr	r0, [pc, #648]	; (8002cd0 <StartUserTask+0x2ac>)
 8002a46:	f001 f870 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);//ROW2
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	48a1      	ldr	r0, [pc, #644]	; (8002cd4 <StartUserTask+0x2b0>)
 8002a50:	f001 f86b 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);//ROW3
 8002a54:	2200      	movs	r2, #0
 8002a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a5a:	489d      	ldr	r0, [pc, #628]	; (8002cd0 <StartUserTask+0x2ac>)
 8002a5c:	f001 f865 	bl	8003b2a <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);//ROW4
 8002a60:	2200      	movs	r2, #0
 8002a62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a66:	489a      	ldr	r0, [pc, #616]	; (8002cd0 <StartUserTask+0x2ac>)
 8002a68:	f001 f85f 	bl	8003b2a <HAL_GPIO_WritePin>

	  if(HAL_UART_Receive(&huart3, &uartBufferRX[26], 26, 3000) == HAL_OK)
 8002a6c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002a70:	221a      	movs	r2, #26
 8002a72:	4999      	ldr	r1, [pc, #612]	; (8002cd8 <StartUserTask+0x2b4>)
 8002a74:	4899      	ldr	r0, [pc, #612]	; (8002cdc <StartUserTask+0x2b8>)
 8002a76:	f002 f9f6 	bl	8004e66 <HAL_UART_Receive>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <StartUserTask+0x6a>
		  {
				HAL_UART_Transmit(&huart2, &uartBufferRX[13], 13, 500);
 8002a80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a84:	220d      	movs	r2, #13
 8002a86:	4996      	ldr	r1, [pc, #600]	; (8002ce0 <StartUserTask+0x2bc>)
 8002a88:	4896      	ldr	r0, [pc, #600]	; (8002ce4 <StartUserTask+0x2c0>)
 8002a8a:	f002 f95a 	bl	8004d42 <HAL_UART_Transmit>
//						HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 1000);
//						break;
//					}
//				}
		  }
	  getVal(4);
 8002a8e:	2004      	movs	r0, #4
 8002a90:	f7ff fbd8 	bl	8002244 <getVal>
	  if(val[0] == 1)
 8002a94:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <StartUserTask+0x2a8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 810b 	bne.w	8002cb4 <StartUserTask+0x290>
	  {
		  if(val[1] == 2)
 8002a9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <StartUserTask+0x2a8>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	f040 80fd 	bne.w	8002ca2 <StartUserTask+0x27e>
		  {
			  if(val[2] == 3)
 8002aa8:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <StartUserTask+0x2a8>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	f040 80ef 	bne.w	8002c90 <StartUserTask+0x26c>
			  {
				  if(val[3] == 4)
 8002ab2:	4b86      	ldr	r3, [pc, #536]	; (8002ccc <StartUserTask+0x2a8>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	f040 80e1 	bne.w	8002c7e <StartUserTask+0x25a>
				  {
					  clear();
 8002abc:	f7ff fb46 	bl	800214c <clear>
					  line1();
 8002ac0:	f7ff faa0 	bl	8002004 <line1>
					  correct();
 8002ac4:	f7ff fb94 	bl	80021f0 <correct>
					  HAL_Delay(1500);
 8002ac8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002acc:	f000 fdba 	bl	8003644 <HAL_Delay>
					  while(val[6] == 0)
 8002ad0:	e0cf      	b.n	8002c72 <StartUserTask+0x24e>
					  {
						  commandToLCD();
 8002ad2:	f7ff f98b 	bl	8001dec <commandToLCD>
						  onOffTime();
 8002ad6:	f7ff fe89 	bl	80027ec <onOffTime>
						  while(val[0]< 0 || val[0] > 1)
 8002ada:	e00b      	b.n	8002af4 <StartUserTask+0xd0>
						  {
							  commandToLCD();
 8002adc:	f7ff f986 	bl	8001dec <commandToLCD>
							  error();
 8002ae0:	f7ff ff02 	bl	80028e8 <error>
							  HAL_Delay(1500);
 8002ae4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ae8:	f000 fdac 	bl	8003644 <HAL_Delay>
							  commandToLCD();
 8002aec:	f7ff f97e 	bl	8001dec <commandToLCD>
							  onOffTime();
 8002af0:	f7ff fe7c 	bl	80027ec <onOffTime>
						  while(val[0]< 0 || val[0] > 1)
 8002af4:	4b75      	ldr	r3, [pc, #468]	; (8002ccc <StartUserTask+0x2a8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	dbef      	blt.n	8002adc <StartUserTask+0xb8>
 8002afc:	4b73      	ldr	r3, [pc, #460]	; (8002ccc <StartUserTask+0x2a8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	dceb      	bgt.n	8002adc <StartUserTask+0xb8>
						  }
						  if(val[0] == 0)
 8002b04:	4b71      	ldr	r3, [pc, #452]	; (8002ccc <StartUserTask+0x2a8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d14f      	bne.n	8002bac <StartUserTask+0x188>
						  {
							  commandToLCD();
 8002b0c:	f7ff f96e 	bl	8001dec <commandToLCD>
							  green();
 8002b10:	f7ff fdaa 	bl	8002668 <green>
							  while(val[0]< 1 || val[0] > 3)
 8002b14:	e00b      	b.n	8002b2e <StartUserTask+0x10a>
							  {
								  commandToLCD();
 8002b16:	f7ff f969 	bl	8001dec <commandToLCD>
								  error();
 8002b1a:	f7ff fee5 	bl	80028e8 <error>
								  HAL_Delay(1500);
 8002b1e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b22:	f000 fd8f 	bl	8003644 <HAL_Delay>
								  commandToLCD();
 8002b26:	f7ff f961 	bl	8001dec <commandToLCD>
								  green();
 8002b2a:	f7ff fd9d 	bl	8002668 <green>
							  while(val[0]< 1 || val[0] > 3)
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <StartUserTask+0x2a8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	ddef      	ble.n	8002b16 <StartUserTask+0xf2>
 8002b36:	4b65      	ldr	r3, [pc, #404]	; (8002ccc <StartUserTask+0x2a8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	dceb      	bgt.n	8002b16 <StartUserTask+0xf2>
							  }
							  indc = val[0];///do something with val[0] aka green #
 8002b3e:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <StartUserTask+0x2a8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a69      	ldr	r2, [pc, #420]	; (8002ce8 <StartUserTask+0x2c4>)
 8002b44:	6013      	str	r3, [r2, #0]
							  line2();
 8002b46:	f7ff faaf 	bl	80020a8 <line2>
							  onOff();
 8002b4a:	f7ff fe97 	bl	800287c <onOff>
							  while(val[0]< 0 || val[0] > 1)
 8002b4e:	e00b      	b.n	8002b68 <StartUserTask+0x144>
							  {
								  commandToLCD();
 8002b50:	f7ff f94c 	bl	8001dec <commandToLCD>
								  error();
 8002b54:	f7ff fec8 	bl	80028e8 <error>
								  HAL_Delay(1500);
 8002b58:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b5c:	f000 fd72 	bl	8003644 <HAL_Delay>
								  commandToLCD();
 8002b60:	f7ff f944 	bl	8001dec <commandToLCD>
								  onOff();
 8002b64:	f7ff fe8a 	bl	800287c <onOff>
							  while(val[0]< 0 || val[0] > 1)
 8002b68:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <StartUserTask+0x2a8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	dbef      	blt.n	8002b50 <StartUserTask+0x12c>
 8002b70:	4b56      	ldr	r3, [pc, #344]	; (8002ccc <StartUserTask+0x2a8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	dceb      	bgt.n	8002b50 <StartUserTask+0x12c>
							  }
							  //onoff = val[0];///do something with val[0]
							  clear();
 8002b78:	f7ff fae8 	bl	800214c <clear>
							  quit();
 8002b7c:	f7ff fde8 	bl	8002750 <quit>
							  while(val[0]< 0 || val[0] > 1)
 8002b80:	e00b      	b.n	8002b9a <StartUserTask+0x176>
							  {
								  commandToLCD();
 8002b82:	f7ff f933 	bl	8001dec <commandToLCD>
								  error();
 8002b86:	f7ff feaf 	bl	80028e8 <error>
								  HAL_Delay(1500);
 8002b8a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002b8e:	f000 fd59 	bl	8003644 <HAL_Delay>
								  commandToLCD();
 8002b92:	f7ff f92b 	bl	8001dec <commandToLCD>
								  quit();
 8002b96:	f7ff fddb 	bl	8002750 <quit>
							  while(val[0]< 0 || val[0] > 1)
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <StartUserTask+0x2a8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	dbef      	blt.n	8002b82 <StartUserTask+0x15e>
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	; (8002ccc <StartUserTask+0x2a8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	dceb      	bgt.n	8002b82 <StartUserTask+0x15e>
 8002baa:	e062      	b.n	8002c72 <StartUserTask+0x24e>
							  }
						  }

						  else if(val[0] == 1)
 8002bac:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <StartUserTask+0x2a8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d15e      	bne.n	8002c72 <StartUserTask+0x24e>
						  {

								  commandToLCD();
 8002bb4:	f7ff f91a 	bl	8001dec <commandToLCD>
								  green();
 8002bb8:	f7ff fd56 	bl	8002668 <green>
								  while(val[0]< 1 || val[0] > 3)
 8002bbc:	e00b      	b.n	8002bd6 <StartUserTask+0x1b2>
								  {
									  commandToLCD();
 8002bbe:	f7ff f915 	bl	8001dec <commandToLCD>
									  error();
 8002bc2:	f7ff fe91 	bl	80028e8 <error>
									  HAL_Delay(1500);
 8002bc6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002bca:	f000 fd3b 	bl	8003644 <HAL_Delay>
									  commandToLCD();
 8002bce:	f7ff f90d 	bl	8001dec <commandToLCD>
									  green();
 8002bd2:	f7ff fd49 	bl	8002668 <green>
								  while(val[0]< 1 || val[0] > 3)
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <StartUserTask+0x2a8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	ddef      	ble.n	8002bbe <StartUserTask+0x19a>
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <StartUserTask+0x2a8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	dceb      	bgt.n	8002bbe <StartUserTask+0x19a>
								  }
								  indc = val[0];///do something with val[0] aka green #
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <StartUserTask+0x2a8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a3f      	ldr	r2, [pc, #252]	; (8002ce8 <StartUserTask+0x2c4>)
 8002bec:	6013      	str	r3, [r2, #0]
								  line2();
 8002bee:	f7ff fa5b 	bl	80020a8 <line2>
								  timer();
 8002bf2:	f7ff fd6d 	bl	80026d0 <timer>
								  while(val[0]< 0 || val[0] > 6 || val[1]< 0 || val[1] > 9 || (val[0]==6 && val[1]!=0))
 8002bf6:	e00b      	b.n	8002c10 <StartUserTask+0x1ec>
								  {
									  commandToLCD();
 8002bf8:	f7ff f8f8 	bl	8001dec <commandToLCD>
									  error();
 8002bfc:	f7ff fe74 	bl	80028e8 <error>
									  HAL_Delay(1500);
 8002c00:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c04:	f000 fd1e 	bl	8003644 <HAL_Delay>
									  commandToLCD();
 8002c08:	f7ff f8f0 	bl	8001dec <commandToLCD>
									  timer();
 8002c0c:	f7ff fd60 	bl	80026d0 <timer>
								  while(val[0]< 0 || val[0] > 6 || val[1]< 0 || val[1] > 9 || (val[0]==6 && val[1]!=0))
 8002c10:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <StartUserTask+0x2a8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	dbef      	blt.n	8002bf8 <StartUserTask+0x1d4>
 8002c18:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <StartUserTask+0x2a8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	dceb      	bgt.n	8002bf8 <StartUserTask+0x1d4>
 8002c20:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <StartUserTask+0x2a8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	dbe7      	blt.n	8002bf8 <StartUserTask+0x1d4>
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <StartUserTask+0x2a8>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b09      	cmp	r3, #9
 8002c2e:	dce3      	bgt.n	8002bf8 <StartUserTask+0x1d4>
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <StartUserTask+0x2a8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b06      	cmp	r3, #6
 8002c36:	d103      	bne.n	8002c40 <StartUserTask+0x21c>
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <StartUserTask+0x2a8>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1db      	bne.n	8002bf8 <StartUserTask+0x1d4>
								  }
								  ///do something with val[0] and val[1]
								  clear();
 8002c40:	f7ff fa84 	bl	800214c <clear>
								  quit();
 8002c44:	f7ff fd84 	bl	8002750 <quit>
								  while(val[0]< 0 || val[0] > 1)
 8002c48:	e00b      	b.n	8002c62 <StartUserTask+0x23e>
								  {
									  commandToLCD();
 8002c4a:	f7ff f8cf 	bl	8001dec <commandToLCD>
									  error();
 8002c4e:	f7ff fe4b 	bl	80028e8 <error>
									  HAL_Delay(1500);
 8002c52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c56:	f000 fcf5 	bl	8003644 <HAL_Delay>
									  commandToLCD();
 8002c5a:	f7ff f8c7 	bl	8001dec <commandToLCD>
									  quit();
 8002c5e:	f7ff fd77 	bl	8002750 <quit>
								  while(val[0]< 0 || val[0] > 1)
 8002c62:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <StartUserTask+0x2a8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	dbef      	blt.n	8002c4a <StartUserTask+0x226>
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <StartUserTask+0x2a8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	dceb      	bgt.n	8002c4a <StartUserTask+0x226>
					  while(val[6] == 0)
 8002c72:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <StartUserTask+0x2a8>)
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f43f af2b 	beq.w	8002ad2 <StartUserTask+0xae>
 8002c7c:	e022      	b.n	8002cc4 <StartUserTask+0x2a0>
						  }
					  }
				  }
				  else
				  {
					  line2();
 8002c7e:	f7ff fa13 	bl	80020a8 <line2>
					  wrongPass();
 8002c82:	f7ff fcb5 	bl	80025f0 <wrongPass>
					  HAL_Delay(2000);
 8002c86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c8a:	f000 fcdb 	bl	8003644 <HAL_Delay>
 8002c8e:	e019      	b.n	8002cc4 <StartUserTask+0x2a0>
				  }
			  }
			  else
			  {
				  line2();
 8002c90:	f7ff fa0a 	bl	80020a8 <line2>
				  wrongPass();
 8002c94:	f7ff fcac 	bl	80025f0 <wrongPass>
				  HAL_Delay(2000);
 8002c98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c9c:	f000 fcd2 	bl	8003644 <HAL_Delay>
 8002ca0:	e010      	b.n	8002cc4 <StartUserTask+0x2a0>
			  }
		  }
		  else
		  {
			  line2();
 8002ca2:	f7ff fa01 	bl	80020a8 <line2>
			  wrongPass();
 8002ca6:	f7ff fca3 	bl	80025f0 <wrongPass>
			  HAL_Delay(2000);
 8002caa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cae:	f000 fcc9 	bl	8003644 <HAL_Delay>
 8002cb2:	e007      	b.n	8002cc4 <StartUserTask+0x2a0>
		  }
	  }
	  else
	  {
		  line2();
 8002cb4:	f7ff f9f8 	bl	80020a8 <line2>
		  wrongPass();
 8002cb8:	f7ff fc9a 	bl	80025f0 <wrongPass>
		  HAL_Delay(2000);
 8002cbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cc0:	f000 fcc0 	bl	8003644 <HAL_Delay>
	  }
	    osDelay(1);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f002 fba9 	bl	800541c <osDelay>
	  val[6] = 0;
 8002cca:	e6b1      	b.n	8002a30 <StartUserTask+0xc>
 8002ccc:	200023b4 	.word	0x200023b4
 8002cd0:	40011000 	.word	0x40011000
 8002cd4:	40011400 	.word	0x40011400
 8002cd8:	2000215e 	.word	0x2000215e
 8002cdc:	200020c0 	.word	0x200020c0
 8002ce0:	20002151 	.word	0x20002151
 8002ce4:	20002100 	.word	0x20002100
 8002ce8:	20002140 	.word	0x20002140

08002cec <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
//	  		else if(state == 1)
//	  		{
//	  			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
//	  		}
//	  	}
    osDelay(1);
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f002 fb91 	bl	800541c <osDelay>
 8002cfa:	e7fb      	b.n	8002cf4 <StartSolenoidTask+0x8>

08002cfc <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  for(;;)
  {
		uint32_t period;
		uint32_t tickstart;

		HAL_TIM_Base_Start(&htim2);
 8002d04:	4814      	ldr	r0, [pc, #80]	; (8002d58 <StartWeatherTask+0x5c>)
 8002d06:	f001 fbe7 	bl	80044d8 <HAL_TIM_Base_Start>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8002d0a:	bf00      	nop
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4813      	ldr	r0, [pc, #76]	; (8002d5c <StartWeatherTask+0x60>)
 8002d10:	f000 fef4 	bl	8003afc <HAL_GPIO_ReadPin>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f8      	beq.n	8002d0c <StartWeatherTask+0x10>
		{}
		tickstart = __HAL_TIM_GET_COUNTER(&htim2);
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <StartWeatherTask+0x5c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	60fb      	str	r3, [r7, #12]
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 1)
 8002d22:	bf00      	nop
 8002d24:	2101      	movs	r1, #1
 8002d26:	480d      	ldr	r0, [pc, #52]	; (8002d5c <StartWeatherTask+0x60>)
 8002d28:	f000 fee8 	bl	8003afc <HAL_GPIO_ReadPin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d0f8      	beq.n	8002d24 <StartWeatherTask+0x28>
		{}
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == 0)
 8002d32:	bf00      	nop
 8002d34:	2101      	movs	r1, #1
 8002d36:	4809      	ldr	r0, [pc, #36]	; (8002d5c <StartWeatherTask+0x60>)
 8002d38:	f000 fee0 	bl	8003afc <HAL_GPIO_ReadPin>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f8      	beq.n	8002d34 <StartWeatherTask+0x38>
		{}
		period =  __HAL_TIM_GET_COUNTER(&htim2) - tickstart;
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <StartWeatherTask+0x5c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	60bb      	str	r3, [r7, #8]

    osDelay(1);
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f002 fb64 	bl	800541c <osDelay>
  {
 8002d54:	e7d6      	b.n	8002d04 <StartWeatherTask+0x8>
 8002d56:	bf00      	nop
 8002d58:	2000241c 	.word	0x2000241c
 8002d5c:	40011000 	.word	0x40011000

08002d60 <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
//	  		L2=F2;
//	  		L3=F3;
//
//	  	}

    osDelay(1);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f002 fb57 	bl	800541c <osDelay>
 8002d6e:	e7fb      	b.n	8002d68 <StartFlowTask+0x8>

08002d70 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f002 fb4f 	bl	800541c <osDelay>
 8002d7e:	e7fb      	b.n	8002d78 <StartProcessingTask+0x8>

08002d80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d92:	f000 fc3b 	bl	800360c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40000800 	.word	0x40000800

08002da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002daa:	e7fe      	b.n	8002daa <Error_Handler+0x6>

08002dac <initializeNodes>:
 *      Author: Colton Moore
 */
#include "sensorObjects.h"

void initializeNodes()
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 8002db2:	4a34      	ldr	r2, [pc, #208]	; (8002e84 <initializeNodes+0xd8>)
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dbc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 8002dc0:	4a31      	ldr	r2, [pc, #196]	; (8002e88 <initializeNodes+0xdc>)
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dca:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 8002dce:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <initializeNodes+0xe0>)
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dd6:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e01e      	b.n	8002e22 <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 8002de4:	7ffb      	ldrb	r3, [r7, #31]
 8002de6:	4a2a      	ldr	r2, [pc, #168]	; (8002e90 <initializeNodes+0xe4>)
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	4413      	add	r3, r2
 8002dec:	330c      	adds	r3, #12
 8002dee:	2200      	movs	r2, #0
 8002df0:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <initializeNodes+0xe4>)
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	330a      	adds	r3, #10
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8002e00:	7ffb      	ldrb	r3, [r7, #31]
 8002e02:	4a23      	ldr	r2, [pc, #140]	; (8002e90 <initializeNodes+0xe4>)
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	4413      	add	r3, r2
 8002e08:	3308      	adds	r3, #8
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 8002e0e:	7ffb      	ldrb	r3, [r7, #31]
 8002e10:	4a1f      	ldr	r2, [pc, #124]	; (8002e90 <initializeNodes+0xe4>)
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	4413      	add	r3, r2
 8002e16:	330e      	adds	r3, #14
 8002e18:	2200      	movs	r2, #0
 8002e1a:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 8002e1c:	7ffb      	ldrb	r3, [r7, #31]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	2b1f      	cmp	r3, #31
 8002e26:	d9dd      	bls.n	8002de4 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e022      	b.n	8002e74 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 8002e2e:	7ffa      	ldrb	r2, [r7, #31]
 8002e30:	7ffb      	ldrb	r3, [r7, #31]
 8002e32:	f107 0120 	add.w	r1, r7, #32
 8002e36:	440a      	add	r2, r1
 8002e38:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8002e3c:	4a14      	ldr	r2, [pc, #80]	; (8002e90 <initializeNodes+0xe4>)
 8002e3e:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8002e40:	7ffa      	ldrb	r2, [r7, #31]
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	f107 0120 	add.w	r1, r7, #32
 8002e48:	440a      	add	r2, r1
 8002e4a:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8002e4e:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <initializeNodes+0xe4>)
 8002e50:	4413      	add	r3, r2
 8002e52:	460a      	mov	r2, r1
 8002e54:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 8002e56:	7ffa      	ldrb	r2, [r7, #31]
 8002e58:	7ffb      	ldrb	r3, [r7, #31]
 8002e5a:	f107 0120 	add.w	r1, r7, #32
 8002e5e:	440a      	add	r2, r1
 8002e60:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <initializeNodes+0xe4>)
 8002e66:	4413      	add	r3, r2
 8002e68:	460a      	mov	r2, r1
 8002e6a:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
 8002e70:	3301      	adds	r3, #1
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	2b07      	cmp	r3, #7
 8002e78:	d9d9      	bls.n	8002e2e <initializeNodes+0x82>
	}

	return;
 8002e7a:	bf00      	nop
}
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	08007dc8 	.word	0x08007dc8
 8002e88:	08007dd0 	.word	0x08007dd0
 8002e8c:	08007dd8 	.word	0x08007dd8
 8002e90:	20002170 	.word	0x20002170

08002e94 <processATResponse>:

//Process Data
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void processATResponse(uint8_t *ATResponse)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	int nodeNum = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]

	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	e073      	b.n	8002f8e <processATResponse+0xfa>
		{
			int match = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	613b      	str	r3, [r7, #16]
			//Compare the address in the API Frame to the address of our known nodes.
			//the address bytes in the API frame are 5-12
			//if we find a different byte, we know its the wrong address and do not have a match
			for (int j = 0; j<8; j++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e013      	b.n	8002ed8 <processATResponse+0x44>
			{
				if (ATResponse[j+5] != (fairways[nodeNum]).address[j])
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	3305      	adds	r3, #5
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4938      	ldr	r1, [pc, #224]	; (8002f9c <processATResponse+0x108>)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	4419      	add	r1, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	440b      	add	r3, r1
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d002      	beq.n	8002ed2 <processATResponse+0x3e>
				{
					match = 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
					break; //exit the loop, its not this node
 8002ed0:	e005      	b.n	8002ede <processATResponse+0x4a>
			for (int j = 0; j<8; j++)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b07      	cmp	r3, #7
 8002edc:	dde8      	ble.n	8002eb0 <processATResponse+0x1c>
				}
			}

			if (match == 1)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d151      	bne.n	8002f88 <processATResponse+0xf4>
			{
				//get which data type it is
				//no longer need the first "IF" because the temp is now coming from an ADC
				//we will keep in so we could add ambient field temp in the future.
				if (ATResponse[15] == 0x54 && ATResponse[16] == 0x50) //if the AT command was "TP"
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	330f      	adds	r3, #15
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b54      	cmp	r3, #84	; 0x54
 8002eec:	d122      	bne.n	8002f34 <processATResponse+0xa0>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3310      	adds	r3, #16
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d11d      	bne.n	8002f34 <processATResponse+0xa0>
				{
					fairways[nodeNum].temperature = ATResponse[18] *256 + ATResponse[19]; //store temp data then request battery data
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3312      	adds	r3, #18
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3313      	adds	r3, #19
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	b299      	uxth	r1, r3
 8002f10:	4a22      	ldr	r2, [pc, #136]	; (8002f9c <processATResponse+0x108>)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	4413      	add	r3, r2
 8002f18:	330e      	adds	r3, #14
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	801a      	strh	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 21);
 8002f1e:	2215      	movs	r2, #21
 8002f20:	491f      	ldr	r1, [pc, #124]	; (8002fa0 <processATResponse+0x10c>)
 8002f22:	4820      	ldr	r0, [pc, #128]	; (8002fa4 <processATResponse+0x110>)
 8002f24:	f002 f83e 	bl	8004fa4 <HAL_UART_Receive_IT>
					sendBattRequest(nodeNum);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f8c7 	bl	80030c0 <sendBattRequest>
 8002f32:	e027      	b.n	8002f84 <processATResponse+0xf0>
				}
				else if (ATResponse[15] == 0x25 && ATResponse[16] == 0x56) //if the AT command was "%V"
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	330f      	adds	r3, #15
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b25      	cmp	r3, #37	; 0x25
 8002f3c:	d11d      	bne.n	8002f7a <processATResponse+0xe6>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3310      	adds	r3, #16
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b56      	cmp	r3, #86	; 0x56
 8002f46:	d118      	bne.n	8002f7a <processATResponse+0xe6>
				{
					fairways[nodeNum].battery = ATResponse[18]*256 + ATResponse[19];
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3312      	adds	r3, #18
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3313      	adds	r3, #19
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	b299      	uxth	r1, r3
 8002f60:	4a0e      	ldr	r2, [pc, #56]	; (8002f9c <processATResponse+0x108>)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4413      	add	r3, r2
 8002f68:	330c      	adds	r3, #12
 8002f6a:	460a      	mov	r2, r1
 8002f6c:	801a      	strh	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);//Listen for IO data becasue we should have both requests received
 8002f6e:	221a      	movs	r2, #26
 8002f70:	490b      	ldr	r1, [pc, #44]	; (8002fa0 <processATResponse+0x10c>)
 8002f72:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <processATResponse+0x110>)
 8002f74:	f002 f816 	bl	8004fa4 <HAL_UART_Receive_IT>
 8002f78:	e004      	b.n	8002f84 <processATResponse+0xf0>
				}
				else
				{	//if we got an unexpected AT Command Type, give up and try again next time data is transmitted
					//uartInterruptInit(26);
					HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 26);
 8002f7a:	221a      	movs	r2, #26
 8002f7c:	4908      	ldr	r1, [pc, #32]	; (8002fa0 <processATResponse+0x10c>)
 8002f7e:	4809      	ldr	r0, [pc, #36]	; (8002fa4 <processATResponse+0x110>)
 8002f80:	f002 f810 	bl	8004fa4 <HAL_UART_Receive_IT>
				}

				nodeNum = 255; //break the loop. Break would work too but this explicitly breaks the correct loop if i move things.
 8002f84:	23ff      	movs	r3, #255	; 0xff
 8002f86:	617b      	str	r3, [r7, #20]
	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b23      	cmp	r3, #35	; 0x23
 8002f92:	dd88      	ble.n	8002ea6 <processATResponse+0x12>
			}
		}

  return;
 8002f94:	bf00      	nop
}
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20002170 	.word	0x20002170
 8002fa0:	20002144 	.word	0x20002144
 8002fa4:	200020c0 	.word	0x200020c0

08002fa8 <processIO>:

void processIO(uint8_t *ioData)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	uint16_t sensorResistive 	= 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	81fb      	strh	r3, [r7, #14]
	uint16_t sensorCapacative 	= 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	81bb      	strh	r3, [r7, #12]
	uint16_t sensorTemperature 	= 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	817b      	strh	r3, [r7, #10]
	uint8_t	 match = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	75fb      	strb	r3, [r7, #23]

	if(!verifyChecksum(ioData))
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f8f7 	bl	80031b4 <verifyChecksum>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d06e      	beq.n	80030aa <processIO+0x102>
	{
		return;//include an error report here if time permits
	}
	else
	{
		sensorResistive 	= ioData[19]*256 + ioData[20]; //ADC0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3313      	adds	r3, #19
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3314      	adds	r3, #20
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	81fb      	strh	r3, [r7, #14]
		sensorCapacative	= ioData [21]*256 + ioData[22];//ADC1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3315      	adds	r3, #21
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3316      	adds	r3, #22
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	81bb      	strh	r3, [r7, #12]
		sensorTemperature 	= ioData [23]*256 + ioData[24];//ADC2
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3317      	adds	r3, #23
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3318      	adds	r3, #24
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	4413      	add	r3, r2
 8003012:	817b      	strh	r3, [r7, #10]

	//Determine which sensor it belongs to
	//get the address, if it exists, put the data into it
	//if the address doesn't already exist then make a new object to put data into
	//for now we will just use the three that we have
	uint8_t nodeNumber = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	75bb      	strb	r3, [r7, #22]
	for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 8003018:	2300      	movs	r3, #0
 800301a:	75bb      	strb	r3, [r7, #22]
 800301c:	e037      	b.n	800308e <processIO+0xe6>
	{
		match = 1;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
		//Compare the address in the API Frame to the address of our known nodes.
		//the address bytes in the API frame are 5-12
		//if we find a different byte, we know its the wrong address and do not have a match
		for (int j = 0; j<8; j++)
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	e013      	b.n	8003050 <processIO+0xa8>
		{
			if (ioData[j+4] != (fairways[nodeNumber]).address[j])
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3304      	adds	r3, #4
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	4413      	add	r3, r2
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	7dbb      	ldrb	r3, [r7, #22]
 8003034:	491f      	ldr	r1, [pc, #124]	; (80030b4 <processIO+0x10c>)
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	4419      	add	r1, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	440b      	add	r3, r1
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d002      	beq.n	800304a <processIO+0xa2>
			{
				match = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
				break;//it is not this nodeNumer (j value)
 8003048:	e005      	b.n	8003056 <processIO+0xae>
		for (int j = 0; j<8; j++)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	3301      	adds	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2b07      	cmp	r3, #7
 8003054:	dde8      	ble.n	8003028 <processIO+0x80>
			}
		}

		if (match == 1)
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d115      	bne.n	8003088 <processIO+0xe0>
		{
			fairways[nodeNumber].resistive		= sensorResistive;
 800305c:	7dbb      	ldrb	r3, [r7, #22]
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <processIO+0x10c>)
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	4413      	add	r3, r2
 8003064:	3308      	adds	r3, #8
 8003066:	89fa      	ldrh	r2, [r7, #14]
 8003068:	801a      	strh	r2, [r3, #0]
			fairways[nodeNumber].capacative		= sensorCapacative;
 800306a:	7dbb      	ldrb	r3, [r7, #22]
 800306c:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <processIO+0x10c>)
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	4413      	add	r3, r2
 8003072:	330a      	adds	r3, #10
 8003074:	89ba      	ldrh	r2, [r7, #12]
 8003076:	801a      	strh	r2, [r3, #0]
			fairways[nodeNumber].temperature	= sensorTemperature;
 8003078:	7dbb      	ldrb	r3, [r7, #22]
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <processIO+0x10c>)
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	4413      	add	r3, r2
 8003080:	330e      	adds	r3, #14
 8003082:	897a      	ldrh	r2, [r7, #10]
 8003084:	801a      	strh	r2, [r3, #0]

			break;
 8003086:	e005      	b.n	8003094 <processIO+0xec>
	for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 8003088:	7dbb      	ldrb	r3, [r7, #22]
 800308a:	3301      	adds	r3, #1
 800308c:	75bb      	strb	r3, [r7, #22]
 800308e:	7dbb      	ldrb	r3, [r7, #22]
 8003090:	2b23      	cmp	r3, #35	; 0x23
 8003092:	d9c4      	bls.n	800301e <processIO+0x76>
			//i = 37; //break the loop. Break would work too but this explicitly breaks the correct loop if i move things.
		}
	}
	//__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_TC);

	HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 21);
 8003094:	2215      	movs	r2, #21
 8003096:	4908      	ldr	r1, [pc, #32]	; (80030b8 <processIO+0x110>)
 8003098:	4808      	ldr	r0, [pc, #32]	; (80030bc <processIO+0x114>)
 800309a:	f001 ff83 	bl	8004fa4 <HAL_UART_Receive_IT>
	sendBattRequest(nodeNumber);
 800309e:	7dbb      	ldrb	r3, [r7, #22]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f80d 	bl	80030c0 <sendBattRequest>

  return;
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <processIO+0x104>
		return;//include an error report here if time permits
 80030aa:	bf00      	nop
}
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20002170 	.word	0x20002170
 80030b8:	20002144 	.word	0x20002144
 80030bc:	200020c0 	.word	0x200020c0

080030c0 <sendBattRequest>:

//Send Data Requests
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void sendBattRequest(uint8_t nodeNumber)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
	uartBufferTX[0] = 0x7E; //startDelim
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <sendBattRequest+0xe4>)
 80030cc:	227e      	movs	r2, #126	; 0x7e
 80030ce:	701a      	strb	r2, [r3, #0]
	uartBufferTX[1] = 0x00; //length byte 1
 80030d0:	4b34      	ldr	r3, [pc, #208]	; (80031a4 <sendBattRequest+0xe4>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	705a      	strb	r2, [r3, #1]
	uartBufferTX[2] = 0x0F; //length byte 2
 80030d6:	4b33      	ldr	r3, [pc, #204]	; (80031a4 <sendBattRequest+0xe4>)
 80030d8:	220f      	movs	r2, #15
 80030da:	709a      	strb	r2, [r3, #2]
	uartBufferTX[3] = 0x17; //Frame Type
 80030dc:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <sendBattRequest+0xe4>)
 80030de:	2217      	movs	r2, #23
 80030e0:	70da      	strb	r2, [r3, #3]
	uartBufferTX[4] = 0x01; //Frame ID
 80030e2:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <sendBattRequest+0xe4>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	711a      	strb	r2, [r3, #4]
	uartBufferTX[5] = 	fairways[nodeNumber].address[0]; //start of 64bit address
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <sendBattRequest+0xe8>)
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	4413      	add	r3, r2
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	4b2c      	ldr	r3, [pc, #176]	; (80031a4 <sendBattRequest+0xe4>)
 80030f4:	715a      	strb	r2, [r3, #5]
	uartBufferTX[6] = 	fairways[nodeNumber].address[1];
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <sendBattRequest+0xe8>)
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	4413      	add	r3, r2
 80030fe:	3301      	adds	r3, #1
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <sendBattRequest+0xe4>)
 8003104:	719a      	strb	r2, [r3, #6]
	uartBufferTX[7] = 	fairways[nodeNumber].address[2];
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <sendBattRequest+0xe8>)
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	4413      	add	r3, r2
 800310e:	3302      	adds	r3, #2
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <sendBattRequest+0xe4>)
 8003114:	71da      	strb	r2, [r3, #7]
	uartBufferTX[8] = 	fairways[nodeNumber].address[3];
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <sendBattRequest+0xe8>)
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4413      	add	r3, r2
 800311e:	3303      	adds	r3, #3
 8003120:	781a      	ldrb	r2, [r3, #0]
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <sendBattRequest+0xe4>)
 8003124:	721a      	strb	r2, [r3, #8]
	uartBufferTX[9] = 	fairways[nodeNumber].address[4];
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <sendBattRequest+0xe8>)
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	4413      	add	r3, r2
 800312e:	3304      	adds	r3, #4
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <sendBattRequest+0xe4>)
 8003134:	725a      	strb	r2, [r3, #9]
	uartBufferTX[10] =	fairways[nodeNumber].address[5];
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <sendBattRequest+0xe8>)
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	4413      	add	r3, r2
 800313e:	3305      	adds	r3, #5
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <sendBattRequest+0xe4>)
 8003144:	729a      	strb	r2, [r3, #10]
	uartBufferTX[11] = 	fairways[nodeNumber].address[6];
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <sendBattRequest+0xe8>)
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	4413      	add	r3, r2
 800314e:	3306      	adds	r3, #6
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <sendBattRequest+0xe4>)
 8003154:	72da      	strb	r2, [r3, #11]
	uartBufferTX[12] = 	fairways[nodeNumber].address[7]; //last of 64bit address
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <sendBattRequest+0xe8>)
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	4413      	add	r3, r2
 800315e:	3307      	adds	r3, #7
 8003160:	781a      	ldrb	r2, [r3, #0]
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <sendBattRequest+0xe4>)
 8003164:	731a      	strb	r2, [r3, #12]
	uartBufferTX[13] = 0xFF;//Start of 16 bit address
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <sendBattRequest+0xe4>)
 8003168:	22ff      	movs	r2, #255	; 0xff
 800316a:	735a      	strb	r2, [r3, #13]
	uartBufferTX[14] = 0xFE;//End of 16 bit address
 800316c:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <sendBattRequest+0xe4>)
 800316e:	22fe      	movs	r2, #254	; 0xfe
 8003170:	739a      	strb	r2, [r3, #14]
	uartBufferTX[15] = 0x02;//Command Options - 0x02 means apply
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <sendBattRequest+0xe4>)
 8003174:	2202      	movs	r2, #2
 8003176:	73da      	strb	r2, [r3, #15]
	uartBufferTX[16] = 0x25;//AT Command Byte 1 - 0x25 is '%'
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <sendBattRequest+0xe4>)
 800317a:	2225      	movs	r2, #37	; 0x25
 800317c:	741a      	strb	r2, [r3, #16]
	uartBufferTX[17] = 0x56;//AT Command Byte 2 - 0x56 is 'V'
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <sendBattRequest+0xe4>)
 8003180:	2256      	movs	r2, #86	; 0x56
 8003182:	745a      	strb	r2, [r3, #17]
	uartBufferTX[18] = generateChecksum(uartBufferTX);//Checksum (as calculated by XCTU)
 8003184:	4807      	ldr	r0, [pc, #28]	; (80031a4 <sendBattRequest+0xe4>)
 8003186:	f000 f846 	bl	8003216 <generateChecksum>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <sendBattRequest+0xe4>)
 8003190:	749a      	strb	r2, [r3, #18]

	HAL_UART_Receive_IT(&huart3, &uartBufferRX[0], 19);
 8003192:	2213      	movs	r2, #19
 8003194:	4905      	ldr	r1, [pc, #20]	; (80031ac <sendBattRequest+0xec>)
 8003196:	4806      	ldr	r0, [pc, #24]	; (80031b0 <sendBattRequest+0xf0>)
 8003198:	f001 ff04 	bl	8004fa4 <HAL_UART_Receive_IT>
	return;
 800319c:	bf00      	nop
}
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	2000246c 	.word	0x2000246c
 80031a8:	20002170 	.word	0x20002170
 80031ac:	20002144 	.word	0x20002144
 80031b0:	200020c0 	.word	0x200020c0

080031b4 <verifyChecksum>:


//Checksum Functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t verifyChecksum(uint8_t *ioData)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	uint16_t lengthOfData = ioData[1] * 256 + ioData[2]; //this value should always be 17
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3301      	adds	r3, #1
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3302      	adds	r3, #2
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	81fb      	strh	r3, [r7, #14]
	uint16_t checkSumCompare = 0; //calculate the check sum and see if it matches the value recieved
 80031d4:	2300      	movs	r3, #0
 80031d6:	82fb      	strh	r3, [r7, #22]
	/* to verify the checksum:
	 * Add all bytes including the checksum; do not include the delimiter and length.
	 * If the checksum is correct, the last two digits on the far right of the sum equal 0xFF.
	 */

	for (int i = 0; i<=lengthOfData; i++)
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e00b      	b.n	80031f6 <verifyChecksum+0x42>
	{	//i<=lengthOfData includes checksum value, as opposed to i<lengthOfData which does not
		checkSumCompare += ioData[i+3]; //i+3 becasue we skip the delim and length values
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	3303      	adds	r3, #3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	8afb      	ldrh	r3, [r7, #22]
 80031ec:	4413      	add	r3, r2
 80031ee:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i<=lengthOfData; i++)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	3301      	adds	r3, #1
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	89fb      	ldrh	r3, [r7, #14]
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	ddef      	ble.n	80031de <verifyChecksum+0x2a>
	}

	if ((checkSumCompare & 0xFF) == 0xFF) //clears all bits except lowest 8 then compares
 80031fe:	8afb      	ldrh	r3, [r7, #22]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2bff      	cmp	r3, #255	; 0xff
 8003204:	d101      	bne.n	800320a <verifyChecksum+0x56>
	{
		return 1;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <verifyChecksum+0x58>
	}
	else
	{
		return 0;
 800320a:	2300      	movs	r3, #0
	}
}
 800320c:	4618      	mov	r0, r3
 800320e:	371c      	adds	r7, #28
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <generateChecksum>:

uint8_t generateChecksum(uint8_t *frame)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
	 * Add all bytes of the packet, except the start delimiter 0x7E and the length (the second and third bytes).
	 * Keep only the lowest 8 bits from the result.
   	 * Subtract this quantity from 0xFF.
   	 */

	uint16_t length = frame[1]*256 + frame[2];
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3301      	adds	r3, #1
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3302      	adds	r3, #2
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	4413      	add	r3, r2
 8003234:	817b      	strh	r3, [r7, #10]
	uint8_t i = 0;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
	uint16_t sum= 0;
 800323a:	2300      	movs	r3, #0
 800323c:	81bb      	strh	r3, [r7, #12]

	for (i=0; i<length; i++)
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e00b      	b.n	800325c <generateChecksum+0x46>
	{
		sum += frame[i+3];
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	3303      	adds	r3, #3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b29a      	uxth	r2, r3
 8003250:	89bb      	ldrh	r3, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	81bb      	strh	r3, [r7, #12]
	for (i=0; i<length; i++)
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	3301      	adds	r3, #1
 800325a:	73fb      	strb	r3, [r7, #15]
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	b29b      	uxth	r3, r3
 8003260:	897a      	ldrh	r2, [r7, #10]
 8003262:	429a      	cmp	r2, r3
 8003264:	d8ee      	bhi.n	8003244 <generateChecksum+0x2e>
		//sum = sum & 0xFF;//we only need the last two bits in the end
		//this clears off the high numbers that we dont need so we can use
		//a smaller data type
	}

	return (0xFF - sum);
 8003266:	89bb      	ldrh	r3, [r7, #12]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	b2db      	uxtb	r3, r3
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800327e:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_MspInit+0x68>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	4a17      	ldr	r2, [pc, #92]	; (80032e0 <HAL_MspInit+0x68>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6193      	str	r3, [r2, #24]
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <HAL_MspInit+0x68>)
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	4b12      	ldr	r3, [pc, #72]	; (80032e0 <HAL_MspInit+0x68>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	4a11      	ldr	r2, [pc, #68]	; (80032e0 <HAL_MspInit+0x68>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a0:	61d3      	str	r3, [r2, #28]
 80032a2:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <HAL_MspInit+0x68>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032ae:	2200      	movs	r2, #0
 80032b0:	210f      	movs	r1, #15
 80032b2:	f06f 0001 	mvn.w	r0, #1
 80032b6:	f000 fa9c 	bl	80037f2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_MspInit+0x6c>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <HAL_MspInit+0x6c>)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d6:	bf00      	nop
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40010000 	.word	0x40010000

080032e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d10b      	bne.n	8003312 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_TIM_Base_MspInit+0x34>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	4a07      	ldr	r2, [pc, #28]	; (800331c <HAL_TIM_Base_MspInit+0x34>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	61d3      	str	r3, [r2, #28]
 8003306:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_TIM_Base_MspInit+0x34>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08c      	sub	sp, #48	; 0x30
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0320 	add.w	r3, r7, #32
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a4d      	ldr	r2, [pc, #308]	; (8003470 <HAL_UART_MspInit+0x150>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d132      	bne.n	80033a6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003340:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_UART_MspInit+0x154>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4a4b      	ldr	r2, [pc, #300]	; (8003474 <HAL_UART_MspInit+0x154>)
 8003346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800334a:	6193      	str	r3, [r2, #24]
 800334c:	4b49      	ldr	r3, [pc, #292]	; (8003474 <HAL_UART_MspInit+0x154>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_UART_MspInit+0x154>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4a45      	ldr	r2, [pc, #276]	; (8003474 <HAL_UART_MspInit+0x154>)
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	6193      	str	r3, [r2, #24]
 8003364:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_UART_MspInit+0x154>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800337a:	2303      	movs	r3, #3
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	4619      	mov	r1, r3
 8003384:	483c      	ldr	r0, [pc, #240]	; (8003478 <HAL_UART_MspInit+0x158>)
 8003386:	f000 fa5f 	bl	8003848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800338a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800338e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003398:	f107 0320 	add.w	r3, r7, #32
 800339c:	4619      	mov	r1, r3
 800339e:	4836      	ldr	r0, [pc, #216]	; (8003478 <HAL_UART_MspInit+0x158>)
 80033a0:	f000 fa52 	bl	8003848 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033a4:	e060      	b.n	8003468 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART2)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a34      	ldr	r2, [pc, #208]	; (800347c <HAL_UART_MspInit+0x15c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d124      	bne.n	80033fa <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033b0:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_UART_MspInit+0x154>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a2f      	ldr	r2, [pc, #188]	; (8003474 <HAL_UART_MspInit+0x154>)
 80033b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ba:	61d3      	str	r3, [r2, #28]
 80033bc:	4b2d      	ldr	r3, [pc, #180]	; (8003474 <HAL_UART_MspInit+0x154>)
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c8:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <HAL_UART_MspInit+0x154>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	4a29      	ldr	r2, [pc, #164]	; (8003474 <HAL_UART_MspInit+0x154>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	6193      	str	r3, [r2, #24]
 80033d4:	4b27      	ldr	r3, [pc, #156]	; (8003474 <HAL_UART_MspInit+0x154>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033e0:	230c      	movs	r3, #12
 80033e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e4:	2302      	movs	r3, #2
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e8:	2302      	movs	r3, #2
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ec:	f107 0320 	add.w	r3, r7, #32
 80033f0:	4619      	mov	r1, r3
 80033f2:	4821      	ldr	r0, [pc, #132]	; (8003478 <HAL_UART_MspInit+0x158>)
 80033f4:	f000 fa28 	bl	8003848 <HAL_GPIO_Init>
}
 80033f8:	e036      	b.n	8003468 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_UART_MspInit+0x160>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d131      	bne.n	8003468 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_UART_MspInit+0x154>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <HAL_UART_MspInit+0x154>)
 800340a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800340e:	61d3      	str	r3, [r2, #28]
 8003410:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_UART_MspInit+0x154>)
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341c:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_UART_MspInit+0x154>)
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <HAL_UART_MspInit+0x154>)
 8003422:	f043 0308 	orr.w	r3, r3, #8
 8003426:	6193      	str	r3, [r2, #24]
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_UART_MspInit+0x154>)
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800343e:	2303      	movs	r3, #3
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003442:	f107 0320 	add.w	r3, r7, #32
 8003446:	4619      	mov	r1, r3
 8003448:	480e      	ldr	r0, [pc, #56]	; (8003484 <HAL_UART_MspInit+0x164>)
 800344a:	f000 f9fd 	bl	8003848 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800344e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003454:	2300      	movs	r3, #0
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	f107 0320 	add.w	r3, r7, #32
 8003460:	4619      	mov	r1, r3
 8003462:	4808      	ldr	r0, [pc, #32]	; (8003484 <HAL_UART_MspInit+0x164>)
 8003464:	f000 f9f0 	bl	8003848 <HAL_GPIO_Init>
}
 8003468:	bf00      	nop
 800346a:	3730      	adds	r7, #48	; 0x30
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40013800 	.word	0x40013800
 8003474:	40021000 	.word	0x40021000
 8003478:	40010800 	.word	0x40010800
 800347c:	40004400 	.word	0x40004400
 8003480:	40004800 	.word	0x40004800
 8003484:	40010c00 	.word	0x40010c00

08003488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	; 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8003498:	2200      	movs	r2, #0
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	201e      	movs	r0, #30
 800349e:	f000 f9a8 	bl	80037f2 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034a2:	201e      	movs	r0, #30
 80034a4:	f000 f9c1 	bl	800382a <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80034a8:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <HAL_InitTick+0xa0>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4a1e      	ldr	r2, [pc, #120]	; (8003528 <HAL_InitTick+0xa0>)
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	61d3      	str	r3, [r2, #28]
 80034b4:	4b1c      	ldr	r3, [pc, #112]	; (8003528 <HAL_InitTick+0xa0>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034c0:	f107 0210 	add.w	r2, r7, #16
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 ff66 	bl	800439c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80034d0:	f000 ff3c 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 80034d4:	4603      	mov	r3, r0
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	4a13      	ldr	r2, [pc, #76]	; (800352c <HAL_InitTick+0xa4>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0c9b      	lsrs	r3, r3, #18
 80034e4:	3b01      	subs	r3, #1
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80034e8:	4b11      	ldr	r3, [pc, #68]	; (8003530 <HAL_InitTick+0xa8>)
 80034ea:	4a12      	ldr	r2, [pc, #72]	; (8003534 <HAL_InitTick+0xac>)
 80034ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80034ee:	4b10      	ldr	r3, [pc, #64]	; (8003530 <HAL_InitTick+0xa8>)
 80034f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034f4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80034f6:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <HAL_InitTick+0xa8>)
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_InitTick+0xa8>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_InitTick+0xa8>)
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003508:	4809      	ldr	r0, [pc, #36]	; (8003530 <HAL_InitTick+0xa8>)
 800350a:	f000 ff95 	bl	8004438 <HAL_TIM_Base_Init>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003514:	4806      	ldr	r0, [pc, #24]	; (8003530 <HAL_InitTick+0xa8>)
 8003516:	f001 f829 	bl	800456c <HAL_TIM_Base_Start_IT>
 800351a:	4603      	mov	r3, r0
 800351c:	e000      	b.n	8003520 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
}
 8003520:	4618      	mov	r0, r3
 8003522:	3730      	adds	r7, #48	; 0x30
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	431bde83 	.word	0x431bde83
 8003530:	20002488 	.word	0x20002488
 8003534:	40000800 	.word	0x40000800

08003538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800353c:	e7fe      	b.n	800353c <NMI_Handler+0x4>

0800353e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <HardFault_Handler+0x4>

08003544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003548:	e7fe      	b.n	8003548 <MemManage_Handler+0x4>

0800354a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800354e:	e7fe      	b.n	800354e <BusFault_Handler+0x4>

08003550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003554:	e7fe      	b.n	8003554 <UsageFault_Handler+0x4>

08003556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
	...

08003564 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <TIM4_IRQHandler+0x10>)
 800356a:	f001 f851 	bl	8004610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20002488 	.word	0x20002488

08003578 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800357c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003580:	f000 faec 	bl	8003b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}

08003588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003594:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003596:	e003      	b.n	80035a0 <LoopCopyDataInit>

08003598 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800359a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800359c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800359e:	3104      	adds	r1, #4

080035a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80035a0:	480a      	ldr	r0, [pc, #40]	; (80035cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80035a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80035a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80035a8:	d3f6      	bcc.n	8003598 <CopyDataInit>
  ldr r2, =_sbss
 80035aa:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80035ac:	e002      	b.n	80035b4 <LoopFillZerobss>

080035ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80035ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80035b0:	f842 3b04 	str.w	r3, [r2], #4

080035b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80035b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80035b8:	d3f9      	bcc.n	80035ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035ba:	f7ff ffe5 	bl	8003588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035be:	f004 fb75 	bl	8007cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035c2:	f7fe f98b 	bl	80018dc <main>
  bx lr
 80035c6:	4770      	bx	lr
  ldr r3, =_sidata
 80035c8:	08007f7c 	.word	0x08007f7c
  ldr r0, =_sdata
 80035cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80035d0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80035d4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80035d8:	20002514 	.word	0x20002514

080035dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80035dc:	e7fe      	b.n	80035dc <ADC1_2_IRQHandler>
	...

080035e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <HAL_Init+0x28>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a07      	ldr	r2, [pc, #28]	; (8003608 <HAL_Init+0x28>)
 80035ea:	f043 0310 	orr.w	r3, r3, #16
 80035ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035f0:	2003      	movs	r0, #3
 80035f2:	f000 f8f3 	bl	80037dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7ff ff46 	bl	8003488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035fc:	f7ff fe3c 	bl	8003278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40022000 	.word	0x40022000

0800360c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_IncTick+0x1c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	461a      	mov	r2, r3
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_IncTick+0x20>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4413      	add	r3, r2
 800361c:	4a03      	ldr	r2, [pc, #12]	; (800362c <HAL_IncTick+0x20>)
 800361e:	6013      	str	r3, [r2, #0]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	20000008 	.word	0x20000008
 800362c:	200024d0 	.word	0x200024d0

08003630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return uwTick;
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <HAL_GetTick+0x10>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	200024d0 	.word	0x200024d0

08003644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff fff0 	bl	8003630 <HAL_GetTick>
 8003650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d005      	beq.n	800366a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800365e:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_Delay+0x40>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800366a:	bf00      	nop
 800366c:	f7ff ffe0 	bl	8003630 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	429a      	cmp	r2, r3
 800367a:	d8f7      	bhi.n	800366c <HAL_Delay+0x28>
  {
  }
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000008 	.word	0x20000008

08003688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a4:	4013      	ands	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ba:	4a04      	ldr	r2, [pc, #16]	; (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	60d3      	str	r3, [r2, #12]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <__NVIC_GetPriorityGrouping+0x18>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 0307 	and.w	r3, r3, #7
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	db0b      	blt.n	8003716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	f003 021f 	and.w	r2, r3, #31
 8003704:	4906      	ldr	r1, [pc, #24]	; (8003720 <__NVIC_EnableIRQ+0x34>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2001      	movs	r0, #1
 800370e:	fa00 f202 	lsl.w	r2, r0, r2
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100

08003724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003734:	2b00      	cmp	r3, #0
 8003736:	db0a      	blt.n	800374e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	490c      	ldr	r1, [pc, #48]	; (8003770 <__NVIC_SetPriority+0x4c>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	440b      	add	r3, r1
 8003748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800374c:	e00a      	b.n	8003764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4908      	ldr	r1, [pc, #32]	; (8003774 <__NVIC_SetPriority+0x50>)
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	3b04      	subs	r3, #4
 800375c:	0112      	lsls	r2, r2, #4
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	440b      	add	r3, r1
 8003762:	761a      	strb	r2, [r3, #24]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000e100 	.word	0xe000e100
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f1c3 0307 	rsb	r3, r3, #7
 8003792:	2b04      	cmp	r3, #4
 8003794:	bf28      	it	cs
 8003796:	2304      	movcs	r3, #4
 8003798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3304      	adds	r3, #4
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d902      	bls.n	80037a8 <NVIC_EncodePriority+0x30>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3b03      	subs	r3, #3
 80037a6:	e000      	b.n	80037aa <NVIC_EncodePriority+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	f04f 32ff 	mov.w	r2, #4294967295
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	401a      	ands	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	4313      	orrs	r3, r2
         );
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff ff4f 	bl	8003688 <__NVIC_SetPriorityGrouping>
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	4603      	mov	r3, r0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003804:	f7ff ff64 	bl	80036d0 <__NVIC_GetPriorityGrouping>
 8003808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	6978      	ldr	r0, [r7, #20]
 8003810:	f7ff ffb2 	bl	8003778 <NVIC_EncodePriority>
 8003814:	4602      	mov	r2, r0
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff ff81 	bl	8003724 <__NVIC_SetPriority>
}
 8003822:	bf00      	nop
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	4603      	mov	r3, r0
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff57 	bl	80036ec <__NVIC_EnableIRQ>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003848:	b480      	push	{r7}
 800384a:	b08b      	sub	sp, #44	; 0x2c
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003852:	2300      	movs	r3, #0
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003856:	2300      	movs	r3, #0
 8003858:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800385a:	e127      	b.n	8003aac <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800385c:	2201      	movs	r2, #1
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 8116 	bne.w	8003aa6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b12      	cmp	r3, #18
 8003880:	d034      	beq.n	80038ec <HAL_GPIO_Init+0xa4>
 8003882:	2b12      	cmp	r3, #18
 8003884:	d80d      	bhi.n	80038a2 <HAL_GPIO_Init+0x5a>
 8003886:	2b02      	cmp	r3, #2
 8003888:	d02b      	beq.n	80038e2 <HAL_GPIO_Init+0x9a>
 800388a:	2b02      	cmp	r3, #2
 800388c:	d804      	bhi.n	8003898 <HAL_GPIO_Init+0x50>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d031      	beq.n	80038f6 <HAL_GPIO_Init+0xae>
 8003892:	2b01      	cmp	r3, #1
 8003894:	d01c      	beq.n	80038d0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003896:	e048      	b.n	800392a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003898:	2b03      	cmp	r3, #3
 800389a:	d043      	beq.n	8003924 <HAL_GPIO_Init+0xdc>
 800389c:	2b11      	cmp	r3, #17
 800389e:	d01b      	beq.n	80038d8 <HAL_GPIO_Init+0x90>
          break;
 80038a0:	e043      	b.n	800392a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038a2:	4a89      	ldr	r2, [pc, #548]	; (8003ac8 <HAL_GPIO_Init+0x280>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d026      	beq.n	80038f6 <HAL_GPIO_Init+0xae>
 80038a8:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <HAL_GPIO_Init+0x280>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d806      	bhi.n	80038bc <HAL_GPIO_Init+0x74>
 80038ae:	4a87      	ldr	r2, [pc, #540]	; (8003acc <HAL_GPIO_Init+0x284>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d020      	beq.n	80038f6 <HAL_GPIO_Init+0xae>
 80038b4:	4a86      	ldr	r2, [pc, #536]	; (8003ad0 <HAL_GPIO_Init+0x288>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01d      	beq.n	80038f6 <HAL_GPIO_Init+0xae>
          break;
 80038ba:	e036      	b.n	800392a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80038bc:	4a85      	ldr	r2, [pc, #532]	; (8003ad4 <HAL_GPIO_Init+0x28c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d019      	beq.n	80038f6 <HAL_GPIO_Init+0xae>
 80038c2:	4a85      	ldr	r2, [pc, #532]	; (8003ad8 <HAL_GPIO_Init+0x290>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d016      	beq.n	80038f6 <HAL_GPIO_Init+0xae>
 80038c8:	4a84      	ldr	r2, [pc, #528]	; (8003adc <HAL_GPIO_Init+0x294>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_GPIO_Init+0xae>
          break;
 80038ce:	e02c      	b.n	800392a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	623b      	str	r3, [r7, #32]
          break;
 80038d6:	e028      	b.n	800392a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	3304      	adds	r3, #4
 80038de:	623b      	str	r3, [r7, #32]
          break;
 80038e0:	e023      	b.n	800392a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	3308      	adds	r3, #8
 80038e8:	623b      	str	r3, [r7, #32]
          break;
 80038ea:	e01e      	b.n	800392a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	330c      	adds	r3, #12
 80038f2:	623b      	str	r3, [r7, #32]
          break;
 80038f4:	e019      	b.n	800392a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038fe:	2304      	movs	r3, #4
 8003900:	623b      	str	r3, [r7, #32]
          break;
 8003902:	e012      	b.n	800392a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800390c:	2308      	movs	r3, #8
 800390e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69fa      	ldr	r2, [r7, #28]
 8003914:	611a      	str	r2, [r3, #16]
          break;
 8003916:	e008      	b.n	800392a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003918:	2308      	movs	r3, #8
 800391a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	615a      	str	r2, [r3, #20]
          break;
 8003922:	e002      	b.n	800392a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003924:	2300      	movs	r3, #0
 8003926:	623b      	str	r3, [r7, #32]
          break;
 8003928:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2bff      	cmp	r3, #255	; 0xff
 800392e:	d801      	bhi.n	8003934 <HAL_GPIO_Init+0xec>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	e001      	b.n	8003938 <HAL_GPIO_Init+0xf0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2bff      	cmp	r3, #255	; 0xff
 800393e:	d802      	bhi.n	8003946 <HAL_GPIO_Init+0xfe>
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	e002      	b.n	800394c <HAL_GPIO_Init+0x104>
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	3b08      	subs	r3, #8
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	210f      	movs	r1, #15
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	401a      	ands	r2, r3
 800395e:	6a39      	ldr	r1, [r7, #32]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	431a      	orrs	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8096 	beq.w	8003aa6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800397a:	4b59      	ldr	r3, [pc, #356]	; (8003ae0 <HAL_GPIO_Init+0x298>)
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_GPIO_Init+0x298>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6193      	str	r3, [r2, #24]
 8003986:	4b56      	ldr	r3, [pc, #344]	; (8003ae0 <HAL_GPIO_Init+0x298>)
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003992:	4a54      	ldr	r2, [pc, #336]	; (8003ae4 <HAL_GPIO_Init+0x29c>)
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	089b      	lsrs	r3, r3, #2
 8003998:	3302      	adds	r3, #2
 800399a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f003 0303 	and.w	r3, r3, #3
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	220f      	movs	r2, #15
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43db      	mvns	r3, r3
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a4b      	ldr	r2, [pc, #300]	; (8003ae8 <HAL_GPIO_Init+0x2a0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_GPIO_Init+0x19e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <HAL_GPIO_Init+0x2a4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00d      	beq.n	80039e2 <HAL_GPIO_Init+0x19a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a49      	ldr	r2, [pc, #292]	; (8003af0 <HAL_GPIO_Init+0x2a8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_GPIO_Init+0x196>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a48      	ldr	r2, [pc, #288]	; (8003af4 <HAL_GPIO_Init+0x2ac>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d101      	bne.n	80039da <HAL_GPIO_Init+0x192>
 80039d6:	2303      	movs	r3, #3
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x1a0>
 80039da:	2304      	movs	r3, #4
 80039dc:	e004      	b.n	80039e8 <HAL_GPIO_Init+0x1a0>
 80039de:	2302      	movs	r3, #2
 80039e0:	e002      	b.n	80039e8 <HAL_GPIO_Init+0x1a0>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_GPIO_Init+0x1a0>
 80039e6:	2300      	movs	r3, #0
 80039e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ea:	f002 0203 	and.w	r2, r2, #3
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	4093      	lsls	r3, r2
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039f8:	493a      	ldr	r1, [pc, #232]	; (8003ae4 <HAL_GPIO_Init+0x29c>)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	3302      	adds	r3, #2
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003a12:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4938      	ldr	r1, [pc, #224]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
 8003a1e:	e006      	b.n	8003a2e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a20:	4b35      	ldr	r3, [pc, #212]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	4933      	ldr	r1, [pc, #204]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003a3a:	4b2f      	ldr	r3, [pc, #188]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	492e      	ldr	r1, [pc, #184]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
 8003a46:	e006      	b.n	8003a56 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003a48:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	4929      	ldr	r1, [pc, #164]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a62:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	4924      	ldr	r1, [pc, #144]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
 8003a6e:	e006      	b.n	8003a7e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	491f      	ldr	r1, [pc, #124]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d006      	beq.n	8003a98 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a8a:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	491a      	ldr	r1, [pc, #104]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60cb      	str	r3, [r1, #12]
 8003a96:	e006      	b.n	8003aa6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a98:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003a9a:	68da      	ldr	r2, [r3, #12]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	4915      	ldr	r1, [pc, #84]	; (8003af8 <HAL_GPIO_Init+0x2b0>)
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f47f aed0 	bne.w	800385c <HAL_GPIO_Init+0x14>
  }
}
 8003abc:	bf00      	nop
 8003abe:	372c      	adds	r7, #44	; 0x2c
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	10210000 	.word	0x10210000
 8003acc:	10110000 	.word	0x10110000
 8003ad0:	10120000 	.word	0x10120000
 8003ad4:	10310000 	.word	0x10310000
 8003ad8:	10320000 	.word	0x10320000
 8003adc:	10220000 	.word	0x10220000
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40010800 	.word	0x40010800
 8003aec:	40010c00 	.word	0x40010c00
 8003af0:	40011000 	.word	0x40011000
 8003af4:	40011400 	.word	0x40011400
 8003af8:	40010400 	.word	0x40010400

08003afc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	887b      	ldrh	r3, [r7, #2]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
 8003b18:	e001      	b.n	8003b1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	807b      	strh	r3, [r7, #2]
 8003b36:	4613      	mov	r3, r2
 8003b38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b3a:	787b      	ldrb	r3, [r7, #1]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b40:	887a      	ldrh	r2, [r7, #2]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003b46:	e003      	b.n	8003b50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	041a      	lsls	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	611a      	str	r2, [r3, #16]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b72:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f806 	bl	8003b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40010400 	.word	0x40010400

08003b8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b96:	bf00      	nop
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e26c      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8087 	beq.w	8003cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc0:	4b92      	ldr	r3, [pc, #584]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d00c      	beq.n	8003be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bcc:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d112      	bne.n	8003bfe <HAL_RCC_OscConfig+0x5e>
 8003bd8:	4b8c      	ldr	r3, [pc, #560]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be4:	d10b      	bne.n	8003bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be6:	4b89      	ldr	r3, [pc, #548]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d06c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x12c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d168      	bne.n	8003ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e246      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x76>
 8003c08:	4b80      	ldr	r3, [pc, #512]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a7f      	ldr	r2, [pc, #508]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e02e      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x98>
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7a      	ldr	r2, [pc, #488]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b78      	ldr	r3, [pc, #480]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a77      	ldr	r2, [pc, #476]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e01d      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0xbc>
 8003c42:	4b72      	ldr	r3, [pc, #456]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a71      	ldr	r2, [pc, #452]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6e      	ldr	r2, [pc, #440]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xd4>
 8003c5c:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6a      	ldr	r2, [pc, #424]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b68      	ldr	r3, [pc, #416]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a67      	ldr	r2, [pc, #412]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7ff fcd8 	bl	8003630 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7ff fcd4 	bl	8003630 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	; 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1fa      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b5d      	ldr	r3, [pc, #372]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0xe4>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7ff fcc4 	bl	8003630 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7ff fcc0 	bl	8003630 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	; 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e1e6      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	4b53      	ldr	r3, [pc, #332]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x10c>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d063      	beq.n	8003da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cda:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x18c>
 8003cf2:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x176>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1ba      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	4939      	ldr	r1, [pc, #228]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d36:	2201      	movs	r2, #1
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7ff fc79 	bl	8003630 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7ff fc75 	bl	8003630 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e19b      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4927      	ldr	r1, [pc, #156]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
 8003d74:	e015      	b.n	8003da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <HAL_RCC_OscConfig+0x270>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7ff fc58 	bl	8003630 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d84:	f7ff fc54 	bl	8003630 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e17a      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d03a      	beq.n	8003e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d019      	beq.n	8003dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dbc:	f7ff fc38 	bl	8003630 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7ff fc34 	bl	8003630 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e15a      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f000 fb0a 	bl	80043fc <RCC_Delay>
 8003de8:	e01c      	b.n	8003e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_RCC_OscConfig+0x274>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7ff fc1e 	bl	8003630 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df6:	e00f      	b.n	8003e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df8:	f7ff fc1a 	bl	8003630 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d908      	bls.n	8003e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e140      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
 8003e0a:	bf00      	nop
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	42420000 	.word	0x42420000
 8003e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e18:	4b9e      	ldr	r3, [pc, #632]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e9      	bne.n	8003df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80a6 	beq.w	8003f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e32:	2300      	movs	r3, #0
 8003e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4b97      	ldr	r3, [pc, #604]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10d      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4b94      	ldr	r3, [pc, #592]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	4a93      	ldr	r2, [pc, #588]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	61d3      	str	r3, [r2, #28]
 8003e4e:	4b91      	ldr	r3, [pc, #580]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b8e      	ldr	r3, [pc, #568]	; (8004098 <HAL_RCC_OscConfig+0x4f8>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b8b      	ldr	r3, [pc, #556]	; (8004098 <HAL_RCC_OscConfig+0x4f8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a8a      	ldr	r2, [pc, #552]	; (8004098 <HAL_RCC_OscConfig+0x4f8>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7ff fbdb 	bl	8003630 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7ff fbd7 	bl	8003630 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b64      	cmp	r3, #100	; 0x64
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e0fd      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	4b81      	ldr	r3, [pc, #516]	; (8004098 <HAL_RCC_OscConfig+0x4f8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x312>
 8003ea4:	4b7b      	ldr	r3, [pc, #492]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a7a      	ldr	r2, [pc, #488]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	e02d      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x334>
 8003eba:	4b76      	ldr	r3, [pc, #472]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a75      	ldr	r2, [pc, #468]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	4b73      	ldr	r3, [pc, #460]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a72      	ldr	r2, [pc, #456]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6213      	str	r3, [r2, #32]
 8003ed2:	e01c      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x356>
 8003edc:	4b6d      	ldr	r3, [pc, #436]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	4a6c      	ldr	r2, [pc, #432]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	6213      	str	r3, [r2, #32]
 8003ee8:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	4a69      	ldr	r2, [pc, #420]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6213      	str	r3, [r2, #32]
 8003ef4:	e00b      	b.n	8003f0e <HAL_RCC_OscConfig+0x36e>
 8003ef6:	4b67      	ldr	r3, [pc, #412]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a66      	ldr	r2, [pc, #408]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	6213      	str	r3, [r2, #32]
 8003f02:	4b64      	ldr	r3, [pc, #400]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	4a63      	ldr	r2, [pc, #396]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003f08:	f023 0304 	bic.w	r3, r3, #4
 8003f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f16:	f7ff fb8b 	bl	8003630 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7ff fb87 	bl	8003630 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e0ab      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	4b57      	ldr	r3, [pc, #348]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ee      	beq.n	8003f1e <HAL_RCC_OscConfig+0x37e>
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7ff fb75 	bl	8003630 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7ff fb71 	bl	8003630 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e095      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d105      	bne.n	8003f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f72:	4b48      	ldr	r3, [pc, #288]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4a47      	ldr	r2, [pc, #284]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 8081 	beq.w	800408a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f88:	4b42      	ldr	r3, [pc, #264]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 030c 	and.w	r3, r3, #12
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d061      	beq.n	8004058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d146      	bne.n	800402a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b3f      	ldr	r3, [pc, #252]	; (800409c <HAL_RCC_OscConfig+0x4fc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7ff fb45 	bl	8003630 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003faa:	f7ff fb41 	bl	8003630 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e067      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d108      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003fd2:	4b30      	ldr	r3, [pc, #192]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	492d      	ldr	r1, [pc, #180]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe4:	4b2b      	ldr	r3, [pc, #172]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a19      	ldr	r1, [r3, #32]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	4927      	ldr	r1, [pc, #156]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ffc:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_OscConfig+0x4fc>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7ff fb15 	bl	8003630 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400a:	f7ff fb11 	bl	8003630 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e037      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800401c:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x46a>
 8004028:	e02f      	b.n	800408a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	4b1c      	ldr	r3, [pc, #112]	; (800409c <HAL_RCC_OscConfig+0x4fc>)
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7ff fafe 	bl	8003630 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7ff fafa 	bl	8003630 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e020      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x498>
 8004056:	e018      	b.n	800408a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e013      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004064:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <HAL_RCC_OscConfig+0x4f4>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	429a      	cmp	r2, r3
 8004076:	d106      	bne.n	8004086 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d001      	beq.n	800408a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40021000 	.word	0x40021000
 8004098:	40007000 	.word	0x40007000
 800409c:	42420060 	.word	0x42420060

080040a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0d0      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040b4:	4b6a      	ldr	r3, [pc, #424]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d910      	bls.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b67      	ldr	r3, [pc, #412]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 0207 	bic.w	r2, r3, #7
 80040ca:	4965      	ldr	r1, [pc, #404]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d2:	4b63      	ldr	r3, [pc, #396]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0b8      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004114:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800411a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800411e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	494d      	ldr	r1, [pc, #308]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d040      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d107      	bne.n	8004156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	4b47      	ldr	r3, [pc, #284]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d115      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e07f      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e073      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e06b      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	4936      	ldr	r1, [pc, #216]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	4313      	orrs	r3, r2
 800418e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004190:	f7ff fa4e 	bl	8003630 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004196:	e00a      	b.n	80041ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004198:	f7ff fa4a 	bl	8003630 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e053      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 020c 	and.w	r2, r3, #12
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	429a      	cmp	r2, r3
 80041be:	d1eb      	bne.n	8004198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80041c0:	4b27      	ldr	r3, [pc, #156]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d210      	bcs.n	80041f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 0207 	bic.w	r2, r3, #7
 80041d6:	4922      	ldr	r1, [pc, #136]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e032      	b.n	8004256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041fc:	4b19      	ldr	r3, [pc, #100]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4916      	ldr	r1, [pc, #88]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	4313      	orrs	r3, r2
 800420c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	490e      	ldr	r1, [pc, #56]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800422e:	f000 f821 	bl	8004274 <HAL_RCC_GetSysClockFreq>
 8004232:	4601      	mov	r1, r0
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	5cd3      	ldrb	r3, [r2, r3]
 8004242:	fa21 f303 	lsr.w	r3, r1, r3
 8004246:	4a09      	ldr	r2, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1cc>)
 8004248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1d0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff f91a 	bl	8003488 <HAL_InitTick>

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40022000 	.word	0x40022000
 8004264:	40021000 	.word	0x40021000
 8004268:	08007f5c 	.word	0x08007f5c
 800426c:	20000000 	.word	0x20000000
 8004270:	20000004 	.word	0x20000004

08004274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004274:	b490      	push	{r4, r7}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800427a:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <HAL_RCC_GetSysClockFreq+0xb0>)
 800427c:	1d3c      	adds	r4, r7, #4
 800427e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004284:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	2300      	movs	r3, #0
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800429e:	4b23      	ldr	r3, [pc, #140]	; (800432c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d002      	beq.n	80042b4 <HAL_RCC_GetSysClockFreq+0x40>
 80042ae:	2b08      	cmp	r3, #8
 80042b0:	d003      	beq.n	80042ba <HAL_RCC_GetSysClockFreq+0x46>
 80042b2:	e02d      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042b4:	4b1e      	ldr	r3, [pc, #120]	; (8004330 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042b6:	623b      	str	r3, [r7, #32]
      break;
 80042b8:	e02d      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	0c9b      	lsrs	r3, r3, #18
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042c6:	4413      	add	r3, r2
 80042c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d013      	beq.n	8004300 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <HAL_RCC_GetSysClockFreq+0xb8>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c5b      	lsrs	r3, r3, #17
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80042e6:	4413      	add	r3, r2
 80042e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	4a0f      	ldr	r2, [pc, #60]	; (8004330 <HAL_RCC_GetSysClockFreq+0xbc>)
 80042f2:	fb02 f203 	mul.w	r2, r2, r3
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
 80042fe:	e004      	b.n	800430a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4a0c      	ldr	r2, [pc, #48]	; (8004334 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	623b      	str	r3, [r7, #32]
      break;
 800430e:	e002      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004312:	623b      	str	r3, [r7, #32]
      break;
 8004314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004316:	6a3b      	ldr	r3, [r7, #32]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3728      	adds	r7, #40	; 0x28
 800431c:	46bd      	mov	sp, r7
 800431e:	bc90      	pop	{r4, r7}
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	08007de0 	.word	0x08007de0
 8004328:	08007df0 	.word	0x08007df0
 800432c:	40021000 	.word	0x40021000
 8004330:	007a1200 	.word	0x007a1200
 8004334:	003d0900 	.word	0x003d0900

08004338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800433c:	4b02      	ldr	r3, [pc, #8]	; (8004348 <HAL_RCC_GetHCLKFreq+0x10>)
 800433e:	681b      	ldr	r3, [r3, #0]
}
 8004340:	4618      	mov	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr
 8004348:	20000000 	.word	0x20000000

0800434c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004350:	f7ff fff2 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 8004354:	4601      	mov	r1, r0
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	4a03      	ldr	r2, [pc, #12]	; (8004370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004362:	5cd3      	ldrb	r3, [r2, r3]
 8004364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004368:	4618      	mov	r0, r3
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40021000 	.word	0x40021000
 8004370:	08007f6c 	.word	0x08007f6c

08004374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004378:	f7ff ffde 	bl	8004338 <HAL_RCC_GetHCLKFreq>
 800437c:	4601      	mov	r1, r0
 800437e:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	0adb      	lsrs	r3, r3, #11
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	4a03      	ldr	r2, [pc, #12]	; (8004398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800438a:	5cd3      	ldrb	r3, [r2, r3]
 800438c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004390:	4618      	mov	r0, r3
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	08007f6c 	.word	0x08007f6c

0800439c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	220f      	movs	r2, #15
 80043aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <HAL_RCC_GetClockConfig+0x58>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f003 0203 	and.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_RCC_GetClockConfig+0x58>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_GetClockConfig+0x58>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCC_GetClockConfig+0x58>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	08db      	lsrs	r3, r3, #3
 80043d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_RCC_GetClockConfig+0x5c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0207 	and.w	r2, r3, #7
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40022000 	.word	0x40022000

080043fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <RCC_Delay+0x34>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <RCC_Delay+0x38>)
 800440a:	fba2 2303 	umull	r2, r3, r2, r3
 800440e:	0a5b      	lsrs	r3, r3, #9
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004418:	bf00      	nop
  }
  while (Delay --);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	60fa      	str	r2, [r7, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f9      	bne.n	8004418 <RCC_Delay+0x1c>
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000000 	.word	0x20000000
 8004434:	10624dd3 	.word	0x10624dd3

08004438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e041      	b.n	80044ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fe ff42 	bl	80032e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f000 faae 	bl	80049d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d001      	beq.n	80044f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e032      	b.n	8004556 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a18      	ldr	r2, [pc, #96]	; (8004560 <HAL_TIM_Base_Start+0x88>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_TIM_Base_Start+0x48>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800450a:	d009      	beq.n	8004520 <HAL_TIM_Base_Start+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a14      	ldr	r2, [pc, #80]	; (8004564 <HAL_TIM_Base_Start+0x8c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIM_Base_Start+0x48>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a13      	ldr	r2, [pc, #76]	; (8004568 <HAL_TIM_Base_Start+0x90>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d111      	bne.n	8004544 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b06      	cmp	r3, #6
 8004530:	d010      	beq.n	8004554 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0201 	orr.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004542:	e007      	b.n	8004554 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800

0800456c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d001      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e03a      	b.n	80045fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a18      	ldr	r2, [pc, #96]	; (8004604 <HAL_TIM_Base_Start_IT+0x98>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x58>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d009      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x58>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <HAL_TIM_Base_Start_IT+0x9c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0x58>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a13      	ldr	r2, [pc, #76]	; (800460c <HAL_TIM_Base_Start_IT+0xa0>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d111      	bne.n	80045e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b06      	cmp	r3, #6
 80045d4:	d010      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e6:	e007      	b.n	80045f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr
 8004604:	40012c00 	.word	0x40012c00
 8004608:	40000400 	.word	0x40000400
 800460c:	40000800 	.word	0x40000800

08004610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d122      	bne.n	800466c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	d11b      	bne.n	800466c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0202 	mvn.w	r2, #2
 800463c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f9a4 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f997 	bl	800498e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f9a6 	bl	80049b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d122      	bne.n	80046c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b04      	cmp	r3, #4
 8004686:	d11b      	bne.n	80046c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0204 	mvn.w	r2, #4
 8004690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2202      	movs	r2, #2
 8004696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f97a 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 80046ac:	e005      	b.n	80046ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f96d 	bl	800498e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f97c 	bl	80049b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d122      	bne.n	8004714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0308 	and.w	r3, r3, #8
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d11b      	bne.n	8004714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0208 	mvn.w	r2, #8
 80046e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2204      	movs	r2, #4
 80046ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 0303 	and.w	r3, r3, #3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f950 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 8004700:	e005      	b.n	800470e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f943 	bl	800498e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f952 	bl	80049b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b10      	cmp	r3, #16
 8004720:	d122      	bne.n	8004768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b10      	cmp	r3, #16
 800472e:	d11b      	bne.n	8004768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0210 	mvn.w	r2, #16
 8004738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2208      	movs	r2, #8
 800473e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f926 	bl	80049a0 <HAL_TIM_IC_CaptureCallback>
 8004754:	e005      	b.n	8004762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f919 	bl	800498e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f928 	bl	80049b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10e      	bne.n	8004794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d107      	bne.n	8004794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0201 	mvn.w	r2, #1
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fe faf6 	bl	8002d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d10e      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ac:	2b80      	cmp	r3, #128	; 0x80
 80047ae:	d107      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa6b 	bl	8004c96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d10e      	bne.n	80047ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d107      	bne.n	80047ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8ec 	bl	80049c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f003 0320 	and.w	r3, r3, #32
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d10e      	bne.n	8004818 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b20      	cmp	r3, #32
 8004806:	d107      	bne.n	8004818 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0220 	mvn.w	r2, #32
 8004810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 fa36 	bl	8004c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_TIM_ConfigClockSource+0x18>
 8004834:	2302      	movs	r3, #2
 8004836:	e0a6      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x166>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004856:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800485e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d067      	beq.n	8004940 <HAL_TIM_ConfigClockSource+0x120>
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d80b      	bhi.n	800488c <HAL_TIM_ConfigClockSource+0x6c>
 8004874:	2b10      	cmp	r3, #16
 8004876:	d073      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0x140>
 8004878:	2b10      	cmp	r3, #16
 800487a:	d802      	bhi.n	8004882 <HAL_TIM_ConfigClockSource+0x62>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d06f      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004880:	e078      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004882:	2b20      	cmp	r3, #32
 8004884:	d06c      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0x140>
 8004886:	2b30      	cmp	r3, #48	; 0x30
 8004888:	d06a      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800488a:	e073      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800488c:	2b70      	cmp	r3, #112	; 0x70
 800488e:	d00d      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x8c>
 8004890:	2b70      	cmp	r3, #112	; 0x70
 8004892:	d804      	bhi.n	800489e <HAL_TIM_ConfigClockSource+0x7e>
 8004894:	2b50      	cmp	r3, #80	; 0x50
 8004896:	d033      	beq.n	8004900 <HAL_TIM_ConfigClockSource+0xe0>
 8004898:	2b60      	cmp	r3, #96	; 0x60
 800489a:	d041      	beq.n	8004920 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800489c:	e06a      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	d066      	beq.n	8004972 <HAL_TIM_ConfigClockSource+0x152>
 80048a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a8:	d017      	beq.n	80048da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048aa:	e063      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6899      	ldr	r1, [r3, #8]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f000 f965 	bl	8004b8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	609a      	str	r2, [r3, #8]
      break;
 80048d8:	e04c      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6899      	ldr	r1, [r3, #8]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f000 f94e 	bl	8004b8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fc:	609a      	str	r2, [r3, #8]
      break;
 80048fe:	e039      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	6859      	ldr	r1, [r3, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	461a      	mov	r2, r3
 800490e:	f000 f8c5 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2150      	movs	r1, #80	; 0x50
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f91c 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 800491e:	e029      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	461a      	mov	r2, r3
 800492e:	f000 f8e3 	bl	8004af8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2160      	movs	r1, #96	; 0x60
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f90c 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 800493e:	e019      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	6859      	ldr	r1, [r3, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	461a      	mov	r2, r3
 800494e:	f000 f8a5 	bl	8004a9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2140      	movs	r1, #64	; 0x40
 8004958:	4618      	mov	r0, r3
 800495a:	f000 f8fc 	bl	8004b56 <TIM_ITRx_SetConfig>
      break;
 800495e:	e009      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f000 f8f3 	bl	8004b56 <TIM_ITRx_SetConfig>
        break;
 8004970:	e000      	b.n	8004974 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr
	...

080049d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a29      	ldr	r2, [pc, #164]	; (8004a90 <TIM_Base_SetConfig+0xb8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00b      	beq.n	8004a08 <TIM_Base_SetConfig+0x30>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f6:	d007      	beq.n	8004a08 <TIM_Base_SetConfig+0x30>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a26      	ldr	r2, [pc, #152]	; (8004a94 <TIM_Base_SetConfig+0xbc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <TIM_Base_SetConfig+0x30>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <TIM_Base_SetConfig+0xc0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d108      	bne.n	8004a1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a1c      	ldr	r2, [pc, #112]	; (8004a90 <TIM_Base_SetConfig+0xb8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0x62>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0x62>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <TIM_Base_SetConfig+0xbc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0x62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a18      	ldr	r2, [pc, #96]	; (8004a98 <TIM_Base_SetConfig+0xc0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <TIM_Base_SetConfig+0xb8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d103      	bne.n	8004a80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	615a      	str	r2, [r3, #20]
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	40012c00 	.word	0x40012c00
 8004a94:	40000400 	.word	0x40000400
 8004a98:	40000800 	.word	0x40000800

08004a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 030a 	bic.w	r3, r3, #10
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr

08004af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0210 	bic.w	r2, r3, #16
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	031b      	lsls	r3, r3, #12
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr

08004b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f043 0307 	orr.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	609a      	str	r2, [r3, #8]
}
 8004b80:	bf00      	nop
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr

08004b8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b087      	sub	sp, #28
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	021a      	lsls	r2, r3, #8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	431a      	orrs	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	609a      	str	r2, [r3, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e046      	b.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a12      	ldr	r2, [pc, #72]	; (8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10c      	bne.n	8004c5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr
 8004c78:	40012c00 	.word	0x40012c00
 8004c7c:	40000400 	.word	0x40000400
 8004c80:	40000800 	.word	0x40000800

08004c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e03f      	b.n	8004d3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7fe fb26 	bl	8003320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2224      	movs	r2, #36	; 0x24
 8004cd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f9f7 	bl	80050e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b08a      	sub	sp, #40	; 0x28
 8004d46:	af02      	add	r7, sp, #8
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d17c      	bne.n	8004e5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_UART_Transmit+0x2c>
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e075      	b.n	8004e5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_UART_Transmit+0x3e>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e06e      	b.n	8004e5e <HAL_UART_Transmit+0x11c>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2221      	movs	r2, #33	; 0x21
 8004d92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d96:	f7fe fc4b 	bl	8003630 <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	88fa      	ldrh	r2, [r7, #6]
 8004da6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db0:	d108      	bne.n	8004dc4 <HAL_UART_Transmit+0x82>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d104      	bne.n	8004dc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e003      	b.n	8004dcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004dd4:	e02a      	b.n	8004e2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2180      	movs	r1, #128	; 0x80
 8004de0:	68f8      	ldr	r0, [r7, #12]
 8004de2:	f000 f933 	bl	800504c <UART_WaitOnFlagUntilTimeout>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e036      	b.n	8004e5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	3302      	adds	r3, #2
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	e007      	b.n	8004e1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1cf      	bne.n	8004dd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2140      	movs	r1, #64	; 0x40
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f903 	bl	800504c <UART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e006      	b.n	8004e5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e000      	b.n	8004e5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e5c:	2302      	movs	r3, #2
  }
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b08a      	sub	sp, #40	; 0x28
 8004e6a:	af02      	add	r7, sp, #8
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	f040 8089 	bne.w	8004f9a <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_UART_Receive+0x2e>
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e081      	b.n	8004f9c <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_UART_Receive+0x40>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e07a      	b.n	8004f9c <HAL_UART_Receive+0x136>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2222      	movs	r2, #34	; 0x22
 8004eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004ebc:	f7fe fbb8 	bl	8003630 <HAL_GetTick>
 8004ec0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	88fa      	ldrh	r2, [r7, #6]
 8004ecc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed6:	d108      	bne.n	8004eea <HAL_UART_Receive+0x84>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d104      	bne.n	8004eea <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	e003      	b.n	8004ef2 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004efa:	e043      	b.n	8004f84 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2200      	movs	r2, #0
 8004f04:	2120      	movs	r1, #32
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f8a0 	bl	800504c <UART_WaitOnFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e042      	b.n	8004f9c <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10c      	bne.n	8004f36 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	3302      	adds	r3, #2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e01f      	b.n	8004f76 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3e:	d007      	beq.n	8004f50 <HAL_UART_Receive+0xea>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_UART_Receive+0xf8>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	701a      	strb	r2, [r3, #0]
 8004f5c:	e008      	b.n	8004f70 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1b6      	bne.n	8004efc <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	e000      	b.n	8004f9c <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004f9a:	2302      	movs	r3, #2
  }
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d140      	bne.n	8005040 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_UART_Receive_IT+0x26>
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e039      	b.n	8005042 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d101      	bne.n	8004fdc <HAL_UART_Receive_IT+0x38>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e032      	b.n	8005042 <HAL_UART_Receive_IT+0x9e>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88fa      	ldrh	r2, [r7, #6]
 8004fee:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	88fa      	ldrh	r2, [r7, #6]
 8004ff4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2222      	movs	r2, #34	; 0x22
 8005000:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0220 	orr.w	r2, r2, #32
 800503a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	4613      	mov	r3, r2
 800505a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505c:	e02c      	b.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005064:	d028      	beq.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <UART_WaitOnFlagUntilTimeout+0x30>
 800506c:	f7fe fae0 	bl	8003630 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	429a      	cmp	r2, r3
 800507a:	d21d      	bcs.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800508a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e00f      	b.n	80050d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4013      	ands	r3, r2
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	bf0c      	ite	eq
 80050c8:	2301      	moveq	r3, #1
 80050ca:	2300      	movne	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	461a      	mov	r2, r3
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d0c3      	beq.n	800505e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800511a:	f023 030c 	bic.w	r3, r3, #12
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	430b      	orrs	r3, r1
 8005126:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2c      	ldr	r2, [pc, #176]	; (80051f4 <UART_SetConfig+0x114>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d103      	bne.n	8005150 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7ff f914 	bl	8004374 <HAL_RCC_GetPCLK2Freq>
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	e002      	b.n	8005156 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005150:	f7ff f8fc 	bl	800434c <HAL_RCC_GetPCLK1Freq>
 8005154:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009a      	lsls	r2, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <UART_SetConfig+0x118>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	0119      	lsls	r1, r3, #4
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	009a      	lsls	r2, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	fbb2 f2f3 	udiv	r2, r2, r3
 800518c:	4b1a      	ldr	r3, [pc, #104]	; (80051f8 <UART_SetConfig+0x118>)
 800518e:	fba3 0302 	umull	r0, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2064      	movs	r0, #100	; 0x64
 8005196:	fb00 f303 	mul.w	r3, r0, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	3332      	adds	r3, #50	; 0x32
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <UART_SetConfig+0x118>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ac:	4419      	add	r1, r3
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4613      	mov	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	009a      	lsls	r2, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <UART_SetConfig+0x118>)
 80051c6:	fba3 0302 	umull	r0, r3, r3, r2
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	2064      	movs	r0, #100	; 0x64
 80051ce:	fb00 f303 	mul.w	r3, r0, r3
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	3332      	adds	r3, #50	; 0x32
 80051d8:	4a07      	ldr	r2, [pc, #28]	; (80051f8 <UART_SetConfig+0x118>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	f003 020f 	and.w	r2, r3, #15
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	440a      	add	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40013800 	.word	0x40013800
 80051f8:	51eb851f 	.word	0x51eb851f

080051fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005202:	f3ef 8305 	mrs	r3, IPSR
 8005206:	60bb      	str	r3, [r7, #8]
  return(result);
 8005208:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10f      	bne.n	800522e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520e:	f3ef 8310 	mrs	r3, PRIMASK
 8005212:	607b      	str	r3, [r7, #4]
  return(result);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <osKernelInitialize+0x32>
 800521a:	4b10      	ldr	r3, [pc, #64]	; (800525c <osKernelInitialize+0x60>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d109      	bne.n	8005236 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005222:	f3ef 8311 	mrs	r3, BASEPRI
 8005226:	603b      	str	r3, [r7, #0]
  return(result);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800522e:	f06f 0305 	mvn.w	r3, #5
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e00c      	b.n	8005250 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <osKernelInitialize+0x60>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d105      	bne.n	800524a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <osKernelInitialize+0x60>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e002      	b.n	8005250 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800524a:	f04f 33ff 	mov.w	r3, #4294967295
 800524e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005250:	68fb      	ldr	r3, [r7, #12]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	20000030 	.word	0x20000030

08005260 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005266:	f3ef 8305 	mrs	r3, IPSR
 800526a:	60bb      	str	r3, [r7, #8]
  return(result);
 800526c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10f      	bne.n	8005292 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005272:	f3ef 8310 	mrs	r3, PRIMASK
 8005276:	607b      	str	r3, [r7, #4]
  return(result);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <osKernelStart+0x32>
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <osKernelStart+0x64>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d109      	bne.n	800529a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005286:	f3ef 8311 	mrs	r3, BASEPRI
 800528a:	603b      	str	r3, [r7, #0]
  return(result);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005292:	f06f 0305 	mvn.w	r3, #5
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e00e      	b.n	80052b8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <osKernelStart+0x64>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d107      	bne.n	80052b2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80052a2:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <osKernelStart+0x64>)
 80052a4:	2202      	movs	r2, #2
 80052a6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80052a8:	f001 f926 	bl	80064f8 <vTaskStartScheduler>
      stat = osOK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e002      	b.n	80052b8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295
 80052b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80052b8:	68fb      	ldr	r3, [r7, #12]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000030 	.word	0x20000030

080052c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b092      	sub	sp, #72	; 0x48
 80052cc:	af04      	add	r7, sp, #16
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052d8:	f3ef 8305 	mrs	r3, IPSR
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 8094 	bne.w	800540e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ea:	623b      	str	r3, [r7, #32]
  return(result);
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f040 808d 	bne.w	800540e <osThreadNew+0x146>
 80052f4:	4b48      	ldr	r3, [pc, #288]	; (8005418 <osThreadNew+0x150>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d106      	bne.n	800530a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005300:	61fb      	str	r3, [r7, #28]
  return(result);
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f040 8082 	bne.w	800540e <osThreadNew+0x146>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d07e      	beq.n	800540e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005314:	2318      	movs	r3, #24
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005318:	2300      	movs	r3, #0
 800531a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800531c:	f107 031b 	add.w	r3, r7, #27
 8005320:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005322:	f04f 33ff 	mov.w	r3, #4294967295
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d045      	beq.n	80053ba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <osThreadNew+0x74>
        name = attr->name;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <osThreadNew+0x9a>
 8005350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005352:	2b38      	cmp	r3, #56	; 0x38
 8005354:	d805      	bhi.n	8005362 <osThreadNew+0x9a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <osThreadNew+0x9e>
        return (NULL);
 8005362:	2300      	movs	r3, #0
 8005364:	e054      	b.n	8005410 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	089b      	lsrs	r3, r3, #2
 8005374:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00e      	beq.n	800539c <osThreadNew+0xd4>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b5b      	cmp	r3, #91	; 0x5b
 8005384:	d90a      	bls.n	800539c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800538a:	2b00      	cmp	r3, #0
 800538c:	d006      	beq.n	800539c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <osThreadNew+0xd4>
        mem = 1;
 8005396:	2301      	movs	r3, #1
 8005398:	62bb      	str	r3, [r7, #40]	; 0x28
 800539a:	e010      	b.n	80053be <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10c      	bne.n	80053be <osThreadNew+0xf6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d108      	bne.n	80053be <osThreadNew+0xf6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <osThreadNew+0xf6>
          mem = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80053b8:	e001      	b.n	80053be <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80053be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d110      	bne.n	80053e6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053cc:	9202      	str	r2, [sp, #8]
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f000 fec4 	bl	8006168 <xTaskCreateStatic>
 80053e0:	4603      	mov	r3, r0
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e013      	b.n	800540e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d110      	bne.n	800540e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	f107 0314 	add.w	r3, r7, #20
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 ff0b 	bl	800621a <xTaskCreate>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d001      	beq.n	800540e <osThreadNew+0x146>
          hTask = NULL;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800540e:	697b      	ldr	r3, [r7, #20]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3738      	adds	r7, #56	; 0x38
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20000030 	.word	0x20000030

0800541c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005424:	f3ef 8305 	mrs	r3, IPSR
 8005428:	613b      	str	r3, [r7, #16]
  return(result);
 800542a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10f      	bne.n	8005450 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005430:	f3ef 8310 	mrs	r3, PRIMASK
 8005434:	60fb      	str	r3, [r7, #12]
  return(result);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <osDelay+0x34>
 800543c:	4b0d      	ldr	r3, [pc, #52]	; (8005474 <osDelay+0x58>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d109      	bne.n	8005458 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005444:	f3ef 8311 	mrs	r3, BASEPRI
 8005448:	60bb      	str	r3, [r7, #8]
  return(result);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <osDelay+0x3c>
    stat = osErrorISR;
 8005450:	f06f 0305 	mvn.w	r3, #5
 8005454:	617b      	str	r3, [r7, #20]
 8005456:	e007      	b.n	8005468 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 f814 	bl	8006490 <vTaskDelay>
    }
  }

  return (stat);
 8005468:	697b      	ldr	r3, [r7, #20]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000030 	.word	0x20000030

08005478 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005484:	2300      	movs	r3, #0
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005488:	f3ef 8305 	mrs	r3, IPSR
 800548c:	61bb      	str	r3, [r7, #24]
  return(result);
 800548e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005490:	2b00      	cmp	r3, #0
 8005492:	d170      	bne.n	8005576 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005494:	f3ef 8310 	mrs	r3, PRIMASK
 8005498:	617b      	str	r3, [r7, #20]
  return(result);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d16a      	bne.n	8005576 <osMessageQueueNew+0xfe>
 80054a0:	4b37      	ldr	r3, [pc, #220]	; (8005580 <osMessageQueueNew+0x108>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d105      	bne.n	80054b4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054a8:	f3ef 8311 	mrs	r3, BASEPRI
 80054ac:	613b      	str	r3, [r7, #16]
  return(result);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d160      	bne.n	8005576 <osMessageQueueNew+0xfe>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d05d      	beq.n	8005576 <osMessageQueueNew+0xfe>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d05a      	beq.n	8005576 <osMessageQueueNew+0xfe>
    mem = -1;
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d029      	beq.n	8005520 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d012      	beq.n	80054fa <osMessageQueueNew+0x82>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b4f      	cmp	r3, #79	; 0x4f
 80054da:	d90e      	bls.n	80054fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <osMessageQueueNew+0x82>
        mem = 1;
 80054f4:	2301      	movs	r3, #1
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	e014      	b.n	8005524 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d110      	bne.n	8005524 <osMessageQueueNew+0xac>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10c      	bne.n	8005524 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800550e:	2b00      	cmp	r3, #0
 8005510:	d108      	bne.n	8005524 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <osMessageQueueNew+0xac>
          mem = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	623b      	str	r3, [r7, #32]
 800551e:	e001      	b.n	8005524 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d10c      	bne.n	8005544 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6899      	ldr	r1, [r3, #8]
 8005532:	2300      	movs	r3, #0
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	460b      	mov	r3, r1
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f96c 	bl	8005818 <xQueueGenericCreateStatic>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24
 8005542:	e008      	b.n	8005556 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800554a:	2200      	movs	r2, #0
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f9d4 	bl	80058fc <xQueueGenericCreate>
 8005554:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <osMessageQueueNew+0xf2>
        name = attr->name;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	e001      	b.n	800556e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800556e:	69f9      	ldr	r1, [r7, #28]
 8005570:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005572:	f000 fd9d 	bl	80060b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005578:	4618      	mov	r0, r3
 800557a:	3728      	adds	r7, #40	; 0x28
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000030 	.word	0x20000030

08005584 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a06      	ldr	r2, [pc, #24]	; (80055ac <vApplicationGetIdleTaskMemory+0x28>)
 8005594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4a05      	ldr	r2, [pc, #20]	; (80055b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800559a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2280      	movs	r2, #128	; 0x80
 80055a0:	601a      	str	r2, [r3, #0]
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr
 80055ac:	20000034 	.word	0x20000034
 80055b0:	20000090 	.word	0x20000090

080055b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a07      	ldr	r2, [pc, #28]	; (80055e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80055c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4a06      	ldr	r2, [pc, #24]	; (80055e4 <vApplicationGetTimerTaskMemory+0x30>)
 80055ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055d2:	601a      	str	r2, [r3, #0]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000290 	.word	0x20000290
 80055e4:	200002ec 	.word	0x200002ec

080055e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f103 0208 	add.w	r2, r3, #8
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005600:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f103 0208 	add.w	r2, r3, #8
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f103 0208 	add.w	r2, r3, #8
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr

08005626 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005626:	b480      	push	{r7}
 8005628:	b083      	sub	sp, #12
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr

0800563e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	601a      	str	r2, [r3, #0]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569a:	d103      	bne.n	80056a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e00c      	b.n	80056be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3308      	adds	r3, #8
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	e002      	b.n	80056b2 <vListInsert+0x2e>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d2f6      	bcs.n	80056ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6892      	ldr	r2, [r2, #8]
 800570a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6852      	ldr	r2, [r2, #4]
 8005714:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	429a      	cmp	r2, r3
 800571e:	d103      	bne.n	8005728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	1e5a      	subs	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	bc80      	pop	{r7}
 8005744:	4770      	bx	lr
	...

08005748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	e7fe      	b.n	800576e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005770:	f001 ffd2 	bl	8007718 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005780:	fb01 f303 	mul.w	r3, r1, r3
 8005784:	441a      	add	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a0:	3b01      	subs	r3, #1
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80057a6:	fb01 f303 	mul.w	r3, r1, r3
 80057aa:	441a      	add	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	22ff      	movs	r2, #255	; 0xff
 80057b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	22ff      	movs	r2, #255	; 0xff
 80057bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d114      	bne.n	80057f0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01a      	beq.n	8005804 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3310      	adds	r3, #16
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 f914 	bl	8006a00 <xTaskRemoveFromEventList>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d012      	beq.n	8005804 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <xQueueGenericReset+0xcc>)
 80057e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	e009      	b.n	8005804 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3310      	adds	r3, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff fef7 	bl	80055e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fef2 	bl	80055e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005804:	f001 ffb6 	bl	8007774 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005808:	2301      	movs	r3, #1
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b08e      	sub	sp, #56	; 0x38
 800581c:	af02      	add	r7, sp, #8
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <xQueueGenericCreateStatic+0x28>
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
 800583e:	e7fe      	b.n	800583e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <xQueueGenericCreateStatic+0x42>
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	e7fe      	b.n	8005858 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <xQueueGenericCreateStatic+0x4e>
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <xQueueGenericCreateStatic+0x52>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <xQueueGenericCreateStatic+0x54>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d109      	bne.n	8005884 <xQueueGenericCreateStatic+0x6c>
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	e7fe      	b.n	8005882 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <xQueueGenericCreateStatic+0x78>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <xQueueGenericCreateStatic+0x7c>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <xQueueGenericCreateStatic+0x7e>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <xQueueGenericCreateStatic+0x96>
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e7fe      	b.n	80058ac <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058ae:	2350      	movs	r3, #80	; 0x50
 80058b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b50      	cmp	r3, #80	; 0x50
 80058b6:	d009      	beq.n	80058cc <xQueueGenericCreateStatic+0xb4>
 80058b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e7fe      	b.n	80058ca <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00d      	beq.n	80058f2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	4613      	mov	r3, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f842 	bl	8005976 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80058f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3730      	adds	r7, #48	; 0x30
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <xQueueGenericCreate+0x28>
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e7fe      	b.n	8005922 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
 800592e:	e004      	b.n	800593a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	3350      	adds	r3, #80	; 0x50
 800593e:	4618      	mov	r0, r3
 8005940:	f001 ffe0 	bl	8007904 <pvPortMalloc>
 8005944:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00f      	beq.n	800596c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	3350      	adds	r3, #80	; 0x50
 8005950:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800595a:	79fa      	ldrb	r2, [r7, #7]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4613      	mov	r3, r2
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f805 	bl	8005976 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800596c:	69bb      	ldr	r3, [r7, #24]
	}
 800596e:	4618      	mov	r0, r3
 8005970:	3720      	adds	r7, #32
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e002      	b.n	8005998 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059a4:	2101      	movs	r1, #1
 80059a6:	69b8      	ldr	r0, [r7, #24]
 80059a8:	f7ff fece 	bl	8005748 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b08e      	sub	sp, #56	; 0x38
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059ca:	2300      	movs	r3, #0
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <xQueueGenericSend+0x30>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ea:	e7fe      	b.n	80059ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d103      	bne.n	80059fa <xQueueGenericSend+0x3e>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <xQueueGenericSend+0x42>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e000      	b.n	8005a00 <xQueueGenericSend+0x44>
 80059fe:	2300      	movs	r3, #0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d109      	bne.n	8005a18 <xQueueGenericSend+0x5c>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
 8005a16:	e7fe      	b.n	8005a16 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d103      	bne.n	8005a26 <xQueueGenericSend+0x6a>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <xQueueGenericSend+0x6e>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <xQueueGenericSend+0x70>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <xQueueGenericSend+0x88>
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	623b      	str	r3, [r7, #32]
 8005a42:	e7fe      	b.n	8005a42 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a44:	f001 f996 	bl	8006d74 <xTaskGetSchedulerState>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <xQueueGenericSend+0x98>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <xQueueGenericSend+0x9c>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <xQueueGenericSend+0x9e>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <xQueueGenericSend+0xb6>
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	e7fe      	b.n	8005a70 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a72:	f001 fe51 	bl	8007718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <xQueueGenericSend+0xcc>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d129      	bne.n	8005adc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a8e:	f000 f9ff 	bl	8005e90 <prvCopyDataToQueue>
 8005a92:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d010      	beq.n	8005abe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	3324      	adds	r3, #36	; 0x24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 ffad 	bl	8006a00 <xTaskRemoveFromEventList>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d013      	beq.n	8005ad4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005aac:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <xQueueGenericSend+0x1f0>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	e00a      	b.n	8005ad4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ac4:	4b39      	ldr	r3, [pc, #228]	; (8005bac <xQueueGenericSend+0x1f0>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ad4:	f001 fe4e 	bl	8007774 <vPortExitCritical>
				return pdPASS;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e063      	b.n	8005ba4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ae2:	f001 fe47 	bl	8007774 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e05c      	b.n	8005ba4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d106      	bne.n	8005afe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005af0:	f107 0314 	add.w	r3, r7, #20
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 ffe5 	bl	8006ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005afa:	2301      	movs	r3, #1
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005afe:	f001 fe39 	bl	8007774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b02:	f000 fd5d 	bl	80065c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b06:	f001 fe07 	bl	8007718 <vPortEnterCritical>
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b10:	b25b      	sxtb	r3, r3
 8005b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b16:	d103      	bne.n	8005b20 <xQueueGenericSend+0x164>
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b26:	b25b      	sxtb	r3, r3
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d103      	bne.n	8005b36 <xQueueGenericSend+0x17a>
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b36:	f001 fe1d 	bl	8007774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b3a:	1d3a      	adds	r2, r7, #4
 8005b3c:	f107 0314 	add.w	r3, r7, #20
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ffd4 	bl	8006af0 <xTaskCheckForTimeOut>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d124      	bne.n	8005b98 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b50:	f000 fa96 	bl	8006080 <prvIsQueueFull>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d018      	beq.n	8005b8c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5c:	3310      	adds	r3, #16
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fefe 	bl	8006964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b6a:	f000 fa21 	bl	8005fb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b6e:	f000 fd35 	bl	80065dc <xTaskResumeAll>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f47f af7c 	bne.w	8005a72 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <xQueueGenericSend+0x1f0>)
 8005b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	e772      	b.n	8005a72 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b8e:	f000 fa0f 	bl	8005fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b92:	f000 fd23 	bl	80065dc <xTaskResumeAll>
 8005b96:	e76c      	b.n	8005a72 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b9a:	f000 fa09 	bl	8005fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b9e:	f000 fd1d 	bl	80065dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ba2:	2300      	movs	r3, #0
		}
	}
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3738      	adds	r7, #56	; 0x38
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08e      	sub	sp, #56	; 0x38
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <xQueueGenericSendFromISR+0x2c>
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	f383 8811 	msr	BASEPRI, r3
 8005bd0:	f3bf 8f6f 	isb	sy
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bda:	e7fe      	b.n	8005bda <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <xQueueGenericSendFromISR+0x3a>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <xQueueGenericSendFromISR+0x3e>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <xQueueGenericSendFromISR+0x40>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d109      	bne.n	8005c08 <xQueueGenericSendFromISR+0x58>
 8005bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf8:	f383 8811 	msr	BASEPRI, r3
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	e7fe      	b.n	8005c06 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d103      	bne.n	8005c16 <xQueueGenericSendFromISR+0x66>
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d101      	bne.n	8005c1a <xQueueGenericSendFromISR+0x6a>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <xQueueGenericSendFromISR+0x6c>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d109      	bne.n	8005c34 <xQueueGenericSendFromISR+0x84>
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	61fb      	str	r3, [r7, #28]
 8005c32:	e7fe      	b.n	8005c32 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c34:	f001 fe2a 	bl	800788c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c38:	f3ef 8211 	mrs	r2, BASEPRI
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	61ba      	str	r2, [r7, #24]
 8005c4e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c50:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d302      	bcc.n	8005c66 <xQueueGenericSendFromISR+0xb6>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d12c      	bne.n	8005cc0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c76:	f000 f90b 	bl	8005e90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c7a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d112      	bne.n	8005caa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d016      	beq.n	8005cba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	3324      	adds	r3, #36	; 0x24
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 feb5 	bl	8006a00 <xTaskRemoveFromEventList>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00e      	beq.n	8005cba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00b      	beq.n	8005cba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	e007      	b.n	8005cba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cae:	3301      	adds	r3, #1
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	b25a      	sxtb	r2, r3
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005cbe:	e001      	b.n	8005cc4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3738      	adds	r7, #56	; 0x38
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	; 0x30
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d109      	bne.n	8005d06 <xQueueReceive+0x2e>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	623b      	str	r3, [r7, #32]
 8005d04:	e7fe      	b.n	8005d04 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <xQueueReceive+0x3c>
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <xQueueReceive+0x40>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <xQueueReceive+0x42>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <xQueueReceive+0x5a>
 8005d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	e7fe      	b.n	8005d30 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d32:	f001 f81f 	bl	8006d74 <xTaskGetSchedulerState>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d102      	bne.n	8005d42 <xQueueReceive+0x6a>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <xQueueReceive+0x6e>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <xQueueReceive+0x70>
 8005d46:	2300      	movs	r3, #0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d109      	bne.n	8005d60 <xQueueReceive+0x88>
 8005d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	61bb      	str	r3, [r7, #24]
 8005d5e:	e7fe      	b.n	8005d5e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d60:	f001 fcda 	bl	8007718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01f      	beq.n	8005db0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d74:	f000 f8f6 	bl	8005f64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00f      	beq.n	8005da8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fe37 	bl	8006a00 <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b3c      	ldr	r3, [pc, #240]	; (8005e8c <xQueueReceive+0x1b4>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005da8:	f001 fce4 	bl	8007774 <vPortExitCritical>
				return pdPASS;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e069      	b.n	8005e84 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db6:	f001 fcdd 	bl	8007774 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e062      	b.n	8005e84 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 fe7b 	bl	8006ac4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd2:	f001 fccf 	bl	8007774 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd6:	f000 fbf3 	bl	80065c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dda:	f001 fc9d 	bl	8007718 <vPortEnterCritical>
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d103      	bne.n	8005df4 <xQueueReceive+0x11c>
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d103      	bne.n	8005e0a <xQueueReceive+0x132>
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e0a:	f001 fcb3 	bl	8007774 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0e:	1d3a      	adds	r2, r7, #4
 8005e10:	f107 0310 	add.w	r3, r7, #16
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fe6a 	bl	8006af0 <xTaskCheckForTimeOut>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d123      	bne.n	8005e6a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e24:	f000 f916 	bl	8006054 <prvIsQueueEmpty>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e30:	3324      	adds	r3, #36	; 0x24
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fd94 	bl	8006964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e3e:	f000 f8b7 	bl	8005fb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f000 fbcb 	bl	80065dc <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d189      	bne.n	8005d60 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <xQueueReceive+0x1b4>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	e780      	b.n	8005d60 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e60:	f000 f8a6 	bl	8005fb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e64:	f000 fbba 	bl	80065dc <xTaskResumeAll>
 8005e68:	e77a      	b.n	8005d60 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e6c:	f000 f8a0 	bl	8005fb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e70:	f000 fbb4 	bl	80065dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e76:	f000 f8ed 	bl	8006054 <prvIsQueueEmpty>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f43f af6f 	beq.w	8005d60 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3730      	adds	r7, #48	; 0x30
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d14d      	bne.n	8005f52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 ff78 	bl	8006db0 <xTaskPriorityDisinherit>
 8005ec0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	e043      	b.n	8005f52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d119      	bne.n	8005f04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6898      	ldr	r0, [r3, #8]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	f001 ff0a 	bl	8007cf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	441a      	add	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d32b      	bcc.n	8005f52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	e026      	b.n	8005f52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68d8      	ldr	r0, [r3, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	f001 fef0 	bl	8007cf4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	425b      	negs	r3, r3
 8005f1e:	441a      	add	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d207      	bcs.n	8005f40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	425b      	negs	r3, r3
 8005f3a:	441a      	add	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d105      	bne.n	8005f52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d018      	beq.n	8005fa8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	441a      	add	r2, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d303      	bcc.n	8005f98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68d9      	ldr	r1, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6838      	ldr	r0, [r7, #0]
 8005fa4:	f001 fea6 	bl	8007cf4 <memcpy>
	}
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005fb8:	f001 fbae 	bl	8007718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc4:	e011      	b.n	8005fea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d012      	beq.n	8005ff4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3324      	adds	r3, #36	; 0x24
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fd14 	bl	8006a00 <xTaskRemoveFromEventList>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fde:	f000 fde7 	bl	8006bb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dce9      	bgt.n	8005fc6 <prvUnlockQueue+0x16>
 8005ff2:	e000      	b.n	8005ff6 <prvUnlockQueue+0x46>
					break;
 8005ff4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	22ff      	movs	r2, #255	; 0xff
 8005ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005ffe:	f001 fbb9 	bl	8007774 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006002:	f001 fb89 	bl	8007718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800600c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800600e:	e011      	b.n	8006034 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d012      	beq.n	800603e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3310      	adds	r3, #16
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fcef 	bl	8006a00 <xTaskRemoveFromEventList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006028:	f000 fdc2 	bl	8006bb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	3b01      	subs	r3, #1
 8006030:	b2db      	uxtb	r3, r3
 8006032:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006034:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006038:	2b00      	cmp	r3, #0
 800603a:	dce9      	bgt.n	8006010 <prvUnlockQueue+0x60>
 800603c:	e000      	b.n	8006040 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800603e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	22ff      	movs	r2, #255	; 0xff
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006048:	f001 fb94 	bl	8007774 <vPortExitCritical>
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800605c:	f001 fb5c 	bl	8007718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	d102      	bne.n	800606e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e001      	b.n	8006072 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006072:	f001 fb7f 	bl	8007774 <vPortExitCritical>

	return xReturn;
 8006076:	68fb      	ldr	r3, [r7, #12]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006088:	f001 fb46 	bl	8007718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	429a      	cmp	r2, r3
 8006096:	d102      	bne.n	800609e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e001      	b.n	80060a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800609e:	2300      	movs	r3, #0
 80060a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060a2:	f001 fb67 	bl	8007774 <vPortExitCritical>

	return xReturn;
 80060a6:	68fb      	ldr	r3, [r7, #12]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	e014      	b.n	80060ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060c0:	4a0e      	ldr	r2, [pc, #56]	; (80060fc <vQueueAddToRegistry+0x4c>)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80060cc:	490b      	ldr	r1, [pc, #44]	; (80060fc <vQueueAddToRegistry+0x4c>)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80060d6:	4a09      	ldr	r2, [pc, #36]	; (80060fc <vQueueAddToRegistry+0x4c>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	4413      	add	r3, r2
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060e2:	e005      	b.n	80060f0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b07      	cmp	r3, #7
 80060ee:	d9e7      	bls.n	80060c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bc80      	pop	{r7}
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	200024d4 	.word	0x200024d4

08006100 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006110:	f001 fb02 	bl	8007718 <vPortEnterCritical>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800611a:	b25b      	sxtb	r3, r3
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d103      	bne.n	800612a <vQueueWaitForMessageRestricted+0x2a>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006130:	b25b      	sxtb	r3, r3
 8006132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006136:	d103      	bne.n	8006140 <vQueueWaitForMessageRestricted+0x40>
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006140:	f001 fb18 	bl	8007774 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	3324      	adds	r3, #36	; 0x24
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fc29 	bl	80069ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800615a:	6978      	ldr	r0, [r7, #20]
 800615c:	f7ff ff28 	bl	8005fb0 <prvUnlockQueue>
	}
 8006160:	bf00      	nop
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af04      	add	r7, sp, #16
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <xTaskCreateStatic+0x28>
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	623b      	str	r3, [r7, #32]
 800618e:	e7fe      	b.n	800618e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <xTaskCreateStatic+0x42>
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	61fb      	str	r3, [r7, #28]
 80061a8:	e7fe      	b.n	80061a8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061aa:	235c      	movs	r3, #92	; 0x5c
 80061ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	2b5c      	cmp	r3, #92	; 0x5c
 80061b2:	d009      	beq.n	80061c8 <xTaskCreateStatic+0x60>
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	e7fe      	b.n	80061c6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d01e      	beq.n	800620c <xTaskCreateStatic+0xa4>
 80061ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	2202      	movs	r2, #2
 80061e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061e6:	2300      	movs	r3, #0
 80061e8:	9303      	str	r3, [sp, #12]
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	9302      	str	r3, [sp, #8]
 80061ee:	f107 0314 	add.w	r3, r7, #20
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f850 	bl	80062a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006206:	f000 f8d3 	bl	80063b0 <prvAddNewTaskToReadyList>
 800620a:	e001      	b.n	8006210 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006210:	697b      	ldr	r3, [r7, #20]
	}
 8006212:	4618      	mov	r0, r3
 8006214:	3728      	adds	r7, #40	; 0x28
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800621a:	b580      	push	{r7, lr}
 800621c:	b08c      	sub	sp, #48	; 0x30
 800621e:	af04      	add	r7, sp, #16
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4618      	mov	r0, r3
 8006230:	f001 fb68 	bl	8007904 <pvPortMalloc>
 8006234:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00e      	beq.n	800625a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800623c:	205c      	movs	r0, #92	; 0x5c
 800623e:	f001 fb61 	bl	8007904 <pvPortMalloc>
 8006242:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	631a      	str	r2, [r3, #48]	; 0x30
 8006250:	e005      	b.n	800625e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006252:	6978      	ldr	r0, [r7, #20]
 8006254:	f001 fc18 	bl	8007a88 <vPortFree>
 8006258:	e001      	b.n	800625e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d017      	beq.n	8006294 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	2300      	movs	r3, #0
 8006270:	9303      	str	r3, [sp, #12]
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	9302      	str	r3, [sp, #8]
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f80e 	bl	80062a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006288:	69f8      	ldr	r0, [r7, #28]
 800628a:	f000 f891 	bl	80063b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800628e:	2301      	movs	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
 8006292:	e002      	b.n	800629a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800629a:	69bb      	ldr	r3, [r7, #24]
	}
 800629c:	4618      	mov	r0, r3
 800629e:	3720      	adds	r7, #32
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	461a      	mov	r2, r3
 80062bc:	21a5      	movs	r1, #165	; 0xa5
 80062be:	f001 fd24 	bl	8007d0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062cc:	3b01      	subs	r3, #1
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f023 0307 	bic.w	r3, r3, #7
 80062da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <prvInitialiseNewTask+0x56>
 80062e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	e7fe      	b.n	80062f8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e012      	b.n	8006326 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	4413      	add	r3, r2
 8006306:	7819      	ldrb	r1, [r3, #0]
 8006308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	3334      	adds	r3, #52	; 0x34
 8006310:	460a      	mov	r2, r1
 8006312:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	3301      	adds	r3, #1
 8006324:	61fb      	str	r3, [r7, #28]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	2b0f      	cmp	r3, #15
 800632a:	d9e9      	bls.n	8006300 <prvInitialiseNewTask+0x5c>
 800632c:	e000      	b.n	8006330 <prvInitialiseNewTask+0x8c>
		{
			break;
 800632e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633a:	2b37      	cmp	r3, #55	; 0x37
 800633c:	d901      	bls.n	8006342 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800633e:	2337      	movs	r3, #55	; 0x37
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800634c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	2200      	movs	r2, #0
 8006352:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	3304      	adds	r3, #4
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff f964 	bl	8005626 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	3318      	adds	r3, #24
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff f95f 	bl	8005626 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800637c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	2200      	movs	r2, #0
 8006382:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	69b8      	ldr	r0, [r7, #24]
 8006392:	f001 f8d7 	bl	8007544 <pxPortInitialiseStack>
 8006396:	4602      	mov	r2, r0
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063a8:	bf00      	nop
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063b8:	f001 f9ae 	bl	8007718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063bc:	4b2d      	ldr	r3, [pc, #180]	; (8006474 <prvAddNewTaskToReadyList+0xc4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3301      	adds	r3, #1
 80063c2:	4a2c      	ldr	r2, [pc, #176]	; (8006474 <prvAddNewTaskToReadyList+0xc4>)
 80063c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063c6:	4b2c      	ldr	r3, [pc, #176]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ce:	4a2a      	ldr	r2, [pc, #168]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <prvAddNewTaskToReadyList+0xc4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d110      	bne.n	80063fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063dc:	f000 fc0c 	bl	8006bf8 <prvInitialiseTaskLists>
 80063e0:	e00d      	b.n	80063fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063e2:	4b26      	ldr	r3, [pc, #152]	; (800647c <prvAddNewTaskToReadyList+0xcc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063ea:	4b23      	ldr	r3, [pc, #140]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d802      	bhi.n	80063fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063f8:	4a1f      	ldr	r2, [pc, #124]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063fe:	4b20      	ldr	r3, [pc, #128]	; (8006480 <prvAddNewTaskToReadyList+0xd0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3301      	adds	r3, #1
 8006404:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <prvAddNewTaskToReadyList+0xd0>)
 8006406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006408:	4b1d      	ldr	r3, [pc, #116]	; (8006480 <prvAddNewTaskToReadyList+0xd0>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	4b1b      	ldr	r3, [pc, #108]	; (8006484 <prvAddNewTaskToReadyList+0xd4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d903      	bls.n	8006424 <prvAddNewTaskToReadyList+0x74>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	4a18      	ldr	r2, [pc, #96]	; (8006484 <prvAddNewTaskToReadyList+0xd4>)
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	4613      	mov	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <prvAddNewTaskToReadyList+0xd8>)
 8006432:	441a      	add	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	4619      	mov	r1, r3
 800643a:	4610      	mov	r0, r2
 800643c:	f7ff f8ff 	bl	800563e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006440:	f001 f998 	bl	8007774 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <prvAddNewTaskToReadyList+0xcc>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvAddNewTaskToReadyList+0xc8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	429a      	cmp	r2, r3
 8006458:	d207      	bcs.n	800646a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800645a:	4b0c      	ldr	r3, [pc, #48]	; (800648c <prvAddNewTaskToReadyList+0xdc>)
 800645c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20000bc0 	.word	0x20000bc0
 8006478:	200006ec 	.word	0x200006ec
 800647c:	20000bcc 	.word	0x20000bcc
 8006480:	20000bdc 	.word	0x20000bdc
 8006484:	20000bc8 	.word	0x20000bc8
 8006488:	200006f0 	.word	0x200006f0
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d016      	beq.n	80064d0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <vTaskDelay+0x60>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <vTaskDelay+0x2e>
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	e7fe      	b.n	80064bc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064be:	f000 f87f 	bl	80065c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064c2:	2100      	movs	r1, #0
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fcdf 	bl	8006e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064ca:	f000 f887 	bl	80065dc <xTaskResumeAll>
 80064ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d107      	bne.n	80064e6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <vTaskDelay+0x64>)
 80064d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	20000be8 	.word	0x20000be8
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006506:	463a      	mov	r2, r7
 8006508:	1d39      	adds	r1, r7, #4
 800650a:	f107 0308 	add.w	r3, r7, #8
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff f838 	bl	8005584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	9202      	str	r2, [sp, #8]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	2300      	movs	r3, #0
 8006524:	460a      	mov	r2, r1
 8006526:	4920      	ldr	r1, [pc, #128]	; (80065a8 <vTaskStartScheduler+0xb0>)
 8006528:	4820      	ldr	r0, [pc, #128]	; (80065ac <vTaskStartScheduler+0xb4>)
 800652a:	f7ff fe1d 	bl	8006168 <xTaskCreateStatic>
 800652e:	4602      	mov	r2, r0
 8006530:	4b1f      	ldr	r3, [pc, #124]	; (80065b0 <vTaskStartScheduler+0xb8>)
 8006532:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006534:	4b1e      	ldr	r3, [pc, #120]	; (80065b0 <vTaskStartScheduler+0xb8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800653c:	2301      	movs	r3, #1
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e001      	b.n	8006546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d102      	bne.n	8006552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800654c:	f000 fcf0 	bl	8006f30 <xTimerCreateTimerTask>
 8006550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d115      	bne.n	8006584 <vTaskStartScheduler+0x8c>
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <vTaskStartScheduler+0xbc>)
 800656c:	f04f 32ff 	mov.w	r2, #4294967295
 8006570:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006572:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <vTaskStartScheduler+0xc0>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006578:	4b10      	ldr	r3, [pc, #64]	; (80065bc <vTaskStartScheduler+0xc4>)
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800657e:	f001 f85b 	bl	8007638 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006582:	e00d      	b.n	80065a0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658a:	d109      	bne.n	80065a0 <vTaskStartScheduler+0xa8>
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	e7fe      	b.n	800659e <vTaskStartScheduler+0xa6>
}
 80065a0:	bf00      	nop
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	08007df4 	.word	0x08007df4
 80065ac:	08006bc9 	.word	0x08006bc9
 80065b0:	20000be4 	.word	0x20000be4
 80065b4:	20000be0 	.word	0x20000be0
 80065b8:	20000bcc 	.word	0x20000bcc
 80065bc:	20000bc4 	.word	0x20000bc4

080065c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065c4:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <vTaskSuspendAll+0x18>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a03      	ldr	r2, [pc, #12]	; (80065d8 <vTaskSuspendAll+0x18>)
 80065cc:	6013      	str	r3, [r2, #0]
}
 80065ce:	bf00      	nop
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bc80      	pop	{r7}
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	20000be8 	.word	0x20000be8

080065dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ea:	4b41      	ldr	r3, [pc, #260]	; (80066f0 <xTaskResumeAll+0x114>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <xTaskResumeAll+0x2a>
 80065f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	603b      	str	r3, [r7, #0]
 8006604:	e7fe      	b.n	8006604 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006606:	f001 f887 	bl	8007718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800660a:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <xTaskResumeAll+0x114>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3b01      	subs	r3, #1
 8006610:	4a37      	ldr	r2, [pc, #220]	; (80066f0 <xTaskResumeAll+0x114>)
 8006612:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <xTaskResumeAll+0x114>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d162      	bne.n	80066e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800661c:	4b35      	ldr	r3, [pc, #212]	; (80066f4 <xTaskResumeAll+0x118>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d05e      	beq.n	80066e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006624:	e02f      	b.n	8006686 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006626:	4b34      	ldr	r3, [pc, #208]	; (80066f8 <xTaskResumeAll+0x11c>)
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3318      	adds	r3, #24
 8006632:	4618      	mov	r0, r3
 8006634:	f7ff f85e 	bl	80056f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3304      	adds	r3, #4
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff f859 	bl	80056f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006646:	4b2d      	ldr	r3, [pc, #180]	; (80066fc <xTaskResumeAll+0x120>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d903      	bls.n	8006656 <xTaskResumeAll+0x7a>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <xTaskResumeAll+0x120>)
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4a27      	ldr	r2, [pc, #156]	; (8006700 <xTaskResumeAll+0x124>)
 8006664:	441a      	add	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f7fe ffe6 	bl	800563e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006676:	4b23      	ldr	r3, [pc, #140]	; (8006704 <xTaskResumeAll+0x128>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	429a      	cmp	r2, r3
 800667e:	d302      	bcc.n	8006686 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006680:	4b21      	ldr	r3, [pc, #132]	; (8006708 <xTaskResumeAll+0x12c>)
 8006682:	2201      	movs	r2, #1
 8006684:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006686:	4b1c      	ldr	r3, [pc, #112]	; (80066f8 <xTaskResumeAll+0x11c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1cb      	bne.n	8006626 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006694:	f000 fb4a 	bl	8006d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006698:	4b1c      	ldr	r3, [pc, #112]	; (800670c <xTaskResumeAll+0x130>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d010      	beq.n	80066c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066a4:	f000 f844 	bl	8006730 <xTaskIncrementTick>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80066ae:	4b16      	ldr	r3, [pc, #88]	; (8006708 <xTaskResumeAll+0x12c>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1f1      	bne.n	80066a4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80066c0:	4b12      	ldr	r3, [pc, #72]	; (800670c <xTaskResumeAll+0x130>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066c6:	4b10      	ldr	r3, [pc, #64]	; (8006708 <xTaskResumeAll+0x12c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066ce:	2301      	movs	r3, #1
 80066d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066d2:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <xTaskResumeAll+0x134>)
 80066d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066e2:	f001 f847 	bl	8007774 <vPortExitCritical>

	return xAlreadyYielded;
 80066e6:	68bb      	ldr	r3, [r7, #8]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000be8 	.word	0x20000be8
 80066f4:	20000bc0 	.word	0x20000bc0
 80066f8:	20000b80 	.word	0x20000b80
 80066fc:	20000bc8 	.word	0x20000bc8
 8006700:	200006f0 	.word	0x200006f0
 8006704:	200006ec 	.word	0x200006ec
 8006708:	20000bd4 	.word	0x20000bd4
 800670c:	20000bd0 	.word	0x20000bd0
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800671a:	4b04      	ldr	r3, [pc, #16]	; (800672c <xTaskGetTickCount+0x18>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006720:	687b      	ldr	r3, [r7, #4]
}
 8006722:	4618      	mov	r0, r3
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr
 800672c:	20000bc4 	.word	0x20000bc4

08006730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800673a:	4b51      	ldr	r3, [pc, #324]	; (8006880 <xTaskIncrementTick+0x150>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	f040 808d 	bne.w	800685e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006744:	4b4f      	ldr	r3, [pc, #316]	; (8006884 <xTaskIncrementTick+0x154>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800674c:	4a4d      	ldr	r2, [pc, #308]	; (8006884 <xTaskIncrementTick+0x154>)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d11f      	bne.n	8006798 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006758:	4b4b      	ldr	r3, [pc, #300]	; (8006888 <xTaskIncrementTick+0x158>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <xTaskIncrementTick+0x46>
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	e7fe      	b.n	8006774 <xTaskIncrementTick+0x44>
 8006776:	4b44      	ldr	r3, [pc, #272]	; (8006888 <xTaskIncrementTick+0x158>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	4b43      	ldr	r3, [pc, #268]	; (800688c <xTaskIncrementTick+0x15c>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a41      	ldr	r2, [pc, #260]	; (8006888 <xTaskIncrementTick+0x158>)
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	4a41      	ldr	r2, [pc, #260]	; (800688c <xTaskIncrementTick+0x15c>)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	4b41      	ldr	r3, [pc, #260]	; (8006890 <xTaskIncrementTick+0x160>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3301      	adds	r3, #1
 8006790:	4a3f      	ldr	r2, [pc, #252]	; (8006890 <xTaskIncrementTick+0x160>)
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	f000 faca 	bl	8006d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006798:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <xTaskIncrementTick+0x164>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d34e      	bcc.n	8006840 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a2:	4b39      	ldr	r3, [pc, #228]	; (8006888 <xTaskIncrementTick+0x158>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <xTaskIncrementTick+0x80>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <xTaskIncrementTick+0x82>
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067b6:	4b37      	ldr	r3, [pc, #220]	; (8006894 <xTaskIncrementTick+0x164>)
 80067b8:	f04f 32ff 	mov.w	r2, #4294967295
 80067bc:	601a      	str	r2, [r3, #0]
					break;
 80067be:	e03f      	b.n	8006840 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067c0:	4b31      	ldr	r3, [pc, #196]	; (8006888 <xTaskIncrementTick+0x158>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d203      	bcs.n	80067e0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067d8:	4a2e      	ldr	r2, [pc, #184]	; (8006894 <xTaskIncrementTick+0x164>)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6013      	str	r3, [r2, #0]
						break;
 80067de:	e02f      	b.n	8006840 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	3304      	adds	r3, #4
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe ff85 	bl	80056f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	3318      	adds	r3, #24
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe ff7c 	bl	80056f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <xTaskIncrementTick+0x168>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d903      	bls.n	8006810 <xTaskIncrementTick+0xe0>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680c:	4a22      	ldr	r2, [pc, #136]	; (8006898 <xTaskIncrementTick+0x168>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4a1f      	ldr	r2, [pc, #124]	; (800689c <xTaskIncrementTick+0x16c>)
 800681e:	441a      	add	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f7fe ff09 	bl	800563e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4b1b      	ldr	r3, [pc, #108]	; (80068a0 <xTaskIncrementTick+0x170>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	429a      	cmp	r2, r3
 8006838:	d3b3      	bcc.n	80067a2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800683a:	2301      	movs	r3, #1
 800683c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800683e:	e7b0      	b.n	80067a2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006840:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <xTaskIncrementTick+0x170>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006846:	4915      	ldr	r1, [pc, #84]	; (800689c <xTaskIncrementTick+0x16c>)
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d907      	bls.n	8006868 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006858:	2301      	movs	r3, #1
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	e004      	b.n	8006868 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800685e:	4b11      	ldr	r3, [pc, #68]	; (80068a4 <xTaskIncrementTick+0x174>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	4a0f      	ldr	r2, [pc, #60]	; (80068a4 <xTaskIncrementTick+0x174>)
 8006866:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006868:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <xTaskIncrementTick+0x178>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006870:	2301      	movs	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006874:	697b      	ldr	r3, [r7, #20]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000be8 	.word	0x20000be8
 8006884:	20000bc4 	.word	0x20000bc4
 8006888:	20000b78 	.word	0x20000b78
 800688c:	20000b7c 	.word	0x20000b7c
 8006890:	20000bd8 	.word	0x20000bd8
 8006894:	20000be0 	.word	0x20000be0
 8006898:	20000bc8 	.word	0x20000bc8
 800689c:	200006f0 	.word	0x200006f0
 80068a0:	200006ec 	.word	0x200006ec
 80068a4:	20000bd0 	.word	0x20000bd0
 80068a8:	20000bd4 	.word	0x20000bd4

080068ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068b2:	4b27      	ldr	r3, [pc, #156]	; (8006950 <vTaskSwitchContext+0xa4>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ba:	4b26      	ldr	r3, [pc, #152]	; (8006954 <vTaskSwitchContext+0xa8>)
 80068bc:	2201      	movs	r2, #1
 80068be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068c0:	e040      	b.n	8006944 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80068c2:	4b24      	ldr	r3, [pc, #144]	; (8006954 <vTaskSwitchContext+0xa8>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80068c8:	4b23      	ldr	r3, [pc, #140]	; (8006958 <vTaskSwitchContext+0xac>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e00f      	b.n	80068f0 <vTaskSwitchContext+0x44>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <vTaskSwitchContext+0x3e>
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	607b      	str	r3, [r7, #4]
 80068e8:	e7fe      	b.n	80068e8 <vTaskSwitchContext+0x3c>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	491a      	ldr	r1, [pc, #104]	; (800695c <vTaskSwitchContext+0xb0>)
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4613      	mov	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	440b      	add	r3, r1
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0e5      	beq.n	80068d0 <vTaskSwitchContext+0x24>
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4a13      	ldr	r2, [pc, #76]	; (800695c <vTaskSwitchContext+0xb0>)
 8006910:	4413      	add	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	605a      	str	r2, [r3, #4]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	3308      	adds	r3, #8
 8006926:	429a      	cmp	r2, r3
 8006928:	d104      	bne.n	8006934 <vTaskSwitchContext+0x88>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	605a      	str	r2, [r3, #4]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	4a09      	ldr	r2, [pc, #36]	; (8006960 <vTaskSwitchContext+0xb4>)
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	4a06      	ldr	r2, [pc, #24]	; (8006958 <vTaskSwitchContext+0xac>)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6013      	str	r3, [r2, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	20000be8 	.word	0x20000be8
 8006954:	20000bd4 	.word	0x20000bd4
 8006958:	20000bc8 	.word	0x20000bc8
 800695c:	200006f0 	.word	0x200006f0
 8006960:	200006ec 	.word	0x200006ec

08006964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <vTaskPlaceOnEventList+0x24>
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	e7fe      	b.n	8006986 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006988:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <vTaskPlaceOnEventList+0x44>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3318      	adds	r3, #24
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe fe77 	bl	8005684 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006996:	2101      	movs	r1, #1
 8006998:	6838      	ldr	r0, [r7, #0]
 800699a:	f000 fa75 	bl	8006e88 <prvAddCurrentTaskToDelayedList>
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200006ec 	.word	0x200006ec

080069ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d109      	bne.n	80069d2 <vTaskPlaceOnEventListRestricted+0x26>
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e7fe      	b.n	80069d0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <vTaskPlaceOnEventListRestricted+0x50>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3318      	adds	r3, #24
 80069d8:	4619      	mov	r1, r3
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7fe fe2f 	bl	800563e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	68b8      	ldr	r0, [r7, #8]
 80069f0:	f000 fa4a 	bl	8006e88 <prvAddCurrentTaskToDelayedList>
	}
 80069f4:	bf00      	nop
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	200006ec 	.word	0x200006ec

08006a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <xTaskRemoveFromEventList+0x2a>
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e7fe      	b.n	8006a28 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3318      	adds	r3, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fe60 	bl	80056f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a34:	4b1d      	ldr	r3, [pc, #116]	; (8006aac <xTaskRemoveFromEventList+0xac>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d11d      	bne.n	8006a78 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fe fe57 	bl	80056f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4a:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <xTaskRemoveFromEventList+0xb0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d903      	bls.n	8006a5a <xTaskRemoveFromEventList+0x5a>
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <xTaskRemoveFromEventList+0xb0>)
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4a13      	ldr	r2, [pc, #76]	; (8006ab4 <xTaskRemoveFromEventList+0xb4>)
 8006a68:	441a      	add	r2, r3
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4610      	mov	r0, r2
 8006a72:	f7fe fde4 	bl	800563e <vListInsertEnd>
 8006a76:	e005      	b.n	8006a84 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	3318      	adds	r3, #24
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	480e      	ldr	r0, [pc, #56]	; (8006ab8 <xTaskRemoveFromEventList+0xb8>)
 8006a80:	f7fe fddd 	bl	800563e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	4b0c      	ldr	r3, [pc, #48]	; (8006abc <xTaskRemoveFromEventList+0xbc>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d905      	bls.n	8006a9e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a92:	2301      	movs	r3, #1
 8006a94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a96:	4b0a      	ldr	r3, [pc, #40]	; (8006ac0 <xTaskRemoveFromEventList+0xc0>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	e001      	b.n	8006aa2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006aa2:	697b      	ldr	r3, [r7, #20]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000be8 	.word	0x20000be8
 8006ab0:	20000bc8 	.word	0x20000bc8
 8006ab4:	200006f0 	.word	0x200006f0
 8006ab8:	20000b80 	.word	0x20000b80
 8006abc:	200006ec 	.word	0x200006ec
 8006ac0:	20000bd4 	.word	0x20000bd4

08006ac4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <vTaskInternalSetTimeOutState+0x24>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ad4:	4b05      	ldr	r3, [pc, #20]	; (8006aec <vTaskInternalSetTimeOutState+0x28>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	605a      	str	r2, [r3, #4]
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	20000bd8 	.word	0x20000bd8
 8006aec:	20000bc4 	.word	0x20000bc4

08006af0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d109      	bne.n	8006b14 <xTaskCheckForTimeOut+0x24>
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	e7fe      	b.n	8006b12 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <xTaskCheckForTimeOut+0x3e>
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e7fe      	b.n	8006b2c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006b2e:	f000 fdf3 	bl	8007718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b32:	4b1d      	ldr	r3, [pc, #116]	; (8006ba8 <xTaskCheckForTimeOut+0xb8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d102      	bne.n	8006b52 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	e023      	b.n	8006b9a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b15      	ldr	r3, [pc, #84]	; (8006bac <xTaskCheckForTimeOut+0xbc>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d007      	beq.n	8006b6e <xTaskCheckForTimeOut+0x7e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d302      	bcc.n	8006b6e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	61fb      	str	r3, [r7, #28]
 8006b6c:	e015      	b.n	8006b9a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d20b      	bcs.n	8006b90 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	1ad2      	subs	r2, r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff ff9d 	bl	8006ac4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	e004      	b.n	8006b9a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2200      	movs	r2, #0
 8006b94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b96:	2301      	movs	r3, #1
 8006b98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b9a:	f000 fdeb 	bl	8007774 <vPortExitCritical>

	return xReturn;
 8006b9e:	69fb      	ldr	r3, [r7, #28]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3720      	adds	r7, #32
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000bc4 	.word	0x20000bc4
 8006bac:	20000bd8 	.word	0x20000bd8

08006bb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bb4:	4b03      	ldr	r3, [pc, #12]	; (8006bc4 <vTaskMissedYield+0x14>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
}
 8006bba:	bf00      	nop
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bc80      	pop	{r7}
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20000bd4 	.word	0x20000bd4

08006bc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bd0:	f000 f852 	bl	8006c78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bd4:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <prvIdleTask+0x28>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d9f9      	bls.n	8006bd0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <prvIdleTask+0x2c>)
 8006bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bec:	e7f0      	b.n	8006bd0 <prvIdleTask+0x8>
 8006bee:	bf00      	nop
 8006bf0:	200006f0 	.word	0x200006f0
 8006bf4:	e000ed04 	.word	0xe000ed04

08006bf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bfe:	2300      	movs	r3, #0
 8006c00:	607b      	str	r3, [r7, #4]
 8006c02:	e00c      	b.n	8006c1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4a12      	ldr	r2, [pc, #72]	; (8006c58 <prvInitialiseTaskLists+0x60>)
 8006c10:	4413      	add	r3, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fe fce8 	bl	80055e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	607b      	str	r3, [r7, #4]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b37      	cmp	r3, #55	; 0x37
 8006c22:	d9ef      	bls.n	8006c04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c24:	480d      	ldr	r0, [pc, #52]	; (8006c5c <prvInitialiseTaskLists+0x64>)
 8006c26:	f7fe fcdf 	bl	80055e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c2a:	480d      	ldr	r0, [pc, #52]	; (8006c60 <prvInitialiseTaskLists+0x68>)
 8006c2c:	f7fe fcdc 	bl	80055e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c30:	480c      	ldr	r0, [pc, #48]	; (8006c64 <prvInitialiseTaskLists+0x6c>)
 8006c32:	f7fe fcd9 	bl	80055e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c36:	480c      	ldr	r0, [pc, #48]	; (8006c68 <prvInitialiseTaskLists+0x70>)
 8006c38:	f7fe fcd6 	bl	80055e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c3c:	480b      	ldr	r0, [pc, #44]	; (8006c6c <prvInitialiseTaskLists+0x74>)
 8006c3e:	f7fe fcd3 	bl	80055e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c42:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <prvInitialiseTaskLists+0x78>)
 8006c44:	4a05      	ldr	r2, [pc, #20]	; (8006c5c <prvInitialiseTaskLists+0x64>)
 8006c46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <prvInitialiseTaskLists+0x7c>)
 8006c4a:	4a05      	ldr	r2, [pc, #20]	; (8006c60 <prvInitialiseTaskLists+0x68>)
 8006c4c:	601a      	str	r2, [r3, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	200006f0 	.word	0x200006f0
 8006c5c:	20000b50 	.word	0x20000b50
 8006c60:	20000b64 	.word	0x20000b64
 8006c64:	20000b80 	.word	0x20000b80
 8006c68:	20000b94 	.word	0x20000b94
 8006c6c:	20000bac 	.word	0x20000bac
 8006c70:	20000b78 	.word	0x20000b78
 8006c74:	20000b7c 	.word	0x20000b7c

08006c78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c7e:	e019      	b.n	8006cb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c80:	f000 fd4a 	bl	8007718 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006c84:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <prvCheckTasksWaitingTermination+0x4c>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fd2f 	bl	80056f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c96:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <prvCheckTasksWaitingTermination+0x50>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	4a0a      	ldr	r2, [pc, #40]	; (8006cc8 <prvCheckTasksWaitingTermination+0x50>)
 8006c9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvCheckTasksWaitingTermination+0x54>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	4a09      	ldr	r2, [pc, #36]	; (8006ccc <prvCheckTasksWaitingTermination+0x54>)
 8006ca8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006caa:	f000 fd63 	bl	8007774 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f80e 	bl	8006cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <prvCheckTasksWaitingTermination+0x54>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e1      	bne.n	8006c80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cbc:	bf00      	nop
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	20000b94 	.word	0x20000b94
 8006cc8:	20000bc0 	.word	0x20000bc0
 8006ccc:	20000ba8 	.word	0x20000ba8

08006cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d108      	bne.n	8006cf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fece 	bl	8007a88 <vPortFree>
				vPortFree( pxTCB );
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fecb 	bl	8007a88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cf2:	e017      	b.n	8006d24 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d103      	bne.n	8006d06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fec2 	bl	8007a88 <vPortFree>
	}
 8006d04:	e00e      	b.n	8006d24 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d009      	beq.n	8006d24 <prvDeleteTCB+0x54>
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	e7fe      	b.n	8006d22 <prvDeleteTCB+0x52>
	}
 8006d24:	bf00      	nop
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d32:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <prvResetNextTaskUnblockTime+0x40>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <prvResetNextTaskUnblockTime+0x14>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e000      	b.n	8006d42 <prvResetNextTaskUnblockTime+0x16>
 8006d40:	2300      	movs	r3, #0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d004      	beq.n	8006d50 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d46:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <prvResetNextTaskUnblockTime+0x44>)
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d4e:	e008      	b.n	8006d62 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <prvResetNextTaskUnblockTime+0x40>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4a04      	ldr	r2, [pc, #16]	; (8006d70 <prvResetNextTaskUnblockTime+0x44>)
 8006d60:	6013      	str	r3, [r2, #0]
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr
 8006d6c:	20000b78 	.word	0x20000b78
 8006d70:	20000be0 	.word	0x20000be0

08006d74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <xTaskGetSchedulerState+0x34>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d102      	bne.n	8006d88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d82:	2301      	movs	r3, #1
 8006d84:	607b      	str	r3, [r7, #4]
 8006d86:	e008      	b.n	8006d9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d88:	4b08      	ldr	r3, [pc, #32]	; (8006dac <xTaskGetSchedulerState+0x38>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d90:	2302      	movs	r3, #2
 8006d92:	607b      	str	r3, [r7, #4]
 8006d94:	e001      	b.n	8006d9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d96:	2300      	movs	r3, #0
 8006d98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d9a:	687b      	ldr	r3, [r7, #4]
	}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20000bcc 	.word	0x20000bcc
 8006dac:	20000be8 	.word	0x20000be8

08006db0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d054      	beq.n	8006e70 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dc6:	4b2d      	ldr	r3, [pc, #180]	; (8006e7c <xTaskPriorityDisinherit+0xcc>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d009      	beq.n	8006de4 <xTaskPriorityDisinherit+0x34>
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e7fe      	b.n	8006de2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d109      	bne.n	8006e00 <xTaskPriorityDisinherit+0x50>
 8006dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	60bb      	str	r3, [r7, #8]
 8006dfe:	e7fe      	b.n	8006dfe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e04:	1e5a      	subs	r2, r3, #1
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d02c      	beq.n	8006e70 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d128      	bne.n	8006e70 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3304      	adds	r3, #4
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fe fc66 	bl	80056f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e40:	4b0f      	ldr	r3, [pc, #60]	; (8006e80 <xTaskPriorityDisinherit+0xd0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d903      	bls.n	8006e50 <xTaskPriorityDisinherit+0xa0>
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	4a0c      	ldr	r2, [pc, #48]	; (8006e80 <xTaskPriorityDisinherit+0xd0>)
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4613      	mov	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4a09      	ldr	r2, [pc, #36]	; (8006e84 <xTaskPriorityDisinherit+0xd4>)
 8006e5e:	441a      	add	r2, r3
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4619      	mov	r1, r3
 8006e66:	4610      	mov	r0, r2
 8006e68:	f7fe fbe9 	bl	800563e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e70:	697b      	ldr	r3, [r7, #20]
	}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	200006ec 	.word	0x200006ec
 8006e80:	20000bc8 	.word	0x20000bc8
 8006e84:	200006f0 	.word	0x200006f0

08006e88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e92:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e98:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fc28 	bl	80056f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eaa:	d10a      	bne.n	8006ec2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb2:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4819      	ldr	r0, [pc, #100]	; (8006f20 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ebc:	f7fe fbbf 	bl	800563e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ec0:	e026      	b.n	8006f10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006eca:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d209      	bcs.n	8006eee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	f7fe fbcc 	bl	8005684 <vListInsert>
}
 8006eec:	e010      	b.n	8006f10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eee:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe fbc2 	bl	8005684 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d202      	bcs.n	8006f10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f0a:	4a08      	ldr	r2, [pc, #32]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6013      	str	r3, [r2, #0]
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000bc4 	.word	0x20000bc4
 8006f1c:	200006ec 	.word	0x200006ec
 8006f20:	20000bac 	.word	0x20000bac
 8006f24:	20000b7c 	.word	0x20000b7c
 8006f28:	20000b78 	.word	0x20000b78
 8006f2c:	20000be0 	.word	0x20000be0

08006f30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f3a:	f000 fac3 	bl	80074c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f3e:	4b1c      	ldr	r3, [pc, #112]	; (8006fb0 <xTimerCreateTimerTask+0x80>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d021      	beq.n	8006f8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f4e:	1d3a      	adds	r2, r7, #4
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	f107 030c 	add.w	r3, r7, #12
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe fb2b 	bl	80055b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	2302      	movs	r3, #2
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	460a      	mov	r2, r1
 8006f70:	4910      	ldr	r1, [pc, #64]	; (8006fb4 <xTimerCreateTimerTask+0x84>)
 8006f72:	4811      	ldr	r0, [pc, #68]	; (8006fb8 <xTimerCreateTimerTask+0x88>)
 8006f74:	f7ff f8f8 	bl	8006168 <xTaskCreateStatic>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <xTimerCreateTimerTask+0x8c>)
 8006f7c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <xTimerCreateTimerTask+0x8c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <xTimerCreateTimerTask+0x74>
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	e7fe      	b.n	8006fa2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006fa4:	697b      	ldr	r3, [r7, #20]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000c1c 	.word	0x20000c1c
 8006fb4:	08007dfc 	.word	0x08007dfc
 8006fb8:	080070d9 	.word	0x080070d9
 8006fbc:	20000c20 	.word	0x20000c20

08006fc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	; 0x28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d109      	bne.n	8006fec <xTimerGenericCommand+0x2c>
 8006fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	623b      	str	r3, [r7, #32]
 8006fea:	e7fe      	b.n	8006fea <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006fec:	4b19      	ldr	r3, [pc, #100]	; (8007054 <xTimerGenericCommand+0x94>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d02a      	beq.n	800704a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	2b05      	cmp	r3, #5
 8007004:	dc18      	bgt.n	8007038 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007006:	f7ff feb5 	bl	8006d74 <xTaskGetSchedulerState>
 800700a:	4603      	mov	r3, r0
 800700c:	2b02      	cmp	r3, #2
 800700e:	d109      	bne.n	8007024 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007010:	4b10      	ldr	r3, [pc, #64]	; (8007054 <xTimerGenericCommand+0x94>)
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	f107 0110 	add.w	r1, r7, #16
 8007018:	2300      	movs	r3, #0
 800701a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701c:	f7fe fcce 	bl	80059bc <xQueueGenericSend>
 8007020:	6278      	str	r0, [r7, #36]	; 0x24
 8007022:	e012      	b.n	800704a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <xTimerGenericCommand+0x94>)
 8007026:	6818      	ldr	r0, [r3, #0]
 8007028:	f107 0110 	add.w	r1, r7, #16
 800702c:	2300      	movs	r3, #0
 800702e:	2200      	movs	r2, #0
 8007030:	f7fe fcc4 	bl	80059bc <xQueueGenericSend>
 8007034:	6278      	str	r0, [r7, #36]	; 0x24
 8007036:	e008      	b.n	800704a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <xTimerGenericCommand+0x94>)
 800703a:	6818      	ldr	r0, [r3, #0]
 800703c:	f107 0110 	add.w	r1, r7, #16
 8007040:	2300      	movs	r3, #0
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	f7fe fdb4 	bl	8005bb0 <xQueueGenericSendFromISR>
 8007048:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800704c:	4618      	mov	r0, r3
 800704e:	3728      	adds	r7, #40	; 0x28
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20000c1c 	.word	0x20000c1c

08007058 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af02      	add	r7, sp, #8
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <prvProcessExpiredTimer+0x7c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	3304      	adds	r3, #4
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fb3f 	bl	80056f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	69db      	ldr	r3, [r3, #28]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d121      	bne.n	80070c2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	699a      	ldr	r2, [r3, #24]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	18d1      	adds	r1, r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	6978      	ldr	r0, [r7, #20]
 800708c:	f000 f8c8 	bl	8007220 <prvInsertTimerInActiveList>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d015      	beq.n	80070c2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007096:	2300      	movs	r3, #0
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	2300      	movs	r3, #0
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	2100      	movs	r1, #0
 80070a0:	6978      	ldr	r0, [r7, #20]
 80070a2:	f7ff ff8d 	bl	8006fc0 <xTimerGenericCommand>
 80070a6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d109      	bne.n	80070c2 <prvProcessExpiredTimer+0x6a>
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	60fb      	str	r3, [r7, #12]
 80070c0:	e7fe      	b.n	80070c0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	6978      	ldr	r0, [r7, #20]
 80070c8:	4798      	blx	r3
}
 80070ca:	bf00      	nop
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000c14 	.word	0x20000c14

080070d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070e0:	f107 0308 	add.w	r3, r7, #8
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 f857 	bl	8007198 <prvGetNextExpireTime>
 80070ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4619      	mov	r1, r3
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f803 	bl	80070fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80070f6:	f000 f8d5 	bl	80072a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80070fa:	e7f1      	b.n	80070e0 <prvTimerTask+0x8>

080070fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007106:	f7ff fa5b 	bl	80065c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800710a:	f107 0308 	add.w	r3, r7, #8
 800710e:	4618      	mov	r0, r3
 8007110:	f000 f866 	bl	80071e0 <prvSampleTimeNow>
 8007114:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d130      	bne.n	800717e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <prvProcessTimerOrBlockTask+0x3c>
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	429a      	cmp	r2, r3
 8007128:	d806      	bhi.n	8007138 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800712a:	f7ff fa57 	bl	80065dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800712e:	68f9      	ldr	r1, [r7, #12]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ff91 	bl	8007058 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007136:	e024      	b.n	8007182 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <prvProcessTimerOrBlockTask+0x90>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007150:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <prvProcessTimerOrBlockTask+0x94>)
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	4619      	mov	r1, r3
 800715e:	f7fe ffcf 	bl	8006100 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007162:	f7ff fa3b 	bl	80065dc <xTaskResumeAll>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10a      	bne.n	8007182 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <prvProcessTimerOrBlockTask+0x98>)
 800716e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007172:	601a      	str	r2, [r3, #0]
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	f3bf 8f6f 	isb	sy
}
 800717c:	e001      	b.n	8007182 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800717e:	f7ff fa2d 	bl	80065dc <xTaskResumeAll>
}
 8007182:	bf00      	nop
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000c18 	.word	0x20000c18
 8007190:	20000c1c 	.word	0x20000c1c
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071a0:	4b0e      	ldr	r3, [pc, #56]	; (80071dc <prvGetNextExpireTime+0x44>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bf0c      	ite	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	2300      	movne	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d105      	bne.n	80071ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071be:	4b07      	ldr	r3, [pc, #28]	; (80071dc <prvGetNextExpireTime+0x44>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	e001      	b.n	80071ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	20000c14 	.word	0x20000c14

080071e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80071e8:	f7ff fa94 	bl	8006714 <xTaskGetTickCount>
 80071ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80071ee:	4b0b      	ldr	r3, [pc, #44]	; (800721c <prvSampleTimeNow+0x3c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d205      	bcs.n	8007204 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80071f8:	f000 f904 	bl	8007404 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	e002      	b.n	800720a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800720a:	4a04      	ldr	r2, [pc, #16]	; (800721c <prvSampleTimeNow+0x3c>)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007210:	68fb      	ldr	r3, [r7, #12]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000c24 	.word	0x20000c24

08007220 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	429a      	cmp	r2, r3
 8007244:	d812      	bhi.n	800726c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	1ad2      	subs	r2, r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	429a      	cmp	r2, r3
 8007252:	d302      	bcc.n	800725a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	e01b      	b.n	8007292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800725a:	4b10      	ldr	r3, [pc, #64]	; (800729c <prvInsertTimerInActiveList+0x7c>)
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7fe fa0d 	bl	8005684 <vListInsert>
 800726a:	e012      	b.n	8007292 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d206      	bcs.n	8007282 <prvInsertTimerInActiveList+0x62>
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	429a      	cmp	r2, r3
 800727a:	d302      	bcc.n	8007282 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800727c:	2301      	movs	r3, #1
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	e007      	b.n	8007292 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007282:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <prvInsertTimerInActiveList+0x80>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3304      	adds	r3, #4
 800728a:	4619      	mov	r1, r3
 800728c:	4610      	mov	r0, r2
 800728e:	f7fe f9f9 	bl	8005684 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007292:	697b      	ldr	r3, [r7, #20]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000c18 	.word	0x20000c18
 80072a0:	20000c14 	.word	0x20000c14

080072a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08e      	sub	sp, #56	; 0x38
 80072a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072aa:	e099      	b.n	80073e0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	da17      	bge.n	80072e2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072b2:	1d3b      	adds	r3, r7, #4
 80072b4:	3304      	adds	r3, #4
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <prvProcessReceivedCommands+0x2e>
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	61fb      	str	r3, [r7, #28]
 80072d0:	e7fe      	b.n	80072d0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d8:	6850      	ldr	r0, [r2, #4]
 80072da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072dc:	6892      	ldr	r2, [r2, #8]
 80072de:	4611      	mov	r1, r2
 80072e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	db7a      	blt.n	80073de <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	3304      	adds	r3, #4
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fe f9fb 	bl	80056f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072fe:	463b      	mov	r3, r7
 8007300:	4618      	mov	r0, r3
 8007302:	f7ff ff6d 	bl	80071e0 <prvSampleTimeNow>
 8007306:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b09      	cmp	r3, #9
 800730c:	d868      	bhi.n	80073e0 <prvProcessReceivedCommands+0x13c>
 800730e:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <prvProcessReceivedCommands+0x70>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	0800733d 	.word	0x0800733d
 8007318:	0800733d 	.word	0x0800733d
 800731c:	0800733d 	.word	0x0800733d
 8007320:	080073e1 	.word	0x080073e1
 8007324:	08007397 	.word	0x08007397
 8007328:	080073cd 	.word	0x080073cd
 800732c:	0800733d 	.word	0x0800733d
 8007330:	0800733d 	.word	0x0800733d
 8007334:	080073e1 	.word	0x080073e1
 8007338:	08007397 	.word	0x08007397
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	18d1      	adds	r1, r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800734a:	f7ff ff69 	bl	8007220 <prvInsertTimerInActiveList>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d045      	beq.n	80073e0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d13d      	bne.n	80073e0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	441a      	add	r2, r3
 800736c:	2300      	movs	r3, #0
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	2300      	movs	r3, #0
 8007372:	2100      	movs	r1, #0
 8007374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007376:	f7ff fe23 	bl	8006fc0 <xTimerGenericCommand>
 800737a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d12e      	bne.n	80073e0 <prvProcessReceivedCommands+0x13c>
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	61bb      	str	r3, [r7, #24]
 8007394:	e7fe      	b.n	8007394 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d109      	bne.n	80073b8 <prvProcessReceivedCommands+0x114>
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	617b      	str	r3, [r7, #20]
 80073b6:	e7fe      	b.n	80073b6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80073b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ba:	699a      	ldr	r2, [r3, #24]
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	18d1      	adds	r1, r2, r3
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073c6:	f7ff ff2b 	bl	8007220 <prvInsertTimerInActiveList>
					break;
 80073ca:	e009      	b.n	80073e0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80073d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073d8:	f000 fb56 	bl	8007a88 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80073dc:	e000      	b.n	80073e0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80073de:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <prvProcessReceivedCommands+0x15c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	1d39      	adds	r1, r7, #4
 80073e6:	2200      	movs	r2, #0
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fe fc75 	bl	8005cd8 <xQueueReceive>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f47f af5b 	bne.w	80072ac <prvProcessReceivedCommands+0x8>
	}
}
 80073f6:	bf00      	nop
 80073f8:	3730      	adds	r7, #48	; 0x30
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000c1c 	.word	0x20000c1c

08007404 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b088      	sub	sp, #32
 8007408:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800740a:	e044      	b.n	8007496 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800740c:	4b2b      	ldr	r3, [pc, #172]	; (80074bc <prvSwitchTimerLists+0xb8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007416:	4b29      	ldr	r3, [pc, #164]	; (80074bc <prvSwitchTimerLists+0xb8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	3304      	adds	r3, #4
 8007424:	4618      	mov	r0, r3
 8007426:	f7fe f965 	bl	80056f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d12d      	bne.n	8007496 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4413      	add	r3, r2
 8007442:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d90e      	bls.n	800746a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68ba      	ldr	r2, [r7, #8]
 8007450:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007458:	4b18      	ldr	r3, [pc, #96]	; (80074bc <prvSwitchTimerLists+0xb8>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3304      	adds	r3, #4
 8007460:	4619      	mov	r1, r3
 8007462:	4610      	mov	r0, r2
 8007464:	f7fe f90e 	bl	8005684 <vListInsert>
 8007468:	e015      	b.n	8007496 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800746a:	2300      	movs	r3, #0
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	2300      	movs	r3, #0
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	2100      	movs	r1, #0
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fda3 	bl	8006fc0 <xTimerGenericCommand>
 800747a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <prvSwitchTimerLists+0x92>
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	e7fe      	b.n	8007494 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <prvSwitchTimerLists+0xb8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1b5      	bne.n	800740c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80074a0:	4b06      	ldr	r3, [pc, #24]	; (80074bc <prvSwitchTimerLists+0xb8>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80074a6:	4b06      	ldr	r3, [pc, #24]	; (80074c0 <prvSwitchTimerLists+0xbc>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a04      	ldr	r2, [pc, #16]	; (80074bc <prvSwitchTimerLists+0xb8>)
 80074ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80074ae:	4a04      	ldr	r2, [pc, #16]	; (80074c0 <prvSwitchTimerLists+0xbc>)
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	6013      	str	r3, [r2, #0]
}
 80074b4:	bf00      	nop
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000c14 	.word	0x20000c14
 80074c0:	20000c18 	.word	0x20000c18

080074c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80074ca:	f000 f925 	bl	8007718 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80074ce:	4b15      	ldr	r3, [pc, #84]	; (8007524 <prvCheckForValidListAndQueue+0x60>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d120      	bne.n	8007518 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80074d6:	4814      	ldr	r0, [pc, #80]	; (8007528 <prvCheckForValidListAndQueue+0x64>)
 80074d8:	f7fe f886 	bl	80055e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80074dc:	4813      	ldr	r0, [pc, #76]	; (800752c <prvCheckForValidListAndQueue+0x68>)
 80074de:	f7fe f883 	bl	80055e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80074e2:	4b13      	ldr	r3, [pc, #76]	; (8007530 <prvCheckForValidListAndQueue+0x6c>)
 80074e4:	4a10      	ldr	r2, [pc, #64]	; (8007528 <prvCheckForValidListAndQueue+0x64>)
 80074e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80074e8:	4b12      	ldr	r3, [pc, #72]	; (8007534 <prvCheckForValidListAndQueue+0x70>)
 80074ea:	4a10      	ldr	r2, [pc, #64]	; (800752c <prvCheckForValidListAndQueue+0x68>)
 80074ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80074ee:	2300      	movs	r3, #0
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	4b11      	ldr	r3, [pc, #68]	; (8007538 <prvCheckForValidListAndQueue+0x74>)
 80074f4:	4a11      	ldr	r2, [pc, #68]	; (800753c <prvCheckForValidListAndQueue+0x78>)
 80074f6:	2110      	movs	r1, #16
 80074f8:	200a      	movs	r0, #10
 80074fa:	f7fe f98d 	bl	8005818 <xQueueGenericCreateStatic>
 80074fe:	4602      	mov	r2, r0
 8007500:	4b08      	ldr	r3, [pc, #32]	; (8007524 <prvCheckForValidListAndQueue+0x60>)
 8007502:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007504:	4b07      	ldr	r3, [pc, #28]	; (8007524 <prvCheckForValidListAndQueue+0x60>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <prvCheckForValidListAndQueue+0x60>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	490b      	ldr	r1, [pc, #44]	; (8007540 <prvCheckForValidListAndQueue+0x7c>)
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe fdcc 	bl	80060b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007518:	f000 f92c 	bl	8007774 <vPortExitCritical>
}
 800751c:	bf00      	nop
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000c1c 	.word	0x20000c1c
 8007528:	20000bec 	.word	0x20000bec
 800752c:	20000c00 	.word	0x20000c00
 8007530:	20000c14 	.word	0x20000c14
 8007534:	20000c18 	.word	0x20000c18
 8007538:	20000cc8 	.word	0x20000cc8
 800753c:	20000c28 	.word	0x20000c28
 8007540:	08007e04 	.word	0x08007e04

08007544 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3b04      	subs	r3, #4
 8007554:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800755c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3b04      	subs	r3, #4
 8007562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f023 0201 	bic.w	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	3b04      	subs	r3, #4
 8007572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007574:	4a08      	ldr	r2, [pc, #32]	; (8007598 <pxPortInitialiseStack+0x54>)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3b14      	subs	r3, #20
 800757e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3b20      	subs	r3, #32
 800758a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800758c:	68fb      	ldr	r3, [r7, #12]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	bc80      	pop	{r7}
 8007596:	4770      	bx	lr
 8007598:	0800759d 	.word	0x0800759d

0800759c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80075a6:	4b10      	ldr	r3, [pc, #64]	; (80075e8 <prvTaskExitError+0x4c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ae:	d009      	beq.n	80075c4 <prvTaskExitError+0x28>
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	e7fe      	b.n	80075c2 <prvTaskExitError+0x26>
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80075d6:	bf00      	nop
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0fc      	beq.n	80075d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80075de:	bf00      	nop
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr
 80075e8:	2000000c 	.word	0x2000000c
 80075ec:	00000000 	.word	0x00000000

080075f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <pxCurrentTCBConst2>)
 80075f2:	6819      	ldr	r1, [r3, #0]
 80075f4:	6808      	ldr	r0, [r1, #0]
 80075f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80075fa:	f380 8809 	msr	PSP, r0
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f380 8811 	msr	BASEPRI, r0
 800760a:	f04e 0e0d 	orr.w	lr, lr, #13
 800760e:	4770      	bx	lr

08007610 <pxCurrentTCBConst2>:
 8007610:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007618:	4806      	ldr	r0, [pc, #24]	; (8007634 <prvPortStartFirstTask+0x1c>)
 800761a:	6800      	ldr	r0, [r0, #0]
 800761c:	6800      	ldr	r0, [r0, #0]
 800761e:	f380 8808 	msr	MSP, r0
 8007622:	b662      	cpsie	i
 8007624:	b661      	cpsie	f
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	df00      	svc	0
 8007630:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007632:	bf00      	nop
 8007634:	e000ed08 	.word	0xe000ed08

08007638 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800763e:	4b31      	ldr	r3, [pc, #196]	; (8007704 <xPortStartScheduler+0xcc>)
 8007640:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	22ff      	movs	r2, #255	; 0xff
 800764e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	781b      	ldrb	r3, [r3, #0]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007660:	b2da      	uxtb	r2, r3
 8007662:	4b29      	ldr	r3, [pc, #164]	; (8007708 <xPortStartScheduler+0xd0>)
 8007664:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007666:	4b29      	ldr	r3, [pc, #164]	; (800770c <xPortStartScheduler+0xd4>)
 8007668:	2207      	movs	r2, #7
 800766a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800766c:	e009      	b.n	8007682 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800766e:	4b27      	ldr	r3, [pc, #156]	; (800770c <xPortStartScheduler+0xd4>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3b01      	subs	r3, #1
 8007674:	4a25      	ldr	r2, [pc, #148]	; (800770c <xPortStartScheduler+0xd4>)
 8007676:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768a:	2b80      	cmp	r3, #128	; 0x80
 800768c:	d0ef      	beq.n	800766e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800768e:	4b1f      	ldr	r3, [pc, #124]	; (800770c <xPortStartScheduler+0xd4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f1c3 0307 	rsb	r3, r3, #7
 8007696:	2b04      	cmp	r3, #4
 8007698:	d009      	beq.n	80076ae <xPortStartScheduler+0x76>
 800769a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	60bb      	str	r3, [r7, #8]
 80076ac:	e7fe      	b.n	80076ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80076ae:	4b17      	ldr	r3, [pc, #92]	; (800770c <xPortStartScheduler+0xd4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	4a15      	ldr	r2, [pc, #84]	; (800770c <xPortStartScheduler+0xd4>)
 80076b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80076b8:	4b14      	ldr	r3, [pc, #80]	; (800770c <xPortStartScheduler+0xd4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076c0:	4a12      	ldr	r2, [pc, #72]	; (800770c <xPortStartScheduler+0xd4>)
 80076c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80076cc:	4b10      	ldr	r3, [pc, #64]	; (8007710 <xPortStartScheduler+0xd8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a0f      	ldr	r2, [pc, #60]	; (8007710 <xPortStartScheduler+0xd8>)
 80076d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80076d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80076d8:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <xPortStartScheduler+0xd8>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a0c      	ldr	r2, [pc, #48]	; (8007710 <xPortStartScheduler+0xd8>)
 80076de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80076e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80076e4:	f000 f8b0 	bl	8007848 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80076e8:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <xPortStartScheduler+0xdc>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80076ee:	f7ff ff93 	bl	8007618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80076f2:	f7ff f8db 	bl	80068ac <vTaskSwitchContext>
	prvTaskExitError();
 80076f6:	f7ff ff51 	bl	800759c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	e000e400 	.word	0xe000e400
 8007708:	20000d18 	.word	0x20000d18
 800770c:	20000d1c 	.word	0x20000d1c
 8007710:	e000ed20 	.word	0xe000ed20
 8007714:	2000000c 	.word	0x2000000c

08007718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007730:	4b0e      	ldr	r3, [pc, #56]	; (800776c <vPortEnterCritical+0x54>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3301      	adds	r3, #1
 8007736:	4a0d      	ldr	r2, [pc, #52]	; (800776c <vPortEnterCritical+0x54>)
 8007738:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800773a:	4b0c      	ldr	r3, [pc, #48]	; (800776c <vPortEnterCritical+0x54>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10e      	bne.n	8007760 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007742:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <vPortEnterCritical+0x58>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	d009      	beq.n	8007760 <vPortEnterCritical+0x48>
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	603b      	str	r3, [r7, #0]
 800775e:	e7fe      	b.n	800775e <vPortEnterCritical+0x46>
	}
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	2000000c 	.word	0x2000000c
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800777a:	4b10      	ldr	r3, [pc, #64]	; (80077bc <vPortExitCritical+0x48>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <vPortExitCritical+0x22>
 8007782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	e7fe      	b.n	8007794 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <vPortExitCritical+0x48>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	3b01      	subs	r3, #1
 800779c:	4a07      	ldr	r2, [pc, #28]	; (80077bc <vPortExitCritical+0x48>)
 800779e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80077a0:	4b06      	ldr	r3, [pc, #24]	; (80077bc <vPortExitCritical+0x48>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <vPortExitCritical+0x3e>
 80077a8:	2300      	movs	r3, #0
 80077aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr
 80077bc:	2000000c 	.word	0x2000000c

080077c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80077c0:	f3ef 8009 	mrs	r0, PSP
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <pxCurrentTCBConst>)
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077d0:	6010      	str	r0, [r2, #0]
 80077d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80077d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80077da:	f380 8811 	msr	BASEPRI, r0
 80077de:	f7ff f865 	bl	80068ac <vTaskSwitchContext>
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f380 8811 	msr	BASEPRI, r0
 80077ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80077ee:	6819      	ldr	r1, [r3, #0]
 80077f0:	6808      	ldr	r0, [r1, #0]
 80077f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80077f6:	f380 8809 	msr	PSP, r0
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	4770      	bx	lr

08007800 <pxCurrentTCBConst>:
 8007800:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop

08007808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
	__asm volatile
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007820:	f7fe ff86 	bl	8006730 <xTaskIncrementTick>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800782a:	4b06      	ldr	r3, [pc, #24]	; (8007844 <SysTick_Handler+0x3c>)
 800782c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	2300      	movs	r3, #0
 8007834:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	e000ed04 	.word	0xe000ed04

08007848 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800784c:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <vPortSetupTimerInterrupt+0x30>)
 800784e:	2200      	movs	r2, #0
 8007850:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007852:	4b0a      	ldr	r3, [pc, #40]	; (800787c <vPortSetupTimerInterrupt+0x34>)
 8007854:	2200      	movs	r2, #0
 8007856:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007858:	4b09      	ldr	r3, [pc, #36]	; (8007880 <vPortSetupTimerInterrupt+0x38>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a09      	ldr	r2, [pc, #36]	; (8007884 <vPortSetupTimerInterrupt+0x3c>)
 800785e:	fba2 2303 	umull	r2, r3, r2, r3
 8007862:	099b      	lsrs	r3, r3, #6
 8007864:	4a08      	ldr	r2, [pc, #32]	; (8007888 <vPortSetupTimerInterrupt+0x40>)
 8007866:	3b01      	subs	r3, #1
 8007868:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800786a:	4b03      	ldr	r3, [pc, #12]	; (8007878 <vPortSetupTimerInterrupt+0x30>)
 800786c:	2207      	movs	r2, #7
 800786e:	601a      	str	r2, [r3, #0]
}
 8007870:	bf00      	nop
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	e000e010 	.word	0xe000e010
 800787c:	e000e018 	.word	0xe000e018
 8007880:	20000000 	.word	0x20000000
 8007884:	10624dd3 	.word	0x10624dd3
 8007888:	e000e014 	.word	0xe000e014

0800788c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007892:	f3ef 8305 	mrs	r3, IPSR
 8007896:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b0f      	cmp	r3, #15
 800789c:	d913      	bls.n	80078c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800789e:	4a15      	ldr	r2, [pc, #84]	; (80078f4 <vPortValidateInterruptPriority+0x68>)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80078a8:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <vPortValidateInterruptPriority+0x6c>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	7afa      	ldrb	r2, [r7, #11]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d209      	bcs.n	80078c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	607b      	str	r3, [r7, #4]
 80078c4:	e7fe      	b.n	80078c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80078c6:	4b0d      	ldr	r3, [pc, #52]	; (80078fc <vPortValidateInterruptPriority+0x70>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80078ce:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <vPortValidateInterruptPriority+0x74>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d909      	bls.n	80078ea <vPortValidateInterruptPriority+0x5e>
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	603b      	str	r3, [r7, #0]
 80078e8:	e7fe      	b.n	80078e8 <vPortValidateInterruptPriority+0x5c>
	}
 80078ea:	bf00      	nop
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr
 80078f4:	e000e3f0 	.word	0xe000e3f0
 80078f8:	20000d18 	.word	0x20000d18
 80078fc:	e000ed0c 	.word	0xe000ed0c
 8007900:	20000d1c 	.word	0x20000d1c

08007904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b08a      	sub	sp, #40	; 0x28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800790c:	2300      	movs	r3, #0
 800790e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007910:	f7fe fe56 	bl	80065c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007914:	4b57      	ldr	r3, [pc, #348]	; (8007a74 <pvPortMalloc+0x170>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800791c:	f000 f90c 	bl	8007b38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007920:	4b55      	ldr	r3, [pc, #340]	; (8007a78 <pvPortMalloc+0x174>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4013      	ands	r3, r2
 8007928:	2b00      	cmp	r3, #0
 800792a:	f040 808c 	bne.w	8007a46 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01c      	beq.n	800796e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007934:	2208      	movs	r2, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4413      	add	r3, r2
 800793a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f003 0307 	and.w	r3, r3, #7
 8007942:	2b00      	cmp	r3, #0
 8007944:	d013      	beq.n	800796e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f023 0307 	bic.w	r3, r3, #7
 800794c:	3308      	adds	r3, #8
 800794e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f003 0307 	and.w	r3, r3, #7
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <pvPortMalloc+0x6a>
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	617b      	str	r3, [r7, #20]
 800796c:	e7fe      	b.n	800796c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d068      	beq.n	8007a46 <pvPortMalloc+0x142>
 8007974:	4b41      	ldr	r3, [pc, #260]	; (8007a7c <pvPortMalloc+0x178>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	429a      	cmp	r2, r3
 800797c:	d863      	bhi.n	8007a46 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800797e:	4b40      	ldr	r3, [pc, #256]	; (8007a80 <pvPortMalloc+0x17c>)
 8007980:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007982:	4b3f      	ldr	r3, [pc, #252]	; (8007a80 <pvPortMalloc+0x17c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007988:	e004      	b.n	8007994 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	429a      	cmp	r2, r3
 800799c:	d903      	bls.n	80079a6 <pvPortMalloc+0xa2>
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1f1      	bne.n	800798a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80079a6:	4b33      	ldr	r3, [pc, #204]	; (8007a74 <pvPortMalloc+0x170>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d04a      	beq.n	8007a46 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2208      	movs	r2, #8
 80079b6:	4413      	add	r3, r2
 80079b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	1ad2      	subs	r2, r2, r3
 80079ca:	2308      	movs	r3, #8
 80079cc:	005b      	lsls	r3, r3, #1
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d91e      	bls.n	8007a10 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <pvPortMalloc+0xf4>
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	e7fe      	b.n	80079f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	1ad2      	subs	r2, r2, r3
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a0a:	69b8      	ldr	r0, [r7, #24]
 8007a0c:	f000 f8f6 	bl	8007bfc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a10:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <pvPortMalloc+0x178>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	4a18      	ldr	r2, [pc, #96]	; (8007a7c <pvPortMalloc+0x178>)
 8007a1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a1e:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <pvPortMalloc+0x178>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b18      	ldr	r3, [pc, #96]	; (8007a84 <pvPortMalloc+0x180>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d203      	bcs.n	8007a32 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a2a:	4b14      	ldr	r3, [pc, #80]	; (8007a7c <pvPortMalloc+0x178>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <pvPortMalloc+0x180>)
 8007a30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <pvPortMalloc+0x174>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	2200      	movs	r2, #0
 8007a44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007a46:	f7fe fdc9 	bl	80065dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d009      	beq.n	8007a68 <pvPortMalloc+0x164>
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	e7fe      	b.n	8007a66 <pvPortMalloc+0x162>
	return pvReturn;
 8007a68:	69fb      	ldr	r3, [r7, #28]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3728      	adds	r7, #40	; 0x28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	200020b0 	.word	0x200020b0
 8007a78:	200020bc 	.word	0x200020bc
 8007a7c:	200020b4 	.word	0x200020b4
 8007a80:	200020a8 	.word	0x200020a8
 8007a84:	200020b8 	.word	0x200020b8

08007a88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d046      	beq.n	8007b28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a9a:	2308      	movs	r3, #8
 8007a9c:	425b      	negs	r3, r3
 8007a9e:	697a      	ldr	r2, [r7, #20]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <vPortFree+0xa8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <vPortFree+0x42>
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	e7fe      	b.n	8007ac8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d009      	beq.n	8007ae6 <vPortFree+0x5e>
 8007ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60bb      	str	r3, [r7, #8]
 8007ae4:	e7fe      	b.n	8007ae4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <vPortFree+0xa8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4013      	ands	r3, r2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d019      	beq.n	8007b28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d115      	bne.n	8007b28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <vPortFree+0xa8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007b0c:	f7fe fd58 	bl	80065c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <vPortFree+0xac>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4413      	add	r3, r2
 8007b1a:	4a06      	ldr	r2, [pc, #24]	; (8007b34 <vPortFree+0xac>)
 8007b1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007b1e:	6938      	ldr	r0, [r7, #16]
 8007b20:	f000 f86c 	bl	8007bfc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007b24:	f7fe fd5a 	bl	80065dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007b28:	bf00      	nop
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	200020bc 	.word	0x200020bc
 8007b34:	200020b4 	.word	0x200020b4

08007b38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007b44:	4b27      	ldr	r3, [pc, #156]	; (8007be4 <prvHeapInit+0xac>)
 8007b46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00c      	beq.n	8007b6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3307      	adds	r3, #7
 8007b56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	4a1f      	ldr	r2, [pc, #124]	; (8007be4 <prvHeapInit+0xac>)
 8007b68:	4413      	add	r3, r2
 8007b6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b70:	4a1d      	ldr	r2, [pc, #116]	; (8007be8 <prvHeapInit+0xb0>)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b76:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <prvHeapInit+0xb0>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	4413      	add	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b84:	2208      	movs	r2, #8
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0307 	bic.w	r3, r3, #7
 8007b92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <prvHeapInit+0xb4>)
 8007b98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b9a:	4b14      	ldr	r3, [pc, #80]	; (8007bec <prvHeapInit+0xb4>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <prvHeapInit+0xb4>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	1ad2      	subs	r2, r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <prvHeapInit+0xb4>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <prvHeapInit+0xb8>)
 8007bc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	4a09      	ldr	r2, [pc, #36]	; (8007bf4 <prvHeapInit+0xbc>)
 8007bce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bd0:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <prvHeapInit+0xc0>)
 8007bd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bd6:	601a      	str	r2, [r3, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	20000d20 	.word	0x20000d20
 8007be8:	200020a8 	.word	0x200020a8
 8007bec:	200020b0 	.word	0x200020b0
 8007bf0:	200020b8 	.word	0x200020b8
 8007bf4:	200020b4 	.word	0x200020b4
 8007bf8:	200020bc 	.word	0x200020bc

08007bfc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007c04:	4b27      	ldr	r3, [pc, #156]	; (8007ca4 <prvInsertBlockIntoFreeList+0xa8>)
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e002      	b.n	8007c10 <prvInsertBlockIntoFreeList+0x14>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d8f7      	bhi.n	8007c0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	4413      	add	r3, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d108      	bne.n	8007c3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	441a      	add	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	441a      	add	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d118      	bne.n	8007c84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <prvInsertBlockIntoFreeList+0xac>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d00d      	beq.n	8007c7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	441a      	add	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	e008      	b.n	8007c8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c7a:	4b0b      	ldr	r3, [pc, #44]	; (8007ca8 <prvInsertBlockIntoFreeList+0xac>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	e003      	b.n	8007c8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d002      	beq.n	8007c9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr
 8007ca4:	200020a8 	.word	0x200020a8
 8007ca8:	200020b0 	.word	0x200020b0

08007cac <__libc_init_array>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	2500      	movs	r5, #0
 8007cb0:	4e0c      	ldr	r6, [pc, #48]	; (8007ce4 <__libc_init_array+0x38>)
 8007cb2:	4c0d      	ldr	r4, [pc, #52]	; (8007ce8 <__libc_init_array+0x3c>)
 8007cb4:	1ba4      	subs	r4, r4, r6
 8007cb6:	10a4      	asrs	r4, r4, #2
 8007cb8:	42a5      	cmp	r5, r4
 8007cba:	d109      	bne.n	8007cd0 <__libc_init_array+0x24>
 8007cbc:	f000 f82e 	bl	8007d1c <_init>
 8007cc0:	2500      	movs	r5, #0
 8007cc2:	4e0a      	ldr	r6, [pc, #40]	; (8007cec <__libc_init_array+0x40>)
 8007cc4:	4c0a      	ldr	r4, [pc, #40]	; (8007cf0 <__libc_init_array+0x44>)
 8007cc6:	1ba4      	subs	r4, r4, r6
 8007cc8:	10a4      	asrs	r4, r4, #2
 8007cca:	42a5      	cmp	r5, r4
 8007ccc:	d105      	bne.n	8007cda <__libc_init_array+0x2e>
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cd4:	4798      	blx	r3
 8007cd6:	3501      	adds	r5, #1
 8007cd8:	e7ee      	b.n	8007cb8 <__libc_init_array+0xc>
 8007cda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007cde:	4798      	blx	r3
 8007ce0:	3501      	adds	r5, #1
 8007ce2:	e7f2      	b.n	8007cca <__libc_init_array+0x1e>
 8007ce4:	08007f74 	.word	0x08007f74
 8007ce8:	08007f74 	.word	0x08007f74
 8007cec:	08007f74 	.word	0x08007f74
 8007cf0:	08007f78 	.word	0x08007f78

08007cf4 <memcpy>:
 8007cf4:	b510      	push	{r4, lr}
 8007cf6:	1e43      	subs	r3, r0, #1
 8007cf8:	440a      	add	r2, r1
 8007cfa:	4291      	cmp	r1, r2
 8007cfc:	d100      	bne.n	8007d00 <memcpy+0xc>
 8007cfe:	bd10      	pop	{r4, pc}
 8007d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d08:	e7f7      	b.n	8007cfa <memcpy+0x6>

08007d0a <memset>:
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4402      	add	r2, r0
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d100      	bne.n	8007d14 <memset+0xa>
 8007d12:	4770      	bx	lr
 8007d14:	f803 1b01 	strb.w	r1, [r3], #1
 8007d18:	e7f9      	b.n	8007d0e <memset+0x4>
	...

08007d1c <_init>:
 8007d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1e:	bf00      	nop
 8007d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d22:	bc08      	pop	{r3}
 8007d24:	469e      	mov	lr, r3
 8007d26:	4770      	bx	lr

08007d28 <_fini>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	bf00      	nop
 8007d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2e:	bc08      	pop	{r3}
 8007d30:	469e      	mov	lr, r3
 8007d32:	4770      	bx	lr
