
User Interface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080073e8  080073e8  000173e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007688  08007688  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007688  08007688  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007688  08007688  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007688  08007688  00017688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000293c  20000010  080076a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  080076a0  0002294c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e80  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a0  00000000  00000000  00039eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0003d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018db2  00000000  00000000  0003fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a55  00000000  00000000  00058bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000982c9  00000000  00000000  0006f60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001078d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005918  00000000  00000000  0010792c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080073d0 	.word	0x080073d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080073d0 	.word	0x080073d0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__aeabi_f2uiz>:
 8000c78:	0042      	lsls	r2, r0, #1
 8000c7a:	d20e      	bcs.n	8000c9a <__aeabi_f2uiz+0x22>
 8000c7c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c80:	d30b      	bcc.n	8000c9a <__aeabi_f2uiz+0x22>
 8000c82:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c86:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c8a:	d409      	bmi.n	8000ca0 <__aeabi_f2uiz+0x28>
 8000c8c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c94:	fa23 f002 	lsr.w	r0, r3, r2
 8000c98:	4770      	bx	lr
 8000c9a:	f04f 0000 	mov.w	r0, #0
 8000c9e:	4770      	bx	lr
 8000ca0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ca4:	d101      	bne.n	8000caa <__aeabi_f2uiz+0x32>
 8000ca6:	0242      	lsls	r2, r0, #9
 8000ca8:	d102      	bne.n	8000cb0 <__aeabi_f2uiz+0x38>
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f001 fb9c 	bl	80023f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f8bc 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 fa3e 	bl	8001144 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cc8:	f000 f99c 	bl	8001004 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000ccc:	f000 fa10 	bl	80010f0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000cd0:	f000 f9e4 	bl	800109c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000cd4:	f000 f908 	bl	8000ee8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cd8:	f000 f944 	bl	8000f64 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cdc:	f003 fc3e 	bl	800455c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FlowQueue */
  FlowQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &FlowQueue_attributes);
 8000ce0:	4a35      	ldr	r2, [pc, #212]	; (8000db8 <main+0x100>)
 8000ce2:	2102      	movs	r1, #2
 8000ce4:	2008      	movs	r0, #8
 8000ce6:	f003 fd77 	bl	80047d8 <osMessageQueueNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <main+0x104>)
 8000cee:	6013      	str	r3, [r2, #0]

  /* creation of WeatherQueue */
  WeatherQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WeatherQueue_attributes);
 8000cf0:	4a33      	ldr	r2, [pc, #204]	; (8000dc0 <main+0x108>)
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	2008      	movs	r0, #8
 8000cf6:	f003 fd6f 	bl	80047d8 <osMessageQueueNew>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <main+0x10c>)
 8000cfe:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidQueue */
  SolenoidQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &SolenoidQueue_attributes);
 8000d00:	4a31      	ldr	r2, [pc, #196]	; (8000dc8 <main+0x110>)
 8000d02:	2102      	movs	r1, #2
 8000d04:	2008      	movs	r0, #8
 8000d06:	f003 fd67 	bl	80047d8 <osMessageQueueNew>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <main+0x114>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* creation of UserQueue */
  UserQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &UserQueue_attributes);
 8000d10:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <main+0x118>)
 8000d12:	2102      	movs	r1, #2
 8000d14:	2008      	movs	r0, #8
 8000d16:	f003 fd5f 	bl	80047d8 <osMessageQueueNew>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <main+0x11c>)
 8000d1e:	6013      	str	r3, [r2, #0]

  /* creation of WebsiteQueue */
  WebsiteQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &WebsiteQueue_attributes);
 8000d20:	4a2d      	ldr	r2, [pc, #180]	; (8000dd8 <main+0x120>)
 8000d22:	2102      	movs	r1, #2
 8000d24:	2008      	movs	r0, #8
 8000d26:	f003 fd57 	bl	80047d8 <osMessageQueueNew>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <main+0x124>)
 8000d2e:	6013      	str	r3, [r2, #0]

  /* creation of ProcessQueue */
  ProcessQueueHandle = osMessageQueueNew (8, sizeof(uint16_t), &ProcessQueue_attributes);
 8000d30:	4a2b      	ldr	r2, [pc, #172]	; (8000de0 <main+0x128>)
 8000d32:	2102      	movs	r1, #2
 8000d34:	2008      	movs	r0, #8
 8000d36:	f003 fd4f 	bl	80047d8 <osMessageQueueNew>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4a29      	ldr	r2, [pc, #164]	; (8000de4 <main+0x12c>)
 8000d3e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of XbeeTask */
  XbeeTaskHandle = osThreadNew(StartXbeeTask, NULL, &XbeeTask_attributes);
 8000d40:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <main+0x130>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4829      	ldr	r0, [pc, #164]	; (8000dec <main+0x134>)
 8000d46:	f003 fc6f 	bl	8004628 <osThreadNew>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <main+0x138>)
 8000d4e:	6013      	str	r3, [r2, #0]

  /* creation of UserTask */
  UserTaskHandle = osThreadNew(StartUserTask, NULL, &UserTask_attributes);
 8000d50:	4a28      	ldr	r2, [pc, #160]	; (8000df4 <main+0x13c>)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4828      	ldr	r0, [pc, #160]	; (8000df8 <main+0x140>)
 8000d56:	f003 fc67 	bl	8004628 <osThreadNew>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <main+0x144>)
 8000d5e:	6013      	str	r3, [r2, #0]

  /* creation of SolenoidTask */
  SolenoidTaskHandle = osThreadNew(StartSolenoidTask, NULL, &SolenoidTask_attributes);
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <main+0x148>)
 8000d62:	2100      	movs	r1, #0
 8000d64:	4827      	ldr	r0, [pc, #156]	; (8000e04 <main+0x14c>)
 8000d66:	f003 fc5f 	bl	8004628 <osThreadNew>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <main+0x150>)
 8000d6e:	6013      	str	r3, [r2, #0]

  /* creation of WeatherTask */
  WeatherTaskHandle = osThreadNew(StartWeatherTask, NULL, &WeatherTask_attributes);
 8000d70:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <main+0x154>)
 8000d72:	2100      	movs	r1, #0
 8000d74:	4826      	ldr	r0, [pc, #152]	; (8000e10 <main+0x158>)
 8000d76:	f003 fc57 	bl	8004628 <osThreadNew>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <main+0x15c>)
 8000d7e:	6013      	str	r3, [r2, #0]

  /* creation of FlowTask */
  FlowTaskHandle = osThreadNew(StartFlowTask, NULL, &FlowTask_attributes);
 8000d80:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <main+0x160>)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4825      	ldr	r0, [pc, #148]	; (8000e1c <main+0x164>)
 8000d86:	f003 fc4f 	bl	8004628 <osThreadNew>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a24      	ldr	r2, [pc, #144]	; (8000e20 <main+0x168>)
 8000d8e:	6013      	str	r3, [r2, #0]

  /* creation of ProcessingTask */
  ProcessingTaskHandle = osThreadNew(StartProcessingTask, NULL, &ProcessingTask_attributes);
 8000d90:	4a24      	ldr	r2, [pc, #144]	; (8000e24 <main+0x16c>)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4824      	ldr	r0, [pc, #144]	; (8000e28 <main+0x170>)
 8000d96:	f003 fc47 	bl	8004628 <osThreadNew>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4a23      	ldr	r2, [pc, #140]	; (8000e2c <main+0x174>)
 8000d9e:	6013      	str	r3, [r2, #0]

  /* creation of WebsiteTask */
  WebsiteTaskHandle = osThreadNew(StartWebsiteTask, NULL, &WebsiteTask_attributes);
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <main+0x178>)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4823      	ldr	r0, [pc, #140]	; (8000e34 <main+0x17c>)
 8000da6:	f003 fc3f 	bl	8004628 <osThreadNew>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <main+0x180>)
 8000dae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000db0:	f003 fc06 	bl	80045c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
 8000db4:	e7fe      	b.n	8000db4 <main+0xfc>
 8000db6:	bf00      	nop
 8000db8:	080075e0 	.word	0x080075e0
 8000dbc:	2000255c 	.word	0x2000255c
 8000dc0:	080075f8 	.word	0x080075f8
 8000dc4:	20002838 	.word	0x20002838
 8000dc8:	08007610 	.word	0x08007610
 8000dcc:	20002558 	.word	0x20002558
 8000dd0:	08007628 	.word	0x08007628
 8000dd4:	20002564 	.word	0x20002564
 8000dd8:	08007640 	.word	0x08007640
 8000ddc:	200027e4 	.word	0x200027e4
 8000de0:	08007658 	.word	0x08007658
 8000de4:	200027ac 	.word	0x200027ac
 8000de8:	080074e4 	.word	0x080074e4
 8000dec:	08001309 	.word	0x08001309
 8000df0:	20002560 	.word	0x20002560
 8000df4:	08007508 	.word	0x08007508
 8000df8:	08001319 	.word	0x08001319
 8000dfc:	200027e8 	.word	0x200027e8
 8000e00:	0800752c 	.word	0x0800752c
 8000e04:	08001409 	.word	0x08001409
 8000e08:	20002888 	.word	0x20002888
 8000e0c:	08007550 	.word	0x08007550
 8000e10:	0800143d 	.word	0x0800143d
 8000e14:	200027e0 	.word	0x200027e0
 8000e18:	08007574 	.word	0x08007574
 8000e1c:	0800145d 	.word	0x0800145d
 8000e20:	20002834 	.word	0x20002834
 8000e24:	08007598 	.word	0x08007598
 8000e28:	08001949 	.word	0x08001949
 8000e2c:	20002884 	.word	0x20002884
 8000e30:	080075bc 	.word	0x080075bc
 8000e34:	08001a69 	.word	0x08001a69
 8000e38:	200027a8 	.word	0x200027a8

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	; 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e46:	2228      	movs	r2, #40	; 0x28
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fab8 	bl	80073c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000e80:	2300      	movs	r3, #0
 8000e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 ffa7 	bl	8002ddc <HAL_RCC_OscConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e94:	f000 fe02 	bl	8001a9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e98:	230f      	movs	r3, #15
 8000e9a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f002 fa11 	bl	80032dc <HAL_RCC_ClockConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000ec0:	f000 fdec 	bl	8001a9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fbce 	bl	8003670 <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000eda:	f000 fddf 	bl	8001a9c <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3750      	adds	r7, #80	; 0x50
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <MX_ADC1_Init+0x78>)
 8000efc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000f12:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f16:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000f26:	f001 fa99 	bl	800245c <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000f30:	f000 fdb4 	bl	8001a9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f34:	230f      	movs	r3, #15
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_ADC1_Init+0x74>)
 8000f46:	f001 fb61 	bl	800260c <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000f50:	f000 fda4 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200027b0 	.word	0x200027b0
 8000f60:	40012400 	.word	0x40012400

08000f64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <MX_TIM1_Init+0x9c>)
 8000f84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000fae:	f002 fc15 	bl	80037dc <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fb8:	f000 fd70 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000fca:	f002 fe21 	bl	8003c10 <HAL_TIM_ConfigClockSource>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fd4:	f000 fd62 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_TIM1_Init+0x98>)
 8000fe6:	f002 fff3 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f000 fd54 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200027ec 	.word	0x200027ec
 8001000:	40012c00 	.word	0x40012c00

08001004 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	463b      	mov	r3, r7
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_TIM2_Init+0x94>)
 8001022:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001026:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_TIM2_Init+0x94>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_TIM2_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_TIM2_Init+0x94>)
 8001036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103c:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_TIM2_Init+0x94>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_TIM2_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <MX_TIM2_Init+0x94>)
 800104a:	f002 fbc7 	bl	80037dc <HAL_TIM_Base_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001054:	f000 fd22 	bl	8001a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	4619      	mov	r1, r3
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <MX_TIM2_Init+0x94>)
 8001066:	f002 fdd3 	bl	8003c10 <HAL_TIM_ConfigClockSource>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001070:	f000 fd14 	bl	8001a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_TIM2_Init+0x94>)
 8001082:	f002 ffa5 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800108c:	f000 fd06 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000283c 	.word	0x2000283c

0800109c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <MX_USART1_UART_Init+0x50>)
 80010a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c0:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c2:	220c      	movs	r2, #12
 80010c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_USART1_UART_Init+0x4c>)
 80010d4:	f002 ffec 	bl	80040b0 <HAL_UART_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010de:	f000 fcdd 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200024e4 	.word	0x200024e4
 80010ec:	40013800 	.word	0x40013800

080010f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_USART3_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_USART3_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_USART3_UART_Init+0x4c>)
 80010fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_USART3_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_USART3_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_USART3_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_USART3_UART_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_USART3_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_USART3_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_USART3_UART_Init+0x4c>)
 8001128:	f002 ffc2 	bl	80040b0 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f000 fcb3 	bl	8001a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200024a4 	.word	0x200024a4
 8001140:	40004800 	.word	0x40004800

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001158:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a64      	ldr	r2, [pc, #400]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001170:	4b5f      	ldr	r3, [pc, #380]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a5e      	ldr	r2, [pc, #376]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b59      	ldr	r3, [pc, #356]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a58      	ldr	r2, [pc, #352]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b56      	ldr	r3, [pc, #344]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <MX_GPIO_Init+0x1ac>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 51cd 	mov.w	r1, #6560	; 0x19a0
 80011be:	484d      	ldr	r0, [pc, #308]	; (80012f4 <MX_GPIO_Init+0x1b0>)
 80011c0:	f001 fdd1 	bl	8002d66 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 80011c4:	2200      	movs	r2, #0
 80011c6:	f24e 01b0 	movw	r1, #57520	; 0xe0b0
 80011ca:	484b      	ldr	r0, [pc, #300]	; (80012f8 <MX_GPIO_Init+0x1b4>)
 80011cc:	f001 fdcb 	bl	8002d66 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 51fe 	mov.w	r1, #8128	; 0x1fc0
 80011d6:	4849      	ldr	r0, [pc, #292]	; (80012fc <MX_GPIO_Init+0x1b8>)
 80011d8:	f001 fdc5 	bl	8002d66 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2104      	movs	r1, #4
 80011e0:	4847      	ldr	r0, [pc, #284]	; (8001300 <MX_GPIO_Init+0x1bc>)
 80011e2:	f001 fdc0 	bl	8002d66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ec:	4b45      	ldr	r3, [pc, #276]	; (8001304 <MX_GPIO_Init+0x1c0>)
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4840      	ldr	r0, [pc, #256]	; (80012fc <MX_GPIO_Init+0x1b8>)
 80011fc:	f001 fc18 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001200:	2307      	movs	r3, #7
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	483a      	ldr	r0, [pc, #232]	; (80012fc <MX_GPIO_Init+0x1b8>)
 8001214:	f001 fc0c 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001218:	230c      	movs	r3, #12
 800121a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	4832      	ldr	r0, [pc, #200]	; (80012f4 <MX_GPIO_Init+0x1b0>)
 800122c:	f001 fc00 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA8 PA11
                           PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8001230:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
 8001234:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2302      	movs	r3, #2
 8001240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	482a      	ldr	r0, [pc, #168]	; (80012f4 <MX_GPIO_Init+0x1b0>)
 800124a:	f001 fbf1 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800124e:	2307      	movs	r3, #7
 8001250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0310 	add.w	r3, r7, #16
 800125e:	4619      	mov	r1, r3
 8001260:	4825      	ldr	r0, [pc, #148]	; (80012f8 <MX_GPIO_Init+0x1b4>)
 8001262:	f001 fbe5 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB4
                           PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 8001266:	f24e 03b0 	movw	r3, #57520	; 0xe0b0
 800126a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2302      	movs	r3, #2
 8001276:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	4619      	mov	r1, r3
 800127e:	481e      	ldr	r0, [pc, #120]	; (80012f8 <MX_GPIO_Init+0x1b4>)
 8001280:	f001 fbd6 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001284:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8001288:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2302      	movs	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4817      	ldr	r0, [pc, #92]	; (80012fc <MX_GPIO_Init+0x1b8>)
 800129e:	f001 fbc7 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a2:	2304      	movs	r3, #4
 80012a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2302      	movs	r3, #2
 80012b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 0310 	add.w	r3, r7, #16
 80012b6:	4619      	mov	r1, r3
 80012b8:	4811      	ldr	r0, [pc, #68]	; (8001300 <MX_GPIO_Init+0x1bc>)
 80012ba:	f001 fbb9 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012be:	2340      	movs	r3, #64	; 0x40
 80012c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 0310 	add.w	r3, r7, #16
 80012ce:	4619      	mov	r1, r3
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <MX_GPIO_Init+0x1b4>)
 80012d2:	f001 fbad 	bl	8002a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2105      	movs	r1, #5
 80012da:	2028      	movs	r0, #40	; 0x28
 80012dc:	f001 fb7d 	bl	80029da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012e0:	2028      	movs	r0, #40	; 0x28
 80012e2:	f001 fb96 	bl	8002a12 <HAL_NVIC_EnableIRQ>

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	10110000 	.word	0x10110000

08001308 <StartXbeeTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartXbeeTask */
void StartXbeeTask(void *argument)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

	//HAL_UART_Receive(&huart3, &uartBufferRX[0], 26, 10);
  for(;;)
  {

	  osDelay(1);
 8001310:	2001      	movs	r0, #1
 8001312:	f003 fa33 	bl	800477c <osDelay>
 8001316:	e7fb      	b.n	8001310 <StartXbeeTask+0x8>

08001318 <StartUserTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUserTask */
void StartUserTask(void *argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUserTask */
	initializeNodes();
 8001320:	f000 fbc2 	bl	8001aa8 <initializeNodes>
//	uint16_t num[7];
//	uint16_t indc, m;

  for(;;)
  {
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 28, 300) == HAL_OK)
 8001324:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001328:	221c      	movs	r2, #28
 800132a:	4933      	ldr	r1, [pc, #204]	; (80013f8 <StartUserTask+0xe0>)
 800132c:	4833      	ldr	r0, [pc, #204]	; (80013fc <StartUserTask+0xe4>)
 800132e:	f002 ff9e 	bl	800426e <HAL_UART_Receive>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d15a      	bne.n	80013ee <StartUserTask+0xd6>
	 	  	 {
	 	  		 //HAL_UART_Transmit(&huart1, uartBufferRX, 13, 1000); // send info to Olivia when recieved
	 	  		 //has to stay with main (the file where the "UART_HandleTypeDef huart3;" is)
	 	  		 if (uartBufferRX[0] == 0x7E)
 8001338:	4b2f      	ldr	r3, [pc, #188]	; (80013f8 <StartUserTask+0xe0>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b7e      	cmp	r3, #126	; 0x7e
 800133e:	d116      	bne.n	800136e <StartUserTask+0x56>
	 	  		 {
	 	  			 switch (uartBufferRX[3])
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <StartUserTask+0xe0>)
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	2b92      	cmp	r3, #146	; 0x92
 8001346:	d002      	beq.n	800134e <StartUserTask+0x36>
 8001348:	2b97      	cmp	r3, #151	; 0x97
 800134a:	d004      	beq.n	8001356 <StartUserTask+0x3e>
 800134c:	e007      	b.n	800135e <StartUserTask+0x46>
	 	  			 {
	 	  			 case 0x92:
	 	  				 processIO(uartBufferRX);
 800134e:	482a      	ldr	r0, [pc, #168]	; (80013f8 <StartUserTask+0xe0>)
 8001350:	f000 fcac 	bl	8001cac <processIO>
	 	  				 break;
 8001354:	e00c      	b.n	8001370 <StartUserTask+0x58>

	 	  			 case 0x97:
	 	  				 processATResponse(uartBufferRX);
 8001356:	4828      	ldr	r0, [pc, #160]	; (80013f8 <StartUserTask+0xe0>)
 8001358:	f000 fc1a 	bl	8001b90 <processATResponse>
	 	  				 break;
 800135c:	e008      	b.n	8001370 <StartUserTask+0x58>

	 	  			 default://if it wasnt an expected data type just throw it out
	 	  				 HAL_UART_Receive(&huart3, &uartBufferRX[0], 28, 1000);
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	221c      	movs	r2, #28
 8001364:	4924      	ldr	r1, [pc, #144]	; (80013f8 <StartUserTask+0xe0>)
 8001366:	4825      	ldr	r0, [pc, #148]	; (80013fc <StartUserTask+0xe4>)
 8001368:	f002 ff81 	bl	800426e <HAL_UART_Receive>
	 	  				 break;
 800136c:	e000      	b.n	8001370 <StartUserTask+0x58>
	 	  			 }
	 	  		  }
 800136e:	bf00      	nop
	 	  		 int d =0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
	 	  		 for(int i = 0; i < 12; i = i + 4)
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	e02f      	b.n	80013da <StartUserTask+0xc2>
	 	  		 {
	 	  			 uartBufferRX[i] = d+1;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3301      	adds	r3, #1
 8001380:	b2d9      	uxtb	r1, r3
 8001382:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <StartUserTask+0xe0>)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	460a      	mov	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
	 	  			 uartBufferRX[i+1] = fairways[d].resistive;
 800138c:	4a1c      	ldr	r2, [pc, #112]	; (8001400 <StartUserTask+0xe8>)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	3308      	adds	r3, #8
 8001396:	881a      	ldrh	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	3301      	adds	r3, #1
 800139c:	b2d1      	uxtb	r1, r2
 800139e:	4a16      	ldr	r2, [pc, #88]	; (80013f8 <StartUserTask+0xe0>)
 80013a0:	54d1      	strb	r1, [r2, r3]
	 	  			 uartBufferRX[i+2] = fairways[d].capacative;
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <StartUserTask+0xe8>)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4413      	add	r3, r2
 80013aa:	330a      	adds	r3, #10
 80013ac:	881a      	ldrh	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	3302      	adds	r3, #2
 80013b2:	b2d1      	uxtb	r1, r2
 80013b4:	4a10      	ldr	r2, [pc, #64]	; (80013f8 <StartUserTask+0xe0>)
 80013b6:	54d1      	strb	r1, [r2, r3]
					 uartBufferRX[i+3] = fairways[d].temperature;
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <StartUserTask+0xe8>)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	330e      	adds	r3, #14
 80013c2:	881a      	ldrh	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3303      	adds	r3, #3
 80013c8:	b2d1      	uxtb	r1, r2
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <StartUserTask+0xe0>)
 80013cc:	54d1      	strb	r1, [r2, r3]
					 d++;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3301      	adds	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
	 	  		 for(int i = 0; i < 12; i = i + 4)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3304      	adds	r3, #4
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	2b0b      	cmp	r3, #11
 80013de:	ddcc      	ble.n	800137a <StartUserTask+0x62>
	 	  		 }
	 	  		HAL_UART_Transmit(&huart1, uartBufferRX, 12, 1000);
 80013e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e4:	220c      	movs	r2, #12
 80013e6:	4904      	ldr	r1, [pc, #16]	; (80013f8 <StartUserTask+0xe0>)
 80013e8:	4806      	ldr	r0, [pc, #24]	; (8001404 <StartUserTask+0xec>)
 80013ea:	f002 feae 	bl	800414a <HAL_UART_Transmit>
//	{
//		line2();
//		wrongPass();
//		HAL_Delay(2000);
//	}
	osDelay(1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f003 f9c4 	bl	800477c <osDelay>
	  if(HAL_UART_Receive(&huart3, uartBufferRX, 28, 300) == HAL_OK)
 80013f4:	e796      	b.n	8001324 <StartUserTask+0xc>
 80013f6:	bf00      	nop
 80013f8:	20002524 	.word	0x20002524
 80013fc:	200024a4 	.word	0x200024a4
 8001400:	20002568 	.word	0x20002568
 8001404:	200024e4 	.word	0x200024e4

08001408 <StartSolenoidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSolenoidTask */
void StartSolenoidTask(void *argument)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSolenoidTask */
	uint8_t input, C, in[3], Flow[3], water[3], new, L1, L2, L3;
	uint32_t timT1, timT2, timT3, timF1, timF2, timF3, timS1, timS2, timS3, temp;
	timS1 = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
	timS2 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
	timS3 = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
	timT1 = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
	timT2 = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
	timT3 = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
	timF1 = 10;
 8001428:	230a      	movs	r3, #10
 800142a:	61fb      	str	r3, [r7, #28]
	timF2 = 10;
 800142c:	230a      	movs	r3, #10
 800142e:	61bb      	str	r3, [r7, #24]
	timF3 = 10;
 8001430:	230a      	movs	r3, #10
 8001432:	617b      	str	r3, [r7, #20]
//			water[2] = Flow[2] * timT3;
//			timT2 = 0;
//			timF2 = 10;
//			osMessageQueuePut(SolenoidQueueHandle, &water[2], 1U, 0U);
//	  }
	  osDelay(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f003 f9a1 	bl	800477c <osDelay>
 800143a:	e7fb      	b.n	8001434 <StartSolenoidTask+0x2c>

0800143c <StartWeatherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWeatherTask */
void StartWeatherTask(void *argument)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b098      	sub	sp, #96	; 0x60
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWeatherTask */
	uint16_t period[20], raw[20];
	uint16_t tickstart, tickend, totalP, totalT, a, b;
	uint16_t Pcount = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	HAL_TIM_Base_Start(&htim2);
 800144a:	4803      	ldr	r0, [pc, #12]	; (8001458 <StartWeatherTask+0x1c>)
 800144c:	f002 fa16 	bl	800387c <HAL_TIM_Base_Start>
//			osMessageQueuePut(WeatherQueueHandle, &totalT, 1U, 0U);
//			osMessageQueuePut(WeatherQueueHandle, &totalP, 1U, 0U);
//			a = totalT;
//			b = totalP;
//		}
    osDelay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f003 f993 	bl	800477c <osDelay>
 8001456:	e7fb      	b.n	8001450 <StartWeatherTask+0x14>
 8001458:	2000283c 	.word	0x2000283c

0800145c <StartFlowTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartFlowTask */
void StartFlowTask(void *argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b09a      	sub	sp, #104	; 0x68
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartFlowTask */
  	uint16_t o[3] = {1,1,1};
 8001464:	4aa8      	ldr	r2, [pc, #672]	; (8001708 <StartFlowTask+0x2ac>)
 8001466:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800146a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800146e:	6018      	str	r0, [r3, #0]
 8001470:	3304      	adds	r3, #4
 8001472:	8019      	strh	r1, [r3, #0]
  	uint16_t C[20];
  	uint16_t tickS, tickL, temp, f1, f2, f3, m;
  	uint16_t F = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  	uint16_t L = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  	uint16_t total = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	48a0      	ldr	r0, [pc, #640]	; (800170c <StartFlowTask+0x2b0>)
 800148a:	f001 fc55 	bl	8002d38 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	f040 80ab 	bne.w	80015ec <StartFlowTask+0x190>
 8001496:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001498:	2b01      	cmp	r3, #1
 800149a:	f040 80a7 	bne.w	80015ec <StartFlowTask+0x190>
	  {
		  m = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014a6:	e069      	b.n	800157c <StartFlowTask+0x120>
		  {
			  HAL_TIM_Base_Start(&htim1);
 80014a8:	4899      	ldr	r0, [pc, #612]	; (8001710 <StartFlowTask+0x2b4>)
 80014aa:	f002 f9e7 	bl	800387c <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 80014ae:	4b98      	ldr	r3, [pc, #608]	; (8001710 <StartFlowTask+0x2b4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 80014b8:	e04c      	b.n	8001554 <StartFlowTask+0xf8>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b7
 80014ba:	2104      	movs	r1, #4
 80014bc:	4895      	ldr	r0, [pc, #596]	; (8001714 <StartFlowTask+0x2b8>)
 80014be:	f001 fc3b 	bl	8002d38 <HAL_GPIO_ReadPin>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 80014c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d115      	bne.n	80014fc <StartFlowTask+0xa0>
 80014d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80014d8:	429a      	cmp	r2, r3
 80014da:	d00f      	beq.n	80014fc <StartFlowTask+0xa0>
				  {
					  C[j]++;
 80014dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80014e4:	4413      	add	r3, r2
 80014e6:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80014ea:	3301      	adds	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80014f6:	440b      	add	r3, r1
 80014f8:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 80014fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001500:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001504:	4b82      	ldr	r3, [pc, #520]	; (8001710 <StartFlowTask+0x2b4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 800150e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001512:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001516:	429a      	cmp	r2, r3
 8001518:	d20d      	bcs.n	8001536 <StartFlowTask+0xda>
					  total = total + temp + (65535 - tickL);
 800151a:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800151e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001522:	4413      	add	r3, r2
 8001524:	b29a      	uxth	r2, r3
 8001526:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	3b01      	subs	r3, #1
 8001530:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001534:	e00a      	b.n	800154c <StartFlowTask+0xf0>

				  else
					  total = total+ temp - tickL;
 8001536:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800153a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800153e:	4413      	add	r3, r2
 8001540:	b29a      	uxth	r2, r3
 8001542:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 800154c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001550:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 8001554:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001558:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	4a6e      	ldr	r2, [pc, #440]	; (8001718 <StartFlowTask+0x2bc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	ddaa      	ble.n	80014ba <StartFlowTask+0x5e>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8001564:	486a      	ldr	r0, [pc, #424]	; (8001710 <StartFlowTask+0x2b4>)
 8001566:	f002 f9d3 	bl	8003910 <HAL_TIM_Base_Stop>
			  total = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			  osDelay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f003 f903 	bl	800477c <osDelay>
		  for(int j =0; j < 20; j++)
 8001576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001578:	3301      	adds	r3, #1
 800157a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800157c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800157e:	2b13      	cmp	r3, #19
 8001580:	dd92      	ble.n	80014a8 <StartFlowTask+0x4c>
		  }
		  for(int j =0; j < 20; j++)
 8001582:	2300      	movs	r3, #0
 8001584:	65bb      	str	r3, [r7, #88]	; 0x58
 8001586:	e015      	b.n	80015b4 <StartFlowTask+0x158>
		  {
			  f1 = f1 + C[j];
 8001588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001590:	4413      	add	r3, r2
 8001592:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8001596:	8a7b      	ldrh	r3, [r7, #18]
 8001598:	4413      	add	r3, r2
 800159a:	b29b      	uxth	r3, r3
 800159c:	827b      	strh	r3, [r7, #18]
			  C[j] = 0;
 800159e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80015a6:	4413      	add	r3, r2
 80015a8:	2200      	movs	r2, #0
 80015aa:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 80015ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b0:	3301      	adds	r3, #1
 80015b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80015b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b6:	2b13      	cmp	r3, #19
 80015b8:	dde6      	ble.n	8001588 <StartFlowTask+0x12c>
		  }
		  f1 = f1 / 100;
 80015ba:	8a7b      	ldrh	r3, [r7, #18]
 80015bc:	4a57      	ldr	r2, [pc, #348]	; (800171c <StartFlowTask+0x2c0>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	827b      	strh	r3, [r7, #18]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 80015c8:	4b55      	ldr	r3, [pc, #340]	; (8001720 <StartFlowTask+0x2c4>)
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	f107 010c 	add.w	r1, r7, #12
 80015d0:	2300      	movs	r3, #0
 80015d2:	2201      	movs	r2, #1
 80015d4:	f003 f986 	bl	80048e4 <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f1, 1U, 0U);
 80015d8:	4b51      	ldr	r3, [pc, #324]	; (8001720 <StartFlowTask+0x2c4>)
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	f107 0112 	add.w	r1, r7, #18
 80015e0:	2300      	movs	r3, #0
 80015e2:	2201      	movs	r2, #1
 80015e4:	f003 f97e 	bl	80048e4 <osMessageQueuePut>
		  o[0] = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[0] == 0)
 80015ec:	2180      	movs	r1, #128	; 0x80
 80015ee:	4847      	ldr	r0, [pc, #284]	; (800170c <StartFlowTask+0x2b0>)
 80015f0:	f001 fba2 	bl	8002d38 <HAL_GPIO_ReadPin>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d104      	bne.n	8001604 <StartFlowTask+0x1a8>
 80015fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <StartFlowTask+0x1a8>
	  {
		  o[0] = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 1 && o[1] == 1)
 8001604:	2120      	movs	r1, #32
 8001606:	4841      	ldr	r0, [pc, #260]	; (800170c <StartFlowTask+0x2b0>)
 8001608:	f001 fb96 	bl	8002d38 <HAL_GPIO_ReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b01      	cmp	r3, #1
 8001610:	f040 80ba 	bne.w	8001788 <StartFlowTask+0x32c>
 8001614:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001616:	2b01      	cmp	r3, #1
 8001618:	f040 80b6 	bne.w	8001788 <StartFlowTask+0x32c>
	  {
		  m = 2;
 800161c:	2302      	movs	r3, #2
 800161e:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 8001620:	2300      	movs	r3, #0
 8001622:	657b      	str	r3, [r7, #84]	; 0x54
 8001624:	e069      	b.n	80016fa <StartFlowTask+0x29e>
		  {
			  HAL_TIM_Base_Start(&htim1);
 8001626:	483a      	ldr	r0, [pc, #232]	; (8001710 <StartFlowTask+0x2b4>)
 8001628:	f002 f928 	bl	800387c <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <StartFlowTask+0x2b4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 8001636:	e04c      	b.n	80016d2 <StartFlowTask+0x276>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);//b5
 8001638:	2102      	movs	r1, #2
 800163a:	4836      	ldr	r0, [pc, #216]	; (8001714 <StartFlowTask+0x2b8>)
 800163c:	f001 fb7c 	bl	8002d38 <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 8001646:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800164a:	2b01      	cmp	r3, #1
 800164c:	d115      	bne.n	800167a <StartFlowTask+0x21e>
 800164e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001652:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001656:	429a      	cmp	r2, r3
 8001658:	d00f      	beq.n	800167a <StartFlowTask+0x21e>
				  {
					  C[j]++;
 800165a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001662:	4413      	add	r3, r2
 8001664:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001668:	3301      	adds	r3, #1
 800166a:	b29a      	uxth	r2, r3
 800166c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001674:	440b      	add	r3, r1
 8001676:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 800167a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800167e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <StartFlowTask+0x2b4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001688:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 800168c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8001690:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001694:	429a      	cmp	r2, r3
 8001696:	d20d      	bcs.n	80016b4 <StartFlowTask+0x258>
					  total = total + temp + (65535 - tickL);
 8001698:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800169c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80016a0:	4413      	add	r3, r2
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80016b2:	e00a      	b.n	80016ca <StartFlowTask+0x26e>

				  else
					  total = total+ temp - tickL;
 80016b4:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80016b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80016bc:	4413      	add	r3, r2
 80016be:	b29a      	uxth	r2, r3
 80016c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 80016ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80016ce:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 80016d2:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80016d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a0e      	ldr	r2, [pc, #56]	; (8001718 <StartFlowTask+0x2bc>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	ddaa      	ble.n	8001638 <StartFlowTask+0x1dc>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 80016e2:	480b      	ldr	r0, [pc, #44]	; (8001710 <StartFlowTask+0x2b4>)
 80016e4:	f002 f914 	bl	8003910 <HAL_TIM_Base_Stop>
			  total = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			  osDelay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f003 f844 	bl	800477c <osDelay>
		  for(int j =0; j < 20; j++)
 80016f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f6:	3301      	adds	r3, #1
 80016f8:	657b      	str	r3, [r7, #84]	; 0x54
 80016fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fc:	2b13      	cmp	r3, #19
 80016fe:	dd92      	ble.n	8001626 <StartFlowTask+0x1ca>
		  }
		  for(int j =0; j < 20; j++)
 8001700:	2300      	movs	r3, #0
 8001702:	653b      	str	r3, [r7, #80]	; 0x50
 8001704:	e024      	b.n	8001750 <StartFlowTask+0x2f4>
 8001706:	bf00      	nop
 8001708:	0800749c 	.word	0x0800749c
 800170c:	40010c00 	.word	0x40010c00
 8001710:	200027ec 	.word	0x200027ec
 8001714:	40011000 	.word	0x40011000
 8001718:	0004fffa 	.word	0x0004fffa
 800171c:	51eb851f 	.word	0x51eb851f
 8001720:	2000255c 	.word	0x2000255c
		  {
			  f2 = f2 + C[j];
 8001724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800172c:	4413      	add	r3, r2
 800172e:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 8001732:	8a3b      	ldrh	r3, [r7, #16]
 8001734:	4413      	add	r3, r2
 8001736:	b29b      	uxth	r3, r3
 8001738:	823b      	strh	r3, [r7, #16]
			  C[j] = 0;
 800173a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001742:	4413      	add	r3, r2
 8001744:	2200      	movs	r2, #0
 8001746:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 800174a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800174c:	3301      	adds	r3, #1
 800174e:	653b      	str	r3, [r7, #80]	; 0x50
 8001750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001752:	2b13      	cmp	r3, #19
 8001754:	dde6      	ble.n	8001724 <StartFlowTask+0x2c8>
		  }
		  f2 = f2 / 100;
 8001756:	8a3b      	ldrh	r3, [r7, #16]
 8001758:	4a75      	ldr	r2, [pc, #468]	; (8001930 <StartFlowTask+0x4d4>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	095b      	lsrs	r3, r3, #5
 8001760:	b29b      	uxth	r3, r3
 8001762:	823b      	strh	r3, [r7, #16]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 8001764:	4b73      	ldr	r3, [pc, #460]	; (8001934 <StartFlowTask+0x4d8>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	f107 010c 	add.w	r1, r7, #12
 800176c:	2300      	movs	r3, #0
 800176e:	2201      	movs	r2, #1
 8001770:	f003 f8b8 	bl	80048e4 <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f2, 1U, 0U);
 8001774:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <StartFlowTask+0x4d8>)
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	f107 0110 	add.w	r1, r7, #16
 800177c:	2300      	movs	r3, #0
 800177e:	2201      	movs	r2, #1
 8001780:	f003 f8b0 	bl	80048e4 <osMessageQueuePut>
		  o[1] = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == 0 && o[1] == 0)
 8001788:	2120      	movs	r1, #32
 800178a:	486b      	ldr	r0, [pc, #428]	; (8001938 <StartFlowTask+0x4dc>)
 800178c:	f001 fad4 	bl	8002d38 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d104      	bne.n	80017a0 <StartFlowTask+0x344>
 8001796:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <StartFlowTask+0x344>
	  {
		  o[1] = 1;
 800179c:	2301      	movs	r3, #1
 800179e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  }


	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[2] == 1)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	4865      	ldr	r0, [pc, #404]	; (8001938 <StartFlowTask+0x4dc>)
 80017a4:	f001 fac8 	bl	8002d38 <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	f040 80ad 	bne.w	800190a <StartFlowTask+0x4ae>
 80017b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	f040 80a8 	bne.w	800190a <StartFlowTask+0x4ae>
	  {
		  m = 3;
 80017ba:	2303      	movs	r3, #3
 80017bc:	81bb      	strh	r3, [r7, #12]
		  for(int j =0; j < 20; j++)
 80017be:	2300      	movs	r3, #0
 80017c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017c2:	e069      	b.n	8001898 <StartFlowTask+0x43c>
		  {
			  HAL_TIM_Base_Start(&htim1);
 80017c4:	485d      	ldr	r0, [pc, #372]	; (800193c <StartFlowTask+0x4e0>)
 80017c6:	f002 f859 	bl	800387c <HAL_TIM_Base_Start>
			  tickS = __HAL_TIM_GET_COUNTER(&htim1);
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <StartFlowTask+0x4e0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
			  while((total-tickS)< 327675)
 80017d4:	e04c      	b.n	8001870 <StartFlowTask+0x414>
			  {
				  F = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);//b4
 80017d6:	2104      	movs	r1, #4
 80017d8:	4859      	ldr	r0, [pc, #356]	; (8001940 <StartFlowTask+0x4e4>)
 80017da:	f001 faad 	bl	8002d38 <HAL_GPIO_ReadPin>
 80017de:	4603      	mov	r3, r0
 80017e0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				  if(F == 1 && F!=L)
 80017e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d115      	bne.n	8001818 <StartFlowTask+0x3bc>
 80017ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80017f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d00f      	beq.n	8001818 <StartFlowTask+0x3bc>
				  {
					  C[j]++;
 80017f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001800:	4413      	add	r3, r2
 8001802:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 8001806:	3301      	adds	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001812:	440b      	add	r3, r1
 8001814:	f823 2c54 	strh.w	r2, [r3, #-84]
				  }
				  L=F;
 8001818:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800181c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				  temp = __HAL_TIM_GET_COUNTER(&htim1);
 8001820:	4b46      	ldr	r3, [pc, #280]	; (800193c <StartFlowTask+0x4e0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				  if (temp < tickL)
 800182a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800182e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001832:	429a      	cmp	r2, r3
 8001834:	d20d      	bcs.n	8001852 <StartFlowTask+0x3f6>
					  total = total + temp + (65535 - tickL);
 8001836:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 800183a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800183e:	4413      	add	r3, r2
 8001840:	b29a      	uxth	r2, r3
 8001842:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001850:	e00a      	b.n	8001868 <StartFlowTask+0x40c>

				  else
					  total = total+ temp - tickL;
 8001852:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800185a:	4413      	add	r3, r2
 800185c:	b29a      	uxth	r2, r3
 800185e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

				  tickL = temp;
 8001868:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800186c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			  while((total-tickS)< 327675)
 8001870:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8001874:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4a32      	ldr	r2, [pc, #200]	; (8001944 <StartFlowTask+0x4e8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	ddaa      	ble.n	80017d6 <StartFlowTask+0x37a>
			  }
			  HAL_TIM_Base_Stop(&htim1);
 8001880:	482e      	ldr	r0, [pc, #184]	; (800193c <StartFlowTask+0x4e0>)
 8001882:	f002 f845 	bl	8003910 <HAL_TIM_Base_Stop>
			  total = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
			  osDelay(1);
 800188c:	2001      	movs	r0, #1
 800188e:	f002 ff75 	bl	800477c <osDelay>
		  for(int j =0; j < 20; j++)
 8001892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001894:	3301      	adds	r3, #1
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189a:	2b13      	cmp	r3, #19
 800189c:	dd92      	ble.n	80017c4 <StartFlowTask+0x368>
		  }
		  for(int j =0; j < 20; j++)
 800189e:	2300      	movs	r3, #0
 80018a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80018a2:	e015      	b.n	80018d0 <StartFlowTask+0x474>
		  {
			  f1 = f1 + C[j];
 80018a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80018ac:	4413      	add	r3, r2
 80018ae:	f833 2c54 	ldrh.w	r2, [r3, #-84]
 80018b2:	8a7b      	ldrh	r3, [r7, #18]
 80018b4:	4413      	add	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	827b      	strh	r3, [r7, #18]
			  C[j] = 0;
 80018ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80018c2:	4413      	add	r3, r2
 80018c4:	2200      	movs	r2, #0
 80018c6:	f823 2c54 	strh.w	r2, [r3, #-84]
		  for(int j =0; j < 20; j++)
 80018ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018cc:	3301      	adds	r3, #1
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80018d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d2:	2b13      	cmp	r3, #19
 80018d4:	dde6      	ble.n	80018a4 <StartFlowTask+0x448>
		  }
		  f3 = f3 / 100;
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	4a15      	ldr	r2, [pc, #84]	; (8001930 <StartFlowTask+0x4d4>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	81fb      	strh	r3, [r7, #14]
		  osMessageQueuePut(FlowQueueHandle, &m, 1U, 0U);
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <StartFlowTask+0x4d8>)
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	f107 010c 	add.w	r1, r7, #12
 80018ec:	2300      	movs	r3, #0
 80018ee:	2201      	movs	r2, #1
 80018f0:	f002 fff8 	bl	80048e4 <osMessageQueuePut>
		  osMessageQueuePut(FlowQueueHandle, &f3, 1U, 0U);
 80018f4:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <StartFlowTask+0x4d8>)
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f107 010e 	add.w	r1, r7, #14
 80018fc:	2300      	movs	r3, #0
 80018fe:	2201      	movs	r2, #1
 8001900:	f002 fff0 	bl	80048e4 <osMessageQueuePut>
		  o[2] = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 0 && o[2] == 0)
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <StartFlowTask+0x4dc>)
 800190e:	f001 fa13 	bl	8002d38 <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d106      	bne.n	8001926 <StartFlowTask+0x4ca>
 8001918:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <StartFlowTask+0x4ca>
	  {
		  o[2] = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	  }

	  osDelay(1);
 8001926:	2001      	movs	r0, #1
 8001928:	f002 ff28 	bl	800477c <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == 1 && o[0] == 1)
 800192c:	e5ab      	b.n	8001486 <StartFlowTask+0x2a>
 800192e:	bf00      	nop
 8001930:	51eb851f 	.word	0x51eb851f
 8001934:	2000255c 	.word	0x2000255c
 8001938:	40010c00 	.word	0x40010c00
 800193c:	200027ec 	.word	0x200027ec
 8001940:	40011000 	.word	0x40011000
 8001944:	0004fffa 	.word	0x0004fffa

08001948 <StartProcessingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartProcessingTask */
void StartProcessingTask(void *argument)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProcessingTask */
	uint16_t userOverride[3], Weather[2], Web[2];
	uint16_t input;
	uint16_t C =0;
 8001950:	2300      	movs	r3, #0
 8001952:	83fb      	strh	r3, [r7, #30]
  /* Infinite loop */
  for(;;)
  {
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 8001954:	e00a      	b.n	800196c <StartProcessingTask+0x24>
	  {//when receiving data put it in this array
		  userOverride[C] = input;
 8001956:	8bfb      	ldrh	r3, [r7, #30]
 8001958:	89fa      	ldrh	r2, [r7, #14]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	f107 0120 	add.w	r1, r7, #32
 8001960:	440b      	add	r3, r1
 8001962:	f823 2c08 	strh.w	r2, [r3, #-8]
		  C++;
 8001966:	8bfb      	ldrh	r3, [r7, #30]
 8001968:	3301      	adds	r3, #1
 800196a:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <StartProcessingTask+0x110>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	f107 010e 	add.w	r1, r7, #14
 8001974:	2300      	movs	r3, #0
 8001976:	2200      	movs	r2, #0
 8001978:	f003 f828 	bl	80049cc <osMessageQueueGet>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0e9      	beq.n	8001956 <StartProcessingTask+0xe>
	  }
	  C = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(WeatherQueueHandle, &input, NULL, 0U ) == osOK)
 8001986:	e00a      	b.n	800199e <StartProcessingTask+0x56>
	  {//when receiving data put it in this array
		  Weather[C] = input;
 8001988:	8bfb      	ldrh	r3, [r7, #30]
 800198a:	89fa      	ldrh	r2, [r7, #14]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	f107 0120 	add.w	r1, r7, #32
 8001992:	440b      	add	r3, r1
 8001994:	f823 2c0c 	strh.w	r2, [r3, #-12]
		  C++;
 8001998:	8bfb      	ldrh	r3, [r7, #30]
 800199a:	3301      	adds	r3, #1
 800199c:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(WeatherQueueHandle, &input, NULL, 0U ) == osOK)
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <StartProcessingTask+0x114>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f107 010e 	add.w	r1, r7, #14
 80019a6:	2300      	movs	r3, #0
 80019a8:	2200      	movs	r2, #0
 80019aa:	f003 f80f 	bl	80049cc <osMessageQueueGet>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0e9      	beq.n	8001988 <StartProcessingTask+0x40>
	  }
	  C = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(WebsiteQueueHandle, &input, NULL, 0U ) == osOK)
 80019b8:	e00a      	b.n	80019d0 <StartProcessingTask+0x88>
	  {//when receiving data put it in this array
		  Web[C] = input;
 80019ba:	8bfb      	ldrh	r3, [r7, #30]
 80019bc:	89fa      	ldrh	r2, [r7, #14]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	f107 0120 	add.w	r1, r7, #32
 80019c4:	440b      	add	r3, r1
 80019c6:	f823 2c10 	strh.w	r2, [r3, #-16]
		  C++;
 80019ca:	8bfb      	ldrh	r3, [r7, #30]
 80019cc:	3301      	adds	r3, #1
 80019ce:	83fb      	strh	r3, [r7, #30]
	  while(osMessageQueueGet(WebsiteQueueHandle, &input, NULL, 0U ) == osOK)
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <StartProcessingTask+0x118>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f107 010e 	add.w	r1, r7, #14
 80019d8:	2300      	movs	r3, #0
 80019da:	2200      	movs	r2, #0
 80019dc:	f002 fff6 	bl	80049cc <osMessageQueueGet>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0e9      	beq.n	80019ba <StartProcessingTask+0x72>
	  }
	  C = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	83fb      	strh	r3, [r7, #30]
	  if(userOverride[0] == 1)
 80019ea:	8b3b      	ldrh	r3, [r7, #24]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d111      	bne.n	8001a14 <StartProcessingTask+0xcc>
	  {
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[1], 1U, 0U);
 80019f0:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <StartProcessingTask+0x11c>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	f107 0318 	add.w	r3, r7, #24
 80019f8:	1c99      	adds	r1, r3, #2
 80019fa:	2300      	movs	r3, #0
 80019fc:	2201      	movs	r2, #1
 80019fe:	f002 ff71 	bl	80048e4 <osMessageQueuePut>
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[2], 1U, 0U);
 8001a02:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <StartProcessingTask+0x11c>)
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	f107 0318 	add.w	r3, r7, #24
 8001a0a:	1d19      	adds	r1, r3, #4
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f002 ff68 	bl	80048e4 <osMessageQueuePut>
	  }
	  if(userOverride[0] == 2)
 8001a14:	8b3b      	ldrh	r3, [r7, #24]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d11a      	bne.n	8001a50 <StartProcessingTask+0x108>
	  {
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[1], 1U, 0U);
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <StartProcessingTask+0x11c>)
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	1c99      	adds	r1, r3, #2
 8001a24:	2300      	movs	r3, #0
 8001a26:	2201      	movs	r2, #1
 8001a28:	f002 ff5c 	bl	80048e4 <osMessageQueuePut>
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[2], 1U, 0U);
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <StartProcessingTask+0x11c>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	1d19      	adds	r1, r3, #4
 8001a36:	2300      	movs	r3, #0
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f002 ff53 	bl	80048e4 <osMessageQueuePut>
		  osMessageQueuePut(ProcessQueueHandle, &userOverride[3], 1U, 0U);
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <StartProcessingTask+0x11c>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f107 0318 	add.w	r3, r7, #24
 8001a46:	1d99      	adds	r1, r3, #6
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f002 ff4a 	bl	80048e4 <osMessageQueuePut>
	  }
    osDelay(1);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f002 fe93 	bl	800477c <osDelay>
	  while(osMessageQueueGet(UserQueueHandle, &input, NULL, 0U ) == osOK)
 8001a56:	e789      	b.n	800196c <StartProcessingTask+0x24>
 8001a58:	20002564 	.word	0x20002564
 8001a5c:	20002838 	.word	0x20002838
 8001a60:	200027e4 	.word	0x200027e4
 8001a64:	200027ac 	.word	0x200027ac

08001a68 <StartWebsiteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWebsiteTask */
void StartWebsiteTask(void *argument)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b090      	sub	sp, #64	; 0x40
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
//	  }
//	  if(HAL_UART_Receive(&huart1, BufferRX, 5, 10) == HAL_OK)
//  	  {
//  		osMessageQueuePut(WebsiteQueueHandle, &BufferRX, 1U, 0U);
//  	  }
    osDelay(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f002 fe83 	bl	800477c <osDelay>
 8001a76:	e7fb      	b.n	8001a70 <StartWebsiteTask+0x8>

08001a78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a8a:	f000 fccb 	bl	8002424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40000800 	.word	0x40000800

08001a9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa0:	b672      	cpsid	i
}
 8001aa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <Error_Handler+0x8>
	...

08001aa8 <initializeNodes>:
 */

#include "sensorObjects.h"

void initializeNodes()
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
	//Address Arrays
	uint8_t BlueAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xD1};
 8001aae:	4a34      	ldr	r2, [pc, #208]	; (8001b80 <initializeNodes+0xd8>)
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ab8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t GreenAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0B, 0xDD};
 8001abc:	4a31      	ldr	r2, [pc, #196]	; (8001b84 <initializeNodes+0xdc>)
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ac6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t RedAddress[] 	= {0x00, 0x13, 0xA2, 0x00, 0x41, 0xCF, 0x0C, 0xA6};
 8001aca:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <initializeNodes+0xe0>)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad2:	e883 0003 	stmia.w	r3, {r0, r1}

	uint8_t i = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	77fb      	strb	r3, [r7, #31]
	for (i = 0; i<32; i++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	77fb      	strb	r3, [r7, #31]
 8001ade:	e01e      	b.n	8001b1e <initializeNodes+0x76>
	{
		fairways[i].battery 	= 0;
 8001ae0:	7ffb      	ldrb	r3, [r7, #31]
 8001ae2:	4a2a      	ldr	r2, [pc, #168]	; (8001b8c <initializeNodes+0xe4>)
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	330c      	adds	r3, #12
 8001aea:	2200      	movs	r2, #0
 8001aec:	801a      	strh	r2, [r3, #0]
		fairways[i].capacative	= 0;
 8001aee:	7ffb      	ldrb	r3, [r7, #31]
 8001af0:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <initializeNodes+0xe4>)
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	4413      	add	r3, r2
 8001af6:	330a      	adds	r3, #10
 8001af8:	2200      	movs	r2, #0
 8001afa:	801a      	strh	r2, [r3, #0]
		fairways[i].resistive 	= 0;
 8001afc:	7ffb      	ldrb	r3, [r7, #31]
 8001afe:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <initializeNodes+0xe4>)
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	3308      	adds	r3, #8
 8001b06:	2200      	movs	r2, #0
 8001b08:	801a      	strh	r2, [r3, #0]
		fairways[i].temperature	= 0;
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
 8001b0c:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <initializeNodes+0xe4>)
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	4413      	add	r3, r2
 8001b12:	330e      	adds	r3, #14
 8001b14:	2200      	movs	r2, #0
 8001b16:	801a      	strh	r2, [r3, #0]
	for (i = 0; i<32; i++)
 8001b18:	7ffb      	ldrb	r3, [r7, #31]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	77fb      	strb	r3, [r7, #31]
 8001b1e:	7ffb      	ldrb	r3, [r7, #31]
 8001b20:	2b1f      	cmp	r3, #31
 8001b22:	d9dd      	bls.n	8001ae0 <initializeNodes+0x38>
	}

	for (i= 0; i<8; i++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	77fb      	strb	r3, [r7, #31]
 8001b28:	e022      	b.n	8001b70 <initializeNodes+0xc8>
	{
		fairways[0].address[i] = BlueAddress[i];
 8001b2a:	7ffa      	ldrb	r2, [r7, #31]
 8001b2c:	7ffb      	ldrb	r3, [r7, #31]
 8001b2e:	f107 0120 	add.w	r1, r7, #32
 8001b32:	440a      	add	r2, r1
 8001b34:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <initializeNodes+0xe4>)
 8001b3a:	54d1      	strb	r1, [r2, r3]
		fairways[1].address[i] = GreenAddress[i];
 8001b3c:	7ffa      	ldrb	r2, [r7, #31]
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	f107 0120 	add.w	r1, r7, #32
 8001b44:	440a      	add	r2, r1
 8001b46:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001b4a:	4a10      	ldr	r2, [pc, #64]	; (8001b8c <initializeNodes+0xe4>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	460a      	mov	r2, r1
 8001b50:	741a      	strb	r2, [r3, #16]
		fairways[2].address[i] = RedAddress[i];
 8001b52:	7ffa      	ldrb	r2, [r7, #31]
 8001b54:	7ffb      	ldrb	r3, [r7, #31]
 8001b56:	f107 0120 	add.w	r1, r7, #32
 8001b5a:	440a      	add	r2, r1
 8001b5c:	f812 1c1c 	ldrb.w	r1, [r2, #-28]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <initializeNodes+0xe4>)
 8001b62:	4413      	add	r3, r2
 8001b64:	460a      	mov	r2, r1
 8001b66:	f883 2020 	strb.w	r2, [r3, #32]
	for (i= 0; i<8; i++)
 8001b6a:	7ffb      	ldrb	r3, [r7, #31]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	77fb      	strb	r3, [r7, #31]
 8001b70:	7ffb      	ldrb	r3, [r7, #31]
 8001b72:	2b07      	cmp	r3, #7
 8001b74:	d9d9      	bls.n	8001b2a <initializeNodes+0x82>
	}

	return;
 8001b76:	bf00      	nop
}
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	080074a4 	.word	0x080074a4
 8001b84:	080074ac 	.word	0x080074ac
 8001b88:	080074b4 	.word	0x080074b4
 8001b8c:	20002568 	.word	0x20002568

08001b90 <processATResponse>:

//Process Data
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void processATResponse(uint8_t *ATResponse)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	int nodeNum = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e076      	b.n	8001c90 <processATResponse+0x100>
		{
			int match = 1;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	613b      	str	r3, [r7, #16]
			//Compare the address in the API Frame to the address of our known nodes.
			//the address bytes in the API frame are 5-12
			//if we find a different byte, we know its the wrong address and do not have a match
			for (int j = 0; j<8; j++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	e013      	b.n	8001bd4 <processATResponse+0x44>
			{
				if (ATResponse[j+5] != (fairways[nodeNum]).address[j])
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3305      	adds	r3, #5
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	493a      	ldr	r1, [pc, #232]	; (8001ca0 <processATResponse+0x110>)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	4419      	add	r1, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d002      	beq.n	8001bce <processATResponse+0x3e>
				{
					match = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
					break; //exit the loop, its not this node
 8001bcc:	e005      	b.n	8001bda <processATResponse+0x4a>
			for (int j = 0; j<8; j++)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2b07      	cmp	r3, #7
 8001bd8:	dde8      	ble.n	8001bac <processATResponse+0x1c>
				}
			}

			if (match == 1)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d154      	bne.n	8001c8a <processATResponse+0xfa>
			{
				//get which data type it is
				//no longer need the first "IF" because the temp is now coming from an ADC
				//we will keep in so we could add ambient field temp in the future.
				if (ATResponse[15] == 0x54 && ATResponse[16] == 0x50) //if the AT command was "TP"
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	330f      	adds	r3, #15
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b54      	cmp	r3, #84	; 0x54
 8001be8:	d123      	bne.n	8001c32 <processATResponse+0xa2>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3310      	adds	r3, #16
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b50      	cmp	r3, #80	; 0x50
 8001bf2:	d11e      	bne.n	8001c32 <processATResponse+0xa2>
				{
					fairways[nodeNum].temperature = ATResponse[18] *256 + ATResponse[19]; //store temp data then request battery data
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3312      	adds	r3, #18
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3313      	adds	r3, #19
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	b299      	uxth	r1, r3
 8001c0c:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <processATResponse+0x110>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	330e      	adds	r3, #14
 8001c16:	460a      	mov	r2, r1
 8001c18:	801a      	strh	r2, [r3, #0]
					HAL_UART_Receive(&huart3, uartBufferRX, 21, 10);
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	2215      	movs	r2, #21
 8001c1e:	4921      	ldr	r1, [pc, #132]	; (8001ca4 <processATResponse+0x114>)
 8001c20:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <processATResponse+0x118>)
 8001c22:	f002 fb24 	bl	800426e <HAL_UART_Receive>
					sendBattRequest(nodeNum);
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f8ca 	bl	8001dc4 <sendBattRequest>
 8001c30:	e029      	b.n	8001c86 <processATResponse+0xf6>
				}
				else if (ATResponse[15] == 0x25 && ATResponse[16] == 0x56) //if the AT command was "%V"
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	330f      	adds	r3, #15
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b25      	cmp	r3, #37	; 0x25
 8001c3a:	d11e      	bne.n	8001c7a <processATResponse+0xea>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3310      	adds	r3, #16
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b56      	cmp	r3, #86	; 0x56
 8001c44:	d119      	bne.n	8001c7a <processATResponse+0xea>
				{
					fairways[nodeNum].battery = ATResponse[18]*256 + ATResponse[19];
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3312      	adds	r3, #18
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3313      	adds	r3, #19
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b299      	uxth	r1, r3
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <processATResponse+0x110>)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	4413      	add	r3, r2
 8001c66:	330c      	adds	r3, #12
 8001c68:	460a      	mov	r2, r1
 8001c6a:	801a      	strh	r2, [r3, #0]
					HAL_UART_Receive(&huart3, uartBufferRX, 26, 10);//Listen for IO data becasue we should have both requests received
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	221a      	movs	r2, #26
 8001c70:	490c      	ldr	r1, [pc, #48]	; (8001ca4 <processATResponse+0x114>)
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <processATResponse+0x118>)
 8001c74:	f002 fafb 	bl	800426e <HAL_UART_Receive>
 8001c78:	e005      	b.n	8001c86 <processATResponse+0xf6>
				}
				else
				{	//if we got an unexpected AT Command Type, give up and try again next time data is transmitted
					HAL_UART_Receive(&huart3, uartBufferRX, 26, 10);
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	221a      	movs	r2, #26
 8001c7e:	4909      	ldr	r1, [pc, #36]	; (8001ca4 <processATResponse+0x114>)
 8001c80:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <processATResponse+0x118>)
 8001c82:	f002 faf4 	bl	800426e <HAL_UART_Receive>
				}

				nodeNum = 255; //break the loop. Break would work too but this explicitly breaks the correct loop if i move things.
 8001c86:	23ff      	movs	r3, #255	; 0xff
 8001c88:	617b      	str	r3, [r7, #20]
	for (nodeNum = 0; nodeNum<36; nodeNum++) //to cycle through the 36 available nodes.
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b23      	cmp	r3, #35	; 0x23
 8001c94:	dd85      	ble.n	8001ba2 <processATResponse+0x12>
			}
		}

  return;
 8001c96:	bf00      	nop
}
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20002568 	.word	0x20002568
 8001ca4:	20002524 	.word	0x20002524
 8001ca8:	200024a4 	.word	0x200024a4

08001cac <processIO>:

void processIO(uint8_t *ioData)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	uint16_t sensorResistive 	= 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	81fb      	strh	r3, [r7, #14]
	uint16_t sensorCapacative 	= 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	81bb      	strh	r3, [r7, #12]
	uint16_t sensorTemperature 	= 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	817b      	strh	r3, [r7, #10]
	uint8_t	 match = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75fb      	strb	r3, [r7, #23]

	if(!verifyChecksum(ioData))
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8f7 	bl	8001eb8 <verifyChecksum>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d06e      	beq.n	8001dae <processIO+0x102>
	{
		return;//include an error report here if time permits
	}
	else
	{
		sensorTemperature = calcTemp(ioData[19], ioData[20]);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3313      	adds	r3, #19
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3314      	adds	r3, #20
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f000 f94c 	bl	8001f7c <calcTemp>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	817b      	strh	r3, [r7, #10]
		//sensorTemperature 	= ioData[19]*256 + ioData[20];//ADC0
		sensorResistive = calcPercent(ioData[21], ioData[22]);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3315      	adds	r3, #21
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3316      	adds	r3, #22
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f000 f97c 	bl	8001ff4 <calcPercent>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
		//sensorResistive		= ioData[21]*256 + ioData[22];//ADC1
		sensorCapacative = calcPercent(ioData[23], ioData[24]);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3317      	adds	r3, #23
 8001d04:	781a      	ldrb	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3318      	adds	r3, #24
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f000 f970 	bl	8001ff4 <calcPercent>
 8001d14:	4603      	mov	r3, r0
 8001d16:	81bb      	strh	r3, [r7, #12]

	//Determine which sensor it belongs to
	//get the address, if it exists, put the data into it
	//if the addres doesnt already exist then make a new object to put data into
	//for now we will just use the three that we have
	uint8_t nodeNumber = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	75bb      	strb	r3, [r7, #22]
	for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	75bb      	strb	r3, [r7, #22]
 8001d20:	e037      	b.n	8001d92 <processIO+0xe6>
	{
		match = 1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
		//Compare the address in the API Frame to the address of our known nodes.
		//the address bytes in the API frame are 5-12
		//if we find a different byte, we know its the wrong address and do not have a match
		for (int j = 0; j<8; j++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	e013      	b.n	8001d54 <processIO+0xa8>
		{
			if (ioData[j+4] != (fairways[nodeNumber]).address[j])
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	3304      	adds	r3, #4
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	7dbb      	ldrb	r3, [r7, #22]
 8001d38:	491f      	ldr	r1, [pc, #124]	; (8001db8 <processIO+0x10c>)
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	4419      	add	r1, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	440b      	add	r3, r1
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d002      	beq.n	8001d4e <processIO+0xa2>
			{
				match = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	75fb      	strb	r3, [r7, #23]
				break;//it is not this nodeNumer (j value)
 8001d4c:	e005      	b.n	8001d5a <processIO+0xae>
		for (int j = 0; j<8; j++)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	3301      	adds	r3, #1
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	dde8      	ble.n	8001d2c <processIO+0x80>
			}
		}

		if (match == 1)
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d115      	bne.n	8001d8c <processIO+0xe0>
		{
			fairways[nodeNumber].resistive		= sensorResistive;
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	4a15      	ldr	r2, [pc, #84]	; (8001db8 <processIO+0x10c>)
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	3308      	adds	r3, #8
 8001d6a:	89fa      	ldrh	r2, [r7, #14]
 8001d6c:	801a      	strh	r2, [r3, #0]
			fairways[nodeNumber].capacative		= sensorCapacative;
 8001d6e:	7dbb      	ldrb	r3, [r7, #22]
 8001d70:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <processIO+0x10c>)
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	4413      	add	r3, r2
 8001d76:	330a      	adds	r3, #10
 8001d78:	89ba      	ldrh	r2, [r7, #12]
 8001d7a:	801a      	strh	r2, [r3, #0]
			fairways[nodeNumber].temperature	= sensorTemperature;
 8001d7c:	7dbb      	ldrb	r3, [r7, #22]
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <processIO+0x10c>)
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	4413      	add	r3, r2
 8001d84:	330e      	adds	r3, #14
 8001d86:	897a      	ldrh	r2, [r7, #10]
 8001d88:	801a      	strh	r2, [r3, #0]

			break;
 8001d8a:	e005      	b.n	8001d98 <processIO+0xec>
	for (nodeNumber = 0; nodeNumber<36; nodeNumber++) //to cycle through the 36 available nodes.
 8001d8c:	7dbb      	ldrb	r3, [r7, #22]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	75bb      	strb	r3, [r7, #22]
 8001d92:	7dbb      	ldrb	r3, [r7, #22]
 8001d94:	2b23      	cmp	r3, #35	; 0x23
 8001d96:	d9c4      	bls.n	8001d22 <processIO+0x76>
			//i = 37; //break the loop. Break would work too but this explicitly breaks the correct loop if i move things.
		}
	}
	//__HAL_UART_CLEAR_FLAG(&huart3, UART_FLAG_TC);

	HAL_UART_Receive(&huart3, uartBufferRX, 21, 10);
 8001d98:	230a      	movs	r3, #10
 8001d9a:	2215      	movs	r2, #21
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <processIO+0x110>)
 8001d9e:	4808      	ldr	r0, [pc, #32]	; (8001dc0 <processIO+0x114>)
 8001da0:	f002 fa65 	bl	800426e <HAL_UART_Receive>
	sendBattRequest(nodeNumber);
 8001da4:	7dbb      	ldrb	r3, [r7, #22]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f80c 	bl	8001dc4 <sendBattRequest>

  return;
 8001dac:	e000      	b.n	8001db0 <processIO+0x104>
		return;//include an error report here if time permits
 8001dae:	bf00      	nop
}
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20002568 	.word	0x20002568
 8001dbc:	20002524 	.word	0x20002524
 8001dc0:	200024a4 	.word	0x200024a4

08001dc4 <sendBattRequest>:

//Send Data Requests
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void sendBattRequest(uint8_t nodeNumber)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
	uartBufferTX[0] = 0x7E; //startDelim
 8001dce:	4b37      	ldr	r3, [pc, #220]	; (8001eac <sendBattRequest+0xe8>)
 8001dd0:	227e      	movs	r2, #126	; 0x7e
 8001dd2:	701a      	strb	r2, [r3, #0]
	uartBufferTX[1] = 0x00; //length byte 1
 8001dd4:	4b35      	ldr	r3, [pc, #212]	; (8001eac <sendBattRequest+0xe8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	705a      	strb	r2, [r3, #1]
	uartBufferTX[2] = 0x0F; //length byte 2
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <sendBattRequest+0xe8>)
 8001ddc:	220f      	movs	r2, #15
 8001dde:	709a      	strb	r2, [r3, #2]
	uartBufferTX[3] = 0x17; //Frame Type
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <sendBattRequest+0xe8>)
 8001de2:	2217      	movs	r2, #23
 8001de4:	70da      	strb	r2, [r3, #3]
	uartBufferTX[4] = 0x01; //Frame ID
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <sendBattRequest+0xe8>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	711a      	strb	r2, [r3, #4]
	uartBufferTX[5] = 	fairways[nodeNumber].address[0]; //start of 64bit address
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4a30      	ldr	r2, [pc, #192]	; (8001eb0 <sendBattRequest+0xec>)
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4413      	add	r3, r2
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	4b2d      	ldr	r3, [pc, #180]	; (8001eac <sendBattRequest+0xe8>)
 8001df8:	715a      	strb	r2, [r3, #5]
	uartBufferTX[6] = 	fairways[nodeNumber].address[1];
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <sendBattRequest+0xec>)
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	4413      	add	r3, r2
 8001e02:	3301      	adds	r3, #1
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	4b29      	ldr	r3, [pc, #164]	; (8001eac <sendBattRequest+0xe8>)
 8001e08:	719a      	strb	r2, [r3, #6]
	uartBufferTX[7] = 	fairways[nodeNumber].address[2];
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	4a28      	ldr	r2, [pc, #160]	; (8001eb0 <sendBattRequest+0xec>)
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	3302      	adds	r3, #2
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <sendBattRequest+0xe8>)
 8001e18:	71da      	strb	r2, [r3, #7]
	uartBufferTX[8] = 	fairways[nodeNumber].address[3];
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	4a24      	ldr	r2, [pc, #144]	; (8001eb0 <sendBattRequest+0xec>)
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	3303      	adds	r3, #3
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b21      	ldr	r3, [pc, #132]	; (8001eac <sendBattRequest+0xe8>)
 8001e28:	721a      	strb	r2, [r3, #8]
	uartBufferTX[9] = 	fairways[nodeNumber].address[4];
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	; (8001eb0 <sendBattRequest+0xec>)
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	4413      	add	r3, r2
 8001e32:	3304      	adds	r3, #4
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <sendBattRequest+0xe8>)
 8001e38:	725a      	strb	r2, [r3, #9]
	uartBufferTX[10] =	fairways[nodeNumber].address[5];
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <sendBattRequest+0xec>)
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	3305      	adds	r3, #5
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <sendBattRequest+0xe8>)
 8001e48:	729a      	strb	r2, [r3, #10]
	uartBufferTX[11] = 	fairways[nodeNumber].address[6];
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <sendBattRequest+0xec>)
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	3306      	adds	r3, #6
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <sendBattRequest+0xe8>)
 8001e58:	72da      	strb	r2, [r3, #11]
	uartBufferTX[12] = 	fairways[nodeNumber].address[7]; //last of 64bit address
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <sendBattRequest+0xec>)
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	4413      	add	r3, r2
 8001e62:	3307      	adds	r3, #7
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <sendBattRequest+0xe8>)
 8001e68:	731a      	strb	r2, [r3, #12]
	uartBufferTX[13] = 0xFF;//Start of 16 bit address
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <sendBattRequest+0xe8>)
 8001e6c:	22ff      	movs	r2, #255	; 0xff
 8001e6e:	735a      	strb	r2, [r3, #13]
	uartBufferTX[14] = 0xFE;//End of 16 bit address
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <sendBattRequest+0xe8>)
 8001e72:	22fe      	movs	r2, #254	; 0xfe
 8001e74:	739a      	strb	r2, [r3, #14]
	uartBufferTX[15] = 0x02;//Command Options - 0x02 means apply
 8001e76:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <sendBattRequest+0xe8>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	73da      	strb	r2, [r3, #15]
	uartBufferTX[16] = 0x25;//AT Command Byte 1 - 0x25 is '%'
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <sendBattRequest+0xe8>)
 8001e7e:	2225      	movs	r2, #37	; 0x25
 8001e80:	741a      	strb	r2, [r3, #16]
	uartBufferTX[17] = 0x56;//AT Command Byte 2 - 0x56 is 'V'
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <sendBattRequest+0xe8>)
 8001e84:	2256      	movs	r2, #86	; 0x56
 8001e86:	745a      	strb	r2, [r3, #17]
	uartBufferTX[18] = generateChecksum(uartBufferTX);//Checksum (as calculated by XCTU)
 8001e88:	4808      	ldr	r0, [pc, #32]	; (8001eac <sendBattRequest+0xe8>)
 8001e8a:	f000 f846 	bl	8001f1a <generateChecksum>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <sendBattRequest+0xe8>)
 8001e94:	749a      	strb	r2, [r3, #18]

	 HAL_UART_Transmit(&huart3, uartBufferTX, 19, 1000);
 8001e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9a:	2213      	movs	r2, #19
 8001e9c:	4903      	ldr	r1, [pc, #12]	; (8001eac <sendBattRequest+0xe8>)
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <sendBattRequest+0xf0>)
 8001ea0:	f002 f953 	bl	800414a <HAL_UART_Transmit>
	return;
 8001ea4:	bf00      	nop
}
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000288c 	.word	0x2000288c
 8001eb0:	20002568 	.word	0x20002568
 8001eb4:	200024a4 	.word	0x200024a4

08001eb8 <verifyChecksum>:
	HAL_UART_Transmit(&huart3, uartBufferTX, 11, 1000);
}
//Checksum Functions
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint8_t verifyChecksum(uint8_t *ioData)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b087      	sub	sp, #28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	uint16_t lengthOfData = ioData[1] * 256 + ioData[2]; //this value should always be 17
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3302      	adds	r3, #2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	81fb      	strh	r3, [r7, #14]
	uint16_t checkSumCompare = 0; //calculate the check sum and see if it matches the value recieved
 8001ed8:	2300      	movs	r3, #0
 8001eda:	82fb      	strh	r3, [r7, #22]
	/* to verify the checksum:
	 * Add all bytes including the checksum; do not include the delimiter and length.
	 * If the checksum is correct, the last two digits on the far right of the sum equal 0xFF.
	 */

	for (int i = 0; i<=lengthOfData; i++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	e00b      	b.n	8001efa <verifyChecksum+0x42>
	{	//i<=lengthOfData includes checksum value, as opposed to i<lengthOfData which does not
		checkSumCompare += ioData[i+3]; //i+3 becasue we skip the delim and length values
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	3303      	adds	r3, #3
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	8afb      	ldrh	r3, [r7, #22]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i<=lengthOfData; i++)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	ddef      	ble.n	8001ee2 <verifyChecksum+0x2a>
	}

	if ((checkSumCompare & 0xFF) == 0xFF) //clears all bits except lowest 8 then compares
 8001f02:	8afb      	ldrh	r3, [r7, #22]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d101      	bne.n	8001f0e <verifyChecksum+0x56>
	{
		return 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <verifyChecksum+0x58>
	}
	else
	{
		return 0;
 8001f0e:	2300      	movs	r3, #0
	}
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <generateChecksum>:

uint8_t generateChecksum(uint8_t *frame)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	 * Add all bytes of the packet, except the start delimiter 0x7E and the length (the second and third bytes).
	 * Keep only the lowest 8 bits from the result.
   	 * Subtract this quantity from 0xFF.
   	 */

	uint16_t length = frame[1]*256 + frame[2];
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3301      	adds	r3, #1
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3302      	adds	r3, #2
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	817b      	strh	r3, [r7, #10]
	uint8_t i = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	73fb      	strb	r3, [r7, #15]
	uint16_t sum= 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	81bb      	strh	r3, [r7, #12]

	for (i=0; i<length; i++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	e00b      	b.n	8001f60 <generateChecksum+0x46>
	{
		sum += frame[i+3];
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	3303      	adds	r3, #3
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	89bb      	ldrh	r3, [r7, #12]
 8001f56:	4413      	add	r3, r2
 8001f58:	81bb      	strh	r3, [r7, #12]
	for (i=0; i<length; i++)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	897a      	ldrh	r2, [r7, #10]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d8ee      	bhi.n	8001f48 <generateChecksum+0x2e>
		//sum = sum & 0xFF;//we only need the last two bits in the end
		//this clears off the high numbers that we dont need so we can use
		//a smaller data type
	}

	return (0xFF - sum);
 8001f6a:	89bb      	ldrh	r3, [r7, #12]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <calcTemp>:

//Calculations
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t calcTemp(uint8_t ADC0_19, uint8_t ADC0_20)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	460a      	mov	r2, r1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	71bb      	strb	r3, [r7, #6]
	uint16_t ADC = ADC0_19*256 + ADC0_20; //wrt real ground, range of 0 (0V) to 1023 (2.5V)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	82fb      	strh	r3, [r7, #22]
	uint16_t virtualGround = 401;//virtual ground is 981mV: (981/2500)*1023 = 401
 8001f9c:	f240 1391 	movw	r3, #401	; 0x191
 8001fa0:	82bb      	strh	r3, [r7, #20]
	ADC = ADC - virtualGround;//wrt to virtual ground now
 8001fa2:	8afa      	ldrh	r2, [r7, #22]
 8001fa4:	8abb      	ldrh	r3, [r7, #20]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	82fb      	strh	r3, [r7, #22]
	float voltage = ADC * 2.5; //convert the ADC value to a real voltage
 8001faa:	8afb      	ldrh	r3, [r7, #22]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fb4b 	bl	8000648 <__aeabi_i2d>
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <calcTemp+0x70>)
 8001fb8:	f7fe f8ca 	bl	8000150 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f7fe fbaa 	bl	800071c <__aeabi_d2f>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]
	voltage = voltage*100; // same as dividing by 0.01 mV/degree
 8001fcc:	4908      	ldr	r1, [pc, #32]	; (8001ff0 <calcTemp+0x74>)
 8001fce:	6938      	ldr	r0, [r7, #16]
 8001fd0:	f7fe fd02 	bl	80009d8 <__aeabi_fmul>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]
	uint16_t temperature = (uint16_t)voltage;//cast into uint16_t
 8001fd8:	6938      	ldr	r0, [r7, #16]
 8001fda:	f7fe fe4d 	bl	8000c78 <__aeabi_f2uiz>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	81fb      	strh	r3, [r7, #14]

	return temperature;
 8001fe2:	89fb      	ldrh	r3, [r7, #14]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40040000 	.word	0x40040000
 8001ff0:	42c80000 	.word	0x42c80000

08001ff4 <calcPercent>:

uint16_t calcPercent(uint8_t ADC_A, uint8_t ADC_B)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	71fb      	strb	r3, [r7, #7]
 8002000:	4613      	mov	r3, r2
 8002002:	71bb      	strb	r3, [r7, #6]
	float ADC = ADC_A*256 + ADC_B; //wrt real ground, range of 0 (0V) to 1023 (2.5V)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	021a      	lsls	r2, r3, #8
 8002008:	79bb      	ldrb	r3, [r7, #6]
 800200a:	4413      	add	r3, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fc8f 	bl	8000930 <__aeabi_i2f>
 8002012:	4603      	mov	r3, r0
 8002014:	60fb      	str	r3, [r7, #12]
	ADC = (ADC/1023)*100; //divide by the full range, multiply by 100 to get the percent
 8002016:	490a      	ldr	r1, [pc, #40]	; (8002040 <calcPercent+0x4c>)
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7fe fd91 	bl	8000b40 <__aeabi_fdiv>
 800201e:	4603      	mov	r3, r0
 8002020:	4908      	ldr	r1, [pc, #32]	; (8002044 <calcPercent+0x50>)
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fcd8 	bl	80009d8 <__aeabi_fmul>
 8002028:	4603      	mov	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]
	return (uint16_t)ADC;//cast as uint16_t and return
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f7fe fe23 	bl	8000c78 <__aeabi_f2uiz>
 8002032:	4603      	mov	r3, r0
 8002034:	b29b      	uxth	r3, r3
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	447fc000 	.word	0x447fc000
 8002044:	42c80000 	.word	0x42c80000

08002048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_MspInit+0x68>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_MspInit+0x68>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6193      	str	r3, [r2, #24]
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_MspInit+0x68>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_MspInit+0x68>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <HAL_MspInit+0x68>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <HAL_MspInit+0x68>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	210f      	movs	r1, #15
 8002082:	f06f 0001 	mvn.w	r0, #1
 8002086:	f000 fca8 	bl	80029da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_MspInit+0x6c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_MspInit+0x6c>)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010000 	.word	0x40010000

080020b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a14      	ldr	r2, [pc, #80]	; (8002124 <HAL_ADC_MspInit+0x6c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d121      	bne.n	800211c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_ADC_MspInit+0x70>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_ADC_MspInit+0x70>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_ADC_MspInit+0x70>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <HAL_ADC_MspInit+0x70>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <HAL_ADC_MspInit+0x70>)
 80020f6:	f043 0310 	orr.w	r3, r3, #16
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_ADC_MspInit+0x70>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002108:	2320      	movs	r3, #32
 800210a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210c:	2303      	movs	r3, #3
 800210e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	4619      	mov	r1, r3
 8002116:	4805      	ldr	r0, [pc, #20]	; (800212c <HAL_ADC_MspInit+0x74>)
 8002118:	f000 fc8a 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800211c:	bf00      	nop
 800211e:	3720      	adds	r7, #32
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40012400 	.word	0x40012400
 8002128:	40021000 	.word	0x40021000
 800212c:	40011000 	.word	0x40011000

08002130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a12      	ldr	r2, [pc, #72]	; (8002188 <HAL_TIM_Base_MspInit+0x58>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10c      	bne.n	800215c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 8002148:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800214c:	6193      	str	r3, [r2, #24]
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800215a:	e010      	b.n	800217e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002164:	d10b      	bne.n	800217e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_TIM_Base_MspInit+0x5c>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40021000 	.word	0x40021000

08002190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 0318 	add.w	r3, r7, #24
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a38      	ldr	r2, [pc, #224]	; (800228c <HAL_UART_MspInit+0xfc>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d132      	bne.n	8002216 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021b0:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_UART_MspInit+0x100>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a36      	ldr	r2, [pc, #216]	; (8002290 <HAL_UART_MspInit+0x100>)
 80021b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_UART_MspInit+0x100>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <HAL_UART_MspInit+0x100>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a30      	ldr	r2, [pc, #192]	; (8002290 <HAL_UART_MspInit+0x100>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <HAL_UART_MspInit+0x100>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4827      	ldr	r0, [pc, #156]	; (8002294 <HAL_UART_MspInit+0x104>)
 80021f6:	f000 fc1b 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	4619      	mov	r1, r3
 800220e:	4821      	ldr	r0, [pc, #132]	; (8002294 <HAL_UART_MspInit+0x104>)
 8002210:	f000 fc0e 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002214:	e036      	b.n	8002284 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <HAL_UART_MspInit+0x108>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d131      	bne.n	8002284 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_UART_MspInit+0x100>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_UART_MspInit+0x100>)
 8002226:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222a:	61d3      	str	r3, [r2, #28]
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_UART_MspInit+0x100>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_UART_MspInit+0x100>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_UART_MspInit+0x100>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_UART_MspInit+0x100>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225a:	2303      	movs	r3, #3
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f107 0318 	add.w	r3, r7, #24
 8002262:	4619      	mov	r1, r3
 8002264:	480d      	ldr	r0, [pc, #52]	; (800229c <HAL_UART_MspInit+0x10c>)
 8002266:	f000 fbe3 	bl	8002a30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800226a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002278:	f107 0318 	add.w	r3, r7, #24
 800227c:	4619      	mov	r1, r3
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <HAL_UART_MspInit+0x10c>)
 8002280:	f000 fbd6 	bl	8002a30 <HAL_GPIO_Init>
}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40013800 	.word	0x40013800
 8002290:	40021000 	.word	0x40021000
 8002294:	40010800 	.word	0x40010800
 8002298:	40004800 	.word	0x40004800
 800229c:	40010c00 	.word	0x40010c00

080022a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	201e      	movs	r0, #30
 80022b6:	f000 fb90 	bl	80029da <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022ba:	201e      	movs	r0, #30
 80022bc:	f000 fba9 	bl	8002a12 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <HAL_InitTick+0xa0>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <HAL_InitTick+0xa0>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	61d3      	str	r3, [r2, #28]
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_InitTick+0xa0>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022d8:	f107 0210 	add.w	r2, r7, #16
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 f976 	bl	80035d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80022e8:	f001 f94c 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 80022ec:	4603      	mov	r3, r0
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	4a13      	ldr	r2, [pc, #76]	; (8002344 <HAL_InitTick+0xa4>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9b      	lsrs	r3, r3, #18
 80022fc:	3b01      	subs	r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_InitTick+0xa8>)
 8002302:	4a12      	ldr	r2, [pc, #72]	; (800234c <HAL_InitTick+0xac>)
 8002304:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <HAL_InitTick+0xa8>)
 8002308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800230c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_InitTick+0xa8>)
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002312:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_InitTick+0xa8>)
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_InitTick+0xa8>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <HAL_InitTick+0xa8>)
 8002322:	f001 fa5b 	bl	80037dc <HAL_TIM_Base_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d104      	bne.n	8002336 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800232c:	4806      	ldr	r0, [pc, #24]	; (8002348 <HAL_InitTick+0xa8>)
 800232e:	f001 fb15 	bl	800395c <HAL_TIM_Base_Start_IT>
 8002332:	4603      	mov	r3, r0
 8002334:	e000      	b.n	8002338 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3730      	adds	r7, #48	; 0x30
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	431bde83 	.word	0x431bde83
 8002348:	200028c0 	.word	0x200028c0
 800234c:	40000800 	.word	0x40000800

08002350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002354:	e7fe      	b.n	8002354 <NMI_Handler+0x4>

08002356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002356:	b480      	push	{r7}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235a:	e7fe      	b.n	800235a <HardFault_Handler+0x4>

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <MemManage_Handler+0x4>

08002362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <BusFault_Handler+0x4>

08002368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <UsageFault_Handler+0x4>

0800236e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
	...

0800237c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM4_IRQHandler+0x10>)
 8002382:	f001 fb3d 	bl	8003a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200028c0 	.word	0x200028c0

08002390 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002394:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002398:	f000 fcfe 	bl	8002d98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023ae:	e003      	b.n	80023b8 <LoopCopyDataInit>

080023b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023b6:	3104      	adds	r1, #4

080023b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023b8:	480a      	ldr	r0, [pc, #40]	; (80023e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023c0:	d3f6      	bcc.n	80023b0 <CopyDataInit>
  ldr r2, =_sbss
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023c4:	e002      	b.n	80023cc <LoopFillZerobss>

080023c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023c8:	f842 3b04 	str.w	r3, [r2], #4

080023cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023d0:	d3f9      	bcc.n	80023c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023d2:	f7ff ffe5 	bl	80023a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023d6:	f004 ffc1 	bl	800735c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023da:	f7fe fc6d 	bl	8000cb8 <main>
  bx lr
 80023de:	4770      	bx	lr
  ldr r3, =_sidata
 80023e0:	08007690 	.word	0x08007690
  ldr r0, =_sdata
 80023e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80023e8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80023ec:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80023f0:	2000294c 	.word	0x2000294c

080023f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023f4:	e7fe      	b.n	80023f4 <ADC1_2_IRQHandler>
	...

080023f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <HAL_Init+0x28>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a07      	ldr	r2, [pc, #28]	; (8002420 <HAL_Init+0x28>)
 8002402:	f043 0310 	orr.w	r3, r3, #16
 8002406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002408:	2003      	movs	r0, #3
 800240a:	f000 fadb 	bl	80029c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240e:	2000      	movs	r0, #0
 8002410:	f7ff ff46 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002414:	f7ff fe18 	bl	8002048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40022000 	.word	0x40022000

08002424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_IncTick+0x1c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_IncTick+0x20>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4a03      	ldr	r2, [pc, #12]	; (8002444 <HAL_IncTick+0x20>)
 8002436:	6013      	str	r3, [r2, #0]
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000008 	.word	0x20000008
 8002444:	20002908 	.word	0x20002908

08002448 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return uwTick;
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_GetTick+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	20002908 	.word	0x20002908

0800245c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0be      	b.n	80025fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fe0c 	bl	80020b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f9ab 	bl	80027fc <ADC_ConversionStop_Disable>
 80024a6:	4603      	mov	r3, r0
 80024a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8099 	bne.w	80025ea <HAL_ADC_Init+0x18e>
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 8095 	bne.w	80025ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024c8:	f023 0302 	bic.w	r3, r3, #2
 80024cc:	f043 0202 	orr.w	r2, r3, #2
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7b1b      	ldrb	r3, [r3, #12]
 80024e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80024e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024f4:	d003      	beq.n	80024fe <HAL_ADC_Init+0xa2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_ADC_Init+0xa8>
 80024fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002502:	e000      	b.n	8002506 <HAL_ADC_Init+0xaa>
 8002504:	2300      	movs	r3, #0
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7d1b      	ldrb	r3, [r3, #20]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d119      	bne.n	8002548 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	7b1b      	ldrb	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	3b01      	subs	r3, #1
 8002522:	035a      	lsls	r2, r3, #13
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e00b      	b.n	8002548 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	f043 0220 	orr.w	r2, r3, #32
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	f043 0201 	orr.w	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	430a      	orrs	r2, r1
 800255a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_ADC_Init+0x1a8>)
 8002564:	4013      	ands	r3, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	68b9      	ldr	r1, [r7, #8]
 800256c:	430b      	orrs	r3, r1
 800256e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002578:	d003      	beq.n	8002582 <HAL_ADC_Init+0x126>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d104      	bne.n	800258c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	3b01      	subs	r3, #1
 8002588:	051b      	lsls	r3, r3, #20
 800258a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	430a      	orrs	r2, r1
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_ADC_Init+0x1ac>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10b      	bne.n	80025c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025c6:	e018      	b.n	80025fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	f023 0312 	bic.w	r3, r3, #18
 80025d0:	f043 0210 	orr.w	r2, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025e8:	e007      	b.n	80025fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	ffe1f7fd 	.word	0xffe1f7fd
 8002608:	ff1f0efe 	.word	0xff1f0efe

0800260c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x20>
 8002628:	2302      	movs	r3, #2
 800262a:	e0dc      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x1da>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d81c      	bhi.n	8002676 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3b05      	subs	r3, #5
 800264e:	221f      	movs	r2, #31
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	4019      	ands	r1, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b05      	subs	r3, #5
 8002668:	fa00 f203 	lsl.w	r2, r0, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	635a      	str	r2, [r3, #52]	; 0x34
 8002674:	e03c      	b.n	80026f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d81c      	bhi.n	80026b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	3b23      	subs	r3, #35	; 0x23
 8002690:	221f      	movs	r2, #31
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	4019      	ands	r1, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	3b23      	subs	r3, #35	; 0x23
 80026aa:	fa00 f203 	lsl.w	r2, r0, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
 80026b6:	e01b      	b.n	80026f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	3b41      	subs	r3, #65	; 0x41
 80026ca:	221f      	movs	r2, #31
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	4019      	ands	r1, r3
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b41      	subs	r3, #65	; 0x41
 80026e4:	fa00 f203 	lsl.w	r2, r0, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b09      	cmp	r3, #9
 80026f6:	d91c      	bls.n	8002732 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68d9      	ldr	r1, [r3, #12]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	3b1e      	subs	r3, #30
 800270a:	2207      	movs	r2, #7
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	4019      	ands	r1, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6898      	ldr	r0, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	3b1e      	subs	r3, #30
 8002724:	fa00 f203 	lsl.w	r2, r0, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	e019      	b.n	8002766 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6919      	ldr	r1, [r3, #16]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	2207      	movs	r2, #7
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	4019      	ands	r1, r3
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	6898      	ldr	r0, [r3, #8]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	fa00 f203 	lsl.w	r2, r0, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d003      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002772:	2b11      	cmp	r3, #17
 8002774:	d132      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1d      	ldr	r2, [pc, #116]	; (80027f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d125      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d126      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800279c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d11a      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027a6:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a13      	ldr	r2, [pc, #76]	; (80027f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	0c9a      	lsrs	r2, r3, #18
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f9      	bne.n	80027be <HAL_ADC_ConfigChannel+0x1b2>
 80027ca:	e007      	b.n	80027dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012400 	.word	0x40012400
 80027f4:	20000000 	.word	0x20000000
 80027f8:	431bde83 	.word	0x431bde83

080027fc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d127      	bne.n	8002866 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002826:	f7ff fe0f 	bl	8002448 <HAL_GetTick>
 800282a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800282c:	e014      	b.n	8002858 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800282e:	f7ff fe0b 	bl	8002448 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d90d      	bls.n	8002858 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e007      	b.n	8002868 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d0e3      	beq.n	800282e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800288c:	4013      	ands	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028a2:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <__NVIC_SetPriorityGrouping+0x44>)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	60d3      	str	r3, [r2, #12]
}
 80028a8:	bf00      	nop
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028bc:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <__NVIC_GetPriorityGrouping+0x18>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	0a1b      	lsrs	r3, r3, #8
 80028c2:	f003 0307 	and.w	r3, r3, #7
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db0b      	blt.n	80028fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	4906      	ldr	r1, [pc, #24]	; (8002908 <__NVIC_EnableIRQ+0x34>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2001      	movs	r0, #1
 80028f6:	fa00 f202 	lsl.w	r2, r0, r2
 80028fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100

0800290c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	; (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b480      	push	{r7}
 8002962:	b089      	sub	sp, #36	; 0x24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f1c3 0307 	rsb	r3, r3, #7
 800297a:	2b04      	cmp	r3, #4
 800297c:	bf28      	it	cs
 800297e:	2304      	movcs	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3304      	adds	r3, #4
 8002986:	2b06      	cmp	r3, #6
 8002988:	d902      	bls.n	8002990 <NVIC_EncodePriority+0x30>
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3b03      	subs	r3, #3
 800298e:	e000      	b.n	8002992 <NVIC_EncodePriority+0x32>
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002994:	f04f 32ff 	mov.w	r2, #4294967295
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43da      	mvns	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	401a      	ands	r2, r3
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b8:	4313      	orrs	r3, r2
         );
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff ff4f 	bl	8002870 <__NVIC_SetPriorityGrouping>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	4603      	mov	r3, r0
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029ec:	f7ff ff64 	bl	80028b8 <__NVIC_GetPriorityGrouping>
 80029f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	6978      	ldr	r0, [r7, #20]
 80029f8:	f7ff ffb2 	bl	8002960 <NVIC_EncodePriority>
 80029fc:	4602      	mov	r2, r0
 80029fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ff81 	bl	800290c <__NVIC_SetPriority>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff57 	bl	80028d4 <__NVIC_EnableIRQ>
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b08b      	sub	sp, #44	; 0x2c
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	e169      	b.n	8002d18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a44:	2201      	movs	r2, #1
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	f040 8158 	bne.w	8002d12 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4a9a      	ldr	r2, [pc, #616]	; (8002cd0 <HAL_GPIO_Init+0x2a0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d05e      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a6c:	4a98      	ldr	r2, [pc, #608]	; (8002cd0 <HAL_GPIO_Init+0x2a0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d875      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a72:	4a98      	ldr	r2, [pc, #608]	; (8002cd4 <HAL_GPIO_Init+0x2a4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d058      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a78:	4a96      	ldr	r2, [pc, #600]	; (8002cd4 <HAL_GPIO_Init+0x2a4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d86f      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a7e:	4a96      	ldr	r2, [pc, #600]	; (8002cd8 <HAL_GPIO_Init+0x2a8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d052      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a84:	4a94      	ldr	r2, [pc, #592]	; (8002cd8 <HAL_GPIO_Init+0x2a8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d869      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a8a:	4a94      	ldr	r2, [pc, #592]	; (8002cdc <HAL_GPIO_Init+0x2ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d04c      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a90:	4a92      	ldr	r2, [pc, #584]	; (8002cdc <HAL_GPIO_Init+0x2ac>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d863      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002a96:	4a92      	ldr	r2, [pc, #584]	; (8002ce0 <HAL_GPIO_Init+0x2b0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d046      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
 8002a9c:	4a90      	ldr	r2, [pc, #576]	; (8002ce0 <HAL_GPIO_Init+0x2b0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d85d      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d82a      	bhi.n	8002afc <HAL_GPIO_Init+0xcc>
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	d859      	bhi.n	8002b5e <HAL_GPIO_Init+0x12e>
 8002aaa:	a201      	add	r2, pc, #4	; (adr r2, 8002ab0 <HAL_GPIO_Init+0x80>)
 8002aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab0:	08002b2b 	.word	0x08002b2b
 8002ab4:	08002b05 	.word	0x08002b05
 8002ab8:	08002b17 	.word	0x08002b17
 8002abc:	08002b59 	.word	0x08002b59
 8002ac0:	08002b5f 	.word	0x08002b5f
 8002ac4:	08002b5f 	.word	0x08002b5f
 8002ac8:	08002b5f 	.word	0x08002b5f
 8002acc:	08002b5f 	.word	0x08002b5f
 8002ad0:	08002b5f 	.word	0x08002b5f
 8002ad4:	08002b5f 	.word	0x08002b5f
 8002ad8:	08002b5f 	.word	0x08002b5f
 8002adc:	08002b5f 	.word	0x08002b5f
 8002ae0:	08002b5f 	.word	0x08002b5f
 8002ae4:	08002b5f 	.word	0x08002b5f
 8002ae8:	08002b5f 	.word	0x08002b5f
 8002aec:	08002b5f 	.word	0x08002b5f
 8002af0:	08002b5f 	.word	0x08002b5f
 8002af4:	08002b0d 	.word	0x08002b0d
 8002af8:	08002b21 	.word	0x08002b21
 8002afc:	4a79      	ldr	r2, [pc, #484]	; (8002ce4 <HAL_GPIO_Init+0x2b4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d013      	beq.n	8002b2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b02:	e02c      	b.n	8002b5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	623b      	str	r3, [r7, #32]
          break;
 8002b0a:	e029      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	3304      	adds	r3, #4
 8002b12:	623b      	str	r3, [r7, #32]
          break;
 8002b14:	e024      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	3308      	adds	r3, #8
 8002b1c:	623b      	str	r3, [r7, #32]
          break;
 8002b1e:	e01f      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	330c      	adds	r3, #12
 8002b26:	623b      	str	r3, [r7, #32]
          break;
 8002b28:	e01a      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b32:	2304      	movs	r3, #4
 8002b34:	623b      	str	r3, [r7, #32]
          break;
 8002b36:	e013      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b40:	2308      	movs	r3, #8
 8002b42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	611a      	str	r2, [r3, #16]
          break;
 8002b4a:	e009      	b.n	8002b60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	615a      	str	r2, [r3, #20]
          break;
 8002b56:	e003      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
          break;
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x130>
          break;
 8002b5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2bff      	cmp	r3, #255	; 0xff
 8002b64:	d801      	bhi.n	8002b6a <HAL_GPIO_Init+0x13a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	e001      	b.n	8002b6e <HAL_GPIO_Init+0x13e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2bff      	cmp	r3, #255	; 0xff
 8002b74:	d802      	bhi.n	8002b7c <HAL_GPIO_Init+0x14c>
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	e002      	b.n	8002b82 <HAL_GPIO_Init+0x152>
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	3b08      	subs	r3, #8
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	210f      	movs	r1, #15
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	401a      	ands	r2, r3
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80b1 	beq.w	8002d12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6193      	str	r3, [r2, #24]
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ce8 <HAL_GPIO_Init+0x2b8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bc8:	4a48      	ldr	r2, [pc, #288]	; (8002cec <HAL_GPIO_Init+0x2bc>)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	220f      	movs	r2, #15
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <HAL_GPIO_Init+0x2c0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <HAL_GPIO_Init+0x1ec>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <HAL_GPIO_Init+0x2c4>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00d      	beq.n	8002c18 <HAL_GPIO_Init+0x1e8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3e      	ldr	r2, [pc, #248]	; (8002cf8 <HAL_GPIO_Init+0x2c8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d007      	beq.n	8002c14 <HAL_GPIO_Init+0x1e4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3d      	ldr	r2, [pc, #244]	; (8002cfc <HAL_GPIO_Init+0x2cc>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d101      	bne.n	8002c10 <HAL_GPIO_Init+0x1e0>
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e006      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e004      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e002      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_GPIO_Init+0x1ee>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	f002 0203 	and.w	r2, r2, #3
 8002c24:	0092      	lsls	r2, r2, #2
 8002c26:	4093      	lsls	r3, r2
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c2e:	492f      	ldr	r1, [pc, #188]	; (8002cec <HAL_GPIO_Init+0x2bc>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	089b      	lsrs	r3, r3, #2
 8002c34:	3302      	adds	r3, #2
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c48:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	492c      	ldr	r1, [pc, #176]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	600b      	str	r3, [r1, #0]
 8002c54:	e006      	b.n	8002c64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	4928      	ldr	r1, [pc, #160]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d006      	beq.n	8002c7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c70:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4922      	ldr	r1, [pc, #136]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	491e      	ldr	r1, [pc, #120]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4918      	ldr	r1, [pc, #96]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]
 8002ca4:	e006      	b.n	8002cb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4914      	ldr	r1, [pc, #80]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d021      	beq.n	8002d04 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cc0:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_GPIO_Init+0x2d0>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60cb      	str	r3, [r1, #12]
 8002ccc:	e021      	b.n	8002d12 <HAL_GPIO_Init+0x2e2>
 8002cce:	bf00      	nop
 8002cd0:	10320000 	.word	0x10320000
 8002cd4:	10310000 	.word	0x10310000
 8002cd8:	10220000 	.word	0x10220000
 8002cdc:	10210000 	.word	0x10210000
 8002ce0:	10120000 	.word	0x10120000
 8002ce4:	10110000 	.word	0x10110000
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40010800 	.word	0x40010800
 8002cf4:	40010c00 	.word	0x40010c00
 8002cf8:	40011000 	.word	0x40011000
 8002cfc:	40011400 	.word	0x40011400
 8002d00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_GPIO_Init+0x304>)
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	4909      	ldr	r1, [pc, #36]	; (8002d34 <HAL_GPIO_Init+0x304>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	3301      	adds	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f47f ae8e 	bne.w	8002a44 <HAL_GPIO_Init+0x14>
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	372c      	adds	r7, #44	; 0x2c
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr
 8002d34:	40010400 	.word	0x40010400

08002d38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e001      	b.n	8002d5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	807b      	strh	r3, [r7, #2]
 8002d72:	4613      	mov	r3, r2
 8002d74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d76:	787b      	ldrb	r3, [r7, #1]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7c:	887a      	ldrh	r2, [r7, #2]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d82:	e003      	b.n	8002d8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	041a      	lsls	r2, r3, #16
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	611a      	str	r2, [r3, #16]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
	...

08002d98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f806 	bl	8002dc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e26c      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8087 	beq.w	8002f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dfc:	4b92      	ldr	r3, [pc, #584]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d00c      	beq.n	8002e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e08:	4b8f      	ldr	r3, [pc, #572]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d112      	bne.n	8002e3a <HAL_RCC_OscConfig+0x5e>
 8002e14:	4b8c      	ldr	r3, [pc, #560]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e20:	d10b      	bne.n	8002e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e22:	4b89      	ldr	r3, [pc, #548]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d06c      	beq.n	8002f08 <HAL_RCC_OscConfig+0x12c>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d168      	bne.n	8002f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e246      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e42:	d106      	bne.n	8002e52 <HAL_RCC_OscConfig+0x76>
 8002e44:	4b80      	ldr	r3, [pc, #512]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a7f      	ldr	r2, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	e02e      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd4>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x98>
 8002e5a:	4b7b      	ldr	r3, [pc, #492]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7a      	ldr	r2, [pc, #488]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b78      	ldr	r3, [pc, #480]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a77      	ldr	r2, [pc, #476]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e01d      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd4>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0xbc>
 8002e7e:	4b72      	ldr	r3, [pc, #456]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a71      	ldr	r2, [pc, #452]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b6f      	ldr	r3, [pc, #444]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6e      	ldr	r2, [pc, #440]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCC_OscConfig+0xd4>
 8002e98:	4b6b      	ldr	r3, [pc, #428]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a6a      	ldr	r2, [pc, #424]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b68      	ldr	r3, [pc, #416]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a67      	ldr	r2, [pc, #412]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7ff fac6 	bl	8002448 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7ff fac2 	bl	8002448 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e1fa      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b5d      	ldr	r3, [pc, #372]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xe4>
 8002ede:	e014      	b.n	8002f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee0:	f7ff fab2 	bl	8002448 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7ff faae 	bl	8002448 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e1e6      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efa:	4b53      	ldr	r3, [pc, #332]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x10c>
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d063      	beq.n	8002fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f16:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00b      	beq.n	8002f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f22:	4b49      	ldr	r3, [pc, #292]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d11c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x18c>
 8002f2e:	4b46      	ldr	r3, [pc, #280]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d116      	bne.n	8002f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3a:	4b43      	ldr	r3, [pc, #268]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <HAL_RCC_OscConfig+0x176>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e1ba      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4939      	ldr	r1, [pc, #228]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f66:	e03a      	b.n	8002fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f70:	4b36      	ldr	r3, [pc, #216]	; (800304c <HAL_RCC_OscConfig+0x270>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7ff fa67 	bl	8002448 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7e:	f7ff fa63 	bl	8002448 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e19b      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9c:	4b2a      	ldr	r3, [pc, #168]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	4927      	ldr	r1, [pc, #156]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]
 8002fb0:	e015      	b.n	8002fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_RCC_OscConfig+0x270>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7ff fa46 	bl	8002448 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc0:	f7ff fa42 	bl	8002448 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e17a      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d03a      	beq.n	8003060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d019      	beq.n	8003026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff8:	f7ff fa26 	bl	8002448 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003000:	f7ff fa22 	bl	8002448 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e15a      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <HAL_RCC_OscConfig+0x26c>)
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f0      	beq.n	8003000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800301e:	2001      	movs	r0, #1
 8003020:	f000 fb08 	bl	8003634 <RCC_Delay>
 8003024:	e01c      	b.n	8003060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_OscConfig+0x274>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302c:	f7ff fa0c 	bl	8002448 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003032:	e00f      	b.n	8003054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7ff fa08 	bl	8002448 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d908      	bls.n	8003054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e140      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	42420000 	.word	0x42420000
 8003050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003054:	4b9e      	ldr	r3, [pc, #632]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1e9      	bne.n	8003034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a6 	beq.w	80031ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003072:	4b97      	ldr	r3, [pc, #604]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10d      	bne.n	800309a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307e:	4b94      	ldr	r3, [pc, #592]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	4a93      	ldr	r2, [pc, #588]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003088:	61d3      	str	r3, [r2, #28]
 800308a:	4b91      	ldr	r3, [pc, #580]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003096:	2301      	movs	r3, #1
 8003098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b8e      	ldr	r3, [pc, #568]	; (80032d4 <HAL_RCC_OscConfig+0x4f8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d118      	bne.n	80030d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030a6:	4b8b      	ldr	r3, [pc, #556]	; (80032d4 <HAL_RCC_OscConfig+0x4f8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a8a      	ldr	r2, [pc, #552]	; (80032d4 <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030b2:	f7ff f9c9 	bl	8002448 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7ff f9c5 	bl	8002448 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b64      	cmp	r3, #100	; 0x64
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e0fd      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <HAL_RCC_OscConfig+0x4f8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d106      	bne.n	80030ee <HAL_RCC_OscConfig+0x312>
 80030e0:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	4a7a      	ldr	r2, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	6213      	str	r3, [r2, #32]
 80030ec:	e02d      	b.n	800314a <HAL_RCC_OscConfig+0x36e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10c      	bne.n	8003110 <HAL_RCC_OscConfig+0x334>
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	6213      	str	r3, [r2, #32]
 8003102:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003108:	f023 0304 	bic.w	r3, r3, #4
 800310c:	6213      	str	r3, [r2, #32]
 800310e:	e01c      	b.n	800314a <HAL_RCC_OscConfig+0x36e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d10c      	bne.n	8003132 <HAL_RCC_OscConfig+0x356>
 8003118:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	4a6c      	ldr	r2, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 800311e:	f043 0304 	orr.w	r3, r3, #4
 8003122:	6213      	str	r3, [r2, #32]
 8003124:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	4a69      	ldr	r2, [pc, #420]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	e00b      	b.n	800314a <HAL_RCC_OscConfig+0x36e>
 8003132:	4b67      	ldr	r3, [pc, #412]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4a66      	ldr	r2, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003138:	f023 0301 	bic.w	r3, r3, #1
 800313c:	6213      	str	r3, [r2, #32]
 800313e:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	4a63      	ldr	r2, [pc, #396]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d015      	beq.n	800317e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003152:	f7ff f979 	bl	8002448 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003158:	e00a      	b.n	8003170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315a:	f7ff f975 	bl	8002448 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f241 3288 	movw	r2, #5000	; 0x1388
 8003168:	4293      	cmp	r3, r2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e0ab      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003170:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0ee      	beq.n	800315a <HAL_RCC_OscConfig+0x37e>
 800317c:	e014      	b.n	80031a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7ff f963 	bl	8002448 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7ff f95f 	bl	8002448 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e095      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319c:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ee      	bne.n	8003186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ae:	4b48      	ldr	r3, [pc, #288]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4a47      	ldr	r2, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8081 	beq.w	80032c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 030c 	and.w	r3, r3, #12
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d061      	beq.n	8003294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d146      	bne.n	8003266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCC_OscConfig+0x4fc>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7ff f933 	bl	8002448 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7ff f92f 	bl	8002448 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e067      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f8:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d108      	bne.n	8003220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800320e:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	492d      	ldr	r1, [pc, #180]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 800321c:	4313      	orrs	r3, r2
 800321e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a19      	ldr	r1, [r3, #32]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	430b      	orrs	r3, r1
 8003232:	4927      	ldr	r1, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <HAL_RCC_OscConfig+0x4fc>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7ff f903 	bl	8002448 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003246:	f7ff f8ff 	bl	8002448 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e037      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x46a>
 8003264:	e02f      	b.n	80032c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <HAL_RCC_OscConfig+0x4fc>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff f8ec 	bl	8002448 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7ff f8e8 	bl	8002448 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e020      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x498>
 8003292:	e018      	b.n	80032c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e013      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x4f4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d106      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d001      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40007000 	.word	0x40007000
 80032d8:	42420060 	.word	0x42420060

080032dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0d0      	b.n	8003492 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d910      	bls.n	8003320 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fe:	4b67      	ldr	r3, [pc, #412]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f023 0207 	bic.w	r2, r3, #7
 8003306:	4965      	ldr	r1, [pc, #404]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b63      	ldr	r3, [pc, #396]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0b8      	b.n	8003492 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003338:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003342:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003350:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800335a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	494d      	ldr	r1, [pc, #308]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d040      	beq.n	80033fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d115      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800339a:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e073      	b.n	8003492 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e06b      	b.n	8003492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ba:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f023 0203 	bic.w	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	4936      	ldr	r1, [pc, #216]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033cc:	f7ff f83c 	bl	8002448 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d2:	e00a      	b.n	80033ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7ff f838 	bl	8002448 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e053      	b.n	8003492 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ea:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 020c 	and.w	r2, r3, #12
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d1eb      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033fc:	4b27      	ldr	r3, [pc, #156]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d210      	bcs.n	800342c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	4922      	ldr	r1, [pc, #136]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e032      	b.n	8003492 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4916      	ldr	r1, [pc, #88]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	4313      	orrs	r3, r2
 8003468:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800346a:	f000 f821 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800346e:	4602      	mov	r2, r0
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	490a      	ldr	r1, [pc, #40]	; (80034a4 <HAL_RCC_ClockConfig+0x1c8>)
 800347c:	5ccb      	ldrb	r3, [r1, r3]
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1d0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe ff08 	bl	80022a0 <HAL_InitTick>

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40022000 	.word	0x40022000
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08007670 	.word	0x08007670
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000004 	.word	0x20000004

080034b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	b490      	push	{r4, r7}
 80034b2:	b08a      	sub	sp, #40	; 0x28
 80034b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80034b6:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <HAL_RCC_GetSysClockFreq+0xb0>)
 80034b8:	1d3c      	adds	r4, r7, #4
 80034ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80034c0:	f240 2301 	movw	r3, #513	; 0x201
 80034c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034da:	4b22      	ldr	r3, [pc, #136]	; (8003564 <HAL_RCC_GetSysClockFreq+0xb4>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d002      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x40>
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d003      	beq.n	80034f6 <HAL_RCC_GetSysClockFreq+0x46>
 80034ee:	e02d      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f2:	623b      	str	r3, [r7, #32]
      break;
 80034f4:	e02d      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	0c9b      	lsrs	r3, r3, #18
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003502:	4413      	add	r3, r2
 8003504:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003508:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003514:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	0c5b      	lsrs	r3, r3, #17
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003522:	4413      	add	r3, r2
 8003524:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003528:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800352e:	fb02 f203 	mul.w	r2, r2, r3
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	e004      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	4a0b      	ldr	r2, [pc, #44]	; (800356c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003540:	fb02 f303 	mul.w	r3, r2, r3
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	623b      	str	r3, [r7, #32]
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_GetSysClockFreq+0xb8>)
 800354e:	623b      	str	r3, [r7, #32]
      break;
 8003550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003552:	6a3b      	ldr	r3, [r7, #32]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3728      	adds	r7, #40	; 0x28
 8003558:	46bd      	mov	sp, r7
 800355a:	bc90      	pop	{r4, r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	080074bc 	.word	0x080074bc
 8003564:	40021000 	.word	0x40021000
 8003568:	007a1200 	.word	0x007a1200
 800356c:	003d0900 	.word	0x003d0900

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b02      	ldr	r3, [pc, #8]	; (8003580 <HAL_RCC_GetHCLKFreq+0x10>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	20000000 	.word	0x20000000

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003588:	f7ff fff2 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	08007680 	.word	0x08007680

080035ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035b0:	f7ff ffde 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	0adb      	lsrs	r3, r3, #11
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4903      	ldr	r1, [pc, #12]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40021000 	.word	0x40021000
 80035d0:	08007680 	.word	0x08007680

080035d4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	220f      	movs	r2, #15
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_RCC_GetClockConfig+0x58>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0203 	and.w	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035f0:	4b0e      	ldr	r3, [pc, #56]	; (800362c <HAL_RCC_GetClockConfig+0x58>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035fc:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_GetClockConfig+0x58>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003608:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_RCC_GetClockConfig+0x58>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	08db      	lsrs	r3, r3, #3
 800360e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCC_GetClockConfig+0x5c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0207 	and.w	r2, r3, #7
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	40021000 	.word	0x40021000
 8003630:	40022000 	.word	0x40022000

08003634 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <RCC_Delay+0x34>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0a      	ldr	r2, [pc, #40]	; (800366c <RCC_Delay+0x38>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	0a5b      	lsrs	r3, r3, #9
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	fb02 f303 	mul.w	r3, r2, r3
 800364e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003650:	bf00      	nop
  }
  while (Delay --);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1e5a      	subs	r2, r3, #1
 8003656:	60fa      	str	r2, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f9      	bne.n	8003650 <RCC_Delay+0x1c>
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	20000000 	.word	0x20000000
 800366c:	10624dd3 	.word	0x10624dd3

08003670 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d07d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003690:	4b4f      	ldr	r3, [pc, #316]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b4c      	ldr	r3, [pc, #304]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	4a4b      	ldr	r2, [pc, #300]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	61d3      	str	r3, [r2, #28]
 80036a8:	4b49      	ldr	r3, [pc, #292]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	4b46      	ldr	r3, [pc, #280]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d118      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a42      	ldr	r2, [pc, #264]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d0:	f7fe feba 	bl	8002448 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d6:	e008      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fe feb6 	bl	8002448 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	; 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e06d      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ea:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f6:	4b36      	ldr	r3, [pc, #216]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d02e      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	429a      	cmp	r2, r3
 8003712:	d027      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003714:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800371e:	4b2e      	ldr	r3, [pc, #184]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003724:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800372a:	4a29      	ldr	r2, [pc, #164]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d014      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373a:	f7fe fe85 	bl	8002448 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe fe81 	bl	8002448 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e036      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0ee      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4917      	ldr	r1, [pc, #92]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	4313      	orrs	r3, r2
 8003774:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	490b      	ldr	r1, [pc, #44]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037b2:	4b07      	ldr	r3, [pc, #28]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4904      	ldr	r1, [pc, #16]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40007000 	.word	0x40007000
 80037d8:	42420440 	.word	0x42420440

080037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e041      	b.n	8003872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fe fc94 	bl	8002130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 fae0 	bl	8003de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d001      	beq.n	8003894 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e032      	b.n	80038fa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_TIM_Base_Start+0x88>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <HAL_TIM_Base_Start+0x48>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ae:	d009      	beq.n	80038c4 <HAL_TIM_Base_Start+0x48>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a14      	ldr	r2, [pc, #80]	; (8003908 <HAL_TIM_Base_Start+0x8c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_TIM_Base_Start+0x48>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_TIM_Base_Start+0x90>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d010      	beq.n	80038f8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e6:	e007      	b.n	80038f8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	40012c00 	.word	0x40012c00
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800

08003910 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003922:	4013      	ands	r3, r2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10f      	bne.n	8003948 <HAL_TIM_Base_Stop+0x38>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a1a      	ldr	r2, [r3, #32]
 800392e:	f240 4344 	movw	r3, #1092	; 0x444
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_TIM_Base_Stop+0x38>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d001      	beq.n	8003974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e03a      	b.n	80039ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <HAL_TIM_Base_Start_IT+0x98>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00e      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x58>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399e:	d009      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x58>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a14      	ldr	r2, [pc, #80]	; (80039f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d004      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x58>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a13      	ldr	r2, [pc, #76]	; (80039fc <HAL_TIM_Base_Start_IT+0xa0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d111      	bne.n	80039d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b06      	cmp	r3, #6
 80039c4:	d010      	beq.n	80039e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0201 	orr.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d6:	e007      	b.n	80039e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40000400 	.word	0x40000400
 80039fc:	40000800 	.word	0x40000800

08003a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d122      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d11b      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f06f 0202 	mvn.w	r2, #2
 8003a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f9b1 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003a48:	e005      	b.n	8003a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f9a4 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f9b3 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d122      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d11b      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f06f 0204 	mvn.w	r2, #4
 8003a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f987 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003a9c:	e005      	b.n	8003aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f97a 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f989 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d122      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d11b      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0208 	mvn.w	r2, #8
 8003ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f95d 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003af0:	e005      	b.n	8003afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f950 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f95f 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d122      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d11b      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f06f 0210 	mvn.w	r2, #16
 8003b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f933 	bl	8003daa <HAL_TIM_IC_CaptureCallback>
 8003b44:	e005      	b.n	8003b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f926 	bl	8003d98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f935 	bl	8003dbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d10e      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0201 	mvn.w	r2, #1
 8003b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd ff7a 	bl	8001a78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 fa77 	bl	800409e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b40      	cmp	r3, #64	; 0x40
 8003bbc:	d10e      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8f9 	bl	8003dce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0220 	mvn.w	r2, #32
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa42 	bl	800408c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIM_ConfigClockSource+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e0b3      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x180>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c60:	d03e      	beq.n	8003ce0 <HAL_TIM_ConfigClockSource+0xd0>
 8003c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c66:	f200 8087 	bhi.w	8003d78 <HAL_TIM_ConfigClockSource+0x168>
 8003c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6e:	f000 8085 	beq.w	8003d7c <HAL_TIM_ConfigClockSource+0x16c>
 8003c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c76:	d87f      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x168>
 8003c78:	2b70      	cmp	r3, #112	; 0x70
 8003c7a:	d01a      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0xa2>
 8003c7c:	2b70      	cmp	r3, #112	; 0x70
 8003c7e:	d87b      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x168>
 8003c80:	2b60      	cmp	r3, #96	; 0x60
 8003c82:	d050      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x116>
 8003c84:	2b60      	cmp	r3, #96	; 0x60
 8003c86:	d877      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x168>
 8003c88:	2b50      	cmp	r3, #80	; 0x50
 8003c8a:	d03c      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0xf6>
 8003c8c:	2b50      	cmp	r3, #80	; 0x50
 8003c8e:	d873      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x168>
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d058      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x136>
 8003c94:	2b40      	cmp	r3, #64	; 0x40
 8003c96:	d86f      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x168>
 8003c98:	2b30      	cmp	r3, #48	; 0x30
 8003c9a:	d064      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x156>
 8003c9c:	2b30      	cmp	r3, #48	; 0x30
 8003c9e:	d86b      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x168>
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d060      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x156>
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d867      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x168>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05c      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x156>
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d05a      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003cb0:	e062      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f000 f966 	bl	8003f92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	609a      	str	r2, [r3, #8]
      break;
 8003cde:	e04e      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6899      	ldr	r1, [r3, #8]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f000 f94f 	bl	8003f92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d02:	609a      	str	r2, [r3, #8]
      break;
 8003d04:	e03b      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f000 f8c6 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2150      	movs	r1, #80	; 0x50
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f91d 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003d24:	e02b      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f000 f8e4 	bl	8003f00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2160      	movs	r1, #96	; 0x60
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f90d 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003d44:	e01b      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f000 f8a6 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2140      	movs	r1, #64	; 0x40
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f8fd 	bl	8003f5e <TIM_ITRx_SetConfig>
      break;
 8003d64:	e00b      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f000 f8f4 	bl	8003f5e <TIM_ITRx_SetConfig>
        break;
 8003d76:	e002      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d78:	bf00      	nop
 8003d7a:	e000      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <TIM_Base_SetConfig+0xb8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00b      	beq.n	8003e10 <TIM_Base_SetConfig+0x30>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfe:	d007      	beq.n	8003e10 <TIM_Base_SetConfig+0x30>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <TIM_Base_SetConfig+0xbc>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d003      	beq.n	8003e10 <TIM_Base_SetConfig+0x30>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <TIM_Base_SetConfig+0xc0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d108      	bne.n	8003e22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <TIM_Base_SetConfig+0xb8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <TIM_Base_SetConfig+0x62>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e30:	d007      	beq.n	8003e42 <TIM_Base_SetConfig+0x62>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <TIM_Base_SetConfig+0xbc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_Base_SetConfig+0x62>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <TIM_Base_SetConfig+0xc0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d108      	bne.n	8003e54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <TIM_Base_SetConfig+0xb8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d103      	bne.n	8003e88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	615a      	str	r2, [r3, #20]
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800

08003ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 030a 	bic.w	r3, r3, #10
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f023 0210 	bic.w	r2, r3, #16
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	031b      	lsls	r3, r3, #12
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	621a      	str	r2, [r3, #32]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
 8003f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f043 0307 	orr.w	r3, r3, #7
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b087      	sub	sp, #28
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	021a      	lsls	r2, r3, #8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e046      	b.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a16      	ldr	r2, [pc, #88]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d009      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a10      	ldr	r2, [pc, #64]	; (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10c      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40000400 	.word	0x40000400
 8004088:	40000800 	.word	0x40000800

0800408c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr

0800409e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bc80      	pop	{r7}
 80040ae:	4770      	bx	lr

080040b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e03f      	b.n	8004142 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fe f85a 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	; 0x24
 80040e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f9a3 	bl	8004440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b08a      	sub	sp, #40	; 0x28
 800414e:	af02      	add	r7, sp, #8
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	603b      	str	r3, [r7, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b20      	cmp	r3, #32
 8004168:	d17c      	bne.n	8004264 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_UART_Transmit+0x2c>
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e075      	b.n	8004266 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004180:	2b01      	cmp	r3, #1
 8004182:	d101      	bne.n	8004188 <HAL_UART_Transmit+0x3e>
 8004184:	2302      	movs	r3, #2
 8004186:	e06e      	b.n	8004266 <HAL_UART_Transmit+0x11c>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2221      	movs	r2, #33	; 0x21
 800419a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800419e:	f7fe f953 	bl	8002448 <HAL_GetTick>
 80041a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	88fa      	ldrh	r2, [r7, #6]
 80041a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	88fa      	ldrh	r2, [r7, #6]
 80041ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b8:	d108      	bne.n	80041cc <HAL_UART_Transmit+0x82>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d104      	bne.n	80041cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	e003      	b.n	80041d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80041dc:	e02a      	b.n	8004234 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2180      	movs	r1, #128	; 0x80
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f8df 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e036      	b.n	8004266 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800420c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	3302      	adds	r3, #2
 8004212:	61bb      	str	r3, [r7, #24]
 8004214:	e007      	b.n	8004226 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	3301      	adds	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1cf      	bne.n	80041de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2200      	movs	r2, #0
 8004246:	2140      	movs	r1, #64	; 0x40
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f8af 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e006      	b.n	8004266 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004260:	2300      	movs	r3, #0
 8004262:	e000      	b.n	8004266 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004264:	2302      	movs	r3, #2
  }
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b08a      	sub	sp, #40	; 0x28
 8004272:	af02      	add	r7, sp, #8
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b20      	cmp	r3, #32
 800428c:	f040 8089 	bne.w	80043a2 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_UART_Receive+0x2e>
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e081      	b.n	80043a4 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Receive+0x40>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e07a      	b.n	80043a4 <HAL_UART_Receive+0x136>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2222      	movs	r2, #34	; 0x22
 80042c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042c4:	f7fe f8c0 	bl	8002448 <HAL_GetTick>
 80042c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	d108      	bne.n	80042f2 <HAL_UART_Receive+0x84>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d104      	bne.n	80042f2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	e003      	b.n	80042fa <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004302:	e043      	b.n	800438c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	9300      	str	r3, [sp, #0]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	2200      	movs	r2, #0
 800430c:	2120      	movs	r1, #32
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f84c 	bl	80043ac <UART_WaitOnFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e042      	b.n	80043a4 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10c      	bne.n	800433e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004330:	b29a      	uxth	r2, r3
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	3302      	adds	r3, #2
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	e01f      	b.n	800437e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d007      	beq.n	8004358 <HAL_UART_Receive+0xea>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <HAL_UART_Receive+0xf8>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d106      	bne.n	8004366 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	701a      	strb	r2, [r3, #0]
 8004364:	e008      	b.n	8004378 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004372:	b2da      	uxtb	r2, r3
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	3301      	adds	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1b6      	bne.n	8004304 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043bc:	e02c      	b.n	8004418 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d028      	beq.n	8004418 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d007      	beq.n	80043dc <UART_WaitOnFlagUntilTimeout+0x30>
 80043cc:	f7fe f83c 	bl	8002448 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d21d      	bcs.n	8004418 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0201 	bic.w	r2, r2, #1
 80043fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e00f      	b.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4013      	ands	r3, r2
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	429a      	cmp	r2, r3
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	461a      	mov	r2, r3
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	429a      	cmp	r2, r3
 8004434:	d0c3      	beq.n	80043be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800447a:	f023 030c 	bic.w	r3, r3, #12
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	430b      	orrs	r3, r1
 8004486:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2c      	ldr	r2, [pc, #176]	; (8004554 <UART_SetConfig+0x114>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d103      	bne.n	80044b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7ff f880 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	e002      	b.n	80044b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044b0:	f7ff f868 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 80044b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009a      	lsls	r2, r3, #2
 80044c0:	441a      	add	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	4a22      	ldr	r2, [pc, #136]	; (8004558 <UART_SetConfig+0x118>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	0119      	lsls	r1, r3, #4
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009a      	lsls	r2, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <UART_SetConfig+0x118>)
 80044ee:	fba3 0302 	umull	r0, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	2064      	movs	r0, #100	; 0x64
 80044f6:	fb00 f303 	mul.w	r3, r0, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	3332      	adds	r3, #50	; 0x32
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <UART_SetConfig+0x118>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800450c:	4419      	add	r1, r3
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009a      	lsls	r2, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fbb2 f2f3 	udiv	r2, r2, r3
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <UART_SetConfig+0x118>)
 8004526:	fba3 0302 	umull	r0, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2064      	movs	r0, #100	; 0x64
 800452e:	fb00 f303 	mul.w	r3, r0, r3
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a07      	ldr	r2, [pc, #28]	; (8004558 <UART_SetConfig+0x118>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 020f 	and.w	r2, r3, #15
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	440a      	add	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40013800 	.word	0x40013800
 8004558:	51eb851f 	.word	0x51eb851f

0800455c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004562:	f3ef 8305 	mrs	r3, IPSR
 8004566:	60bb      	str	r3, [r7, #8]
  return(result);
 8004568:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456e:	f3ef 8310 	mrs	r3, PRIMASK
 8004572:	607b      	str	r3, [r7, #4]
  return(result);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <osKernelInitialize+0x32>
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <osKernelInitialize+0x60>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d109      	bne.n	8004596 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004582:	f3ef 8311 	mrs	r3, BASEPRI
 8004586:	603b      	str	r3, [r7, #0]
  return(result);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800458e:	f06f 0305 	mvn.w	r3, #5
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	e00c      	b.n	80045b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <osKernelInitialize+0x60>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d105      	bne.n	80045aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <osKernelInitialize+0x60>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e002      	b.n	80045b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80045aa:	f04f 33ff 	mov.w	r3, #4294967295
 80045ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045b0:	68fb      	ldr	r3, [r7, #12]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	2000002c 	.word	0x2000002c

080045c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c6:	f3ef 8305 	mrs	r3, IPSR
 80045ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80045cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d2:	f3ef 8310 	mrs	r3, PRIMASK
 80045d6:	607b      	str	r3, [r7, #4]
  return(result);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <osKernelStart+0x32>
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <osKernelStart+0x64>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d109      	bne.n	80045fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045e6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ea:	603b      	str	r3, [r7, #0]
  return(result);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80045f2:	f06f 0305 	mvn.w	r3, #5
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e00e      	b.n	8004618 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80045fa:	4b0a      	ldr	r3, [pc, #40]	; (8004624 <osKernelStart+0x64>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <osKernelStart+0x64>)
 8004604:	2202      	movs	r2, #2
 8004606:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004608:	f001 faa2 	bl	8005b50 <vTaskStartScheduler>
      stat = osOK;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e002      	b.n	8004618 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004612:	f04f 33ff 	mov.w	r3, #4294967295
 8004616:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004618:	68fb      	ldr	r3, [r7, #12]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	2000002c 	.word	0x2000002c

08004628 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004628:	b580      	push	{r7, lr}
 800462a:	b092      	sub	sp, #72	; 0x48
 800462c:	af04      	add	r7, sp, #16
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004638:	f3ef 8305 	mrs	r3, IPSR
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004640:	2b00      	cmp	r3, #0
 8004642:	f040 8094 	bne.w	800476e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004646:	f3ef 8310 	mrs	r3, PRIMASK
 800464a:	623b      	str	r3, [r7, #32]
  return(result);
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 808d 	bne.w	800476e <osThreadNew+0x146>
 8004654:	4b48      	ldr	r3, [pc, #288]	; (8004778 <osThreadNew+0x150>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d106      	bne.n	800466a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800465c:	f3ef 8311 	mrs	r3, BASEPRI
 8004660:	61fb      	str	r3, [r7, #28]
  return(result);
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 8082 	bne.w	800476e <osThreadNew+0x146>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d07e      	beq.n	800476e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004674:	2318      	movs	r3, #24
 8004676:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004678:	2300      	movs	r3, #0
 800467a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800467c:	f107 031b 	add.w	r3, r7, #27
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004682:	f04f 33ff 	mov.w	r3, #4294967295
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d045      	beq.n	800471a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <osThreadNew+0x74>
        name = attr->name;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <osThreadNew+0x9a>
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	2b38      	cmp	r3, #56	; 0x38
 80046b4:	d805      	bhi.n	80046c2 <osThreadNew+0x9a>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <osThreadNew+0x9e>
        return (NULL);
 80046c2:	2300      	movs	r3, #0
 80046c4:	e054      	b.n	8004770 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00e      	beq.n	80046fc <osThreadNew+0xd4>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b5b      	cmp	r3, #91	; 0x5b
 80046e4:	d90a      	bls.n	80046fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <osThreadNew+0xd4>
        mem = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fa:	e010      	b.n	800471e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10c      	bne.n	800471e <osThreadNew+0xf6>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d108      	bne.n	800471e <osThreadNew+0xf6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <osThreadNew+0xf6>
          mem = 0;
 8004714:	2300      	movs	r3, #0
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
 8004718:	e001      	b.n	800471e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2b01      	cmp	r3, #1
 8004722:	d110      	bne.n	8004746 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800472c:	9202      	str	r2, [sp, #8]
 800472e:	9301      	str	r3, [sp, #4]
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004738:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f001 f83c 	bl	80057b8 <xTaskCreateStatic>
 8004740:	4603      	mov	r3, r0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	e013      	b.n	800476e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	d110      	bne.n	800476e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	b29a      	uxth	r2, r3
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f001 f886 	bl	8005870 <xTaskCreate>
 8004764:	4603      	mov	r3, r0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <osThreadNew+0x146>
          hTask = NULL;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800476e:	697b      	ldr	r3, [r7, #20]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3738      	adds	r7, #56	; 0x38
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2000002c 	.word	0x2000002c

0800477c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004784:	f3ef 8305 	mrs	r3, IPSR
 8004788:	613b      	str	r3, [r7, #16]
  return(result);
 800478a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10f      	bne.n	80047b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004790:	f3ef 8310 	mrs	r3, PRIMASK
 8004794:	60fb      	str	r3, [r7, #12]
  return(result);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <osDelay+0x34>
 800479c:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <osDelay+0x58>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d109      	bne.n	80047b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047a4:	f3ef 8311 	mrs	r3, BASEPRI
 80047a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <osDelay+0x3c>
    stat = osErrorISR;
 80047b0:	f06f 0305 	mvn.w	r3, #5
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e007      	b.n	80047c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f001 f990 	bl	8005ae8 <vTaskDelay>
    }
  }

  return (stat);
 80047c8:	697b      	ldr	r3, [r7, #20]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	2000002c 	.word	0x2000002c

080047d8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08c      	sub	sp, #48	; 0x30
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e8:	f3ef 8305 	mrs	r3, IPSR
 80047ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80047ee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d16f      	bne.n	80048d4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f4:	f3ef 8310 	mrs	r3, PRIMASK
 80047f8:	617b      	str	r3, [r7, #20]
  return(result);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d169      	bne.n	80048d4 <osMessageQueueNew+0xfc>
 8004800:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <osMessageQueueNew+0x108>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d105      	bne.n	8004814 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004808:	f3ef 8311 	mrs	r3, BASEPRI
 800480c:	613b      	str	r3, [r7, #16]
  return(result);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d15f      	bne.n	80048d4 <osMessageQueueNew+0xfc>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d05c      	beq.n	80048d4 <osMessageQueueNew+0xfc>
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d059      	beq.n	80048d4 <osMessageQueueNew+0xfc>
    mem = -1;
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d029      	beq.n	8004880 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <osMessageQueueNew+0x82>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b4f      	cmp	r3, #79	; 0x4f
 800483a:	d90e      	bls.n	800485a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695a      	ldr	r2, [r3, #20]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	429a      	cmp	r2, r3
 8004852:	d302      	bcc.n	800485a <osMessageQueueNew+0x82>
        mem = 1;
 8004854:	2301      	movs	r3, #1
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	e014      	b.n	8004884 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d110      	bne.n	8004884 <osMessageQueueNew+0xac>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10c      	bne.n	8004884 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800486e:	2b00      	cmp	r3, #0
 8004870:	d108      	bne.n	8004884 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d104      	bne.n	8004884 <osMessageQueueNew+0xac>
          mem = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	623b      	str	r3, [r7, #32]
 800487e:	e001      	b.n	8004884 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d10b      	bne.n	80048a2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2100      	movs	r1, #0
 8004894:	9100      	str	r1, [sp, #0]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fa53 	bl	8004d44 <xQueueGenericCreateStatic>
 800489e:	6278      	str	r0, [r7, #36]	; 0x24
 80048a0:	e008      	b.n	80048b4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80048a8:	2200      	movs	r2, #0
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 fac0 	bl	8004e32 <xQueueGenericCreate>
 80048b2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e001      	b.n	80048cc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048d0:	f000 ff16 	bl	8005700 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3728      	adds	r7, #40	; 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	2000002c 	.word	0x2000002c

080048e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048fc:	f3ef 8305 	mrs	r3, IPSR
 8004900:	61fb      	str	r3, [r7, #28]
  return(result);
 8004902:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004908:	f3ef 8310 	mrs	r3, PRIMASK
 800490c:	61bb      	str	r3, [r7, #24]
  return(result);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d109      	bne.n	8004928 <osMessageQueuePut+0x44>
 8004914:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <osMessageQueuePut+0xe0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d12e      	bne.n	800497a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800491c:	f3ef 8311 	mrs	r3, BASEPRI
 8004920:	617b      	str	r3, [r7, #20]
  return(result);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d028      	beq.n	800497a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <osMessageQueuePut+0x56>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <osMessageQueuePut+0x56>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800493a:	f06f 0303 	mvn.w	r3, #3
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004940:	e039      	b.n	80049b6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004946:	f107 0210 	add.w	r2, r7, #16
 800494a:	2300      	movs	r3, #0
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	6a38      	ldr	r0, [r7, #32]
 8004950:	f000 fbce 	bl	80050f0 <xQueueGenericSendFromISR>
 8004954:	4603      	mov	r3, r0
 8004956:	2b01      	cmp	r3, #1
 8004958:	d003      	beq.n	8004962 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800495a:	f06f 0302 	mvn.w	r3, #2
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004960:	e029      	b.n	80049b6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d026      	beq.n	80049b6 <osMessageQueuePut+0xd2>
 8004968:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <osMessageQueuePut+0xe4>)
 800496a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004978:	e01d      	b.n	80049b6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <osMessageQueuePut+0xa2>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004986:	f06f 0303 	mvn.w	r3, #3
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
 800498c:	e014      	b.n	80049b8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800498e:	2300      	movs	r3, #0
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	68b9      	ldr	r1, [r7, #8]
 8004994:	6a38      	ldr	r0, [r7, #32]
 8004996:	f000 faad 	bl	8004ef4 <xQueueGenericSend>
 800499a:	4603      	mov	r3, r0
 800499c:	2b01      	cmp	r3, #1
 800499e:	d00b      	beq.n	80049b8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80049a6:	f06f 0301 	mvn.w	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
 80049ac:	e004      	b.n	80049b8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80049ae:	f06f 0302 	mvn.w	r3, #2
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
 80049b4:	e000      	b.n	80049b8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80049b6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3728      	adds	r7, #40	; 0x28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	2000002c 	.word	0x2000002c
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e2:	f3ef 8305 	mrs	r3, IPSR
 80049e6:	61fb      	str	r3, [r7, #28]
  return(result);
 80049e8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10f      	bne.n	8004a0e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ee:	f3ef 8310 	mrs	r3, PRIMASK
 80049f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d109      	bne.n	8004a0e <osMessageQueueGet+0x42>
 80049fa:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <osMessageQueueGet+0xdc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d12e      	bne.n	8004a60 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a02:	f3ef 8311 	mrs	r3, BASEPRI
 8004a06:	617b      	str	r3, [r7, #20]
  return(result);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d028      	beq.n	8004a60 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <osMessageQueueGet+0x54>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <osMessageQueueGet+0x54>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004a20:	f06f 0303 	mvn.w	r3, #3
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a26:	e038      	b.n	8004a9a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004a2c:	f107 0310 	add.w	r3, r7, #16
 8004a30:	461a      	mov	r2, r3
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	6a38      	ldr	r0, [r7, #32]
 8004a36:	f000 fcd3 	bl	80053e0 <xQueueReceiveFromISR>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d003      	beq.n	8004a48 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004a40:	f06f 0302 	mvn.w	r3, #2
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a46:	e028      	b.n	8004a9a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d025      	beq.n	8004a9a <osMessageQueueGet+0xce>
 8004a4e:	4b17      	ldr	r3, [pc, #92]	; (8004aac <osMessageQueueGet+0xe0>)
 8004a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a5e:	e01c      	b.n	8004a9a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <osMessageQueueGet+0xa0>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d103      	bne.n	8004a74 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004a6c:	f06f 0303 	mvn.w	r3, #3
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
 8004a72:	e013      	b.n	8004a9c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	6a38      	ldr	r0, [r7, #32]
 8004a7a:	f000 fbd1 	bl	8005220 <xQueueReceive>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d00b      	beq.n	8004a9c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004a8a:	f06f 0301 	mvn.w	r3, #1
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a90:	e004      	b.n	8004a9c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004a92:	f06f 0302 	mvn.w	r3, #2
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
 8004a98:	e000      	b.n	8004a9c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a9a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3728      	adds	r7, #40	; 0x28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	2000002c 	.word	0x2000002c
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a06      	ldr	r2, [pc, #24]	; (8004ad8 <vApplicationGetIdleTaskMemory+0x28>)
 8004ac0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a05      	ldr	r2, [pc, #20]	; (8004adc <vApplicationGetIdleTaskMemory+0x2c>)
 8004ac6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	601a      	str	r2, [r3, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr
 8004ad8:	20000030 	.word	0x20000030
 8004adc:	2000008c 	.word	0x2000008c

08004ae0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <vApplicationGetTimerTaskMemory+0x2c>)
 8004af0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4a06      	ldr	r2, [pc, #24]	; (8004b10 <vApplicationGetTimerTaskMemory+0x30>)
 8004af6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004afe:	601a      	str	r2, [r3, #0]
}
 8004b00:	bf00      	nop
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	2000028c 	.word	0x2000028c
 8004b10:	200002e8 	.word	0x200002e8

08004b14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f103 0208 	add.w	r2, r3, #8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f04f 32ff 	mov.w	r2, #4294967295
 8004b2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f103 0208 	add.w	r2, r3, #8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f103 0208 	add.w	r2, r3, #8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
 8004b72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	601a      	str	r2, [r3, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc6:	d103      	bne.n	8004bd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e00c      	b.n	8004bea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	e002      	b.n	8004bde <vListInsert+0x2e>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d2f6      	bcs.n	8004bd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	601a      	str	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6892      	ldr	r2, [r2, #8]
 8004c36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6852      	ldr	r2, [r2, #4]
 8004c40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d103      	bne.n	8004c54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	1e5a      	subs	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
	...

08004c74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c9e:	f002 f885 	bl	8006dac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	68f9      	ldr	r1, [r7, #12]
 8004cac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cae:	fb01 f303 	mul.w	r3, r1, r3
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	441a      	add	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	22ff      	movs	r2, #255	; 0xff
 8004ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	22ff      	movs	r2, #255	; 0xff
 8004cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d114      	bne.n	8004d1e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01a      	beq.n	8004d32 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3310      	adds	r3, #16
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 f9af 	bl	8006064 <xTaskRemoveFromEventList>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d012      	beq.n	8004d32 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <xQueueGenericReset+0xcc>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	e009      	b.n	8004d32 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3310      	adds	r3, #16
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fef6 	bl	8004b14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3324      	adds	r3, #36	; 0x24
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fef1 	bl	8004b14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d32:	f002 f86b 	bl	8006e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d36:	2301      	movs	r3, #1
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	e000ed04 	.word	0xe000ed04

08004d44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08e      	sub	sp, #56	; 0x38
 8004d48:	af02      	add	r7, sp, #8
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <xQueueGenericCreateStatic+0x52>
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <xQueueGenericCreateStatic+0x56>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <xQueueGenericCreateStatic+0x58>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	623b      	str	r3, [r7, #32]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <xQueueGenericCreateStatic+0x7e>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <xQueueGenericCreateStatic+0x82>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <xQueueGenericCreateStatic+0x84>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	61fb      	str	r3, [r7, #28]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004de2:	2350      	movs	r3, #80	; 0x50
 8004de4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b50      	cmp	r3, #80	; 0x50
 8004dea:	d00a      	beq.n	8004e02 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	61bb      	str	r3, [r7, #24]
}
 8004dfe:	bf00      	nop
 8004e00:	e7fe      	b.n	8004e00 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68b9      	ldr	r1, [r7, #8]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f843 	bl	8004eae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3730      	adds	r7, #48	; 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b08a      	sub	sp, #40	; 0x28
 8004e36:	af02      	add	r7, sp, #8
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	60b9      	str	r1, [r7, #8]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	613b      	str	r3, [r7, #16]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	e004      	b.n	8004e72 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	fb02 f303 	mul.w	r3, r2, r3
 8004e70:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3350      	adds	r3, #80	; 0x50
 8004e76:	4618      	mov	r0, r3
 8004e78:	f002 f898 	bl	8006fac <pvPortMalloc>
 8004e7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00f      	beq.n	8004ea4 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	3350      	adds	r3, #80	; 0x50
 8004e88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e92:	79fa      	ldrb	r2, [r7, #7]
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f805 	bl	8004eae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
	}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	607a      	str	r2, [r7, #4]
 8004eba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e002      	b.n	8004ed0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004edc:	2101      	movs	r1, #1
 8004ede:	69b8      	ldr	r0, [r7, #24]
 8004ee0:	f7ff fec8 	bl	8004c74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08e      	sub	sp, #56	; 0x38
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f02:	2300      	movs	r3, #0
 8004f04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xQueueGenericSend+0x32>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d103      	bne.n	8004f34 <xQueueGenericSend+0x40>
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <xQueueGenericSend+0x44>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <xQueueGenericSend+0x46>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10a      	bne.n	8004f54 <xQueueGenericSend+0x60>
	__asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	f383 8811 	msr	BASEPRI, r3
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f50:	bf00      	nop
 8004f52:	e7fe      	b.n	8004f52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d103      	bne.n	8004f62 <xQueueGenericSend+0x6e>
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <xQueueGenericSend+0x72>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <xQueueGenericSend+0x74>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xQueueGenericSend+0x8e>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	623b      	str	r3, [r7, #32]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f82:	f001 fa31 	bl	80063e8 <xTaskGetSchedulerState>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <xQueueGenericSend+0x9e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <xQueueGenericSend+0xa2>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <xQueueGenericSend+0xa4>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	61fb      	str	r3, [r7, #28]
}
 8004fae:	bf00      	nop
 8004fb0:	e7fe      	b.n	8004fb0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fb2:	f001 fefb 	bl	8006dac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d302      	bcc.n	8004fc8 <xQueueGenericSend+0xd4>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d129      	bne.n	800501c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fce:	f000 fa87 	bl	80054e0 <prvCopyDataToQueue>
 8004fd2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 f83f 	bl	8006064 <xTaskRemoveFromEventList>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fec:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <xQueueGenericSend+0x1f8>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	e00a      	b.n	8005014 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005004:	4b39      	ldr	r3, [pc, #228]	; (80050ec <xQueueGenericSend+0x1f8>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005014:	f001 fefa 	bl	8006e0c <vPortExitCritical>
				return pdPASS;
 8005018:	2301      	movs	r3, #1
 800501a:	e063      	b.n	80050e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005022:	f001 fef3 	bl	8006e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005026:	2300      	movs	r3, #0
 8005028:	e05c      	b.n	80050e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800502a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	4618      	mov	r0, r3
 8005036:	f001 f879 	bl	800612c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800503a:	2301      	movs	r3, #1
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800503e:	f001 fee5 	bl	8006e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005042:	f000 fdeb 	bl	8005c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005046:	f001 feb1 	bl	8006dac <vPortEnterCritical>
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005050:	b25b      	sxtb	r3, r3
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d103      	bne.n	8005060 <xQueueGenericSend+0x16c>
 8005058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505a:	2200      	movs	r2, #0
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005066:	b25b      	sxtb	r3, r3
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d103      	bne.n	8005076 <xQueueGenericSend+0x182>
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005076:	f001 fec9 	bl	8006e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800507a:	1d3a      	adds	r2, r7, #4
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4611      	mov	r1, r2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f868 	bl	8006158 <xTaskCheckForTimeOut>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d124      	bne.n	80050d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800508e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005090:	f000 fb1e 	bl	80056d0 <prvIsQueueFull>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d018      	beq.n	80050cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	3310      	adds	r3, #16
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 ff8e 	bl	8005fc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050aa:	f000 faa9 	bl	8005600 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050ae:	f000 fdc3 	bl	8005c38 <xTaskResumeAll>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f47f af7c 	bne.w	8004fb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050ba:	4b0c      	ldr	r3, [pc, #48]	; (80050ec <xQueueGenericSend+0x1f8>)
 80050bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	f3bf 8f4f 	dsb	sy
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	e772      	b.n	8004fb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ce:	f000 fa97 	bl	8005600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050d2:	f000 fdb1 	bl	8005c38 <xTaskResumeAll>
 80050d6:	e76c      	b.n	8004fb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050da:	f000 fa91 	bl	8005600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050de:	f000 fdab 	bl	8005c38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050e2:	2300      	movs	r3, #0
		}
	}
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3738      	adds	r7, #56	; 0x38
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08e      	sub	sp, #56	; 0x38
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d103      	bne.n	800512c <xQueueGenericSendFromISR+0x3c>
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <xQueueGenericSendFromISR+0x40>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <xQueueGenericSendFromISR+0x42>
 8005130:	2300      	movs	r3, #0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	623b      	str	r3, [r7, #32]
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d103      	bne.n	800515a <xQueueGenericSendFromISR+0x6a>
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <xQueueGenericSendFromISR+0x6e>
 800515a:	2301      	movs	r3, #1
 800515c:	e000      	b.n	8005160 <xQueueGenericSendFromISR+0x70>
 800515e:	2300      	movs	r3, #0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61fb      	str	r3, [r7, #28]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800517a:	f001 fed9 	bl	8006f30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800517e:	f3ef 8211 	mrs	r2, BASEPRI
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	61ba      	str	r2, [r7, #24]
 8005194:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005196:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <xQueueGenericSendFromISR+0xbc>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d12c      	bne.n	8005206 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	68b9      	ldr	r1, [r7, #8]
 80051ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051bc:	f000 f990 	bl	80054e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d112      	bne.n	80051f0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	3324      	adds	r3, #36	; 0x24
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 ff44 	bl	8006064 <xTaskRemoveFromEventList>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00e      	beq.n	8005200 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00b      	beq.n	8005200 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e007      	b.n	8005200 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	b25a      	sxtb	r2, r3
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005200:	2301      	movs	r3, #1
 8005202:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005204:	e001      	b.n	800520a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005214:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005218:	4618      	mov	r0, r3
 800521a:	3738      	adds	r7, #56	; 0x38
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	; 0x30
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <xQueueReceive+0x30>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	623b      	str	r3, [r7, #32]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <xQueueReceive+0x3e>
 8005256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <xQueueReceive+0x42>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <xQueueReceive+0x44>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xQueueReceive+0x5e>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61fb      	str	r3, [r7, #28]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800527e:	f001 f8b3 	bl	80063e8 <xTaskGetSchedulerState>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <xQueueReceive+0x6e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <xQueueReceive+0x72>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <xQueueReceive+0x74>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueReceive+0x8e>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	61bb      	str	r3, [r7, #24]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ae:	f001 fd7d 	bl	8006dac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01f      	beq.n	80052fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c2:	f000 f977 	bl	80055b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	1e5a      	subs	r2, r3, #1
 80052ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00f      	beq.n	80052f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	3310      	adds	r3, #16
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fec2 	bl	8006064 <xTaskRemoveFromEventList>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052e6:	4b3d      	ldr	r3, [pc, #244]	; (80053dc <xQueueReceive+0x1bc>)
 80052e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052f6:	f001 fd89 	bl	8006e0c <vPortExitCritical>
				return pdPASS;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e069      	b.n	80053d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d103      	bne.n	800530c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005304:	f001 fd82 	bl	8006e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005308:	2300      	movs	r3, #0
 800530a:	e062      	b.n	80053d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005312:	f107 0310 	add.w	r3, r7, #16
 8005316:	4618      	mov	r0, r3
 8005318:	f000 ff08 	bl	800612c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800531c:	2301      	movs	r3, #1
 800531e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005320:	f001 fd74 	bl	8006e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005324:	f000 fc7a 	bl	8005c1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005328:	f001 fd40 	bl	8006dac <vPortEnterCritical>
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005332:	b25b      	sxtb	r3, r3
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d103      	bne.n	8005342 <xQueueReceive+0x122>
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005348:	b25b      	sxtb	r3, r3
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d103      	bne.n	8005358 <xQueueReceive+0x138>
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005358:	f001 fd58 	bl	8006e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800535c:	1d3a      	adds	r2, r7, #4
 800535e:	f107 0310 	add.w	r3, r7, #16
 8005362:	4611      	mov	r1, r2
 8005364:	4618      	mov	r0, r3
 8005366:	f000 fef7 	bl	8006158 <xTaskCheckForTimeOut>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d123      	bne.n	80053b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005372:	f000 f997 	bl	80056a4 <prvIsQueueEmpty>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d017      	beq.n	80053ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	3324      	adds	r3, #36	; 0x24
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4611      	mov	r1, r2
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fe1d 	bl	8005fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800538a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538c:	f000 f938 	bl	8005600 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005390:	f000 fc52 	bl	8005c38 <xTaskResumeAll>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d189      	bne.n	80052ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <xQueueReceive+0x1bc>)
 800539c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	e780      	b.n	80052ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ae:	f000 f927 	bl	8005600 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053b2:	f000 fc41 	bl	8005c38 <xTaskResumeAll>
 80053b6:	e77a      	b.n	80052ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ba:	f000 f921 	bl	8005600 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053be:	f000 fc3b 	bl	8005c38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c4:	f000 f96e 	bl	80056a4 <prvIsQueueEmpty>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f43f af6f 	beq.w	80052ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3730      	adds	r7, #48	; 0x30
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	e000ed04 	.word	0xe000ed04

080053e0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08e      	sub	sp, #56	; 0x38
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	623b      	str	r3, [r7, #32]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <xQueueReceiveFromISR+0x3a>
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <xQueueReceiveFromISR+0x3e>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <xQueueReceiveFromISR+0x40>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	61fb      	str	r3, [r7, #28]
}
 8005436:	bf00      	nop
 8005438:	e7fe      	b.n	8005438 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800543a:	f001 fd79 	bl	8006f30 <vPortValidateInterruptPriority>
	__asm volatile
 800543e:	f3ef 8211 	mrs	r2, BASEPRI
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	61ba      	str	r2, [r7, #24]
 8005454:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005456:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005458:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02f      	beq.n	80054c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800546c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005474:	f000 f89e 	bl	80055b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d112      	bne.n	80054b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d016      	beq.n	80054c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	3310      	adds	r3, #16
 8005496:	4618      	mov	r0, r3
 8005498:	f000 fde4 	bl	8006064 <xTaskRemoveFromEventList>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00e      	beq.n	80054c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00b      	beq.n	80054c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	e007      	b.n	80054c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80054b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054b4:	3301      	adds	r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	b25a      	sxtb	r2, r3
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80054c0:	2301      	movs	r3, #1
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
 80054c4:	e001      	b.n	80054ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f383 8811 	msr	BASEPRI, r3
}
 80054d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3738      	adds	r7, #56	; 0x38
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d14d      	bne.n	80055a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 ff8a 	bl	8006424 <xTaskPriorityDisinherit>
 8005510:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	e043      	b.n	80055a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d119      	bne.n	8005554 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6898      	ldr	r0, [r3, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	461a      	mov	r2, r3
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	f001 ff3a 	bl	80073a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	441a      	add	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	429a      	cmp	r2, r3
 8005548:	d32b      	bcc.n	80055a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	609a      	str	r2, [r3, #8]
 8005552:	e026      	b.n	80055a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	68d8      	ldr	r0, [r3, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	461a      	mov	r2, r3
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	f001 ff20 	bl	80073a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556c:	425b      	negs	r3, r3
 800556e:	441a      	add	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d207      	bcs.n	8005590 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	425b      	negs	r3, r3
 800558a:	441a      	add	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b02      	cmp	r3, #2
 8005594:	d105      	bne.n	80055a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	3b01      	subs	r3, #1
 80055a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055aa:	697b      	ldr	r3, [r7, #20]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d018      	beq.n	80055f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	441a      	add	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d303      	bcc.n	80055e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68d9      	ldr	r1, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	461a      	mov	r2, r3
 80055f2:	6838      	ldr	r0, [r7, #0]
 80055f4:	f001 fed6 	bl	80073a4 <memcpy>
	}
}
 80055f8:	bf00      	nop
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005608:	f001 fbd0 	bl	8006dac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005612:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005614:	e011      	b.n	800563a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d012      	beq.n	8005644 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3324      	adds	r3, #36	; 0x24
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fd1e 	bl	8006064 <xTaskRemoveFromEventList>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800562e:	f000 fdf5 	bl	800621c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	3b01      	subs	r3, #1
 8005636:	b2db      	uxtb	r3, r3
 8005638:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800563a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800563e:	2b00      	cmp	r3, #0
 8005640:	dce9      	bgt.n	8005616 <prvUnlockQueue+0x16>
 8005642:	e000      	b.n	8005646 <prvUnlockQueue+0x46>
					break;
 8005644:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	22ff      	movs	r2, #255	; 0xff
 800564a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800564e:	f001 fbdd 	bl	8006e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005652:	f001 fbab 	bl	8006dac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800565c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800565e:	e011      	b.n	8005684 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d012      	beq.n	800568e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3310      	adds	r3, #16
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fcf9 	bl	8006064 <xTaskRemoveFromEventList>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005678:	f000 fdd0 	bl	800621c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800567c:	7bbb      	ldrb	r3, [r7, #14]
 800567e:	3b01      	subs	r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005688:	2b00      	cmp	r3, #0
 800568a:	dce9      	bgt.n	8005660 <prvUnlockQueue+0x60>
 800568c:	e000      	b.n	8005690 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800568e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	22ff      	movs	r2, #255	; 0xff
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005698:	f001 fbb8 	bl	8006e0c <vPortExitCritical>
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056ac:	f001 fb7e 	bl	8006dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d102      	bne.n	80056be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e001      	b.n	80056c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056c2:	f001 fba3 	bl	8006e0c <vPortExitCritical>

	return xReturn;
 80056c6:	68fb      	ldr	r3, [r7, #12]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056d8:	f001 fb68 	bl	8006dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d102      	bne.n	80056ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e001      	b.n	80056f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056f2:	f001 fb8b 	bl	8006e0c <vPortExitCritical>

	return xReturn;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e014      	b.n	800573a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005710:	4a0e      	ldr	r2, [pc, #56]	; (800574c <vQueueAddToRegistry+0x4c>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800571c:	490b      	ldr	r1, [pc, #44]	; (800574c <vQueueAddToRegistry+0x4c>)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005726:	4a09      	ldr	r2, [pc, #36]	; (800574c <vQueueAddToRegistry+0x4c>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	4413      	add	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005732:	e006      	b.n	8005742 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3301      	adds	r3, #1
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b07      	cmp	r3, #7
 800573e:	d9e7      	bls.n	8005710 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	2000290c 	.word	0x2000290c

08005750 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005760:	f001 fb24 	bl	8006dac <vPortEnterCritical>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800576a:	b25b      	sxtb	r3, r3
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d103      	bne.n	800577a <vQueueWaitForMessageRestricted+0x2a>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005780:	b25b      	sxtb	r3, r3
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d103      	bne.n	8005790 <vQueueWaitForMessageRestricted+0x40>
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005790:	f001 fb3c 	bl	8006e0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	2b00      	cmp	r3, #0
 800579a:	d106      	bne.n	80057aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3324      	adds	r3, #36	; 0x24
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fc31 	bl	800600c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057aa:	6978      	ldr	r0, [r7, #20]
 80057ac:	f7ff ff28 	bl	8005600 <prvUnlockQueue>
	}
 80057b0:	bf00      	nop
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08e      	sub	sp, #56	; 0x38
 80057bc:	af04      	add	r7, sp, #16
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	623b      	str	r3, [r7, #32]
}
 80057de:	bf00      	nop
 80057e0:	e7fe      	b.n	80057e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <xTaskCreateStatic+0x46>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	61fb      	str	r3, [r7, #28]
}
 80057fa:	bf00      	nop
 80057fc:	e7fe      	b.n	80057fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057fe:	235c      	movs	r3, #92	; 0x5c
 8005800:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	2b5c      	cmp	r3, #92	; 0x5c
 8005806:	d00a      	beq.n	800581e <xTaskCreateStatic+0x66>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	61bb      	str	r3, [r7, #24]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800581e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01e      	beq.n	8005862 <xTaskCreateStatic+0xaa>
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01b      	beq.n	8005862 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005832:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	2202      	movs	r2, #2
 8005838:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800583c:	2300      	movs	r3, #0
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	9302      	str	r3, [sp, #8]
 8005844:	f107 0314 	add.w	r3, r7, #20
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f850 	bl	80058fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800585a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800585c:	f000 f8d4 	bl	8005a08 <prvAddNewTaskToReadyList>
 8005860:	e001      	b.n	8005866 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005866:	697b      	ldr	r3, [r7, #20]
	}
 8005868:	4618      	mov	r0, r3
 800586a:	3728      	adds	r7, #40	; 0x28
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08c      	sub	sp, #48	; 0x30
 8005874:	af04      	add	r7, sp, #16
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	4613      	mov	r3, r2
 800587e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4618      	mov	r0, r3
 8005886:	f001 fb91 	bl	8006fac <pvPortMalloc>
 800588a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005892:	205c      	movs	r0, #92	; 0x5c
 8005894:	f001 fb8a 	bl	8006fac <pvPortMalloc>
 8005898:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
 80058a6:	e005      	b.n	80058b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058a8:	6978      	ldr	r0, [r7, #20]
 80058aa:	f001 fc43 	bl	8007134 <vPortFree>
 80058ae:	e001      	b.n	80058b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058b0:	2300      	movs	r3, #0
 80058b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d017      	beq.n	80058ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	2300      	movs	r3, #0
 80058c6:	9303      	str	r3, [sp, #12]
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	9302      	str	r3, [sp, #8]
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	9301      	str	r3, [sp, #4]
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f80e 	bl	80058fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058de:	69f8      	ldr	r0, [r7, #28]
 80058e0:	f000 f892 	bl	8005a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058e4:	2301      	movs	r3, #1
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	e002      	b.n	80058f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295
 80058ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058f0:	69bb      	ldr	r3, [r7, #24]
	}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b088      	sub	sp, #32
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	461a      	mov	r2, r3
 8005912:	21a5      	movs	r1, #165	; 0xa5
 8005914:	f001 fd54 	bl	80073c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005922:	3b01      	subs	r3, #1
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <prvInitialiseNewTask+0x58>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	617b      	str	r3, [r7, #20]
}
 800594e:	bf00      	nop
 8005950:	e7fe      	b.n	8005950 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
 8005956:	e012      	b.n	800597e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	7819      	ldrb	r1, [r3, #0]
 8005960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	3334      	adds	r3, #52	; 0x34
 8005968:	460a      	mov	r2, r1
 800596a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	3301      	adds	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d9e9      	bls.n	8005958 <prvInitialiseNewTask+0x5e>
 8005984:	e000      	b.n	8005988 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005986:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b37      	cmp	r3, #55	; 0x37
 8005994:	d901      	bls.n	800599a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005996:	2337      	movs	r3, #55	; 0x37
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800599e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	2200      	movs	r2, #0
 80059aa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	3304      	adds	r3, #4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff f8ce 	bl	8004b52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	3318      	adds	r3, #24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f8c9 	bl	8004b52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	2200      	movs	r2, #0
 80059da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	68f9      	ldr	r1, [r7, #12]
 80059e8:	69b8      	ldr	r0, [r7, #24]
 80059ea:	f001 f8ef 	bl	8006bcc <pxPortInitialiseStack>
 80059ee:	4602      	mov	r2, r0
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a00:	bf00      	nop
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a10:	f001 f9cc 	bl	8006dac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a14:	4b2d      	ldr	r3, [pc, #180]	; (8005acc <prvAddNewTaskToReadyList+0xc4>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <prvAddNewTaskToReadyList+0xc4>)
 8005a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ad0 <prvAddNewTaskToReadyList+0xc8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a26:	4a2a      	ldr	r2, [pc, #168]	; (8005ad0 <prvAddNewTaskToReadyList+0xc8>)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a2c:	4b27      	ldr	r3, [pc, #156]	; (8005acc <prvAddNewTaskToReadyList+0xc4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d110      	bne.n	8005a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a34:	f000 fc16 	bl	8006264 <prvInitialiseTaskLists>
 8005a38:	e00d      	b.n	8005a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a3a:	4b26      	ldr	r3, [pc, #152]	; (8005ad4 <prvAddNewTaskToReadyList+0xcc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d109      	bne.n	8005a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a42:	4b23      	ldr	r3, [pc, #140]	; (8005ad0 <prvAddNewTaskToReadyList+0xc8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d802      	bhi.n	8005a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a50:	4a1f      	ldr	r2, [pc, #124]	; (8005ad0 <prvAddNewTaskToReadyList+0xc8>)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a56:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <prvAddNewTaskToReadyList+0xd0>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <prvAddNewTaskToReadyList+0xd0>)
 8005a5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a60:	4b1d      	ldr	r3, [pc, #116]	; (8005ad8 <prvAddNewTaskToReadyList+0xd0>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <prvAddNewTaskToReadyList+0xd4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d903      	bls.n	8005a7c <prvAddNewTaskToReadyList+0x74>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a18      	ldr	r2, [pc, #96]	; (8005adc <prvAddNewTaskToReadyList+0xd4>)
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <prvAddNewTaskToReadyList+0xd8>)
 8005a8a:	441a      	add	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f7ff f869 	bl	8004b6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a98:	f001 f9b8 	bl	8006e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <prvAddNewTaskToReadyList+0xcc>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00e      	beq.n	8005ac2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <prvAddNewTaskToReadyList+0xc8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d207      	bcs.n	8005ac2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <prvAddNewTaskToReadyList+0xdc>)
 8005ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000bbc 	.word	0x20000bbc
 8005ad0:	200006e8 	.word	0x200006e8
 8005ad4:	20000bc8 	.word	0x20000bc8
 8005ad8:	20000bd8 	.word	0x20000bd8
 8005adc:	20000bc4 	.word	0x20000bc4
 8005ae0:	200006ec 	.word	0x200006ec
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d017      	beq.n	8005b2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005afa:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <vTaskDelay+0x60>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <vTaskDelay+0x30>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	60bb      	str	r3, [r7, #8]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b18:	f000 f880 	bl	8005c1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fcee 	bl	8006500 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b24:	f000 f888 	bl	8005c38 <xTaskResumeAll>
 8005b28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b30:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <vTaskDelay+0x64>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000be4 	.word	0x20000be4
 8005b4c:	e000ed04 	.word	0xe000ed04

08005b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	; 0x28
 8005b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b5e:	463a      	mov	r2, r7
 8005b60:	1d39      	adds	r1, r7, #4
 8005b62:	f107 0308 	add.w	r3, r7, #8
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe ffa2 	bl	8004ab0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	9202      	str	r2, [sp, #8]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	2300      	movs	r3, #0
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	460a      	mov	r2, r1
 8005b7e:	4921      	ldr	r1, [pc, #132]	; (8005c04 <vTaskStartScheduler+0xb4>)
 8005b80:	4821      	ldr	r0, [pc, #132]	; (8005c08 <vTaskStartScheduler+0xb8>)
 8005b82:	f7ff fe19 	bl	80057b8 <xTaskCreateStatic>
 8005b86:	4603      	mov	r3, r0
 8005b88:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <vTaskStartScheduler+0xbc>)
 8005b8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b8c:	4b1f      	ldr	r3, [pc, #124]	; (8005c0c <vTaskStartScheduler+0xbc>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b94:	2301      	movs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	e001      	b.n	8005b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d102      	bne.n	8005baa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ba4:	f000 fd00 	bl	80065a8 <xTimerCreateTimerTask>
 8005ba8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d116      	bne.n	8005bde <vTaskStartScheduler+0x8e>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	613b      	str	r3, [r7, #16]
}
 8005bc2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <vTaskStartScheduler+0xc0>)
 8005bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bcc:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <vTaskStartScheduler+0xc4>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005bd2:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <vTaskStartScheduler+0xc8>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bd8:	f001 f876 	bl	8006cc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bdc:	e00e      	b.n	8005bfc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d10a      	bne.n	8005bfc <vTaskStartScheduler+0xac>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	60fb      	str	r3, [r7, #12]
}
 8005bf8:	bf00      	nop
 8005bfa:	e7fe      	b.n	8005bfa <vTaskStartScheduler+0xaa>
}
 8005bfc:	bf00      	nop
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	080074cc 	.word	0x080074cc
 8005c08:	08006235 	.word	0x08006235
 8005c0c:	20000be0 	.word	0x20000be0
 8005c10:	20000bdc 	.word	0x20000bdc
 8005c14:	20000bc8 	.word	0x20000bc8
 8005c18:	20000bc0 	.word	0x20000bc0

08005c1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c20:	4b04      	ldr	r3, [pc, #16]	; (8005c34 <vTaskSuspendAll+0x18>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	4a03      	ldr	r2, [pc, #12]	; (8005c34 <vTaskSuspendAll+0x18>)
 8005c28:	6013      	str	r3, [r2, #0]
}
 8005c2a:	bf00      	nop
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20000be4 	.word	0x20000be4

08005c38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c46:	4b42      	ldr	r3, [pc, #264]	; (8005d50 <xTaskResumeAll+0x118>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	603b      	str	r3, [r7, #0]
}
 8005c60:	bf00      	nop
 8005c62:	e7fe      	b.n	8005c62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c64:	f001 f8a2 	bl	8006dac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c68:	4b39      	ldr	r3, [pc, #228]	; (8005d50 <xTaskResumeAll+0x118>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	4a38      	ldr	r2, [pc, #224]	; (8005d50 <xTaskResumeAll+0x118>)
 8005c70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c72:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <xTaskResumeAll+0x118>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d162      	bne.n	8005d40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c7a:	4b36      	ldr	r3, [pc, #216]	; (8005d54 <xTaskResumeAll+0x11c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d05e      	beq.n	8005d40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c82:	e02f      	b.n	8005ce4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005c84:	4b34      	ldr	r3, [pc, #208]	; (8005d58 <xTaskResumeAll+0x120>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3318      	adds	r3, #24
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fe ffc5 	bl	8004c20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3304      	adds	r3, #4
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fe ffc0 	bl	8004c20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca4:	4b2d      	ldr	r3, [pc, #180]	; (8005d5c <xTaskResumeAll+0x124>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d903      	bls.n	8005cb4 <xTaskResumeAll+0x7c>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb0:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <xTaskResumeAll+0x124>)
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4a27      	ldr	r2, [pc, #156]	; (8005d60 <xTaskResumeAll+0x128>)
 8005cc2:	441a      	add	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f7fe ff4d 	bl	8004b6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <xTaskResumeAll+0x12c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d302      	bcc.n	8005ce4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005cde:	4b22      	ldr	r3, [pc, #136]	; (8005d68 <xTaskResumeAll+0x130>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ce4:	4b1c      	ldr	r3, [pc, #112]	; (8005d58 <xTaskResumeAll+0x120>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1cb      	bne.n	8005c84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cf2:	f000 fb55 	bl	80063a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cf6:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <xTaskResumeAll+0x134>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d010      	beq.n	8005d24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d02:	f000 f845 	bl	8005d90 <xTaskIncrementTick>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <xTaskResumeAll+0x130>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3b01      	subs	r3, #1
 8005d16:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f1      	bne.n	8005d02 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <xTaskResumeAll+0x134>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d24:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <xTaskResumeAll+0x130>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d30:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <xTaskResumeAll+0x138>)
 8005d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d40:	f001 f864 	bl	8006e0c <vPortExitCritical>

	return xAlreadyYielded;
 8005d44:	68bb      	ldr	r3, [r7, #8]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000be4 	.word	0x20000be4
 8005d54:	20000bbc 	.word	0x20000bbc
 8005d58:	20000b7c 	.word	0x20000b7c
 8005d5c:	20000bc4 	.word	0x20000bc4
 8005d60:	200006ec 	.word	0x200006ec
 8005d64:	200006e8 	.word	0x200006e8
 8005d68:	20000bd0 	.word	0x20000bd0
 8005d6c:	20000bcc 	.word	0x20000bcc
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d7a:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <xTaskGetTickCount+0x18>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d80:	687b      	ldr	r3, [r7, #4]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	20000bc0 	.word	0x20000bc0

08005d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d9a:	4b51      	ldr	r3, [pc, #324]	; (8005ee0 <xTaskIncrementTick+0x150>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f040 808e 	bne.w	8005ec0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005da4:	4b4f      	ldr	r3, [pc, #316]	; (8005ee4 <xTaskIncrementTick+0x154>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dac:	4a4d      	ldr	r2, [pc, #308]	; (8005ee4 <xTaskIncrementTick+0x154>)
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d120      	bne.n	8005dfa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005db8:	4b4b      	ldr	r3, [pc, #300]	; (8005ee8 <xTaskIncrementTick+0x158>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	603b      	str	r3, [r7, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	e7fe      	b.n	8005dd6 <xTaskIncrementTick+0x46>
 8005dd8:	4b43      	ldr	r3, [pc, #268]	; (8005ee8 <xTaskIncrementTick+0x158>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	4b43      	ldr	r3, [pc, #268]	; (8005eec <xTaskIncrementTick+0x15c>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a41      	ldr	r2, [pc, #260]	; (8005ee8 <xTaskIncrementTick+0x158>)
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	4a41      	ldr	r2, [pc, #260]	; (8005eec <xTaskIncrementTick+0x15c>)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	4b40      	ldr	r3, [pc, #256]	; (8005ef0 <xTaskIncrementTick+0x160>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <xTaskIncrementTick+0x160>)
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	f000 fad3 	bl	80063a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dfa:	4b3e      	ldr	r3, [pc, #248]	; (8005ef4 <xTaskIncrementTick+0x164>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d34e      	bcc.n	8005ea2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e04:	4b38      	ldr	r3, [pc, #224]	; (8005ee8 <xTaskIncrementTick+0x158>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <xTaskIncrementTick+0x82>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xTaskIncrementTick+0x84>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e18:	4b36      	ldr	r3, [pc, #216]	; (8005ef4 <xTaskIncrementTick+0x164>)
 8005e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1e:	601a      	str	r2, [r3, #0]
					break;
 8005e20:	e03f      	b.n	8005ea2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e22:	4b31      	ldr	r3, [pc, #196]	; (8005ee8 <xTaskIncrementTick+0x158>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d203      	bcs.n	8005e42 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e3a:	4a2e      	ldr	r2, [pc, #184]	; (8005ef4 <xTaskIncrementTick+0x164>)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6013      	str	r3, [r2, #0]
						break;
 8005e40:	e02f      	b.n	8005ea2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fe feea 	bl	8004c20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	3318      	adds	r3, #24
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fee1 	bl	8004c20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e62:	4b25      	ldr	r3, [pc, #148]	; (8005ef8 <xTaskIncrementTick+0x168>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d903      	bls.n	8005e72 <xTaskIncrementTick+0xe2>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	4a22      	ldr	r2, [pc, #136]	; (8005ef8 <xTaskIncrementTick+0x168>)
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	; (8005efc <xTaskIncrementTick+0x16c>)
 8005e80:	441a      	add	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f7fe fe6e 	bl	8004b6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e92:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <xTaskIncrementTick+0x170>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d3b3      	bcc.n	8005e04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea0:	e7b0      	b.n	8005e04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ea2:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <xTaskIncrementTick+0x170>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea8:	4914      	ldr	r1, [pc, #80]	; (8005efc <xTaskIncrementTick+0x16c>)
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d907      	bls.n	8005eca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e004      	b.n	8005eca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <xTaskIncrementTick+0x174>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	4a0f      	ldr	r2, [pc, #60]	; (8005f04 <xTaskIncrementTick+0x174>)
 8005ec8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005eca:	4b0f      	ldr	r3, [pc, #60]	; (8005f08 <xTaskIncrementTick+0x178>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ed6:	697b      	ldr	r3, [r7, #20]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000be4 	.word	0x20000be4
 8005ee4:	20000bc0 	.word	0x20000bc0
 8005ee8:	20000b74 	.word	0x20000b74
 8005eec:	20000b78 	.word	0x20000b78
 8005ef0:	20000bd4 	.word	0x20000bd4
 8005ef4:	20000bdc 	.word	0x20000bdc
 8005ef8:	20000bc4 	.word	0x20000bc4
 8005efc:	200006ec 	.word	0x200006ec
 8005f00:	200006e8 	.word	0x200006e8
 8005f04:	20000bcc 	.word	0x20000bcc
 8005f08:	20000bd0 	.word	0x20000bd0

08005f0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f12:	4b27      	ldr	r3, [pc, #156]	; (8005fb0 <vTaskSwitchContext+0xa4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d003      	beq.n	8005f22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f1a:	4b26      	ldr	r3, [pc, #152]	; (8005fb4 <vTaskSwitchContext+0xa8>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f20:	e041      	b.n	8005fa6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <vTaskSwitchContext+0xa8>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005f28:	4b23      	ldr	r3, [pc, #140]	; (8005fb8 <vTaskSwitchContext+0xac>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	60fb      	str	r3, [r7, #12]
 8005f2e:	e010      	b.n	8005f52 <vTaskSwitchContext+0x46>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10a      	bne.n	8005f4c <vTaskSwitchContext+0x40>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	607b      	str	r3, [r7, #4]
}
 8005f48:	bf00      	nop
 8005f4a:	e7fe      	b.n	8005f4a <vTaskSwitchContext+0x3e>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	491a      	ldr	r1, [pc, #104]	; (8005fbc <vTaskSwitchContext+0xb0>)
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	440b      	add	r3, r1
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0e4      	beq.n	8005f30 <vTaskSwitchContext+0x24>
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <vTaskSwitchContext+0xb0>)
 8005f72:	4413      	add	r3, r2
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	605a      	str	r2, [r3, #4]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	3308      	adds	r3, #8
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d104      	bne.n	8005f96 <vTaskSwitchContext+0x8a>
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	605a      	str	r2, [r3, #4]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <vTaskSwitchContext+0xb4>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	4a05      	ldr	r2, [pc, #20]	; (8005fb8 <vTaskSwitchContext+0xac>)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6013      	str	r3, [r2, #0]
}
 8005fa6:	bf00      	nop
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	20000be4 	.word	0x20000be4
 8005fb4:	20000bd0 	.word	0x20000bd0
 8005fb8:	20000bc4 	.word	0x20000bc4
 8005fbc:	200006ec 	.word	0x200006ec
 8005fc0:	200006e8 	.word	0x200006e8

08005fc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d10a      	bne.n	8005fea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	60fb      	str	r3, [r7, #12]
}
 8005fe6:	bf00      	nop
 8005fe8:	e7fe      	b.n	8005fe8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fea:	4b07      	ldr	r3, [pc, #28]	; (8006008 <vTaskPlaceOnEventList+0x44>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3318      	adds	r3, #24
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fe fddc 	bl	8004bb0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	6838      	ldr	r0, [r7, #0]
 8005ffc:	f000 fa80 	bl	8006500 <prvAddCurrentTaskToDelayedList>
}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	200006e8 	.word	0x200006e8

0800600c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	617b      	str	r3, [r7, #20]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006034:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <vTaskPlaceOnEventListRestricted+0x54>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	3318      	adds	r3, #24
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7fe fd94 	bl	8004b6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006048:	f04f 33ff 	mov.w	r3, #4294967295
 800604c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	68b8      	ldr	r0, [r7, #8]
 8006052:	f000 fa55 	bl	8006500 <prvAddCurrentTaskToDelayedList>
	}
 8006056:	bf00      	nop
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	200006e8 	.word	0x200006e8

08006064 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10a      	bne.n	8006090 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	60fb      	str	r3, [r7, #12]
}
 800608c:	bf00      	nop
 800608e:	e7fe      	b.n	800608e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	3318      	adds	r3, #24
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe fdc3 	bl	8004c20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800609a:	4b1e      	ldr	r3, [pc, #120]	; (8006114 <xTaskRemoveFromEventList+0xb0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d11d      	bne.n	80060de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fdba 	bl	8004c20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4b19      	ldr	r3, [pc, #100]	; (8006118 <xTaskRemoveFromEventList+0xb4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d903      	bls.n	80060c0 <xTaskRemoveFromEventList+0x5c>
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	4a16      	ldr	r2, [pc, #88]	; (8006118 <xTaskRemoveFromEventList+0xb4>)
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4a13      	ldr	r2, [pc, #76]	; (800611c <xTaskRemoveFromEventList+0xb8>)
 80060ce:	441a      	add	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3304      	adds	r3, #4
 80060d4:	4619      	mov	r1, r3
 80060d6:	4610      	mov	r0, r2
 80060d8:	f7fe fd47 	bl	8004b6a <vListInsertEnd>
 80060dc:	e005      	b.n	80060ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	3318      	adds	r3, #24
 80060e2:	4619      	mov	r1, r3
 80060e4:	480e      	ldr	r0, [pc, #56]	; (8006120 <xTaskRemoveFromEventList+0xbc>)
 80060e6:	f7fe fd40 	bl	8004b6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <xTaskRemoveFromEventList+0xc0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d905      	bls.n	8006104 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <xTaskRemoveFromEventList+0xc4>)
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e001      	b.n	8006108 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006108:	697b      	ldr	r3, [r7, #20]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000be4 	.word	0x20000be4
 8006118:	20000bc4 	.word	0x20000bc4
 800611c:	200006ec 	.word	0x200006ec
 8006120:	20000b7c 	.word	0x20000b7c
 8006124:	200006e8 	.word	0x200006e8
 8006128:	20000bd0 	.word	0x20000bd0

0800612c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <vTaskInternalSetTimeOutState+0x24>)
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <vTaskInternalSetTimeOutState+0x28>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	605a      	str	r2, [r3, #4]
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000bd4 	.word	0x20000bd4
 8006154:	20000bc0 	.word	0x20000bc0

08006158 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10a      	bne.n	800617e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	613b      	str	r3, [r7, #16]
}
 800617a:	bf00      	nop
 800617c:	e7fe      	b.n	800617c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	60fb      	str	r3, [r7, #12]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800619a:	f000 fe07 	bl	8006dac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800619e:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <xTaskCheckForTimeOut+0xbc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b6:	d102      	bne.n	80061be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	e023      	b.n	8006206 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <xTaskCheckForTimeOut+0xc0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d007      	beq.n	80061da <xTaskCheckForTimeOut+0x82>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d302      	bcc.n	80061da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061d4:	2301      	movs	r3, #1
 80061d6:	61fb      	str	r3, [r7, #28]
 80061d8:	e015      	b.n	8006206 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d20b      	bcs.n	80061fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ff9b 	bl	800612c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80061f6:	2300      	movs	r3, #0
 80061f8:	61fb      	str	r3, [r7, #28]
 80061fa:	e004      	b.n	8006206 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006202:	2301      	movs	r3, #1
 8006204:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006206:	f000 fe01 	bl	8006e0c <vPortExitCritical>

	return xReturn;
 800620a:	69fb      	ldr	r3, [r7, #28]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3720      	adds	r7, #32
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000bc0 	.word	0x20000bc0
 8006218:	20000bd4 	.word	0x20000bd4

0800621c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006220:	4b03      	ldr	r3, [pc, #12]	; (8006230 <vTaskMissedYield+0x14>)
 8006222:	2201      	movs	r2, #1
 8006224:	601a      	str	r2, [r3, #0]
}
 8006226:	bf00      	nop
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000bd0 	.word	0x20000bd0

08006234 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800623c:	f000 f852 	bl	80062e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006240:	4b06      	ldr	r3, [pc, #24]	; (800625c <prvIdleTask+0x28>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d9f9      	bls.n	800623c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006248:	4b05      	ldr	r3, [pc, #20]	; (8006260 <prvIdleTask+0x2c>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006258:	e7f0      	b.n	800623c <prvIdleTask+0x8>
 800625a:	bf00      	nop
 800625c:	200006ec 	.word	0x200006ec
 8006260:	e000ed04 	.word	0xe000ed04

08006264 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800626a:	2300      	movs	r3, #0
 800626c:	607b      	str	r3, [r7, #4]
 800626e:	e00c      	b.n	800628a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <prvInitialiseTaskLists+0x60>)
 800627c:	4413      	add	r3, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fc48 	bl	8004b14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3301      	adds	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b37      	cmp	r3, #55	; 0x37
 800628e:	d9ef      	bls.n	8006270 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006290:	480d      	ldr	r0, [pc, #52]	; (80062c8 <prvInitialiseTaskLists+0x64>)
 8006292:	f7fe fc3f 	bl	8004b14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006296:	480d      	ldr	r0, [pc, #52]	; (80062cc <prvInitialiseTaskLists+0x68>)
 8006298:	f7fe fc3c 	bl	8004b14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800629c:	480c      	ldr	r0, [pc, #48]	; (80062d0 <prvInitialiseTaskLists+0x6c>)
 800629e:	f7fe fc39 	bl	8004b14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062a2:	480c      	ldr	r0, [pc, #48]	; (80062d4 <prvInitialiseTaskLists+0x70>)
 80062a4:	f7fe fc36 	bl	8004b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062a8:	480b      	ldr	r0, [pc, #44]	; (80062d8 <prvInitialiseTaskLists+0x74>)
 80062aa:	f7fe fc33 	bl	8004b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062ae:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <prvInitialiseTaskLists+0x78>)
 80062b0:	4a05      	ldr	r2, [pc, #20]	; (80062c8 <prvInitialiseTaskLists+0x64>)
 80062b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <prvInitialiseTaskLists+0x7c>)
 80062b6:	4a05      	ldr	r2, [pc, #20]	; (80062cc <prvInitialiseTaskLists+0x68>)
 80062b8:	601a      	str	r2, [r3, #0]
}
 80062ba:	bf00      	nop
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	200006ec 	.word	0x200006ec
 80062c8:	20000b4c 	.word	0x20000b4c
 80062cc:	20000b60 	.word	0x20000b60
 80062d0:	20000b7c 	.word	0x20000b7c
 80062d4:	20000b90 	.word	0x20000b90
 80062d8:	20000ba8 	.word	0x20000ba8
 80062dc:	20000b74 	.word	0x20000b74
 80062e0:	20000b78 	.word	0x20000b78

080062e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062ea:	e019      	b.n	8006320 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80062ec:	f000 fd5e 	bl	8006dac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80062f0:	4b10      	ldr	r3, [pc, #64]	; (8006334 <prvCheckTasksWaitingTermination+0x50>)
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fc8f 	bl	8004c20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006302:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <prvCheckTasksWaitingTermination+0x54>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3b01      	subs	r3, #1
 8006308:	4a0b      	ldr	r2, [pc, #44]	; (8006338 <prvCheckTasksWaitingTermination+0x54>)
 800630a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800630c:	4b0b      	ldr	r3, [pc, #44]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3b01      	subs	r3, #1
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 8006314:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006316:	f000 fd79 	bl	8006e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f810 	bl	8006340 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <prvCheckTasksWaitingTermination+0x58>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e1      	bne.n	80062ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000b90 	.word	0x20000b90
 8006338:	20000bbc 	.word	0x20000bbc
 800633c:	20000ba4 	.word	0x20000ba4

08006340 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800634e:	2b00      	cmp	r3, #0
 8006350:	d108      	bne.n	8006364 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	4618      	mov	r0, r3
 8006358:	f000 feec 	bl	8007134 <vPortFree>
				vPortFree( pxTCB );
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fee9 	bl	8007134 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006362:	e018      	b.n	8006396 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800636a:	2b01      	cmp	r3, #1
 800636c:	d103      	bne.n	8006376 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 fee0 	bl	8007134 <vPortFree>
	}
 8006374:	e00f      	b.n	8006396 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800637c:	2b02      	cmp	r3, #2
 800637e:	d00a      	beq.n	8006396 <prvDeleteTCB+0x56>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <prvDeleteTCB+0x54>
	}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063a6:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <prvResetNextTaskUnblockTime+0x40>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <prvResetNextTaskUnblockTime+0x14>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <prvResetNextTaskUnblockTime+0x16>
 80063b4:	2300      	movs	r3, #0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d004      	beq.n	80063c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063ba:	4b0a      	ldr	r3, [pc, #40]	; (80063e4 <prvResetNextTaskUnblockTime+0x44>)
 80063bc:	f04f 32ff 	mov.w	r2, #4294967295
 80063c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063c2:	e008      	b.n	80063d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80063c4:	4b06      	ldr	r3, [pc, #24]	; (80063e0 <prvResetNextTaskUnblockTime+0x40>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <prvResetNextTaskUnblockTime+0x44>)
 80063d4:	6013      	str	r3, [r2, #0]
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr
 80063e0:	20000b74 	.word	0x20000b74
 80063e4:	20000bdc 	.word	0x20000bdc

080063e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <xTaskGetSchedulerState+0x34>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063f6:	2301      	movs	r3, #1
 80063f8:	607b      	str	r3, [r7, #4]
 80063fa:	e008      	b.n	800640e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <xTaskGetSchedulerState+0x38>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006404:	2302      	movs	r3, #2
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	e001      	b.n	800640e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800640a:	2300      	movs	r3, #0
 800640c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800640e:	687b      	ldr	r3, [r7, #4]
	}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000bc8 	.word	0x20000bc8
 8006420:	20000be4 	.word	0x20000be4

08006424 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d056      	beq.n	80064e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800643a:	4b2e      	ldr	r3, [pc, #184]	; (80064f4 <xTaskPriorityDisinherit+0xd0>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	429a      	cmp	r2, r3
 8006442:	d00a      	beq.n	800645a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	60fb      	str	r3, [r7, #12]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	60bb      	str	r3, [r7, #8]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	1e5a      	subs	r2, r3, #1
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800648a:	429a      	cmp	r2, r3
 800648c:	d02c      	beq.n	80064e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006492:	2b00      	cmp	r3, #0
 8006494:	d128      	bne.n	80064e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	3304      	adds	r3, #4
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fbc0 	bl	8004c20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <xTaskPriorityDisinherit+0xd4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <xTaskPriorityDisinherit+0xa4>
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a0c      	ldr	r2, [pc, #48]	; (80064f8 <xTaskPriorityDisinherit+0xd4>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4a09      	ldr	r2, [pc, #36]	; (80064fc <xTaskPriorityDisinherit+0xd8>)
 80064d6:	441a      	add	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7fe fb43 	bl	8004b6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064e4:	2301      	movs	r3, #1
 80064e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064e8:	697b      	ldr	r3, [r7, #20]
	}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200006e8 	.word	0x200006e8
 80064f8:	20000bc4 	.word	0x20000bc4
 80064fc:	200006ec 	.word	0x200006ec

08006500 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800650a:	4b21      	ldr	r3, [pc, #132]	; (8006590 <prvAddCurrentTaskToDelayedList+0x90>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006510:	4b20      	ldr	r3, [pc, #128]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3304      	adds	r3, #4
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fb82 	bl	8004c20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006522:	d10a      	bne.n	800653a <prvAddCurrentTaskToDelayedList+0x3a>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800652a:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4819      	ldr	r0, [pc, #100]	; (8006598 <prvAddCurrentTaskToDelayedList+0x98>)
 8006534:	f7fe fb19 	bl	8004b6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006538:	e026      	b.n	8006588 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4413      	add	r3, r2
 8006540:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006542:	4b14      	ldr	r3, [pc, #80]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	429a      	cmp	r2, r3
 8006550:	d209      	bcs.n	8006566 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006552:	4b12      	ldr	r3, [pc, #72]	; (800659c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3304      	adds	r3, #4
 800655c:	4619      	mov	r1, r3
 800655e:	4610      	mov	r0, r2
 8006560:	f7fe fb26 	bl	8004bb0 <vListInsert>
}
 8006564:	e010      	b.n	8006588 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <prvAddCurrentTaskToDelayedList+0x94>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3304      	adds	r3, #4
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f7fe fb1c 	bl	8004bb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	429a      	cmp	r2, r3
 8006580:	d202      	bcs.n	8006588 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006582:	4a08      	ldr	r2, [pc, #32]	; (80065a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6013      	str	r3, [r2, #0]
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000bc0 	.word	0x20000bc0
 8006594:	200006e8 	.word	0x200006e8
 8006598:	20000ba8 	.word	0x20000ba8
 800659c:	20000b78 	.word	0x20000b78
 80065a0:	20000b74 	.word	0x20000b74
 80065a4:	20000bdc 	.word	0x20000bdc

080065a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065b2:	f000 facb 	bl	8006b4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065b6:	4b1c      	ldr	r3, [pc, #112]	; (8006628 <xTimerCreateTimerTask+0x80>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d021      	beq.n	8006602 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065c6:	1d3a      	adds	r2, r7, #4
 80065c8:	f107 0108 	add.w	r1, r7, #8
 80065cc:	f107 030c 	add.w	r3, r7, #12
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fa85 	bl	8004ae0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065d6:	6879      	ldr	r1, [r7, #4]
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	9202      	str	r2, [sp, #8]
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	2302      	movs	r3, #2
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	460a      	mov	r2, r1
 80065e8:	4910      	ldr	r1, [pc, #64]	; (800662c <xTimerCreateTimerTask+0x84>)
 80065ea:	4811      	ldr	r0, [pc, #68]	; (8006630 <xTimerCreateTimerTask+0x88>)
 80065ec:	f7ff f8e4 	bl	80057b8 <xTaskCreateStatic>
 80065f0:	4603      	mov	r3, r0
 80065f2:	4a10      	ldr	r2, [pc, #64]	; (8006634 <xTimerCreateTimerTask+0x8c>)
 80065f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <xTimerCreateTimerTask+0x8c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065fe:	2301      	movs	r3, #1
 8006600:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	613b      	str	r3, [r7, #16]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800661e:	697b      	ldr	r3, [r7, #20]
}
 8006620:	4618      	mov	r0, r3
 8006622:	3718      	adds	r7, #24
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000c18 	.word	0x20000c18
 800662c:	080074d4 	.word	0x080074d4
 8006630:	08006755 	.word	0x08006755
 8006634:	20000c1c 	.word	0x20000c1c

08006638 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006646:	2300      	movs	r3, #0
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	623b      	str	r3, [r7, #32]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <xTimerGenericCommand+0x98>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02a      	beq.n	80066c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b05      	cmp	r3, #5
 800667e:	dc18      	bgt.n	80066b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006680:	f7ff feb2 	bl	80063e8 <xTaskGetSchedulerState>
 8006684:	4603      	mov	r3, r0
 8006686:	2b02      	cmp	r3, #2
 8006688:	d109      	bne.n	800669e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800668a:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <xTimerGenericCommand+0x98>)
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f107 0110 	add.w	r1, r7, #16
 8006692:	2300      	movs	r3, #0
 8006694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006696:	f7fe fc2d 	bl	8004ef4 <xQueueGenericSend>
 800669a:	6278      	str	r0, [r7, #36]	; 0x24
 800669c:	e012      	b.n	80066c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800669e:	4b0c      	ldr	r3, [pc, #48]	; (80066d0 <xTimerGenericCommand+0x98>)
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	f107 0110 	add.w	r1, r7, #16
 80066a6:	2300      	movs	r3, #0
 80066a8:	2200      	movs	r2, #0
 80066aa:	f7fe fc23 	bl	8004ef4 <xQueueGenericSend>
 80066ae:	6278      	str	r0, [r7, #36]	; 0x24
 80066b0:	e008      	b.n	80066c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066b2:	4b07      	ldr	r3, [pc, #28]	; (80066d0 <xTimerGenericCommand+0x98>)
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	f107 0110 	add.w	r1, r7, #16
 80066ba:	2300      	movs	r3, #0
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	f7fe fd17 	bl	80050f0 <xQueueGenericSendFromISR>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3728      	adds	r7, #40	; 0x28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000c18 	.word	0x20000c18

080066d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af02      	add	r7, sp, #8
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066de:	4b1c      	ldr	r3, [pc, #112]	; (8006750 <prvProcessExpiredTimer+0x7c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe fa97 	bl	8004c20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d122      	bne.n	8006740 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	18d1      	adds	r1, r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	6978      	ldr	r0, [r7, #20]
 8006708:	f000 f8c8 	bl	800689c <prvInsertTimerInActiveList>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d016      	beq.n	8006740 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006712:	2300      	movs	r3, #0
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	2300      	movs	r3, #0
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	2100      	movs	r1, #0
 800671c:	6978      	ldr	r0, [r7, #20]
 800671e:	f7ff ff8b 	bl	8006638 <xTimerGenericCommand>
 8006722:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	60fb      	str	r3, [r7, #12]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	6978      	ldr	r0, [r7, #20]
 8006746:	4798      	blx	r3
}
 8006748:	bf00      	nop
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	20000c10 	.word	0x20000c10

08006754 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	4618      	mov	r0, r3
 8006762:	f000 f857 	bl	8006814 <prvGetNextExpireTime>
 8006766:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4619      	mov	r1, r3
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 f803 	bl	8006778 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006772:	f000 f8d5 	bl	8006920 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006776:	e7f1      	b.n	800675c <prvTimerTask+0x8>

08006778 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006782:	f7ff fa4b 	bl	8005c1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006786:	f107 0308 	add.w	r3, r7, #8
 800678a:	4618      	mov	r0, r3
 800678c:	f000 f866 	bl	800685c <prvSampleTimeNow>
 8006790:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d130      	bne.n	80067fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <prvProcessTimerOrBlockTask+0x3c>
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d806      	bhi.n	80067b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067a6:	f7ff fa47 	bl	8005c38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ff91 	bl	80066d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067b2:	e024      	b.n	80067fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d008      	beq.n	80067cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067ba:	4b13      	ldr	r3, [pc, #76]	; (8006808 <prvProcessTimerOrBlockTask+0x90>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067cc:	4b0f      	ldr	r3, [pc, #60]	; (800680c <prvProcessTimerOrBlockTask+0x94>)
 80067ce:	6818      	ldr	r0, [r3, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	4619      	mov	r1, r3
 80067da:	f7fe ffb9 	bl	8005750 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067de:	f7ff fa2b 	bl	8005c38 <xTaskResumeAll>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10a      	bne.n	80067fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067e8:	4b09      	ldr	r3, [pc, #36]	; (8006810 <prvProcessTimerOrBlockTask+0x98>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
}
 80067f8:	e001      	b.n	80067fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067fa:	f7ff fa1d 	bl	8005c38 <xTaskResumeAll>
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20000c14 	.word	0x20000c14
 800680c:	20000c18 	.word	0x20000c18
 8006810:	e000ed04 	.word	0xe000ed04

08006814 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800681c:	4b0e      	ldr	r3, [pc, #56]	; (8006858 <prvGetNextExpireTime+0x44>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d105      	bne.n	8006846 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800683a:	4b07      	ldr	r3, [pc, #28]	; (8006858 <prvGetNextExpireTime+0x44>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e001      	b.n	800684a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800684a:	68fb      	ldr	r3, [r7, #12]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000c10 	.word	0x20000c10

0800685c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006864:	f7ff fa86 	bl	8005d74 <xTaskGetTickCount>
 8006868:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800686a:	4b0b      	ldr	r3, [pc, #44]	; (8006898 <prvSampleTimeNow+0x3c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	429a      	cmp	r2, r3
 8006872:	d205      	bcs.n	8006880 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006874:	f000 f908 	bl	8006a88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e002      	b.n	8006886 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006886:	4a04      	ldr	r2, [pc, #16]	; (8006898 <prvSampleTimeNow+0x3c>)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800688c:	68fb      	ldr	r3, [r7, #12]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000c20 	.word	0x20000c20

0800689c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068ba:	68ba      	ldr	r2, [r7, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d812      	bhi.n	80068e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	1ad2      	subs	r2, r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e01b      	b.n	800690e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068d6:	4b10      	ldr	r3, [pc, #64]	; (8006918 <prvInsertTimerInActiveList+0x7c>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fe f965 	bl	8004bb0 <vListInsert>
 80068e6:	e012      	b.n	800690e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d206      	bcs.n	80068fe <prvInsertTimerInActiveList+0x62>
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d302      	bcc.n	80068fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068f8:	2301      	movs	r3, #1
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	e007      	b.n	800690e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068fe:	4b07      	ldr	r3, [pc, #28]	; (800691c <prvInsertTimerInActiveList+0x80>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3304      	adds	r3, #4
 8006906:	4619      	mov	r1, r3
 8006908:	4610      	mov	r0, r2
 800690a:	f7fe f951 	bl	8004bb0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800690e:	697b      	ldr	r3, [r7, #20]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000c14 	.word	0x20000c14
 800691c:	20000c10 	.word	0x20000c10

08006920 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08e      	sub	sp, #56	; 0x38
 8006924:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006926:	e09d      	b.n	8006a64 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	da18      	bge.n	8006960 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	3304      	adds	r3, #4
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	61fb      	str	r3, [r7, #28]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006956:	6850      	ldr	r0, [r2, #4]
 8006958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800695a:	6892      	ldr	r2, [r2, #8]
 800695c:	4611      	mov	r1, r2
 800695e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	db7d      	blt.n	8006a62 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe f952 	bl	8004c20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800697c:	463b      	mov	r3, r7
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff ff6c 	bl	800685c <prvSampleTimeNow>
 8006984:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2b09      	cmp	r3, #9
 800698a:	d86b      	bhi.n	8006a64 <prvProcessReceivedCommands+0x144>
 800698c:	a201      	add	r2, pc, #4	; (adr r2, 8006994 <prvProcessReceivedCommands+0x74>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069bd 	.word	0x080069bd
 8006998:	080069bd 	.word	0x080069bd
 800699c:	080069bd 	.word	0x080069bd
 80069a0:	08006a65 	.word	0x08006a65
 80069a4:	08006a19 	.word	0x08006a19
 80069a8:	08006a51 	.word	0x08006a51
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069bd 	.word	0x080069bd
 80069b4:	08006a65 	.word	0x08006a65
 80069b8:	08006a19 	.word	0x08006a19
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	18d1      	adds	r1, r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ca:	f7ff ff67 	bl	800689c <prvInsertTimerInActiveList>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d047      	beq.n	8006a64 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069da:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d13f      	bne.n	8006a64 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	441a      	add	r2, r3
 80069ec:	2300      	movs	r3, #0
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	2300      	movs	r3, #0
 80069f2:	2100      	movs	r1, #0
 80069f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f6:	f7ff fe1f 	bl	8006638 <xTimerGenericCommand>
 80069fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d130      	bne.n	8006a64 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	61bb      	str	r3, [r7, #24]
}
 8006a14:	bf00      	nop
 8006a16:	e7fe      	b.n	8006a16 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	617b      	str	r3, [r7, #20]
}
 8006a38:	bf00      	nop
 8006a3a:	e7fe      	b.n	8006a3a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	699a      	ldr	r2, [r3, #24]
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	18d1      	adds	r1, r2, r3
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a4a:	f7ff ff27 	bl	800689c <prvInsertTimerInActiveList>
					break;
 8006a4e:	e009      	b.n	8006a64 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a5c:	f000 fb6a 	bl	8007134 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a60:	e000      	b.n	8006a64 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a62:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <prvProcessReceivedCommands+0x164>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	1d39      	adds	r1, r7, #4
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe fbd7 	bl	8005220 <xQueueReceive>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f47f af57 	bne.w	8006928 <prvProcessReceivedCommands+0x8>
	}
}
 8006a7a:	bf00      	nop
 8006a7c:	bf00      	nop
 8006a7e:	3730      	adds	r7, #48	; 0x30
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000c18 	.word	0x20000c18

08006a88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a8e:	e045      	b.n	8006b1c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a90:	4b2c      	ldr	r3, [pc, #176]	; (8006b44 <prvSwitchTimerLists+0xbc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a9a:	4b2a      	ldr	r3, [pc, #168]	; (8006b44 <prvSwitchTimerLists+0xbc>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe f8b9 	bl	8004c20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d12e      	bne.n	8006b1c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d90e      	bls.n	8006aee <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <prvSwitchTimerLists+0xbc>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f7fe f862 	bl	8004bb0 <vListInsert>
 8006aec:	e016      	b.n	8006b1c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006aee:	2300      	movs	r3, #0
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	2100      	movs	r1, #0
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7ff fd9d 	bl	8006638 <xTimerGenericCommand>
 8006afe:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	f383 8811 	msr	BASEPRI, r3
 8006b0e:	f3bf 8f6f 	isb	sy
 8006b12:	f3bf 8f4f 	dsb	sy
 8006b16:	603b      	str	r3, [r7, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	e7fe      	b.n	8006b1a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <prvSwitchTimerLists+0xbc>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1b4      	bne.n	8006a90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b26:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <prvSwitchTimerLists+0xbc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <prvSwitchTimerLists+0xc0>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a04      	ldr	r2, [pc, #16]	; (8006b44 <prvSwitchTimerLists+0xbc>)
 8006b32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b34:	4a04      	ldr	r2, [pc, #16]	; (8006b48 <prvSwitchTimerLists+0xc0>)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	6013      	str	r3, [r2, #0]
}
 8006b3a:	bf00      	nop
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000c10 	.word	0x20000c10
 8006b48:	20000c14 	.word	0x20000c14

08006b4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b52:	f000 f92b 	bl	8006dac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b56:	4b15      	ldr	r3, [pc, #84]	; (8006bac <prvCheckForValidListAndQueue+0x60>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d120      	bne.n	8006ba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b5e:	4814      	ldr	r0, [pc, #80]	; (8006bb0 <prvCheckForValidListAndQueue+0x64>)
 8006b60:	f7fd ffd8 	bl	8004b14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b64:	4813      	ldr	r0, [pc, #76]	; (8006bb4 <prvCheckForValidListAndQueue+0x68>)
 8006b66:	f7fd ffd5 	bl	8004b14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b6a:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <prvCheckForValidListAndQueue+0x6c>)
 8006b6c:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <prvCheckForValidListAndQueue+0x64>)
 8006b6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b70:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <prvCheckForValidListAndQueue+0x70>)
 8006b72:	4a10      	ldr	r2, [pc, #64]	; (8006bb4 <prvCheckForValidListAndQueue+0x68>)
 8006b74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b76:	2300      	movs	r3, #0
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	4b11      	ldr	r3, [pc, #68]	; (8006bc0 <prvCheckForValidListAndQueue+0x74>)
 8006b7c:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <prvCheckForValidListAndQueue+0x78>)
 8006b7e:	2110      	movs	r1, #16
 8006b80:	200a      	movs	r0, #10
 8006b82:	f7fe f8df 	bl	8004d44 <xQueueGenericCreateStatic>
 8006b86:	4603      	mov	r3, r0
 8006b88:	4a08      	ldr	r2, [pc, #32]	; (8006bac <prvCheckForValidListAndQueue+0x60>)
 8006b8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b8c:	4b07      	ldr	r3, [pc, #28]	; (8006bac <prvCheckForValidListAndQueue+0x60>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <prvCheckForValidListAndQueue+0x60>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	490b      	ldr	r1, [pc, #44]	; (8006bc8 <prvCheckForValidListAndQueue+0x7c>)
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe fdb0 	bl	8005700 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ba0:	f000 f934 	bl	8006e0c <vPortExitCritical>
}
 8006ba4:	bf00      	nop
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000c18 	.word	0x20000c18
 8006bb0:	20000be8 	.word	0x20000be8
 8006bb4:	20000bfc 	.word	0x20000bfc
 8006bb8:	20000c10 	.word	0x20000c10
 8006bbc:	20000c14 	.word	0x20000c14
 8006bc0:	20000cc4 	.word	0x20000cc4
 8006bc4:	20000c24 	.word	0x20000c24
 8006bc8:	080074dc 	.word	0x080074dc

08006bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3b04      	subs	r3, #4
 8006bdc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3b04      	subs	r3, #4
 8006bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f023 0201 	bic.w	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3b04      	subs	r3, #4
 8006bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bfc:	4a08      	ldr	r2, [pc, #32]	; (8006c20 <pxPortInitialiseStack+0x54>)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3b14      	subs	r3, #20
 8006c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3b20      	subs	r3, #32
 8006c12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c14:	68fb      	ldr	r3, [r7, #12]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr
 8006c20:	08006c25 	.word	0x08006c25

08006c24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c2e:	4b12      	ldr	r3, [pc, #72]	; (8006c78 <prvTaskExitError+0x54>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d00a      	beq.n	8006c4e <prvTaskExitError+0x2a>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	60fb      	str	r3, [r7, #12]
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <prvTaskExitError+0x28>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60bb      	str	r3, [r7, #8]
}
 8006c60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c62:	bf00      	nop
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0fc      	beq.n	8006c64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	bf00      	nop
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	2000000c 	.word	0x2000000c
 8006c7c:	00000000 	.word	0x00000000

08006c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <pxCurrentTCBConst2>)
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	6808      	ldr	r0, [r1, #0]
 8006c86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006c8a:	f380 8809 	msr	PSP, r0
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f04f 0000 	mov.w	r0, #0
 8006c96:	f380 8811 	msr	BASEPRI, r0
 8006c9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006c9e:	4770      	bx	lr

08006ca0 <pxCurrentTCBConst2>:
 8006ca0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop

08006ca8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006ca8:	4806      	ldr	r0, [pc, #24]	; (8006cc4 <prvPortStartFirstTask+0x1c>)
 8006caa:	6800      	ldr	r0, [r0, #0]
 8006cac:	6800      	ldr	r0, [r0, #0]
 8006cae:	f380 8808 	msr	MSP, r0
 8006cb2:	b662      	cpsie	i
 8006cb4:	b661      	cpsie	f
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	df00      	svc	0
 8006cc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed08 	.word	0xe000ed08

08006cc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cce:	4b32      	ldr	r3, [pc, #200]	; (8006d98 <xPortStartScheduler+0xd0>)
 8006cd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	22ff      	movs	r2, #255	; 0xff
 8006cde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	4b2a      	ldr	r3, [pc, #168]	; (8006d9c <xPortStartScheduler+0xd4>)
 8006cf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cf6:	4b2a      	ldr	r3, [pc, #168]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006cf8:	2207      	movs	r2, #7
 8006cfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cfc:	e009      	b.n	8006d12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006cfe:	4b28      	ldr	r3, [pc, #160]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	4a26      	ldr	r2, [pc, #152]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d12:	78fb      	ldrb	r3, [r7, #3]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1a:	2b80      	cmp	r3, #128	; 0x80
 8006d1c:	d0ef      	beq.n	8006cfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d1e:	4b20      	ldr	r3, [pc, #128]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f1c3 0307 	rsb	r3, r3, #7
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d00a      	beq.n	8006d40 <xPortStartScheduler+0x78>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	60bb      	str	r3, [r7, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d40:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d4a:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d52:	4a13      	ldr	r2, [pc, #76]	; (8006da0 <xPortStartScheduler+0xd8>)
 8006d54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d5e:	4b11      	ldr	r3, [pc, #68]	; (8006da4 <xPortStartScheduler+0xdc>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <xPortStartScheduler+0xdc>)
 8006d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d6a:	4b0e      	ldr	r3, [pc, #56]	; (8006da4 <xPortStartScheduler+0xdc>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a0d      	ldr	r2, [pc, #52]	; (8006da4 <xPortStartScheduler+0xdc>)
 8006d70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d76:	f000 f8b9 	bl	8006eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <xPortStartScheduler+0xe0>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d80:	f7ff ff92 	bl	8006ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d84:	f7ff f8c2 	bl	8005f0c <vTaskSwitchContext>
	prvTaskExitError();
 8006d88:	f7ff ff4c 	bl	8006c24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	e000e400 	.word	0xe000e400
 8006d9c:	20000d14 	.word	0x20000d14
 8006da0:	20000d18 	.word	0x20000d18
 8006da4:	e000ed20 	.word	0xe000ed20
 8006da8:	2000000c 	.word	0x2000000c

08006dac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	607b      	str	r3, [r7, #4]
}
 8006dc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dc6:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <vPortEnterCritical+0x58>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	4a0d      	ldr	r2, [pc, #52]	; (8006e04 <vPortEnterCritical+0x58>)
 8006dce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <vPortEnterCritical+0x58>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d10f      	bne.n	8006df8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <vPortEnterCritical+0x5c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	603b      	str	r3, [r7, #0]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <vPortEnterCritical+0x4a>
	}
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	2000000c 	.word	0x2000000c
 8006e08:	e000ed04 	.word	0xe000ed04

08006e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e12:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <vPortExitCritical+0x4c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <vPortExitCritical+0x24>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	607b      	str	r3, [r7, #4]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <vPortExitCritical+0x4c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <vPortExitCritical+0x4c>)
 8006e38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e3a:	4b07      	ldr	r3, [pc, #28]	; (8006e58 <vPortExitCritical+0x4c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d105      	bne.n	8006e4e <vPortExitCritical+0x42>
 8006e42:	2300      	movs	r3, #0
 8006e44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	f383 8811 	msr	BASEPRI, r3
}
 8006e4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr
 8006e58:	2000000c 	.word	0x2000000c
 8006e5c:	00000000 	.word	0x00000000

08006e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e60:	f3ef 8009 	mrs	r0, PSP
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	4b0d      	ldr	r3, [pc, #52]	; (8006ea0 <pxCurrentTCBConst>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e70:	6010      	str	r0, [r2, #0]
 8006e72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006e76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e7a:	f380 8811 	msr	BASEPRI, r0
 8006e7e:	f7ff f845 	bl	8005f0c <vTaskSwitchContext>
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8811 	msr	BASEPRI, r0
 8006e8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006e8e:	6819      	ldr	r1, [r3, #0]
 8006e90:	6808      	ldr	r0, [r1, #0]
 8006e92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006e96:	f380 8809 	msr	PSP, r0
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	4770      	bx	lr

08006ea0 <pxCurrentTCBConst>:
 8006ea0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ea4:	bf00      	nop
 8006ea6:	bf00      	nop

08006ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	607b      	str	r3, [r7, #4]
}
 8006ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ec2:	f7fe ff65 	bl	8005d90 <xTaskIncrementTick>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <SysTick_Handler+0x40>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	f383 8811 	msr	BASEPRI, r3
}
 8006ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006eec:	b480      	push	{r7}
 8006eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <vPortSetupTimerInterrupt+0x30>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ef6:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <vPortSetupTimerInterrupt+0x34>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <vPortSetupTimerInterrupt+0x38>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a09      	ldr	r2, [pc, #36]	; (8006f28 <vPortSetupTimerInterrupt+0x3c>)
 8006f02:	fba2 2303 	umull	r2, r3, r2, r3
 8006f06:	099b      	lsrs	r3, r3, #6
 8006f08:	4a08      	ldr	r2, [pc, #32]	; (8006f2c <vPortSetupTimerInterrupt+0x40>)
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f0e:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <vPortSetupTimerInterrupt+0x30>)
 8006f10:	2207      	movs	r2, #7
 8006f12:	601a      	str	r2, [r3, #0]
}
 8006f14:	bf00      	nop
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	e000e010 	.word	0xe000e010
 8006f20:	e000e018 	.word	0xe000e018
 8006f24:	20000000 	.word	0x20000000
 8006f28:	10624dd3 	.word	0x10624dd3
 8006f2c:	e000e014 	.word	0xe000e014

08006f30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f36:	f3ef 8305 	mrs	r3, IPSR
 8006f3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b0f      	cmp	r3, #15
 8006f40:	d914      	bls.n	8006f6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f42:	4a16      	ldr	r2, [pc, #88]	; (8006f9c <vPortValidateInterruptPriority+0x6c>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f4c:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <vPortValidateInterruptPriority+0x70>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	7afa      	ldrb	r2, [r7, #11]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d20a      	bcs.n	8006f6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	607b      	str	r3, [r7, #4]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <vPortValidateInterruptPriority+0x74>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f74:	4b0c      	ldr	r3, [pc, #48]	; (8006fa8 <vPortValidateInterruptPriority+0x78>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d90a      	bls.n	8006f92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	603b      	str	r3, [r7, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <vPortValidateInterruptPriority+0x60>
	}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr
 8006f9c:	e000e3f0 	.word	0xe000e3f0
 8006fa0:	20000d14 	.word	0x20000d14
 8006fa4:	e000ed0c 	.word	0xe000ed0c
 8006fa8:	20000d18 	.word	0x20000d18

08006fac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b08a      	sub	sp, #40	; 0x28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006fb8:	f7fe fe30 	bl	8005c1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006fbc:	4b58      	ldr	r3, [pc, #352]	; (8007120 <pvPortMalloc+0x174>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006fc4:	f000 f910 	bl	80071e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006fc8:	4b56      	ldr	r3, [pc, #344]	; (8007124 <pvPortMalloc+0x178>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f040 808e 	bne.w	80070f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01d      	beq.n	8007018 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006fdc:	2208      	movs	r2, #8
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d014      	beq.n	8007018 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f023 0307 	bic.w	r3, r3, #7
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00a      	beq.n	8007018 <pvPortMalloc+0x6c>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	617b      	str	r3, [r7, #20]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d069      	beq.n	80070f2 <pvPortMalloc+0x146>
 800701e:	4b42      	ldr	r3, [pc, #264]	; (8007128 <pvPortMalloc+0x17c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	429a      	cmp	r2, r3
 8007026:	d864      	bhi.n	80070f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007028:	4b40      	ldr	r3, [pc, #256]	; (800712c <pvPortMalloc+0x180>)
 800702a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800702c:	4b3f      	ldr	r3, [pc, #252]	; (800712c <pvPortMalloc+0x180>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007032:	e004      	b.n	800703e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	429a      	cmp	r2, r3
 8007046:	d903      	bls.n	8007050 <pvPortMalloc+0xa4>
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f1      	bne.n	8007034 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007050:	4b33      	ldr	r3, [pc, #204]	; (8007120 <pvPortMalloc+0x174>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007056:	429a      	cmp	r2, r3
 8007058:	d04b      	beq.n	80070f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2208      	movs	r2, #8
 8007060:	4413      	add	r3, r2
 8007062:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	1ad2      	subs	r2, r2, r3
 8007074:	2308      	movs	r3, #8
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	429a      	cmp	r2, r3
 800707a:	d91f      	bls.n	80070bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800707c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4413      	add	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <pvPortMalloc+0xf8>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	613b      	str	r3, [r7, #16]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	1ad2      	subs	r2, r2, r3
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80070b6:	69b8      	ldr	r0, [r7, #24]
 80070b8:	f000 f8f8 	bl	80072ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80070bc:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <pvPortMalloc+0x17c>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	4a18      	ldr	r2, [pc, #96]	; (8007128 <pvPortMalloc+0x17c>)
 80070c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80070ca:	4b17      	ldr	r3, [pc, #92]	; (8007128 <pvPortMalloc+0x17c>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <pvPortMalloc+0x184>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d203      	bcs.n	80070de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <pvPortMalloc+0x17c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a15      	ldr	r2, [pc, #84]	; (8007130 <pvPortMalloc+0x184>)
 80070dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	4b10      	ldr	r3, [pc, #64]	; (8007124 <pvPortMalloc+0x178>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80070f2:	f7fe fda1 	bl	8005c38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <pvPortMalloc+0x16a>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <pvPortMalloc+0x168>
	return pvReturn;
 8007116:	69fb      	ldr	r3, [r7, #28]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	; 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	20002494 	.word	0x20002494
 8007124:	200024a0 	.word	0x200024a0
 8007128:	20002498 	.word	0x20002498
 800712c:	2000248c 	.word	0x2000248c
 8007130:	2000249c 	.word	0x2000249c

08007134 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d048      	beq.n	80071d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007146:	2308      	movs	r3, #8
 8007148:	425b      	negs	r3, r3
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	4413      	add	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	4b21      	ldr	r3, [pc, #132]	; (80071e0 <vPortFree+0xac>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <vPortFree+0x44>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	60fb      	str	r3, [r7, #12]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00a      	beq.n	8007196 <vPortFree+0x62>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60bb      	str	r3, [r7, #8]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <vPortFree+0xac>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d019      	beq.n	80071d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d115      	bne.n	80071d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	685a      	ldr	r2, [r3, #4]
 80071b0:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <vPortFree+0xac>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	43db      	mvns	r3, r3
 80071b6:	401a      	ands	r2, r3
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80071bc:	f7fe fd2e 	bl	8005c1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <vPortFree+0xb0>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	4a06      	ldr	r2, [pc, #24]	; (80071e4 <vPortFree+0xb0>)
 80071cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80071ce:	6938      	ldr	r0, [r7, #16]
 80071d0:	f000 f86c 	bl	80072ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80071d4:	f7fe fd30 	bl	8005c38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	200024a0 	.word	0x200024a0
 80071e4:	20002498 	.word	0x20002498

080071e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071ee:	f241 7370 	movw	r3, #6000	; 0x1770
 80071f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071f4:	4b27      	ldr	r3, [pc, #156]	; (8007294 <prvHeapInit+0xac>)
 80071f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3307      	adds	r3, #7
 8007206:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0307 	bic.w	r3, r3, #7
 800720e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	4a1f      	ldr	r2, [pc, #124]	; (8007294 <prvHeapInit+0xac>)
 8007218:	4413      	add	r3, r2
 800721a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007220:	4a1d      	ldr	r2, [pc, #116]	; (8007298 <prvHeapInit+0xb0>)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007226:	4b1c      	ldr	r3, [pc, #112]	; (8007298 <prvHeapInit+0xb0>)
 8007228:	2200      	movs	r2, #0
 800722a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	4413      	add	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007234:	2208      	movs	r2, #8
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0307 	bic.w	r3, r3, #7
 8007242:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a15      	ldr	r2, [pc, #84]	; (800729c <prvHeapInit+0xb4>)
 8007248:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800724a:	4b14      	ldr	r3, [pc, #80]	; (800729c <prvHeapInit+0xb4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2200      	movs	r2, #0
 8007250:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007252:	4b12      	ldr	r3, [pc, #72]	; (800729c <prvHeapInit+0xb4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	1ad2      	subs	r2, r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007268:	4b0c      	ldr	r3, [pc, #48]	; (800729c <prvHeapInit+0xb4>)
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	4a0a      	ldr	r2, [pc, #40]	; (80072a0 <prvHeapInit+0xb8>)
 8007276:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <prvHeapInit+0xbc>)
 800727e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <prvHeapInit+0xc0>)
 8007282:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007286:	601a      	str	r2, [r3, #0]
}
 8007288:	bf00      	nop
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	bc80      	pop	{r7}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	20000d1c 	.word	0x20000d1c
 8007298:	2000248c 	.word	0x2000248c
 800729c:	20002494 	.word	0x20002494
 80072a0:	2000249c 	.word	0x2000249c
 80072a4:	20002498 	.word	0x20002498
 80072a8:	200024a0 	.word	0x200024a0

080072ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80072b4:	4b27      	ldr	r3, [pc, #156]	; (8007354 <prvInsertBlockIntoFreeList+0xa8>)
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	e002      	b.n	80072c0 <prvInsertBlockIntoFreeList+0x14>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d8f7      	bhi.n	80072ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	4413      	add	r3, r2
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d108      	bne.n	80072ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	441a      	add	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	441a      	add	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d118      	bne.n	8007334 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <prvInsertBlockIntoFreeList+0xac>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	429a      	cmp	r2, r3
 800730c:	d00d      	beq.n	800732a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	441a      	add	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e008      	b.n	800733c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <prvInsertBlockIntoFreeList+0xac>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e003      	b.n	800733c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d002      	beq.n	800734a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr
 8007354:	2000248c 	.word	0x2000248c
 8007358:	20002494 	.word	0x20002494

0800735c <__libc_init_array>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	2600      	movs	r6, #0
 8007360:	4d0c      	ldr	r5, [pc, #48]	; (8007394 <__libc_init_array+0x38>)
 8007362:	4c0d      	ldr	r4, [pc, #52]	; (8007398 <__libc_init_array+0x3c>)
 8007364:	1b64      	subs	r4, r4, r5
 8007366:	10a4      	asrs	r4, r4, #2
 8007368:	42a6      	cmp	r6, r4
 800736a:	d109      	bne.n	8007380 <__libc_init_array+0x24>
 800736c:	f000 f830 	bl	80073d0 <_init>
 8007370:	2600      	movs	r6, #0
 8007372:	4d0a      	ldr	r5, [pc, #40]	; (800739c <__libc_init_array+0x40>)
 8007374:	4c0a      	ldr	r4, [pc, #40]	; (80073a0 <__libc_init_array+0x44>)
 8007376:	1b64      	subs	r4, r4, r5
 8007378:	10a4      	asrs	r4, r4, #2
 800737a:	42a6      	cmp	r6, r4
 800737c:	d105      	bne.n	800738a <__libc_init_array+0x2e>
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	f855 3b04 	ldr.w	r3, [r5], #4
 8007384:	4798      	blx	r3
 8007386:	3601      	adds	r6, #1
 8007388:	e7ee      	b.n	8007368 <__libc_init_array+0xc>
 800738a:	f855 3b04 	ldr.w	r3, [r5], #4
 800738e:	4798      	blx	r3
 8007390:	3601      	adds	r6, #1
 8007392:	e7f2      	b.n	800737a <__libc_init_array+0x1e>
 8007394:	08007688 	.word	0x08007688
 8007398:	08007688 	.word	0x08007688
 800739c:	08007688 	.word	0x08007688
 80073a0:	0800768c 	.word	0x0800768c

080073a4 <memcpy>:
 80073a4:	440a      	add	r2, r1
 80073a6:	4291      	cmp	r1, r2
 80073a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ac:	d100      	bne.n	80073b0 <memcpy+0xc>
 80073ae:	4770      	bx	lr
 80073b0:	b510      	push	{r4, lr}
 80073b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b6:	4291      	cmp	r1, r2
 80073b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073bc:	d1f9      	bne.n	80073b2 <memcpy+0xe>
 80073be:	bd10      	pop	{r4, pc}

080073c0 <memset>:
 80073c0:	4603      	mov	r3, r0
 80073c2:	4402      	add	r2, r0
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <memset+0xa>
 80073c8:	4770      	bx	lr
 80073ca:	f803 1b01 	strb.w	r1, [r3], #1
 80073ce:	e7f9      	b.n	80073c4 <memset+0x4>

080073d0 <_init>:
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d2:	bf00      	nop
 80073d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d6:	bc08      	pop	{r3}
 80073d8:	469e      	mov	lr, r3
 80073da:	4770      	bx	lr

080073dc <_fini>:
 80073dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073de:	bf00      	nop
 80073e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e2:	bc08      	pop	{r3}
 80073e4:	469e      	mov	lr, r3
 80073e6:	4770      	bx	lr
